
drone_eval_plat_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fc48  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a30  0801fe28  0801fe28  00020e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021858  08021858  00024c58  2**0
                  CONTENTS
  4 .ARM          00000008  08021858  08021858  00022858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021860  08021860  00024c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08021860  08021860  00022860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802186c  0802186c  0002286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001c58  20000000  08021870  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000186a0  20001c58  080234c8  00024c58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001a2f8  080234c8  000252f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024c58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be05  00000000  00000000  00024c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005df4  00000000  00000000  00050a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002018  00000000  00000000  00056888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018c4  00000000  00000000  000588a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f776  00000000  00000000  0005a164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e509  00000000  00000000  000898da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011beab  00000000  00000000  000b7de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001d3c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000992c  00000000  00000000  001d3cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001dd624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001c58 	.word	0x20001c58
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801fe10 	.word	0x0801fe10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001c5c 	.word	0x20001c5c
 800021c:	0801fe10 	.word	0x0801fe10

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <CalculateAccAngle>:
#include "CalculateAngle.h"

Struct_Angle Angle;

void CalculateAccAngle(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 8000ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  Angle->acc_roll  = atan(-MPU6050->acc_x / sqrt(pow(MPU6050->acc_y,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	edd3 7a04 	vldr	s15, [r3, #16]
 800100a:	eef1 7a67 	vneg.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fad0 	bl	80005b8 <__aeabi_f2d>
 8001018:	4604      	mov	r4, r0
 800101a:	460d      	mov	r5, r1
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fac9 	bl	80005b8 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001188 <CalculateAccAngle+0x190>
 800102e:	ec43 2b10 	vmov	d0, r2, r3
 8001032:	f01d fdc7 	bl	801ebc4 <pow>
 8001036:	ec59 8b10 	vmov	r8, r9, d0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff faba 	bl	80005b8 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001188 <CalculateAccAngle+0x190>
 800104c:	ec43 2b10 	vmov	d0, r2, r3
 8001050:	f01d fdb8 	bl	801ebc4 <pow>
 8001054:	ec53 2b10 	vmov	r2, r3, d0
 8001058:	4640      	mov	r0, r8
 800105a:	4649      	mov	r1, r9
 800105c:	f7ff f94e 	bl	80002fc <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	ec43 2b17 	vmov	d7, r2, r3
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	f01d fe18 	bl	801eca4 <sqrt>
 8001074:	ec53 2b10 	vmov	r2, r3, d0
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff fc1e 	bl	80008bc <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	ec43 2b17 	vmov	d7, r2, r3
 8001088:	eeb0 0a47 	vmov.f32	s0, s14
 800108c:	eef0 0a67 	vmov.f32	s1, s15
 8001090:	f01d fe36 	bl	801ed00 <atan>
 8001094:	ec51 0b10 	vmov	r0, r1, d0
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <CalculateAccAngle+0x1a0>)
 800109e:	f7ff fae3 	bl	8000668 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	a339      	add	r3, pc, #228	@ (adr r3, 8001190 <CalculateAccAngle+0x198>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fc04 	bl	80008bc <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd84 	bl	8000bc8 <__aeabi_d2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
  Angle->acc_pitch = atan(MPU6050->acc_y / sqrt(pow(MPU6050->acc_x,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa74 	bl	80005b8 <__aeabi_f2d>
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa6d 	bl	80005b8 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001188 <CalculateAccAngle+0x190>
 80010e6:	ec43 2b10 	vmov	d0, r2, r3
 80010ea:	f01d fd6b 	bl	801ebc4 <pow>
 80010ee:	ec59 8b10 	vmov	r8, r9, d0
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa5e 	bl	80005b8 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001188 <CalculateAccAngle+0x190>
 8001104:	ec43 2b10 	vmov	d0, r2, r3
 8001108:	f01d fd5c 	bl	801ebc4 <pow>
 800110c:	ec53 2b10 	vmov	r2, r3, d0
 8001110:	4640      	mov	r0, r8
 8001112:	4649      	mov	r1, r9
 8001114:	f7ff f8f2 	bl	80002fc <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	ec43 2b17 	vmov	d7, r2, r3
 8001120:	eeb0 0a47 	vmov.f32	s0, s14
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	f01d fdbc 	bl	801eca4 <sqrt>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fbc2 	bl	80008bc <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b17 	vmov	d7, r2, r3
 8001140:	eeb0 0a47 	vmov.f32	s0, s14
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	f01d fdda 	bl	801ed00 <atan>
 800114c:	ec51 0b10 	vmov	r0, r1, d0
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <CalculateAccAngle+0x1a0>)
 8001156:	f7ff fa87 	bl	8000668 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	a30b      	add	r3, pc, #44	@ (adr r3, 8001190 <CalculateAccAngle+0x198>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fba8 	bl	80008bc <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd28 	bl	8000bc8 <__aeabi_d2f>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]
  //  Angle->acc_yaw = atan(sqrt(pow(MPU6050->acc_x, 2) + pow(MPU6050->acc_y, 2)) / MPU6050->acc_z) * RADIAN_TO_DEGREE;
  //Can't use Angle->acc_yaw there is no reliability. It's based on my personal experimental view.
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001188:	00000000 	.word	0x00000000
 800118c:	40000000 	.word	0x40000000
 8001190:	00000000 	.word	0x00000000
 8001194:	400921fb 	.word	0x400921fb
 8001198:	40668000 	.word	0x40668000

0800119c <CalculateCompliFilter>:
  Angle->gyro_pitch += MPU6050->gyro_x * dt;
  Angle->gyro_yaw   += MPU6050->gyro_z * dt;
}

void CalculateCompliFilter(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  CalculateAccAngle(Angle, MPU6050); //Prepare Acc Angle before using Complimentary Filter.
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff25 	bl	8000ff8 <CalculateAccAngle>

  static float alpha = 0.96f;
  Angle->ComFilt_roll  = alpha*(MPU6050->gyro_y * dt + Angle->ComFilt_roll) + (1-alpha) * Angle->acc_roll;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <CalculateCompliFilter+0xc8>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <CalculateCompliFilter+0xcc>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <CalculateCompliFilter+0xcc>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a06 	vstr	s15, [r3, #24]
  Angle->ComFilt_pitch = alpha*(MPU6050->gyro_x * dt + Angle->ComFilt_pitch) + (1-alpha) * Angle->acc_pitch;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <CalculateCompliFilter+0xc8>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a07 	vldr	s15, [r3, #28]
 800120a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <CalculateCompliFilter+0xcc>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <CalculateCompliFilter+0xcc>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001222:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 7a01 	vldr	s15, [r3, #4]
 800122c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edc3 7a07 	vstr	s15, [r3, #28]
  Angle->ComFilt_yaw   = Angle->ComFilt_yaw + MPU6050->gyro_z * dt;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <CalculateCompliFilter+0xc8>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29a      	uxth	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2301      	movs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	21d0      	movs	r1, #208	@ 0xd0
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MPU6050_Writebyte+0x34>)
 8001292:	f003 fc05 	bl	8004aa0 <HAL_I2C_Mem_Write>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000cb1c 	.word	0x2000cb1c

080012a4 <MPU6050_Readbyte>:
{
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af04      	add	r7, sp, #16
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	21d0      	movs	r1, #208	@ 0xd0
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MPU6050_Readbyte+0x30>)
 80012c6:	f003 fcff 	bl	8004cc8 <HAL_I2C_Mem_Read>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000cb1c 	.word	0x2000cb1c

080012d8 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
 80012de:	4603      	mov	r3, r0
 80012e0:	603a      	str	r2, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	460b      	mov	r3, r1
 80012e6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2101      	movs	r1, #1
 80012f2:	9102      	str	r1, [sp, #8]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	21d0      	movs	r1, #208	@ 0xd0
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <MPU6050_Readbytes+0x34>)
 8001300:	f003 fce2 	bl	8004cc8 <HAL_I2C_Mem_Read>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000cb1c 	.word	0x2000cb1c

08001310 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  osDelay(50);
 8001316:	2032      	movs	r0, #50	@ 0x32
 8001318:	f008 fe8b 	bl	800a032 <osDelay>
  uint8_t who_am_i = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	707b      	strb	r3, [r7, #1]
  printf("Checking MPU6050...\n");
 8001320:	4843      	ldr	r0, [pc, #268]	@ (8001430 <MPU6050_Initialization+0x120>)
 8001322:	f01c fb67 	bl	801d9f4 <puts>

  MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8001326:	1c7b      	adds	r3, r7, #1
 8001328:	4619      	mov	r1, r3
 800132a:	2075      	movs	r0, #117	@ 0x75
 800132c:	f7ff ffba 	bl	80012a4 <MPU6050_Readbyte>
  if(who_am_i == 0x68)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b68      	cmp	r3, #104	@ 0x68
 8001334:	d105      	bne.n	8001342 <MPU6050_Initialization+0x32>
  {
    printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8001336:	787b      	ldrb	r3, [r7, #1]
 8001338:	4619      	mov	r1, r3
 800133a:	483e      	ldr	r0, [pc, #248]	@ (8001434 <MPU6050_Initialization+0x124>)
 800133c:	f01c faf2 	bl	801d924 <iprintf>
 8001340:	e00f      	b.n	8001362 <MPU6050_Initialization+0x52>
  }
  else
  {
    printf("ERROR!\n");
 8001342:	483d      	ldr	r0, [pc, #244]	@ (8001438 <MPU6050_Initialization+0x128>)
 8001344:	f01c fb56 	bl	801d9f4 <puts>
    printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	4619      	mov	r1, r3
 800134c:	483b      	ldr	r0, [pc, #236]	@ (800143c <MPU6050_Initialization+0x12c>)
 800134e:	f01c fae9 	bl	801d924 <iprintf>
    while(1)
    {
      printf("who am i error. Can not recognize mpu6050\n");
 8001352:	483b      	ldr	r0, [pc, #236]	@ (8001440 <MPU6050_Initialization+0x130>)
 8001354:	f01c fb4e 	bl	801d9f4 <puts>
      osDelay(100);
 8001358:	2064      	movs	r0, #100	@ 0x64
 800135a:	f008 fe6a 	bl	800a032 <osDelay>
      printf("who am i error. Can not recognize mpu6050\n");
 800135e:	bf00      	nop
 8001360:	e7f7      	b.n	8001352 <MPU6050_Initialization+0x42>
    }
  }

  //Reset the whole module before initialization
  MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	206b      	movs	r0, #107	@ 0x6b
 8001366:	f7ff ff81 	bl	800126c <MPU6050_Writebyte>
  osDelay(100);
 800136a:	2064      	movs	r0, #100	@ 0x64
 800136c:	f008 fe61 	bl	800a032 <osDelay>

  //Power Management setting
  /* Default is sleep mode
   * necessary to wake up MPU6050*/
  MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8001370:	2100      	movs	r1, #0
 8001372:	206b      	movs	r0, #107	@ 0x6b
 8001374:	f7ff ff7a 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001378:	2032      	movs	r0, #50	@ 0x32
 800137a:	f008 fe5a 	bl	800a032 <osDelay>

  //Sample rate divider
  /*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
  //  MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
  MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 800137e:	2127      	movs	r1, #39	@ 0x27
 8001380:	2019      	movs	r0, #25
 8001382:	f7ff ff73 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001386:	2032      	movs	r0, #50	@ 0x32
 8001388:	f008 fe53 	bl	800a032 <osDelay>

  //FSYNC and DLPF setting
  /*DLPF is set to 0*/
  MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 800138c:	2100      	movs	r1, #0
 800138e:	201a      	movs	r0, #26
 8001390:	f7ff ff6c 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001394:	2032      	movs	r0, #50	@ 0x32
 8001396:	f008 fe4c 	bl	800a032 <osDelay>
  /*FS_SEL  Full Scale Range
    0     +-250 degree/s
    1   +-500 degree/s
    2   +-1000 degree/s
    3   +-2000 degree/s */
  uint8_t FS_SCALE_GYRO = 0x0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
  MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	201b      	movs	r0, #27
 80013a8:	f7ff ff60 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 80013ac:	2032      	movs	r0, #50	@ 0x32
 80013ae:	f008 fe40 	bl	800a032 <osDelay>
  /*FS_SEL  Full Scale Range
    0     +-2g
    1   +-4g
    2   +-8g
    3   +-16g */
  uint8_t FS_SCALE_ACC = 0x0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	71bb      	strb	r3, [r7, #6]
  MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	201c      	movs	r0, #28
 80013c0:	f7ff ff54 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 80013c4:	2032      	movs	r0, #50	@ 0x32
 80013c6:	f008 fe34 	bl	800a032 <osDelay>

  MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f887 	bl	80014e4 <MPU6050_Get_LSB_Sensitivity>
//  printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);

  //Interrupt PIN setting
  uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 80013d6:	2300      	movs	r3, #0
 80013d8:	717b      	strb	r3, [r7, #5]
  uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 80013da:	2300      	movs	r3, #0
 80013dc:	713b      	strb	r3, [r7, #4]
  uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 80013de:	2301      	movs	r3, #1
 80013e0:	70fb      	strb	r3, [r7, #3]
  MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	01db      	lsls	r3, r3, #7
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	2037      	movs	r0, #55	@ 0x37
 8001402:	f7ff ff33 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001406:	2032      	movs	r0, #50	@ 0x32
 8001408:	f008 fe13 	bl	800a032 <osDelay>

  //Interrupt enable setting
  uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 800140c:	2301      	movs	r3, #1
 800140e:	70bb      	strb	r3, [r7, #2]
  MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	4619      	mov	r1, r3
 8001414:	2038      	movs	r0, #56	@ 0x38
 8001416:	f7ff ff29 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f008 fe09 	bl	800a032 <osDelay>

  printf("MPU6050 setting is finished\n");
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MPU6050_Initialization+0x134>)
 8001422:	f01c fae7 	bl	801d9f4 <puts>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	0801fe28 	.word	0x0801fe28
 8001434:	0801fe3c 	.word	0x0801fe3c
 8001438:	0801fe5c 	.word	0x0801fe5c
 800143c:	0801fe64 	.word	0x0801fe64
 8001440:	0801fe90 	.word	0x0801fe90
 8001444:	0801febc 	.word	0x0801febc

08001448 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint8_t data[14];
  MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	461a      	mov	r2, r3
 8001456:	210e      	movs	r1, #14
 8001458:	203b      	movs	r0, #59	@ 0x3b
 800145a:	f7ff ff3d 	bl	80012d8 <MPU6050_Readbytes>

  mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 800145e:	7a3b      	ldrb	r3, [r7, #8]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7a7b      	ldrb	r3, [r7, #9]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	801a      	strh	r2, [r3, #0]
  mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001470:	7abb      	ldrb	r3, [r7, #10]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	805a      	strh	r2, [r3, #2]
  mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	809a      	strh	r2, [r3, #4]

  mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	80da      	strh	r2, [r3, #6]

  mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 80014a6:	7c3b      	ldrb	r3, [r7, #16]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	811a      	strh	r2, [r3, #8]
  mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 80014b8:	7cbb      	ldrb	r3, [r7, #18]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	815a      	strh	r2, [r3, #10]
  mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80014ca:	7d3b      	ldrb	r3, [r7, #20]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	819a      	strh	r2, [r3, #12]
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  switch(FS_SCALE_GYRO)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d81a      	bhi.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001519 	.word	0x08001519
 8001508:	08001521 	.word	0x08001521
 800150c:	08001529 	.word	0x08001529
  {
  case 0:
    LSB_Sensitivity_GYRO = 131.f;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8001514:	601a      	str	r2, [r3, #0]
    break;
 8001516:	e00b      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 1:
    LSB_Sensitivity_GYRO = 65.5f;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 800151c:	601a      	str	r2, [r3, #0]
    break;
 800151e:	e007      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 2:
    LSB_Sensitivity_GYRO = 32.8f;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8001524:	601a      	str	r2, [r3, #0]
    break;
 8001526:	e003      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 3:
    LSB_Sensitivity_GYRO = 16.4f;
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <MPU6050_Get_LSB_Sensitivity+0xac>)
 800152c:	601a      	str	r2, [r3, #0]
    break;
 800152e:	bf00      	nop
  }
  switch(FS_SCALE_ACC)
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d81e      	bhi.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <MPU6050_Get_LSB_Sensitivity+0x58>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001557 	.word	0x08001557
 8001544:	08001561 	.word	0x08001561
 8001548:	0800156b 	.word	0x0800156b
  {
  case 0:
    LSB_Sensitivity_ACC = 16384.f;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800154e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001552:	601a      	str	r2, [r3, #0]
    break;
 8001554:	e00e      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 1:
    LSB_Sensitivity_ACC = 8192.f;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001558:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800155c:	601a      	str	r2, [r3, #0]
    break;
 800155e:	e009      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 2:
    LSB_Sensitivity_ACC = 4096.f;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001562:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001566:	601a      	str	r2, [r3, #0]
    break;
 8001568:	e004      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 3:
    LSB_Sensitivity_ACC = 2048.f;
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800156c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001570:	601a      	str	r2, [r3, #0]
    break;
 8001572:	bf00      	nop
  }
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20001cc8 	.word	0x20001cc8
 8001584:	43030000 	.word	0x43030000
 8001588:	42830000 	.word	0x42830000
 800158c:	42033333 	.word	0x42033333
 8001590:	41833333 	.word	0x41833333
 8001594:	20001cc4 	.word	0x20001cc4

08001598 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  //printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
  mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a04 	vstr	s15, [r3, #16]
  mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a05 	vstr	s15, [r3, #20]
  mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a06 	vstr	s15, [r3, #24]

  mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80016a4 <MPU6050_DataConvert+0x10c>
 800160c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001610:	ee16 0a90 	vmov	r0, s13
 8001614:	f7fe ffd0 	bl	80005b8 <__aeabi_f2d>
 8001618:	a31f      	add	r3, pc, #124	@ (adr r3, 8001698 <MPU6050_DataConvert+0x100>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fe6d 	bl	80002fc <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff facd 	bl	8000bc8 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	61da      	str	r2, [r3, #28]

  mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001644:	ed93 7a00 	vldr	s14, [r3]
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edc3 7a08 	vstr	s15, [r3, #32]
  mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	0a3d70a4 	.word	0x0a3d70a4
 800169c:	404243d7 	.word	0x404243d7
 80016a0:	20001cc4 	.word	0x20001cc4
 80016a4:	43aa0000 	.word	0x43aa0000
 80016a8:	20001cc8 	.word	0x20001cc8

080016ac <MPU6050_ProcessData>:
   */
  return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  MPU6050_Get6AxisRawData(mpu6050);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fec7 	bl	8001448 <MPU6050_Get6AxisRawData>
  MPU6050_DataConvert(mpu6050);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff6c 	bl	8001598 <MPU6050_DataConvert>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of IMUshouldUpdate */
  IMUshouldUpdateHandle = osSemaphoreNew(1, 1, &IMUshouldUpdate_attributes);
 80016cc:	4a45      	ldr	r2, [pc, #276]	@ (80017e4 <MX_FREERTOS_Init+0x11c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2001      	movs	r0, #1
 80016d2:	f008 fdb0 	bl	800a236 <osSemaphoreNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a43      	ldr	r2, [pc, #268]	@ (80017e8 <MX_FREERTOS_Init+0x120>)
 80016da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  HAL_TIM_Base_Start(&htim1);
 80016dc:	4843      	ldr	r0, [pc, #268]	@ (80017ec <MX_FREERTOS_Init+0x124>)
 80016de:	f005 f821 	bl	8006724 <HAL_TIM_Base_Start>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printfQueue */
  printfQueueHandle = osMessageQueueNew (128, sizeof(xPrintfMessage), &printfQueue_attributes);
 80016e2:	4a43      	ldr	r2, [pc, #268]	@ (80017f0 <MX_FREERTOS_Init+0x128>)
 80016e4:	2124      	movs	r1, #36	@ 0x24
 80016e6:	2080      	movs	r0, #128	@ 0x80
 80016e8:	f008 fe80 	bl	800a3ec <osMessageQueueNew>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a41      	ldr	r2, [pc, #260]	@ (80017f4 <MX_FREERTOS_Init+0x12c>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* creation of yawMotorNewAngle */
  yawMotorNewAngleHandle = osMessageQueueNew (16, sizeof(float), &yawMotorNewAngle_attributes);
 80016f2:	4a41      	ldr	r2, [pc, #260]	@ (80017f8 <MX_FREERTOS_Init+0x130>)
 80016f4:	2104      	movs	r1, #4
 80016f6:	2010      	movs	r0, #16
 80016f8:	f008 fe78 	bl	800a3ec <osMessageQueueNew>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <MX_FREERTOS_Init+0x134>)
 8001700:	6013      	str	r3, [r2, #0]

  /* creation of rollMotorNewAngle */
  rollMotorNewAngleHandle = osMessageQueueNew (16, sizeof(float), &rollMotorNewAngle_attributes);
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <MX_FREERTOS_Init+0x138>)
 8001704:	2104      	movs	r1, #4
 8001706:	2010      	movs	r0, #16
 8001708:	f008 fe70 	bl	800a3ec <osMessageQueueNew>
 800170c:	4603      	mov	r3, r0
 800170e:	4a3d      	ldr	r2, [pc, #244]	@ (8001804 <MX_FREERTOS_Init+0x13c>)
 8001710:	6013      	str	r3, [r2, #0]

  /* creation of IMUdata */
  IMUdataHandle = osMessageQueueNew (4, sizeof(xIMUData), &IMUdata_attributes);
 8001712:	4a3d      	ldr	r2, [pc, #244]	@ (8001808 <MX_FREERTOS_Init+0x140>)
 8001714:	210c      	movs	r1, #12
 8001716:	2004      	movs	r0, #4
 8001718:	f008 fe68 	bl	800a3ec <osMessageQueueNew>
 800171c:	4603      	mov	r3, r0
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <MX_FREERTOS_Init+0x144>)
 8001720:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(defaultTaskFunc, NULL, &defaultTask_attributes);
 8001722:	4a3b      	ldr	r2, [pc, #236]	@ (8001810 <MX_FREERTOS_Init+0x148>)
 8001724:	2100      	movs	r1, #0
 8001726:	483b      	ldr	r0, [pc, #236]	@ (8001814 <MX_FREERTOS_Init+0x14c>)
 8001728:	f008 fb22 	bl	8009d70 <osThreadNew>
 800172c:	4603      	mov	r3, r0
 800172e:	4a3a      	ldr	r2, [pc, #232]	@ (8001818 <MX_FREERTOS_Init+0x150>)
 8001730:	6013      	str	r3, [r2, #0]

  /* creation of BT_uart */
  BT_uartHandle = osThreadNew(BT_uart_func, NULL, &BT_uart_attributes);
 8001732:	4a3a      	ldr	r2, [pc, #232]	@ (800181c <MX_FREERTOS_Init+0x154>)
 8001734:	2100      	movs	r1, #0
 8001736:	483a      	ldr	r0, [pc, #232]	@ (8001820 <MX_FREERTOS_Init+0x158>)
 8001738:	f008 fb1a 	bl	8009d70 <osThreadNew>
 800173c:	4603      	mov	r3, r0
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <MX_FREERTOS_Init+0x15c>)
 8001740:	6013      	str	r3, [r2, #0]

  /* creation of printGateKeeper */
  printGateKeeperHandle = osThreadNew(printGateKeeperFunc, NULL, &printGateKeeper_attributes);
 8001742:	4a39      	ldr	r2, [pc, #228]	@ (8001828 <MX_FREERTOS_Init+0x160>)
 8001744:	2100      	movs	r1, #0
 8001746:	4839      	ldr	r0, [pc, #228]	@ (800182c <MX_FREERTOS_Init+0x164>)
 8001748:	f008 fb12 	bl	8009d70 <osThreadNew>
 800174c:	4603      	mov	r3, r0
 800174e:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <MX_FREERTOS_Init+0x168>)
 8001750:	6013      	str	r3, [r2, #0]

  /* creation of writeSetpoint */
  writeSetpointHandle = osThreadNew(writeSetpointFunc, NULL, &writeSetpoint_attributes);
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <MX_FREERTOS_Init+0x16c>)
 8001754:	2100      	movs	r1, #0
 8001756:	4838      	ldr	r0, [pc, #224]	@ (8001838 <MX_FREERTOS_Init+0x170>)
 8001758:	f008 fb0a 	bl	8009d70 <osThreadNew>
 800175c:	4603      	mov	r3, r0
 800175e:	4a37      	ldr	r2, [pc, #220]	@ (800183c <MX_FREERTOS_Init+0x174>)
 8001760:	6013      	str	r3, [r2, #0]

  /* creation of readFromHost */
  readFromHostHandle = osThreadNew(readFromHostFunc, NULL, &readFromHost_attributes);
 8001762:	4a37      	ldr	r2, [pc, #220]	@ (8001840 <MX_FREERTOS_Init+0x178>)
 8001764:	2100      	movs	r1, #0
 8001766:	4837      	ldr	r0, [pc, #220]	@ (8001844 <MX_FREERTOS_Init+0x17c>)
 8001768:	f008 fb02 	bl	8009d70 <osThreadNew>
 800176c:	4603      	mov	r3, r0
 800176e:	4a36      	ldr	r2, [pc, #216]	@ (8001848 <MX_FREERTOS_Init+0x180>)
 8001770:	6013      	str	r3, [r2, #0]

  /* creation of readFromIMU */
  readFromIMUHandle = osThreadNew(readFromIMUFunc, NULL, &readFromIMU_attributes);
 8001772:	4a36      	ldr	r2, [pc, #216]	@ (800184c <MX_FREERTOS_Init+0x184>)
 8001774:	2100      	movs	r1, #0
 8001776:	4836      	ldr	r0, [pc, #216]	@ (8001850 <MX_FREERTOS_Init+0x188>)
 8001778:	f008 fafa 	bl	8009d70 <osThreadNew>
 800177c:	4603      	mov	r3, r0
 800177e:	4a35      	ldr	r2, [pc, #212]	@ (8001854 <MX_FREERTOS_Init+0x18c>)
 8001780:	6013      	str	r3, [r2, #0]

  /* creation of updateControl */
  updateControlHandle = osThreadNew(updateControlFunc, NULL, &updateControl_attributes);
 8001782:	4a35      	ldr	r2, [pc, #212]	@ (8001858 <MX_FREERTOS_Init+0x190>)
 8001784:	2100      	movs	r1, #0
 8001786:	4835      	ldr	r0, [pc, #212]	@ (800185c <MX_FREERTOS_Init+0x194>)
 8001788:	f008 faf2 	bl	8009d70 <osThreadNew>
 800178c:	4603      	mov	r3, r0
 800178e:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <MX_FREERTOS_Init+0x198>)
 8001790:	6013      	str	r3, [r2, #0]

  /* creation of convertSetpoint */
  convertSetpointHandle = osThreadNew(convertSetpointToStepsFunc, NULL, &convertSetpoint_attributes);
 8001792:	4a34      	ldr	r2, [pc, #208]	@ (8001864 <MX_FREERTOS_Init+0x19c>)
 8001794:	2100      	movs	r1, #0
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <MX_FREERTOS_Init+0x1a0>)
 8001798:	f008 faea 	bl	8009d70 <osThreadNew>
 800179c:	4603      	mov	r3, r0
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <MX_FREERTOS_Init+0x1a4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* creation of sendToHost */
  sendToHostHandle = osThreadNew(sendToHostFunc, NULL, &sendToHost_attributes);
 80017a2:	4a33      	ldr	r2, [pc, #204]	@ (8001870 <MX_FREERTOS_Init+0x1a8>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4833      	ldr	r0, [pc, #204]	@ (8001874 <MX_FREERTOS_Init+0x1ac>)
 80017a8:	f008 fae2 	bl	8009d70 <osThreadNew>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <MX_FREERTOS_Init+0x1b0>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* creation of moveYawMotor */
  moveYawMotorHandle = osThreadNew(moveYawMotorFunc, NULL, &moveYawMotor_attributes);
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <MX_FREERTOS_Init+0x1b4>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4832      	ldr	r0, [pc, #200]	@ (8001880 <MX_FREERTOS_Init+0x1b8>)
 80017b8:	f008 fada 	bl	8009d70 <osThreadNew>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a31      	ldr	r2, [pc, #196]	@ (8001884 <MX_FREERTOS_Init+0x1bc>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* creation of moveRollMotor */
  moveRollMotorHandle = osThreadNew(moveRollMotorFunc, NULL, &moveRollMotor_attributes);
 80017c2:	4a31      	ldr	r2, [pc, #196]	@ (8001888 <MX_FREERTOS_Init+0x1c0>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4831      	ldr	r0, [pc, #196]	@ (800188c <MX_FREERTOS_Init+0x1c4>)
 80017c8:	f008 fad2 	bl	8009d70 <osThreadNew>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <MX_FREERTOS_Init+0x1c8>)
 80017d0:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of hostImuEvent */
  hostImuEventHandle = osEventFlagsNew(&hostImuEvent_attributes);
 80017d2:	4830      	ldr	r0, [pc, #192]	@ (8001894 <MX_FREERTOS_Init+0x1cc>)
 80017d4:	f008 fc48 	bl	800a068 <osEventFlagsNew>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a2f      	ldr	r2, [pc, #188]	@ (8001898 <MX_FREERTOS_Init+0x1d0>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	080202cc 	.word	0x080202cc
 80017e8:	20004dc4 	.word	0x20004dc4
 80017ec:	2000ce38 	.word	0x2000ce38
 80017f0:	0802026c 	.word	0x0802026c
 80017f4:	20004db4 	.word	0x20004db4
 80017f8:	08020284 	.word	0x08020284
 80017fc:	20004db8 	.word	0x20004db8
 8001800:	0802029c 	.word	0x0802029c
 8001804:	20004dbc 	.word	0x20004dbc
 8001808:	080202b4 	.word	0x080202b4
 800180c:	20004dc0 	.word	0x20004dc0
 8001810:	080200e0 	.word	0x080200e0
 8001814:	0800189d 	.word	0x0800189d
 8001818:	20001e00 	.word	0x20001e00
 800181c:	08020104 	.word	0x08020104
 8001820:	080018b5 	.word	0x080018b5
 8001824:	20004d8c 	.word	0x20004d8c
 8001828:	08020128 	.word	0x08020128
 800182c:	08001955 	.word	0x08001955
 8001830:	20004d90 	.word	0x20004d90
 8001834:	0802014c 	.word	0x0802014c
 8001838:	080019a1 	.word	0x080019a1
 800183c:	20004d94 	.word	0x20004d94
 8001840:	08020170 	.word	0x08020170
 8001844:	08001a19 	.word	0x08001a19
 8001848:	20004d98 	.word	0x20004d98
 800184c:	08020194 	.word	0x08020194
 8001850:	08001abd 	.word	0x08001abd
 8001854:	20004d9c 	.word	0x20004d9c
 8001858:	080201b8 	.word	0x080201b8
 800185c:	08001afd 	.word	0x08001afd
 8001860:	20004da0 	.word	0x20004da0
 8001864:	080201dc 	.word	0x080201dc
 8001868:	08001d81 	.word	0x08001d81
 800186c:	20004da4 	.word	0x20004da4
 8001870:	08020200 	.word	0x08020200
 8001874:	08001e4d 	.word	0x08001e4d
 8001878:	20004da8 	.word	0x20004da8
 800187c:	08020224 	.word	0x08020224
 8001880:	08001e69 	.word	0x08001e69
 8001884:	20004dac 	.word	0x20004dac
 8001888:	08020248 	.word	0x08020248
 800188c:	08001ec9 	.word	0x08001ec9
 8001890:	20004db0 	.word	0x20004db0
 8001894:	080202dc 	.word	0x080202dc
 8001898:	20004dc8 	.word	0x20004dc8

0800189c <defaultTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTaskFunc */
void defaultTaskFunc(void *argument)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//uint32_t valor_flag = osThreadFlagsSet(readFromHostHandle, 0x01);
	//osEventFlagsSet(hostImuEventHandle,0x01);
    vMyMicroros();
 80018a4:	f001 fb0c 	bl	8002ec0 <vMyMicroros>
    osDelay(1000);
 80018a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ac:	f008 fbc1 	bl	800a032 <osDelay>
    vMyMicroros();
 80018b0:	bf00      	nop
 80018b2:	e7f7      	b.n	80018a4 <defaultTaskFunc+0x8>

080018b4 <BT_uart_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BT_uart_func */
void BT_uart_func(void *argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BT_uart_func */

  /* Infinite loop */
  printf("\r\nbluetooth IS on\r\n");
 80018bc:	481c      	ldr	r0, [pc, #112]	@ (8001930 <BT_uart_func+0x7c>)
 80018be:	f01c f899 	bl	801d9f4 <puts>
  for(;;)
  {
    HAL_UART_Receive_IT(&huart5, &ucUartInputChar, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	491b      	ldr	r1, [pc, #108]	@ (8001934 <BT_uart_func+0x80>)
 80018c6:	481c      	ldr	r0, [pc, #112]	@ (8001938 <BT_uart_func+0x84>)
 80018c8:	f005 fdac 	bl	8007424 <HAL_UART_Receive_IT>

    // If buffer size differs from printed amount, print until they match
    while ( usLastPrintedIndex != usBufferIndex ){
 80018cc:	e025      	b.n	800191a <BT_uart_func+0x66>

      printf("bluetooth int: ");
 80018ce:	481b      	ldr	r0, [pc, #108]	@ (800193c <BT_uart_func+0x88>)
 80018d0:	f01c f828 	bl	801d924 <iprintf>
      if ( ucUartInputBuffer[usLastPrintedIndex] == '0')
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <BT_uart_func+0x8c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <BT_uart_func+0x90>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b30      	cmp	r3, #48	@ 0x30
 80018e0:	d103      	bne.n	80018ea <BT_uart_func+0x36>
        printf("KEY_RELEASED");
 80018e2:	4819      	ldr	r0, [pc, #100]	@ (8001948 <BT_uart_func+0x94>)
 80018e4:	f01c f81e 	bl	801d924 <iprintf>
 80018e8:	e007      	b.n	80018fa <BT_uart_func+0x46>
      else
        printf((char *) &( ucUartInputBuffer[usLastPrintedIndex] ));
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <BT_uart_func+0x8c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <BT_uart_func+0x90>)
 80018f2:	4413      	add	r3, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f01c f815 	bl	801d924 <iprintf>
      usLastPrintedIndex++;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <BT_uart_func+0x8c>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <BT_uart_func+0x8c>)
 8001904:	801a      	strh	r2, [r3, #0]


      printf("\r\n");
 8001906:	4811      	ldr	r0, [pc, #68]	@ (800194c <BT_uart_func+0x98>)
 8001908:	f01c f874 	bl	801d9f4 <puts>
      if (usLastPrintedIndex >  UART_BUFFER_SIZE - 1)
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <BT_uart_func+0x8c>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	2bff      	cmp	r3, #255	@ 0xff
 8001912:	d902      	bls.n	800191a <BT_uart_func+0x66>
        usLastPrintedIndex = 0;
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <BT_uart_func+0x8c>)
 8001916:	2200      	movs	r2, #0
 8001918:	801a      	strh	r2, [r3, #0]
    while ( usLastPrintedIndex != usBufferIndex ){
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <BT_uart_func+0x8c>)
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <BT_uart_func+0x9c>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d1d3      	bne.n	80018ce <BT_uart_func+0x1a>
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001926:	2004      	movs	r0, #4
 8001928:	f008 fb83 	bl	800a032 <osDelay>
    HAL_UART_Receive_IT(&huart5, &ucUartInputChar, 1);
 800192c:	e7c9      	b.n	80018c2 <BT_uart_func+0xe>
 800192e:	bf00      	nop
 8001930:	0801ffd0 	.word	0x0801ffd0
 8001934:	20001cf8 	.word	0x20001cf8
 8001938:	2000cf18 	.word	0x2000cf18
 800193c:	0801ffe4 	.word	0x0801ffe4
 8001940:	20001dfc 	.word	0x20001dfc
 8001944:	20001cfc 	.word	0x20001cfc
 8001948:	0801fff4 	.word	0x0801fff4
 800194c:	08020004 	.word	0x08020004
 8001950:	20001cfa 	.word	0x20001cfa

08001954 <printGateKeeperFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printGateKeeperFunc */
void printGateKeeperFunc(void *argument)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	@ 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  xPrintfMessage xIncommingMessage;
  /* Infinite loop */
  for(;;)
  {

    if (osMessageQueueGet(printfQueueHandle, &xIncommingMessage, 0x0, 10) == osOK){
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <printGateKeeperFunc+0x44>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	f107 010c 	add.w	r1, r7, #12
 8001964:	230a      	movs	r3, #10
 8001966:	2200      	movs	r2, #0
 8001968:	f008 fe14 	bl	800a594 <osMessageQueueGet>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <printGateKeeperFunc+0x3a>
    	if(HAL_UART_Transmit(&huart3,(uint8_t *)xIncommingMessage.pMessageBuffer, xIncommingMessage.iMessageLen, 100) != HAL_OK){
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	b29a      	uxth	r2, r3
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	1d19      	adds	r1, r3, #4
 800197c:	2364      	movs	r3, #100	@ 0x64
 800197e:	4807      	ldr	r0, [pc, #28]	@ (800199c <printGateKeeperFunc+0x48>)
 8001980:	f005 fcc2 	bl	8007308 <HAL_UART_Transmit>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <printGateKeeperFunc+0x3a>
      //if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)xIncommingMessage.pMessageBuffer, xIncommingMessage.iMessageLen, 100) != HAL_OK){
        Error_Handler();
 800198a:	f001 f853 	bl	8002a34 <Error_Handler>
      }
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 800198e:	2004      	movs	r0, #4
 8001990:	f008 fb4f 	bl	800a032 <osDelay>
    if (osMessageQueueGet(printfQueueHandle, &xIncommingMessage, 0x0, 10) == osOK){
 8001994:	e7e2      	b.n	800195c <printGateKeeperFunc+0x8>
 8001996:	bf00      	nop
 8001998:	20004db4 	.word	0x20004db4
 800199c:	2000cfac 	.word	0x2000cfac

080019a0 <writeSetpointFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_writeSetpointFunc */
void writeSetpointFunc(void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN writeSetpointFunc */
  uint32_t uiThreadFlagsReturn = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    // wait for writeSetpointFunc task flag to be different from 0
    uiThreadFlagsReturn = osThreadFlagsWait(0x1, 0x11, 1000);
 80019ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b0:	2111      	movs	r1, #17
 80019b2:	2001      	movs	r0, #1
 80019b4:	f008 fabc 	bl	8009f30 <osThreadFlagsWait>
 80019b8:	60f8      	str	r0, [r7, #12]
    // if return is 0x1, read data from joystick
    // if return is 0x10, read data from host
    // else we loop and wait for the flag to be set
    if (uiThreadFlagsReturn == 0x1){
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10f      	bne.n	80019e0 <writeSetpointFunc+0x40>
      // read data from joystick
      xSetpointData.iDataFromJoystick = 1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	60da      	str	r2, [r3, #12]
      xSetpointData.fYaw = xJoystickDataIncoming.fYaw;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <writeSetpointFunc+0x70>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019cc:	6013      	str	r3, [r2, #0]
      xSetpointData.fRoll = xJoystickDataIncoming.fRoll;
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <writeSetpointFunc+0x70>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019d4:	6053      	str	r3, [r2, #4]
      xSetpointData.fPitch = xJoystickDataIncoming.fPitch;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <writeSetpointFunc+0x70>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019dc:	6093      	str	r3, [r2, #8]
 80019de:	e011      	b.n	8001a04 <writeSetpointFunc+0x64>
      
    }
    else if (uiThreadFlagsReturn == 0x10){
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d10e      	bne.n	8001a04 <writeSetpointFunc+0x64>
      // read data from host
      xSetpointData.iDataFromJoystick = 0;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
      xSetpointData.fYaw = xHostData.fYaw;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <writeSetpointFunc+0x74>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019f2:	6013      	str	r3, [r2, #0]
      xSetpointData.fRoll = xHostData.fRoll;
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <writeSetpointFunc+0x74>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019fa:	6053      	str	r3, [r2, #4]
      xSetpointData.fPitch = xHostData.fPitch;      
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <writeSetpointFunc+0x74>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a02      	ldr	r2, [pc, #8]	@ (8001a0c <writeSetpointFunc+0x6c>)
 8001a02:	6093      	str	r3, [r2, #8]
    }
    osDelay(4);
 8001a04:	2004      	movs	r0, #4
 8001a06:	f008 fb14 	bl	800a032 <osDelay>
    uiThreadFlagsReturn = osThreadFlagsWait(0x1, 0x11, 1000);
 8001a0a:	e7cf      	b.n	80019ac <writeSetpointFunc+0xc>
 8001a0c:	20001ccc 	.word	0x20001ccc
 8001a10:	20001cec 	.word	0x20001cec
 8001a14:	20001cdc 	.word	0x20001cdc

08001a18 <readFromHostFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readFromHostFunc */
void readFromHostFunc(void *argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	@ 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readFromHostFunc */
    // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
	xSetpoint xHostData = {0, 0, 0, 0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]

	int i=0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Infinite loop */
  for(;;)
  {
    // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
	osEventFlagsWait(hostImuEventHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <readFromHostFunc+0x9c>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	f008 fb95 	bl	800a16c <osEventFlagsWait>

	float a_velocity[] = {i,i+10,i+100,i+500};
 8001a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	330a      	adds	r3, #10
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a62:	3364      	adds	r3, #100	@ 0x64
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a72:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	edc7 7a06 	vstr	s15, [r7, #24]
	vSetActuatorMsg(a_velocity);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 f93e 	bl	8002d08 <vSetActuatorMsg>
	osDelay(DEFAULT_OSDELAY_LOOP);
 8001a8c:	2004      	movs	r0, #4
 8001a8e:	f008 fad0 	bl	800a032 <osDelay>
    i++;
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	3301      	adds	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i%=100;
 8001a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9a:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <readFromHostFunc+0xa0>)
 8001a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa0:	1151      	asrs	r1, r2, #5
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	1a8a      	subs	r2, r1, r2
 8001aa6:	2164      	movs	r1, #100	@ 0x64
 8001aa8:	fb01 f202 	mul.w	r2, r1, r2
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  {
 8001ab0:	bf00      	nop
 8001ab2:	e7be      	b.n	8001a32 <readFromHostFunc+0x1a>
 8001ab4:	20004dc8 	.word	0x20004dc8
 8001ab8:	51eb851f 	.word	0x51eb851f

08001abc <readFromIMUFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readFromIMUFunc */
void readFromIMUFunc(void *argument)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readFromIMUFunc */
  
  MPU6050_Initialization();
 8001ac4:	f7ff fc24 	bl	8001310 <MPU6050_Initialization>
  /* Infinite loop */
  for(;;)
  {
    // IMUshouldUpdate semaphore is set to 1 when the IMU has new data
    if (osSemaphoreAcquire(IMUshouldUpdateHandle, 0) == osOK){
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <readFromIMUFunc+0x34>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 fc3a 	bl	800a348 <osSemaphoreAcquire>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <readFromIMUFunc+0x2c>
      MPU6050_ProcessData(&MPU6050);
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <readFromIMUFunc+0x38>)
 8001adc:	f7ff fde6 	bl	80016ac <MPU6050_ProcessData>
      CalculateCompliFilter(&Angle, &MPU6050);
 8001ae0:	4904      	ldr	r1, [pc, #16]	@ (8001af4 <readFromIMUFunc+0x38>)
 8001ae2:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <readFromIMUFunc+0x3c>)
 8001ae4:	f7ff fb5a 	bl	800119c <CalculateCompliFilter>
      // printf("%f, %f, %f\r\n", Angle.ComFilt_roll,Angle.ComFilt_pitch,Angle.ComFilt_yaw);
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f008 faa2 	bl	800a032 <osDelay>
    if (osSemaphoreAcquire(IMUshouldUpdateHandle, 0) == osOK){
 8001aee:	e7eb      	b.n	8001ac8 <readFromIMUFunc+0xc>
 8001af0:	20004dc4 	.word	0x20004dc4
 8001af4:	20001c98 	.word	0x20001c98
 8001af8:	20001c74 	.word	0x20001c74

08001afc <updateControlFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlFunc */
void updateControlFunc(void *argument)
{
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b0a2      	sub	sp, #136	@ 0x88
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateControlFunc */
  xIMUData xIMUDataIncoming = {0, 0, 0};
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  float xError[] = {0, 0, 0};
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  xIMUData xIMUDataPrevious = {0, 0, 0};
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  xIMUData xIMUDataErrorAccumulated = {0, 0, 0};
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	663b      	str	r3, [r7, #96]	@ 0x60
  float fMotorSpeedsDiff[4] = {0, 0, 0, 0};
 8001b50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]

  // we need a matrix to map the error to the motor speeds
  float fStateToMotorSpeedMatrix[4][3] = {
 8001b5e:	4b80      	ldr	r3, [pc, #512]	@ (8001d60 <updateControlFunc+0x264>)
 8001b60:	f107 0418 	add.w	r4, r7, #24
 8001b64:	461d      	mov	r5, r3
 8001b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {1, 1, 1},
    {1, -1, -1},
    {-1, -1, 1},
    {-1, 1, -1}
  };
  float a_velocity[] = {500,500,500,500};
 8001b76:	4b7b      	ldr	r3, [pc, #492]	@ (8001d64 <updateControlFunc+0x268>)
 8001b78:	f107 0408 	add.w	r4, r7, #8
 8001b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vSetActuatorMsg(a_velocity);
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f8be 	bl	8002d08 <vSetActuatorMsg>
  /* Infinite loop */
  for(;;)
  {

    if (osMessageQueueGet(IMUdataHandle, &xIMUDataIncoming, 0x0, 100) == osOK){
 8001b8c:	4b76      	ldr	r3, [pc, #472]	@ (8001d68 <updateControlFunc+0x26c>)
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001b94:	2364      	movs	r3, #100	@ 0x64
 8001b96:	2200      	movs	r2, #0
 8001b98:	f008 fcfc 	bl	800a594 <osMessageQueueGet>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80d9 	bne.w	8001d56 <updateControlFunc+0x25a>
      xError[0] = xSetpointData.fYaw - xIMUDataIncoming.fYaw;
 8001ba4:	4b71      	ldr	r3, [pc, #452]	@ (8001d6c <updateControlFunc+0x270>)
 8001ba6:	ed93 7a00 	vldr	s14, [r3]
 8001baa:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
      xError[1] = xSetpointData.fRoll - xIMUDataIncoming.fRoll;
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <updateControlFunc+0x270>)
 8001bb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bbc:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
      xError[2] = xSetpointData.fPitch - xIMUDataIncoming.fPitch;
 8001bc8:	4b68      	ldr	r3, [pc, #416]	@ (8001d6c <updateControlFunc+0x270>)
 8001bca:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bce:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

      xIMUDataErrorAccumulated.fYaw += xError[0];
 8001bda:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001bde:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      xIMUDataErrorAccumulated.fRoll += xError[1];
 8001bea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001bee:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      xIMUDataErrorAccumulated.fPitch += xError[2];
 8001bfa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001bfe:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

      MATRIX_MULTIPLICATION(fMotorSpeedsDiff, fStateToMotorSpeedMatrix, xError);
 8001c0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c0e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c1a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c26:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c2a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001c3a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c3e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c46:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c4a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001c5a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8001c6a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c6e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001c7a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c86:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001c8a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8001c9a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001c9e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca6:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001caa:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb6:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001cba:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      fMotorSpeeds[0] = fMotorSpeeds[0] + fMotorSpeedsDiff[0];
 8001cca:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <updateControlFunc+0x274>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <updateControlFunc+0x274>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]
      fMotorSpeeds[1] = fMotorSpeeds[1] + fMotorSpeedsDiff[1];
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <updateControlFunc+0x274>)
 8001ce0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ce4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <updateControlFunc+0x274>)
 8001cee:	edc3 7a01 	vstr	s15, [r3, #4]
      fMotorSpeeds[2] = fMotorSpeeds[2] + fMotorSpeedsDiff[2];
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <updateControlFunc+0x274>)
 8001cf4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cf8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <updateControlFunc+0x274>)
 8001d02:	edc3 7a02 	vstr	s15, [r3, #8]
      fMotorSpeeds[3] = fMotorSpeeds[3] + fMotorSpeedsDiff[3];
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <updateControlFunc+0x274>)
 8001d08:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d0c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <updateControlFunc+0x274>)
 8001d16:	edc3 7a03 	vstr	s15, [r3, #12]

      // we need to update the real motor angles that will move the IMU
      osMessageQueuePut(yawMotorNewAngleHandle, & xIMUDataIncoming.fYaw, 0, 1);
 8001d1a:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <updateControlFunc+0x278>)
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001d22:	2301      	movs	r3, #1
 8001d24:	2200      	movs	r2, #0
 8001d26:	f008 fbd5 	bl	800a4d4 <osMessageQueuePut>
      osMessageQueuePut(rollMotorNewAngleHandle, & xIMUDataIncoming.fRoll, 0, 1);
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <updateControlFunc+0x27c>)
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d32:	1d19      	adds	r1, r3, #4
 8001d34:	2301      	movs	r3, #1
 8001d36:	2200      	movs	r2, #0
 8001d38:	f008 fbcc 	bl	800a4d4 <osMessageQueuePut>

      // we need to update the motor speeds to micro
      osThreadFlagsSet(sendToHostHandle, 0x1);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <updateControlFunc+0x280>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f008 f8a6 	bl	8009e94 <osThreadFlagsSet>

      xIMUDataPrevious = xIMUDataIncoming;
 8001d48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d4c:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001d50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      (void) xIMUDataPrevious; // just use to avoid warning, but would be necessary at PID
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001d56:	2004      	movs	r0, #4
 8001d58:	f008 f96b 	bl	800a032 <osDelay>
    if (osMessageQueueGet(IMUdataHandle, &xIMUDataIncoming, 0x0, 100) == osOK){
 8001d5c:	e716      	b.n	8001b8c <updateControlFunc+0x90>
 8001d5e:	bf00      	nop
 8001d60:	08020008 	.word	0x08020008
 8001d64:	08020038 	.word	0x08020038
 8001d68:	20004dc0 	.word	0x20004dc0
 8001d6c:	20001ccc 	.word	0x20001ccc
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20004db8 	.word	0x20004db8
 8001d78:	20004dbc 	.word	0x20004dbc
 8001d7c:	20004da8 	.word	0x20004da8

08001d80 <convertSetpointToStepsFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_convertSetpointToStepsFunc */
void convertSetpointToStepsFunc(void *argument)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN convertSetpointToStepsFunc */
  // we know that  25 steps equals 45 degrees of the motor
  // a full rotation is 45 degrees * 8 = 360 degrees
  // but the gear diameter ratio is 1.5cm at motor to 8cm at IMU
  float fGearDiameterRatio = 8/1.5;
 8001d88:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <convertSetpointToStepsFunc+0xbc>)
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  float fMotorStepsToIMUFullRotation = 25 * fGearDiameterRatio;
 8001d8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d90:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d98:	edc7 7a08 	vstr	s15, [r7, #32]
  xIMUData xIMUDataPrevious = {0, 0, 0};
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  float fNewAngleYaw = 0;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  float fNewAngleRoll = 0;
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    // wait thread flag to be set to 1
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001dba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dbe:	2111      	movs	r1, #17
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f008 f8b5 	bl	8009f30 <osThreadFlagsWait>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d132      	bne.n	8001e32 <convertSetpointToStepsFunc+0xb2>
      // amount of steps to move the motor is the difference between the new angle and the previous angle
      // divided by the amount of steps to move the IMU a full rotation
      // we add to rollMotorNewAngleHandle and yawMotorNewAngleHandle
      fNewAngleYaw = (xSetpointData.fYaw - xIMUDataPrevious.fYaw) / fMotorStepsToIMUFullRotation;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <convertSetpointToStepsFunc+0xc0>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dda:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de2:	edc7 7a04 	vstr	s15, [r7, #16]
      fNewAngleRoll = (xSetpointData.fRoll - xIMUDataPrevious.fRoll) / fMotorStepsToIMUFullRotation;
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <convertSetpointToStepsFunc+0xc0>)
 8001de8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001df4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfc:	edc7 7a03 	vstr	s15, [r7, #12]
      osMessageQueuePut(yawMotorNewAngleHandle, & fNewAngleYaw, 0, 100);
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <convertSetpointToStepsFunc+0xc4>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	f107 0110 	add.w	r1, r7, #16
 8001e08:	2364      	movs	r3, #100	@ 0x64
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f008 fb62 	bl	800a4d4 <osMessageQueuePut>
      osMessageQueuePut(rollMotorNewAngleHandle, & fNewAngleRoll, 0, 100);
 8001e10:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <convertSetpointToStepsFunc+0xc8>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	f107 010c 	add.w	r1, r7, #12
 8001e18:	2364      	movs	r3, #100	@ 0x64
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f008 fb5a 	bl	800a4d4 <osMessageQueuePut>

      xIMUDataPrevious.fYaw = xSetpointData.fYaw;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <convertSetpointToStepsFunc+0xc0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
      xIMUDataPrevious.fRoll = xSetpointData.fRoll;
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <convertSetpointToStepsFunc+0xc0>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
      xIMUDataPrevious.fPitch = xSetpointData.fPitch;
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <convertSetpointToStepsFunc+0xc0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	61fb      	str	r3, [r7, #28]
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001e32:	2004      	movs	r0, #4
 8001e34:	f008 f8fd 	bl	800a032 <osDelay>
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001e38:	e7bf      	b.n	8001dba <convertSetpointToStepsFunc+0x3a>
 8001e3a:	bf00      	nop
 8001e3c:	40aaaaab 	.word	0x40aaaaab
 8001e40:	20001ccc 	.word	0x20001ccc
 8001e44:	20004db8 	.word	0x20004db8
 8001e48:	20004dbc 	.word	0x20004dbc

08001e4c <sendToHostFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendToHostFunc */
void sendToHostFunc(void *argument)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
/* Infinite loop */
  for(;;)
  {
    // if thread flag is set to 1, send data to host
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001e54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e58:	2111      	movs	r1, #17
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f008 f868 	bl	8009f30 <osThreadFlagsWait>
      // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001e60:	2004      	movs	r0, #4
 8001e62:	f008 f8e6 	bl	800a032 <osDelay>
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001e66:	e7f5      	b.n	8001e54 <sendToHostFunc+0x8>

08001e68 <moveYawMotorFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveYawMotorFunc */
void moveYawMotorFunc(void *argument)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveYawMotorFunc */
  float fNewSteps;
  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(yawMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <moveYawMotorFunc+0x5c>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	f107 010c 	add.w	r1, r7, #12
 8001e78:	2364      	movs	r3, #100	@ 0x64
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f008 fb8a 	bl	800a594 <osMessageQueueGet>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <moveYawMotorFunc+0x52>
      step(fNewSteps, fNewSteps>0?1:0, STEP_MOTOR_MICRODELAY, M2_pin2_GPIO_Port, M2_pin2_Pin);
 8001e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	bfcc      	ite	gt
 8001e9c:	2301      	movgt	r3, #1
 8001e9e:	2300      	movle	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001eb2:	ee17 0a10 	vmov	r0, s14
 8001eb6:	f000 f85f 	bl	8001f78 <step>
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001eba:	2004      	movs	r0, #4
 8001ebc:	f008 f8b9 	bl	800a032 <osDelay>
    if (osMessageQueueGet(yawMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001ec0:	e7d6      	b.n	8001e70 <moveYawMotorFunc+0x8>
 8001ec2:	bf00      	nop
 8001ec4:	20004db8 	.word	0x20004db8

08001ec8 <moveRollMotorFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveRollMotorFunc */
void moveRollMotorFunc(void *argument)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveRollMotorFunc */
  float fNewSteps;
  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(rollMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <moveRollMotorFunc+0x58>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f107 010c 	add.w	r1, r7, #12
 8001ed8:	2364      	movs	r3, #100	@ 0x64
 8001eda:	2200      	movs	r2, #0
 8001edc:	f008 fb5a 	bl	800a594 <osMessageQueueGet>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d117      	bne.n	8001f16 <moveRollMotorFunc+0x4e>
      step(fNewSteps, fNewSteps>0?1:0, STEP_MOTOR_MICRODELAY, M1_pin2_GPIO_Port, M1_pin2_Pin);
 8001ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	bfcc      	ite	gt
 8001efc:	2301      	movgt	r3, #1
 8001efe:	2300      	movle	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	2320      	movs	r3, #32
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <moveRollMotorFunc+0x5c>)
 8001f0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f0e:	ee17 0a10 	vmov	r0, s14
 8001f12:	f000 f831 	bl	8001f78 <step>
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001f16:	2004      	movs	r0, #4
 8001f18:	f008 f88b 	bl	800a032 <osDelay>
    if (osMessageQueueGet(rollMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001f1c:	e7d8      	b.n	8001ed0 <moveRollMotorFunc+0x8>
 8001f1e:	bf00      	nop
 8001f20:	20004dbc 	.word	0x20004dbc
 8001f24:	48000400 	.word	0x48000400

08001f28 <HAL_UART_RxCpltCallback>:
//                      The specific uart that              //
//                      triggered the interrupt.            //
// Output params:       n/a                                 //
// *****************************************************    //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if (huart == &huart5){
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <HAL_UART_RxCpltCallback+0x40>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_UART_RxCpltCallback+0x34>
    ucUartInputBuffer[usBufferIndex++] = ucUartInputChar;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_UART_RxCpltCallback+0x44>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	b291      	uxth	r1, r2
 8001f40:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_UART_RxCpltCallback+0x44>)
 8001f42:	8011      	strh	r1, [r2, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_UART_RxCpltCallback+0x48>)
 8001f48:	7819      	ldrb	r1, [r3, #0]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_UART_RxCpltCallback+0x4c>)
 8001f4c:	5499      	strb	r1, [r3, r2]
    if(usBufferIndex > UART_BUFFER_SIZE - 1)
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_UART_RxCpltCallback+0x44>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	2bff      	cmp	r3, #255	@ 0xff
 8001f54:	d902      	bls.n	8001f5c <HAL_UART_RxCpltCallback+0x34>
      usBufferIndex = 0;
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_UART_RxCpltCallback+0x44>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	801a      	strh	r2, [r3, #0]
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	2000cf18 	.word	0x2000cf18
 8001f6c:	20001cfa 	.word	0x20001cfa
 8001f70:	20001cf8 	.word	0x20001cf8
 8001f74:	20001cfc 	.word	0x20001cfc

08001f78 <step>:
//                      GPIO_Pin                            //
//                      The GPIO pin of the motor.          //
// Output params:       n/a                                 //
// *********************************************************//
void step(int steps, uint8_t direction, uint16_t delay, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	72fb      	strb	r3, [r7, #11]
 8001f86:	4613      	mov	r3, r2
 8001f88:	813b      	strh	r3, [r7, #8]
  int x;

  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, !direction);
 8001f8a:	7afb      	ldrb	r3, [r7, #11]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	8c3b      	ldrh	r3, [r7, #32]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f002 fc8f 	bl	80048c0 <HAL_GPIO_WritePin>
  for(x=0; x<steps; x=x+1)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e016      	b.n	8001fd6 <step+0x5e>
  {
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 8001fa8:	8c3b      	ldrh	r3, [r7, #32]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f002 fc86 	bl	80048c0 <HAL_GPIO_WritePin>
    microDelay(delay);
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f816 	bl	8001fe8 <microDelay>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 8001fbc:	8c3b      	ldrh	r3, [r7, #32]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f002 fc7c 	bl	80048c0 <HAL_GPIO_WritePin>
    microDelay(delay);
 8001fc8:	893b      	ldrh	r3, [r7, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f80c 	bl	8001fe8 <microDelay>
  for(x=0; x<steps; x=x+1)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dbe4      	blt.n	8001fa8 <step+0x30>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <microDelay>:
// Input params:        delay                               //
//                      The delay in microseconds.          //
// Output params:       n/a                                 //
// *********************************************************//
void microDelay (uint16_t delay)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  int a = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <microDelay+0x34>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  do{
    a = __HAL_TIM_GET_COUNTER(&htim1);
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <microDelay+0x34>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	60fb      	str	r3, [r7, #12]
  }while (a < delay);
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	429a      	cmp	r2, r3
 800200c:	dbf7      	blt.n	8001ffe <microDelay+0x16>
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	2000ce38 	.word	0x2000ce38

08002020 <_write>:
//                      The length of the message.          //
// Output params:       len                                 //
//                      The length of the message.          //
// *********************************************************//
int _write(int file, char *ptr, int len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	@ 0x38
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  xPrintfMessage xIncommingMessage;

  len = MIN(len, MAX_MESSAGE_LEN)+1; //+1 to '\0'
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b20      	cmp	r3, #32
 8002030:	bfa8      	it	ge
 8002032:	2320      	movge	r3, #32
 8002034:	3301      	adds	r3, #1
 8002036:	607b      	str	r3, [r7, #4]
  xIncommingMessage.iMessageLen = len;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	617b      	str	r3, [r7, #20]
  strncpy(xIncommingMessage.pMessageBuffer, ptr, len);
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	3304      	adds	r3, #4
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f01b fe71 	bl	801dd2e <strncpy>
  xIncommingMessage.pMessageBuffer[len] = '\0';
 800204c:	f107 0218 	add.w	r2, r7, #24
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
  osMessageQueuePut(printfQueueHandle, &xIncommingMessage, 0x0, 100);
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <_write+0x54>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	f107 0114 	add.w	r1, r7, #20
 8002060:	2364      	movs	r3, #100	@ 0x64
 8002062:	2200      	movs	r2, #0
 8002064:	f008 fa36 	bl	800a4d4 <osMessageQueuePut>
  return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3738      	adds	r7, #56	@ 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20004db4 	.word	0x20004db4

08002078 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002084:	f009 ffc2 	bl	800c00c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002088:	4b5a      	ldr	r3, [pc, #360]	@ (80021f4 <pvPortMallocMicroROS+0x17c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002090:	f000 f986 	bl	80023a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002094:	4b58      	ldr	r3, [pc, #352]	@ (80021f8 <pvPortMallocMicroROS+0x180>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 8090 	bne.w	80021c2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01e      	beq.n	80020e6 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80020a8:	2208      	movs	r2, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f023 0307 	bic.w	r3, r3, #7
 80020c0:	3308      	adds	r3, #8
 80020c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d06a      	beq.n	80021c2 <pvPortMallocMicroROS+0x14a>
 80020ec:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <pvPortMallocMicroROS+0x184>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d865      	bhi.n	80021c2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020f6:	4b42      	ldr	r3, [pc, #264]	@ (8002200 <pvPortMallocMicroROS+0x188>)
 80020f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020fa:	4b41      	ldr	r3, [pc, #260]	@ (8002200 <pvPortMallocMicroROS+0x188>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002100:	e004      	b.n	800210c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d903      	bls.n	800211e <pvPortMallocMicroROS+0xa6>
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f1      	bne.n	8002102 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800211e:	4b35      	ldr	r3, [pc, #212]	@ (80021f4 <pvPortMallocMicroROS+0x17c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002124:	429a      	cmp	r2, r3
 8002126:	d04c      	beq.n	80021c2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2208      	movs	r2, #8
 800212e:	4413      	add	r3, r2
 8002130:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	1ad2      	subs	r2, r2, r3
 8002142:	2308      	movs	r3, #8
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	429a      	cmp	r2, r3
 8002148:	d920      	bls.n	800218c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800214a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800215c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	613b      	str	r3, [r7, #16]
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002186:	69b8      	ldr	r0, [r7, #24]
 8002188:	f000 f96c 	bl	8002464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <pvPortMallocMicroROS+0x184>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <pvPortMallocMicroROS+0x184>)
 8002198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800219a:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <pvPortMallocMicroROS+0x184>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <pvPortMallocMicroROS+0x18c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d203      	bcs.n	80021ae <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <pvPortMallocMicroROS+0x184>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <pvPortMallocMicroROS+0x18c>)
 80021ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <pvPortMallocMicroROS+0x180>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80021c2:	f009 ff31 	bl	800c028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	60fb      	str	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80021e8:	69fb      	ldr	r3, [r7, #28]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3728      	adds	r7, #40	@ 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000c304 	.word	0x2000c304
 80021f8:	2000c310 	.word	0x2000c310
 80021fc:	2000c308 	.word	0x2000c308
 8002200:	2000c2fc 	.word	0x2000c2fc
 8002204:	2000c30c 	.word	0x2000c30c

08002208 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d04a      	beq.n	80022b0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800221a:	2308      	movs	r3, #8
 800221c:	425b      	negs	r3, r3
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <vPortFreeMicroROS+0xb0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <vPortFreeMicroROS+0x46>
	__asm volatile
 8002236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	60fb      	str	r3, [r7, #12]
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	e7fd      	b.n	800224a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <vPortFreeMicroROS+0x66>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	60bb      	str	r3, [r7, #8]
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <vPortFreeMicroROS+0xb0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d019      	beq.n	80022b0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d115      	bne.n	80022b0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <vPortFreeMicroROS+0xb0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002294:	f009 feba 	bl	800c00c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <vPortFreeMicroROS+0xb4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a06      	ldr	r2, [pc, #24]	@ (80022bc <vPortFreeMicroROS+0xb4>)
 80022a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80022a6:	6938      	ldr	r0, [r7, #16]
 80022a8:	f000 f8dc 	bl	8002464 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80022ac:	f009 febc 	bl	800c028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000c310 	.word	0x2000c310
 80022bc:	2000c308 	.word	0x2000c308

080022c0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80022cc:	2308      	movs	r3, #8
 80022ce:	425b      	negs	r3, r3
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <getBlockSize+0x38>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

	return count;
 80022e8:	68fb      	ldr	r3, [r7, #12]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000c310 	.word	0x2000c310

080022fc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002306:	f009 fe81 	bl	800c00c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f7ff feb4 	bl	8002078 <pvPortMallocMicroROS>
 8002310:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d017      	beq.n	8002348 <pvPortReallocMicroROS+0x4c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d014      	beq.n	8002348 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffce 	bl	80022c0 <getBlockSize>
 8002324:	4603      	mov	r3, r0
 8002326:	2208      	movs	r2, #8
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d201      	bcs.n	8002338 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	68b8      	ldr	r0, [r7, #8]
 800233e:	f01b fe00 	bl	801df42 <memcpy>

		vPortFreeMicroROS(pv);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff60 	bl	8002208 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002348:	f009 fe6e 	bl	800c028 <xTaskResumeAll>

	return newmem;
 800234c:	68bb      	ldr	r3, [r7, #8]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002360:	f009 fe54 	bl	800c00c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff fe82 	bl	8002078 <pvPortMallocMicroROS>
 8002374:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	613b      	str	r3, [r7, #16]

  	while(count--)
 800237a:	e004      	b.n	8002386 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	613a      	str	r2, [r7, #16]
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	617a      	str	r2, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f5      	bne.n	800237c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002390:	f009 fe4a 	bl	800c028 <xTaskResumeAll>
  	return mem;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023a6:	f247 5330 	movw	r3, #30000	@ 0x7530
 80023aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <prvHeapInit+0xac>)
 80023ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3307      	adds	r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a1f      	ldr	r2, [pc, #124]	@ (800244c <prvHeapInit+0xac>)
 80023d0:	4413      	add	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <prvHeapInit+0xb0>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <prvHeapInit+0xb0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80023ec:	2208      	movs	r2, #8
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0307 	bic.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <prvHeapInit+0xb4>)
 8002400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002402:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <prvHeapInit+0xb4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <prvHeapInit+0xb4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	1ad2      	subs	r2, r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <prvHeapInit+0xb4>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <prvHeapInit+0xb8>)
 800242e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a09      	ldr	r2, [pc, #36]	@ (800245c <prvHeapInit+0xbc>)
 8002436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <prvHeapInit+0xc0>)
 800243a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	20004dcc 	.word	0x20004dcc
 8002450:	2000c2fc 	.word	0x2000c2fc
 8002454:	2000c304 	.word	0x2000c304
 8002458:	2000c30c 	.word	0x2000c30c
 800245c:	2000c308 	.word	0x2000c308
 8002460:	2000c310 	.word	0x2000c310

08002464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800246c:	4b28      	ldr	r3, [pc, #160]	@ (8002510 <prvInsertBlockIntoFreeList+0xac>)
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e002      	b.n	8002478 <prvInsertBlockIntoFreeList+0x14>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	d8f7      	bhi.n	8002472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4413      	add	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	d108      	bne.n	80024a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	441a      	add	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	441a      	add	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d118      	bne.n	80024ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <prvInsertBlockIntoFreeList+0xb0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d00d      	beq.n	80024e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	441a      	add	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e008      	b.n	80024f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <prvInsertBlockIntoFreeList+0xb0>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e003      	b.n	80024f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d002      	beq.n	8002502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000c2fc 	.word	0x2000c2fc
 8002514:	2000c304 	.word	0x2000c304

08002518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <MX_DMA_Init+0x60>)
 8002520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002522:	4a15      	ldr	r2, [pc, #84]	@ (8002578 <MX_DMA_Init+0x60>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6493      	str	r3, [r2, #72]	@ 0x48
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <MX_DMA_Init+0x60>)
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <MX_DMA_Init+0x60>)
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	4a0f      	ldr	r2, [pc, #60]	@ (8002578 <MX_DMA_Init+0x60>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6493      	str	r3, [r2, #72]	@ 0x48
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <MX_DMA_Init+0x60>)
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	200b      	movs	r0, #11
 8002554:	f001 fccc 	bl	8003ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002558:	200b      	movs	r0, #11
 800255a:	f001 fce3 	bl	8003f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2105      	movs	r1, #5
 8002562:	200c      	movs	r0, #12
 8002564:	f001 fcc4 	bl	8003ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002568:	200c      	movs	r0, #12
 800256a:	f001 fcdb 	bl	8003f24 <HAL_NVIC_EnableIRQ>

}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800258a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800258c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002590:	4904      	ldr	r1, [pc, #16]	@ (80025a4 <cubemx_transport_open+0x28>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f005 f812 	bl	80075bc <HAL_UART_Receive_DMA>
    return true;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000c314 	.word	0x2000c314

080025a8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025b6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f005 f84b 	bl	8007654 <HAL_UART_DMAStop>
    return true;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025dc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d11b      	bne.n	8002620 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f004 ff63 	bl	80074bc <HAL_UART_Transmit_DMA>
 80025f6:	4603      	mov	r3, r0
 80025f8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025fa:	e002      	b.n	8002602 <cubemx_transport_write+0x3a>
            osDelay(1);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f007 fd18 	bl	800a032 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <cubemx_transport_write+0x4a>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	2b20      	cmp	r3, #32
 8002610:	d1f4      	bne.n	80025fc <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <cubemx_transport_write+0x54>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	e002      	b.n	8002622 <cubemx_transport_write+0x5a>
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002620:	2300      	movs	r3, #0
    }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002640:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002646:	b672      	cpsid	i
}
 8002648:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002658:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <cubemx_transport_read+0x9c>)
 800265a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800265c:	b662      	cpsie	i
}
 800265e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3301      	adds	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002666:	2001      	movs	r0, #1
 8002668:	f007 fce3 	bl	800a032 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <cubemx_transport_read+0xa0>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <cubemx_transport_read+0x9c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d103      	bne.n	8002680 <cubemx_transport_read+0x54>
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbe2      	blt.n	8002646 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002684:	e011      	b.n	80026aa <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002686:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <cubemx_transport_read+0xa0>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	440b      	add	r3, r1
 8002690:	490f      	ldr	r1, [pc, #60]	@ (80026d0 <cubemx_transport_read+0xa4>)
 8002692:	5c8a      	ldrb	r2, [r1, r2]
 8002694:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <cubemx_transport_read+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a0:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <cubemx_transport_read+0xa0>)
 80026a2:	6013      	str	r3, [r2, #0]
        wrote++;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <cubemx_transport_read+0xa0>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <cubemx_transport_read+0x9c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d003      	beq.n	80026be <cubemx_transport_read+0x92>
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d3e3      	bcc.n	8002686 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80026be:	69bb      	ldr	r3, [r7, #24]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000cb18 	.word	0x2000cb18
 80026cc:	2000cb14 	.word	0x2000cb14
 80026d0:	2000c314 	.word	0x2000c314

080026d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <MX_GPIO_Init+0x130>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	4a45      	ldr	r2, [pc, #276]	@ (8002804 <MX_GPIO_Init+0x130>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f6:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <MX_GPIO_Init+0x130>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002702:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a3f      	ldr	r2, [pc, #252]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <MX_GPIO_Init+0x130>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	4a39      	ldr	r2, [pc, #228]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002726:	4b37      	ldr	r3, [pc, #220]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	4b34      	ldr	r3, [pc, #208]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	4a33      	ldr	r2, [pc, #204]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273e:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274a:	4b2e      	ldr	r3, [pc, #184]	@ (8002804 <MX_GPIO_Init+0x130>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002756:	4b2b      	ldr	r3, [pc, #172]	@ (8002804 <MX_GPIO_Init+0x130>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|M2_pin2_Pin, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276c:	f002 f8a8 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_pin1_Pin|M1_pin1_Pin|M1_pin2_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	2138      	movs	r1, #56	@ 0x38
 8002774:	4824      	ldr	r0, [pc, #144]	@ (8002808 <MX_GPIO_Init+0x134>)
 8002776:	f002 f8a3 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800277a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800277e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002780:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	481e      	ldr	r0, [pc, #120]	@ (800280c <MX_GPIO_Init+0x138>)
 8002792:	f001 ff13 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|M2_pin2_Pin;
 8002796:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800279a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279c:	2301      	movs	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b2:	f001 ff03 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	480f      	ldr	r0, [pc, #60]	@ (8002808 <MX_GPIO_Init+0x134>)
 80027cc:	f001 fef6 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M2_pin1_Pin|M1_pin1_Pin|M1_pin2_Pin;
 80027d0:	2338      	movs	r3, #56	@ 0x38
 80027d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	4808      	ldr	r0, [pc, #32]	@ (8002808 <MX_GPIO_Init+0x134>)
 80027e8:	f001 fee8 	bl	80045bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2105      	movs	r1, #5
 80027f0:	2028      	movs	r0, #40	@ 0x28
 80027f2:	f001 fb7d 	bl	8003ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027f6:	2028      	movs	r0, #40	@ 0x28
 80027f8:	f001 fb94 	bl	8003f24 <HAL_NVIC_EnableIRQ>

}
 80027fc:	bf00      	nop
 80027fe:	3728      	adds	r7, #40	@ 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	48000400 	.word	0x48000400
 800280c:	48000800 	.word	0x48000800

08002810 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <MX_I2C2_Init+0x78>)
 8002818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10903294;
 800281a:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <MX_I2C2_Init+0x74>)
 800281c:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <MX_I2C2_Init+0x7c>)
 800281e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002826:	4b17      	ldr	r3, [pc, #92]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002828:	2201      	movs	r2, #1
 800282a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800282c:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <MX_I2C2_Init+0x74>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002832:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <MX_I2C2_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800284a:	480e      	ldr	r0, [pc, #56]	@ (8002884 <MX_I2C2_Init+0x74>)
 800284c:	f002 f88d 	bl	800496a <HAL_I2C_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002856:	f000 f8ed 	bl	8002a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800285a:	2100      	movs	r1, #0
 800285c:	4809      	ldr	r0, [pc, #36]	@ (8002884 <MX_I2C2_Init+0x74>)
 800285e:	f002 fe0f 	bl	8005480 <HAL_I2CEx_ConfigAnalogFilter>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002868:	f000 f8e4 	bl	8002a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800286c:	2100      	movs	r1, #0
 800286e:	4805      	ldr	r0, [pc, #20]	@ (8002884 <MX_I2C2_Init+0x74>)
 8002870:	f002 fe51 	bl	8005516 <HAL_I2CEx_ConfigDigitalFilter>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800287a:	f000 f8db 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000cb1c 	.word	0x2000cb1c
 8002888:	40005800 	.word	0x40005800
 800288c:	10903294 	.word	0x10903294

08002890 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b09e      	sub	sp, #120	@ 0x78
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	2254      	movs	r2, #84	@ 0x54
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f01b fa15 	bl	801dce0 <memset>
  if(i2cHandle->Instance==I2C2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002938 <HAL_I2C_MspInit+0xa8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d137      	bne.n	8002930 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fc83 	bl	80061d8 <HAL_RCCEx_PeriphCLKConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028d8:	f000 f8ac 	bl	8002a34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028dc:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_I2C_MspInit+0xac>)
 80028de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e0:	4a16      	ldr	r2, [pc, #88]	@ (800293c <HAL_I2C_MspInit+0xac>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e8:	4b14      	ldr	r3, [pc, #80]	@ (800293c <HAL_I2C_MspInit+0xac>)
 80028ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fa:	2312      	movs	r3, #18
 80028fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002906:	2304      	movs	r3, #4
 8002908:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800290e:	4619      	mov	r1, r3
 8002910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002914:	f001 fe52 	bl	80045bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_I2C_MspInit+0xac>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_I2C_MspInit+0xac>)
 800291e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002922:	6593      	str	r3, [r2, #88]	@ 0x58
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_I2C_MspInit+0xac>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002930:	bf00      	nop
 8002932:	3778      	adds	r7, #120	@ 0x78
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40005800 	.word	0x40005800
 800293c:	40021000 	.word	0x40021000

08002940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002944:	f001 f9e5 	bl	8003d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002948:	f000 f816 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800294c:	f7ff fec2 	bl	80026d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002950:	f7ff fde2 	bl	8002518 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002954:	f000 ff5e 	bl	8003814 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 8002958:	f7ff ff5a 	bl	8002810 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800295c:	f000 fff0 	bl	8003940 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002960:	f000 fee4 	bl	800372c <MX_TIM1_Init>
  MX_UART5_Init();
 8002964:	f000 ffa0 	bl	80038a8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002968:	f007 f9b8 	bl	8009cdc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800296c:	f7fe feac 	bl	80016c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002970:	f007 f9d8 	bl	8009d24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <main+0x34>

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b094      	sub	sp, #80	@ 0x50
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 0318 	add.w	r3, r7, #24
 8002982:	2238      	movs	r2, #56	@ 0x38
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f01b f9aa 	bl	801dce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800299a:	2000      	movs	r0, #0
 800299c:	f002 fe08 	bl	80055b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029aa:	2340      	movs	r3, #64	@ 0x40
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ae:	2302      	movs	r3, #2
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029b2:	2302      	movs	r3, #2
 80029b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80029b6:	2304      	movs	r3, #4
 80029b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80029ba:	2355      	movs	r3, #85	@ 0x55
 80029bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029be:	2302      	movs	r3, #2
 80029c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029c2:	2302      	movs	r3, #2
 80029c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ca:	f107 0318 	add.w	r3, r7, #24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fea2 	bl	8005718 <HAL_RCC_OscConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029da:	f000 f82b 	bl	8002a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029de:	230f      	movs	r3, #15
 80029e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e2:	2303      	movs	r3, #3
 80029e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2104      	movs	r1, #4
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 f9a0 	bl	8005d3c <HAL_RCC_ClockConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002a02:	f000 f817 	bl	8002a34 <Error_Handler>
  }
}
 8002a06:	bf00      	nop
 8002a08:	3750      	adds	r7, #80	@ 0x50
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a22:	f001 f98f 	bl	8003d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40001000 	.word	0x40001000

08002a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
}
 8002a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <Error_Handler+0x8>

08002a40 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <microros_allocate+0x3c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <microros_allocate+0x3c>)
 8002a58:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <microros_allocate+0x40>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <microros_allocate+0x40>)
 8002a68:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fb04 	bl	8002078 <pvPortMallocMicroROS>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000cb70 	.word	0x2000cb70
 8002a80:	2000cb74 	.word	0x2000cb74

08002a84 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fc13 	bl	80022c0 <getBlockSize>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <microros_deallocate+0x34>)
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <microros_deallocate+0x34>)
 8002aa6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff fbad 	bl	8002208 <vPortFreeMicroROS>
  }
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000cb74 	.word	0x2000cb74

08002abc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002ac8:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <microros_reallocate+0x64>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <microros_reallocate+0x64>)
 8002ad6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <microros_reallocate+0x68>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <microros_reallocate+0x68>)
 8002ae6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002aee:	68b8      	ldr	r0, [r7, #8]
 8002af0:	f7ff fac2 	bl	8002078 <pvPortMallocMicroROS>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e00e      	b.n	8002b16 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff fbe1 	bl	80022c0 <getBlockSize>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <microros_reallocate+0x68>)
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <microros_reallocate+0x68>)
 8002b0a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff fbf4 	bl	80022fc <pvPortReallocMicroROS>
 8002b14:	4603      	mov	r3, r0
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000cb70 	.word	0x2000cb70
 8002b24:	2000cb74 	.word	0x2000cb74

08002b28 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <microros_zero_allocate+0x48>)
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <microros_zero_allocate+0x48>)
 8002b46:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <microros_zero_allocate+0x4c>)
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <microros_zero_allocate+0x4c>)
 8002b5a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff fbf9 	bl	8002356 <pvPortCallocMicroROS>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000cb70 	.word	0x2000cb70
 8002b74:	2000cb74 	.word	0x2000cb74

08002b78 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002b8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b8e:	a320      	add	r3, pc, #128	@ (adr r3, 8002c10 <UTILS_NanosecondsToTimespec+0x98>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fe f868 	bl	8000c68 <__aeabi_ldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002c10 <UTILS_NanosecondsToTimespec+0x98>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fe f85c 	bl	8000c68 <__aeabi_ldivmod>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da20      	bge.n	8002bfe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <UTILS_NanosecondsToTimespec+0x90>)
 8002bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc6:	1712      	asrs	r2, r2, #28
 8002bc8:	17db      	asrs	r3, r3, #31
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	17c8      	asrs	r0, r1, #31
 8002bda:	460c      	mov	r4, r1
 8002bdc:	4605      	mov	r5, r0
 8002bde:	ebb2 0804 	subs.w	r8, r2, r4
 8002be2:	eb63 0905 	sbc.w	r9, r3, r5
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4906      	ldr	r1, [pc, #24]	@ (8002c0c <UTILS_NanosecondsToTimespec+0x94>)
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	441a      	add	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
    }
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c08:	44b82fa1 	.word	0x44b82fa1
 8002c0c:	3b9aca00 	.word	0x3b9aca00
 8002c10:	3b9aca00 	.word	0x3b9aca00
 8002c14:	00000000 	.word	0x00000000

08002c18 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c1c:	b08e      	sub	sp, #56	@ 0x38
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c22:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002c24:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f009 fd18 	bl	800c674 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	17da      	asrs	r2, r3, #31
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	61fa      	str	r2, [r7, #28]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	000b      	movs	r3, r1
 8002c58:	2200      	movs	r2, #0
 8002c5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	2200      	movs	r2, #0
 8002c62:	461c      	mov	r4, r3
 8002c64:	4615      	mov	r5, r2
 8002c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c6a:	1911      	adds	r1, r2, r4
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	416b      	adcs	r3, r5
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c76:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002c7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	f04f 0500 	mov.w	r5, #0
 8002c8a:	015d      	lsls	r5, r3, #5
 8002c8c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002c90:	0154      	lsls	r4, r2, #5
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	ebb2 0800 	subs.w	r8, r2, r0
 8002c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002caa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002cae:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	eb18 0a00 	adds.w	sl, r8, r0
 8002cba:	eb49 0b01 	adc.w	fp, r9, r1
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cd2:	ebb2 040a 	subs.w	r4, r2, sl
 8002cd6:	603c      	str	r4, [r7, #0]
 8002cd8:	eb63 030b 	sbc.w	r3, r3, fp
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	181b      	adds	r3, r3, r0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	462b      	mov	r3, r5
 8002cea:	eb41 0303 	adc.w	r3, r1, r3
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cf6:	f7ff ff3f 	bl	8002b78 <UTILS_NanosecondsToTimespec>

    return 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3738      	adds	r7, #56	@ 0x38
 8002d00:	46bd      	mov	sp, r7
 8002d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002d08 <vSetActuatorMsg>:
	 * velocity: []
	 * normalized: []

*************************************************************************/

void vSetActuatorMsg(float *fpVelocity){
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	velocity_msg.velocity.data[0] = fpVelocity[0];
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	@ (8002d94 <vSetActuatorMsg+0x8c>)
 8002d16:	6a14      	ldr	r4, [r2, #32]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc4d 	bl	80005b8 <__aeabi_f2d>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[1] = fpVelocity[1];
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <vSetActuatorMsg+0x8c>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f103 0408 	add.w	r4, r3, #8
 8002d34:	4610      	mov	r0, r2
 8002d36:	f7fd fc3f 	bl	80005b8 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[2] = fpVelocity[2];
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3308      	adds	r3, #8
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <vSetActuatorMsg+0x8c>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f103 0410 	add.w	r4, r3, #16
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7fd fc31 	bl	80005b8 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[3] = fpVelocity[3];
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	330c      	adds	r3, #12
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <vSetActuatorMsg+0x8c>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f103 0418 	add.w	r4, r3, #24
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7fd fc23 	bl	80005b8 <__aeabi_f2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[4] = imu_msg.linear_acceleration.z;
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <vSetActuatorMsg+0x8c>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f103 0120 	add.w	r1, r3, #32
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <vSetActuatorMsg+0x90>)
 8002d84:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002d88:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	2000cb84 	.word	0x2000cb84
 8002d98:	2000cbc0 	.word	0x2000cbc0

08002d9c <vFirstSetActuatorMsg>:
   	   	   	   	   	   	memory with every message sent, at some point we will
   	   	   	   	   	   	run out of memory.

*************************************************************************/

void vFirstSetActuatorMsg(float *fpVelocity){
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	velocity_msg.header.frame_id.capacity = 20;
 8002da4:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002da6:	2214      	movs	r2, #20
 8002da8:	611a      	str	r2, [r3, #16]
	velocity_msg.header.frame_id.data = (char*) pvPortMalloc(velocity_msg.header.frame_id.capacity  * sizeof(char));
 8002daa:	4b30      	ldr	r3, [pc, #192]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f00a ffbc 	bl	800dd2c <pvPortMalloc>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002db8:	6093      	str	r3, [r2, #8]
	velocity_msg.header.frame_id.size = strlen(velocity_msg.header.frame_id.data);
 8002dba:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa8e 	bl	80002e0 <strlen>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a29      	ldr	r2, [pc, #164]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002dc8:	60d3      	str	r3, [r2, #12]

	velocity_msg.velocity.capacity = 5;
 8002dca:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002dcc:	2205      	movs	r2, #5
 8002dce:	629a      	str	r2, [r3, #40]	@ 0x28
	velocity_msg.velocity.data = (double*) pvPortMalloc(velocity_msg.velocity.capacity * sizeof(double));
 8002dd0:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f00a ffa8 	bl	800dd2c <pvPortMalloc>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002de0:	6213      	str	r3, [r2, #32]
	velocity_msg.velocity.data[0] = fpVelocity[0];
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a21      	ldr	r2, [pc, #132]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002de8:	6a14      	ldr	r4, [r2, #32]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fbe4 	bl	80005b8 <__aeabi_f2d>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[1] = fpVelocity[1];
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f103 0408 	add.w	r4, r3, #8
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fd fbd6 	bl	80005b8 <__aeabi_f2d>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[2] = fpVelocity[2];
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3308      	adds	r3, #8
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f103 0410 	add.w	r4, r3, #16
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7fd fbc8 	bl	80005b8 <__aeabi_f2d>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[3] = fpVelocity[3];
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	330c      	adds	r3, #12
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f103 0418 	add.w	r4, r3, #24
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7fd fbba 	bl	80005b8 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[4] = imu_msg.linear_acceleration.z;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f103 0120 	add.w	r1, r3, #32
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <vFirstSetActuatorMsg+0xd4>)
 8002e56:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002e5a:	e9c1 2300 	strd	r2, r3, [r1]
	velocity_msg.velocity.size = 5;
 8002e5e:	4b03      	ldr	r3, [pc, #12]	@ (8002e6c <vFirstSetActuatorMsg+0xd0>)
 8002e60:	2205      	movs	r2, #5
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}
 8002e6c:	2000cb84 	.word	0x2000cb84
 8002e70:	2000cbc0 	.word	0x2000cbc0

08002e74 <vSendActuatorMsg>:
	Output params:       n/a

	Extra:

*************************************************************************/
void vSendActuatorMsg(){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	i32PubMessageState = rcl_publish(&velocity_pub, &velocity_msg, NULL);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	4904      	ldr	r1, [pc, #16]	@ (8002e8c <vSendActuatorMsg+0x18>)
 8002e7c:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <vSendActuatorMsg+0x1c>)
 8002e7e:	f00c f855 	bl	800ef2c <rcl_publish>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a03      	ldr	r2, [pc, #12]	@ (8002e94 <vSendActuatorMsg+0x20>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000cb84 	.word	0x2000cb84
 8002e90:	2000cb7c 	.word	0x2000cb7c
 8002e94:	2000cde0 	.word	0x2000cde0

08002e98 <vImuCallback>:
//		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
//	}
//
//}
void vImuCallback(const void * msgin)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	//const sensor_msgs__msg__Imu * minha_msg;
	if (msgin != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <vImuCallback+0x1a>
	{
		// Indica que houve leitura da IMU para a tarefa escrever setpoint
		osEventFlagsSet(hostImuEventHandle,0x01);
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <vImuCallback+0x24>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f007 f91b 	bl	800a0e8 <osEventFlagsSet>
		//float a_velocity[] = {5,10,100,500};
		//vSetActuatorMsg(a_velocity);
		//HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
	}

}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20004dc8 	.word	0x20004dc8

08002ec0 <vMyMicroros>:
	Output params:       n/a

	Extra:

*************************************************************************/
void vMyMicroros(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
	if(i32MicrorosConfiguration()==RCL_RET_OK && i32CreateNode()==RCL_RET_OK && rmw_uros_sync_session(1000) == RMW_RET_OK &&
 8002ec6:	f000 f893 	bl	8002ff0 <i32MicrorosConfiguration>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d13c      	bne.n	8002f4a <vMyMicroros+0x8a>
 8002ed0:	f000 f956 	bl	8003180 <i32CreateNode>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d137      	bne.n	8002f4a <vMyMicroros+0x8a>
 8002eda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ede:	f00e ff53 	bl	8011d88 <rmw_uros_sync_session>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d130      	bne.n	8002f4a <vMyMicroros+0x8a>
			i32CreatePublisher()==RCL_RET_OK && i32CreateSubscriber()==RCL_RET_OK && i32CreateExecutor()==RCL_RET_OK){
 8002ee8:	f000 f97a 	bl	80031e0 <i32CreatePublisher>
 8002eec:	4603      	mov	r3, r0
	if(i32MicrorosConfiguration()==RCL_RET_OK && i32CreateNode()==RCL_RET_OK && rmw_uros_sync_session(1000) == RMW_RET_OK &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d12b      	bne.n	8002f4a <vMyMicroros+0x8a>
			i32CreatePublisher()==RCL_RET_OK && i32CreateSubscriber()==RCL_RET_OK && i32CreateExecutor()==RCL_RET_OK){
 8002ef2:	f000 f9a3 	bl	800323c <i32CreateSubscriber>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d126      	bne.n	8002f4a <vMyMicroros+0x8a>
 8002efc:	f000 f9cc 	bl	8003298 <i32CreateExecutor>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d121      	bne.n	8002f4a <vMyMicroros+0x8a>

		float a_velocity[] = {0,0,0,0};
 8002f06:	463b      	mov	r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
		vFirstSetActuatorMsg(a_velocity);
 8002f12:	463b      	mov	r3, r7
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff41 	bl	8002d9c <vFirstSetActuatorMsg>
		 * is configured to be one second.
		 * https://micro.ros.org/docs/tutorials/programming_rcl_rclc/executor/
		 */

		// Run executor
		rcl_ret_t ret = rclc_executor_spin_some(&executor,1000*(1000*1000));
 8002f1a:	a32b      	add	r3, pc, #172	@ (adr r3, 8002fc8 <vMyMicroros+0x108>)
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	482b      	ldr	r0, [pc, #172]	@ (8002fd0 <vMyMicroros+0x110>)
 8002f22:	f00d f905 	bl	8010130 <rclc_executor_spin_some>
 8002f26:	6178      	str	r0, [r7, #20]
		//rclc_executor_spin(&executor);
		while(RCL_RET_OK==ret){
 8002f28:	e00a      	b.n	8002f40 <vMyMicroros+0x80>

			if(i32PubMessageState!=RCL_RET_OK){
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <vMyMicroros+0x114>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <vMyMicroros+0x88>
				break;
			}
			ret = rclc_executor_spin_some(&executor,1000*(1000*1000));
 8002f32:	a325      	add	r3, pc, #148	@ (adr r3, 8002fc8 <vMyMicroros+0x108>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	4825      	ldr	r0, [pc, #148]	@ (8002fd0 <vMyMicroros+0x110>)
 8002f3a:	f00d f8f9 	bl	8010130 <rclc_executor_spin_some>
 8002f3e:	6178      	str	r0, [r7, #20]
		while(RCL_RET_OK==ret){
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f1      	beq.n	8002f2a <vMyMicroros+0x6a>
 8002f46:	e000      	b.n	8002f4a <vMyMicroros+0x8a>
				break;
 8002f48:	bf00      	nop
		}

	}
	rcl_ret_t rc;
	rc = rclc_executor_fini(&executor);
 8002f4a:	4821      	ldr	r0, [pc, #132]	@ (8002fd0 <vMyMicroros+0x110>)
 8002f4c:	f00d f818 	bl	800ff80 <rclc_executor_fini>
 8002f50:	6138      	str	r0, [r7, #16]
	rc += rcl_publisher_fini(&velocity_pub, &node);
 8002f52:	4921      	ldr	r1, [pc, #132]	@ (8002fd8 <vMyMicroros+0x118>)
 8002f54:	4821      	ldr	r0, [pc, #132]	@ (8002fdc <vMyMicroros+0x11c>)
 8002f56:	f00b ff83 	bl	800ee60 <rcl_publisher_fini>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
	rc += rcl_timer_fini(&timer);
 8002f62:	481f      	ldr	r0, [pc, #124]	@ (8002fe0 <vMyMicroros+0x120>)
 8002f64:	f00c fb16 	bl	800f594 <rcl_timer_fini>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
	rc += rcl_subscription_fini(&imu_sub, &node);
 8002f70:	4919      	ldr	r1, [pc, #100]	@ (8002fd8 <vMyMicroros+0x118>)
 8002f72:	481c      	ldr	r0, [pc, #112]	@ (8002fe4 <vMyMicroros+0x124>)
 8002f74:	f00c f8ce 	bl	800f114 <rcl_subscription_fini>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
	rc += rcl_node_fini(&node);
 8002f80:	4815      	ldr	r0, [pc, #84]	@ (8002fd8 <vMyMicroros+0x118>)
 8002f82:	f00b fe0d 	bl	800eba0 <rcl_node_fini>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
	rc += rclc_support_fini(&support);
 8002f8e:	4816      	ldr	r0, [pc, #88]	@ (8002fe8 <vMyMicroros+0x128>)
 8002f90:	f00d fa68 	bl	8010464 <rclc_support_fini>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
	i32PubMessageState=RCL_RET_OK;
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <vMyMicroros+0x114>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
	vPortFree((void *)velocity_msg.header.frame_id.data); // Necessary to avoid running out of memory.
 8002fa2:	4b12      	ldr	r3, [pc, #72]	@ (8002fec <vMyMicroros+0x12c>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f00a ff8e 	bl	800dec8 <vPortFree>
	vPortFree((void *)velocity_msg.velocity.data);	// Necessary to avoid running out of memory.
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <vMyMicroros+0x12c>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f00a ff89 	bl	800dec8 <vPortFree>
	vFastBlinkOnError();
 8002fb6:	f000 f9f7 	bl	80033a8 <vFastBlinkOnError>
	return;
 8002fba:	bf00      	nop
}
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	3b9aca00 	.word	0x3b9aca00
 8002fcc:	00000000 	.word	0x00000000
 8002fd0:	2000cd50 	.word	0x2000cd50
 8002fd4:	2000cde0 	.word	0x2000cde0
 8002fd8:	2000cd48 	.word	0x2000cd48
 8002fdc:	2000cb7c 	.word	0x2000cb7c
 8002fe0:	2000cb80 	.word	0x2000cb80
 8002fe4:	2000cb78 	.word	0x2000cb78
 8002fe8:	2000cd14 	.word	0x2000cd14
 8002fec:	2000cb84 	.word	0x2000cb84

08002ff0 <i32MicrorosConfiguration>:
   	   	   	   	   	   	If ret is RCL_RET_OK, this method was successful.

	Extra:

*************************************************************************/
rcl_ret_t i32MicrorosConfiguration(){
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b090      	sub	sp, #64	@ 0x40
 8002ff4:	af02      	add	r7, sp, #8
	rmw_uros_set_custom_transport(
 8002ff6:	4b56      	ldr	r3, [pc, #344]	@ (8003150 <i32MicrorosConfiguration+0x160>)
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	4b56      	ldr	r3, [pc, #344]	@ (8003154 <i32MicrorosConfiguration+0x164>)
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b56      	ldr	r3, [pc, #344]	@ (8003158 <i32MicrorosConfiguration+0x168>)
 8003000:	4a56      	ldr	r2, [pc, #344]	@ (800315c <i32MicrorosConfiguration+0x16c>)
 8003002:	4957      	ldr	r1, [pc, #348]	@ (8003160 <i32MicrorosConfiguration+0x170>)
 8003004:	2001      	movs	r0, #1
 8003006:	f00d ff4f 	bl	8010ea8 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4618      	mov	r0, r3
 8003010:	f00d fb30 	bl	8010674 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8003014:	4b53      	ldr	r3, [pc, #332]	@ (8003164 <i32MicrorosConfiguration+0x174>)
 8003016:	61fb      	str	r3, [r7, #28]
	freeRTOS_allocator.deallocate = microros_deallocate;
 8003018:	4b53      	ldr	r3, [pc, #332]	@ (8003168 <i32MicrorosConfiguration+0x178>)
 800301a:	623b      	str	r3, [r7, #32]
	freeRTOS_allocator.reallocate = microros_reallocate;
 800301c:	4b53      	ldr	r3, [pc, #332]	@ (800316c <i32MicrorosConfiguration+0x17c>)
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8003020:	4b53      	ldr	r3, [pc, #332]	@ (8003170 <i32MicrorosConfiguration+0x180>)
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4618      	mov	r0, r3
 800302a:	f00d fb3f 	bl	80106ac <rcutils_set_default_allocator>
 800302e:	4603      	mov	r3, r0
 8003030:	f083 0301 	eor.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <i32MicrorosConfiguration+0x54>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800303a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800303e:	484d      	ldr	r0, [pc, #308]	@ (8003174 <i32MicrorosConfiguration+0x184>)
 8003040:	f01a fc70 	bl	801d924 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8003044:	4c4c      	ldr	r4, [pc, #304]	@ (8003178 <i32MicrorosConfiguration+0x188>)
 8003046:	463b      	mov	r3, r7
 8003048:	4618      	mov	r0, r3
 800304a:	f00d fb21 	bl	8010690 <rcutils_get_default_allocator>
 800304e:	4625      	mov	r5, r4
 8003050:	463c      	mov	r4, r7
 8003052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	602b      	str	r3, [r5, #0]
	// Initialize and modify options (Set DOMAIN ID to 25)
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800305a:	f00b fb55 	bl	800e708 <rcl_get_zero_initialized_init_options>
 800305e:	4603      	mov	r3, r0
 8003060:	61bb      	str	r3, [r7, #24]

	int i=0;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	@ 0x34
	rcl_ret_t ret;
	ret = rcl_init_options_init(&init_options, allocator);
 8003066:	4b44      	ldr	r3, [pc, #272]	@ (8003178 <i32MicrorosConfiguration+0x188>)
 8003068:	f107 0418 	add.w	r4, r7, #24
 800306c:	466d      	mov	r5, sp
 800306e:	f103 020c 	add.w	r2, r3, #12
 8003072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003076:	e885 0003 	stmia.w	r5, {r0, r1}
 800307a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307c:	4620      	mov	r0, r4
 800307e:	f00b fb45 	bl	800e70c <rcl_init_options_init>
 8003082:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003084:	e011      	b.n	80030aa <i32MicrorosConfiguration+0xba>
		ret = rcl_init_options_init(&init_options, allocator);
 8003086:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <i32MicrorosConfiguration+0x188>)
 8003088:	f107 0418 	add.w	r4, r7, #24
 800308c:	466d      	mov	r5, sp
 800308e:	f103 020c 	add.w	r2, r3, #12
 8003092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003096:	e885 0003 	stmia.w	r5, {r0, r1}
 800309a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309c:	4620      	mov	r0, r4
 800309e:	f00b fb35 	bl	800e70c <rcl_init_options_init>
 80030a2:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 80030a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a6:	3301      	adds	r3, #1
 80030a8:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <i32MicrorosConfiguration+0xc8>
 80030b0:	2201      	movs	r2, #1
 80030b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b4:	4293      	cmp	r3, r2
 80030b6:	dbe6      	blt.n	8003086 <i32MicrorosConfiguration+0x96>
	}
	if(ret != RCL_RET_OK){return ret;}
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <i32MicrorosConfiguration+0xd2>
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	e041      	b.n	8003146 <i32MicrorosConfiguration+0x156>


	i=0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
	ret = rcl_init_options_set_domain_id(&init_options, 25);
 80030c6:	f107 0318 	add.w	r3, r7, #24
 80030ca:	2119      	movs	r1, #25
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00b fbff 	bl	800e8d0 <rcl_init_options_set_domain_id>
 80030d2:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80030d4:	e009      	b.n	80030ea <i32MicrorosConfiguration+0xfa>
		ret = rcl_init_options_set_domain_id(&init_options, 25);
 80030d6:	f107 0318 	add.w	r3, r7, #24
 80030da:	2119      	movs	r1, #25
 80030dc:	4618      	mov	r0, r3
 80030de:	f00b fbf7 	bl	800e8d0 <rcl_init_options_set_domain_id>
 80030e2:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 80030e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e6:	3301      	adds	r3, #1
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80030ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <i32MicrorosConfiguration+0x108>
 80030f0:	2201      	movs	r2, #1
 80030f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f4:	4293      	cmp	r3, r2
 80030f6:	dbee      	blt.n	80030d6 <i32MicrorosConfiguration+0xe6>
	}
	if(ret != RCL_RET_OK){return ret;}
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <i32MicrorosConfiguration+0x112>
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	e021      	b.n	8003146 <i32MicrorosConfiguration+0x156>

	// Initialize rclc support object with custom options
	i=0;
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	@ 0x34
	ret = rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8003106:	f107 0318 	add.w	r3, r7, #24
 800310a:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <i32MicrorosConfiguration+0x188>)
 800310c:	9200      	str	r2, [sp, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	481a      	ldr	r0, [pc, #104]	@ (800317c <i32MicrorosConfiguration+0x18c>)
 8003114:	f00d f972 	bl	80103fc <rclc_support_init_with_options>
 8003118:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 800311a:	e00c      	b.n	8003136 <i32MicrorosConfiguration+0x146>
		ret = rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800311c:	f107 0318 	add.w	r3, r7, #24
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <i32MicrorosConfiguration+0x188>)
 8003122:	9200      	str	r2, [sp, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	4814      	ldr	r0, [pc, #80]	@ (800317c <i32MicrorosConfiguration+0x18c>)
 800312a:	f00d f967 	bl	80103fc <rclc_support_init_with_options>
 800312e:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 8003130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003132:	3301      	adds	r3, #1
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <i32MicrorosConfiguration+0x154>
 800313c:	2201      	movs	r2, #1
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	4293      	cmp	r3, r2
 8003142:	dbeb      	blt.n	800311c <i32MicrorosConfiguration+0x12c>
	};


	return ret;
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003146:	4618      	mov	r0, r3
 8003148:	3738      	adds	r7, #56	@ 0x38
 800314a:	46bd      	mov	sp, r7
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	bf00      	nop
 8003150:	0800262d 	.word	0x0800262d
 8003154:	080025c9 	.word	0x080025c9
 8003158:	080025a9 	.word	0x080025a9
 800315c:	0800257d 	.word	0x0800257d
 8003160:	2000ce84 	.word	0x2000ce84
 8003164:	08002a41 	.word	0x08002a41
 8003168:	08002a85 	.word	0x08002a85
 800316c:	08002abd 	.word	0x08002abd
 8003170:	08002b29 	.word	0x08002b29
 8003174:	08020048 	.word	0x08020048
 8003178:	2000cd00 	.word	0x2000cd00
 800317c:	2000cd14 	.word	0x2000cd14

08003180 <i32CreateNode>:
   	   	   	   	   	    If rc2 is RCL_RET_OK, this method was successful.

	Extra:

*************************************************************************/
rcl_ret_t i32CreateNode(){
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
	// Create node object

	const char * node_name = "test_node";
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <i32CreateNode+0x50>)
 8003188:	607b      	str	r3, [r7, #4]
	// Node namespace (Can remain empty "")
	const char * namespace = "";
 800318a:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <i32CreateNode+0x54>)
 800318c:	603b      	str	r3, [r7, #0]
	int i=0;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
	// Init node with configured support object
	rcl_ret_t rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 8003192:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <i32CreateNode+0x58>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4810      	ldr	r0, [pc, #64]	@ (80031dc <i32CreateNode+0x5c>)
 800319a:	f00d f98d 	bl	80104b8 <rclc_node_init_default>
 800319e:	60b8      	str	r0, [r7, #8]
	while(rc2 != RCL_RET_OK && i<iNumberOfTries){
 80031a0:	e009      	b.n	80031b6 <i32CreateNode+0x36>
		rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <i32CreateNode+0x58>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	480c      	ldr	r0, [pc, #48]	@ (80031dc <i32CreateNode+0x5c>)
 80031aa:	f00d f985 	bl	80104b8 <rclc_node_init_default>
 80031ae:	60b8      	str	r0, [r7, #8]
		i++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
	while(rc2 != RCL_RET_OK && i<iNumberOfTries){
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <i32CreateNode+0x44>
 80031bc:	2201      	movs	r2, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	dbee      	blt.n	80031a2 <i32CreateNode+0x22>
	}
	return rc2;
 80031c4:	68bb      	ldr	r3, [r7, #8]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	08020070 	.word	0x08020070
 80031d4:	0802007c 	.word	0x0802007c
 80031d8:	2000cd14 	.word	0x2000cd14
 80031dc:	2000cd48 	.word	0x2000cd48

080031e0 <i32CreatePublisher>:

	Extra:				/X3/gazebo/command/motor_speed is the topic
						generated by gazebo for the drone motors. We use
						this topic to write the speed of the motors.
*************************************************************************/
rcl_ret_t i32CreatePublisher(){
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
	rcl_ret_t ret = rclc_publisher_init_default(
 80031e6:	f00a ff8f 	bl	800e108 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <i32CreatePublisher+0x50>)
 80031ee:	4911      	ldr	r1, [pc, #68]	@ (8003234 <i32CreatePublisher+0x54>)
 80031f0:	4811      	ldr	r0, [pc, #68]	@ (8003238 <i32CreatePublisher+0x58>)
 80031f2:	f00d f99d 	bl	8010530 <rclc_publisher_init_default>
 80031f6:	6078      	str	r0, [r7, #4]
			&velocity_pub,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_msgs,msg,Actuators),
			"/X3/gazebo/command/motor_speed"
		);
	int i=0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	603b      	str	r3, [r7, #0]
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80031fc:	e00b      	b.n	8003216 <i32CreatePublisher+0x36>
		ret = rclc_publisher_init_default(
 80031fe:	f00a ff83 	bl	800e108 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <i32CreatePublisher+0x50>)
 8003206:	490b      	ldr	r1, [pc, #44]	@ (8003234 <i32CreatePublisher+0x54>)
 8003208:	480b      	ldr	r0, [pc, #44]	@ (8003238 <i32CreatePublisher+0x58>)
 800320a:	f00d f991 	bl	8010530 <rclc_publisher_init_default>
 800320e:	6078      	str	r0, [r7, #4]
					&velocity_pub,
					&node,
					ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_msgs,msg,Actuators),
					"/X3/gazebo/command/motor_speed"
			   );
		i++;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	603b      	str	r3, [r7, #0]
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <i32CreatePublisher+0x44>
 800321c:	2201      	movs	r2, #1
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	4293      	cmp	r3, r2
 8003222:	dbec      	blt.n	80031fe <i32CreatePublisher+0x1e>
	};

	 return ret;
 8003224:	687b      	ldr	r3, [r7, #4]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08020080 	.word	0x08020080
 8003234:	2000cd48 	.word	0x2000cd48
 8003238:	2000cb7c 	.word	0x2000cb7c

0800323c <i32CreateSubscriber>:

	Extra:				/drone/imu is the topic generated by gazebo for
						the imu . We use this topic to read information
						about the drone imu.
*************************************************************************/
rcl_ret_t i32CreateSubscriber(){
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
	 const char * imu_topic_name = "/drone/imu";
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <i32CreateSubscriber+0x50>)
 8003244:	607b      	str	r3, [r7, #4]
	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs,msg,Imu);
 8003246:	f00f f98f 	bl	8012568 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800324a:	6038      	str	r0, [r7, #0]
	// Initialize a reliable subscriber
	rcl_ret_t rc_imu = rclc_subscription_init_default(
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	490f      	ldr	r1, [pc, #60]	@ (8003290 <i32CreateSubscriber+0x54>)
 8003252:	4810      	ldr	r0, [pc, #64]	@ (8003294 <i32CreateSubscriber+0x58>)
 8003254:	f00d f9a0 	bl	8010598 <rclc_subscription_init_default>
 8003258:	60f8      	str	r0, [r7, #12]
			&imu_sub, &node,
			imu_type_support, imu_topic_name
		);
	int i=0;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
	while(RCL_RET_OK != rc_imu && i<iNumberOfTries){
 800325e:	e009      	b.n	8003274 <i32CreateSubscriber+0x38>
		rc_imu = rclc_subscription_init_default(
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	490a      	ldr	r1, [pc, #40]	@ (8003290 <i32CreateSubscriber+0x54>)
 8003266:	480b      	ldr	r0, [pc, #44]	@ (8003294 <i32CreateSubscriber+0x58>)
 8003268:	f00d f996 	bl	8010598 <rclc_subscription_init_default>
 800326c:	60f8      	str	r0, [r7, #12]
			&imu_sub, &node,
			imu_type_support, imu_topic_name
		);
		i++;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
	while(RCL_RET_OK != rc_imu && i<iNumberOfTries){
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <i32CreateSubscriber+0x46>
 800327a:	2201      	movs	r2, #1
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4293      	cmp	r3, r2
 8003280:	dbee      	blt.n	8003260 <i32CreateSubscriber+0x24>

	}
	return rc_imu;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	080200a0 	.word	0x080200a0
 8003290:	2000cd48 	.word	0x2000cd48
 8003294:	2000cb78 	.word	0x2000cb78

08003298 <i32CreateExecutor>:
	Output params:      rcl_ret_t ret
   	   	   	   	   	    If ret is RCL_RET_OK, this method was successful.

	Extra:
*************************************************************************/
rcl_ret_t i32CreateExecutor(){
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b088      	sub	sp, #32
 800329e:	af02      	add	r7, sp, #8
	 // Create a timer
	const unsigned int timer_timeout = 1000;
 80032a0:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80032a4:	617c      	str	r4, [r7, #20]
	rcl_ret_t ret;
	ret = rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(timer_timeout), vSendActuatorMsg,true);
 80032a6:	697c      	ldr	r4, [r7, #20]
 80032a8:	2500      	movs	r5, #0
 80032aa:	46a0      	mov	r8, r4
 80032ac:	46a9      	mov	r9, r5
 80032ae:	4644      	mov	r4, r8
 80032b0:	464d      	mov	r5, r9
 80032b2:	f04f 0a00 	mov.w	sl, #0
 80032b6:	f04f 0b00 	mov.w	fp, #0
 80032ba:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 80032be:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 80032c2:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 80032c6:	4654      	mov	r4, sl
 80032c8:	465d      	mov	r5, fp
 80032ca:	ebb4 0208 	subs.w	r2, r4, r8
 80032ce:	eb65 0309 	sbc.w	r3, r5, r9
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	f04f 0500 	mov.w	r5, #0
 80032da:	025d      	lsls	r5, r3, #9
 80032dc:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 80032e0:	0254      	lsls	r4, r2, #9
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	eb12 0008 	adds.w	r0, r2, r8
 80032ea:	eb43 0109 	adc.w	r1, r3, r9
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032fc:	0182      	lsls	r2, r0, #6
 80032fe:	1a14      	subs	r4, r2, r0
 8003300:	603c      	str	r4, [r7, #0]
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	e9d7 1200 	ldrd	r1, r2, [r7]
 800330c:	460b      	mov	r3, r1
 800330e:	eb13 0308 	adds.w	r3, r3, r8
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	4613      	mov	r3, r2
 8003316:	eb43 0309 	adc.w	r3, r3, r9
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003320:	2101      	movs	r1, #1
 8003322:	9101      	str	r1, [sp, #4]
 8003324:	4918      	ldr	r1, [pc, #96]	@ (8003388 <i32CreateExecutor+0xf0>)
 8003326:	9100      	str	r1, [sp, #0]
 8003328:	4918      	ldr	r1, [pc, #96]	@ (800338c <i32CreateExecutor+0xf4>)
 800332a:	4819      	ldr	r0, [pc, #100]	@ (8003390 <i32CreateExecutor+0xf8>)
 800332c:	f00d f968 	bl	8010600 <rclc_timer_init_default2>
 8003330:	6138      	str	r0, [r7, #16]
	if(ret != RCL_RET_OK){ return ret;}
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <i32CreateExecutor+0xa4>
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	e01f      	b.n	800337c <i32CreateExecutor+0xe4>

	// Create executor
	ret = rclc_executor_init(&executor, &support.context, 2, &allocator);
 800333c:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <i32CreateExecutor+0xfc>)
 800333e:	2202      	movs	r2, #2
 8003340:	4912      	ldr	r1, [pc, #72]	@ (800338c <i32CreateExecutor+0xf4>)
 8003342:	4815      	ldr	r0, [pc, #84]	@ (8003398 <i32CreateExecutor+0x100>)
 8003344:	f00c fdb0 	bl	800fea8 <rclc_executor_init>
 8003348:	6138      	str	r0, [r7, #16]
	if(ret != RCL_RET_OK){ return ret;}
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <i32CreateExecutor+0xbc>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	e013      	b.n	800337c <i32CreateExecutor+0xe4>

	ret = rclc_executor_add_subscription(&executor, &imu_sub, &imu_msg,
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	4b10      	ldr	r3, [pc, #64]	@ (800339c <i32CreateExecutor+0x104>)
 800335a:	4a11      	ldr	r2, [pc, #68]	@ (80033a0 <i32CreateExecutor+0x108>)
 800335c:	4911      	ldr	r1, [pc, #68]	@ (80033a4 <i32CreateExecutor+0x10c>)
 800335e:	480e      	ldr	r0, [pc, #56]	@ (8003398 <i32CreateExecutor+0x100>)
 8003360:	f00c fe3e 	bl	800ffe0 <rclc_executor_add_subscription>
 8003364:	6138      	str	r0, [r7, #16]
			  &vImuCallback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	if(ret != RCL_RET_OK){ return ret;}
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <i32CreateExecutor+0xd8>
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	e005      	b.n	800337c <i32CreateExecutor+0xe4>


	ret = rclc_executor_add_timer(&executor, &timer);
 8003370:	4907      	ldr	r1, [pc, #28]	@ (8003390 <i32CreateExecutor+0xf8>)
 8003372:	4809      	ldr	r0, [pc, #36]	@ (8003398 <i32CreateExecutor+0x100>)
 8003374:	f00c fe68 	bl	8010048 <rclc_executor_add_timer>
 8003378:	6138      	str	r0, [r7, #16]

	return ret;
 800337a:	693b      	ldr	r3, [r7, #16]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	08002e75 	.word	0x08002e75
 800338c:	2000cd14 	.word	0x2000cd14
 8003390:	2000cb80 	.word	0x2000cb80
 8003394:	2000cd00 	.word	0x2000cd00
 8003398:	2000cd50 	.word	0x2000cd50
 800339c:	08002e99 	.word	0x08002e99
 80033a0:	2000cbc0 	.word	0x2000cbc0
 80033a4:	2000cb78 	.word	0x2000cb78

080033a8 <vFastBlinkOnError>:
	Output params:      n/a

	Extra:

*************************************************************************/
void vFastBlinkOnError(){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
	for(int i=0;i<50;i++){
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	e00a      	b.n	80033ca <vFastBlinkOnError+0x22>
		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 80033b4:	2120      	movs	r1, #32
 80033b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ba:	f001 fa99 	bl	80048f0 <HAL_GPIO_TogglePin>
		osDelay(100);
 80033be:	2064      	movs	r0, #100	@ 0x64
 80033c0:	f006 fe37 	bl	800a032 <osDelay>
	for(int i=0;i<50;i++){
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b31      	cmp	r3, #49	@ 0x31
 80033ce:	ddf1      	ble.n	80033b4 <vFastBlinkOnError+0xc>
	}
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	4b12      	ldr	r3, [pc, #72]	@ (800342c <HAL_MspInit+0x50>)
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	4a11      	ldr	r2, [pc, #68]	@ (800342c <HAL_MspInit+0x50>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_MspInit+0x50>)
 80033f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <HAL_MspInit+0x50>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	4a0b      	ldr	r2, [pc, #44]	@ (800342c <HAL_MspInit+0x50>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003404:	6593      	str	r3, [r2, #88]	@ 0x58
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <HAL_MspInit+0x50>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	210f      	movs	r1, #15
 8003416:	f06f 0001 	mvn.w	r0, #1
 800341a:	f000 fd69 	bl	8003ef0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800341e:	f002 f96b 	bl	80056f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	@ 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003440:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <HAL_InitTick+0xc4>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	4a2b      	ldr	r2, [pc, #172]	@ (80034f4 <HAL_InitTick+0xc4>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6593      	str	r3, [r2, #88]	@ 0x58
 800344c:	4b29      	ldr	r3, [pc, #164]	@ (80034f4 <HAL_InitTick+0xc4>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003458:	f107 020c 	add.w	r2, r7, #12
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fe40 	bl	80060e8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003468:	f002 fe12 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 800346c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003470:	4a21      	ldr	r2, [pc, #132]	@ (80034f8 <HAL_InitTick+0xc8>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0c9b      	lsrs	r3, r3, #18
 8003478:	3b01      	subs	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800347c:	4b1f      	ldr	r3, [pc, #124]	@ (80034fc <HAL_InitTick+0xcc>)
 800347e:	4a20      	ldr	r2, [pc, #128]	@ (8003500 <HAL_InitTick+0xd0>)
 8003480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_InitTick+0xcc>)
 8003484:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003488:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800348a:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_InitTick+0xcc>)
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003490:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <HAL_InitTick+0xcc>)
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_InitTick+0xcc>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800349c:	4817      	ldr	r0, [pc, #92]	@ (80034fc <HAL_InitTick+0xcc>)
 800349e:	f003 f8e9 	bl	8006674 <HAL_TIM_Base_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80034a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11b      	bne.n	80034e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034b0:	4812      	ldr	r0, [pc, #72]	@ (80034fc <HAL_InitTick+0xcc>)
 80034b2:	f003 f9a7 	bl	8006804 <HAL_TIM_Base_Start_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80034bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034c4:	2036      	movs	r0, #54	@ 0x36
 80034c6:	f000 fd2d 	bl	8003f24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b0f      	cmp	r3, #15
 80034ce:	d808      	bhi.n	80034e2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80034d0:	2200      	movs	r2, #0
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	2036      	movs	r0, #54	@ 0x36
 80034d6:	f000 fd0b 	bl	8003ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034da:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <HAL_InitTick+0xd4>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e002      	b.n	80034e8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3730      	adds	r7, #48	@ 0x30
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	431bde83 	.word	0x431bde83
 80034fc:	2000cde4 	.word	0x2000cde4
 8003500:	40001000 	.word	0x40001000
 8003504:	20000020 	.word	0x20000020

08003508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <NMI_Handler+0x4>

08003510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <HardFault_Handler+0x4>

08003518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <MemManage_Handler+0x4>

08003520 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <BusFault_Handler+0x4>

08003528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <UsageFault_Handler+0x4>

08003530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003544:	4802      	ldr	r0, [pc, #8]	@ (8003550 <DMA1_Channel1_IRQHandler+0x10>)
 8003546:	f000 fede 	bl	8004306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000d040 	.word	0x2000d040

08003554 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003558:	4802      	ldr	r0, [pc, #8]	@ (8003564 <DMA1_Channel2_IRQHandler+0x10>)
 800355a:	f000 fed4 	bl	8004306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000d0a0 	.word	0x2000d0a0

08003568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800356c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003570:	f001 f9d8 	bl	8004924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800357c:	4802      	ldr	r0, [pc, #8]	@ (8003588 <UART5_IRQHandler+0x10>)
 800357e:	f004 f8ff 	bl	8007780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2000cf18 	.word	0x2000cf18

0800358c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003590:	4802      	ldr	r0, [pc, #8]	@ (800359c <TIM6_DAC_IRQHandler+0x10>)
 8003592:	f003 f9af 	bl	80068f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000cde4 	.word	0x2000cde4

080035a0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80035a4:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <LPUART1_IRQHandler+0x10>)
 80035a6:	f004 f8eb 	bl	8007780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000ce84 	.word	0x2000ce84

080035b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return 1;
 80035b8:	2301      	movs	r3, #1
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_kill>:

int _kill(int pid, int sig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035ce:	f01a fc83 	bl	801ded8 <__errno>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2216      	movs	r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
  return -1;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_exit>:

void _exit (int status)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ffe7 	bl	80035c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035f6:	bf00      	nop
 80035f8:	e7fd      	b.n	80035f6 <_exit+0x12>

080035fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e00a      	b.n	8003622 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800360c:	f3af 8000 	nop.w
 8003610:	4601      	mov	r1, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	60ba      	str	r2, [r7, #8]
 8003618:	b2ca      	uxtb	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	429a      	cmp	r2, r3
 8003628:	dbf0      	blt.n	800360c <_read+0x12>
  }

  return len;
 800362a:	687b      	ldr	r3, [r7, #4]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800365c:	605a      	str	r2, [r3, #4]
  return 0;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_isatty>:

int _isatty(int file)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003674:	2301      	movs	r3, #1
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a4:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <_sbrk+0x5c>)
 80036a6:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <_sbrk+0x60>)
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <_sbrk+0x64>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <_sbrk+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d207      	bcs.n	80036dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036cc:	f01a fc04 	bl	801ded8 <__errno>
 80036d0:	4603      	mov	r3, r0
 80036d2:	220c      	movs	r2, #12
 80036d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036da:	e009      	b.n	80036f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036dc:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <_sbrk+0x64>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <_sbrk+0x64>)
 80036ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20020000 	.word	0x20020000
 80036fc:	00000400 	.word	0x00000400
 8003700:	2000ce34 	.word	0x2000ce34
 8003704:	2001a2f8 	.word	0x2001a2f8

08003708 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <SystemInit+0x20>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	4a05      	ldr	r2, [pc, #20]	@ (8003728 <SystemInit+0x20>)
 8003714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800374a:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <MX_TIM1_Init+0xa0>)
 800374c:	4a20      	ldr	r2, [pc, #128]	@ (80037d0 <MX_TIM1_Init+0xa4>)
 800374e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003750:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <MX_TIM1_Init+0xa0>)
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003756:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <MX_TIM1_Init+0xa0>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <MX_TIM1_Init+0xa0>)
 800375e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003762:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <MX_TIM1_Init+0xa0>)
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800376a:	4b18      	ldr	r3, [pc, #96]	@ (80037cc <MX_TIM1_Init+0xa0>)
 800376c:	2200      	movs	r2, #0
 800376e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003770:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <MX_TIM1_Init+0xa0>)
 8003772:	2200      	movs	r2, #0
 8003774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003776:	4815      	ldr	r0, [pc, #84]	@ (80037cc <MX_TIM1_Init+0xa0>)
 8003778:	f002 ff7c 	bl	8006674 <HAL_TIM_Base_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003782:	f7ff f957 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800378a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800378c:	f107 0310 	add.w	r3, r7, #16
 8003790:	4619      	mov	r1, r3
 8003792:	480e      	ldr	r0, [pc, #56]	@ (80037cc <MX_TIM1_Init+0xa0>)
 8003794:	f003 f9fe 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800379e:	f7ff f949 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4806      	ldr	r0, [pc, #24]	@ (80037cc <MX_TIM1_Init+0xa0>)
 80037b4:	f003 fc7c 	bl	80070b0 <HAL_TIMEx_MasterConfigSynchronization>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80037be:	f7ff f939 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80037c2:	bf00      	nop
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000ce38 	.word	0x2000ce38
 80037d0:	40012c00 	.word	0x40012c00

080037d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <HAL_TIM_Base_MspInit+0x38>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10b      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <HAL_TIM_Base_MspInit+0x3c>)
 80037e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ea:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <HAL_TIM_Base_MspInit+0x3c>)
 80037ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80037f2:	4b07      	ldr	r3, [pc, #28]	@ (8003810 <HAL_TIM_Base_MspInit+0x3c>)
 80037f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40021000 	.word	0x40021000

08003814 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003818:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800381a:	4a22      	ldr	r2, [pc, #136]	@ (80038a4 <MX_LPUART1_UART_Init+0x90>)
 800381c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800381e:	4b20      	ldr	r3, [pc, #128]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003824:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800382c:	4b1c      	ldr	r3, [pc, #112]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003832:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800383a:	220c      	movs	r2, #12
 800383c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	4b18      	ldr	r3, [pc, #96]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003850:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003852:	2200      	movs	r2, #0
 8003854:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003856:	4812      	ldr	r0, [pc, #72]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 8003858:	f003 fd06 	bl	8007268 <HAL_UART_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003862:	f7ff f8e7 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003866:	2100      	movs	r1, #0
 8003868:	480d      	ldr	r0, [pc, #52]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800386a:	f006 f928 	bl	8009abe <HAL_UARTEx_SetTxFifoThreshold>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003874:	f7ff f8de 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003878:	2100      	movs	r1, #0
 800387a:	4809      	ldr	r0, [pc, #36]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800387c:	f006 f95d 	bl	8009b3a <HAL_UARTEx_SetRxFifoThreshold>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003886:	f7ff f8d5 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800388a:	4805      	ldr	r0, [pc, #20]	@ (80038a0 <MX_LPUART1_UART_Init+0x8c>)
 800388c:	f006 f8de 	bl	8009a4c <HAL_UARTEx_DisableFifoMode>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003896:	f7ff f8cd 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000ce84 	.word	0x2000ce84
 80038a4:	40008000 	.word	0x40008000

080038a8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80038ac:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <MX_UART5_Init+0x90>)
 80038ae:	4a23      	ldr	r2, [pc, #140]	@ (800393c <MX_UART5_Init+0x94>)
 80038b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80038b2:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <MX_UART5_Init+0x90>)
 80038b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80038b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80038ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <MX_UART5_Init+0x90>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <MX_UART5_Init+0x90>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80038c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003938 <MX_UART5_Init+0x90>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <MX_UART5_Init+0x90>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <MX_UART5_Init+0x90>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d8:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <MX_UART5_Init+0x90>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038de:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <MX_UART5_Init+0x90>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <MX_UART5_Init+0x90>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ea:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <MX_UART5_Init+0x90>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80038f0:	4811      	ldr	r0, [pc, #68]	@ (8003938 <MX_UART5_Init+0x90>)
 80038f2:	f003 fcb9 	bl	8007268 <HAL_UART_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80038fc:	f7ff f89a 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003900:	2100      	movs	r1, #0
 8003902:	480d      	ldr	r0, [pc, #52]	@ (8003938 <MX_UART5_Init+0x90>)
 8003904:	f006 f8db 	bl	8009abe <HAL_UARTEx_SetTxFifoThreshold>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800390e:	f7ff f891 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003912:	2100      	movs	r1, #0
 8003914:	4808      	ldr	r0, [pc, #32]	@ (8003938 <MX_UART5_Init+0x90>)
 8003916:	f006 f910 	bl	8009b3a <HAL_UARTEx_SetRxFifoThreshold>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003920:	f7ff f888 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003924:	4804      	ldr	r0, [pc, #16]	@ (8003938 <MX_UART5_Init+0x90>)
 8003926:	f006 f891 	bl	8009a4c <HAL_UARTEx_DisableFifoMode>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003930:	f7ff f880 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000cf18 	.word	0x2000cf18
 800393c:	40005000 	.word	0x40005000

08003940 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003944:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003946:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <MX_USART3_UART_Init+0x94>)
 8003948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800394a:	4b21      	ldr	r3, [pc, #132]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 800394c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800395e:	4b1c      	ldr	r3, [pc, #112]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003976:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003978:	2200      	movs	r2, #0
 800397a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800397c:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 800397e:	2200      	movs	r2, #0
 8003980:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003982:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003988:	4811      	ldr	r0, [pc, #68]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 800398a:	f003 fc6d 	bl	8007268 <HAL_UART_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003994:	f7ff f84e 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003998:	2100      	movs	r1, #0
 800399a:	480d      	ldr	r0, [pc, #52]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 800399c:	f006 f88f 	bl	8009abe <HAL_UARTEx_SetTxFifoThreshold>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80039a6:	f7ff f845 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039aa:	2100      	movs	r1, #0
 80039ac:	4808      	ldr	r0, [pc, #32]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 80039ae:	f006 f8c4 	bl	8009b3a <HAL_UARTEx_SetRxFifoThreshold>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80039b8:	f7ff f83c 	bl	8002a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80039bc:	4804      	ldr	r0, [pc, #16]	@ (80039d0 <MX_USART3_UART_Init+0x90>)
 80039be:	f006 f845 	bl	8009a4c <HAL_UARTEx_DisableFifoMode>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80039c8:	f7ff f834 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000cfac 	.word	0x2000cfac
 80039d4:	40004800 	.word	0x40004800

080039d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b0a4      	sub	sp, #144	@ 0x90
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039f4:	2254      	movs	r2, #84	@ 0x54
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f01a f971 	bl	801dce0 <memset>
  if(uartHandle->Instance==LPUART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4aa4      	ldr	r2, [pc, #656]	@ (8003c94 <HAL_UART_MspInit+0x2bc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	f040 8097 	bne.w	8003b38 <HAL_UART_MspInit+0x160>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a16:	4618      	mov	r0, r3
 8003a18:	f002 fbde 	bl	80061d8 <HAL_RCCEx_PeriphCLKConfig>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a22:	f7ff f807 	bl	8002a34 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a26:	4b9c      	ldr	r3, [pc, #624]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	4a9b      	ldr	r2, [pc, #620]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a32:	4b99      	ldr	r3, [pc, #612]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3e:	4b96      	ldr	r3, [pc, #600]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	4a95      	ldr	r2, [pc, #596]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4a:	4b93      	ldr	r3, [pc, #588]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003a56:	230c      	movs	r3, #12
 8003a58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a72:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a7c:	f000 fd9e 	bl	80045bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003a80:	4b86      	ldr	r3, [pc, #536]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003a82:	4a87      	ldr	r2, [pc, #540]	@ (8003ca0 <HAL_UART_MspInit+0x2c8>)
 8003a84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003a86:	4b85      	ldr	r3, [pc, #532]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003a88:	2222      	movs	r2, #34	@ 0x22
 8003a8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a8c:	4b83      	ldr	r3, [pc, #524]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a92:	4b82      	ldr	r3, [pc, #520]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a98:	4b80      	ldr	r3, [pc, #512]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aa4:	4b7d      	ldr	r3, [pc, #500]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003aac:	2220      	movs	r2, #32
 8003aae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003ab6:	4879      	ldr	r0, [pc, #484]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003ab8:	f000 fa42 	bl	8003f40 <HAL_DMA_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8003ac2:	f7fe ffb7 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a74      	ldr	r2, [pc, #464]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ace:	4a73      	ldr	r2, [pc, #460]	@ (8003c9c <HAL_UART_MspInit+0x2c4>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003ad4:	4b73      	ldr	r3, [pc, #460]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003ad6:	4a74      	ldr	r2, [pc, #464]	@ (8003ca8 <HAL_UART_MspInit+0x2d0>)
 8003ad8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003ada:	4b72      	ldr	r3, [pc, #456]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003adc:	2223      	movs	r2, #35	@ 0x23
 8003ade:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae0:	4b70      	ldr	r3, [pc, #448]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aec:	4b6d      	ldr	r3, [pc, #436]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003aee:	2280      	movs	r2, #128	@ 0x80
 8003af0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003af2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af8:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003afe:	4b69      	ldr	r3, [pc, #420]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b04:	4b67      	ldr	r3, [pc, #412]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003b0a:	4866      	ldr	r0, [pc, #408]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003b0c:	f000 fa18 	bl	8003f40 <HAL_DMA_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8003b16:	f7fe ff8d 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a61      	ldr	r2, [pc, #388]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003b1e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b20:	4a60      	ldr	r2, [pc, #384]	@ (8003ca4 <HAL_UART_MspInit+0x2cc>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2105      	movs	r1, #5
 8003b2a:	205b      	movs	r0, #91	@ 0x5b
 8003b2c:	f000 f9e0 	bl	8003ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003b30:	205b      	movs	r0, #91	@ 0x5b
 8003b32:	f000 f9f7 	bl	8003f24 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b36:	e0a8      	b.n	8003c8a <HAL_UART_MspInit+0x2b2>
  else if(uartHandle->Instance==UART5)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5b      	ldr	r2, [pc, #364]	@ (8003cac <HAL_UART_MspInit+0x2d4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d163      	bne.n	8003c0a <HAL_UART_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003b42:	2310      	movs	r3, #16
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003b46:	2300      	movs	r3, #0
 8003b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 fb42 	bl	80061d8 <HAL_RCCEx_PeriphCLKConfig>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_UART_MspInit+0x186>
      Error_Handler();
 8003b5a:	f7fe ff6b 	bl	8002a34 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4a4d      	ldr	r2, [pc, #308]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b76:	4b48      	ldr	r3, [pc, #288]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	4a47      	ldr	r2, [pc, #284]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b82:	4b45      	ldr	r3, [pc, #276]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8e:	4b42      	ldr	r3, [pc, #264]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b92:	4a41      	ldr	r2, [pc, #260]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin;
 8003ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003bbe:	2305      	movs	r3, #5
 8003bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8003bc4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4839      	ldr	r0, [pc, #228]	@ (8003cb0 <HAL_UART_MspInit+0x2d8>)
 8003bcc:	f000 fcf6 	bl	80045bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003be6:	2305      	movs	r3, #5
 8003be8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4830      	ldr	r0, [pc, #192]	@ (8003cb4 <HAL_UART_MspInit+0x2dc>)
 8003bf4:	f000 fce2 	bl	80045bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2105      	movs	r1, #5
 8003bfc:	2035      	movs	r0, #53	@ 0x35
 8003bfe:	f000 f977 	bl	8003ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003c02:	2035      	movs	r0, #53	@ 0x35
 8003c04:	f000 f98e 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 8003c08:	e03f      	b.n	8003c8a <HAL_UART_MspInit+0x2b2>
  else if(uartHandle->Instance==USART3)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <HAL_UART_MspInit+0x2e0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d13a      	bne.n	8003c8a <HAL_UART_MspInit+0x2b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c14:	2304      	movs	r3, #4
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c20:	4618      	mov	r0, r3
 8003c22:	f002 fad9 	bl	80061d8 <HAL_RCCEx_PeriphCLKConfig>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8003c2c:	f7fe ff02 	bl	8002a34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c30:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003c36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c3c:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4c:	4a12      	ldr	r2, [pc, #72]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003c4e:	f043 0302 	orr.w	r3, r3, #2
 8003c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c54:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_UART_MspInit+0x2c0>)
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8003c60:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c78:	2307      	movs	r3, #7
 8003c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c82:	4619      	mov	r1, r3
 8003c84:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <HAL_UART_MspInit+0x2e4>)
 8003c86:	f000 fc99 	bl	80045bc <HAL_GPIO_Init>
}
 8003c8a:	bf00      	nop
 8003c8c:	3790      	adds	r7, #144	@ 0x90
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40008000 	.word	0x40008000
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	2000d040 	.word	0x2000d040
 8003ca0:	40020008 	.word	0x40020008
 8003ca4:	2000d0a0 	.word	0x2000d0a0
 8003ca8:	4002001c 	.word	0x4002001c
 8003cac:	40005000 	.word	0x40005000
 8003cb0:	48000800 	.word	0x48000800
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	40004800 	.word	0x40004800
 8003cbc:	48000400 	.word	0x48000400

08003cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cc0:	480d      	ldr	r0, [pc, #52]	@ (8003cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cc4:	f7ff fd20 	bl	8003708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cc8:	480c      	ldr	r0, [pc, #48]	@ (8003cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8003cca:	490d      	ldr	r1, [pc, #52]	@ (8003d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <LoopForever+0xe>)
  movs r3, #0
 8003cce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003cd0:	e002      	b.n	8003cd8 <LoopCopyDataInit>

08003cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cd6:	3304      	adds	r3, #4

08003cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cdc:	d3f9      	bcc.n	8003cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cde:	4a0a      	ldr	r2, [pc, #40]	@ (8003d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8003d0c <LoopForever+0x16>)
  movs r3, #0
 8003ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ce4:	e001      	b.n	8003cea <LoopFillZerobss>

08003ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ce8:	3204      	adds	r2, #4

08003cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cec:	d3fb      	bcc.n	8003ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cee:	f01a f8f9 	bl	801dee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cf2:	f7fe fe25 	bl	8002940 <main>

08003cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8003cf6:	e7fe      	b.n	8003cf6 <LoopForever>
  ldr   r0, =_estack
 8003cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d00:	20001c58 	.word	0x20001c58
  ldr r2, =_sidata
 8003d04:	08021870 	.word	0x08021870
  ldr r2, =_sbss
 8003d08:	20001c58 	.word	0x20001c58
  ldr r4, =_ebss
 8003d0c:	2001a2f8 	.word	0x2001a2f8

08003d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d10:	e7fe      	b.n	8003d10 <ADC1_2_IRQHandler>

08003d12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d1c:	2003      	movs	r0, #3
 8003d1e:	f000 f8dc 	bl	8003eda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d22:	200f      	movs	r0, #15
 8003d24:	f7ff fb84 	bl	8003430 <HAL_InitTick>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	71fb      	strb	r3, [r7, #7]
 8003d32:	e001      	b.n	8003d38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d34:	f7ff fb52 	bl	80033dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d38:	79fb      	ldrb	r3, [r7, #7]

}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_IncTick+0x1c>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_IncTick+0x20>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	4a03      	ldr	r2, [pc, #12]	@ (8003d60 <HAL_IncTick+0x1c>)
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	2000d100 	.word	0x2000d100
 8003d64:	20000024 	.word	0x20000024

08003d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	@ (8003d7c <HAL_GetTick+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000d100 	.word	0x2000d100

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db2:	4a04      	ldr	r2, [pc, #16]	@ (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	60d3      	str	r3, [r2, #12]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db0b      	blt.n	8003e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4907      	ldr	r1, [pc, #28]	@ (8003e1c <__NVIC_EnableIRQ+0x38>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	db0a      	blt.n	8003e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	490c      	ldr	r1, [pc, #48]	@ (8003e6c <__NVIC_SetPriority+0x4c>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e48:	e00a      	b.n	8003e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <__NVIC_SetPriority+0x50>)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	3b04      	subs	r3, #4
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	761a      	strb	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf28      	it	cs
 8003e92:	2304      	movcs	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d902      	bls.n	8003ea4 <NVIC_EncodePriority+0x30>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <NVIC_EncodePriority+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	4313      	orrs	r3, r2
         );
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ff4c 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003efe:	f7ff ff63 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f7ff ffb3 	bl	8003e74 <NVIC_EncodePriority>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff82 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f1c:	bf00      	nop
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff56 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e08d      	b.n	800406e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b47      	ldr	r3, [pc, #284]	@ (8004078 <HAL_DMA_Init+0x138>)
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d80f      	bhi.n	8003f7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b45      	ldr	r3, [pc, #276]	@ (800407c <HAL_DMA_Init+0x13c>)
 8003f66:	4413      	add	r3, r2
 8003f68:	4a45      	ldr	r2, [pc, #276]	@ (8004080 <HAL_DMA_Init+0x140>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a42      	ldr	r2, [pc, #264]	@ (8004084 <HAL_DMA_Init+0x144>)
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f7c:	e00e      	b.n	8003f9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b40      	ldr	r3, [pc, #256]	@ (8004088 <HAL_DMA_Init+0x148>)
 8003f86:	4413      	add	r3, r2
 8003f88:	4a3d      	ldr	r2, [pc, #244]	@ (8004080 <HAL_DMA_Init+0x140>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a3c      	ldr	r2, [pc, #240]	@ (800408c <HAL_DMA_Init+0x14c>)
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa82 	bl	80044f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffc:	d102      	bne.n	8004004 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004018:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <HAL_DMA_Init+0x104>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d80c      	bhi.n	8004044 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 faa2 	bl	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	e008      	b.n	8004056 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40020407 	.word	0x40020407
 800407c:	bffdfff8 	.word	0xbffdfff8
 8004080:	cccccccd 	.word	0xcccccccd
 8004084:	40020000 	.word	0x40020000
 8004088:	bffdfbf8 	.word	0xbffdfbf8
 800408c:	40020400 	.word	0x40020400

08004090 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_DMA_Start_IT+0x20>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e066      	b.n	800417e <HAL_DMA_Start_IT+0xee>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d155      	bne.n	8004170 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f9c7 	bl	800447c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 020e 	orr.w	r2, r2, #14
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e00f      	b.n	8004128 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0204 	bic.w	r2, r2, #4
 8004116:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 020a 	orr.w	r2, r2, #10
 8004126:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004144:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800415c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e005      	b.n	800417c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004178:	2302      	movs	r3, #2
 800417a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800417c:	7dfb      	ldrb	r3, [r7, #23]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d005      	beq.n	80041aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2204      	movs	r2, #4
 80041a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e037      	b.n	800421a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 020e 	bic.w	r2, r2, #14
 80041b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f003 021f 	and.w	r2, r3, #31
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2101      	movs	r1, #1
 80041e8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800420e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004218:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d00d      	beq.n	800426c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2204      	movs	r2, #4
 8004254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	e047      	b.n	80042fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 020e 	bic.w	r2, r2, #14
 800427a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800429a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f202 	lsl.w	r2, r1, r2
 80042ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
    }
  }
  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2204      	movs	r2, #4
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d026      	beq.n	8004380 <HAL_DMA_IRQHandler+0x7a>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d021      	beq.n	8004380 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d107      	bne.n	800435a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0204 	bic.w	r2, r2, #4
 8004358:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f003 021f 	and.w	r2, r3, #31
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2104      	movs	r1, #4
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	2b00      	cmp	r3, #0
 8004374:	d071      	beq.n	800445a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800437e:	e06c      	b.n	800445a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2202      	movs	r2, #2
 800438a:	409a      	lsls	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02e      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d029      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 020a 	bic.w	r2, r2, #10
 80043ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	2102      	movs	r1, #2
 80043d2:	fa01 f202 	lsl.w	r2, r1, r2
 80043d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d038      	beq.n	800445a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043f0:	e033      	b.n	800445a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2208      	movs	r2, #8
 80043fc:	409a      	lsls	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d02a      	beq.n	800445c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d025      	beq.n	800445c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 020e 	bic.w	r2, r2, #14
 800441e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f202 	lsl.w	r2, r1, r2
 8004432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800445a:	bf00      	nop
 800445c:	bf00      	nop
}
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004492:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f003 021f 	and.w	r2, r3, #31
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f202 	lsl.w	r2, r1, r2
 80044b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d108      	bne.n	80044dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044da:	e007      	b.n	80044ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d802      	bhi.n	8004512 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800450c:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e001      	b.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004514:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3b08      	subs	r3, #8
 8004522:	4a12      	ldr	r2, [pc, #72]	@ (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	461a      	mov	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a0b      	ldr	r2, [pc, #44]	@ (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004542:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40020407 	.word	0x40020407
 8004564:	40020800 	.word	0x40020800
 8004568:	40020820 	.word	0x40020820
 800456c:	cccccccd 	.word	0xcccccccd
 8004570:	40020880 	.word	0x40020880

08004574 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	461a      	mov	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004596:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b01      	subs	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	1000823f 	.word	0x1000823f
 80045b8:	40020940 	.word	0x40020940

080045bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045ca:	e15a      	b.n	8004882 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	2101      	movs	r1, #1
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 814c 	beq.w	800487c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d005      	beq.n	80045fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d130      	bne.n	800465e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	2203      	movs	r2, #3
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004632:	2201      	movs	r2, #1
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	f003 0201 	and.w	r2, r3, #1
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b03      	cmp	r3, #3
 8004668:	d017      	beq.n	800469a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	2203      	movs	r2, #3
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d123      	bne.n	80046ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	08da      	lsrs	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3208      	adds	r2, #8
 80046ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	220f      	movs	r2, #15
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	08da      	lsrs	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3208      	adds	r2, #8
 80046e8:	6939      	ldr	r1, [r7, #16]
 80046ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	2203      	movs	r2, #3
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0203 	and.w	r2, r3, #3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a6 	beq.w	800487c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004730:	4b5b      	ldr	r3, [pc, #364]	@ (80048a0 <HAL_GPIO_Init+0x2e4>)
 8004732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004734:	4a5a      	ldr	r2, [pc, #360]	@ (80048a0 <HAL_GPIO_Init+0x2e4>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6613      	str	r3, [r2, #96]	@ 0x60
 800473c:	4b58      	ldr	r3, [pc, #352]	@ (80048a0 <HAL_GPIO_Init+0x2e4>)
 800473e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004748:	4a56      	ldr	r2, [pc, #344]	@ (80048a4 <HAL_GPIO_Init+0x2e8>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	220f      	movs	r2, #15
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004772:	d01f      	beq.n	80047b4 <HAL_GPIO_Init+0x1f8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a4c      	ldr	r2, [pc, #304]	@ (80048a8 <HAL_GPIO_Init+0x2ec>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d019      	beq.n	80047b0 <HAL_GPIO_Init+0x1f4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a4b      	ldr	r2, [pc, #300]	@ (80048ac <HAL_GPIO_Init+0x2f0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_GPIO_Init+0x1f0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a4a      	ldr	r2, [pc, #296]	@ (80048b0 <HAL_GPIO_Init+0x2f4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00d      	beq.n	80047a8 <HAL_GPIO_Init+0x1ec>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a49      	ldr	r2, [pc, #292]	@ (80048b4 <HAL_GPIO_Init+0x2f8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <HAL_GPIO_Init+0x1e8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a48      	ldr	r2, [pc, #288]	@ (80048b8 <HAL_GPIO_Init+0x2fc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <HAL_GPIO_Init+0x1e4>
 800479c:	2305      	movs	r3, #5
 800479e:	e00a      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047a0:	2306      	movs	r3, #6
 80047a2:	e008      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047a4:	2304      	movs	r3, #4
 80047a6:	e006      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047a8:	2303      	movs	r3, #3
 80047aa:	e004      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e002      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047b4:	2300      	movs	r3, #0
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	f002 0203 	and.w	r2, r2, #3
 80047bc:	0092      	lsls	r2, r2, #2
 80047be:	4093      	lsls	r3, r2
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c6:	4937      	ldr	r1, [pc, #220]	@ (80048a4 <HAL_GPIO_Init+0x2e8>)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d4:	4b39      	ldr	r3, [pc, #228]	@ (80048bc <HAL_GPIO_Init+0x300>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047f8:	4a30      	ldr	r2, [pc, #192]	@ (80048bc <HAL_GPIO_Init+0x300>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047fe:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <HAL_GPIO_Init+0x300>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004822:	4a26      	ldr	r2, [pc, #152]	@ (80048bc <HAL_GPIO_Init+0x300>)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004828:	4b24      	ldr	r3, [pc, #144]	@ (80048bc <HAL_GPIO_Init+0x300>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800484c:	4a1b      	ldr	r2, [pc, #108]	@ (80048bc <HAL_GPIO_Init+0x300>)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004852:	4b1a      	ldr	r3, [pc, #104]	@ (80048bc <HAL_GPIO_Init+0x300>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43db      	mvns	r3, r3
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4013      	ands	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004876:	4a11      	ldr	r2, [pc, #68]	@ (80048bc <HAL_GPIO_Init+0x300>)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f ae9d 	bne.w	80045cc <HAL_GPIO_Init+0x10>
  }
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010000 	.word	0x40010000
 80048a8:	48000400 	.word	0x48000400
 80048ac:	48000800 	.word	0x48000800
 80048b0:	48000c00 	.word	0x48000c00
 80048b4:	48001000 	.word	0x48001000
 80048b8:	48001400 	.word	0x48001400
 80048bc:	40010400 	.word	0x40010400

080048c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
 80048cc:	4613      	mov	r3, r2
 80048ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048d0:	787b      	ldrb	r3, [r7, #1]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048dc:	e002      	b.n	80048e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	43d9      	mvns	r1, r3
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	400b      	ands	r3, r1
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800492e:	4b08      	ldr	r3, [pc, #32]	@ (8004950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800493a:	4a05      	ldr	r2, [pc, #20]	@ (8004950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f806 	bl	8004954 <HAL_GPIO_EXTI_Callback>
  }
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40010400 	.word	0x40010400

08004954 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e08d      	b.n	8004a98 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fd ff7d 	bl	8002890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2224      	movs	r2, #36	@ 0x24
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	e006      	b.n	80049f2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80049f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d108      	bne.n	8004a0c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	e007      	b.n	8004a1c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69d9      	ldr	r1, [r3, #28]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	817b      	strh	r3, [r7, #10]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	813b      	strh	r3, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	f040 80f9 	bne.w	8004cba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0x34>
 8004ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0ed      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_I2C_Mem_Write+0x4e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0e6      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004af6:	f7ff f937 	bl	8003d68 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	2319      	movs	r3, #25
 8004b02:	2201      	movs	r2, #1
 8004b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fac3 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0d1      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	@ 0x21
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	@ 0x40
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b40:	88f8      	ldrh	r0, [r7, #6]
 8004b42:	893a      	ldrh	r2, [r7, #8]
 8004b44:	8979      	ldrh	r1, [r7, #10]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4603      	mov	r3, r0
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f9d3 	bl	8004efc <I2C_RequestMemoryWrite>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0a9      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2bff      	cmp	r3, #255	@ 0xff
 8004b70:	d90e      	bls.n	8004b90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	22ff      	movs	r2, #255	@ 0xff
 8004b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	8979      	ldrh	r1, [r7, #10]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fc47 	bl	800541c <I2C_TransferConfig>
 8004b8e:	e00f      	b.n	8004bb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	8979      	ldrh	r1, [r7, #10]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fc36 	bl	800541c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fac6 	bl	8005146 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e07b      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d034      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x1c8>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d130      	bne.n	8004c68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fa3f 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e04d      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2bff      	cmp	r3, #255	@ 0xff
 8004c28:	d90e      	bls.n	8004c48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	@ 0xff
 8004c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	8979      	ldrh	r1, [r7, #10]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fbeb 	bl	800541c <I2C_TransferConfig>
 8004c46:	e00f      	b.n	8004c68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	8979      	ldrh	r1, [r7, #10]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fbda 	bl	800541c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d19e      	bne.n	8004bb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 faac 	bl	80051d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01a      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_I2C_Mem_Write+0x224>)
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	fe00e800 	.word	0xfe00e800

08004cc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	813b      	strh	r3, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	f040 80fd 	bne.w	8004eea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x34>
 8004cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0f1      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_Mem_Read+0x4e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ea      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d1e:	f7ff f823 	bl	8003d68 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2319      	movs	r3, #25
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f9af 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0d5      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2222      	movs	r2, #34	@ 0x22
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2240      	movs	r2, #64	@ 0x40
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d68:	88f8      	ldrh	r0, [r7, #6]
 8004d6a:	893a      	ldrh	r2, [r7, #8]
 8004d6c:	8979      	ldrh	r1, [r7, #10]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4603      	mov	r3, r0
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f913 	bl	8004fa4 <I2C_RequestMemoryRead>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0ad      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2bff      	cmp	r3, #255	@ 0xff
 8004d98:	d90e      	bls.n	8004db8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	@ 0xff
 8004d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	8979      	ldrh	r1, [r7, #10]
 8004da8:	4b52      	ldr	r3, [pc, #328]	@ (8004ef4 <HAL_I2C_Mem_Read+0x22c>)
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb33 	bl	800541c <I2C_TransferConfig>
 8004db6:	e00f      	b.n	8004dd8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	8979      	ldrh	r1, [r7, #10]
 8004dca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef4 <HAL_I2C_Mem_Read+0x22c>)
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fb22 	bl	800541c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	2200      	movs	r2, #0
 8004de0:	2104      	movs	r1, #4
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f956 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07c      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d034      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x1d0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d130      	bne.n	8004e98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2180      	movs	r1, #128	@ 0x80
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f927 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04d      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2bff      	cmp	r3, #255	@ 0xff
 8004e58:	d90e      	bls.n	8004e78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	@ 0xff
 8004e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	8979      	ldrh	r1, [r7, #10]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fad3 	bl	800541c <I2C_TransferConfig>
 8004e76:	e00f      	b.n	8004e98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fac2 	bl	800541c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d19a      	bne.n	8004dd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f994 	bl	80051d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e01a      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <HAL_I2C_Mem_Read+0x230>)
 8004eca:	400b      	ands	r3, r1
 8004ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	80002400 	.word	0x80002400
 8004ef8:	fe00e800 	.word	0xfe00e800

08004efc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	817b      	strh	r3, [r7, #10]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	813b      	strh	r3, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	8979      	ldrh	r1, [r7, #10]
 8004f1c:	4b20      	ldr	r3, [pc, #128]	@ (8004fa0 <I2C_RequestMemoryWrite+0xa4>)
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fa79 	bl	800541c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f909 	bl	8005146 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e02c      	b.n	8004f98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f4e:	e015      	b.n	8004f7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	69b9      	ldr	r1, [r7, #24]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8ef 	bl	8005146 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e012      	b.n	8004f98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f72:	893b      	ldrh	r3, [r7, #8]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2200      	movs	r2, #0
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f884 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	80002000 	.word	0x80002000

08004fa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	8979      	ldrh	r1, [r7, #10]
 8004fc4:	4b20      	ldr	r3, [pc, #128]	@ (8005048 <I2C_RequestMemoryRead+0xa4>)
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fa26 	bl	800541c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f8b6 	bl	8005146 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e02c      	b.n	800503e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fea:	893b      	ldrh	r3, [r7, #8]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff4:	e015      	b.n	8005022 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f89c 	bl	8005146 <I2C_WaitOnTXISFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e012      	b.n	800503e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005018:	893b      	ldrh	r3, [r7, #8]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	@ 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f831 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	80002000 	.word	0x80002000

0800504c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d103      	bne.n	800506a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d007      	beq.n	8005088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	619a      	str	r2, [r3, #24]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	e03b      	b.n	800511e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f8d6 	bl	800525c <I2C_IsErrorOccurred>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e041      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050c0:	d02d      	beq.n	800511e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fe fe51 	bl	8003d68 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d122      	bne.n	800511e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d113      	bne.n	800511e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e00f      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	429a      	cmp	r2, r3
 800513a:	d0b4      	beq.n	80050a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005152:	e033      	b.n	80051bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f87f 	bl	800525c <I2C_IsErrorOccurred>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e031      	b.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800516e:	d025      	beq.n	80051bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005170:	f7fe fdfa 	bl	8003d68 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d11a      	bne.n	80051bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d013      	beq.n	80051bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e007      	b.n	80051cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d1c4      	bne.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e0:	e02f      	b.n	8005242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f838 	bl	800525c <I2C_IsErrorOccurred>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e02d      	b.n	8005252 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f6:	f7fe fdb7 	bl	8003d68 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d302      	bcc.n	800520c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d11a      	bne.n	8005242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	d013      	beq.n	8005242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e007      	b.n	8005252 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b20      	cmp	r3, #32
 800524e:	d1c8      	bne.n	80051e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d068      	beq.n	800535a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2210      	movs	r2, #16
 800528e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005290:	e049      	b.n	8005326 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005298:	d045      	beq.n	8005326 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fe fd65 	bl	8003d68 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_IsErrorOccurred+0x54>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d13a      	bne.n	8005326 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d2:	d121      	bne.n	8005318 <I2C_IsErrorOccurred+0xbc>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052da:	d01d      	beq.n	8005318 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d01a      	beq.n	8005318 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052f2:	f7fe fd39 	bl	8003d68 <HAL_GetTick>
 80052f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052f8:	e00e      	b.n	8005318 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052fa:	f7fe fd35 	bl	8003d68 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b19      	cmp	r3, #25
 8005306:	d907      	bls.n	8005318 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	f043 0320 	orr.w	r3, r3, #32
 800530e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005316:	e006      	b.n	8005326 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d1e9      	bne.n	80052fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b20      	cmp	r3, #32
 8005332:	d003      	beq.n	800533c <I2C_IsErrorOccurred+0xe0>
 8005334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0aa      	beq.n	8005292 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800533c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2220      	movs	r2, #32
 800534a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800537c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800539e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f043 0302 	orr.w	r3, r3, #2
 80053b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80053c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01c      	beq.n	800540a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fe3b 	bl	800504c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <I2C_IsErrorOccurred+0x1bc>)
 80053e2:	400b      	ands	r3, r1
 80053e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800540a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	@ 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	fe00e800 	.word	0xfe00e800

0800541c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	817b      	strh	r3, [r7, #10]
 800542a:	4613      	mov	r3, r2
 800542c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005434:	7a7b      	ldrb	r3, [r7, #9]
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800543c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	4313      	orrs	r3, r2
 8005446:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800544a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	0d5b      	lsrs	r3, r3, #21
 8005456:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800545a:	4b08      	ldr	r3, [pc, #32]	@ (800547c <I2C_TransferConfig+0x60>)
 800545c:	430b      	orrs	r3, r1
 800545e:	43db      	mvns	r3, r3
 8005460:	ea02 0103 	and.w	r1, r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	03ff63ff 	.word	0x03ff63ff

08005480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b20      	cmp	r3, #32
 8005494:	d138      	bne.n	8005508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e032      	b.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2224      	movs	r2, #36	@ 0x24
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6819      	ldr	r1, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b20      	cmp	r3, #32
 800552a:	d139      	bne.n	80055a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005536:	2302      	movs	r3, #2
 8005538:	e033      	b.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2224      	movs	r2, #36	@ 0x24
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d141      	bne.n	8005642 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055be:	4b4b      	ldr	r3, [pc, #300]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ca:	d131      	bne.n	8005630 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055cc:	4b47      	ldr	r3, [pc, #284]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d2:	4a46      	ldr	r2, [pc, #280]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055dc:	4b43      	ldr	r3, [pc, #268]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055e4:	4a41      	ldr	r2, [pc, #260]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055ec:	4b40      	ldr	r3, [pc, #256]	@ (80056f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2232      	movs	r2, #50	@ 0x32
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	4a3f      	ldr	r2, [pc, #252]	@ (80056f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	0c9b      	lsrs	r3, r3, #18
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005602:	e002      	b.n	800560a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800560a:	4b38      	ldr	r3, [pc, #224]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005616:	d102      	bne.n	800561e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f2      	bne.n	8005604 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800561e:	4b33      	ldr	r3, [pc, #204]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800562a:	d158      	bne.n	80056de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e057      	b.n	80056e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005630:	4b2e      	ldr	r3, [pc, #184]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005636:	4a2d      	ldr	r2, [pc, #180]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800563c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005640:	e04d      	b.n	80056de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005648:	d141      	bne.n	80056ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800564a:	4b28      	ldr	r3, [pc, #160]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005656:	d131      	bne.n	80056bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005658:	4b24      	ldr	r3, [pc, #144]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565e:	4a23      	ldr	r2, [pc, #140]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005668:	4b20      	ldr	r3, [pc, #128]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005670:	4a1e      	ldr	r2, [pc, #120]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005676:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005678:	4b1d      	ldr	r3, [pc, #116]	@ (80056f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2232      	movs	r2, #50	@ 0x32
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	4a1c      	ldr	r2, [pc, #112]	@ (80056f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	0c9b      	lsrs	r3, r3, #18
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800568e:	e002      	b.n	8005696 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3b01      	subs	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005696:	4b15      	ldr	r3, [pc, #84]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a2:	d102      	bne.n	80056aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f2      	bne.n	8005690 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056aa:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b6:	d112      	bne.n	80056de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e011      	b.n	80056e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056bc:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c2:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056cc:	e007      	b.n	80056de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056ce:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056d6:	4a05      	ldr	r2, [pc, #20]	@ (80056ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40007000 	.word	0x40007000
 80056f0:	2000001c 	.word	0x2000001c
 80056f4:	431bde83 	.word	0x431bde83

080056f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4a04      	ldr	r2, [pc, #16]	@ (8005714 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005706:	6093      	str	r3, [r2, #8]
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40007000 	.word	0x40007000

08005718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e2fe      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d075      	beq.n	8005822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005736:	4b97      	ldr	r3, [pc, #604]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005740:	4b94      	ldr	r3, [pc, #592]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b0c      	cmp	r3, #12
 800574e:	d102      	bne.n	8005756 <HAL_RCC_OscConfig+0x3e>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d002      	beq.n	800575c <HAL_RCC_OscConfig+0x44>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10b      	bne.n	8005774 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575c:	4b8d      	ldr	r3, [pc, #564]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d05b      	beq.n	8005820 <HAL_RCC_OscConfig+0x108>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d157      	bne.n	8005820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e2d9      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577c:	d106      	bne.n	800578c <HAL_RCC_OscConfig+0x74>
 800577e:	4b85      	ldr	r3, [pc, #532]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a84      	ldr	r2, [pc, #528]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e01d      	b.n	80057c8 <HAL_RCC_OscConfig+0xb0>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005794:	d10c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x98>
 8005796:	4b7f      	ldr	r3, [pc, #508]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a7e      	ldr	r2, [pc, #504]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800579c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4b7c      	ldr	r3, [pc, #496]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a7b      	ldr	r2, [pc, #492]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e00b      	b.n	80057c8 <HAL_RCC_OscConfig+0xb0>
 80057b0:	4b78      	ldr	r3, [pc, #480]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a77      	ldr	r2, [pc, #476]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	4b75      	ldr	r3, [pc, #468]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a74      	ldr	r2, [pc, #464]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d013      	beq.n	80057f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fe faca 	bl	8003d68 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d8:	f7fe fac6 	bl	8003d68 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b64      	cmp	r3, #100	@ 0x64
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e29e      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0xc0>
 80057f6:	e014      	b.n	8005822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fe fab6 	bl	8003d68 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005800:	f7fe fab2 	bl	8003d68 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	@ 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e28a      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005812:	4b60      	ldr	r3, [pc, #384]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0xe8>
 800581e:	e000      	b.n	8005822 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d075      	beq.n	800591a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800582e:	4b59      	ldr	r3, [pc, #356]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005838:	4b56      	ldr	r3, [pc, #344]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	d102      	bne.n	800584e <HAL_RCC_OscConfig+0x136>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d002      	beq.n	8005854 <HAL_RCC_OscConfig+0x13c>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d11f      	bne.n	8005894 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005854:	4b4f      	ldr	r3, [pc, #316]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_RCC_OscConfig+0x154>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e25d      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4b49      	ldr	r3, [pc, #292]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	4946      	ldr	r1, [pc, #280]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005880:	4b45      	ldr	r3, [pc, #276]	@ (8005998 <HAL_RCC_OscConfig+0x280>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f7fd fdd3 	bl	8003430 <HAL_InitTick>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d043      	beq.n	8005918 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e249      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d023      	beq.n	80058e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800589c:	4b3d      	ldr	r3, [pc, #244]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a8:	f7fe fa5e 	bl	8003d68 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b0:	f7fe fa5a 	bl	8003d68 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e232      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c2:	4b34      	ldr	r3, [pc, #208]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ce:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	492d      	ldr	r1, [pc, #180]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
 80058e2:	e01a      	b.n	800591a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 80058ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fe fa3a 	bl	8003d68 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f8:	f7fe fa36 	bl	8003d68 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e20e      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800590a:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x1e0>
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005918:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d041      	beq.n	80059aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01c      	beq.n	8005968 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800592e:	4b19      	ldr	r3, [pc, #100]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005934:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593e:	f7fe fa13 	bl	8003d68 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005946:	f7fe fa0f 	bl	8003d68 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e1e7      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005958:	4b0e      	ldr	r3, [pc, #56]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800595a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ef      	beq.n	8005946 <HAL_RCC_OscConfig+0x22e>
 8005966:	e020      	b.n	80059aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005968:	4b0a      	ldr	r3, [pc, #40]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800596a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800596e:	4a09      	ldr	r2, [pc, #36]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fe f9f6 	bl	8003d68 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800597e:	e00d      	b.n	800599c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fe f9f2 	bl	8003d68 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d906      	bls.n	800599c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e1ca      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800599c:	4b8c      	ldr	r3, [pc, #560]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 800599e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1ea      	bne.n	8005980 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80a6 	beq.w	8005b04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059bc:	4b84      	ldr	r3, [pc, #528]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_OscConfig+0x2b4>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_RCC_OscConfig+0x2b6>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00d      	beq.n	80059ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	4a7e      	ldr	r2, [pc, #504]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059de:	4b7c      	ldr	r3, [pc, #496]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059ea:	2301      	movs	r3, #1
 80059ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ee:	4b79      	ldr	r3, [pc, #484]	@ (8005bd4 <HAL_RCC_OscConfig+0x4bc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d118      	bne.n	8005a2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059fa:	4b76      	ldr	r3, [pc, #472]	@ (8005bd4 <HAL_RCC_OscConfig+0x4bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a75      	ldr	r2, [pc, #468]	@ (8005bd4 <HAL_RCC_OscConfig+0x4bc>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a06:	f7fe f9af 	bl	8003d68 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0e:	f7fe f9ab 	bl	8003d68 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e183      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a20:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd4 <HAL_RCC_OscConfig+0x4bc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f0      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d108      	bne.n	8005a46 <HAL_RCC_OscConfig+0x32e>
 8005a34:	4b66      	ldr	r3, [pc, #408]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	4a65      	ldr	r2, [pc, #404]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a44:	e024      	b.n	8005a90 <HAL_RCC_OscConfig+0x378>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d110      	bne.n	8005a70 <HAL_RCC_OscConfig+0x358>
 8005a4e:	4b60      	ldr	r3, [pc, #384]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a54:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a56:	f043 0304 	orr.w	r3, r3, #4
 8005a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a64:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a6e:	e00f      	b.n	8005a90 <HAL_RCC_OscConfig+0x378>
 8005a70:	4b57      	ldr	r3, [pc, #348]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	4a56      	ldr	r2, [pc, #344]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a80:	4b53      	ldr	r3, [pc, #332]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	4a52      	ldr	r2, [pc, #328]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d016      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fe f966 	bl	8003d68 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa0:	f7fe f962 	bl	8003d68 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e138      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab6:	4b46      	ldr	r3, [pc, #280]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ed      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x388>
 8005ac4:	e015      	b.n	8005af2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fe f94f 	bl	8003d68 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fe f94b 	bl	8003d68 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e121      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1ed      	bne.n	8005ace <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005af2:	7ffb      	ldrb	r3, [r7, #31]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af8:	4b35      	ldr	r3, [pc, #212]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afc:	4a34      	ldr	r2, [pc, #208]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d03c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01c      	beq.n	8005b52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b18:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fe f91e 	bl	8003d68 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b30:	f7fe f91a 	bl	8003d68 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e0f2      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b42:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ef      	beq.n	8005b30 <HAL_RCC_OscConfig+0x418>
 8005b50:	e01b      	b.n	8005b8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b52:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b58:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fe f901 	bl	8003d68 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b6a:	f7fe f8fd 	bl	8003d68 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e0d5      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b7c:	4b14      	ldr	r3, [pc, #80]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ef      	bne.n	8005b6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80c9 	beq.w	8005d26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b94:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	f000 8083 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d15e      	bne.n	8005c68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a08      	ldr	r2, [pc, #32]	@ (8005bd0 <HAL_RCC_OscConfig+0x4b8>)
 8005bb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fe f8d7 	bl	8003d68 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bbc:	e00c      	b.n	8005bd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbe:	f7fe f8d3 	bl	8003d68 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d905      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0ab      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd8:	4b55      	ldr	r3, [pc, #340]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ec      	bne.n	8005bbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be4:	4b52      	ldr	r3, [pc, #328]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	4b52      	ldr	r3, [pc, #328]	@ (8005d34 <HAL_RCC_OscConfig+0x61c>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6a11      	ldr	r1, [r2, #32]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bf4:	3a01      	subs	r2, #1
 8005bf6:	0112      	lsls	r2, r2, #4
 8005bf8:	4311      	orrs	r1, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005bfe:	0212      	lsls	r2, r2, #8
 8005c00:	4311      	orrs	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c06:	0852      	lsrs	r2, r2, #1
 8005c08:	3a01      	subs	r2, #1
 8005c0a:	0552      	lsls	r2, r2, #21
 8005c0c:	4311      	orrs	r1, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c12:	0852      	lsrs	r2, r2, #1
 8005c14:	3a01      	subs	r2, #1
 8005c16:	0652      	lsls	r2, r2, #25
 8005c18:	4311      	orrs	r1, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c1e:	06d2      	lsls	r2, r2, #27
 8005c20:	430a      	orrs	r2, r1
 8005c22:	4943      	ldr	r1, [pc, #268]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c28:	4b41      	ldr	r3, [pc, #260]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a40      	ldr	r2, [pc, #256]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c34:	4b3e      	ldr	r3, [pc, #248]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a3d      	ldr	r2, [pc, #244]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fe f892 	bl	8003d68 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c48:	f7fe f88e 	bl	8003d68 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e066      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c5a:	4b35      	ldr	r3, [pc, #212]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x530>
 8005c66:	e05e      	b.n	8005d26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c68:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fe f878 	bl	8003d68 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fe f874 	bl	8003d68 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e04c      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c8e:	4b28      	ldr	r3, [pc, #160]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c9a:	4b25      	ldr	r3, [pc, #148]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	4924      	ldr	r1, [pc, #144]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005ca0:	4b25      	ldr	r3, [pc, #148]	@ (8005d38 <HAL_RCC_OscConfig+0x620>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	60cb      	str	r3, [r1, #12]
 8005ca6:	e03e      	b.n	8005d26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e039      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d30 <HAL_RCC_OscConfig+0x618>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f003 0203 	and.w	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d12c      	bne.n	8005d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d123      	bne.n	8005d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d11b      	bne.n	8005d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d113      	bne.n	8005d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	3b01      	subs	r3, #1
 8005d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d001      	beq.n	8005d26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	019f800c 	.word	0x019f800c
 8005d38:	feeefffc 	.word	0xfeeefffc

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e11e      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d54:	4b91      	ldr	r3, [pc, #580]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d910      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b8e      	ldr	r3, [pc, #568]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 020f 	bic.w	r2, r3, #15
 8005d6a:	498c      	ldr	r1, [pc, #560]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b8a      	ldr	r3, [pc, #552]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e106      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d073      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d129      	bne.n	8005dec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d98:	4b81      	ldr	r3, [pc, #516]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0f4      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005da8:	f000 f9d0 	bl	800614c <RCC_GetSysClockFreqFromPLLSource>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4a7c      	ldr	r2, [pc, #496]	@ (8005fa4 <HAL_RCC_ClockConfig+0x268>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d93f      	bls.n	8005e36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005db6:	4b7a      	ldr	r3, [pc, #488]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d033      	beq.n	8005e36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d12f      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dd6:	4b72      	ldr	r3, [pc, #456]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dde:	4a70      	ldr	r2, [pc, #448]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005de6:	2380      	movs	r3, #128	@ 0x80
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	e024      	b.n	8005e36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df4:	4b6a      	ldr	r3, [pc, #424]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0c6      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e04:	4b66      	ldr	r3, [pc, #408]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0be      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e14:	f000 f8ce 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8005e18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4a61      	ldr	r2, [pc, #388]	@ (8005fa4 <HAL_RCC_ClockConfig+0x268>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d909      	bls.n	8005e36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e22:	4b5f      	ldr	r3, [pc, #380]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e2a:	4a5d      	ldr	r2, [pc, #372]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e36:	4b5a      	ldr	r3, [pc, #360]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f023 0203 	bic.w	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4957      	ldr	r1, [pc, #348]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e48:	f7fd ff8e 	bl	8003d68 <HAL_GetTick>
 8005e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4e:	e00a      	b.n	8005e66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e50:	f7fd ff8a 	bl	8003d68 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e095      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e66:	4b4e      	ldr	r3, [pc, #312]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 020c 	and.w	r2, r3, #12
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d1eb      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d023      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e90:	4b43      	ldr	r3, [pc, #268]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	4a42      	ldr	r2, [pc, #264]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005e96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005eb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb8:	4b39      	ldr	r3, [pc, #228]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	4936      	ldr	r1, [pc, #216]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
 8005eca:	e008      	b.n	8005ede <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b80      	cmp	r3, #128	@ 0x80
 8005ed0:	d105      	bne.n	8005ede <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ed2:	4b33      	ldr	r3, [pc, #204]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	4a32      	ldr	r2, [pc, #200]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005ed8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005edc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ede:	4b2f      	ldr	r3, [pc, #188]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d21d      	bcs.n	8005f28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eec:	4b2b      	ldr	r3, [pc, #172]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f023 020f 	bic.w	r2, r3, #15
 8005ef4:	4929      	ldr	r1, [pc, #164]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005efc:	f7fd ff34 	bl	8003d68 <HAL_GetTick>
 8005f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f02:	e00a      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f04:	f7fd ff30 	bl	8003d68 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e03b      	b.n	8005f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1a:	4b20      	ldr	r3, [pc, #128]	@ (8005f9c <HAL_RCC_ClockConfig+0x260>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1ed      	bne.n	8005f04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f34:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4917      	ldr	r1, [pc, #92]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f52:	4b13      	ldr	r3, [pc, #76]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	490f      	ldr	r1, [pc, #60]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f66:	f000 f825 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <HAL_RCC_ClockConfig+0x264>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	490c      	ldr	r1, [pc, #48]	@ (8005fa8 <HAL_RCC_ClockConfig+0x26c>)
 8005f78:	5ccb      	ldrb	r3, [r1, r3]
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	4a0a      	ldr	r2, [pc, #40]	@ (8005fac <HAL_RCC_ClockConfig+0x270>)
 8005f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f86:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <HAL_RCC_ClockConfig+0x274>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fd fa50 	bl	8003430 <HAL_InitTick>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40022000 	.word	0x40022000
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	04c4b400 	.word	0x04c4b400
 8005fa8:	080202ec 	.word	0x080202ec
 8005fac:	2000001c 	.word	0x2000001c
 8005fb0:	20000020 	.word	0x20000020

08005fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005fba:	4b2c      	ldr	r3, [pc, #176]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d102      	bne.n	8005fcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8006070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e047      	b.n	800605c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 030c 	and.w	r3, r3, #12
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d102      	bne.n	8005fde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fd8:	4b26      	ldr	r3, [pc, #152]	@ (8006074 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	e03e      	b.n	800605c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005fde:	4b23      	ldr	r3, [pc, #140]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b0c      	cmp	r3, #12
 8005fe8:	d136      	bne.n	8006058 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fea:	4b20      	ldr	r3, [pc, #128]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	3301      	adds	r3, #1
 8006000:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d10c      	bne.n	8006022 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006008:	4a1a      	ldr	r2, [pc, #104]	@ (8006074 <HAL_RCC_GetSysClockFreq+0xc0>)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	4a16      	ldr	r2, [pc, #88]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006012:	68d2      	ldr	r2, [r2, #12]
 8006014:	0a12      	lsrs	r2, r2, #8
 8006016:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	617b      	str	r3, [r7, #20]
      break;
 8006020:	e00c      	b.n	800603c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006022:	4a13      	ldr	r2, [pc, #76]	@ (8006070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	4a10      	ldr	r2, [pc, #64]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 800602c:	68d2      	ldr	r2, [r2, #12]
 800602e:	0a12      	lsrs	r2, r2, #8
 8006030:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006034:	fb02 f303 	mul.w	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]
      break;
 800603a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800603c:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <HAL_RCC_GetSysClockFreq+0xb8>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	0e5b      	lsrs	r3, r3, #25
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	3301      	adds	r3, #1
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e001      	b.n	800605c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800605c:	693b      	ldr	r3, [r7, #16]
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40021000 	.word	0x40021000
 8006070:	00f42400 	.word	0x00f42400
 8006074:	016e3600 	.word	0x016e3600

08006078 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800607c:	4b03      	ldr	r3, [pc, #12]	@ (800608c <HAL_RCC_GetHCLKFreq+0x14>)
 800607e:	681b      	ldr	r3, [r3, #0]
}
 8006080:	4618      	mov	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	2000001c 	.word	0x2000001c

08006090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006094:	f7ff fff0 	bl	8006078 <HAL_RCC_GetHCLKFreq>
 8006098:	4602      	mov	r2, r0
 800609a:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	4904      	ldr	r1, [pc, #16]	@ (80060b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40021000 	.word	0x40021000
 80060b8:	080202fc 	.word	0x080202fc

080060bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060c0:	f7ff ffda 	bl	8006078 <HAL_RCC_GetHCLKFreq>
 80060c4:	4602      	mov	r2, r0
 80060c6:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	0adb      	lsrs	r3, r3, #11
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	4904      	ldr	r1, [pc, #16]	@ (80060e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060d2:	5ccb      	ldrb	r3, [r1, r3]
 80060d4:	f003 031f 	and.w	r3, r3, #31
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40021000 	.word	0x40021000
 80060e4:	080202fc 	.word	0x080202fc

080060e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	220f      	movs	r2, #15
 80060f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80060f8:	4b12      	ldr	r3, [pc, #72]	@ (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0203 	and.w	r2, r3, #3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006110:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800612a:	4b07      	ldr	r3, [pc, #28]	@ (8006148 <HAL_RCC_GetClockConfig+0x60>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40021000 	.word	0x40021000
 8006148:	40022000 	.word	0x40022000

0800614c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006152:	4b1e      	ldr	r3, [pc, #120]	@ (80061cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800615c:	4b1b      	ldr	r3, [pc, #108]	@ (80061cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b03      	cmp	r3, #3
 800616e:	d10c      	bne.n	800618a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006170:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	4a14      	ldr	r2, [pc, #80]	@ (80061cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800617a:	68d2      	ldr	r2, [r2, #12]
 800617c:	0a12      	lsrs	r2, r2, #8
 800617e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006182:	fb02 f303 	mul.w	r3, r2, r3
 8006186:	617b      	str	r3, [r7, #20]
    break;
 8006188:	e00c      	b.n	80061a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800618a:	4a12      	ldr	r2, [pc, #72]	@ (80061d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	4a0e      	ldr	r2, [pc, #56]	@ (80061cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	0a12      	lsrs	r2, r2, #8
 8006198:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]
    break;
 80061a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061a4:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	0e5b      	lsrs	r3, r3, #25
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	3301      	adds	r3, #1
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061be:	687b      	ldr	r3, [r7, #4]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40021000 	.word	0x40021000
 80061d0:	016e3600 	.word	0x016e3600
 80061d4:	00f42400 	.word	0x00f42400

080061d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061e0:	2300      	movs	r3, #0
 80061e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061e4:	2300      	movs	r3, #0
 80061e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8098 	beq.w	8006326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fa:	4b43      	ldr	r3, [pc, #268]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10d      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	4b40      	ldr	r3, [pc, #256]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	4a3f      	ldr	r2, [pc, #252]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006210:	6593      	str	r3, [r2, #88]	@ 0x58
 8006212:	4b3d      	ldr	r3, [pc, #244]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800621a:	60bb      	str	r3, [r7, #8]
 800621c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800621e:	2301      	movs	r3, #1
 8006220:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006222:	4b3a      	ldr	r3, [pc, #232]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a39      	ldr	r2, [pc, #228]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800622c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800622e:	f7fd fd9b 	bl	8003d68 <HAL_GetTick>
 8006232:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006234:	e009      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006236:	f7fd fd97 	bl	8003d68 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d902      	bls.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	74fb      	strb	r3, [r7, #19]
        break;
 8006248:	e005      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624a:	4b30      	ldr	r3, [pc, #192]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0ef      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006256:	7cfb      	ldrb	r3, [r7, #19]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d159      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800625c:	4b2a      	ldr	r3, [pc, #168]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01e      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	429a      	cmp	r2, r3
 8006276:	d019      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006278:	4b23      	ldr	r3, [pc, #140]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006284:	4b20      	ldr	r3, [pc, #128]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628a:	4a1f      	ldr	r2, [pc, #124]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006294:	4b1c      	ldr	r3, [pc, #112]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	4a1b      	ldr	r2, [pc, #108]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062a4:	4a18      	ldr	r2, [pc, #96]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b6:	f7fd fd57 	bl	8003d68 <HAL_GetTick>
 80062ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062bc:	e00b      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062be:	f7fd fd53 	bl	8003d68 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d902      	bls.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	74fb      	strb	r3, [r7, #19]
            break;
 80062d4:	e006      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0ec      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f8:	4903      	ldr	r1, [pc, #12]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006300:	e008      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	74bb      	strb	r3, [r7, #18]
 8006306:	e005      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006308:	40021000 	.word	0x40021000
 800630c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006314:	7c7b      	ldrb	r3, [r7, #17]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d105      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800631a:	4ba7      	ldr	r3, [pc, #668]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631e:	4aa6      	ldr	r2, [pc, #664]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006324:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006332:	4ba1      	ldr	r3, [pc, #644]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006338:	f023 0203 	bic.w	r2, r3, #3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	499d      	ldr	r1, [pc, #628]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006354:	4b98      	ldr	r3, [pc, #608]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635a:	f023 020c 	bic.w	r2, r3, #12
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	4995      	ldr	r1, [pc, #596]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006376:	4b90      	ldr	r3, [pc, #576]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	498c      	ldr	r1, [pc, #560]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006398:	4b87      	ldr	r3, [pc, #540]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	4984      	ldr	r1, [pc, #528]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063ba:	4b7f      	ldr	r3, [pc, #508]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	497b      	ldr	r1, [pc, #492]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063dc:	4b76      	ldr	r3, [pc, #472]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	4973      	ldr	r1, [pc, #460]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063fe:	4b6e      	ldr	r3, [pc, #440]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006404:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	496a      	ldr	r1, [pc, #424]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006420:	4b65      	ldr	r3, [pc, #404]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006426:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	4962      	ldr	r1, [pc, #392]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006442:	4b5d      	ldr	r3, [pc, #372]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006448:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	4959      	ldr	r1, [pc, #356]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006464:	4b54      	ldr	r3, [pc, #336]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006466:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800646a:	f023 0203 	bic.w	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006472:	4951      	ldr	r1, [pc, #324]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006486:	4b4c      	ldr	r3, [pc, #304]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	4948      	ldr	r1, [pc, #288]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064a8:	4b43      	ldr	r3, [pc, #268]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b6:	4940      	ldr	r1, [pc, #256]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c6:	d105      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c8:	4b3b      	ldr	r3, [pc, #236]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	4a3a      	ldr	r2, [pc, #232]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d015      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064e0:	4b35      	ldr	r3, [pc, #212]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ee:	4932      	ldr	r1, [pc, #200]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064fe:	d105      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006500:	4b2d      	ldr	r3, [pc, #180]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	4a2c      	ldr	r2, [pc, #176]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d015      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006518:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006526:	4924      	ldr	r1, [pc, #144]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006536:	d105      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006538:	4b1f      	ldr	r3, [pc, #124]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4a1e      	ldr	r2, [pc, #120]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006542:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d015      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006550:	4b19      	ldr	r3, [pc, #100]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006556:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	4916      	ldr	r1, [pc, #88]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800656e:	d105      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006570:	4b11      	ldr	r3, [pc, #68]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4a10      	ldr	r2, [pc, #64]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006588:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	4908      	ldr	r1, [pc, #32]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065a6:	d109      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a8:	4b03      	ldr	r3, [pc, #12]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4a02      	ldr	r2, [pc, #8]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b2:	60d3      	str	r3, [r2, #12]
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d015      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065c8:	4b29      	ldr	r3, [pc, #164]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d6:	4926      	ldr	r1, [pc, #152]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065e6:	d105      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065e8:	4b21      	ldr	r3, [pc, #132]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006600:	4b1b      	ldr	r3, [pc, #108]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006606:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660e:	4918      	ldr	r1, [pc, #96]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	d105      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006620:	4b13      	ldr	r3, [pc, #76]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4a12      	ldr	r2, [pc, #72]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d015      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006638:	4b0d      	ldr	r3, [pc, #52]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800663a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800663e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006646:	490a      	ldr	r1, [pc, #40]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006656:	d105      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	4a04      	ldr	r2, [pc, #16]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006662:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006664:	7cbb      	ldrb	r3, [r7, #18]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40021000 	.word	0x40021000

08006674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e049      	b.n	800671a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fd f89a 	bl	80037d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f000 fbac 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e04c      	b.n	80067d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a26      	ldr	r2, [pc, #152]	@ (80067e4 <HAL_TIM_Base_Start+0xc0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d022      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006756:	d01d      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <HAL_TIM_Base_Start+0xc4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d018      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	@ (80067ec <HAL_TIM_Base_Start+0xc8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d013      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <HAL_TIM_Base_Start+0xcc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00e      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_TIM_Base_Start+0xd0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d009      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <HAL_TIM_Base_Start+0xd4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d004      	beq.n	8006794 <HAL_TIM_Base_Start+0x70>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <HAL_TIM_Base_Start+0xd8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d115      	bne.n	80067c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <HAL_TIM_Base_Start+0xdc>)
 800679c:	4013      	ands	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b06      	cmp	r3, #6
 80067a4:	d015      	beq.n	80067d2 <HAL_TIM_Base_Start+0xae>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ac:	d011      	beq.n	80067d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067be:	e008      	b.n	80067d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e000      	b.n	80067d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40015000 	.word	0x40015000
 8006800:	00010007 	.word	0x00010007

08006804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e054      	b.n	80068c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a26      	ldr	r2, [pc, #152]	@ (80068d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006846:	d01d      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a22      	ldr	r2, [pc, #136]	@ (80068d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a21      	ldr	r2, [pc, #132]	@ (80068dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1e      	ldr	r2, [pc, #120]	@ (80068e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1b      	ldr	r2, [pc, #108]	@ (80068ec <HAL_TIM_Base_Start_IT+0xe8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d115      	bne.n	80068b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	4b19      	ldr	r3, [pc, #100]	@ (80068f0 <HAL_TIM_Base_Start_IT+0xec>)
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b06      	cmp	r3, #6
 8006894:	d015      	beq.n	80068c2 <HAL_TIM_Base_Start_IT+0xbe>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800689c:	d011      	beq.n	80068c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ae:	e008      	b.n	80068c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e000      	b.n	80068c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40013400 	.word	0x40013400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40015000 	.word	0x40015000
 80068f0:	00010007 	.word	0x00010007

080068f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d020      	beq.n	8006958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0202 	mvn.w	r2, #2
 8006928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa48 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa3a 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa4b 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d020      	beq.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01b      	beq.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0204 	mvn.w	r2, #4
 8006974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa22 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa14 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa25 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d020      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0208 	mvn.w	r2, #8
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2204      	movs	r2, #4
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f9fc 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9ee 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9ff 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0210 	mvn.w	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2208      	movs	r2, #8
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f9d6 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9c8 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9d9 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0201 	mvn.w	r2, #1
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fb ffd8 	bl	8002a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00c      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fbb1 	bl	80071f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00c      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fba9 	bl	8007204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00c      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f993 	bl	8006dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f06f 0220 	mvn.w	r2, #32
 8006af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fb71 	bl	80071dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00c      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fb7d 	bl	8007218 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fb75 	bl	800722c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb6d 	bl	8007240 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fb65 	bl	8007254 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e0f6      	b.n	8006d9e <HAL_TIM_ConfigClockSource+0x20a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006bce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a6f      	ldr	r2, [pc, #444]	@ (8006da8 <HAL_TIM_ConfigClockSource+0x214>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	f000 80c1 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006bf0:	4a6d      	ldr	r2, [pc, #436]	@ (8006da8 <HAL_TIM_ConfigClockSource+0x214>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	f200 80c6 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bf8:	4a6c      	ldr	r2, [pc, #432]	@ (8006dac <HAL_TIM_ConfigClockSource+0x218>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	f000 80b9 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c00:	4a6a      	ldr	r2, [pc, #424]	@ (8006dac <HAL_TIM_ConfigClockSource+0x218>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	f200 80be 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c08:	4a69      	ldr	r2, [pc, #420]	@ (8006db0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	f000 80b1 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c10:	4a67      	ldr	r2, [pc, #412]	@ (8006db0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	f200 80b6 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c18:	4a66      	ldr	r2, [pc, #408]	@ (8006db4 <HAL_TIM_ConfigClockSource+0x220>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	f000 80a9 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c20:	4a64      	ldr	r2, [pc, #400]	@ (8006db4 <HAL_TIM_ConfigClockSource+0x220>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	f200 80ae 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c28:	4a63      	ldr	r2, [pc, #396]	@ (8006db8 <HAL_TIM_ConfigClockSource+0x224>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	f000 80a1 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c30:	4a61      	ldr	r2, [pc, #388]	@ (8006db8 <HAL_TIM_ConfigClockSource+0x224>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	f200 80a6 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c38:	4a60      	ldr	r2, [pc, #384]	@ (8006dbc <HAL_TIM_ConfigClockSource+0x228>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f000 8099 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c40:	4a5e      	ldr	r2, [pc, #376]	@ (8006dbc <HAL_TIM_ConfigClockSource+0x228>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	f200 809e 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c4c:	f000 8091 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c54:	f200 8096 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c5c:	f000 8089 	beq.w	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c64:	f200 808e 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c6c:	d03e      	beq.n	8006cec <HAL_TIM_ConfigClockSource+0x158>
 8006c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c72:	f200 8087 	bhi.w	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7a:	f000 8086 	beq.w	8006d8a <HAL_TIM_ConfigClockSource+0x1f6>
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c82:	d87f      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c84:	2b70      	cmp	r3, #112	@ 0x70
 8006c86:	d01a      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x12a>
 8006c88:	2b70      	cmp	r3, #112	@ 0x70
 8006c8a:	d87b      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c8c:	2b60      	cmp	r3, #96	@ 0x60
 8006c8e:	d050      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x19e>
 8006c90:	2b60      	cmp	r3, #96	@ 0x60
 8006c92:	d877      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c94:	2b50      	cmp	r3, #80	@ 0x50
 8006c96:	d03c      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x17e>
 8006c98:	2b50      	cmp	r3, #80	@ 0x50
 8006c9a:	d873      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d058      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x1be>
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	d86f      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ca4:	2b30      	cmp	r3, #48	@ 0x30
 8006ca6:	d064      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006ca8:	2b30      	cmp	r3, #48	@ 0x30
 8006caa:	d86b      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d060      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d867      	bhi.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d05c      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d05a      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x1de>
 8006cbc:	e062      	b.n	8006d84 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cce:	f000 f9cf 	bl	8007070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	609a      	str	r2, [r3, #8]
      break;
 8006cea:	e04f      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cfc:	f000 f9b8 	bl	8007070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d0e:	609a      	str	r2, [r3, #8]
      break;
 8006d10:	e03c      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 f92a 	bl	8006f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2150      	movs	r1, #80	@ 0x50
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f983 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006d30:	e02c      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 f949 	bl	8006fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2160      	movs	r1, #96	@ 0x60
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f973 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006d50:	e01c      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 f90a 	bl	8006f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2140      	movs	r1, #64	@ 0x40
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f963 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006d70:	e00c      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f000 f95a 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006d82:	e003      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
      break;
 8006d88:	e000      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	00100070 	.word	0x00100070
 8006dac:	00100060 	.word	0x00100060
 8006db0:	00100050 	.word	0x00100050
 8006db4:	00100040 	.word	0x00100040
 8006db8:	00100030 	.word	0x00100030
 8006dbc:	00100020 	.word	0x00100020

08006dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a4c      	ldr	r2, [pc, #304]	@ (8006f54 <TIM_Base_SetConfig+0x144>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d017      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e2e:	d013      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a49      	ldr	r2, [pc, #292]	@ (8006f58 <TIM_Base_SetConfig+0x148>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a48      	ldr	r2, [pc, #288]	@ (8006f5c <TIM_Base_SetConfig+0x14c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a47      	ldr	r2, [pc, #284]	@ (8006f60 <TIM_Base_SetConfig+0x150>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a46      	ldr	r2, [pc, #280]	@ (8006f64 <TIM_Base_SetConfig+0x154>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a45      	ldr	r2, [pc, #276]	@ (8006f68 <TIM_Base_SetConfig+0x158>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d108      	bne.n	8006e6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a39      	ldr	r2, [pc, #228]	@ (8006f54 <TIM_Base_SetConfig+0x144>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d023      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e78:	d01f      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a36      	ldr	r2, [pc, #216]	@ (8006f58 <TIM_Base_SetConfig+0x148>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01b      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a35      	ldr	r2, [pc, #212]	@ (8006f5c <TIM_Base_SetConfig+0x14c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d017      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a34      	ldr	r2, [pc, #208]	@ (8006f60 <TIM_Base_SetConfig+0x150>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a33      	ldr	r2, [pc, #204]	@ (8006f64 <TIM_Base_SetConfig+0x154>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00f      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a33      	ldr	r2, [pc, #204]	@ (8006f6c <TIM_Base_SetConfig+0x15c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00b      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a32      	ldr	r2, [pc, #200]	@ (8006f70 <TIM_Base_SetConfig+0x160>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d007      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a31      	ldr	r2, [pc, #196]	@ (8006f74 <TIM_Base_SetConfig+0x164>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f68 <TIM_Base_SetConfig+0x158>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <TIM_Base_SetConfig+0x144>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d013      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a1a      	ldr	r2, [pc, #104]	@ (8006f64 <TIM_Base_SetConfig+0x154>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a1a      	ldr	r2, [pc, #104]	@ (8006f6c <TIM_Base_SetConfig+0x15c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a19      	ldr	r2, [pc, #100]	@ (8006f70 <TIM_Base_SetConfig+0x160>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a18      	ldr	r2, [pc, #96]	@ (8006f74 <TIM_Base_SetConfig+0x164>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a13      	ldr	r2, [pc, #76]	@ (8006f68 <TIM_Base_SetConfig+0x158>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d105      	bne.n	8006f46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]
  }
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40015000 	.word	0x40015000
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800

08006f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0201 	bic.w	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 030a 	bic.w	r3, r3, #10
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f023 0210 	bic.w	r2, r3, #16
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	031b      	lsls	r3, r3, #12
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007012:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800704c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	f043 0307 	orr.w	r3, r3, #7
 800705c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	609a      	str	r2, [r3, #8]
}
 8007064:	bf00      	nop
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800708a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	021a      	lsls	r2, r3, #8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	431a      	orrs	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4313      	orrs	r3, r2
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	609a      	str	r2, [r3, #8]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e074      	b.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a34      	ldr	r2, [pc, #208]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a33      	ldr	r2, [pc, #204]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a31      	ldr	r2, [pc, #196]	@ (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d108      	bne.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800710c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800711e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a21      	ldr	r2, [pc, #132]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d022      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007148:	d01d      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1f      	ldr	r2, [pc, #124]	@ (80071cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d018      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1d      	ldr	r2, [pc, #116]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1c      	ldr	r2, [pc, #112]	@ (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00e      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a15      	ldr	r2, [pc, #84]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a18      	ldr	r2, [pc, #96]	@ (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a11      	ldr	r2, [pc, #68]	@ (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d10c      	bne.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4313      	orrs	r3, r2
 8007196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	40013400 	.word	0x40013400
 80071c8:	40015000 	.word	0x40015000
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	40000c00 	.word	0x40000c00
 80071d8:	40014000 	.word	0x40014000

080071dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e042      	b.n	8007300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fc fba3 	bl	80039d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	@ 0x24
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f8d6 	bl	8008464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fdd7 	bl	8007e6c <UART_SetConfig>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e01b      	b.n	8007300 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f955 	bl	80085a8 <UART_CheckIdleState>
 80072fe:	4603      	mov	r3, r0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	@ 0x28
 800730c:	af02      	add	r7, sp, #8
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4613      	mov	r3, r2
 8007316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731e:	2b20      	cmp	r3, #32
 8007320:	d17b      	bne.n	800741a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_UART_Transmit+0x26>
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e074      	b.n	800741c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2221      	movs	r2, #33	@ 0x21
 800733e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007342:	f7fc fd11 	bl	8003d68 <HAL_GetTick>
 8007346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	88fa      	ldrh	r2, [r7, #6]
 800734c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	88fa      	ldrh	r2, [r7, #6]
 8007354:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007360:	d108      	bne.n	8007374 <HAL_UART_Transmit+0x6c>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e003      	b.n	800737c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800737c:	e030      	b.n	80073e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2200      	movs	r2, #0
 8007386:	2180      	movs	r1, #128	@ 0x80
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 f9b7 	bl	80086fc <UART_WaitOnFlagUntilTimeout>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e03d      	b.n	800741c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	3302      	adds	r3, #2
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	e007      	b.n	80073ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	781a      	ldrb	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1c8      	bne.n	800737e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2200      	movs	r2, #0
 80073f4:	2140      	movs	r1, #64	@ 0x40
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f001 f980 	bl	80086fc <UART_WaitOnFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e006      	b.n	800741c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	e000      	b.n	800741c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800741a:	2302      	movs	r3, #2
  }
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	@ 0x28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007438:	2b20      	cmp	r3, #32
 800743a:	d137      	bne.n	80074ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <HAL_UART_Receive_IT+0x24>
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e030      	b.n	80074ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a18      	ldr	r2, [pc, #96]	@ (80074b8 <HAL_UART_Receive_IT+0x94>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d01f      	beq.n	800749c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d018      	beq.n	800749c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	613b      	str	r3, [r7, #16]
   return(result);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	69f9      	ldr	r1, [r7, #28]
 800748e:	6a3a      	ldr	r2, [r7, #32]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	61bb      	str	r3, [r7, #24]
   return(result);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	461a      	mov	r2, r3
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f001 f998 	bl	80087d8 <UART_Start_Receive_IT>
 80074a8:	4603      	mov	r3, r0
 80074aa:	e000      	b.n	80074ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	@ 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40008000 	.word	0x40008000

080074bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	@ 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d167      	bne.n	80075a4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_UART_Transmit_DMA+0x24>
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e060      	b.n	80075a6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2221      	movs	r2, #33	@ 0x21
 8007506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d028      	beq.n	8007564 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007516:	4a26      	ldr	r2, [pc, #152]	@ (80075b0 <HAL_UART_Transmit_DMA+0xf4>)
 8007518:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800751e:	4a25      	ldr	r2, [pc, #148]	@ (80075b4 <HAL_UART_Transmit_DMA+0xf8>)
 8007520:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007526:	4a24      	ldr	r2, [pc, #144]	@ (80075b8 <HAL_UART_Transmit_DMA+0xfc>)
 8007528:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800752e:	2200      	movs	r2, #0
 8007530:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753a:	4619      	mov	r1, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3328      	adds	r3, #40	@ 0x28
 8007542:	461a      	mov	r2, r3
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	f7fc fda3 	bl	8004090 <HAL_DMA_Start_IT>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2210      	movs	r2, #16
 8007554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e020      	b.n	80075a6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2240      	movs	r2, #64	@ 0x40
 800756a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	613b      	str	r3, [r7, #16]
   return(result);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3308      	adds	r3, #8
 800758a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800758c:	623a      	str	r2, [r7, #32]
 800758e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	69f9      	ldr	r1, [r7, #28]
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	61bb      	str	r3, [r7, #24]
   return(result);
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e5      	bne.n	800756c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	e000      	b.n	80075a6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80075a4:	2302      	movs	r3, #2
  }
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3728      	adds	r7, #40	@ 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	08008cb7 	.word	0x08008cb7
 80075b4:	08008d51 	.word	0x08008d51
 80075b8:	08008ed7 	.word	0x08008ed7

080075bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	@ 0x28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d137      	bne.n	8007644 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_UART_Receive_DMA+0x24>
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e030      	b.n	8007646 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a18      	ldr	r2, [pc, #96]	@ (8007650 <HAL_UART_Receive_DMA+0x94>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01f      	beq.n	8007634 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d018      	beq.n	8007634 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	613b      	str	r3, [r7, #16]
   return(result);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	623b      	str	r3, [r7, #32]
 8007622:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	69f9      	ldr	r1, [r7, #28]
 8007626:	6a3a      	ldr	r2, [r7, #32]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	61bb      	str	r3, [r7, #24]
   return(result);
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	461a      	mov	r2, r3
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f001 f9ee 	bl	8008a1c <UART_Start_Receive_DMA>
 8007640:	4603      	mov	r3, r0
 8007642:	e000      	b.n	8007646 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007644:	2302      	movs	r3, #2
  }
}
 8007646:	4618      	mov	r0, r3
 8007648:	3728      	adds	r7, #40	@ 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40008000 	.word	0x40008000

08007654 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b090      	sub	sp, #64	@ 0x40
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800766a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007676:	2b80      	cmp	r3, #128	@ 0x80
 8007678:	d139      	bne.n	80076ee <HAL_UART_DMAStop+0x9a>
 800767a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767c:	2b21      	cmp	r3, #33	@ 0x21
 800767e:	d136      	bne.n	80076ee <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3308      	adds	r3, #8
 8007686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3308      	adds	r3, #8
 800769e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e5      	bne.n	8007680 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d015      	beq.n	80076e8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fc fd60 	bl	8004186 <HAL_DMA_Abort>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00d      	beq.n	80076e8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fc fec7 	bl	8004464 <HAL_DMA_GetError>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d105      	bne.n	80076e8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2210      	movs	r2, #16
 80076e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e047      	b.n	8007778 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fa3d 	bl	8008b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f8:	2b40      	cmp	r3, #64	@ 0x40
 80076fa:	d13c      	bne.n	8007776 <HAL_UART_DMAStop+0x122>
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	2b22      	cmp	r3, #34	@ 0x22
 8007700:	d139      	bne.n	8007776 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	60bb      	str	r3, [r7, #8]
   return(result);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3308      	adds	r3, #8
 8007720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007722:	61ba      	str	r2, [r7, #24]
 8007724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6979      	ldr	r1, [r7, #20]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	613b      	str	r3, [r7, #16]
   return(result);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e5      	bne.n	8007702 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773c:	2b00      	cmp	r3, #0
 800773e:	d017      	beq.n	8007770 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007746:	4618      	mov	r0, r3
 8007748:	f7fc fd1d 	bl	8004186 <HAL_DMA_Abort>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00e      	beq.n	8007770 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007758:	4618      	mov	r0, r3
 800775a:	f7fc fe83 	bl	8004464 <HAL_DMA_GetError>
 800775e:	4603      	mov	r3, r0
 8007760:	2b20      	cmp	r3, #32
 8007762:	d105      	bne.n	8007770 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2210      	movs	r2, #16
 8007768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e003      	b.n	8007778 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fa3a 	bl	8008bea <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3740      	adds	r7, #64	@ 0x40
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b0ba      	sub	sp, #232	@ 0xe8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077ae:	4013      	ands	r3, r2
 80077b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d11b      	bne.n	80077f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d015      	beq.n	80077f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8300 	beq.w	8007dea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      }
      return;
 80077f2:	e2fa      	b.n	8007dea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8123 	beq.w	8007a44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007802:	4b8d      	ldr	r3, [pc, #564]	@ (8007a38 <HAL_UART_IRQHandler+0x2b8>)
 8007804:	4013      	ands	r3, r2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800780a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800780e:	4b8b      	ldr	r3, [pc, #556]	@ (8007a3c <HAL_UART_IRQHandler+0x2bc>)
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8116 	beq.w	8007a44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d011      	beq.n	8007848 <HAL_UART_IRQHandler+0xc8>
 8007824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2201      	movs	r2, #1
 8007836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783e:	f043 0201 	orr.w	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d011      	beq.n	8007878 <HAL_UART_IRQHandler+0xf8>
 8007854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2202      	movs	r2, #2
 8007866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786e:	f043 0204 	orr.w	r2, r3, #4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d011      	beq.n	80078a8 <HAL_UART_IRQHandler+0x128>
 8007884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2204      	movs	r2, #4
 8007896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789e:	f043 0202 	orr.w	r2, r3, #2
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d017      	beq.n	80078e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078c4:	4b5c      	ldr	r3, [pc, #368]	@ (8007a38 <HAL_UART_IRQHandler+0x2b8>)
 80078c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2208      	movs	r2, #8
 80078d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078da:	f043 0208 	orr.w	r2, r3, #8
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d012      	beq.n	8007916 <HAL_UART_IRQHandler+0x196>
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00c      	beq.n	8007916 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007904:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790c:	f043 0220 	orr.w	r2, r3, #32
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 8266 	beq.w	8007dee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d013      	beq.n	8007956 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800792e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d105      	bne.n	8007946 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800793a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800793e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800795c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d005      	beq.n	800797a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800796e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007976:	2b00      	cmp	r3, #0
 8007978:	d054      	beq.n	8007a24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f935 	bl	8008bea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798a:	2b40      	cmp	r3, #64	@ 0x40
 800798c:	d146      	bne.n	8007a1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1d9      	bne.n	800798e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d017      	beq.n	8007a14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ea:	4a15      	ldr	r2, [pc, #84]	@ (8007a40 <HAL_UART_IRQHandler+0x2c0>)
 80079ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fc fc1f 	bl	8004238 <HAL_DMA_Abort_IT>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d019      	beq.n	8007a34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a12:	e00f      	b.n	8007a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa13 	bl	8007e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1a:	e00b      	b.n	8007a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa0f 	bl	8007e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a22:	e007      	b.n	8007a34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa0b 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007a32:	e1dc      	b.n	8007dee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	bf00      	nop
    return;
 8007a36:	e1da      	b.n	8007dee <HAL_UART_IRQHandler+0x66e>
 8007a38:	10000001 	.word	0x10000001
 8007a3c:	04000120 	.word	0x04000120
 8007a40:	08008f57 	.word	0x08008f57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	f040 8170 	bne.w	8007d2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8169 	beq.w	8007d2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8162 	beq.w	8007d2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2210      	movs	r2, #16
 8007a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b40      	cmp	r3, #64	@ 0x40
 8007a7e:	f040 80d8 	bne.w	8007c32 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80af 	beq.w	8007bf8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	f080 80a7 	bcs.w	8007bf8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ab0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f040 8087 	bne.w	8007bd6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007af6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1da      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3308      	adds	r3, #8
 8007b18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e1      	bne.n	8007b12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e3      	bne.n	8007b4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ba4:	f023 0310 	bic.w	r3, r3, #16
 8007ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e4      	bne.n	8007b94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fc fad8 	bl	8004186 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f92f 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007bf6:	e0fc      	b.n	8007df2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c02:	429a      	cmp	r2, r3
 8007c04:	f040 80f5 	bne.w	8007df2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	f040 80eb 	bne.w	8007df2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f912 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
      return;
 8007c30:	e0df      	b.n	8007df2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80d1 	beq.w	8007df6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 80cc 	beq.w	8007df6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e4      	bne.n	8007c5e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e1      	bne.n	8007c94 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 0310 	bic.w	r3, r3, #16
 8007cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	69b9      	ldr	r1, [r7, #24]
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	617b      	str	r3, [r7, #20]
   return(result);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e4      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f894 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d2c:	e063      	b.n	8007df6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <HAL_UART_IRQHandler+0x5d8>
 8007d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fe5d 	bl	8009a10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d56:	e051      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d014      	beq.n	8007d8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d03a      	beq.n	8007dfa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
    }
    return;
 8007d8c:	e035      	b.n	8007dfa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d009      	beq.n	8007dae <HAL_UART_IRQHandler+0x62e>
 8007d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 f8e7 	bl	8008f7a <UART_EndTransmit_IT>
    return;
 8007dac:	e026      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <HAL_UART_IRQHandler+0x64e>
 8007dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fe36 	bl	8009a38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dcc:	e016      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d010      	beq.n	8007dfc <HAL_UART_IRQHandler+0x67c>
 8007dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	da0c      	bge.n	8007dfc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fe1e 	bl	8009a24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007de8:	e008      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
      return;
 8007dea:	bf00      	nop
 8007dec:	e006      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
    return;
 8007dee:	bf00      	nop
 8007df0:	e004      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
      return;
 8007df2:	bf00      	nop
 8007df4:	e002      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
      return;
 8007df6:	bf00      	nop
 8007df8:	e000      	b.n	8007dfc <HAL_UART_IRQHandler+0x67c>
    return;
 8007dfa:	bf00      	nop
  }
}
 8007dfc:	37e8      	adds	r7, #232	@ 0xe8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop

08007e04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e70:	b08c      	sub	sp, #48	@ 0x30
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	431a      	orrs	r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4baa      	ldr	r3, [pc, #680]	@ (8008144 <UART_SetConfig+0x2d8>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a9f      	ldr	r2, [pc, #636]	@ (8008148 <UART_SetConfig+0x2dc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ee2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	f023 010f 	bic.w	r1, r3, #15
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a90      	ldr	r2, [pc, #576]	@ (800814c <UART_SetConfig+0x2e0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d125      	bne.n	8007f5c <UART_SetConfig+0xf0>
 8007f10:	4b8f      	ldr	r3, [pc, #572]	@ (8008150 <UART_SetConfig+0x2e4>)
 8007f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d81a      	bhi.n	8007f54 <UART_SetConfig+0xe8>
 8007f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <UART_SetConfig+0xb8>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f35 	.word	0x08007f35
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f4d 	.word	0x08007f4d
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f3a:	e116      	b.n	800816a <UART_SetConfig+0x2fe>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f42:	e112      	b.n	800816a <UART_SetConfig+0x2fe>
 8007f44:	2304      	movs	r3, #4
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f4a:	e10e      	b.n	800816a <UART_SetConfig+0x2fe>
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	e10a      	b.n	800816a <UART_SetConfig+0x2fe>
 8007f54:	2310      	movs	r3, #16
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5a:	e106      	b.n	800816a <UART_SetConfig+0x2fe>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a7c      	ldr	r2, [pc, #496]	@ (8008154 <UART_SetConfig+0x2e8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d138      	bne.n	8007fd8 <UART_SetConfig+0x16c>
 8007f66:	4b7a      	ldr	r3, [pc, #488]	@ (8008150 <UART_SetConfig+0x2e4>)
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6c:	f003 030c 	and.w	r3, r3, #12
 8007f70:	2b0c      	cmp	r3, #12
 8007f72:	d82d      	bhi.n	8007fd0 <UART_SetConfig+0x164>
 8007f74:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <UART_SetConfig+0x110>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007fd1 	.word	0x08007fd1
 8007f84:	08007fd1 	.word	0x08007fd1
 8007f88:	08007fd1 	.word	0x08007fd1
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	08007fd1 	.word	0x08007fd1
 8007f94:	08007fd1 	.word	0x08007fd1
 8007f98:	08007fd1 	.word	0x08007fd1
 8007f9c:	08007fb9 	.word	0x08007fb9
 8007fa0:	08007fd1 	.word	0x08007fd1
 8007fa4:	08007fd1 	.word	0x08007fd1
 8007fa8:	08007fd1 	.word	0x08007fd1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb6:	e0d8      	b.n	800816a <UART_SetConfig+0x2fe>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	e0d4      	b.n	800816a <UART_SetConfig+0x2fe>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc6:	e0d0      	b.n	800816a <UART_SetConfig+0x2fe>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fce:	e0cc      	b.n	800816a <UART_SetConfig+0x2fe>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e0c8      	b.n	800816a <UART_SetConfig+0x2fe>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8008158 <UART_SetConfig+0x2ec>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d125      	bne.n	800802e <UART_SetConfig+0x1c2>
 8007fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8008150 <UART_SetConfig+0x2e4>)
 8007fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fec:	2b30      	cmp	r3, #48	@ 0x30
 8007fee:	d016      	beq.n	800801e <UART_SetConfig+0x1b2>
 8007ff0:	2b30      	cmp	r3, #48	@ 0x30
 8007ff2:	d818      	bhi.n	8008026 <UART_SetConfig+0x1ba>
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d00a      	beq.n	800800e <UART_SetConfig+0x1a2>
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d814      	bhi.n	8008026 <UART_SetConfig+0x1ba>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <UART_SetConfig+0x19a>
 8008000:	2b10      	cmp	r3, #16
 8008002:	d008      	beq.n	8008016 <UART_SetConfig+0x1aa>
 8008004:	e00f      	b.n	8008026 <UART_SetConfig+0x1ba>
 8008006:	2300      	movs	r3, #0
 8008008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800c:	e0ad      	b.n	800816a <UART_SetConfig+0x2fe>
 800800e:	2302      	movs	r3, #2
 8008010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008014:	e0a9      	b.n	800816a <UART_SetConfig+0x2fe>
 8008016:	2304      	movs	r3, #4
 8008018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801c:	e0a5      	b.n	800816a <UART_SetConfig+0x2fe>
 800801e:	2308      	movs	r3, #8
 8008020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008024:	e0a1      	b.n	800816a <UART_SetConfig+0x2fe>
 8008026:	2310      	movs	r3, #16
 8008028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802c:	e09d      	b.n	800816a <UART_SetConfig+0x2fe>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a4a      	ldr	r2, [pc, #296]	@ (800815c <UART_SetConfig+0x2f0>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d125      	bne.n	8008084 <UART_SetConfig+0x218>
 8008038:	4b45      	ldr	r3, [pc, #276]	@ (8008150 <UART_SetConfig+0x2e4>)
 800803a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008042:	2bc0      	cmp	r3, #192	@ 0xc0
 8008044:	d016      	beq.n	8008074 <UART_SetConfig+0x208>
 8008046:	2bc0      	cmp	r3, #192	@ 0xc0
 8008048:	d818      	bhi.n	800807c <UART_SetConfig+0x210>
 800804a:	2b80      	cmp	r3, #128	@ 0x80
 800804c:	d00a      	beq.n	8008064 <UART_SetConfig+0x1f8>
 800804e:	2b80      	cmp	r3, #128	@ 0x80
 8008050:	d814      	bhi.n	800807c <UART_SetConfig+0x210>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <UART_SetConfig+0x1f0>
 8008056:	2b40      	cmp	r3, #64	@ 0x40
 8008058:	d008      	beq.n	800806c <UART_SetConfig+0x200>
 800805a:	e00f      	b.n	800807c <UART_SetConfig+0x210>
 800805c:	2300      	movs	r3, #0
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008062:	e082      	b.n	800816a <UART_SetConfig+0x2fe>
 8008064:	2302      	movs	r3, #2
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806a:	e07e      	b.n	800816a <UART_SetConfig+0x2fe>
 800806c:	2304      	movs	r3, #4
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008072:	e07a      	b.n	800816a <UART_SetConfig+0x2fe>
 8008074:	2308      	movs	r3, #8
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807a:	e076      	b.n	800816a <UART_SetConfig+0x2fe>
 800807c:	2310      	movs	r3, #16
 800807e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008082:	e072      	b.n	800816a <UART_SetConfig+0x2fe>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a35      	ldr	r2, [pc, #212]	@ (8008160 <UART_SetConfig+0x2f4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d12a      	bne.n	80080e4 <UART_SetConfig+0x278>
 800808e:	4b30      	ldr	r3, [pc, #192]	@ (8008150 <UART_SetConfig+0x2e4>)
 8008090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800809c:	d01a      	beq.n	80080d4 <UART_SetConfig+0x268>
 800809e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080a2:	d81b      	bhi.n	80080dc <UART_SetConfig+0x270>
 80080a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a8:	d00c      	beq.n	80080c4 <UART_SetConfig+0x258>
 80080aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ae:	d815      	bhi.n	80080dc <UART_SetConfig+0x270>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <UART_SetConfig+0x250>
 80080b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b8:	d008      	beq.n	80080cc <UART_SetConfig+0x260>
 80080ba:	e00f      	b.n	80080dc <UART_SetConfig+0x270>
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e052      	b.n	800816a <UART_SetConfig+0x2fe>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e04e      	b.n	800816a <UART_SetConfig+0x2fe>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e04a      	b.n	800816a <UART_SetConfig+0x2fe>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e046      	b.n	800816a <UART_SetConfig+0x2fe>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e042      	b.n	800816a <UART_SetConfig+0x2fe>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a17      	ldr	r2, [pc, #92]	@ (8008148 <UART_SetConfig+0x2dc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d13a      	bne.n	8008164 <UART_SetConfig+0x2f8>
 80080ee:	4b18      	ldr	r3, [pc, #96]	@ (8008150 <UART_SetConfig+0x2e4>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080fc:	d01a      	beq.n	8008134 <UART_SetConfig+0x2c8>
 80080fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008102:	d81b      	bhi.n	800813c <UART_SetConfig+0x2d0>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d00c      	beq.n	8008124 <UART_SetConfig+0x2b8>
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800810e:	d815      	bhi.n	800813c <UART_SetConfig+0x2d0>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <UART_SetConfig+0x2b0>
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008118:	d008      	beq.n	800812c <UART_SetConfig+0x2c0>
 800811a:	e00f      	b.n	800813c <UART_SetConfig+0x2d0>
 800811c:	2300      	movs	r3, #0
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e022      	b.n	800816a <UART_SetConfig+0x2fe>
 8008124:	2302      	movs	r3, #2
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e01e      	b.n	800816a <UART_SetConfig+0x2fe>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e01a      	b.n	800816a <UART_SetConfig+0x2fe>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e016      	b.n	800816a <UART_SetConfig+0x2fe>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008142:	e012      	b.n	800816a <UART_SetConfig+0x2fe>
 8008144:	cfff69f3 	.word	0xcfff69f3
 8008148:	40008000 	.word	0x40008000
 800814c:	40013800 	.word	0x40013800
 8008150:	40021000 	.word	0x40021000
 8008154:	40004400 	.word	0x40004400
 8008158:	40004800 	.word	0x40004800
 800815c:	40004c00 	.word	0x40004c00
 8008160:	40005000 	.word	0x40005000
 8008164:	2310      	movs	r3, #16
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4aae      	ldr	r2, [pc, #696]	@ (8008428 <UART_SetConfig+0x5bc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	f040 8097 	bne.w	80082a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008176:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800817a:	2b08      	cmp	r3, #8
 800817c:	d823      	bhi.n	80081c6 <UART_SetConfig+0x35a>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <UART_SetConfig+0x318>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081a9 	.word	0x080081a9
 8008188:	080081c7 	.word	0x080081c7
 800818c:	080081b1 	.word	0x080081b1
 8008190:	080081c7 	.word	0x080081c7
 8008194:	080081b7 	.word	0x080081b7
 8008198:	080081c7 	.word	0x080081c7
 800819c:	080081c7 	.word	0x080081c7
 80081a0:	080081c7 	.word	0x080081c7
 80081a4:	080081bf 	.word	0x080081bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a8:	f7fd ff72 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 80081ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ae:	e010      	b.n	80081d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b0:	4b9e      	ldr	r3, [pc, #632]	@ (800842c <UART_SetConfig+0x5c0>)
 80081b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081b4:	e00d      	b.n	80081d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b6:	f7fd fefd 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80081ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081bc:	e009      	b.n	80081d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081c4:	e005      	b.n	80081d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8130 	beq.w	800843a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	4a94      	ldr	r2, [pc, #592]	@ (8008430 <UART_SetConfig+0x5c4>)
 80081e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e4:	461a      	mov	r2, r3
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	4413      	add	r3, r2
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d305      	bcc.n	800820a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	d903      	bls.n	8008212 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008210:	e113      	b.n	800843a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	60bb      	str	r3, [r7, #8]
 8008218:	60fa      	str	r2, [r7, #12]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821e:	4a84      	ldr	r2, [pc, #528]	@ (8008430 <UART_SetConfig+0x5c4>)
 8008220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008224:	b29b      	uxth	r3, r3
 8008226:	2200      	movs	r2, #0
 8008228:	603b      	str	r3, [r7, #0]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008230:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008234:	f7f8 fd68 	bl	8000d08 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	020b      	lsls	r3, r1, #8
 800824a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800824e:	0202      	lsls	r2, r0, #8
 8008250:	6979      	ldr	r1, [r7, #20]
 8008252:	6849      	ldr	r1, [r1, #4]
 8008254:	0849      	lsrs	r1, r1, #1
 8008256:	2000      	movs	r0, #0
 8008258:	460c      	mov	r4, r1
 800825a:	4605      	mov	r5, r0
 800825c:	eb12 0804 	adds.w	r8, r2, r4
 8008260:	eb43 0905 	adc.w	r9, r3, r5
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	469a      	mov	sl, r3
 800826c:	4693      	mov	fp, r2
 800826e:	4652      	mov	r2, sl
 8008270:	465b      	mov	r3, fp
 8008272:	4640      	mov	r0, r8
 8008274:	4649      	mov	r1, r9
 8008276:	f7f8 fd47 	bl	8000d08 <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4613      	mov	r3, r2
 8008280:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008288:	d308      	bcc.n	800829c <UART_SetConfig+0x430>
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008290:	d204      	bcs.n	800829c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	60da      	str	r2, [r3, #12]
 800829a:	e0ce      	b.n	800843a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082a2:	e0ca      	b.n	800843a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ac:	d166      	bne.n	800837c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d827      	bhi.n	8008306 <UART_SetConfig+0x49a>
 80082b6:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <UART_SetConfig+0x450>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082e1 	.word	0x080082e1
 80082c0:	080082e9 	.word	0x080082e9
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	08008307 	.word	0x08008307
 80082cc:	080082f7 	.word	0x080082f7
 80082d0:	08008307 	.word	0x08008307
 80082d4:	08008307 	.word	0x08008307
 80082d8:	08008307 	.word	0x08008307
 80082dc:	080082ff 	.word	0x080082ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e0:	f7fd fed6 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 80082e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e6:	e014      	b.n	8008312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7fd fee8 	bl	80060bc <HAL_RCC_GetPCLK2Freq>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ee:	e010      	b.n	8008312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f0:	4b4e      	ldr	r3, [pc, #312]	@ (800842c <UART_SetConfig+0x5c0>)
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082f4:	e00d      	b.n	8008312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f6:	f7fd fe5d 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80082fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082fc:	e009      	b.n	8008312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008304:	e005      	b.n	8008312 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8090 	beq.w	800843a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831e:	4a44      	ldr	r2, [pc, #272]	@ (8008430 <UART_SetConfig+0x5c4>)
 8008320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008324:	461a      	mov	r2, r3
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	fbb3 f3f2 	udiv	r3, r3, r2
 800832c:	005a      	lsls	r2, r3, #1
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	441a      	add	r2, r3
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	fbb2 f3f3 	udiv	r3, r2, r3
 800833e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	2b0f      	cmp	r3, #15
 8008344:	d916      	bls.n	8008374 <UART_SetConfig+0x508>
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800834c:	d212      	bcs.n	8008374 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f023 030f 	bic.w	r3, r3, #15
 8008356:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	b29b      	uxth	r3, r3
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	b29a      	uxth	r2, r3
 8008364:	8bfb      	ldrh	r3, [r7, #30]
 8008366:	4313      	orrs	r3, r2
 8008368:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	8bfa      	ldrh	r2, [r7, #30]
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	e062      	b.n	800843a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800837a:	e05e      	b.n	800843a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800837c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008380:	2b08      	cmp	r3, #8
 8008382:	d828      	bhi.n	80083d6 <UART_SetConfig+0x56a>
 8008384:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <UART_SetConfig+0x520>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083b1 	.word	0x080083b1
 8008390:	080083b9 	.word	0x080083b9
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083d7 	.word	0x080083d7
 800839c:	080083c7 	.word	0x080083c7
 80083a0:	080083d7 	.word	0x080083d7
 80083a4:	080083d7 	.word	0x080083d7
 80083a8:	080083d7 	.word	0x080083d7
 80083ac:	080083cf 	.word	0x080083cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b0:	f7fd fe6e 	bl	8006090 <HAL_RCC_GetPCLK1Freq>
 80083b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083b6:	e014      	b.n	80083e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b8:	f7fd fe80 	bl	80060bc <HAL_RCC_GetPCLK2Freq>
 80083bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083be:	e010      	b.n	80083e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c0:	4b1a      	ldr	r3, [pc, #104]	@ (800842c <UART_SetConfig+0x5c0>)
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c4:	e00d      	b.n	80083e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083c6:	f7fd fdf5 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80083ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083cc:	e009      	b.n	80083e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083d4:	e005      	b.n	80083e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083e0:	bf00      	nop
    }

    if (pclk != 0U)
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d028      	beq.n	800843a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	4a10      	ldr	r2, [pc, #64]	@ (8008430 <UART_SetConfig+0x5c4>)
 80083ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	085b      	lsrs	r3, r3, #1
 8008400:	441a      	add	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	2b0f      	cmp	r3, #15
 8008410:	d910      	bls.n	8008434 <UART_SetConfig+0x5c8>
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008418:	d20c      	bcs.n	8008434 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	b29a      	uxth	r2, r3
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	e009      	b.n	800843a <UART_SetConfig+0x5ce>
 8008426:	bf00      	nop
 8008428:	40008000 	.word	0x40008000
 800842c:	00f42400 	.word	0x00f42400
 8008430:	08020304 	.word	0x08020304
      }
      else
      {
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2201      	movs	r2, #1
 800843e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2201      	movs	r2, #1
 8008446:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2200      	movs	r2, #0
 800844e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2200      	movs	r2, #0
 8008454:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008456:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800845a:	4618      	mov	r0, r3
 800845c:	3730      	adds	r7, #48	@ 0x30
 800845e:	46bd      	mov	sp, r7
 8008460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00a      	beq.n	800848e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01a      	beq.n	800857a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008562:	d10a      	bne.n	800857a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	605a      	str	r2, [r3, #4]
  }
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b098      	sub	sp, #96	@ 0x60
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085b8:	f7fb fbd6 	bl	8003d68 <HAL_GetTick>
 80085bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d12f      	bne.n	800862c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d4:	2200      	movs	r2, #0
 80085d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f88e 	bl	80086fc <UART_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d022      	beq.n	800862c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008604:	647b      	str	r3, [r7, #68]	@ 0x44
 8008606:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800860a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e063      	b.n	80086f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b04      	cmp	r3, #4
 8008638:	d149      	bne.n	80086ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800863a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008642:	2200      	movs	r2, #0
 8008644:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f857 	bl	80086fc <UART_WaitOnFlagUntilTimeout>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d03c      	beq.n	80086ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	623b      	str	r3, [r7, #32]
   return(result);
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008672:	633b      	str	r3, [r7, #48]	@ 0x30
 8008674:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	60fb      	str	r3, [r7, #12]
   return(result);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086a6:	61fa      	str	r2, [r7, #28]
 80086a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	69b9      	ldr	r1, [r7, #24]
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	617b      	str	r3, [r7, #20]
   return(result);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e5      	bne.n	8008686 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e012      	b.n	80086f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2220      	movs	r2, #32
 80086da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3758      	adds	r7, #88	@ 0x58
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	4613      	mov	r3, r2
 800870a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800870c:	e04f      	b.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008714:	d04b      	beq.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008716:	f7fb fb27 	bl	8003d68 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	429a      	cmp	r2, r3
 8008724:	d302      	bcc.n	800872c <UART_WaitOnFlagUntilTimeout+0x30>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e04e      	b.n	80087ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d037      	beq.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b80      	cmp	r3, #128	@ 0x80
 8008742:	d034      	beq.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b40      	cmp	r3, #64	@ 0x40
 8008748:	d031      	beq.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	f003 0308 	and.w	r3, r3, #8
 8008754:	2b08      	cmp	r3, #8
 8008756:	d110      	bne.n	800877a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2208      	movs	r2, #8
 800875e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fa42 	bl	8008bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2208      	movs	r2, #8
 800876a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e029      	b.n	80087ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008788:	d111      	bne.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 fa28 	bl	8008bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e00f      	b.n	80087ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4013      	ands	r3, r2
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	bf0c      	ite	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	2300      	movne	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d0a0      	beq.n	800870e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087d8:	b480      	push	{r7}
 80087da:	b0a3      	sub	sp, #140	@ 0x8c
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800880a:	d10e      	bne.n	800882a <UART_Start_Receive_IT+0x52>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <UART_Start_Receive_IT+0x48>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800881a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800881e:	e02d      	b.n	800887c <UART_Start_Receive_IT+0xa4>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	22ff      	movs	r2, #255	@ 0xff
 8008824:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008828:	e028      	b.n	800887c <UART_Start_Receive_IT+0xa4>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10d      	bne.n	800884e <UART_Start_Receive_IT+0x76>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <UART_Start_Receive_IT+0x6c>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	22ff      	movs	r2, #255	@ 0xff
 800883e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008842:	e01b      	b.n	800887c <UART_Start_Receive_IT+0xa4>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	227f      	movs	r2, #127	@ 0x7f
 8008848:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800884c:	e016      	b.n	800887c <UART_Start_Receive_IT+0xa4>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008856:	d10d      	bne.n	8008874 <UART_Start_Receive_IT+0x9c>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <UART_Start_Receive_IT+0x92>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	227f      	movs	r2, #127	@ 0x7f
 8008864:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008868:	e008      	b.n	800887c <UART_Start_Receive_IT+0xa4>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	223f      	movs	r2, #63	@ 0x3f
 800886e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008872:	e003      	b.n	800887c <UART_Start_Receive_IT+0xa4>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2222      	movs	r2, #34	@ 0x22
 8008888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800889c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800889e:	f043 0301 	orr.w	r3, r3, #1
 80088a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80088b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80088b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80088b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80088be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e3      	bne.n	800888c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088cc:	d14f      	bne.n	800896e <UART_Start_Receive_IT+0x196>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d349      	bcc.n	800896e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088e2:	d107      	bne.n	80088f4 <UART_Start_Receive_IT+0x11c>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4a47      	ldr	r2, [pc, #284]	@ (8008a0c <UART_Start_Receive_IT+0x234>)
 80088f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80088f2:	e002      	b.n	80088fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4a46      	ldr	r2, [pc, #280]	@ (8008a10 <UART_Start_Receive_IT+0x238>)
 80088f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01a      	beq.n	8008938 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008916:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008926:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800892a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e4      	bne.n	8008902 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800894e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008958:	64ba      	str	r2, [r7, #72]	@ 0x48
 800895a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800895e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e5      	bne.n	8008938 <UART_Start_Receive_IT+0x160>
 800896c:	e046      	b.n	80089fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008976:	d107      	bne.n	8008988 <UART_Start_Receive_IT+0x1b0>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a24      	ldr	r2, [pc, #144]	@ (8008a14 <UART_Start_Receive_IT+0x23c>)
 8008984:	675a      	str	r2, [r3, #116]	@ 0x74
 8008986:	e002      	b.n	800898e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a23      	ldr	r2, [pc, #140]	@ (8008a18 <UART_Start_Receive_IT+0x240>)
 800898c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d019      	beq.n	80089ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80089aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_Start_Receive_IT+0x1be>
 80089c8:	e018      	b.n	80089fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	613b      	str	r3, [r7, #16]
   return(result);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f043 0320 	orr.w	r3, r3, #32
 80089de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e8:	623b      	str	r3, [r7, #32]
 80089ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	69f9      	ldr	r1, [r7, #28]
 80089ee:	6a3a      	ldr	r2, [r7, #32]
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	378c      	adds	r7, #140	@ 0x8c
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	080096a5 	.word	0x080096a5
 8008a10:	08009341 	.word	0x08009341
 8008a14:	08009189 	.word	0x08009189
 8008a18:	08008fd1 	.word	0x08008fd1

08008a1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b096      	sub	sp, #88	@ 0x58
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	88fa      	ldrh	r2, [r7, #6]
 8008a34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2222      	movs	r2, #34	@ 0x22
 8008a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d02d      	beq.n	8008aae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a58:	4a40      	ldr	r2, [pc, #256]	@ (8008b5c <UART_Start_Receive_DMA+0x140>)
 8008a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a62:	4a3f      	ldr	r2, [pc, #252]	@ (8008b60 <UART_Start_Receive_DMA+0x144>)
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8008b64 <UART_Start_Receive_DMA+0x148>)
 8008a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a76:	2200      	movs	r2, #0
 8008a78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3324      	adds	r3, #36	@ 0x24
 8008a86:	4619      	mov	r1, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	f7fb fafe 	bl	8004090 <HAL_DMA_Start_IT>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e051      	b.n	8008b52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d018      	beq.n	8008ae8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008aca:	657b      	str	r3, [r7, #84]	@ 0x54
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e6      	bne.n	8008ab6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3308      	adds	r3, #8
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	f043 0301 	orr.w	r3, r3, #1
 8008afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3308      	adds	r3, #8
 8008b06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b08:	637a      	str	r2, [r7, #52]	@ 0x34
 8008b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e5      	bne.n	8008ae8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b3c:	623a      	str	r2, [r7, #32]
 8008b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	69f9      	ldr	r1, [r7, #28]
 8008b42:	6a3a      	ldr	r2, [r7, #32]
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e5      	bne.n	8008b1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3758      	adds	r7, #88	@ 0x58
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	08008d6d 	.word	0x08008d6d
 8008b60:	08008e99 	.word	0x08008e99
 8008b64:	08008ed7 	.word	0x08008ed7

08008b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b08f      	sub	sp, #60	@ 0x3c
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e6      	bne.n	8008b70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc2:	61ba      	str	r2, [r7, #24]
 8008bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6979      	ldr	r1, [r7, #20]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008bde:	bf00      	nop
 8008be0:	373c      	adds	r7, #60	@ 0x3c
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b095      	sub	sp, #84	@ 0x54
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e6      	bne.n	8008bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c3a:	f023 0301 	bic.w	r3, r3, #1
 8008c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3308      	adds	r3, #8
 8008c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e3      	bne.n	8008c24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d118      	bne.n	8008c96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f023 0310 	bic.w	r3, r3, #16
 8008c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c82:	61bb      	str	r3, [r7, #24]
 8008c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6979      	ldr	r1, [r7, #20]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e6      	bne.n	8008c64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008caa:	bf00      	nop
 8008cac:	3754      	adds	r7, #84	@ 0x54
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b090      	sub	sp, #64	@ 0x40
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d137      	bne.n	8008d42 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8008cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2c:	61fb      	str	r3, [r7, #28]
 8008d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	69b9      	ldr	r1, [r7, #24]
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	617b      	str	r3, [r7, #20]
   return(result);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e6      	bne.n	8008d0e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d40:	e002      	b.n	8008d48 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008d44:	f7ff f85e 	bl	8007e04 <HAL_UART_TxCpltCallback>
}
 8008d48:	bf00      	nop
 8008d4a:	3740      	adds	r7, #64	@ 0x40
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff f85a 	bl	8007e18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b09c      	sub	sp, #112	@ 0x70
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d171      	bne.n	8008e6c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008db0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008db4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e6      	bne.n	8008d90 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8008de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e5      	bne.n	8008dc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	623b      	str	r3, [r7, #32]
   return(result);
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e5      	bne.n	8008df6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d118      	bne.n	8008e6c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e58:	61fb      	str	r3, [r7, #28]
 8008e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	69b9      	ldr	r1, [r7, #24]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	617b      	str	r3, [r7, #20]
   return(result);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e6e:	2200      	movs	r2, #0
 8008e70:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d107      	bne.n	8008e8a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e80:	4619      	mov	r1, r3
 8008e82:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e84:	f7fe ffe6 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e88:	e002      	b.n	8008e90 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008e8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e8c:	f7f9 f84c 	bl	8001f28 <HAL_UART_RxCpltCallback>
}
 8008e90:	bf00      	nop
 8008e92:	3770      	adds	r7, #112	@ 0x70
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d109      	bne.n	8008ec8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008eba:	085b      	lsrs	r3, r3, #1
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7fe ffc7 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ec6:	e002      	b.n	8008ece <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7fe ffaf 	bl	8007e2c <HAL_UART_RxHalfCpltCallback>
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efe:	2b80      	cmp	r3, #128	@ 0x80
 8008f00:	d109      	bne.n	8008f16 <UART_DMAError+0x40>
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b21      	cmp	r3, #33	@ 0x21
 8008f06:	d106      	bne.n	8008f16 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008f10:	6978      	ldr	r0, [r7, #20]
 8008f12:	f7ff fe29 	bl	8008b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f20:	2b40      	cmp	r3, #64	@ 0x40
 8008f22:	d109      	bne.n	8008f38 <UART_DMAError+0x62>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b22      	cmp	r3, #34	@ 0x22
 8008f28:	d106      	bne.n	8008f38 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008f32:	6978      	ldr	r0, [r7, #20]
 8008f34:	f7ff fe59 	bl	8008bea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3e:	f043 0210 	orr.w	r2, r3, #16
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f48:	6978      	ldr	r0, [r7, #20]
 8008f4a:	f7fe ff79 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f4e:	bf00      	nop
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7fe ff67 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f72:	bf00      	nop
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b088      	sub	sp, #32
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f96:	61fb      	str	r3, [r7, #28]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6979      	ldr	r1, [r7, #20]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	613b      	str	r3, [r7, #16]
   return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e6      	bne.n	8008f82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fe ff1e 	bl	8007e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fc8:	bf00      	nop
 8008fca:	3720      	adds	r7, #32
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b09c      	sub	sp, #112	@ 0x70
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fe8:	2b22      	cmp	r3, #34	@ 0x22
 8008fea:	f040 80be 	bne.w	800916a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ff8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008ffc:	b2d9      	uxtb	r1, r3
 8008ffe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009002:	b2da      	uxtb	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009008:	400a      	ands	r2, r1
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009030:	b29b      	uxth	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	f040 80a1 	bne.w	800917a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800904c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009056:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009058:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800905c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e6      	bne.n	8009038 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800907a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907c:	f023 0301 	bic.w	r3, r3, #1
 8009080:	667b      	str	r3, [r7, #100]	@ 0x64
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3308      	adds	r3, #8
 8009088:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800908a:	647a      	str	r2, [r7, #68]	@ 0x44
 800908c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a33      	ldr	r2, [pc, #204]	@ (8009184 <UART_RxISR_8BIT+0x1b4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d01f      	beq.n	80090fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d018      	beq.n	80090fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	623b      	str	r3, [r7, #32]
   return(result);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090de:	663b      	str	r3, [r7, #96]	@ 0x60
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e6      	bne.n	80090ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d12e      	bne.n	8009162 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	60fb      	str	r3, [r7, #12]
   return(result);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0310 	bic.w	r3, r3, #16
 800911e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009128:	61fb      	str	r3, [r7, #28]
 800912a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	69b9      	ldr	r1, [r7, #24]
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	617b      	str	r3, [r7, #20]
   return(result);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e6      	bne.n	800910a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b10      	cmp	r3, #16
 8009148:	d103      	bne.n	8009152 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2210      	movs	r2, #16
 8009150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7fe fe7a 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009160:	e00b      	b.n	800917a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7f8 fee0 	bl	8001f28 <HAL_UART_RxCpltCallback>
}
 8009168:	e007      	b.n	800917a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f042 0208 	orr.w	r2, r2, #8
 8009178:	619a      	str	r2, [r3, #24]
}
 800917a:	bf00      	nop
 800917c:	3770      	adds	r7, #112	@ 0x70
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	40008000 	.word	0x40008000

08009188 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b09c      	sub	sp, #112	@ 0x70
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009196:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091a0:	2b22      	cmp	r3, #34	@ 0x22
 80091a2:	f040 80be 	bne.w	8009322 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80091b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80091ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80091be:	4013      	ands	r3, r2
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ca:	1c9a      	adds	r2, r3, #2
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f040 80a1 	bne.w	8009332 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009204:	667b      	str	r3, [r7, #100]	@ 0x64
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800920e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009210:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009214:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800921c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e6      	bne.n	80091f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	663b      	str	r3, [r7, #96]	@ 0x60
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009242:	643a      	str	r2, [r7, #64]	@ 0x40
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2220      	movs	r2, #32
 800925a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a33      	ldr	r2, [pc, #204]	@ (800933c <UART_RxISR_16BIT+0x1b4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d01f      	beq.n	80092b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d018      	beq.n	80092b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009296:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e6      	bne.n	8009282 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d12e      	bne.n	800931a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	f023 0310 	bic.w	r3, r3, #16
 80092d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6979      	ldr	r1, [r7, #20]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	613b      	str	r3, [r7, #16]
   return(result);
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e6      	bne.n	80092c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	f003 0310 	and.w	r3, r3, #16
 80092fe:	2b10      	cmp	r3, #16
 8009300:	d103      	bne.n	800930a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2210      	movs	r2, #16
 8009308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7fe fd9e 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009318:	e00b      	b.n	8009332 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7f8 fe04 	bl	8001f28 <HAL_UART_RxCpltCallback>
}
 8009320:	e007      	b.n	8009332 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0208 	orr.w	r2, r2, #8
 8009330:	619a      	str	r2, [r3, #24]
}
 8009332:	bf00      	nop
 8009334:	3770      	adds	r7, #112	@ 0x70
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40008000 	.word	0x40008000

08009340 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b0ac      	sub	sp, #176	@ 0xb0
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800934e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009376:	2b22      	cmp	r3, #34	@ 0x22
 8009378:	f040 8183 	bne.w	8009682 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009382:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009386:	e126      	b.n	80095d6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009392:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009396:	b2d9      	uxtb	r1, r3
 8009398:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800939c:	b2da      	uxtb	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a2:	400a      	ands	r2, r1
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d053      	beq.n	8009482 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d011      	beq.n	800940a <UART_RxISR_8BIT_FIFOEN+0xca>
 80093e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80093ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2201      	movs	r2, #1
 80093f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009400:	f043 0201 	orr.w	r2, r3, #1
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800940a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d011      	beq.n	800943a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00b      	beq.n	800943a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2202      	movs	r2, #2
 8009428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009430:	f043 0204 	orr.w	r2, r3, #4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800943a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b00      	cmp	r3, #0
 8009444:	d011      	beq.n	800946a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00b      	beq.n	800946a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2204      	movs	r2, #4
 8009458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009460:	f043 0202 	orr.w	r2, r3, #2
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009470:	2b00      	cmp	r3, #0
 8009472:	d006      	beq.n	8009482 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7fe fce3 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	f040 80a3 	bne.w	80095d6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800949e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	461a      	mov	r2, r3
 80094ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80094b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80094c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e4      	bne.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80094d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80094ee:	66ba      	str	r2, [r7, #104]	@ 0x68
 80094f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80094f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80094fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e1      	bne.n	80094c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a60      	ldr	r2, [pc, #384]	@ (800969c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d021      	beq.n	8009564 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01a      	beq.n	8009564 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800953c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800953e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009550:	657b      	str	r3, [r7, #84]	@ 0x54
 8009552:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009556:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800955e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e4      	bne.n	800952e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d130      	bne.n	80095ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	f023 0310 	bic.w	r3, r3, #16
 8009586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009594:	643b      	str	r3, [r7, #64]	@ 0x40
 8009596:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800959a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e4      	bne.n	8009572 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b10      	cmp	r3, #16
 80095b4:	d103      	bne.n	80095be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2210      	movs	r2, #16
 80095bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7fe fc44 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80095cc:	e00e      	b.n	80095ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7f8 fcaa 	bl	8001f28 <HAL_UART_RxCpltCallback>
        break;
 80095d4:	e00a      	b.n	80095ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d006      	beq.n	80095ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80095de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f47f aece 	bne.w	8009388 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d049      	beq.n	8009692 <UART_RxISR_8BIT_FIFOEN+0x352>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009604:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009608:	429a      	cmp	r2, r3
 800960a:	d242      	bcs.n	8009692 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3308      	adds	r3, #8
 8009612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	61fb      	str	r3, [r7, #28]
   return(result);
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e3      	bne.n	800960c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a16      	ldr	r2, [pc, #88]	@ (80096a0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009648:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	60bb      	str	r3, [r7, #8]
   return(result);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f043 0320 	orr.w	r3, r3, #32
 800965e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800966c:	61bb      	str	r3, [r7, #24]
 800966e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6979      	ldr	r1, [r7, #20]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	613b      	str	r3, [r7, #16]
   return(result);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e4      	bne.n	800964a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009680:	e007      	b.n	8009692 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f042 0208 	orr.w	r2, r2, #8
 8009690:	619a      	str	r2, [r3, #24]
}
 8009692:	bf00      	nop
 8009694:	37b0      	adds	r7, #176	@ 0xb0
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	40008000 	.word	0x40008000
 80096a0:	08008fd1 	.word	0x08008fd1

080096a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b0ae      	sub	sp, #184	@ 0xb8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096da:	2b22      	cmp	r3, #34	@ 0x22
 80096dc:	f040 8187 	bne.w	80099ee <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096ea:	e12a      	b.n	8009942 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80096fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009702:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009706:	4013      	ands	r3, r2
 8009708:	b29a      	uxth	r2, r3
 800970a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800970e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009714:	1c9a      	adds	r2, r3, #2
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29a      	uxth	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	2b00      	cmp	r3, #0
 8009740:	d053      	beq.n	80097ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d011      	beq.n	8009772 <UART_RxISR_16BIT_FIFOEN+0xce>
 800974e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00b      	beq.n	8009772 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2201      	movs	r2, #1
 8009760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009768:	f043 0201 	orr.w	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d011      	beq.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800977e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2202      	movs	r2, #2
 8009790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009798:	f043 0204 	orr.w	r2, r3, #4
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d011      	beq.n	80097d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80097ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2204      	movs	r2, #4
 80097c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c8:	f043 0202 	orr.w	r2, r3, #2
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fe fb2f 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 80a5 	bne.w	8009942 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800980c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800981a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800981e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009822:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800982c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e2      	bne.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3308      	adds	r3, #8
 8009838:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3308      	adds	r3, #8
 8009856:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800985a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800985c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009860:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e1      	bne.n	8009832 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a60      	ldr	r2, [pc, #384]	@ (8009a08 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d021      	beq.n	80098d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01a      	beq.n	80098d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098be:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e4      	bne.n	800989a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d130      	bne.n	800993a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ee:	f023 0310 	bic.w	r3, r3, #16
 80098f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009900:	647b      	str	r3, [r7, #68]	@ 0x44
 8009902:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800990e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e4      	bne.n	80098de <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	f003 0310 	and.w	r3, r3, #16
 800991e:	2b10      	cmp	r3, #16
 8009920:	d103      	bne.n	800992a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2210      	movs	r2, #16
 8009928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fe fa8e 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009938:	e00e      	b.n	8009958 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7f8 faf4 	bl	8001f28 <HAL_UART_RxCpltCallback>
        break;
 8009940:	e00a      	b.n	8009958 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009942:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800994a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	f47f aeca 	bne.w	80096ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800995e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009962:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009966:	2b00      	cmp	r3, #0
 8009968:	d049      	beq.n	80099fe <UART_RxISR_16BIT_FIFOEN+0x35a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009970:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009974:	429a      	cmp	r2, r3
 8009976:	d242      	bcs.n	80099fe <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3308      	adds	r3, #8
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	623b      	str	r3, [r7, #32]
   return(result);
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800998e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800999c:	633a      	str	r2, [r7, #48]	@ 0x30
 800999e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e3      	bne.n	8009978 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a16      	ldr	r2, [pc, #88]	@ (8009a0c <UART_RxISR_16BIT_FIFOEN+0x368>)
 80099b4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f043 0320 	orr.w	r3, r3, #32
 80099ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	69b9      	ldr	r1, [r7, #24]
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	617b      	str	r3, [r7, #20]
   return(result);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e4      	bne.n	80099b6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099ec:	e007      	b.n	80099fe <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f042 0208 	orr.w	r2, r2, #8
 80099fc:	619a      	str	r2, [r3, #24]
}
 80099fe:	bf00      	nop
 8009a00:	37b8      	adds	r7, #184	@ 0xb8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40008000 	.word	0x40008000
 8009a0c:	08009189 	.word	0x08009189

08009a10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e027      	b.n	8009ab2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2224      	movs	r2, #36	@ 0x24
 8009a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009a90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e02d      	b.n	8009b32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2224      	movs	r2, #36	@ 0x24
 8009ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f850 	bl	8009bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e02d      	b.n	8009bae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2224      	movs	r2, #36	@ 0x24
 8009b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0201 	bic.w	r2, r2, #1
 8009b78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f812 	bl	8009bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d108      	bne.n	8009bda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bd8:	e031      	b.n	8009c3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bda:	2308      	movs	r3, #8
 8009bdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bde:	2308      	movs	r3, #8
 8009be0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	0e5b      	lsrs	r3, r3, #25
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	0f5b      	lsrs	r3, r3, #29
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	7b3a      	ldrb	r2, [r7, #12]
 8009c06:	4911      	ldr	r1, [pc, #68]	@ (8009c4c <UARTEx_SetNbDataToProcess+0x94>)
 8009c08:	5c8a      	ldrb	r2, [r1, r2]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c0e:	7b3a      	ldrb	r2, [r7, #12]
 8009c10:	490f      	ldr	r1, [pc, #60]	@ (8009c50 <UARTEx_SetNbDataToProcess+0x98>)
 8009c12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	7b7a      	ldrb	r2, [r7, #13]
 8009c24:	4909      	ldr	r1, [pc, #36]	@ (8009c4c <UARTEx_SetNbDataToProcess+0x94>)
 8009c26:	5c8a      	ldrb	r2, [r1, r2]
 8009c28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c2c:	7b7a      	ldrb	r2, [r7, #13]
 8009c2e:	4908      	ldr	r1, [pc, #32]	@ (8009c50 <UARTEx_SetNbDataToProcess+0x98>)
 8009c30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	0802031c 	.word	0x0802031c
 8009c50:	08020324 	.word	0x08020324

08009c54 <__NVIC_SetPriority>:
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	db0a      	blt.n	8009c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	490c      	ldr	r1, [pc, #48]	@ (8009ca0 <__NVIC_SetPriority+0x4c>)
 8009c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c72:	0112      	lsls	r2, r2, #4
 8009c74:	b2d2      	uxtb	r2, r2
 8009c76:	440b      	add	r3, r1
 8009c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009c7c:	e00a      	b.n	8009c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4908      	ldr	r1, [pc, #32]	@ (8009ca4 <__NVIC_SetPriority+0x50>)
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	3b04      	subs	r3, #4
 8009c8c:	0112      	lsls	r2, r2, #4
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	440b      	add	r3, r1
 8009c92:	761a      	strb	r2, [r3, #24]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	e000e100 	.word	0xe000e100
 8009ca4:	e000ed00 	.word	0xe000ed00

08009ca8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009cac:	4b05      	ldr	r3, [pc, #20]	@ (8009cc4 <SysTick_Handler+0x1c>)
 8009cae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009cb0:	f002 fe6a 	bl	800c988 <xTaskGetSchedulerState>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d001      	beq.n	8009cbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009cba:	f003 ffa5 	bl	800dc08 <xPortSysTickHandler>
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	e000e010 	.word	0xe000e010

08009cc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f06f 0004 	mvn.w	r0, #4
 8009cd2:	f7ff ffbf 	bl	8009c54 <__NVIC_SetPriority>
#endif
}
 8009cd6:	bf00      	nop
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce2:	f3ef 8305 	mrs	r3, IPSR
 8009ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ce8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009cee:	f06f 0305 	mvn.w	r3, #5
 8009cf2:	607b      	str	r3, [r7, #4]
 8009cf4:	e00c      	b.n	8009d10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8009d20 <osKernelInitialize+0x44>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d105      	bne.n	8009d0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cfe:	4b08      	ldr	r3, [pc, #32]	@ (8009d20 <osKernelInitialize+0x44>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	607b      	str	r3, [r7, #4]
 8009d08:	e002      	b.n	8009d10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d10:	687b      	ldr	r3, [r7, #4]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	2000d104 	.word	0x2000d104

08009d24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2a:	f3ef 8305 	mrs	r3, IPSR
 8009d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d36:	f06f 0305 	mvn.w	r3, #5
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	e010      	b.n	8009d60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d6c <osKernelStart+0x48>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d109      	bne.n	8009d5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d46:	f7ff ffbf 	bl	8009cc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d4a:	4b08      	ldr	r3, [pc, #32]	@ (8009d6c <osKernelStart+0x48>)
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d50:	f002 f8ec 	bl	800bf2c <vTaskStartScheduler>
      stat = osOK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	607b      	str	r3, [r7, #4]
 8009d58:	e002      	b.n	8009d60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d60:	687b      	ldr	r3, [r7, #4]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	2000d104 	.word	0x2000d104

08009d70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08e      	sub	sp, #56	@ 0x38
 8009d74:	af04      	add	r7, sp, #16
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d80:	f3ef 8305 	mrs	r3, IPSR
 8009d84:	617b      	str	r3, [r7, #20]
  return(result);
 8009d86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d17e      	bne.n	8009e8a <osThreadNew+0x11a>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d07b      	beq.n	8009e8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d92:	2380      	movs	r3, #128	@ 0x80
 8009d94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d96:	2318      	movs	r3, #24
 8009d98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009da2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d045      	beq.n	8009e36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <osThreadNew+0x48>
        name = attr->name;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d008      	beq.n	8009dde <osThreadNew+0x6e>
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	2b38      	cmp	r3, #56	@ 0x38
 8009dd0:	d805      	bhi.n	8009dde <osThreadNew+0x6e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <osThreadNew+0x72>
        return (NULL);
 8009dde:	2300      	movs	r3, #0
 8009de0:	e054      	b.n	8009e8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	089b      	lsrs	r3, r3, #2
 8009df0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00e      	beq.n	8009e18 <osThreadNew+0xa8>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	2ba7      	cmp	r3, #167	@ 0xa7
 8009e00:	d90a      	bls.n	8009e18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d006      	beq.n	8009e18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <osThreadNew+0xa8>
        mem = 1;
 8009e12:	2301      	movs	r3, #1
 8009e14:	61bb      	str	r3, [r7, #24]
 8009e16:	e010      	b.n	8009e3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10c      	bne.n	8009e3a <osThreadNew+0xca>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d108      	bne.n	8009e3a <osThreadNew+0xca>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d104      	bne.n	8009e3a <osThreadNew+0xca>
          mem = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	e001      	b.n	8009e3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d110      	bne.n	8009e62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e48:	9202      	str	r2, [sp, #8]
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6a3a      	ldr	r2, [r7, #32]
 8009e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f001 fe74 	bl	800bb44 <xTaskCreateStatic>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	e013      	b.n	8009e8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d110      	bne.n	8009e8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	f107 0310 	add.w	r3, r7, #16
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f001 fec2 	bl	800bc04 <xTaskCreate>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d001      	beq.n	8009e8a <osThreadNew+0x11a>
            hTask = NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e8a:	693b      	ldr	r3, [r7, #16]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3728      	adds	r7, #40	@ 0x28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <osThreadFlagsSet+0x1a>
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da03      	bge.n	8009eb6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009eae:	f06f 0303 	mvn.w	r3, #3
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	e035      	b.n	8009f22 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009eba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ebc:	f3ef 8305 	mrs	r3, IPSR
 8009ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ec2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01f      	beq.n	8009f08 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6978      	ldr	r0, [r7, #20]
 8009eda:	f003 f81d 	bl	800cf18 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009ede:	f107 030c 	add.w	r3, r7, #12
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	9200      	str	r2, [sp, #0]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6978      	ldr	r0, [r7, #20]
 8009eec:	f003 f814 	bl	800cf18 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d015      	beq.n	8009f22 <osThreadFlagsSet+0x8e>
 8009ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f2c <osThreadFlagsSet+0x98>)
 8009ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	e00c      	b.n	8009f22 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6978      	ldr	r0, [r7, #20]
 8009f10:	f002 ff40 	bl	800cd94 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009f14:	f107 030c 	add.w	r3, r7, #12
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	6978      	ldr	r0, [r7, #20]
 8009f1e:	f002 ff39 	bl	800cd94 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009f22:	68fb      	ldr	r3, [r7, #12]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08c      	sub	sp, #48	@ 0x30
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f3c:	f3ef 8305 	mrs	r3, IPSR
 8009f40:	617b      	str	r3, [r7, #20]
  return(result);
 8009f42:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009f48:	f06f 0305 	mvn.w	r3, #5
 8009f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f4e:	e06b      	b.n	800a028 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	da03      	bge.n	8009f5e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009f56:	f06f 0303 	mvn.w	r3, #3
 8009f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f5c:	e064      	b.n	800a028 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f6c:	e001      	b.n	8009f72 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8009f7a:	f002 f8f3 	bl	800c164 <xTaskGetTickCount>
 8009f7e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009f80:	f107 0210 	add.w	r2, r7, #16
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f002 fea3 	bl	800ccd4 <xTaskNotifyWait>
 8009f8e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d137      	bne.n	800a006 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00c      	beq.n	8009fca <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d032      	beq.n	800a022 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10f      	bne.n	8009fe2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009fc2:	f06f 0302 	mvn.w	r3, #2
 8009fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8009fc8:	e02e      	b.n	800a028 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fce:	4013      	ands	r3, r2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d128      	bne.n	800a026 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d103      	bne.n	8009fe2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009fda:	f06f 0302 	mvn.w	r3, #2
 8009fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8009fe0:	e022      	b.n	800a028 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009fe2:	f002 f8bf 	bl	800c164 <xTaskGetTickCount>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d902      	bls.n	8009ffc <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ffa:	e00e      	b.n	800a01a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
 800a004:	e009      	b.n	800a01a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a00c:	f06f 0302 	mvn.w	r3, #2
 800a010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a012:	e002      	b.n	800a01a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a014:	f06f 0301 	mvn.w	r3, #1
 800a018:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1af      	bne.n	8009f80 <osThreadFlagsWait+0x50>
 800a020:	e002      	b.n	800a028 <osThreadFlagsWait+0xf8>
            break;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <osThreadFlagsWait+0xf8>
            break;
 800a026:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3730      	adds	r7, #48	@ 0x30
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a03a:	f3ef 8305 	mrs	r3, IPSR
 800a03e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a040:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <osDelay+0x1c>
    stat = osErrorISR;
 800a046:	f06f 0305 	mvn.w	r3, #5
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e007      	b.n	800a05e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <osDelay+0x2c>
      vTaskDelay(ticks);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 ff31 	bl	800bec0 <vTaskDelay>
    }
  }

  return (stat);
 800a05e:	68fb      	ldr	r3, [r7, #12]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a074:	f3ef 8305 	mrs	r3, IPSR
 800a078:	60fb      	str	r3, [r7, #12]
  return(result);
 800a07a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d12d      	bne.n	800a0dc <osEventFlagsNew+0x74>
    mem = -1;
 800a080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a084:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d015      	beq.n	800a0b8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <osEventFlagsNew+0x3a>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b1f      	cmp	r3, #31
 800a09a:	d902      	bls.n	800a0a2 <osEventFlagsNew+0x3a>
        mem = 1;
 800a09c:	2301      	movs	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	e00c      	b.n	800a0bc <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d108      	bne.n	800a0bc <osEventFlagsNew+0x54>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <osEventFlagsNew+0x54>
          mem = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	613b      	str	r3, [r7, #16]
 800a0b6:	e001      	b.n	800a0bc <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d106      	bne.n	800a0d0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 faf6 	bl	800a6b8 <xEventGroupCreateStatic>
 800a0cc:	6178      	str	r0, [r7, #20]
 800a0ce:	e005      	b.n	800a0dc <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a0d6:	f000 fb28 	bl	800a72a <xEventGroupCreate>
 800a0da:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a0dc:	697b      	ldr	r3, [r7, #20]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <osEventFlagsSet+0x1c>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a102:	d303      	bcc.n	800a10c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800a104:	f06f 0303 	mvn.w	r3, #3
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	e028      	b.n	800a15e <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a10c:	f3ef 8305 	mrs	r3, IPSR
 800a110:	60fb      	str	r3, [r7, #12]
  return(result);
 800a112:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01d      	beq.n	800a154 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800a118:	2300      	movs	r3, #0
 800a11a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a11c:	f107 0308 	add.w	r3, r7, #8
 800a120:	461a      	mov	r2, r3
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6938      	ldr	r0, [r7, #16]
 800a126:	f000 fca9 	bl	800aa7c <xEventGroupSetBitsFromISR>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d103      	bne.n	800a138 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800a130:	f06f 0302 	mvn.w	r3, #2
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e012      	b.n	800a15e <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00d      	beq.n	800a15e <osEventFlagsSet+0x76>
 800a142:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <osEventFlagsSet+0x80>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	e004      	b.n	800a15e <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6938      	ldr	r0, [r7, #16]
 800a158:	f000 fbd4 	bl	800a904 <xEventGroupSetBits>
 800a15c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800a15e:	697b      	ldr	r3, [r7, #20]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08c      	sub	sp, #48	@ 0x30
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d003      	beq.n	800a18c <osEventFlagsWait+0x20>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a18a:	d303      	bcc.n	800a194 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800a18c:	f06f 0303 	mvn.w	r3, #3
 800a190:	61fb      	str	r3, [r7, #28]
 800a192:	e04b      	b.n	800a22c <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a194:	f3ef 8305 	mrs	r3, IPSR
 800a198:	617b      	str	r3, [r7, #20]
  return(result);
 800a19a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800a1a0:	f06f 0305 	mvn.w	r3, #5
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e041      	b.n	800a22c <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1b6:	e001      	b.n	800a1bc <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	623b      	str	r3, [r7, #32]
 800a1ca:	e001      	b.n	800a1d0 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	6a3a      	ldr	r2, [r7, #32]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	69b8      	ldr	r0, [r7, #24]
 800a1dc:	f000 fac0 	bl	800a760 <xEventGroupWaitBits>
 800a1e0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d010      	beq.n	800a20e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d019      	beq.n	800a22c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800a1fe:	f06f 0301 	mvn.w	r3, #1
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e012      	b.n	800a22c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a206:	f06f 0302 	mvn.w	r3, #2
 800a20a:	61fb      	str	r3, [r7, #28]
 800a20c:	e00e      	b.n	800a22c <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4013      	ands	r3, r2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d109      	bne.n	800a22c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800a21e:	f06f 0301 	mvn.w	r3, #1
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	e002      	b.n	800a22c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a226:	f06f 0302 	mvn.w	r3, #2
 800a22a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3728      	adds	r7, #40	@ 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a236:	b580      	push	{r7, lr}
 800a238:	b08a      	sub	sp, #40	@ 0x28
 800a23a:	af02      	add	r7, sp, #8
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a246:	f3ef 8305 	mrs	r3, IPSR
 800a24a:	613b      	str	r3, [r7, #16]
  return(result);
 800a24c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d175      	bne.n	800a33e <osSemaphoreNew+0x108>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d072      	beq.n	800a33e <osSemaphoreNew+0x108>
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d86e      	bhi.n	800a33e <osSemaphoreNew+0x108>
    mem = -1;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a264:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d015      	beq.n	800a298 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d006      	beq.n	800a282 <osSemaphoreNew+0x4c>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2b4f      	cmp	r3, #79	@ 0x4f
 800a27a:	d902      	bls.n	800a282 <osSemaphoreNew+0x4c>
        mem = 1;
 800a27c:	2301      	movs	r3, #1
 800a27e:	61bb      	str	r3, [r7, #24]
 800a280:	e00c      	b.n	800a29c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d108      	bne.n	800a29c <osSemaphoreNew+0x66>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d104      	bne.n	800a29c <osSemaphoreNew+0x66>
          mem = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	61bb      	str	r3, [r7, #24]
 800a296:	e001      	b.n	800a29c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2a2:	d04c      	beq.n	800a33e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d128      	bne.n	800a2fc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d10a      	bne.n	800a2c6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	9200      	str	r2, [sp, #0]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f000 fd0f 	bl	800ace0 <xQueueGenericCreateStatic>
 800a2c2:	61f8      	str	r0, [r7, #28]
 800a2c4:	e005      	b.n	800a2d2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a2c6:	2203      	movs	r2, #3
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	f000 fd85 	bl	800adda <xQueueGenericCreate>
 800a2d0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d022      	beq.n	800a31e <osSemaphoreNew+0xe8>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01f      	beq.n	800a31e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	69f8      	ldr	r0, [r7, #28]
 800a2e6:	f000 fe45 	bl	800af74 <xQueueGenericSend>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d016      	beq.n	800a31e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a2f0:	69f8      	ldr	r0, [r7, #28]
 800a2f2:	f001 fa53 	bl	800b79c <vQueueDelete>
            hSemaphore = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61fb      	str	r3, [r7, #28]
 800a2fa:	e010      	b.n	800a31e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d108      	bne.n	800a314 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	461a      	mov	r2, r3
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fdc3 	bl	800ae96 <xQueueCreateCountingSemaphoreStatic>
 800a310:	61f8      	str	r0, [r7, #28]
 800a312:	e004      	b.n	800a31e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 fdf6 	bl	800af08 <xQueueCreateCountingSemaphore>
 800a31c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00c      	beq.n	800a33e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	e001      	b.n	800a336 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a336:	6979      	ldr	r1, [r7, #20]
 800a338:	69f8      	ldr	r0, [r7, #28]
 800a33a:	f001 fb7b 	bl	800ba34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a33e:	69fb      	ldr	r3, [r7, #28]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3720      	adds	r7, #32
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d103      	bne.n	800a368 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a360:	f06f 0303 	mvn.w	r3, #3
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	e039      	b.n	800a3dc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a368:	f3ef 8305 	mrs	r3, IPSR
 800a36c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a36e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a370:	2b00      	cmp	r3, #0
 800a372:	d022      	beq.n	800a3ba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a37a:	f06f 0303 	mvn.w	r3, #3
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e02c      	b.n	800a3dc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a382:	2300      	movs	r3, #0
 800a384:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a386:	f107 0308 	add.w	r3, r7, #8
 800a38a:	461a      	mov	r2, r3
 800a38c:	2100      	movs	r1, #0
 800a38e:	6938      	ldr	r0, [r7, #16]
 800a390:	f001 f982 	bl	800b698 <xQueueReceiveFromISR>
 800a394:	4603      	mov	r3, r0
 800a396:	2b01      	cmp	r3, #1
 800a398:	d003      	beq.n	800a3a2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a39a:	f06f 0302 	mvn.w	r3, #2
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e01c      	b.n	800a3dc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d019      	beq.n	800a3dc <osSemaphoreAcquire+0x94>
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e8 <osSemaphoreAcquire+0xa0>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	e010      	b.n	800a3dc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6938      	ldr	r0, [r7, #16]
 800a3be:	f001 f85b 	bl	800b478 <xQueueSemaphoreTake>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d009      	beq.n	800a3dc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a3ce:	f06f 0301 	mvn.w	r3, #1
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e002      	b.n	800a3dc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a3d6:	f06f 0302 	mvn.w	r3, #2
 800a3da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a3dc:	697b      	ldr	r3, [r7, #20]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	e000ed04 	.word	0xe000ed04

0800a3ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b08a      	sub	sp, #40	@ 0x28
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3fc:	f3ef 8305 	mrs	r3, IPSR
 800a400:	613b      	str	r3, [r7, #16]
  return(result);
 800a402:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a404:	2b00      	cmp	r3, #0
 800a406:	d15f      	bne.n	800a4c8 <osMessageQueueNew+0xdc>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d05c      	beq.n	800a4c8 <osMessageQueueNew+0xdc>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d059      	beq.n	800a4c8 <osMessageQueueNew+0xdc>
    mem = -1;
 800a414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a418:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d029      	beq.n	800a474 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d012      	beq.n	800a44e <osMessageQueueNew+0x62>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	2b4f      	cmp	r3, #79	@ 0x4f
 800a42e:	d90e      	bls.n	800a44e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695a      	ldr	r2, [r3, #20]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	fb01 f303 	mul.w	r3, r1, r3
 800a444:	429a      	cmp	r2, r3
 800a446:	d302      	bcc.n	800a44e <osMessageQueueNew+0x62>
        mem = 1;
 800a448:	2301      	movs	r3, #1
 800a44a:	61bb      	str	r3, [r7, #24]
 800a44c:	e014      	b.n	800a478 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d110      	bne.n	800a478 <osMessageQueueNew+0x8c>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10c      	bne.n	800a478 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a462:	2b00      	cmp	r3, #0
 800a464:	d108      	bne.n	800a478 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d104      	bne.n	800a478 <osMessageQueueNew+0x8c>
          mem = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	61bb      	str	r3, [r7, #24]
 800a472:	e001      	b.n	800a478 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d10b      	bne.n	800a496 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	2100      	movs	r1, #0
 800a488:	9100      	str	r1, [sp, #0]
 800a48a:	68b9      	ldr	r1, [r7, #8]
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 fc27 	bl	800ace0 <xQueueGenericCreateStatic>
 800a492:	61f8      	str	r0, [r7, #28]
 800a494:	e008      	b.n	800a4a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a49c:	2200      	movs	r2, #0
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 fc9a 	bl	800adda <xQueueGenericCreate>
 800a4a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00c      	beq.n	800a4c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d003      	beq.n	800a4bc <osMessageQueueNew+0xd0>
        name = attr->name;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	e001      	b.n	800a4c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a4c0:	6979      	ldr	r1, [r7, #20]
 800a4c2:	69f8      	ldr	r0, [r7, #28]
 800a4c4:	f001 fab6 	bl	800ba34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a4c8:	69fb      	ldr	r3, [r7, #28]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4ec:	f3ef 8305 	mrs	r3, IPSR
 800a4f0:	617b      	str	r3, [r7, #20]
  return(result);
 800a4f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d028      	beq.n	800a54a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <osMessageQueuePut+0x36>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <osMessageQueuePut+0x36>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a50a:	f06f 0303 	mvn.w	r3, #3
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	e038      	b.n	800a584 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a512:	2300      	movs	r3, #0
 800a514:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a516:	f107 0210 	add.w	r2, r7, #16
 800a51a:	2300      	movs	r3, #0
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	69b8      	ldr	r0, [r7, #24]
 800a520:	f000 fe2a 	bl	800b178 <xQueueGenericSendFromISR>
 800a524:	4603      	mov	r3, r0
 800a526:	2b01      	cmp	r3, #1
 800a528:	d003      	beq.n	800a532 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a52a:	f06f 0302 	mvn.w	r3, #2
 800a52e:	61fb      	str	r3, [r7, #28]
 800a530:	e028      	b.n	800a584 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d025      	beq.n	800a584 <osMessageQueuePut+0xb0>
 800a538:	4b15      	ldr	r3, [pc, #84]	@ (800a590 <osMessageQueuePut+0xbc>)
 800a53a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	e01c      	b.n	800a584 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <osMessageQueuePut+0x82>
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a556:	f06f 0303 	mvn.w	r3, #3
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	e012      	b.n	800a584 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a55e:	2300      	movs	r3, #0
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	69b8      	ldr	r0, [r7, #24]
 800a566:	f000 fd05 	bl	800af74 <xQueueGenericSend>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d009      	beq.n	800a584 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a576:	f06f 0301 	mvn.w	r3, #1
 800a57a:	61fb      	str	r3, [r7, #28]
 800a57c:	e002      	b.n	800a584 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a57e:	f06f 0302 	mvn.w	r3, #2
 800a582:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a584:	69fb      	ldr	r3, [r7, #28]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3720      	adds	r7, #32
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5aa:	f3ef 8305 	mrs	r3, IPSR
 800a5ae:	617b      	str	r3, [r7, #20]
  return(result);
 800a5b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d028      	beq.n	800a608 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <osMessageQueueGet+0x34>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <osMessageQueueGet+0x34>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a5c8:	f06f 0303 	mvn.w	r3, #3
 800a5cc:	61fb      	str	r3, [r7, #28]
 800a5ce:	e037      	b.n	800a640 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a5d4:	f107 0310 	add.w	r3, r7, #16
 800a5d8:	461a      	mov	r2, r3
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	69b8      	ldr	r0, [r7, #24]
 800a5de:	f001 f85b 	bl	800b698 <xQueueReceiveFromISR>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d003      	beq.n	800a5f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a5e8:	f06f 0302 	mvn.w	r3, #2
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	e027      	b.n	800a640 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d024      	beq.n	800a640 <osMessageQueueGet+0xac>
 800a5f6:	4b15      	ldr	r3, [pc, #84]	@ (800a64c <osMessageQueueGet+0xb8>)
 800a5f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	e01b      	b.n	800a640 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <osMessageQueueGet+0x80>
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a614:	f06f 0303 	mvn.w	r3, #3
 800a618:	61fb      	str	r3, [r7, #28]
 800a61a:	e011      	b.n	800a640 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	69b8      	ldr	r0, [r7, #24]
 800a622:	f000 fe47 	bl	800b2b4 <xQueueReceive>
 800a626:	4603      	mov	r3, r0
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d009      	beq.n	800a640 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a632:	f06f 0301 	mvn.w	r3, #1
 800a636:	61fb      	str	r3, [r7, #28]
 800a638:	e002      	b.n	800a640 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a63a:	f06f 0302 	mvn.w	r3, #2
 800a63e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a640:	69fb      	ldr	r3, [r7, #28]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	e000ed04 	.word	0xe000ed04

0800a650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4a07      	ldr	r2, [pc, #28]	@ (800a67c <vApplicationGetIdleTaskMemory+0x2c>)
 800a660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4a06      	ldr	r2, [pc, #24]	@ (800a680 <vApplicationGetIdleTaskMemory+0x30>)
 800a666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2280      	movs	r2, #128	@ 0x80
 800a66c:	601a      	str	r2, [r3, #0]
}
 800a66e:	bf00      	nop
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	2000d108 	.word	0x2000d108
 800a680:	2000d1b0 	.word	0x2000d1b0

0800a684 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4a07      	ldr	r2, [pc, #28]	@ (800a6b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a694:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4a06      	ldr	r2, [pc, #24]	@ (800a6b4 <vApplicationGetTimerTaskMemory+0x30>)
 800a69a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a6a2:	601a      	str	r2, [r3, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	2000d3b0 	.word	0x2000d3b0
 800a6b4:	2000d458 	.word	0x2000d458

0800a6b8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10b      	bne.n	800a6de <xEventGroupCreateStatic+0x26>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	613b      	str	r3, [r7, #16]
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	e7fd      	b.n	800a6da <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a6de:	2320      	movs	r3, #32
 800a6e0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d00b      	beq.n	800a700 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	3304      	adds	r3, #4
 800a714:	4618      	mov	r0, r3
 800a716:	f000 f9c5 	bl	800aaa4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2201      	movs	r2, #1
 800a71e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a720:	697b      	ldr	r3, [r7, #20]
	}
 800a722:	4618      	mov	r0, r3
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a730:	2020      	movs	r0, #32
 800a732:	f003 fafb 	bl	800dd2c <pvPortMalloc>
 800a736:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00a      	beq.n	800a754 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f9ab 	bl	800aaa4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a754:	687b      	ldr	r3, [r7, #4]
	}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
	...

0800a760 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b090      	sub	sp, #64	@ 0x40
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a776:	2300      	movs	r3, #0
 800a778:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10b      	bne.n	800a798 <xEventGroupWaitBits+0x38>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	623b      	str	r3, [r7, #32]
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a79e:	d30b      	bcc.n	800a7b8 <xEventGroupWaitBits+0x58>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	61fb      	str	r3, [r7, #28]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <xEventGroupWaitBits+0x76>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	61bb      	str	r3, [r7, #24]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7d6:	f002 f8d7 	bl	800c988 <xTaskGetSchedulerState>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <xEventGroupWaitBits+0x86>
 800a7e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <xEventGroupWaitBits+0x8a>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e000      	b.n	800a7ec <xEventGroupWaitBits+0x8c>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10b      	bne.n	800a808 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	617b      	str	r3, [r7, #20]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800a808:	f001 fc00 	bl	800c00c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	68b9      	ldr	r1, [r7, #8]
 800a816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a818:	f000 f90d 	bl	800aa36 <prvTestWaitCondition>
 800a81c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800a81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00e      	beq.n	800a842 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d028      	beq.n	800a884 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	43db      	mvns	r3, r3
 800a83a:	401a      	ands	r2, r3
 800a83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e020      	b.n	800a884 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800a84c:	2301      	movs	r3, #1
 800a84e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a850:	e018      	b.n	800a884 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d003      	beq.n	800a860 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a85e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a868:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a86c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a870:	1d18      	adds	r0, r3, #4
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a876:	4313      	orrs	r3, r2
 800a878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a87a:	4619      	mov	r1, r3
 800a87c:	f001 fdc8 	bl	800c410 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a884:	f001 fbd0 	bl	800c028 <xTaskResumeAll>
 800a888:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a88a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d031      	beq.n	800a8f4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	2b00      	cmp	r3, #0
 800a894:	d107      	bne.n	800a8a6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800a896:	4b1a      	ldr	r3, [pc, #104]	@ (800a900 <xEventGroupWaitBits+0x1a0>)
 800a898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a8a6:	f002 f9e9 	bl	800cc7c <uxTaskResetEventItemValue>
 800a8aa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d11a      	bne.n	800a8ec <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800a8b6:	f003 f917 	bl	800dae8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a8c6:	f000 f8b6 	bl	800aa36 <prvTestWaitCondition>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d009      	beq.n	800a8e4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d006      	beq.n	800a8e4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	43db      	mvns	r3, r3
 800a8de:	401a      	ands	r2, r3
 800a8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800a8e8:	f003 f930 	bl	800db4c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3740      	adds	r7, #64	@ 0x40
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08e      	sub	sp, #56	@ 0x38
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a90e:	2300      	movs	r3, #0
 800a910:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <xEventGroupSetBits+0x34>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	613b      	str	r3, [r7, #16]
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a93e:	d30b      	bcc.n	800a958 <xEventGroupSetBits+0x54>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	60fb      	str	r3, [r7, #12]
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	3304      	adds	r3, #4
 800a95c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	3308      	adds	r3, #8
 800a962:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a964:	f001 fb52 	bl	800c00c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	431a      	orrs	r2, r3
 800a976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a978:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a97a:	e03c      	b.n	800a9f6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a988:	2300      	movs	r3, #0
 800a98a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a992:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a99a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d108      	bne.n	800a9b8 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9b6:	e008      	b.n	800a9ca <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	69ba      	ldr	r2, [r7, #24]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d101      	bne.n	800a9ca <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d010      	beq.n	800a9f2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a9ee:	f001 fddd 	bl	800c5ac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800a9f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d1be      	bne.n	800a97c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa04:	43db      	mvns	r3, r3
 800aa06:	401a      	ands	r2, r3
 800aa08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800aa0c:	f001 fb0c 	bl	800c028 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	681b      	ldr	r3, [r3, #0]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3738      	adds	r7, #56	@ 0x38
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff6b 	bl	800a904 <xEventGroupSetBits>
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800aa36:	b480      	push	{r7}
 800aa38:	b087      	sub	sp, #28
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d107      	bne.n	800aa5c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	4013      	ands	r3, r2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800aa56:	2301      	movs	r3, #1
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e007      	b.n	800aa6c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	4013      	ands	r3, r2
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d101      	bne.n	800aa6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800aa6c:	697b      	ldr	r3, [r7, #20]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	371c      	adds	r7, #28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
	...

0800aa7c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	68f9      	ldr	r1, [r7, #12]
 800aa8e:	4804      	ldr	r0, [pc, #16]	@ (800aaa0 <xEventGroupSetBitsFromISR+0x24>)
 800aa90:	f002 fed6 	bl	800d840 <xTimerPendFunctionCallFromISR>
 800aa94:	6178      	str	r0, [r7, #20]

		return xReturn;
 800aa96:	697b      	ldr	r3, [r7, #20]
	}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	0800aa1d 	.word	0x0800aa1d

0800aaa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f103 0208 	add.w	r2, r3, #8
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aabc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f103 0208 	add.w	r2, r3, #8
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f103 0208 	add.w	r2, r3, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	689a      	ldr	r2, [r3, #8]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
}
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab5c:	d103      	bne.n	800ab66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e00c      	b.n	800ab80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	e002      	b.n	800ab74 <vListInsert+0x2e>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d2f6      	bcs.n	800ab6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	601a      	str	r2, [r3, #0]
}
 800abac:	bf00      	nop
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	6892      	ldr	r2, [r2, #8]
 800abce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6852      	ldr	r2, [r2, #4]
 800abd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d103      	bne.n	800abec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	1e5a      	subs	r2, r3, #1
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10b      	bne.n	800ac38 <xQueueGenericReset+0x2c>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	60bb      	str	r3, [r7, #8]
}
 800ac32:	bf00      	nop
 800ac34:	bf00      	nop
 800ac36:	e7fd      	b.n	800ac34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac38:	f002 ff56 	bl	800dae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac44:	68f9      	ldr	r1, [r7, #12]
 800ac46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac48:	fb01 f303 	mul.w	r3, r1, r3
 800ac4c:	441a      	add	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	68f9      	ldr	r1, [r7, #12]
 800ac6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac6e:	fb01 f303 	mul.w	r3, r1, r3
 800ac72:	441a      	add	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	22ff      	movs	r2, #255	@ 0xff
 800ac7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	22ff      	movs	r2, #255	@ 0xff
 800ac84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d114      	bne.n	800acb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d01a      	beq.n	800accc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3310      	adds	r3, #16
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 fc22 	bl	800c4e4 <xTaskRemoveFromEventList>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d012      	beq.n	800accc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aca6:	4b0d      	ldr	r3, [pc, #52]	@ (800acdc <xQueueGenericReset+0xd0>)
 800aca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	e009      	b.n	800accc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3310      	adds	r3, #16
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fef1 	bl	800aaa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3324      	adds	r3, #36	@ 0x24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff feec 	bl	800aaa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800accc:	f002 ff3e 	bl	800db4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acd0:	2301      	movs	r3, #1
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	@ 0x38
 800ace4:	af02      	add	r7, sp, #8
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10b      	bne.n	800ad0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	e7fd      	b.n	800ad08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10b      	bne.n	800ad2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
 800ad28:	e7fd      	b.n	800ad26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <xQueueGenericCreateStatic+0x56>
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <xQueueGenericCreateStatic+0x5a>
 800ad36:	2301      	movs	r3, #1
 800ad38:	e000      	b.n	800ad3c <xQueueGenericCreateStatic+0x5c>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10b      	bne.n	800ad58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	623b      	str	r3, [r7, #32]
}
 800ad52:	bf00      	nop
 800ad54:	bf00      	nop
 800ad56:	e7fd      	b.n	800ad54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <xQueueGenericCreateStatic+0x84>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <xQueueGenericCreateStatic+0x88>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <xQueueGenericCreateStatic+0x8a>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	61fb      	str	r3, [r7, #28]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad86:	2350      	movs	r3, #80	@ 0x50
 800ad88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b50      	cmp	r3, #80	@ 0x50
 800ad8e:	d00b      	beq.n	800ada8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	61bb      	str	r3, [r7, #24]
}
 800ada2:	bf00      	nop
 800ada4:	bf00      	nop
 800ada6:	e7fd      	b.n	800ada4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ada8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800adae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00d      	beq.n	800add0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	4613      	mov	r3, r2
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f000 f840 	bl	800ae50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800add0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800add2:	4618      	mov	r0, r3
 800add4:	3730      	adds	r7, #48	@ 0x30
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800adda:	b580      	push	{r7, lr}
 800addc:	b08a      	sub	sp, #40	@ 0x28
 800adde:	af02      	add	r7, sp, #8
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	4613      	mov	r3, r2
 800ade6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10b      	bne.n	800ae06 <xQueueGenericCreate+0x2c>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	613b      	str	r3, [r7, #16]
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	e7fd      	b.n	800ae02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	3350      	adds	r3, #80	@ 0x50
 800ae14:	4618      	mov	r0, r3
 800ae16:	f002 ff89 	bl	800dd2c <pvPortMalloc>
 800ae1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d011      	beq.n	800ae46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	3350      	adds	r3, #80	@ 0x50
 800ae2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f805 	bl	800ae50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae46:	69bb      	ldr	r3, [r7, #24]
	}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d103      	bne.n	800ae6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e002      	b.n	800ae72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae7e:	2101      	movs	r1, #1
 800ae80:	69b8      	ldr	r0, [r7, #24]
 800ae82:	f7ff fec3 	bl	800ac0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b08a      	sub	sp, #40	@ 0x28
 800ae9a:	af02      	add	r7, sp, #8
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10b      	bne.n	800aec0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	61bb      	str	r3, [r7, #24]
}
 800aeba:	bf00      	nop
 800aebc:	bf00      	nop
 800aebe:	e7fd      	b.n	800aebc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d90b      	bls.n	800aee0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	617b      	str	r3, [r7, #20]
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	e7fd      	b.n	800aedc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aee0:	2302      	movs	r3, #2
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fef8 	bl	800ace0 <xQueueGenericCreateStatic>
 800aef0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aefe:	69fb      	ldr	r3, [r7, #28]
	}
 800af00:	4618      	mov	r0, r3
 800af02:	3720      	adds	r7, #32
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10b      	bne.n	800af30 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	613b      	str	r3, [r7, #16]
}
 800af2a:	bf00      	nop
 800af2c:	bf00      	nop
 800af2e:	e7fd      	b.n	800af2c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	429a      	cmp	r2, r3
 800af36:	d90b      	bls.n	800af50 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60fb      	str	r3, [r7, #12]
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	e7fd      	b.n	800af4c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af50:	2202      	movs	r2, #2
 800af52:	2100      	movs	r1, #0
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff ff40 	bl	800adda <xQueueGenericCreate>
 800af5a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d002      	beq.n	800af68 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800af68:	697b      	ldr	r3, [r7, #20]
	}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08e      	sub	sp, #56	@ 0x38
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af82:	2300      	movs	r3, #0
 800af84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10b      	bne.n	800afa8 <xQueueGenericSend+0x34>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <xQueueGenericSend+0x42>
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <xQueueGenericSend+0x46>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e000      	b.n	800afbc <xQueueGenericSend+0x48>
 800afba:	2300      	movs	r3, #0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10b      	bne.n	800afd8 <xQueueGenericSend+0x64>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afd2:	bf00      	nop
 800afd4:	bf00      	nop
 800afd6:	e7fd      	b.n	800afd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d103      	bne.n	800afe6 <xQueueGenericSend+0x72>
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d101      	bne.n	800afea <xQueueGenericSend+0x76>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e000      	b.n	800afec <xQueueGenericSend+0x78>
 800afea:	2300      	movs	r3, #0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10b      	bne.n	800b008 <xQueueGenericSend+0x94>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	623b      	str	r3, [r7, #32]
}
 800b002:	bf00      	nop
 800b004:	bf00      	nop
 800b006:	e7fd      	b.n	800b004 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b008:	f001 fcbe 	bl	800c988 <xTaskGetSchedulerState>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d102      	bne.n	800b018 <xQueueGenericSend+0xa4>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <xQueueGenericSend+0xa8>
 800b018:	2301      	movs	r3, #1
 800b01a:	e000      	b.n	800b01e <xQueueGenericSend+0xaa>
 800b01c:	2300      	movs	r3, #0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10b      	bne.n	800b03a <xQueueGenericSend+0xc6>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	61fb      	str	r3, [r7, #28]
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	e7fd      	b.n	800b036 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b03a:	f002 fd55 	bl	800dae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b046:	429a      	cmp	r2, r3
 800b048:	d302      	bcc.n	800b050 <xQueueGenericSend+0xdc>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d129      	bne.n	800b0a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	68b9      	ldr	r1, [r7, #8]
 800b054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b056:	f000 fbdd 	bl	800b814 <prvCopyDataToQueue>
 800b05a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b060:	2b00      	cmp	r3, #0
 800b062:	d010      	beq.n	800b086 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	3324      	adds	r3, #36	@ 0x24
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 fa3b 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d013      	beq.n	800b09c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b074:	4b3f      	ldr	r3, [pc, #252]	@ (800b174 <xQueueGenericSend+0x200>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	e00a      	b.n	800b09c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d007      	beq.n	800b09c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b08c:	4b39      	ldr	r3, [pc, #228]	@ (800b174 <xQueueGenericSend+0x200>)
 800b08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b09c:	f002 fd56 	bl	800db4c <vPortExitCritical>
				return pdPASS;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e063      	b.n	800b16c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d103      	bne.n	800b0b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0aa:	f002 fd4f 	bl	800db4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e05c      	b.n	800b16c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d106      	bne.n	800b0c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0b8:	f107 0314 	add.w	r3, r7, #20
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f001 fb01 	bl	800c6c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0c6:	f002 fd41 	bl	800db4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0ca:	f000 ff9f 	bl	800c00c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0ce:	f002 fd0b 	bl	800dae8 <vPortEnterCritical>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0de:	d103      	bne.n	800b0e8 <xQueueGenericSend+0x174>
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0ee:	b25b      	sxtb	r3, r3
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0f4:	d103      	bne.n	800b0fe <xQueueGenericSend+0x18a>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0fe:	f002 fd25 	bl	800db4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b102:	1d3a      	adds	r2, r7, #4
 800b104:	f107 0314 	add.w	r3, r7, #20
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f001 faf0 	bl	800c6f0 <xTaskCheckForTimeOut>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d124      	bne.n	800b160 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b116:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b118:	f000 fc74 	bl	800ba04 <prvIsQueueFull>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d018      	beq.n	800b154 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	3310      	adds	r3, #16
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f001 f94a 	bl	800c3c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b132:	f000 fbff 	bl	800b934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b136:	f000 ff77 	bl	800c028 <xTaskResumeAll>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f47f af7c 	bne.w	800b03a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b142:	4b0c      	ldr	r3, [pc, #48]	@ (800b174 <xQueueGenericSend+0x200>)
 800b144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	e772      	b.n	800b03a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b156:	f000 fbed 	bl	800b934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b15a:	f000 ff65 	bl	800c028 <xTaskResumeAll>
 800b15e:	e76c      	b.n	800b03a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b162:	f000 fbe7 	bl	800b934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b166:	f000 ff5f 	bl	800c028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b16a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3738      	adds	r7, #56	@ 0x38
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	e000ed04 	.word	0xe000ed04

0800b178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b090      	sub	sp, #64	@ 0x40
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10b      	bne.n	800b1a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1a2:	bf00      	nop
 800b1a4:	bf00      	nop
 800b1a6:	e7fd      	b.n	800b1a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <xQueueGenericSendFromISR+0x3e>
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <xQueueGenericSendFromISR+0x42>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e000      	b.n	800b1bc <xQueueGenericSendFromISR+0x44>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10b      	bne.n	800b1d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d103      	bne.n	800b1e6 <xQueueGenericSendFromISR+0x6e>
 800b1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d101      	bne.n	800b1ea <xQueueGenericSendFromISR+0x72>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e000      	b.n	800b1ec <xQueueGenericSendFromISR+0x74>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10b      	bne.n	800b208 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	623b      	str	r3, [r7, #32]
}
 800b202:	bf00      	nop
 800b204:	bf00      	nop
 800b206:	e7fd      	b.n	800b204 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b208:	f002 fd4e 	bl	800dca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b20c:	f3ef 8211 	mrs	r2, BASEPRI
 800b210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	61fa      	str	r2, [r7, #28]
 800b222:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b224:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b226:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b230:	429a      	cmp	r2, r3
 800b232:	d302      	bcc.n	800b23a <xQueueGenericSendFromISR+0xc2>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d12f      	bne.n	800b29a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b240:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b248:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b250:	f000 fae0 	bl	800b814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b254:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b25c:	d112      	bne.n	800b284 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b262:	2b00      	cmp	r3, #0
 800b264:	d016      	beq.n	800b294 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	3324      	adds	r3, #36	@ 0x24
 800b26a:	4618      	mov	r0, r3
 800b26c:	f001 f93a 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00e      	beq.n	800b294 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	e007      	b.n	800b294 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b284:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b288:	3301      	adds	r3, #1
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	b25a      	sxtb	r2, r3
 800b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b294:	2301      	movs	r3, #1
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b298:	e001      	b.n	800b29e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3740      	adds	r7, #64	@ 0x40
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08c      	sub	sp, #48	@ 0x30
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <xQueueReceive+0x32>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	623b      	str	r3, [r7, #32]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d103      	bne.n	800b2f4 <xQueueReceive+0x40>
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <xQueueReceive+0x44>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <xQueueReceive+0x46>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10b      	bne.n	800b316 <xQueueReceive+0x62>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	61fb      	str	r3, [r7, #28]
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	e7fd      	b.n	800b312 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b316:	f001 fb37 	bl	800c988 <xTaskGetSchedulerState>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d102      	bne.n	800b326 <xQueueReceive+0x72>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <xQueueReceive+0x76>
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <xQueueReceive+0x78>
 800b32a:	2300      	movs	r3, #0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <xQueueReceive+0x94>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	61bb      	str	r3, [r7, #24]
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	e7fd      	b.n	800b344 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b348:	f002 fbce 	bl	800dae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	2b00      	cmp	r3, #0
 800b356:	d01f      	beq.n	800b398 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b35c:	f000 fac4 	bl	800b8e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	1e5a      	subs	r2, r3, #1
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00f      	beq.n	800b390 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b372:	3310      	adds	r3, #16
 800b374:	4618      	mov	r0, r3
 800b376:	f001 f8b5 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d007      	beq.n	800b390 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b380:	4b3c      	ldr	r3, [pc, #240]	@ (800b474 <xQueueReceive+0x1c0>)
 800b382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b390:	f002 fbdc 	bl	800db4c <vPortExitCritical>
				return pdPASS;
 800b394:	2301      	movs	r3, #1
 800b396:	e069      	b.n	800b46c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d103      	bne.n	800b3a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b39e:	f002 fbd5 	bl	800db4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	e062      	b.n	800b46c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d106      	bne.n	800b3ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3ac:	f107 0310 	add.w	r3, r7, #16
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f001 f987 	bl	800c6c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ba:	f002 fbc7 	bl	800db4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3be:	f000 fe25 	bl	800c00c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3c2:	f002 fb91 	bl	800dae8 <vPortEnterCritical>
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3cc:	b25b      	sxtb	r3, r3
 800b3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3d2:	d103      	bne.n	800b3dc <xQueueReceive+0x128>
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3e2:	b25b      	sxtb	r3, r3
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e8:	d103      	bne.n	800b3f2 <xQueueReceive+0x13e>
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3f2:	f002 fbab 	bl	800db4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3f6:	1d3a      	adds	r2, r7, #4
 800b3f8:	f107 0310 	add.w	r3, r7, #16
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f001 f976 	bl	800c6f0 <xTaskCheckForTimeOut>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d123      	bne.n	800b452 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b40a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b40c:	f000 fae4 	bl	800b9d8 <prvIsQueueEmpty>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d017      	beq.n	800b446 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b418:	3324      	adds	r3, #36	@ 0x24
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	4611      	mov	r1, r2
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 ffd0 	bl	800c3c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b426:	f000 fa85 	bl	800b934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b42a:	f000 fdfd 	bl	800c028 <xTaskResumeAll>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d189      	bne.n	800b348 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b434:	4b0f      	ldr	r3, [pc, #60]	@ (800b474 <xQueueReceive+0x1c0>)
 800b436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	e780      	b.n	800b348 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b448:	f000 fa74 	bl	800b934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b44c:	f000 fdec 	bl	800c028 <xTaskResumeAll>
 800b450:	e77a      	b.n	800b348 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b454:	f000 fa6e 	bl	800b934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b458:	f000 fde6 	bl	800c028 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b45e:	f000 fabb 	bl	800b9d8 <prvIsQueueEmpty>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	f43f af6f 	beq.w	800b348 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b46a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3730      	adds	r7, #48	@ 0x30
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08e      	sub	sp, #56	@ 0x38
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10b      	bne.n	800b4ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	623b      	str	r3, [r7, #32]
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	e7fd      	b.n	800b4a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	61fb      	str	r3, [r7, #28]
}
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	e7fd      	b.n	800b4c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4cc:	f001 fa5c 	bl	800c988 <xTaskGetSchedulerState>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <xQueueSemaphoreTake+0x64>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <xQueueSemaphoreTake+0x68>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <xQueueSemaphoreTake+0x6a>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	61bb      	str	r3, [r7, #24]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4fe:	f002 faf3 	bl	800dae8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b506:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d024      	beq.n	800b558 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b510:	1e5a      	subs	r2, r3, #1
 800b512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b514:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b51e:	f001 fbc5 	bl	800ccac <pvTaskIncrementMutexHeldCount>
 800b522:	4602      	mov	r2, r0
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00f      	beq.n	800b550 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b532:	3310      	adds	r3, #16
 800b534:	4618      	mov	r0, r3
 800b536:	f000 ffd5 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d007      	beq.n	800b550 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b540:	4b54      	ldr	r3, [pc, #336]	@ (800b694 <xQueueSemaphoreTake+0x21c>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b550:	f002 fafc 	bl	800db4c <vPortExitCritical>
				return pdPASS;
 800b554:	2301      	movs	r3, #1
 800b556:	e098      	b.n	800b68a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d112      	bne.n	800b584 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00b      	beq.n	800b57c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	617b      	str	r3, [r7, #20]
}
 800b576:	bf00      	nop
 800b578:	bf00      	nop
 800b57a:	e7fd      	b.n	800b578 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b57c:	f002 fae6 	bl	800db4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b580:	2300      	movs	r3, #0
 800b582:	e082      	b.n	800b68a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b586:	2b00      	cmp	r3, #0
 800b588:	d106      	bne.n	800b598 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 f898 	bl	800c6c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b594:	2301      	movs	r3, #1
 800b596:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b598:	f002 fad8 	bl	800db4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b59c:	f000 fd36 	bl	800c00c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5a0:	f002 faa2 	bl	800dae8 <vPortEnterCritical>
 800b5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5aa:	b25b      	sxtb	r3, r3
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5b0:	d103      	bne.n	800b5ba <xQueueSemaphoreTake+0x142>
 800b5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5c0:	b25b      	sxtb	r3, r3
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5c6:	d103      	bne.n	800b5d0 <xQueueSemaphoreTake+0x158>
 800b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5d0:	f002 fabc 	bl	800db4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5d4:	463a      	mov	r2, r7
 800b5d6:	f107 030c 	add.w	r3, r7, #12
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f001 f887 	bl	800c6f0 <xTaskCheckForTimeOut>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d132      	bne.n	800b64e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5ea:	f000 f9f5 	bl	800b9d8 <prvIsQueueEmpty>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d026      	beq.n	800b642 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d109      	bne.n	800b610 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b5fc:	f002 fa74 	bl	800dae8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	4618      	mov	r0, r3
 800b606:	f001 f9dd 	bl	800c9c4 <xTaskPriorityInherit>
 800b60a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b60c:	f002 fa9e 	bl	800db4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b612:	3324      	adds	r3, #36	@ 0x24
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	4611      	mov	r1, r2
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 fed3 	bl	800c3c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b61e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b620:	f000 f988 	bl	800b934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b624:	f000 fd00 	bl	800c028 <xTaskResumeAll>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f47f af67 	bne.w	800b4fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b630:	4b18      	ldr	r3, [pc, #96]	@ (800b694 <xQueueSemaphoreTake+0x21c>)
 800b632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	e75d      	b.n	800b4fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b642:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b644:	f000 f976 	bl	800b934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b648:	f000 fcee 	bl	800c028 <xTaskResumeAll>
 800b64c:	e757      	b.n	800b4fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b64e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b650:	f000 f970 	bl	800b934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b654:	f000 fce8 	bl	800c028 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b658:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b65a:	f000 f9bd 	bl	800b9d8 <prvIsQueueEmpty>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	f43f af4c 	beq.w	800b4fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00d      	beq.n	800b688 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b66c:	f002 fa3c 	bl	800dae8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b670:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b672:	f000 f8b7 	bl	800b7e4 <prvGetDisinheritPriorityAfterTimeout>
 800b676:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 fa78 	bl	800cb74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b684:	f002 fa62 	bl	800db4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3738      	adds	r7, #56	@ 0x38
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08e      	sub	sp, #56	@ 0x38
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	623b      	str	r3, [r7, #32]
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	e7fd      	b.n	800b6c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d103      	bne.n	800b6d4 <xQueueReceiveFromISR+0x3c>
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <xQueueReceiveFromISR+0x40>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e000      	b.n	800b6da <xQueueReceiveFromISR+0x42>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10b      	bne.n	800b6f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	61fb      	str	r3, [r7, #28]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6f6:	f002 fad7 	bl	800dca8 <vPortValidateInterruptPriority>
	__asm volatile
 800b6fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	61ba      	str	r2, [r7, #24]
 800b710:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b712:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b714:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b71a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d02f      	beq.n	800b782 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b730:	f000 f8da 	bl	800b8e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b736:	1e5a      	subs	r2, r3, #1
 800b738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b73c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b744:	d112      	bne.n	800b76c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d016      	beq.n	800b77c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b750:	3310      	adds	r3, #16
 800b752:	4618      	mov	r0, r3
 800b754:	f000 fec6 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00e      	beq.n	800b77c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00b      	beq.n	800b77c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	e007      	b.n	800b77c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b76c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b770:	3301      	adds	r3, #1
 800b772:	b2db      	uxtb	r3, r3
 800b774:	b25a      	sxtb	r2, r3
 800b776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b77c:	2301      	movs	r3, #1
 800b77e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b780:	e001      	b.n	800b786 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b782:	2300      	movs	r3, #0
 800b784:	637b      	str	r3, [r7, #52]	@ 0x34
 800b786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b788:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f383 8811 	msr	BASEPRI, r3
}
 800b790:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b794:	4618      	mov	r0, r3
 800b796:	3738      	adds	r7, #56	@ 0x38
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10b      	bne.n	800b7c6 <vQueueDelete+0x2a>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	60bb      	str	r3, [r7, #8]
}
 800b7c0:	bf00      	nop
 800b7c2:	bf00      	nop
 800b7c4:	e7fd      	b.n	800b7c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 f95e 	bl	800ba88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d102      	bne.n	800b7dc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f002 fb76 	bl	800dec8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	e001      	b.n	800b806 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b806:	68fb      	ldr	r3, [r7, #12]
	}
 800b808:	4618      	mov	r0, r3
 800b80a:	3714      	adds	r7, #20
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b820:	2300      	movs	r3, #0
 800b822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10d      	bne.n	800b84e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d14d      	bne.n	800b8d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 f928 	bl	800ca94 <xTaskPriorityDisinherit>
 800b844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	609a      	str	r2, [r3, #8]
 800b84c:	e043      	b.n	800b8d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d119      	bne.n	800b888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6858      	ldr	r0, [r3, #4]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85c:	461a      	mov	r2, r3
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	f012 fb6f 	bl	801df42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b86c:	441a      	add	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d32b      	bcc.n	800b8d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	605a      	str	r2, [r3, #4]
 800b886:	e026      	b.n	800b8d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68d8      	ldr	r0, [r3, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b890:	461a      	mov	r2, r3
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	f012 fb55 	bl	801df42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8a0:	425b      	negs	r3, r3
 800b8a2:	441a      	add	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d207      	bcs.n	800b8c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8bc:	425b      	negs	r3, r3
 800b8be:	441a      	add	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d105      	bne.n	800b8d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	1c5a      	adds	r2, r3, #1
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b8de:	697b      	ldr	r3, [r7, #20]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d018      	beq.n	800b92c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b902:	441a      	add	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68da      	ldr	r2, [r3, #12]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	429a      	cmp	r2, r3
 800b912:	d303      	bcc.n	800b91c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	68d9      	ldr	r1, [r3, #12]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b924:	461a      	mov	r2, r3
 800b926:	6838      	ldr	r0, [r7, #0]
 800b928:	f012 fb0b 	bl	801df42 <memcpy>
	}
}
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b93c:	f002 f8d4 	bl	800dae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b948:	e011      	b.n	800b96e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d012      	beq.n	800b978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3324      	adds	r3, #36	@ 0x24
 800b956:	4618      	mov	r0, r3
 800b958:	f000 fdc4 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b962:	f000 ff29 	bl	800c7b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b966:	7bfb      	ldrb	r3, [r7, #15]
 800b968:	3b01      	subs	r3, #1
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b972:	2b00      	cmp	r3, #0
 800b974:	dce9      	bgt.n	800b94a <prvUnlockQueue+0x16>
 800b976:	e000      	b.n	800b97a <prvUnlockQueue+0x46>
					break;
 800b978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	22ff      	movs	r2, #255	@ 0xff
 800b97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b982:	f002 f8e3 	bl	800db4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b986:	f002 f8af 	bl	800dae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b992:	e011      	b.n	800b9b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d012      	beq.n	800b9c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	3310      	adds	r3, #16
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 fd9f 	bl	800c4e4 <xTaskRemoveFromEventList>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9ac:	f000 ff04 	bl	800c7b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	dce9      	bgt.n	800b994 <prvUnlockQueue+0x60>
 800b9c0:	e000      	b.n	800b9c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	22ff      	movs	r2, #255	@ 0xff
 800b9c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b9cc:	f002 f8be 	bl	800db4c <vPortExitCritical>
}
 800b9d0:	bf00      	nop
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9e0:	f002 f882 	bl	800dae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e001      	b.n	800b9f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9f6:	f002 f8a9 	bl	800db4c <vPortExitCritical>

	return xReturn;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba0c:	f002 f86c 	bl	800dae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d102      	bne.n	800ba22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	e001      	b.n	800ba26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba26:	f002 f891 	bl	800db4c <vPortExitCritical>

	return xReturn;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	e014      	b.n	800ba6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba44:	4a0f      	ldr	r2, [pc, #60]	@ (800ba84 <vQueueAddToRegistry+0x50>)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10b      	bne.n	800ba68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba50:	490c      	ldr	r1, [pc, #48]	@ (800ba84 <vQueueAddToRegistry+0x50>)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba84 <vQueueAddToRegistry+0x50>)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	4413      	add	r3, r2
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba66:	e006      	b.n	800ba76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b07      	cmp	r3, #7
 800ba72:	d9e7      	bls.n	800ba44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	2000d858 	.word	0x2000d858

0800ba88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e016      	b.n	800bac4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba96:	4a10      	ldr	r2, [pc, #64]	@ (800bad8 <vQueueUnregisterQueue+0x50>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	4413      	add	r3, r2
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d10b      	bne.n	800babe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800baa6:	4a0c      	ldr	r2, [pc, #48]	@ (800bad8 <vQueueUnregisterQueue+0x50>)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2100      	movs	r1, #0
 800baac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bab0:	4a09      	ldr	r2, [pc, #36]	@ (800bad8 <vQueueUnregisterQueue+0x50>)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	4413      	add	r3, r2
 800bab8:	2200      	movs	r2, #0
 800baba:	605a      	str	r2, [r3, #4]
				break;
 800babc:	e006      	b.n	800bacc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3301      	adds	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b07      	cmp	r3, #7
 800bac8:	d9e5      	bls.n	800ba96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800baca:	bf00      	nop
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	2000d858 	.word	0x2000d858

0800badc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800baec:	f001 fffc 	bl	800dae8 <vPortEnterCritical>
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800baf6:	b25b      	sxtb	r3, r3
 800baf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bafc:	d103      	bne.n	800bb06 <vQueueWaitForMessageRestricted+0x2a>
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb0c:	b25b      	sxtb	r3, r3
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb12:	d103      	bne.n	800bb1c <vQueueWaitForMessageRestricted+0x40>
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb1c:	f002 f816 	bl	800db4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	3324      	adds	r3, #36	@ 0x24
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fcab 	bl	800c48c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb36:	6978      	ldr	r0, [r7, #20]
 800bb38:	f7ff fefc 	bl	800b934 <prvUnlockQueue>
	}
 800bb3c:	bf00      	nop
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08e      	sub	sp, #56	@ 0x38
 800bb48:	af04      	add	r7, sp, #16
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10b      	bne.n	800bb70 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	623b      	str	r3, [r7, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	bf00      	nop
 800bb6e:	e7fd      	b.n	800bb6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10b      	bne.n	800bb8e <xTaskCreateStatic+0x4a>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	61fb      	str	r3, [r7, #28]
}
 800bb88:	bf00      	nop
 800bb8a:	bf00      	nop
 800bb8c:	e7fd      	b.n	800bb8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb8e:	23a8      	movs	r3, #168	@ 0xa8
 800bb90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2ba8      	cmp	r3, #168	@ 0xa8
 800bb96:	d00b      	beq.n	800bbb0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	61bb      	str	r3, [r7, #24]
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	e7fd      	b.n	800bbac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01e      	beq.n	800bbf6 <xTaskCreateStatic+0xb2>
 800bbb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d01b      	beq.n	800bbf6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbc6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbca:	2202      	movs	r2, #2
 800bbcc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	9303      	str	r3, [sp, #12]
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	9302      	str	r3, [sp, #8]
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	68b9      	ldr	r1, [r7, #8]
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 f851 	bl	800bc90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbf0:	f000 f8f6 	bl	800bde0 <prvAddNewTaskToReadyList>
 800bbf4:	e001      	b.n	800bbfa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbfa:	697b      	ldr	r3, [r7, #20]
	}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3728      	adds	r7, #40	@ 0x28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08c      	sub	sp, #48	@ 0x30
 800bc08:	af04      	add	r7, sp, #16
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	4613      	mov	r3, r2
 800bc12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc14:	88fb      	ldrh	r3, [r7, #6]
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f002 f887 	bl	800dd2c <pvPortMalloc>
 800bc1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00e      	beq.n	800bc44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc26:	20a8      	movs	r0, #168	@ 0xa8
 800bc28:	f002 f880 	bl	800dd2c <pvPortMalloc>
 800bc2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc3a:	e005      	b.n	800bc48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc3c:	6978      	ldr	r0, [r7, #20]
 800bc3e:	f002 f943 	bl	800dec8 <vPortFree>
 800bc42:	e001      	b.n	800bc48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d017      	beq.n	800bc7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	68b9      	ldr	r1, [r7, #8]
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 f80f 	bl	800bc90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc72:	69f8      	ldr	r0, [r7, #28]
 800bc74:	f000 f8b4 	bl	800bde0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	61bb      	str	r3, [r7, #24]
 800bc7c:	e002      	b.n	800bc84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc84:	69bb      	ldr	r3, [r7, #24]
	}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3720      	adds	r7, #32
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b088      	sub	sp, #32
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	461a      	mov	r2, r3
 800bca8:	21a5      	movs	r1, #165	@ 0xa5
 800bcaa:	f012 f819 	bl	801dce0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4413      	add	r3, r2
 800bcbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	f023 0307 	bic.w	r3, r3, #7
 800bcc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	f003 0307 	and.w	r3, r3, #7
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00b      	beq.n	800bcea <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	617b      	str	r3, [r7, #20]
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	e7fd      	b.n	800bce6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01f      	beq.n	800bd30 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	e012      	b.n	800bd1c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	7819      	ldrb	r1, [r3, #0]
 800bcfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	4413      	add	r3, r2
 800bd04:	3334      	adds	r3, #52	@ 0x34
 800bd06:	460a      	mov	r2, r1
 800bd08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	4413      	add	r3, r2
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d006      	beq.n	800bd24 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	61fb      	str	r3, [r7, #28]
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	2b0f      	cmp	r3, #15
 800bd20:	d9e9      	bls.n	800bcf6 <prvInitialiseNewTask+0x66>
 800bd22:	e000      	b.n	800bd26 <prvInitialiseNewTask+0x96>
			{
				break;
 800bd24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd2e:	e003      	b.n	800bd38 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3a:	2b37      	cmp	r3, #55	@ 0x37
 800bd3c:	d901      	bls.n	800bd42 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd3e:	2337      	movs	r3, #55	@ 0x37
 800bd40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd50:	2200      	movs	r2, #0
 800bd52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd56:	3304      	adds	r3, #4
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe fec3 	bl	800aae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	3318      	adds	r3, #24
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe febe 	bl	800aae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd80:	2200      	movs	r2, #0
 800bd82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd90:	3354      	adds	r3, #84	@ 0x54
 800bd92:	224c      	movs	r2, #76	@ 0x4c
 800bd94:	2100      	movs	r1, #0
 800bd96:	4618      	mov	r0, r3
 800bd98:	f011 ffa2 	bl	801dce0 <memset>
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9e:	4a0d      	ldr	r2, [pc, #52]	@ (800bdd4 <prvInitialiseNewTask+0x144>)
 800bda0:	659a      	str	r2, [r3, #88]	@ 0x58
 800bda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda4:	4a0c      	ldr	r2, [pc, #48]	@ (800bdd8 <prvInitialiseNewTask+0x148>)
 800bda6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdaa:	4a0c      	ldr	r2, [pc, #48]	@ (800bddc <prvInitialiseNewTask+0x14c>)
 800bdac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	68f9      	ldr	r1, [r7, #12]
 800bdb2:	69b8      	ldr	r0, [r7, #24]
 800bdb4:	f001 fd64 	bl	800d880 <pxPortInitialiseStack>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdca:	bf00      	nop
 800bdcc:	3720      	adds	r7, #32
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	2001a1b4 	.word	0x2001a1b4
 800bdd8:	2001a21c 	.word	0x2001a21c
 800bddc:	2001a284 	.word	0x2001a284

0800bde0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bde8:	f001 fe7e 	bl	800dae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdec:	4b2d      	ldr	r3, [pc, #180]	@ (800bea4 <prvAddNewTaskToReadyList+0xc4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	4a2c      	ldr	r2, [pc, #176]	@ (800bea4 <prvAddNewTaskToReadyList+0xc4>)
 800bdf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdf6:	4b2c      	ldr	r3, [pc, #176]	@ (800bea8 <prvAddNewTaskToReadyList+0xc8>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d109      	bne.n	800be12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdfe:	4a2a      	ldr	r2, [pc, #168]	@ (800bea8 <prvAddNewTaskToReadyList+0xc8>)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be04:	4b27      	ldr	r3, [pc, #156]	@ (800bea4 <prvAddNewTaskToReadyList+0xc4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d110      	bne.n	800be2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be0c:	f000 fcf8 	bl	800c800 <prvInitialiseTaskLists>
 800be10:	e00d      	b.n	800be2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be12:	4b26      	ldr	r3, [pc, #152]	@ (800beac <prvAddNewTaskToReadyList+0xcc>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be1a:	4b23      	ldr	r3, [pc, #140]	@ (800bea8 <prvAddNewTaskToReadyList+0xc8>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be24:	429a      	cmp	r2, r3
 800be26:	d802      	bhi.n	800be2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be28:	4a1f      	ldr	r2, [pc, #124]	@ (800bea8 <prvAddNewTaskToReadyList+0xc8>)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be2e:	4b20      	ldr	r3, [pc, #128]	@ (800beb0 <prvAddNewTaskToReadyList+0xd0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3301      	adds	r3, #1
 800be34:	4a1e      	ldr	r2, [pc, #120]	@ (800beb0 <prvAddNewTaskToReadyList+0xd0>)
 800be36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be38:	4b1d      	ldr	r3, [pc, #116]	@ (800beb0 <prvAddNewTaskToReadyList+0xd0>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be44:	4b1b      	ldr	r3, [pc, #108]	@ (800beb4 <prvAddNewTaskToReadyList+0xd4>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d903      	bls.n	800be54 <prvAddNewTaskToReadyList+0x74>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be50:	4a18      	ldr	r2, [pc, #96]	@ (800beb4 <prvAddNewTaskToReadyList+0xd4>)
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be58:	4613      	mov	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4413      	add	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4a15      	ldr	r2, [pc, #84]	@ (800beb8 <prvAddNewTaskToReadyList+0xd8>)
 800be62:	441a      	add	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3304      	adds	r3, #4
 800be68:	4619      	mov	r1, r3
 800be6a:	4610      	mov	r0, r2
 800be6c:	f7fe fe47 	bl	800aafe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be70:	f001 fe6c 	bl	800db4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be74:	4b0d      	ldr	r3, [pc, #52]	@ (800beac <prvAddNewTaskToReadyList+0xcc>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00e      	beq.n	800be9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bea8 <prvAddNewTaskToReadyList+0xc8>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be86:	429a      	cmp	r2, r3
 800be88:	d207      	bcs.n	800be9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be8a:	4b0c      	ldr	r3, [pc, #48]	@ (800bebc <prvAddNewTaskToReadyList+0xdc>)
 800be8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be9a:	bf00      	nop
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2000dd6c 	.word	0x2000dd6c
 800bea8:	2000d898 	.word	0x2000d898
 800beac:	2000dd78 	.word	0x2000dd78
 800beb0:	2000dd88 	.word	0x2000dd88
 800beb4:	2000dd74 	.word	0x2000dd74
 800beb8:	2000d89c 	.word	0x2000d89c
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d018      	beq.n	800bf04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bed2:	4b14      	ldr	r3, [pc, #80]	@ (800bf24 <vTaskDelay+0x64>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <vTaskDelay+0x32>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	60bb      	str	r3, [r7, #8]
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bef2:	f000 f88b 	bl	800c00c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bef6:	2100      	movs	r1, #0
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f001 f8f3 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800befe:	f000 f893 	bl	800c028 <xTaskResumeAll>
 800bf02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d107      	bne.n	800bf1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bf0a:	4b07      	ldr	r3, [pc, #28]	@ (800bf28 <vTaskDelay+0x68>)
 800bf0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf1a:	bf00      	nop
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2000dd94 	.word	0x2000dd94
 800bf28:	e000ed04 	.word	0xe000ed04

0800bf2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08a      	sub	sp, #40	@ 0x28
 800bf30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf3a:	463a      	mov	r2, r7
 800bf3c:	1d39      	adds	r1, r7, #4
 800bf3e:	f107 0308 	add.w	r3, r7, #8
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fb84 	bl	800a650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	9202      	str	r2, [sp, #8]
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	2300      	movs	r3, #0
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	2300      	movs	r3, #0
 800bf58:	460a      	mov	r2, r1
 800bf5a:	4924      	ldr	r1, [pc, #144]	@ (800bfec <vTaskStartScheduler+0xc0>)
 800bf5c:	4824      	ldr	r0, [pc, #144]	@ (800bff0 <vTaskStartScheduler+0xc4>)
 800bf5e:	f7ff fdf1 	bl	800bb44 <xTaskCreateStatic>
 800bf62:	4603      	mov	r3, r0
 800bf64:	4a23      	ldr	r2, [pc, #140]	@ (800bff4 <vTaskStartScheduler+0xc8>)
 800bf66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf68:	4b22      	ldr	r3, [pc, #136]	@ (800bff4 <vTaskStartScheduler+0xc8>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf70:	2301      	movs	r3, #1
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	e001      	b.n	800bf7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d102      	bne.n	800bf86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf80:	f001 f904 	bl	800d18c <xTimerCreateTimerTask>
 800bf84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d11b      	bne.n	800bfc4 <vTaskStartScheduler+0x98>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	613b      	str	r3, [r7, #16]
}
 800bf9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfa0:	4b15      	ldr	r3, [pc, #84]	@ (800bff8 <vTaskStartScheduler+0xcc>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3354      	adds	r3, #84	@ 0x54
 800bfa6:	4a15      	ldr	r2, [pc, #84]	@ (800bffc <vTaskStartScheduler+0xd0>)
 800bfa8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfaa:	4b15      	ldr	r3, [pc, #84]	@ (800c000 <vTaskStartScheduler+0xd4>)
 800bfac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfb2:	4b14      	ldr	r3, [pc, #80]	@ (800c004 <vTaskStartScheduler+0xd8>)
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfb8:	4b13      	ldr	r3, [pc, #76]	@ (800c008 <vTaskStartScheduler+0xdc>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfbe:	f001 fcef 	bl	800d9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfc2:	e00f      	b.n	800bfe4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfca:	d10b      	bne.n	800bfe4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	60fb      	str	r3, [r7, #12]
}
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	e7fd      	b.n	800bfe0 <vTaskStartScheduler+0xb4>
}
 800bfe4:	bf00      	nop
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	080200ac 	.word	0x080200ac
 800bff0:	0800c7d1 	.word	0x0800c7d1
 800bff4:	2000dd90 	.word	0x2000dd90
 800bff8:	2000d898 	.word	0x2000d898
 800bffc:	20001bf4 	.word	0x20001bf4
 800c000:	2000dd8c 	.word	0x2000dd8c
 800c004:	2000dd78 	.word	0x2000dd78
 800c008:	2000dd70 	.word	0x2000dd70

0800c00c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c00c:	b480      	push	{r7}
 800c00e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c010:	4b04      	ldr	r3, [pc, #16]	@ (800c024 <vTaskSuspendAll+0x18>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3301      	adds	r3, #1
 800c016:	4a03      	ldr	r2, [pc, #12]	@ (800c024 <vTaskSuspendAll+0x18>)
 800c018:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c01a:	bf00      	nop
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	2000dd94 	.word	0x2000dd94

0800c028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c032:	2300      	movs	r3, #0
 800c034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c036:	4b42      	ldr	r3, [pc, #264]	@ (800c140 <xTaskResumeAll+0x118>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10b      	bne.n	800c056 <xTaskResumeAll+0x2e>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	603b      	str	r3, [r7, #0]
}
 800c050:	bf00      	nop
 800c052:	bf00      	nop
 800c054:	e7fd      	b.n	800c052 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c056:	f001 fd47 	bl	800dae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c05a:	4b39      	ldr	r3, [pc, #228]	@ (800c140 <xTaskResumeAll+0x118>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3b01      	subs	r3, #1
 800c060:	4a37      	ldr	r2, [pc, #220]	@ (800c140 <xTaskResumeAll+0x118>)
 800c062:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c064:	4b36      	ldr	r3, [pc, #216]	@ (800c140 <xTaskResumeAll+0x118>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d162      	bne.n	800c132 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c06c:	4b35      	ldr	r3, [pc, #212]	@ (800c144 <xTaskResumeAll+0x11c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d05e      	beq.n	800c132 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c074:	e02f      	b.n	800c0d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c076:	4b34      	ldr	r3, [pc, #208]	@ (800c148 <xTaskResumeAll+0x120>)
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3318      	adds	r3, #24
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fd98 	bl	800abb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3304      	adds	r3, #4
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe fd93 	bl	800abb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c096:	4b2d      	ldr	r3, [pc, #180]	@ (800c14c <xTaskResumeAll+0x124>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d903      	bls.n	800c0a6 <xTaskResumeAll+0x7e>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c14c <xTaskResumeAll+0x124>)
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4a27      	ldr	r2, [pc, #156]	@ (800c150 <xTaskResumeAll+0x128>)
 800c0b4:	441a      	add	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4610      	mov	r0, r2
 800c0be:	f7fe fd1e 	bl	800aafe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0c6:	4b23      	ldr	r3, [pc, #140]	@ (800c154 <xTaskResumeAll+0x12c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d302      	bcc.n	800c0d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c0d0:	4b21      	ldr	r3, [pc, #132]	@ (800c158 <xTaskResumeAll+0x130>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0d6:	4b1c      	ldr	r3, [pc, #112]	@ (800c148 <xTaskResumeAll+0x120>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1cb      	bne.n	800c076 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0e4:	f000 fc30 	bl	800c948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800c15c <xTaskResumeAll+0x134>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d010      	beq.n	800c116 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0f4:	f000 f846 	bl	800c184 <xTaskIncrementTick>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c0fe:	4b16      	ldr	r3, [pc, #88]	@ (800c158 <xTaskResumeAll+0x130>)
 800c100:	2201      	movs	r2, #1
 800c102:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3b01      	subs	r3, #1
 800c108:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1f1      	bne.n	800c0f4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c110:	4b12      	ldr	r3, [pc, #72]	@ (800c15c <xTaskResumeAll+0x134>)
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c116:	4b10      	ldr	r3, [pc, #64]	@ (800c158 <xTaskResumeAll+0x130>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d009      	beq.n	800c132 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c11e:	2301      	movs	r3, #1
 800c120:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c122:	4b0f      	ldr	r3, [pc, #60]	@ (800c160 <xTaskResumeAll+0x138>)
 800c124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c132:	f001 fd0b 	bl	800db4c <vPortExitCritical>

	return xAlreadyYielded;
 800c136:	68bb      	ldr	r3, [r7, #8]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	2000dd94 	.word	0x2000dd94
 800c144:	2000dd6c 	.word	0x2000dd6c
 800c148:	2000dd2c 	.word	0x2000dd2c
 800c14c:	2000dd74 	.word	0x2000dd74
 800c150:	2000d89c 	.word	0x2000d89c
 800c154:	2000d898 	.word	0x2000d898
 800c158:	2000dd80 	.word	0x2000dd80
 800c15c:	2000dd7c 	.word	0x2000dd7c
 800c160:	e000ed04 	.word	0xe000ed04

0800c164 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c16a:	4b05      	ldr	r3, [pc, #20]	@ (800c180 <xTaskGetTickCount+0x1c>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c170:	687b      	ldr	r3, [r7, #4]
}
 800c172:	4618      	mov	r0, r3
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	2000dd70 	.word	0x2000dd70

0800c184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c18e:	4b4f      	ldr	r3, [pc, #316]	@ (800c2cc <xTaskIncrementTick+0x148>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f040 8090 	bne.w	800c2b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c198:	4b4d      	ldr	r3, [pc, #308]	@ (800c2d0 <xTaskIncrementTick+0x14c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3301      	adds	r3, #1
 800c19e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1a0:	4a4b      	ldr	r2, [pc, #300]	@ (800c2d0 <xTaskIncrementTick+0x14c>)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d121      	bne.n	800c1f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1ac:	4b49      	ldr	r3, [pc, #292]	@ (800c2d4 <xTaskIncrementTick+0x150>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00b      	beq.n	800c1ce <xTaskIncrementTick+0x4a>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	603b      	str	r3, [r7, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	e7fd      	b.n	800c1ca <xTaskIncrementTick+0x46>
 800c1ce:	4b41      	ldr	r3, [pc, #260]	@ (800c2d4 <xTaskIncrementTick+0x150>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	4b40      	ldr	r3, [pc, #256]	@ (800c2d8 <xTaskIncrementTick+0x154>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a3e      	ldr	r2, [pc, #248]	@ (800c2d4 <xTaskIncrementTick+0x150>)
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	4a3e      	ldr	r2, [pc, #248]	@ (800c2d8 <xTaskIncrementTick+0x154>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c2dc <xTaskIncrementTick+0x158>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	4a3c      	ldr	r2, [pc, #240]	@ (800c2dc <xTaskIncrementTick+0x158>)
 800c1ea:	6013      	str	r3, [r2, #0]
 800c1ec:	f000 fbac 	bl	800c948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1f0:	4b3b      	ldr	r3, [pc, #236]	@ (800c2e0 <xTaskIncrementTick+0x15c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d349      	bcc.n	800c28e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1fa:	4b36      	ldr	r3, [pc, #216]	@ (800c2d4 <xTaskIncrementTick+0x150>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d104      	bne.n	800c20e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c204:	4b36      	ldr	r3, [pc, #216]	@ (800c2e0 <xTaskIncrementTick+0x15c>)
 800c206:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c20a:	601a      	str	r2, [r3, #0]
					break;
 800c20c:	e03f      	b.n	800c28e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20e:	4b31      	ldr	r3, [pc, #196]	@ (800c2d4 <xTaskIncrementTick+0x150>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	429a      	cmp	r2, r3
 800c224:	d203      	bcs.n	800c22e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c226:	4a2e      	ldr	r2, [pc, #184]	@ (800c2e0 <xTaskIncrementTick+0x15c>)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c22c:	e02f      	b.n	800c28e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	3304      	adds	r3, #4
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe fcc0 	bl	800abb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d004      	beq.n	800c24a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	3318      	adds	r3, #24
 800c244:	4618      	mov	r0, r3
 800c246:	f7fe fcb7 	bl	800abb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c24e:	4b25      	ldr	r3, [pc, #148]	@ (800c2e4 <xTaskIncrementTick+0x160>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	429a      	cmp	r2, r3
 800c254:	d903      	bls.n	800c25e <xTaskIncrementTick+0xda>
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25a:	4a22      	ldr	r2, [pc, #136]	@ (800c2e4 <xTaskIncrementTick+0x160>)
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4a1f      	ldr	r2, [pc, #124]	@ (800c2e8 <xTaskIncrementTick+0x164>)
 800c26c:	441a      	add	r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	3304      	adds	r3, #4
 800c272:	4619      	mov	r1, r3
 800c274:	4610      	mov	r0, r2
 800c276:	f7fe fc42 	bl	800aafe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c27e:	4b1b      	ldr	r3, [pc, #108]	@ (800c2ec <xTaskIncrementTick+0x168>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c284:	429a      	cmp	r2, r3
 800c286:	d3b8      	bcc.n	800c1fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c288:	2301      	movs	r3, #1
 800c28a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c28c:	e7b5      	b.n	800c1fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c28e:	4b17      	ldr	r3, [pc, #92]	@ (800c2ec <xTaskIncrementTick+0x168>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c294:	4914      	ldr	r1, [pc, #80]	@ (800c2e8 <xTaskIncrementTick+0x164>)
 800c296:	4613      	mov	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	440b      	add	r3, r1
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d901      	bls.n	800c2aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2aa:	4b11      	ldr	r3, [pc, #68]	@ (800c2f0 <xTaskIncrementTick+0x16c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d007      	beq.n	800c2c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	617b      	str	r3, [r7, #20]
 800c2b6:	e004      	b.n	800c2c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c2f4 <xTaskIncrementTick+0x170>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	4a0d      	ldr	r2, [pc, #52]	@ (800c2f4 <xTaskIncrementTick+0x170>)
 800c2c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2c2:	697b      	ldr	r3, [r7, #20]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	2000dd94 	.word	0x2000dd94
 800c2d0:	2000dd70 	.word	0x2000dd70
 800c2d4:	2000dd24 	.word	0x2000dd24
 800c2d8:	2000dd28 	.word	0x2000dd28
 800c2dc:	2000dd84 	.word	0x2000dd84
 800c2e0:	2000dd8c 	.word	0x2000dd8c
 800c2e4:	2000dd74 	.word	0x2000dd74
 800c2e8:	2000d89c 	.word	0x2000d89c
 800c2ec:	2000d898 	.word	0x2000d898
 800c2f0:	2000dd80 	.word	0x2000dd80
 800c2f4:	2000dd7c 	.word	0x2000dd7c

0800c2f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2fe:	4b2b      	ldr	r3, [pc, #172]	@ (800c3ac <vTaskSwitchContext+0xb4>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c306:	4b2a      	ldr	r3, [pc, #168]	@ (800c3b0 <vTaskSwitchContext+0xb8>)
 800c308:	2201      	movs	r2, #1
 800c30a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c30c:	e047      	b.n	800c39e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c30e:	4b28      	ldr	r3, [pc, #160]	@ (800c3b0 <vTaskSwitchContext+0xb8>)
 800c310:	2200      	movs	r2, #0
 800c312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c314:	4b27      	ldr	r3, [pc, #156]	@ (800c3b4 <vTaskSwitchContext+0xbc>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	e011      	b.n	800c340 <vTaskSwitchContext+0x48>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10b      	bne.n	800c33a <vTaskSwitchContext+0x42>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	607b      	str	r3, [r7, #4]
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop
 800c338:	e7fd      	b.n	800c336 <vTaskSwitchContext+0x3e>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	491d      	ldr	r1, [pc, #116]	@ (800c3b8 <vTaskSwitchContext+0xc0>)
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4613      	mov	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0e3      	beq.n	800c31c <vTaskSwitchContext+0x24>
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4a16      	ldr	r2, [pc, #88]	@ (800c3b8 <vTaskSwitchContext+0xc0>)
 800c360:	4413      	add	r3, r2
 800c362:	60bb      	str	r3, [r7, #8]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	605a      	str	r2, [r3, #4]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	685a      	ldr	r2, [r3, #4]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	3308      	adds	r3, #8
 800c376:	429a      	cmp	r2, r3
 800c378:	d104      	bne.n	800c384 <vTaskSwitchContext+0x8c>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	685a      	ldr	r2, [r3, #4]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	605a      	str	r2, [r3, #4]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	4a0c      	ldr	r2, [pc, #48]	@ (800c3bc <vTaskSwitchContext+0xc4>)
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	4a09      	ldr	r2, [pc, #36]	@ (800c3b4 <vTaskSwitchContext+0xbc>)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c394:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <vTaskSwitchContext+0xc4>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3354      	adds	r3, #84	@ 0x54
 800c39a:	4a09      	ldr	r2, [pc, #36]	@ (800c3c0 <vTaskSwitchContext+0xc8>)
 800c39c:	6013      	str	r3, [r2, #0]
}
 800c39e:	bf00      	nop
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	2000dd94 	.word	0x2000dd94
 800c3b0:	2000dd80 	.word	0x2000dd80
 800c3b4:	2000dd74 	.word	0x2000dd74
 800c3b8:	2000d89c 	.word	0x2000d89c
 800c3bc:	2000d898 	.word	0x2000d898
 800c3c0:	20001bf4 	.word	0x20001bf4

0800c3c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10b      	bne.n	800c3ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	60fb      	str	r3, [r7, #12]
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	e7fd      	b.n	800c3e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3ec:	4b07      	ldr	r3, [pc, #28]	@ (800c40c <vTaskPlaceOnEventList+0x48>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3318      	adds	r3, #24
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7fe fba6 	bl	800ab46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	6838      	ldr	r0, [r7, #0]
 800c3fe:	f000 fe71 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
}
 800c402:	bf00      	nop
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	2000d898 	.word	0x2000d898

0800c410 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10b      	bne.n	800c43a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	617b      	str	r3, [r7, #20]
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c43a:	4b12      	ldr	r3, [pc, #72]	@ (800c484 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10b      	bne.n	800c45a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	613b      	str	r3, [r7, #16]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c45a:	4b0b      	ldr	r3, [pc, #44]	@ (800c488 <vTaskPlaceOnUnorderedEventList+0x78>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c464:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c466:	4b08      	ldr	r3, [pc, #32]	@ (800c488 <vTaskPlaceOnUnorderedEventList+0x78>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3318      	adds	r3, #24
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7fe fb45 	bl	800aafe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c474:	2101      	movs	r1, #1
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fe34 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
}
 800c47c:	bf00      	nop
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	2000dd94 	.word	0x2000dd94
 800c488:	2000d898 	.word	0x2000d898

0800c48c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10b      	bne.n	800c4b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	617b      	str	r3, [r7, #20]
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	e7fd      	b.n	800c4b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c4e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	3318      	adds	r3, #24
 800c4bc:	4619      	mov	r1, r3
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7fe fb1d 	bl	800aafe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c4ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	68b8      	ldr	r0, [r7, #8]
 800c4d4:	f000 fe06 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
	}
 800c4d8:	bf00      	nop
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	2000d898 	.word	0x2000d898

0800c4e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10b      	bne.n	800c512 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	60fb      	str	r3, [r7, #12]
}
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	e7fd      	b.n	800c50e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	3318      	adds	r3, #24
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fb4e 	bl	800abb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c51c:	4b1d      	ldr	r3, [pc, #116]	@ (800c594 <xTaskRemoveFromEventList+0xb0>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d11d      	bne.n	800c560 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	3304      	adds	r3, #4
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe fb45 	bl	800abb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c532:	4b19      	ldr	r3, [pc, #100]	@ (800c598 <xTaskRemoveFromEventList+0xb4>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d903      	bls.n	800c542 <xTaskRemoveFromEventList+0x5e>
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53e:	4a16      	ldr	r2, [pc, #88]	@ (800c598 <xTaskRemoveFromEventList+0xb4>)
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4a13      	ldr	r2, [pc, #76]	@ (800c59c <xTaskRemoveFromEventList+0xb8>)
 800c550:	441a      	add	r2, r3
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7fe fad0 	bl	800aafe <vListInsertEnd>
 800c55e:	e005      	b.n	800c56c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	3318      	adds	r3, #24
 800c564:	4619      	mov	r1, r3
 800c566:	480e      	ldr	r0, [pc, #56]	@ (800c5a0 <xTaskRemoveFromEventList+0xbc>)
 800c568:	f7fe fac9 	bl	800aafe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c570:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a4 <xTaskRemoveFromEventList+0xc0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c576:	429a      	cmp	r2, r3
 800c578:	d905      	bls.n	800c586 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c57a:	2301      	movs	r3, #1
 800c57c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c57e:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <xTaskRemoveFromEventList+0xc4>)
 800c580:	2201      	movs	r2, #1
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	e001      	b.n	800c58a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c586:	2300      	movs	r3, #0
 800c588:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c58a:	697b      	ldr	r3, [r7, #20]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	2000dd94 	.word	0x2000dd94
 800c598:	2000dd74 	.word	0x2000dd74
 800c59c:	2000d89c 	.word	0x2000d89c
 800c5a0:	2000dd2c 	.word	0x2000dd2c
 800c5a4:	2000d898 	.word	0x2000d898
 800c5a8:	2000dd80 	.word	0x2000dd80

0800c5ac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800c5b6:	4b2a      	ldr	r3, [pc, #168]	@ (800c660 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10b      	bne.n	800c5d6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	613b      	str	r3, [r7, #16]
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	e7fd      	b.n	800c5d2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10b      	bne.n	800c604 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
}
 800c5fe:	bf00      	nop
 800c600:	bf00      	nop
 800c602:	e7fd      	b.n	800c600 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7fe fad7 	bl	800abb8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	3304      	adds	r3, #4
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fad2 	bl	800abb8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c618:	4b12      	ldr	r3, [pc, #72]	@ (800c664 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d903      	bls.n	800c628 <vTaskRemoveFromUnorderedEventList+0x7c>
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c624:	4a0f      	ldr	r2, [pc, #60]	@ (800c664 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4a0c      	ldr	r2, [pc, #48]	@ (800c668 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c636:	441a      	add	r2, r3
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fe fa5d 	bl	800aafe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c648:	4b08      	ldr	r3, [pc, #32]	@ (800c66c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c64e:	429a      	cmp	r2, r3
 800c650:	d902      	bls.n	800c658 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c652:	4b07      	ldr	r3, [pc, #28]	@ (800c670 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800c654:	2201      	movs	r2, #1
 800c656:	601a      	str	r2, [r3, #0]
	}
}
 800c658:	bf00      	nop
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	2000dd94 	.word	0x2000dd94
 800c664:	2000dd74 	.word	0x2000dd74
 800c668:	2000d89c 	.word	0x2000d89c
 800c66c:	2000d898 	.word	0x2000d898
 800c670:	2000dd80 	.word	0x2000dd80

0800c674 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10b      	bne.n	800c69a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	60fb      	str	r3, [r7, #12]
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop
 800c698:	e7fd      	b.n	800c696 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c69a:	f001 fa25 	bl	800dae8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c69e:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <vTaskSetTimeOutState+0x48>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c6a6:	4b06      	ldr	r3, [pc, #24]	@ (800c6c0 <vTaskSetTimeOutState+0x4c>)
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c6ae:	f001 fa4d 	bl	800db4c <vPortExitCritical>
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	2000dd84 	.word	0x2000dd84
 800c6c0:	2000dd70 	.word	0x2000dd70

0800c6c4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6cc:	4b06      	ldr	r3, [pc, #24]	@ (800c6e8 <vTaskInternalSetTimeOutState+0x24>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6d4:	4b05      	ldr	r3, [pc, #20]	@ (800c6ec <vTaskInternalSetTimeOutState+0x28>)
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	605a      	str	r2, [r3, #4]
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	2000dd84 	.word	0x2000dd84
 800c6ec:	2000dd70 	.word	0x2000dd70

0800c6f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10b      	bne.n	800c718 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	613b      	str	r3, [r7, #16]
}
 800c712:	bf00      	nop
 800c714:	bf00      	nop
 800c716:	e7fd      	b.n	800c714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10b      	bne.n	800c736 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
}
 800c730:	bf00      	nop
 800c732:	bf00      	nop
 800c734:	e7fd      	b.n	800c732 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c736:	f001 f9d7 	bl	800dae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c73a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7b0 <xTaskCheckForTimeOut+0xc0>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	69ba      	ldr	r2, [r7, #24]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c752:	d102      	bne.n	800c75a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c754:	2300      	movs	r3, #0
 800c756:	61fb      	str	r3, [r7, #28]
 800c758:	e023      	b.n	800c7a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	4b15      	ldr	r3, [pc, #84]	@ (800c7b4 <xTaskCheckForTimeOut+0xc4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d007      	beq.n	800c776 <xTaskCheckForTimeOut+0x86>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	69ba      	ldr	r2, [r7, #24]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d302      	bcc.n	800c776 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c770:	2301      	movs	r3, #1
 800c772:	61fb      	str	r3, [r7, #28]
 800c774:	e015      	b.n	800c7a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d20b      	bcs.n	800c798 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	1ad2      	subs	r2, r2, r3
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff ff99 	bl	800c6c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c792:	2300      	movs	r3, #0
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	e004      	b.n	800c7a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7a2:	f001 f9d3 	bl	800db4c <vPortExitCritical>

	return xReturn;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3720      	adds	r7, #32
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	2000dd70 	.word	0x2000dd70
 800c7b4:	2000dd84 	.word	0x2000dd84

0800c7b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c7bc:	4b03      	ldr	r3, [pc, #12]	@ (800c7cc <vTaskMissedYield+0x14>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]
}
 800c7c2:	bf00      	nop
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	2000dd80 	.word	0x2000dd80

0800c7d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7d8:	f000 f852 	bl	800c880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7dc:	4b06      	ldr	r3, [pc, #24]	@ (800c7f8 <prvIdleTask+0x28>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d9f9      	bls.n	800c7d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7e4:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <prvIdleTask+0x2c>)
 800c7e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c7f4:	e7f0      	b.n	800c7d8 <prvIdleTask+0x8>
 800c7f6:	bf00      	nop
 800c7f8:	2000d89c 	.word	0x2000d89c
 800c7fc:	e000ed04 	.word	0xe000ed04

0800c800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c806:	2300      	movs	r3, #0
 800c808:	607b      	str	r3, [r7, #4]
 800c80a:	e00c      	b.n	800c826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	4613      	mov	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4a12      	ldr	r2, [pc, #72]	@ (800c860 <prvInitialiseTaskLists+0x60>)
 800c818:	4413      	add	r3, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe f942 	bl	800aaa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3301      	adds	r3, #1
 800c824:	607b      	str	r3, [r7, #4]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b37      	cmp	r3, #55	@ 0x37
 800c82a:	d9ef      	bls.n	800c80c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c82c:	480d      	ldr	r0, [pc, #52]	@ (800c864 <prvInitialiseTaskLists+0x64>)
 800c82e:	f7fe f939 	bl	800aaa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c832:	480d      	ldr	r0, [pc, #52]	@ (800c868 <prvInitialiseTaskLists+0x68>)
 800c834:	f7fe f936 	bl	800aaa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c838:	480c      	ldr	r0, [pc, #48]	@ (800c86c <prvInitialiseTaskLists+0x6c>)
 800c83a:	f7fe f933 	bl	800aaa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c83e:	480c      	ldr	r0, [pc, #48]	@ (800c870 <prvInitialiseTaskLists+0x70>)
 800c840:	f7fe f930 	bl	800aaa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c844:	480b      	ldr	r0, [pc, #44]	@ (800c874 <prvInitialiseTaskLists+0x74>)
 800c846:	f7fe f92d 	bl	800aaa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c84a:	4b0b      	ldr	r3, [pc, #44]	@ (800c878 <prvInitialiseTaskLists+0x78>)
 800c84c:	4a05      	ldr	r2, [pc, #20]	@ (800c864 <prvInitialiseTaskLists+0x64>)
 800c84e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c850:	4b0a      	ldr	r3, [pc, #40]	@ (800c87c <prvInitialiseTaskLists+0x7c>)
 800c852:	4a05      	ldr	r2, [pc, #20]	@ (800c868 <prvInitialiseTaskLists+0x68>)
 800c854:	601a      	str	r2, [r3, #0]
}
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	2000d89c 	.word	0x2000d89c
 800c864:	2000dcfc 	.word	0x2000dcfc
 800c868:	2000dd10 	.word	0x2000dd10
 800c86c:	2000dd2c 	.word	0x2000dd2c
 800c870:	2000dd40 	.word	0x2000dd40
 800c874:	2000dd58 	.word	0x2000dd58
 800c878:	2000dd24 	.word	0x2000dd24
 800c87c:	2000dd28 	.word	0x2000dd28

0800c880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c886:	e019      	b.n	800c8bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c888:	f001 f92e 	bl	800dae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c88c:	4b10      	ldr	r3, [pc, #64]	@ (800c8d0 <prvCheckTasksWaitingTermination+0x50>)
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3304      	adds	r3, #4
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe f98d 	bl	800abb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c89e:	4b0d      	ldr	r3, [pc, #52]	@ (800c8d4 <prvCheckTasksWaitingTermination+0x54>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c8d4 <prvCheckTasksWaitingTermination+0x54>)
 800c8a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d8 <prvCheckTasksWaitingTermination+0x58>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c8d8 <prvCheckTasksWaitingTermination+0x58>)
 800c8b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8b2:	f001 f94b 	bl	800db4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f810 	bl	800c8dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8bc:	4b06      	ldr	r3, [pc, #24]	@ (800c8d8 <prvCheckTasksWaitingTermination+0x58>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1e1      	bne.n	800c888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	2000dd40 	.word	0x2000dd40
 800c8d4:	2000dd6c 	.word	0x2000dd6c
 800c8d8:	2000dd54 	.word	0x2000dd54

0800c8dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3354      	adds	r3, #84	@ 0x54
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f011 fa59 	bl	801dda0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d108      	bne.n	800c90a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f001 fae3 	bl	800dec8 <vPortFree>
				vPortFree( pxTCB );
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 fae0 	bl	800dec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c908:	e019      	b.n	800c93e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c910:	2b01      	cmp	r3, #1
 800c912:	d103      	bne.n	800c91c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 fad7 	bl	800dec8 <vPortFree>
	}
 800c91a:	e010      	b.n	800c93e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c922:	2b02      	cmp	r3, #2
 800c924:	d00b      	beq.n	800c93e <prvDeleteTCB+0x62>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	60fb      	str	r3, [r7, #12]
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	e7fd      	b.n	800c93a <prvDeleteTCB+0x5e>
	}
 800c93e:	bf00      	nop
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c94e:	4b0c      	ldr	r3, [pc, #48]	@ (800c980 <prvResetNextTaskUnblockTime+0x38>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d104      	bne.n	800c962 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c958:	4b0a      	ldr	r3, [pc, #40]	@ (800c984 <prvResetNextTaskUnblockTime+0x3c>)
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c95e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c960:	e008      	b.n	800c974 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c962:	4b07      	ldr	r3, [pc, #28]	@ (800c980 <prvResetNextTaskUnblockTime+0x38>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	4a04      	ldr	r2, [pc, #16]	@ (800c984 <prvResetNextTaskUnblockTime+0x3c>)
 800c972:	6013      	str	r3, [r2, #0]
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	2000dd24 	.word	0x2000dd24
 800c984:	2000dd8c 	.word	0x2000dd8c

0800c988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c98e:	4b0b      	ldr	r3, [pc, #44]	@ (800c9bc <xTaskGetSchedulerState+0x34>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d102      	bne.n	800c99c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c996:	2301      	movs	r3, #1
 800c998:	607b      	str	r3, [r7, #4]
 800c99a:	e008      	b.n	800c9ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c99c:	4b08      	ldr	r3, [pc, #32]	@ (800c9c0 <xTaskGetSchedulerState+0x38>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d102      	bne.n	800c9aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	607b      	str	r3, [r7, #4]
 800c9a8:	e001      	b.n	800c9ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9ae:	687b      	ldr	r3, [r7, #4]
	}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	2000dd78 	.word	0x2000dd78
 800c9c0:	2000dd94 	.word	0x2000dd94

0800c9c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d051      	beq.n	800ca7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9de:	4b2a      	ldr	r3, [pc, #168]	@ (800ca88 <xTaskPriorityInherit+0xc4>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d241      	bcs.n	800ca6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	699b      	ldr	r3, [r3, #24]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	db06      	blt.n	800c9fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f0:	4b25      	ldr	r3, [pc, #148]	@ (800ca88 <xTaskPriorityInherit+0xc4>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6959      	ldr	r1, [r3, #20]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4a1f      	ldr	r2, [pc, #124]	@ (800ca8c <xTaskPriorityInherit+0xc8>)
 800ca10:	4413      	add	r3, r2
 800ca12:	4299      	cmp	r1, r3
 800ca14:	d122      	bne.n	800ca5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe f8cc 	bl	800abb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca20:	4b19      	ldr	r3, [pc, #100]	@ (800ca88 <xTaskPriorityInherit+0xc4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca2e:	4b18      	ldr	r3, [pc, #96]	@ (800ca90 <xTaskPriorityInherit+0xcc>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d903      	bls.n	800ca3e <xTaskPriorityInherit+0x7a>
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3a:	4a15      	ldr	r2, [pc, #84]	@ (800ca90 <xTaskPriorityInherit+0xcc>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4a10      	ldr	r2, [pc, #64]	@ (800ca8c <xTaskPriorityInherit+0xc8>)
 800ca4c:	441a      	add	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	3304      	adds	r3, #4
 800ca52:	4619      	mov	r1, r3
 800ca54:	4610      	mov	r0, r2
 800ca56:	f7fe f852 	bl	800aafe <vListInsertEnd>
 800ca5a:	e004      	b.n	800ca66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca88 <xTaskPriorityInherit+0xc4>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ca66:	2301      	movs	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
 800ca6a:	e008      	b.n	800ca7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca70:	4b05      	ldr	r3, [pc, #20]	@ (800ca88 <xTaskPriorityInherit+0xc4>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d201      	bcs.n	800ca7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
	}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	2000d898 	.word	0x2000d898
 800ca8c:	2000d89c 	.word	0x2000d89c
 800ca90:	2000dd74 	.word	0x2000dd74

0800ca94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800caa0:	2300      	movs	r3, #0
 800caa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d058      	beq.n	800cb5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800caaa:	4b2f      	ldr	r3, [pc, #188]	@ (800cb68 <xTaskPriorityDisinherit+0xd4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d00b      	beq.n	800cacc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	60fb      	str	r3, [r7, #12]
}
 800cac6:	bf00      	nop
 800cac8:	bf00      	nop
 800caca:	e7fd      	b.n	800cac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10b      	bne.n	800caec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	60bb      	str	r3, [r7, #8]
}
 800cae6:	bf00      	nop
 800cae8:	bf00      	nop
 800caea:	e7fd      	b.n	800cae8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caf0:	1e5a      	subs	r2, r3, #1
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d02c      	beq.n	800cb5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d128      	bne.n	800cb5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe f852 	bl	800abb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb2c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb6c <xTaskPriorityDisinherit+0xd8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d903      	bls.n	800cb3c <xTaskPriorityDisinherit+0xa8>
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb38:	4a0c      	ldr	r2, [pc, #48]	@ (800cb6c <xTaskPriorityDisinherit+0xd8>)
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4a09      	ldr	r2, [pc, #36]	@ (800cb70 <xTaskPriorityDisinherit+0xdc>)
 800cb4a:	441a      	add	r2, r3
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fd ffd3 	bl	800aafe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb5c:	697b      	ldr	r3, [r7, #20]
	}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2000d898 	.word	0x2000d898
 800cb6c:	2000dd74 	.word	0x2000dd74
 800cb70:	2000d89c 	.word	0x2000d89c

0800cb74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d06c      	beq.n	800cc66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10b      	bne.n	800cbac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	60fb      	str	r3, [r7, #12]
}
 800cba6:	bf00      	nop
 800cba8:	bf00      	nop
 800cbaa:	e7fd      	b.n	800cba8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d902      	bls.n	800cbbc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	e002      	b.n	800cbc2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbc0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc6:	69fa      	ldr	r2, [r7, #28]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d04c      	beq.n	800cc66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d147      	bne.n	800cc66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cbd6:	4b26      	ldr	r3, [pc, #152]	@ (800cc70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d10b      	bne.n	800cbf8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60bb      	str	r3, [r7, #8]
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	e7fd      	b.n	800cbf4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	69fa      	ldr	r2, [r7, #28]
 800cc02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	db04      	blt.n	800cc16 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	6959      	ldr	r1, [r3, #20]
 800cc1a:	693a      	ldr	r2, [r7, #16]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4a13      	ldr	r2, [pc, #76]	@ (800cc74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cc26:	4413      	add	r3, r2
 800cc28:	4299      	cmp	r1, r3
 800cc2a:	d11c      	bne.n	800cc66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fd ffc1 	bl	800abb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc3a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d903      	bls.n	800cc4a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc46:	4a0c      	ldr	r2, [pc, #48]	@ (800cc78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc4e:	4613      	mov	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4a07      	ldr	r2, [pc, #28]	@ (800cc74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cc58:	441a      	add	r2, r3
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4610      	mov	r0, r2
 800cc62:	f7fd ff4c 	bl	800aafe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc66:	bf00      	nop
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	2000d898 	.word	0x2000d898
 800cc74:	2000d89c 	.word	0x2000d89c
 800cc78:	2000dd74 	.word	0x2000dd74

0800cc7c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800cc82:	4b09      	ldr	r3, [pc, #36]	@ (800cca8 <uxTaskResetEventItemValue+0x2c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8a:	4b07      	ldr	r3, [pc, #28]	@ (800cca8 <uxTaskResetEventItemValue+0x2c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc90:	4b05      	ldr	r3, [pc, #20]	@ (800cca8 <uxTaskResetEventItemValue+0x2c>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cc98:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800cc9a:	687b      	ldr	r3, [r7, #4]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	2000d898 	.word	0x2000d898

0800ccac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ccac:	b480      	push	{r7}
 800ccae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ccb0:	4b07      	ldr	r3, [pc, #28]	@ (800ccd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ccb8:	4b05      	ldr	r3, [pc, #20]	@ (800ccd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccbe:	3201      	adds	r2, #1
 800ccc0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ccc2:	4b03      	ldr	r3, [pc, #12]	@ (800ccd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
	}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr
 800ccd0:	2000d898 	.word	0x2000d898

0800ccd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cce2:	f000 ff01 	bl	800dae8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cce6:	4b29      	ldr	r3, [pc, #164]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d01c      	beq.n	800cd2e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ccf4:	4b25      	ldr	r3, [pc, #148]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	43d2      	mvns	r2, r2
 800cd00:	400a      	ands	r2, r1
 800cd02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cd06:	4b21      	ldr	r3, [pc, #132]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00b      	beq.n	800cd2e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd16:	2101      	movs	r1, #1
 800cd18:	6838      	ldr	r0, [r7, #0]
 800cd1a:	f000 f9e3 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cd1e:	4b1c      	ldr	r3, [pc, #112]	@ (800cd90 <xTaskNotifyWait+0xbc>)
 800cd20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd2e:	f000 ff0d 	bl	800db4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800cd32:	f000 fed9 	bl	800dae8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d005      	beq.n	800cd48 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cd3c:	4b13      	ldr	r3, [pc, #76]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cd48:	4b10      	ldr	r3, [pc, #64]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d002      	beq.n	800cd5c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cd56:	2300      	movs	r3, #0
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	e00a      	b.n	800cd72 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	43d2      	mvns	r2, r2
 800cd68:	400a      	ands	r2, r1
 800cd6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd72:	4b06      	ldr	r3, [pc, #24]	@ (800cd8c <xTaskNotifyWait+0xb8>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800cd7c:	f000 fee6 	bl	800db4c <vPortExitCritical>

		return xReturn;
 800cd80:	697b      	ldr	r3, [r7, #20]
	}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	2000d898 	.word	0x2000d898
 800cd90:	e000ed04 	.word	0xe000ed04

0800cd94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08a      	sub	sp, #40	@ 0x28
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	4613      	mov	r3, r2
 800cda2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800cda4:	2301      	movs	r3, #1
 800cda6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10b      	bne.n	800cdc6 <xTaskGenericNotify+0x32>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	61bb      	str	r3, [r7, #24]
}
 800cdc0:	bf00      	nop
 800cdc2:	bf00      	nop
 800cdc4:	e7fd      	b.n	800cdc2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cdca:	f000 fe8d 	bl	800dae8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d004      	beq.n	800cdde <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cde4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	2202      	movs	r2, #2
 800cdea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800cdee:	79fb      	ldrb	r3, [r7, #7]
 800cdf0:	2b04      	cmp	r3, #4
 800cdf2:	d82e      	bhi.n	800ce52 <xTaskGenericNotify+0xbe>
 800cdf4:	a201      	add	r2, pc, #4	@ (adr r2, 800cdfc <xTaskGenericNotify+0x68>)
 800cdf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdfa:	bf00      	nop
 800cdfc:	0800ce77 	.word	0x0800ce77
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce23 	.word	0x0800ce23
 800ce08:	0800ce33 	.word	0x0800ce33
 800ce0c:	0800ce3d 	.word	0x0800ce3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ce20:	e02c      	b.n	800ce7c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ce30:	e024      	b.n	800ce7c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ce3a:	e01f      	b.n	800ce7c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ce3c:	7ffb      	ldrb	r3, [r7, #31]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d004      	beq.n	800ce4c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ce42:	6a3b      	ldr	r3, [r7, #32]
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ce4a:	e017      	b.n	800ce7c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ce50:	e014      	b.n	800ce7c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ce58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce5c:	d00d      	beq.n	800ce7a <xTaskGenericNotify+0xe6>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	617b      	str	r3, [r7, #20]
}
 800ce70:	bf00      	nop
 800ce72:	bf00      	nop
 800ce74:	e7fd      	b.n	800ce72 <xTaskGenericNotify+0xde>
					break;
 800ce76:	bf00      	nop
 800ce78:	e000      	b.n	800ce7c <xTaskGenericNotify+0xe8>

					break;
 800ce7a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ce7c:	7ffb      	ldrb	r3, [r7, #31]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d13b      	bne.n	800cefa <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fd fe96 	bl	800abb8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce90:	4b1d      	ldr	r3, [pc, #116]	@ (800cf08 <xTaskGenericNotify+0x174>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d903      	bls.n	800cea0 <xTaskGenericNotify+0x10c>
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9c:	4a1a      	ldr	r2, [pc, #104]	@ (800cf08 <xTaskGenericNotify+0x174>)
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea4:	4613      	mov	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4a17      	ldr	r2, [pc, #92]	@ (800cf0c <xTaskGenericNotify+0x178>)
 800ceae:	441a      	add	r2, r3
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	f7fd fe21 	bl	800aafe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <xTaskGenericNotify+0x148>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	613b      	str	r3, [r7, #16]
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	e7fd      	b.n	800ced8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cee0:	4b0b      	ldr	r3, [pc, #44]	@ (800cf10 <xTaskGenericNotify+0x17c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d907      	bls.n	800cefa <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ceea:	4b0a      	ldr	r3, [pc, #40]	@ (800cf14 <xTaskGenericNotify+0x180>)
 800ceec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cefa:	f000 fe27 	bl	800db4c <vPortExitCritical>

		return xReturn;
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3728      	adds	r7, #40	@ 0x28
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	2000dd74 	.word	0x2000dd74
 800cf0c:	2000d89c 	.word	0x2000d89c
 800cf10:	2000d898 	.word	0x2000d898
 800cf14:	e000ed04 	.word	0xe000ed04

0800cf18 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08e      	sub	sp, #56	@ 0x38
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	603b      	str	r3, [r7, #0]
 800cf24:	4613      	mov	r3, r2
 800cf26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10b      	bne.n	800cf4a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop
 800cf48:	e7fd      	b.n	800cf46 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf4a:	f000 fead 	bl	800dca8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800cf52:	f3ef 8211 	mrs	r2, BASEPRI
 800cf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	623a      	str	r2, [r7, #32]
 800cf68:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cf6a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d004      	beq.n	800cf7e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf76:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cf84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	2b04      	cmp	r3, #4
 800cf94:	d82e      	bhi.n	800cff4 <xTaskGenericNotifyFromISR+0xdc>
 800cf96:	a201      	add	r2, pc, #4	@ (adr r2, 800cf9c <xTaskGenericNotifyFromISR+0x84>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800d019 	.word	0x0800d019
 800cfa0:	0800cfb1 	.word	0x0800cfb1
 800cfa4:	0800cfc3 	.word	0x0800cfc3
 800cfa8:	0800cfd3 	.word	0x0800cfd3
 800cfac:	0800cfdd 	.word	0x0800cfdd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	431a      	orrs	r2, r3
 800cfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cfc0:	e02d      	b.n	800d01e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cfc8:	1c5a      	adds	r2, r3, #1
 800cfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfcc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cfd0:	e025      	b.n	800d01e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cfda:	e020      	b.n	800d01e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cfdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d004      	beq.n	800cfee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cfec:	e017      	b.n	800d01e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800cff2:	e014      	b.n	800d01e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cffe:	d00d      	beq.n	800d01c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	61bb      	str	r3, [r7, #24]
}
 800d012:	bf00      	nop
 800d014:	bf00      	nop
 800d016:	e7fd      	b.n	800d014 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d018:	bf00      	nop
 800d01a:	e000      	b.n	800d01e <xTaskGenericNotifyFromISR+0x106>
					break;
 800d01c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d01e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d022:	2b01      	cmp	r3, #1
 800d024:	d147      	bne.n	800d0b6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00b      	beq.n	800d046 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	617b      	str	r3, [r7, #20]
}
 800d040:	bf00      	nop
 800d042:	bf00      	nop
 800d044:	e7fd      	b.n	800d042 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d046:	4b21      	ldr	r3, [pc, #132]	@ (800d0cc <xTaskGenericNotifyFromISR+0x1b4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d11d      	bne.n	800d08a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d050:	3304      	adds	r3, #4
 800d052:	4618      	mov	r0, r3
 800d054:	f7fd fdb0 	bl	800abb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05c:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d0 <xTaskGenericNotifyFromISR+0x1b8>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <xTaskGenericNotifyFromISR+0x154>
 800d064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d068:	4a19      	ldr	r2, [pc, #100]	@ (800d0d0 <xTaskGenericNotifyFromISR+0x1b8>)
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4a16      	ldr	r2, [pc, #88]	@ (800d0d4 <xTaskGenericNotifyFromISR+0x1bc>)
 800d07a:	441a      	add	r2, r3
 800d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fd fd3b 	bl	800aafe <vListInsertEnd>
 800d088:	e005      	b.n	800d096 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	3318      	adds	r3, #24
 800d08e:	4619      	mov	r1, r3
 800d090:	4811      	ldr	r0, [pc, #68]	@ (800d0d8 <xTaskGenericNotifyFromISR+0x1c0>)
 800d092:	f7fd fd34 	bl	800aafe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d09a:	4b10      	ldr	r3, [pc, #64]	@ (800d0dc <xTaskGenericNotifyFromISR+0x1c4>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d908      	bls.n	800d0b6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e0 <xTaskGenericNotifyFromISR+0x1c8>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f383 8811 	msr	BASEPRI, r3
}
 800d0c0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3738      	adds	r7, #56	@ 0x38
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	2000dd94 	.word	0x2000dd94
 800d0d0:	2000dd74 	.word	0x2000dd74
 800d0d4:	2000d89c 	.word	0x2000d89c
 800d0d8:	2000dd2c 	.word	0x2000dd2c
 800d0dc:	2000d898 	.word	0x2000d898
 800d0e0:	2000dd80 	.word	0x2000dd80

0800d0e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ee:	4b21      	ldr	r3, [pc, #132]	@ (800d174 <prvAddCurrentTaskToDelayedList+0x90>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f4:	4b20      	ldr	r3, [pc, #128]	@ (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fd fd5c 	bl	800abb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d106:	d10a      	bne.n	800d11e <prvAddCurrentTaskToDelayedList+0x3a>
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d007      	beq.n	800d11e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d10e:	4b1a      	ldr	r3, [pc, #104]	@ (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3304      	adds	r3, #4
 800d114:	4619      	mov	r1, r3
 800d116:	4819      	ldr	r0, [pc, #100]	@ (800d17c <prvAddCurrentTaskToDelayedList+0x98>)
 800d118:	f7fd fcf1 	bl	800aafe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d11c:	e026      	b.n	800d16c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4413      	add	r3, r2
 800d124:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d126:	4b14      	ldr	r3, [pc, #80]	@ (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	429a      	cmp	r2, r3
 800d134:	d209      	bcs.n	800d14a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d136:	4b12      	ldr	r3, [pc, #72]	@ (800d180 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b0f      	ldr	r3, [pc, #60]	@ (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3304      	adds	r3, #4
 800d140:	4619      	mov	r1, r3
 800d142:	4610      	mov	r0, r2
 800d144:	f7fd fcff 	bl	800ab46 <vListInsert>
}
 800d148:	e010      	b.n	800d16c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d14a:	4b0e      	ldr	r3, [pc, #56]	@ (800d184 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	4b0a      	ldr	r3, [pc, #40]	@ (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3304      	adds	r3, #4
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	f7fd fcf5 	bl	800ab46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d15c:	4b0a      	ldr	r3, [pc, #40]	@ (800d188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d202      	bcs.n	800d16c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d166:	4a08      	ldr	r2, [pc, #32]	@ (800d188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	6013      	str	r3, [r2, #0]
}
 800d16c:	bf00      	nop
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	2000dd70 	.word	0x2000dd70
 800d178:	2000d898 	.word	0x2000d898
 800d17c:	2000dd58 	.word	0x2000dd58
 800d180:	2000dd28 	.word	0x2000dd28
 800d184:	2000dd24 	.word	0x2000dd24
 800d188:	2000dd8c 	.word	0x2000dd8c

0800d18c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08a      	sub	sp, #40	@ 0x28
 800d190:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d196:	f000 fb13 	bl	800d7c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d19a:	4b1d      	ldr	r3, [pc, #116]	@ (800d210 <xTimerCreateTimerTask+0x84>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d021      	beq.n	800d1e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d1aa:	1d3a      	adds	r2, r7, #4
 800d1ac:	f107 0108 	add.w	r1, r7, #8
 800d1b0:	f107 030c 	add.w	r3, r7, #12
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fd fa65 	bl	800a684 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	9202      	str	r2, [sp, #8]
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	460a      	mov	r2, r1
 800d1cc:	4911      	ldr	r1, [pc, #68]	@ (800d214 <xTimerCreateTimerTask+0x88>)
 800d1ce:	4812      	ldr	r0, [pc, #72]	@ (800d218 <xTimerCreateTimerTask+0x8c>)
 800d1d0:	f7fe fcb8 	bl	800bb44 <xTaskCreateStatic>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	4a11      	ldr	r2, [pc, #68]	@ (800d21c <xTimerCreateTimerTask+0x90>)
 800d1d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d1da:	4b10      	ldr	r3, [pc, #64]	@ (800d21c <xTimerCreateTimerTask+0x90>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10b      	bne.n	800d204 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	613b      	str	r3, [r7, #16]
}
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
 800d202:	e7fd      	b.n	800d200 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d204:	697b      	ldr	r3, [r7, #20]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	2000ddc8 	.word	0x2000ddc8
 800d214:	080200b4 	.word	0x080200b4
 800d218:	0800d359 	.word	0x0800d359
 800d21c:	2000ddcc 	.word	0x2000ddcc

0800d220 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08a      	sub	sp, #40	@ 0x28
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d22e:	2300      	movs	r3, #0
 800d230:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10b      	bne.n	800d250 <xTimerGenericCommand+0x30>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	623b      	str	r3, [r7, #32]
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	e7fd      	b.n	800d24c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d250:	4b19      	ldr	r3, [pc, #100]	@ (800d2b8 <xTimerGenericCommand+0x98>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d02a      	beq.n	800d2ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b05      	cmp	r3, #5
 800d268:	dc18      	bgt.n	800d29c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d26a:	f7ff fb8d 	bl	800c988 <xTaskGetSchedulerState>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b02      	cmp	r3, #2
 800d272:	d109      	bne.n	800d288 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d274:	4b10      	ldr	r3, [pc, #64]	@ (800d2b8 <xTimerGenericCommand+0x98>)
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	f107 0110 	add.w	r1, r7, #16
 800d27c:	2300      	movs	r3, #0
 800d27e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d280:	f7fd fe78 	bl	800af74 <xQueueGenericSend>
 800d284:	6278      	str	r0, [r7, #36]	@ 0x24
 800d286:	e012      	b.n	800d2ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d288:	4b0b      	ldr	r3, [pc, #44]	@ (800d2b8 <xTimerGenericCommand+0x98>)
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	f107 0110 	add.w	r1, r7, #16
 800d290:	2300      	movs	r3, #0
 800d292:	2200      	movs	r2, #0
 800d294:	f7fd fe6e 	bl	800af74 <xQueueGenericSend>
 800d298:	6278      	str	r0, [r7, #36]	@ 0x24
 800d29a:	e008      	b.n	800d2ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d29c:	4b06      	ldr	r3, [pc, #24]	@ (800d2b8 <xTimerGenericCommand+0x98>)
 800d29e:	6818      	ldr	r0, [r3, #0]
 800d2a0:	f107 0110 	add.w	r1, r7, #16
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	f7fd ff66 	bl	800b178 <xQueueGenericSendFromISR>
 800d2ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3728      	adds	r7, #40	@ 0x28
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	2000ddc8 	.word	0x2000ddc8

0800d2bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af02      	add	r7, sp, #8
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c6:	4b23      	ldr	r3, [pc, #140]	@ (800d354 <prvProcessExpiredTimer+0x98>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fd fc6f 	bl	800abb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d023      	beq.n	800d330 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	699a      	ldr	r2, [r3, #24]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	18d1      	adds	r1, r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	6978      	ldr	r0, [r7, #20]
 800d2f6:	f000 f8d5 	bl	800d4a4 <prvInsertTimerInActiveList>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d020      	beq.n	800d342 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d300:	2300      	movs	r3, #0
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	2300      	movs	r3, #0
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	2100      	movs	r1, #0
 800d30a:	6978      	ldr	r0, [r7, #20]
 800d30c:	f7ff ff88 	bl	800d220 <xTimerGenericCommand>
 800d310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d114      	bne.n	800d342 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	60fb      	str	r3, [r7, #12]
}
 800d32a:	bf00      	nop
 800d32c:	bf00      	nop
 800d32e:	e7fd      	b.n	800d32c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d336:	f023 0301 	bic.w	r3, r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	6978      	ldr	r0, [r7, #20]
 800d348:	4798      	blx	r3
}
 800d34a:	bf00      	nop
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	2000ddc0 	.word	0x2000ddc0

0800d358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d360:	f107 0308 	add.w	r3, r7, #8
 800d364:	4618      	mov	r0, r3
 800d366:	f000 f859 	bl	800d41c <prvGetNextExpireTime>
 800d36a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	4619      	mov	r1, r3
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 f805 	bl	800d380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d376:	f000 f8d7 	bl	800d528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d37a:	bf00      	nop
 800d37c:	e7f0      	b.n	800d360 <prvTimerTask+0x8>
	...

0800d380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d38a:	f7fe fe3f 	bl	800c00c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d38e:	f107 0308 	add.w	r3, r7, #8
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f866 	bl	800d464 <prvSampleTimeNow>
 800d398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d130      	bne.n	800d402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10a      	bne.n	800d3bc <prvProcessTimerOrBlockTask+0x3c>
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d806      	bhi.n	800d3bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d3ae:	f7fe fe3b 	bl	800c028 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d3b2:	68f9      	ldr	r1, [r7, #12]
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff ff81 	bl	800d2bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d3ba:	e024      	b.n	800d406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d008      	beq.n	800d3d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d3c2:	4b13      	ldr	r3, [pc, #76]	@ (800d410 <prvProcessTimerOrBlockTask+0x90>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <prvProcessTimerOrBlockTask+0x50>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e000      	b.n	800d3d2 <prvProcessTimerOrBlockTask+0x52>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d3d4:	4b0f      	ldr	r3, [pc, #60]	@ (800d414 <prvProcessTimerOrBlockTask+0x94>)
 800d3d6:	6818      	ldr	r0, [r3, #0]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	f7fe fb7b 	bl	800badc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d3e6:	f7fe fe1f 	bl	800c028 <xTaskResumeAll>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10a      	bne.n	800d406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d3f0:	4b09      	ldr	r3, [pc, #36]	@ (800d418 <prvProcessTimerOrBlockTask+0x98>)
 800d3f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	f3bf 8f6f 	isb	sy
}
 800d400:	e001      	b.n	800d406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d402:	f7fe fe11 	bl	800c028 <xTaskResumeAll>
}
 800d406:	bf00      	nop
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	2000ddc4 	.word	0x2000ddc4
 800d414:	2000ddc8 	.word	0x2000ddc8
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d424:	4b0e      	ldr	r3, [pc, #56]	@ (800d460 <prvGetNextExpireTime+0x44>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <prvGetNextExpireTime+0x16>
 800d42e:	2201      	movs	r2, #1
 800d430:	e000      	b.n	800d434 <prvGetNextExpireTime+0x18>
 800d432:	2200      	movs	r2, #0
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d440:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <prvGetNextExpireTime+0x44>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	e001      	b.n	800d450 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d44c:	2300      	movs	r3, #0
 800d44e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d450:	68fb      	ldr	r3, [r7, #12]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3714      	adds	r7, #20
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	2000ddc0 	.word	0x2000ddc0

0800d464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d46c:	f7fe fe7a 	bl	800c164 <xTaskGetTickCount>
 800d470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d472:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <prvSampleTimeNow+0x3c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d205      	bcs.n	800d488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d47c:	f000 f93a 	bl	800d6f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	e002      	b.n	800d48e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d48e:	4a04      	ldr	r2, [pc, #16]	@ (800d4a0 <prvSampleTimeNow+0x3c>)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d494:	68fb      	ldr	r3, [r7, #12]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	2000ddd0 	.word	0x2000ddd0

0800d4a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d812      	bhi.n	800d4f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d302      	bcc.n	800d4de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e01b      	b.n	800d516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d4de:	4b10      	ldr	r3, [pc, #64]	@ (800d520 <prvInsertTimerInActiveList+0x7c>)
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7fd fb2c 	bl	800ab46 <vListInsert>
 800d4ee:	e012      	b.n	800d516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d206      	bcs.n	800d506 <prvInsertTimerInActiveList+0x62>
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d302      	bcc.n	800d506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d500:	2301      	movs	r3, #1
 800d502:	617b      	str	r3, [r7, #20]
 800d504:	e007      	b.n	800d516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d506:	4b07      	ldr	r3, [pc, #28]	@ (800d524 <prvInsertTimerInActiveList+0x80>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	3304      	adds	r3, #4
 800d50e:	4619      	mov	r1, r3
 800d510:	4610      	mov	r0, r2
 800d512:	f7fd fb18 	bl	800ab46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d516:	697b      	ldr	r3, [r7, #20]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	2000ddc4 	.word	0x2000ddc4
 800d524:	2000ddc0 	.word	0x2000ddc0

0800d528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08e      	sub	sp, #56	@ 0x38
 800d52c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d52e:	e0ce      	b.n	800d6ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	da19      	bge.n	800d56a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d536:	1d3b      	adds	r3, r7, #4
 800d538:	3304      	adds	r3, #4
 800d53a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	61fb      	str	r3, [r7, #28]
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	e7fd      	b.n	800d556 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d560:	6850      	ldr	r0, [r2, #4]
 800d562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d564:	6892      	ldr	r2, [r2, #8]
 800d566:	4611      	mov	r1, r2
 800d568:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f2c0 80ae 	blt.w	800d6ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d580:	3304      	adds	r3, #4
 800d582:	4618      	mov	r0, r3
 800d584:	f7fd fb18 	bl	800abb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d588:	463b      	mov	r3, r7
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff ff6a 	bl	800d464 <prvSampleTimeNow>
 800d590:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b09      	cmp	r3, #9
 800d596:	f200 8097 	bhi.w	800d6c8 <prvProcessReceivedCommands+0x1a0>
 800d59a:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a0 <prvProcessReceivedCommands+0x78>)
 800d59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a0:	0800d5c9 	.word	0x0800d5c9
 800d5a4:	0800d5c9 	.word	0x0800d5c9
 800d5a8:	0800d5c9 	.word	0x0800d5c9
 800d5ac:	0800d63f 	.word	0x0800d63f
 800d5b0:	0800d653 	.word	0x0800d653
 800d5b4:	0800d69f 	.word	0x0800d69f
 800d5b8:	0800d5c9 	.word	0x0800d5c9
 800d5bc:	0800d5c9 	.word	0x0800d5c9
 800d5c0:	0800d63f 	.word	0x0800d63f
 800d5c4:	0800d653 	.word	0x0800d653
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5ce:	f043 0301 	orr.w	r3, r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	18d1      	adds	r1, r2, r3
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5e8:	f7ff ff5c 	bl	800d4a4 <prvInsertTimerInActiveList>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d06c      	beq.n	800d6cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	d061      	beq.n	800d6cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	441a      	add	r2, r3
 800d610:	2300      	movs	r3, #0
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	2300      	movs	r3, #0
 800d616:	2100      	movs	r1, #0
 800d618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d61a:	f7ff fe01 	bl	800d220 <xTimerGenericCommand>
 800d61e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d152      	bne.n	800d6cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	61bb      	str	r3, [r7, #24]
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	e7fd      	b.n	800d63a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d644:	f023 0301 	bic.w	r3, r3, #1
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d650:	e03d      	b.n	800d6ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d658:	f043 0301 	orr.w	r3, r3, #1
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d660:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d668:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66c:	699b      	ldr	r3, [r3, #24]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10b      	bne.n	800d68a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	617b      	str	r3, [r7, #20]
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	e7fd      	b.n	800d686 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68c:	699a      	ldr	r2, [r3, #24]
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	18d1      	adds	r1, r2, r3
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d698:	f7ff ff04 	bl	800d4a4 <prvInsertTimerInActiveList>
					break;
 800d69c:	e017      	b.n	800d6ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6a4:	f003 0302 	and.w	r3, r3, #2
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d103      	bne.n	800d6b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d6ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6ae:	f000 fc0b 	bl	800dec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d6b2:	e00c      	b.n	800d6ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6ba:	f023 0301 	bic.w	r3, r3, #1
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d6c6:	e002      	b.n	800d6ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d6c8:	bf00      	nop
 800d6ca:	e000      	b.n	800d6ce <prvProcessReceivedCommands+0x1a6>
					break;
 800d6cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6ce:	4b08      	ldr	r3, [pc, #32]	@ (800d6f0 <prvProcessReceivedCommands+0x1c8>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	1d39      	adds	r1, r7, #4
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fd fdec 	bl	800b2b4 <xQueueReceive>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f47f af26 	bne.w	800d530 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop
 800d6e8:	3730      	adds	r7, #48	@ 0x30
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	2000ddc8 	.word	0x2000ddc8

0800d6f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6fa:	e049      	b.n	800d790 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6fc:	4b2e      	ldr	r3, [pc, #184]	@ (800d7b8 <prvSwitchTimerLists+0xc4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d706:	4b2c      	ldr	r3, [pc, #176]	@ (800d7b8 <prvSwitchTimerLists+0xc4>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	3304      	adds	r3, #4
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd fa4f 	bl	800abb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6a1b      	ldr	r3, [r3, #32]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d02f      	beq.n	800d790 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	693a      	ldr	r2, [r7, #16]
 800d736:	4413      	add	r3, r2
 800d738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d90e      	bls.n	800d760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d74e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b8 <prvSwitchTimerLists+0xc4>)
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3304      	adds	r3, #4
 800d756:	4619      	mov	r1, r3
 800d758:	4610      	mov	r0, r2
 800d75a:	f7fd f9f4 	bl	800ab46 <vListInsert>
 800d75e:	e017      	b.n	800d790 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d760:	2300      	movs	r3, #0
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	2300      	movs	r3, #0
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	2100      	movs	r1, #0
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7ff fd58 	bl	800d220 <xTimerGenericCommand>
 800d770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10b      	bne.n	800d790 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	603b      	str	r3, [r7, #0]
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	e7fd      	b.n	800d78c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d790:	4b09      	ldr	r3, [pc, #36]	@ (800d7b8 <prvSwitchTimerLists+0xc4>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1b0      	bne.n	800d6fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d79a:	4b07      	ldr	r3, [pc, #28]	@ (800d7b8 <prvSwitchTimerLists+0xc4>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d7a0:	4b06      	ldr	r3, [pc, #24]	@ (800d7bc <prvSwitchTimerLists+0xc8>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a04      	ldr	r2, [pc, #16]	@ (800d7b8 <prvSwitchTimerLists+0xc4>)
 800d7a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d7a8:	4a04      	ldr	r2, [pc, #16]	@ (800d7bc <prvSwitchTimerLists+0xc8>)
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	6013      	str	r3, [r2, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	2000ddc0 	.word	0x2000ddc0
 800d7bc:	2000ddc4 	.word	0x2000ddc4

0800d7c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d7c6:	f000 f98f 	bl	800dae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d7ca:	4b15      	ldr	r3, [pc, #84]	@ (800d820 <prvCheckForValidListAndQueue+0x60>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d120      	bne.n	800d814 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d7d2:	4814      	ldr	r0, [pc, #80]	@ (800d824 <prvCheckForValidListAndQueue+0x64>)
 800d7d4:	f7fd f966 	bl	800aaa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d7d8:	4813      	ldr	r0, [pc, #76]	@ (800d828 <prvCheckForValidListAndQueue+0x68>)
 800d7da:	f7fd f963 	bl	800aaa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d7de:	4b13      	ldr	r3, [pc, #76]	@ (800d82c <prvCheckForValidListAndQueue+0x6c>)
 800d7e0:	4a10      	ldr	r2, [pc, #64]	@ (800d824 <prvCheckForValidListAndQueue+0x64>)
 800d7e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d7e4:	4b12      	ldr	r3, [pc, #72]	@ (800d830 <prvCheckForValidListAndQueue+0x70>)
 800d7e6:	4a10      	ldr	r2, [pc, #64]	@ (800d828 <prvCheckForValidListAndQueue+0x68>)
 800d7e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	4b11      	ldr	r3, [pc, #68]	@ (800d834 <prvCheckForValidListAndQueue+0x74>)
 800d7f0:	4a11      	ldr	r2, [pc, #68]	@ (800d838 <prvCheckForValidListAndQueue+0x78>)
 800d7f2:	2110      	movs	r1, #16
 800d7f4:	200a      	movs	r0, #10
 800d7f6:	f7fd fa73 	bl	800ace0 <xQueueGenericCreateStatic>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	4a08      	ldr	r2, [pc, #32]	@ (800d820 <prvCheckForValidListAndQueue+0x60>)
 800d7fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d800:	4b07      	ldr	r3, [pc, #28]	@ (800d820 <prvCheckForValidListAndQueue+0x60>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d005      	beq.n	800d814 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d808:	4b05      	ldr	r3, [pc, #20]	@ (800d820 <prvCheckForValidListAndQueue+0x60>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	490b      	ldr	r1, [pc, #44]	@ (800d83c <prvCheckForValidListAndQueue+0x7c>)
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe f910 	bl	800ba34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d814:	f000 f99a 	bl	800db4c <vPortExitCritical>
}
 800d818:	bf00      	nop
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	2000ddc8 	.word	0x2000ddc8
 800d824:	2000dd98 	.word	0x2000dd98
 800d828:	2000ddac 	.word	0x2000ddac
 800d82c:	2000ddc0 	.word	0x2000ddc0
 800d830:	2000ddc4 	.word	0x2000ddc4
 800d834:	2000de74 	.word	0x2000de74
 800d838:	2000ddd4 	.word	0x2000ddd4
 800d83c:	080200bc 	.word	0x080200bc

0800d840 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08a      	sub	sp, #40	@ 0x28
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
 800d84c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800d84e:	f06f 0301 	mvn.w	r3, #1
 800d852:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d860:	4b06      	ldr	r3, [pc, #24]	@ (800d87c <xTimerPendFunctionCallFromISR+0x3c>)
 800d862:	6818      	ldr	r0, [r3, #0]
 800d864:	f107 0114 	add.w	r1, r7, #20
 800d868:	2300      	movs	r3, #0
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	f7fd fc84 	bl	800b178 <xQueueGenericSendFromISR>
 800d870:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800d872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d874:	4618      	mov	r0, r3
 800d876:	3728      	adds	r7, #40	@ 0x28
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	2000ddc8 	.word	0x2000ddc8

0800d880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3b04      	subs	r3, #4
 800d890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3b04      	subs	r3, #4
 800d89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f023 0201 	bic.w	r2, r3, #1
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3b04      	subs	r3, #4
 800d8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8b0:	4a0c      	ldr	r2, [pc, #48]	@ (800d8e4 <pxPortInitialiseStack+0x64>)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	3b14      	subs	r3, #20
 800d8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3b04      	subs	r3, #4
 800d8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f06f 0202 	mvn.w	r2, #2
 800d8ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3b20      	subs	r3, #32
 800d8d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	0800d8e9 	.word	0x0800d8e9

0800d8e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d8f2:	4b13      	ldr	r3, [pc, #76]	@ (800d940 <prvTaskExitError+0x58>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8fa:	d00b      	beq.n	800d914 <prvTaskExitError+0x2c>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	60fb      	str	r3, [r7, #12]
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	e7fd      	b.n	800d910 <prvTaskExitError+0x28>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	60bb      	str	r3, [r7, #8]
}
 800d926:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d928:	bf00      	nop
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0fc      	beq.n	800d92a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d930:	bf00      	nop
 800d932:	bf00      	nop
 800d934:	3714      	adds	r7, #20
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	20000028 	.word	0x20000028
	...

0800d950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d950:	4b07      	ldr	r3, [pc, #28]	@ (800d970 <pxCurrentTCBConst2>)
 800d952:	6819      	ldr	r1, [r3, #0]
 800d954:	6808      	ldr	r0, [r1, #0]
 800d956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95a:	f380 8809 	msr	PSP, r0
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f04f 0000 	mov.w	r0, #0
 800d966:	f380 8811 	msr	BASEPRI, r0
 800d96a:	4770      	bx	lr
 800d96c:	f3af 8000 	nop.w

0800d970 <pxCurrentTCBConst2>:
 800d970:	2000d898 	.word	0x2000d898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop

0800d978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d978:	4808      	ldr	r0, [pc, #32]	@ (800d99c <prvPortStartFirstTask+0x24>)
 800d97a:	6800      	ldr	r0, [r0, #0]
 800d97c:	6800      	ldr	r0, [r0, #0]
 800d97e:	f380 8808 	msr	MSP, r0
 800d982:	f04f 0000 	mov.w	r0, #0
 800d986:	f380 8814 	msr	CONTROL, r0
 800d98a:	b662      	cpsie	i
 800d98c:	b661      	cpsie	f
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	df00      	svc	0
 800d998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d99a:	bf00      	nop
 800d99c:	e000ed08 	.word	0xe000ed08

0800d9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b086      	sub	sp, #24
 800d9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d9a6:	4b47      	ldr	r3, [pc, #284]	@ (800dac4 <xPortStartScheduler+0x124>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a47      	ldr	r2, [pc, #284]	@ (800dac8 <xPortStartScheduler+0x128>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d10b      	bne.n	800d9c8 <xPortStartScheduler+0x28>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	613b      	str	r3, [r7, #16]
}
 800d9c2:	bf00      	nop
 800d9c4:	bf00      	nop
 800d9c6:	e7fd      	b.n	800d9c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9c8:	4b3e      	ldr	r3, [pc, #248]	@ (800dac4 <xPortStartScheduler+0x124>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a3f      	ldr	r2, [pc, #252]	@ (800dacc <xPortStartScheduler+0x12c>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d10b      	bne.n	800d9ea <xPortStartScheduler+0x4a>
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	60fb      	str	r3, [r7, #12]
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	e7fd      	b.n	800d9e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9ea:	4b39      	ldr	r3, [pc, #228]	@ (800dad0 <xPortStartScheduler+0x130>)
 800d9ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	22ff      	movs	r2, #255	@ 0xff
 800d9fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	b2db      	uxtb	r3, r3
 800da02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	4b31      	ldr	r3, [pc, #196]	@ (800dad4 <xPortStartScheduler+0x134>)
 800da10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da12:	4b31      	ldr	r3, [pc, #196]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da14:	2207      	movs	r2, #7
 800da16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da18:	e009      	b.n	800da2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800da1a:	4b2f      	ldr	r3, [pc, #188]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	3b01      	subs	r3, #1
 800da20:	4a2d      	ldr	r2, [pc, #180]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da24:	78fb      	ldrb	r3, [r7, #3]
 800da26:	b2db      	uxtb	r3, r3
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da2e:	78fb      	ldrb	r3, [r7, #3]
 800da30:	b2db      	uxtb	r3, r3
 800da32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da36:	2b80      	cmp	r3, #128	@ 0x80
 800da38:	d0ef      	beq.n	800da1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da3a:	4b27      	ldr	r3, [pc, #156]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f1c3 0307 	rsb	r3, r3, #7
 800da42:	2b04      	cmp	r3, #4
 800da44:	d00b      	beq.n	800da5e <xPortStartScheduler+0xbe>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	60bb      	str	r3, [r7, #8]
}
 800da58:	bf00      	nop
 800da5a:	bf00      	nop
 800da5c:	e7fd      	b.n	800da5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	021b      	lsls	r3, r3, #8
 800da64:	4a1c      	ldr	r2, [pc, #112]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da68:	4b1b      	ldr	r3, [pc, #108]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da70:	4a19      	ldr	r2, [pc, #100]	@ (800dad8 <xPortStartScheduler+0x138>)
 800da72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	b2da      	uxtb	r2, r3
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da7c:	4b17      	ldr	r3, [pc, #92]	@ (800dadc <xPortStartScheduler+0x13c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a16      	ldr	r2, [pc, #88]	@ (800dadc <xPortStartScheduler+0x13c>)
 800da82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800da86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da88:	4b14      	ldr	r3, [pc, #80]	@ (800dadc <xPortStartScheduler+0x13c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a13      	ldr	r2, [pc, #76]	@ (800dadc <xPortStartScheduler+0x13c>)
 800da8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800da92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da94:	f000 f8da 	bl	800dc4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da98:	4b11      	ldr	r3, [pc, #68]	@ (800dae0 <xPortStartScheduler+0x140>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da9e:	f000 f8f9 	bl	800dc94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800daa2:	4b10      	ldr	r3, [pc, #64]	@ (800dae4 <xPortStartScheduler+0x144>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a0f      	ldr	r2, [pc, #60]	@ (800dae4 <xPortStartScheduler+0x144>)
 800daa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800daac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800daae:	f7ff ff63 	bl	800d978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dab2:	f7fe fc21 	bl	800c2f8 <vTaskSwitchContext>
	prvTaskExitError();
 800dab6:	f7ff ff17 	bl	800d8e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	e000ed00 	.word	0xe000ed00
 800dac8:	410fc271 	.word	0x410fc271
 800dacc:	410fc270 	.word	0x410fc270
 800dad0:	e000e400 	.word	0xe000e400
 800dad4:	2000dec4 	.word	0x2000dec4
 800dad8:	2000dec8 	.word	0x2000dec8
 800dadc:	e000ed20 	.word	0xe000ed20
 800dae0:	20000028 	.word	0x20000028
 800dae4:	e000ef34 	.word	0xe000ef34

0800dae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
	__asm volatile
 800daee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	607b      	str	r3, [r7, #4]
}
 800db00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db02:	4b10      	ldr	r3, [pc, #64]	@ (800db44 <vPortEnterCritical+0x5c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3301      	adds	r3, #1
 800db08:	4a0e      	ldr	r2, [pc, #56]	@ (800db44 <vPortEnterCritical+0x5c>)
 800db0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db0c:	4b0d      	ldr	r3, [pc, #52]	@ (800db44 <vPortEnterCritical+0x5c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d110      	bne.n	800db36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db14:	4b0c      	ldr	r3, [pc, #48]	@ (800db48 <vPortEnterCritical+0x60>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00b      	beq.n	800db36 <vPortEnterCritical+0x4e>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	603b      	str	r3, [r7, #0]
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	e7fd      	b.n	800db32 <vPortEnterCritical+0x4a>
	}
}
 800db36:	bf00      	nop
 800db38:	370c      	adds	r7, #12
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	20000028 	.word	0x20000028
 800db48:	e000ed04 	.word	0xe000ed04

0800db4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db52:	4b12      	ldr	r3, [pc, #72]	@ (800db9c <vPortExitCritical+0x50>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d10b      	bne.n	800db72 <vPortExitCritical+0x26>
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	607b      	str	r3, [r7, #4]
}
 800db6c:	bf00      	nop
 800db6e:	bf00      	nop
 800db70:	e7fd      	b.n	800db6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db72:	4b0a      	ldr	r3, [pc, #40]	@ (800db9c <vPortExitCritical+0x50>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	3b01      	subs	r3, #1
 800db78:	4a08      	ldr	r2, [pc, #32]	@ (800db9c <vPortExitCritical+0x50>)
 800db7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db7c:	4b07      	ldr	r3, [pc, #28]	@ (800db9c <vPortExitCritical+0x50>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d105      	bne.n	800db90 <vPortExitCritical+0x44>
 800db84:	2300      	movs	r3, #0
 800db86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f383 8811 	msr	BASEPRI, r3
}
 800db8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	20000028 	.word	0x20000028

0800dba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dba0:	f3ef 8009 	mrs	r0, PSP
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	4b15      	ldr	r3, [pc, #84]	@ (800dc00 <pxCurrentTCBConst>)
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	f01e 0f10 	tst.w	lr, #16
 800dbb0:	bf08      	it	eq
 800dbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbba:	6010      	str	r0, [r2, #0]
 800dbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dbc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dbc4:	f380 8811 	msr	BASEPRI, r0
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f7fe fb92 	bl	800c2f8 <vTaskSwitchContext>
 800dbd4:	f04f 0000 	mov.w	r0, #0
 800dbd8:	f380 8811 	msr	BASEPRI, r0
 800dbdc:	bc09      	pop	{r0, r3}
 800dbde:	6819      	ldr	r1, [r3, #0]
 800dbe0:	6808      	ldr	r0, [r1, #0]
 800dbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe6:	f01e 0f10 	tst.w	lr, #16
 800dbea:	bf08      	it	eq
 800dbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dbf0:	f380 8809 	msr	PSP, r0
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	f3af 8000 	nop.w

0800dc00 <pxCurrentTCBConst>:
 800dc00:	2000d898 	.word	0x2000d898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop

0800dc08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	607b      	str	r3, [r7, #4]
}
 800dc20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc22:	f7fe faaf 	bl	800c184 <xTaskIncrementTick>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d003      	beq.n	800dc34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc2c:	4b06      	ldr	r3, [pc, #24]	@ (800dc48 <xPortSysTickHandler+0x40>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	2300      	movs	r3, #0
 800dc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	f383 8811 	msr	BASEPRI, r3
}
 800dc3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc40:	bf00      	nop
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	e000ed04 	.word	0xe000ed04

0800dc4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc50:	4b0b      	ldr	r3, [pc, #44]	@ (800dc80 <vPortSetupTimerInterrupt+0x34>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc56:	4b0b      	ldr	r3, [pc, #44]	@ (800dc84 <vPortSetupTimerInterrupt+0x38>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc88 <vPortSetupTimerInterrupt+0x3c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a0a      	ldr	r2, [pc, #40]	@ (800dc8c <vPortSetupTimerInterrupt+0x40>)
 800dc62:	fba2 2303 	umull	r2, r3, r2, r3
 800dc66:	099b      	lsrs	r3, r3, #6
 800dc68:	4a09      	ldr	r2, [pc, #36]	@ (800dc90 <vPortSetupTimerInterrupt+0x44>)
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc6e:	4b04      	ldr	r3, [pc, #16]	@ (800dc80 <vPortSetupTimerInterrupt+0x34>)
 800dc70:	2207      	movs	r2, #7
 800dc72:	601a      	str	r2, [r3, #0]
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	e000e010 	.word	0xe000e010
 800dc84:	e000e018 	.word	0xe000e018
 800dc88:	2000001c 	.word	0x2000001c
 800dc8c:	10624dd3 	.word	0x10624dd3
 800dc90:	e000e014 	.word	0xe000e014

0800dc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dca4 <vPortEnableVFP+0x10>
 800dc98:	6801      	ldr	r1, [r0, #0]
 800dc9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dc9e:	6001      	str	r1, [r0, #0]
 800dca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dca2:	bf00      	nop
 800dca4:	e000ed88 	.word	0xe000ed88

0800dca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dcae:	f3ef 8305 	mrs	r3, IPSR
 800dcb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b0f      	cmp	r3, #15
 800dcb8:	d915      	bls.n	800dce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcba:	4a18      	ldr	r2, [pc, #96]	@ (800dd1c <vPortValidateInterruptPriority+0x74>)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dcc4:	4b16      	ldr	r3, [pc, #88]	@ (800dd20 <vPortValidateInterruptPriority+0x78>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	7afa      	ldrb	r2, [r7, #11]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d20b      	bcs.n	800dce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	607b      	str	r3, [r7, #4]
}
 800dce0:	bf00      	nop
 800dce2:	bf00      	nop
 800dce4:	e7fd      	b.n	800dce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dce6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd24 <vPortValidateInterruptPriority+0x7c>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dcee:	4b0e      	ldr	r3, [pc, #56]	@ (800dd28 <vPortValidateInterruptPriority+0x80>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d90b      	bls.n	800dd0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	603b      	str	r3, [r7, #0]
}
 800dd08:	bf00      	nop
 800dd0a:	bf00      	nop
 800dd0c:	e7fd      	b.n	800dd0a <vPortValidateInterruptPriority+0x62>
	}
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	e000e3f0 	.word	0xe000e3f0
 800dd20:	2000dec4 	.word	0x2000dec4
 800dd24:	e000ed0c 	.word	0xe000ed0c
 800dd28:	2000dec8 	.word	0x2000dec8

0800dd2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08a      	sub	sp, #40	@ 0x28
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd34:	2300      	movs	r3, #0
 800dd36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd38:	f7fe f968 	bl	800c00c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd3c:	4b5c      	ldr	r3, [pc, #368]	@ (800deb0 <pvPortMalloc+0x184>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd44:	f000 f924 	bl	800df90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd48:	4b5a      	ldr	r3, [pc, #360]	@ (800deb4 <pvPortMalloc+0x188>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4013      	ands	r3, r2
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f040 8095 	bne.w	800de80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01e      	beq.n	800dd9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dd5c:	2208      	movs	r2, #8
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4413      	add	r3, r2
 800dd62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f003 0307 	and.w	r3, r3, #7
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d015      	beq.n	800dd9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f023 0307 	bic.w	r3, r3, #7
 800dd74:	3308      	adds	r3, #8
 800dd76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f003 0307 	and.w	r3, r3, #7
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00b      	beq.n	800dd9a <pvPortMalloc+0x6e>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	617b      	str	r3, [r7, #20]
}
 800dd94:	bf00      	nop
 800dd96:	bf00      	nop
 800dd98:	e7fd      	b.n	800dd96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d06f      	beq.n	800de80 <pvPortMalloc+0x154>
 800dda0:	4b45      	ldr	r3, [pc, #276]	@ (800deb8 <pvPortMalloc+0x18c>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d86a      	bhi.n	800de80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddaa:	4b44      	ldr	r3, [pc, #272]	@ (800debc <pvPortMalloc+0x190>)
 800ddac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ddae:	4b43      	ldr	r3, [pc, #268]	@ (800debc <pvPortMalloc+0x190>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddb4:	e004      	b.n	800ddc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d903      	bls.n	800ddd2 <pvPortMalloc+0xa6>
 800ddca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1f1      	bne.n	800ddb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddd2:	4b37      	ldr	r3, [pc, #220]	@ (800deb0 <pvPortMalloc+0x184>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d051      	beq.n	800de80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2208      	movs	r2, #8
 800dde2:	4413      	add	r3, r2
 800dde4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	6a3b      	ldr	r3, [r7, #32]
 800ddec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ddee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	1ad2      	subs	r2, r2, r3
 800ddf6:	2308      	movs	r3, #8
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d920      	bls.n	800de40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ddfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4413      	add	r3, r2
 800de04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	f003 0307 	and.w	r3, r3, #7
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00b      	beq.n	800de28 <pvPortMalloc+0xfc>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	613b      	str	r3, [r7, #16]
}
 800de22:	bf00      	nop
 800de24:	bf00      	nop
 800de26:	e7fd      	b.n	800de24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de3a:	69b8      	ldr	r0, [r7, #24]
 800de3c:	f000 f90a 	bl	800e054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de40:	4b1d      	ldr	r3, [pc, #116]	@ (800deb8 <pvPortMalloc+0x18c>)
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	4a1b      	ldr	r2, [pc, #108]	@ (800deb8 <pvPortMalloc+0x18c>)
 800de4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de4e:	4b1a      	ldr	r3, [pc, #104]	@ (800deb8 <pvPortMalloc+0x18c>)
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	4b1b      	ldr	r3, [pc, #108]	@ (800dec0 <pvPortMalloc+0x194>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	429a      	cmp	r2, r3
 800de58:	d203      	bcs.n	800de62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de5a:	4b17      	ldr	r3, [pc, #92]	@ (800deb8 <pvPortMalloc+0x18c>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a18      	ldr	r2, [pc, #96]	@ (800dec0 <pvPortMalloc+0x194>)
 800de60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	4b13      	ldr	r3, [pc, #76]	@ (800deb4 <pvPortMalloc+0x188>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	431a      	orrs	r2, r3
 800de6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de76:	4b13      	ldr	r3, [pc, #76]	@ (800dec4 <pvPortMalloc+0x198>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3301      	adds	r3, #1
 800de7c:	4a11      	ldr	r2, [pc, #68]	@ (800dec4 <pvPortMalloc+0x198>)
 800de7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de80:	f7fe f8d2 	bl	800c028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	f003 0307 	and.w	r3, r3, #7
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00b      	beq.n	800dea6 <pvPortMalloc+0x17a>
	__asm volatile
 800de8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de92:	f383 8811 	msr	BASEPRI, r3
 800de96:	f3bf 8f6f 	isb	sy
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	60fb      	str	r3, [r7, #12]
}
 800dea0:	bf00      	nop
 800dea2:	bf00      	nop
 800dea4:	e7fd      	b.n	800dea2 <pvPortMalloc+0x176>
	return pvReturn;
 800dea6:	69fb      	ldr	r3, [r7, #28]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3728      	adds	r7, #40	@ 0x28
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	20015404 	.word	0x20015404
 800deb4:	20015418 	.word	0x20015418
 800deb8:	20015408 	.word	0x20015408
 800debc:	200153fc 	.word	0x200153fc
 800dec0:	2001540c 	.word	0x2001540c
 800dec4:	20015410 	.word	0x20015410

0800dec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d04f      	beq.n	800df7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800deda:	2308      	movs	r3, #8
 800dedc:	425b      	negs	r3, r3
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	4413      	add	r3, r2
 800dee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	685a      	ldr	r2, [r3, #4]
 800deec:	4b25      	ldr	r3, [pc, #148]	@ (800df84 <vPortFree+0xbc>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4013      	ands	r3, r2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10b      	bne.n	800df0e <vPortFree+0x46>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	60fb      	str	r3, [r7, #12]
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	e7fd      	b.n	800df0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00b      	beq.n	800df2e <vPortFree+0x66>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	60bb      	str	r3, [r7, #8]
}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	e7fd      	b.n	800df2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	4b14      	ldr	r3, [pc, #80]	@ (800df84 <vPortFree+0xbc>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4013      	ands	r3, r2
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01e      	beq.n	800df7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d11a      	bne.n	800df7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	4b0e      	ldr	r3, [pc, #56]	@ (800df84 <vPortFree+0xbc>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	43db      	mvns	r3, r3
 800df4e:	401a      	ands	r2, r3
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df54:	f7fe f85a 	bl	800c00c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	4b0a      	ldr	r3, [pc, #40]	@ (800df88 <vPortFree+0xc0>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4413      	add	r3, r2
 800df62:	4a09      	ldr	r2, [pc, #36]	@ (800df88 <vPortFree+0xc0>)
 800df64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df66:	6938      	ldr	r0, [r7, #16]
 800df68:	f000 f874 	bl	800e054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df6c:	4b07      	ldr	r3, [pc, #28]	@ (800df8c <vPortFree+0xc4>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	4a06      	ldr	r2, [pc, #24]	@ (800df8c <vPortFree+0xc4>)
 800df74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df76:	f7fe f857 	bl	800c028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df7a:	bf00      	nop
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20015418 	.word	0x20015418
 800df88:	20015408 	.word	0x20015408
 800df8c:	20015414 	.word	0x20015414

0800df90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df96:	f247 5330 	movw	r3, #30000	@ 0x7530
 800df9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df9c:	4b27      	ldr	r3, [pc, #156]	@ (800e03c <prvHeapInit+0xac>)
 800df9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f003 0307 	and.w	r3, r3, #7
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00c      	beq.n	800dfc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3307      	adds	r3, #7
 800dfae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f023 0307 	bic.w	r3, r3, #7
 800dfb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	4a1f      	ldr	r2, [pc, #124]	@ (800e03c <prvHeapInit+0xac>)
 800dfc0:	4413      	add	r3, r2
 800dfc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfc8:	4a1d      	ldr	r2, [pc, #116]	@ (800e040 <prvHeapInit+0xb0>)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfce:	4b1c      	ldr	r3, [pc, #112]	@ (800e040 <prvHeapInit+0xb0>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	4413      	add	r3, r2
 800dfda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dfdc:	2208      	movs	r2, #8
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	1a9b      	subs	r3, r3, r2
 800dfe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f023 0307 	bic.w	r3, r3, #7
 800dfea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4a15      	ldr	r2, [pc, #84]	@ (800e044 <prvHeapInit+0xb4>)
 800dff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dff2:	4b14      	ldr	r3, [pc, #80]	@ (800e044 <prvHeapInit+0xb4>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2200      	movs	r2, #0
 800dff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dffa:	4b12      	ldr	r3, [pc, #72]	@ (800e044 <prvHeapInit+0xb4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	1ad2      	subs	r2, r2, r3
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e010:	4b0c      	ldr	r3, [pc, #48]	@ (800e044 <prvHeapInit+0xb4>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	4a0a      	ldr	r2, [pc, #40]	@ (800e048 <prvHeapInit+0xb8>)
 800e01e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	4a09      	ldr	r2, [pc, #36]	@ (800e04c <prvHeapInit+0xbc>)
 800e026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e028:	4b09      	ldr	r3, [pc, #36]	@ (800e050 <prvHeapInit+0xc0>)
 800e02a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e02e:	601a      	str	r2, [r3, #0]
}
 800e030:	bf00      	nop
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr
 800e03c:	2000decc 	.word	0x2000decc
 800e040:	200153fc 	.word	0x200153fc
 800e044:	20015404 	.word	0x20015404
 800e048:	2001540c 	.word	0x2001540c
 800e04c:	20015408 	.word	0x20015408
 800e050:	20015418 	.word	0x20015418

0800e054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e05c:	4b28      	ldr	r3, [pc, #160]	@ (800e100 <prvInsertBlockIntoFreeList+0xac>)
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	e002      	b.n	800e068 <prvInsertBlockIntoFreeList+0x14>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d8f7      	bhi.n	800e062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	4413      	add	r3, r2
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	429a      	cmp	r2, r3
 800e082:	d108      	bne.n	800e096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	441a      	add	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	441a      	add	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d118      	bne.n	800e0dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	4b15      	ldr	r3, [pc, #84]	@ (800e104 <prvInsertBlockIntoFreeList+0xb0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d00d      	beq.n	800e0d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685a      	ldr	r2, [r3, #4]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	441a      	add	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	e008      	b.n	800e0e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e104 <prvInsertBlockIntoFreeList+0xb0>)
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	e003      	b.n	800e0e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d002      	beq.n	800e0f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0f2:	bf00      	nop
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	200153fc 	.word	0x200153fc
 800e104:	20015404 	.word	0x20015404

0800e108 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e108:	4b04      	ldr	r3, [pc, #16]	@ (800e11c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	b10a      	cbz	r2, 800e112 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xa>
 800e10e:	4803      	ldr	r0, [pc, #12]	@ (800e11c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e110:	4770      	bx	lr
 800e112:	4a03      	ldr	r2, [pc, #12]	@ (800e120 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x18>)
 800e114:	4801      	ldr	r0, [pc, #4]	@ (800e11c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e116:	6812      	ldr	r2, [r2, #0]
 800e118:	601a      	str	r2, [r3, #0]
 800e11a:	4770      	bx	lr
 800e11c:	2000002c 	.word	0x2000002c
 800e120:	2000019c 	.word	0x2000019c

0800e124 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e124:	4a02      	ldr	r2, [pc, #8]	@ (800e130 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xc>)
 800e126:	4b03      	ldr	r3, [pc, #12]	@ (800e134 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x10>)
 800e128:	6812      	ldr	r2, [r2, #0]
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	2000019c 	.word	0x2000019c
 800e134:	2000002c 	.word	0x2000002c

0800e138 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__position>:
 800e138:	6840      	ldr	r0, [r0, #4]
 800e13a:	4770      	bx	lr

0800e13c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__position>:
 800e13c:	6800      	ldr	r0, [r0, #0]
 800e13e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e142:	4770      	bx	lr

0800e144 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__position>:
 800e144:	6803      	ldr	r3, [r0, #0]
 800e146:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e14a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e14e:	e9c2 0100 	strd	r0, r1, [r2]
 800e152:	4770      	bx	lr

0800e154 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__position>:
 800e154:	6803      	ldr	r3, [r0, #0]
 800e156:	ed92 7b00 	vldr	d7, [r2]
 800e15a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e15e:	ed83 7b00 	vstr	d7, [r3]
 800e162:	4770      	bx	lr

0800e164 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_init_function>:
 800e164:	f004 bc7e 	b.w	8012a64 <actuator_msgs__msg__Actuators__init>

0800e168 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_fini_function>:
 800e168:	f004 bccc 	b.w	8012b04 <actuator_msgs__msg__Actuators__fini>

0800e16c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__position>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4604      	mov	r4, r0
 800e170:	460d      	mov	r5, r1
 800e172:	f004 f9b5 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 800e176:	4629      	mov	r1, r5
 800e178:	4620      	mov	r0, r4
 800e17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e17e:	f004 b995 	b.w	80124ac <rosidl_runtime_c__double__Sequence__init>
 800e182:	bf00      	nop

0800e184 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__normalized>:
 800e184:	6840      	ldr	r0, [r0, #4]
 800e186:	4770      	bx	lr

0800e188 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__velocity>:
 800e188:	6840      	ldr	r0, [r0, #4]
 800e18a:	4770      	bx	lr

0800e18c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__velocity>:
 800e18c:	6800      	ldr	r0, [r0, #0]
 800e18e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e192:	4770      	bx	lr

0800e194 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__position>:
 800e194:	6800      	ldr	r0, [r0, #0]
 800e196:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e19a:	4770      	bx	lr

0800e19c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__normalized>:
 800e19c:	6800      	ldr	r0, [r0, #0]
 800e19e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e1a2:	4770      	bx	lr

0800e1a4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__normalized>:
 800e1a4:	6800      	ldr	r0, [r0, #0]
 800e1a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e1aa:	4770      	bx	lr

0800e1ac <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__velocity>:
 800e1ac:	6800      	ldr	r0, [r0, #0]
 800e1ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e1b2:	4770      	bx	lr

0800e1b4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__normalized>:
 800e1b4:	6803      	ldr	r3, [r0, #0]
 800e1b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e1ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1be:	e9c2 0100 	strd	r0, r1, [r2]
 800e1c2:	4770      	bx	lr

0800e1c4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__normalized>:
 800e1c4:	6803      	ldr	r3, [r0, #0]
 800e1c6:	ed92 7b00 	vldr	d7, [r2]
 800e1ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e1ce:	ed83 7b00 	vstr	d7, [r3]
 800e1d2:	4770      	bx	lr

0800e1d4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__velocity>:
 800e1d4:	6803      	ldr	r3, [r0, #0]
 800e1d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e1da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1de:	e9c2 0100 	strd	r0, r1, [r2]
 800e1e2:	4770      	bx	lr

0800e1e4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__velocity>:
 800e1e4:	6803      	ldr	r3, [r0, #0]
 800e1e6:	ed92 7b00 	vldr	d7, [r2]
 800e1ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e1ee:	ed83 7b00 	vstr	d7, [r3]
 800e1f2:	4770      	bx	lr

0800e1f4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__normalized>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	460d      	mov	r5, r1
 800e1fa:	f004 f971 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 800e1fe:	4629      	mov	r1, r5
 800e200:	4620      	mov	r0, r4
 800e202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e206:	f004 b951 	b.w	80124ac <rosidl_runtime_c__double__Sequence__init>
 800e20a:	bf00      	nop

0800e20c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__velocity>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	f004 f965 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 800e216:	4629      	mov	r1, r5
 800e218:	4620      	mov	r0, r4
 800e21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e21e:	f004 b945 	b.w	80124ac <rosidl_runtime_c__double__Sequence__init>
 800e222:	bf00      	nop

0800e224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e224:	b508      	push	{r3, lr}
 800e226:	f004 fb17 	bl	8012858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e22a:	4b06      	ldr	r3, [pc, #24]	@ (800e244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e22c:	4906      	ldr	r1, [pc, #24]	@ (800e248 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x24>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	60c8      	str	r0, [r1, #12]
 800e232:	b10a      	cbz	r2, 800e238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>
 800e234:	4803      	ldr	r0, [pc, #12]	@ (800e244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e236:	bd08      	pop	{r3, pc}
 800e238:	4a04      	ldr	r2, [pc, #16]	@ (800e24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x28>)
 800e23a:	4802      	ldr	r0, [pc, #8]	@ (800e244 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e23c:	6812      	ldr	r2, [r2, #0]
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	bd08      	pop	{r3, pc}
 800e242:	bf00      	nop
 800e244:	2000004c 	.word	0x2000004c
 800e248:	20000064 	.word	0x20000064
 800e24c:	200001a0 	.word	0x200001a0

0800e250 <_Actuators__max_serialized_size>:
 800e250:	b500      	push	{lr}
 800e252:	b083      	sub	sp, #12
 800e254:	2301      	movs	r3, #1
 800e256:	2100      	movs	r1, #0
 800e258:	f10d 0007 	add.w	r0, sp, #7
 800e25c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e260:	f004 fb96 	bl	8012990 <max_serialized_size_std_msgs__msg__Header>
 800e264:	b003      	add	sp, #12
 800e266:	f85d fb04 	ldr.w	pc, [sp], #4
 800e26a:	bf00      	nop

0800e26c <get_serialized_size_actuator_msgs__msg__Actuators>:
 800e26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e270:	4606      	mov	r6, r0
 800e272:	b1f8      	cbz	r0, 800e2b4 <get_serialized_size_actuator_msgs__msg__Actuators+0x48>
 800e274:	460d      	mov	r5, r1
 800e276:	f004 fb13 	bl	80128a0 <get_serialized_size_std_msgs__msg__Header>
 800e27a:	182f      	adds	r7, r5, r0
 800e27c:	2104      	movs	r1, #4
 800e27e:	4638      	mov	r0, r7
 800e280:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800e284:	f000 f94a 	bl	800e51c <ucdr_alignment>
 800e288:	1d04      	adds	r4, r0, #4
 800e28a:	443c      	add	r4, r7
 800e28c:	f1b8 0f00 	cmp.w	r8, #0
 800e290:	d122      	bne.n	800e2d8 <get_serialized_size_actuator_msgs__msg__Actuators+0x6c>
 800e292:	4620      	mov	r0, r4
 800e294:	2104      	movs	r1, #4
 800e296:	6a77      	ldr	r7, [r6, #36]	@ 0x24
 800e298:	f000 f940 	bl	800e51c <ucdr_alignment>
 800e29c:	4404      	add	r4, r0
 800e29e:	3404      	adds	r4, #4
 800e2a0:	b997      	cbnz	r7, 800e2c8 <get_serialized_size_actuator_msgs__msg__Actuators+0x5c>
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	2104      	movs	r1, #4
 800e2a6:	6b36      	ldr	r6, [r6, #48]	@ 0x30
 800e2a8:	f000 f938 	bl	800e51c <ucdr_alignment>
 800e2ac:	4404      	add	r4, r0
 800e2ae:	3404      	adds	r4, #4
 800e2b0:	b916      	cbnz	r6, 800e2b8 <get_serialized_size_actuator_msgs__msg__Actuators+0x4c>
 800e2b2:	1b60      	subs	r0, r4, r5
 800e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	2108      	movs	r1, #8
 800e2bc:	f000 f92e 	bl	800e51c <ucdr_alignment>
 800e2c0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e2c4:	1984      	adds	r4, r0, r6
 800e2c6:	e7f4      	b.n	800e2b2 <get_serialized_size_actuator_msgs__msg__Actuators+0x46>
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	2108      	movs	r1, #8
 800e2cc:	f000 f926 	bl	800e51c <ucdr_alignment>
 800e2d0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 800e2d4:	4404      	add	r4, r0
 800e2d6:	e7e4      	b.n	800e2a2 <get_serialized_size_actuator_msgs__msg__Actuators+0x36>
 800e2d8:	4620      	mov	r0, r4
 800e2da:	2108      	movs	r1, #8
 800e2dc:	f000 f91e 	bl	800e51c <ucdr_alignment>
 800e2e0:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 800e2e4:	4404      	add	r4, r0
 800e2e6:	e7d4      	b.n	800e292 <get_serialized_size_actuator_msgs__msg__Actuators+0x26>

0800e2e8 <_Actuators__cdr_deserialize>:
 800e2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	b083      	sub	sp, #12
 800e2ee:	2900      	cmp	r1, #0
 800e2f0:	d04e      	beq.n	800e390 <_Actuators__cdr_deserialize+0xa8>
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	f004 fb56 	bl	80129a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e2f8:	6843      	ldr	r3, [r0, #4]
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	4628      	mov	r0, r5
 800e300:	4798      	blx	r3
 800e302:	69e6      	ldr	r6, [r4, #28]
 800e304:	6961      	ldr	r1, [r4, #20]
 800e306:	ab01      	add	r3, sp, #4
 800e308:	4632      	mov	r2, r6
 800e30a:	4628      	mov	r0, r5
 800e30c:	f000 f9e0 	bl	800e6d0 <ucdr_deserialize_sequence_double>
 800e310:	9b01      	ldr	r3, [sp, #4]
 800e312:	b9c8      	cbnz	r0, 800e348 <_Actuators__cdr_deserialize+0x60>
 800e314:	429e      	cmp	r6, r3
 800e316:	d33f      	bcc.n	800e398 <_Actuators__cdr_deserialize+0xb0>
 800e318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e31a:	6a21      	ldr	r1, [r4, #32]
 800e31c:	ab01      	add	r3, sp, #4
 800e31e:	4632      	mov	r2, r6
 800e320:	4628      	mov	r0, r5
 800e322:	f000 f9d5 	bl	800e6d0 <ucdr_deserialize_sequence_double>
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	b310      	cbz	r0, 800e370 <_Actuators__cdr_deserialize+0x88>
 800e32a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e32c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800e32e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e330:	ab01      	add	r3, sp, #4
 800e332:	463a      	mov	r2, r7
 800e334:	4628      	mov	r0, r5
 800e336:	f000 f9cb 	bl	800e6d0 <ucdr_deserialize_sequence_double>
 800e33a:	9b01      	ldr	r3, [sp, #4]
 800e33c:	4606      	mov	r6, r0
 800e33e:	b128      	cbz	r0, 800e34c <_Actuators__cdr_deserialize+0x64>
 800e340:	6323      	str	r3, [r4, #48]	@ 0x30
 800e342:	4630      	mov	r0, r6
 800e344:	b003      	add	sp, #12
 800e346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e348:	61a3      	str	r3, [r4, #24]
 800e34a:	e7e5      	b.n	800e318 <_Actuators__cdr_deserialize+0x30>
 800e34c:	429f      	cmp	r7, r3
 800e34e:	d2f8      	bcs.n	800e342 <_Actuators__cdr_deserialize+0x5a>
 800e350:	2301      	movs	r3, #1
 800e352:	75a8      	strb	r0, [r5, #22]
 800e354:	756b      	strb	r3, [r5, #21]
 800e356:	2108      	movs	r1, #8
 800e358:	6320      	str	r0, [r4, #48]	@ 0x30
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 f8f4 	bl	800e548 <ucdr_align_to>
 800e360:	9901      	ldr	r1, [sp, #4]
 800e362:	4628      	mov	r0, r5
 800e364:	00c9      	lsls	r1, r1, #3
 800e366:	f000 f925 	bl	800e5b4 <ucdr_advance_buffer>
 800e36a:	4630      	mov	r0, r6
 800e36c:	b003      	add	sp, #12
 800e36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e370:	429e      	cmp	r6, r3
 800e372:	d2db      	bcs.n	800e32c <_Actuators__cdr_deserialize+0x44>
 800e374:	2301      	movs	r3, #1
 800e376:	75a8      	strb	r0, [r5, #22]
 800e378:	756b      	strb	r3, [r5, #21]
 800e37a:	2108      	movs	r1, #8
 800e37c:	6260      	str	r0, [r4, #36]	@ 0x24
 800e37e:	4628      	mov	r0, r5
 800e380:	f000 f8e2 	bl	800e548 <ucdr_align_to>
 800e384:	9901      	ldr	r1, [sp, #4]
 800e386:	4628      	mov	r0, r5
 800e388:	00c9      	lsls	r1, r1, #3
 800e38a:	f000 f913 	bl	800e5b4 <ucdr_advance_buffer>
 800e38e:	e7cd      	b.n	800e32c <_Actuators__cdr_deserialize+0x44>
 800e390:	460e      	mov	r6, r1
 800e392:	4630      	mov	r0, r6
 800e394:	b003      	add	sp, #12
 800e396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e398:	2301      	movs	r3, #1
 800e39a:	75a8      	strb	r0, [r5, #22]
 800e39c:	756b      	strb	r3, [r5, #21]
 800e39e:	2108      	movs	r1, #8
 800e3a0:	61a0      	str	r0, [r4, #24]
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f8d0 	bl	800e548 <ucdr_align_to>
 800e3a8:	9901      	ldr	r1, [sp, #4]
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	00c9      	lsls	r1, r1, #3
 800e3ae:	f000 f901 	bl	800e5b4 <ucdr_advance_buffer>
 800e3b2:	e7b1      	b.n	800e318 <_Actuators__cdr_deserialize+0x30>

0800e3b4 <_Actuators__cdr_serialize>:
 800e3b4:	b1d0      	cbz	r0, 800e3ec <_Actuators__cdr_serialize+0x38>
 800e3b6:	b538      	push	{r3, r4, r5, lr}
 800e3b8:	460d      	mov	r5, r1
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	f004 faf2 	bl	80129a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e3c0:	6843      	ldr	r3, [r0, #4]
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4798      	blx	r3
 800e3ca:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f000 f96c 	bl	800e6ac <ucdr_serialize_sequence_double>
 800e3d4:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f000 f967 	bl	800e6ac <ucdr_serialize_sequence_double>
 800e3de:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3e8:	f000 b960 	b.w	800e6ac <ucdr_serialize_sequence_double>
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop

0800e3f0 <_Actuators__get_serialized_size>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	b1d0      	cbz	r0, 800e42c <_Actuators__get_serialized_size+0x3c>
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	f004 fa52 	bl	80128a0 <get_serialized_size_std_msgs__msg__Header>
 800e3fc:	2104      	movs	r1, #4
 800e3fe:	4604      	mov	r4, r0
 800e400:	69ae      	ldr	r6, [r5, #24]
 800e402:	f000 f88b 	bl	800e51c <ucdr_alignment>
 800e406:	4404      	add	r4, r0
 800e408:	3404      	adds	r4, #4
 800e40a:	bb16      	cbnz	r6, 800e452 <_Actuators__get_serialized_size+0x62>
 800e40c:	4620      	mov	r0, r4
 800e40e:	2104      	movs	r1, #4
 800e410:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800e412:	f000 f883 	bl	800e51c <ucdr_alignment>
 800e416:	4404      	add	r4, r0
 800e418:	3404      	adds	r4, #4
 800e41a:	b996      	cbnz	r6, 800e442 <_Actuators__get_serialized_size+0x52>
 800e41c:	4620      	mov	r0, r4
 800e41e:	2104      	movs	r1, #4
 800e420:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 800e422:	f000 f87b 	bl	800e51c <ucdr_alignment>
 800e426:	4404      	add	r4, r0
 800e428:	1d25      	adds	r5, r4, #4
 800e42a:	b90e      	cbnz	r6, 800e430 <_Actuators__get_serialized_size+0x40>
 800e42c:	4628      	mov	r0, r5
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	2108      	movs	r1, #8
 800e432:	4628      	mov	r0, r5
 800e434:	f000 f872 	bl	800e51c <ucdr_alignment>
 800e438:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 800e43c:	4405      	add	r5, r0
 800e43e:	4628      	mov	r0, r5
 800e440:	bd70      	pop	{r4, r5, r6, pc}
 800e442:	4620      	mov	r0, r4
 800e444:	2108      	movs	r1, #8
 800e446:	f000 f869 	bl	800e51c <ucdr_alignment>
 800e44a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e44e:	4404      	add	r4, r0
 800e450:	e7e4      	b.n	800e41c <_Actuators__get_serialized_size+0x2c>
 800e452:	4620      	mov	r0, r4
 800e454:	2108      	movs	r1, #8
 800e456:	f000 f861 	bl	800e51c <ucdr_alignment>
 800e45a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e45e:	4404      	add	r4, r0
 800e460:	e7d4      	b.n	800e40c <_Actuators__get_serialized_size+0x1c>
 800e462:	bf00      	nop

0800e464 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e464:	4800      	ldr	r0, [pc, #0]	@ (800e468 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x4>)
 800e466:	4770      	bx	lr
 800e468:	20000154 	.word	0x20000154

0800e46c <ucdr_check_buffer_available_for>:
 800e46c:	7d83      	ldrb	r3, [r0, #22]
 800e46e:	b93b      	cbnz	r3, 800e480 <ucdr_check_buffer_available_for+0x14>
 800e470:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e474:	440b      	add	r3, r1
 800e476:	4298      	cmp	r0, r3
 800e478:	bf34      	ite	cc
 800e47a:	2000      	movcc	r0, #0
 800e47c:	2001      	movcs	r0, #1
 800e47e:	4770      	bx	lr
 800e480:	2000      	movs	r0, #0
 800e482:	4770      	bx	lr

0800e484 <ucdr_check_final_buffer_behavior>:
 800e484:	7d83      	ldrb	r3, [r0, #22]
 800e486:	b943      	cbnz	r3, 800e49a <ucdr_check_final_buffer_behavior+0x16>
 800e488:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e48c:	4291      	cmp	r1, r2
 800e48e:	b510      	push	{r4, lr}
 800e490:	4604      	mov	r4, r0
 800e492:	d205      	bcs.n	800e4a0 <ucdr_check_final_buffer_behavior+0x1c>
 800e494:	2301      	movs	r3, #1
 800e496:	4618      	mov	r0, r3
 800e498:	bd10      	pop	{r4, pc}
 800e49a:	2300      	movs	r3, #0
 800e49c:	4618      	mov	r0, r3
 800e49e:	4770      	bx	lr
 800e4a0:	6982      	ldr	r2, [r0, #24]
 800e4a2:	b13a      	cbz	r2, 800e4b4 <ucdr_check_final_buffer_behavior+0x30>
 800e4a4:	69c1      	ldr	r1, [r0, #28]
 800e4a6:	4790      	blx	r2
 800e4a8:	f080 0301 	eor.w	r3, r0, #1
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	75a0      	strb	r0, [r4, #22]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	bd10      	pop	{r4, pc}
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	75a0      	strb	r0, [r4, #22]
 800e4b8:	e7fa      	b.n	800e4b0 <ucdr_check_final_buffer_behavior+0x2c>
 800e4ba:	bf00      	nop

0800e4bc <ucdr_set_on_full_buffer_callback>:
 800e4bc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop

0800e4c4 <ucdr_init_buffer_origin_offset_endian>:
 800e4c4:	b410      	push	{r4}
 800e4c6:	9c01      	ldr	r4, [sp, #4]
 800e4c8:	6001      	str	r1, [r0, #0]
 800e4ca:	440a      	add	r2, r1
 800e4cc:	6042      	str	r2, [r0, #4]
 800e4ce:	190a      	adds	r2, r1, r4
 800e4d0:	441c      	add	r4, r3
 800e4d2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e4d6:	6082      	str	r2, [r0, #8]
 800e4d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e4dc:	7503      	strb	r3, [r0, #20]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e8:	7542      	strb	r2, [r0, #21]
 800e4ea:	7582      	strb	r2, [r0, #22]
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop

0800e4f0 <ucdr_init_buffer_origin_offset>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	9c04      	ldr	r4, [sp, #16]
 800e4f6:	9400      	str	r4, [sp, #0]
 800e4f8:	2401      	movs	r4, #1
 800e4fa:	9401      	str	r4, [sp, #4]
 800e4fc:	f7ff ffe2 	bl	800e4c4 <ucdr_init_buffer_origin_offset_endian>
 800e500:	b002      	add	sp, #8
 800e502:	bd10      	pop	{r4, pc}

0800e504 <ucdr_init_buffer_origin>:
 800e504:	b510      	push	{r4, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	2400      	movs	r4, #0
 800e50a:	9400      	str	r4, [sp, #0]
 800e50c:	f7ff fff0 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 800e510:	b002      	add	sp, #8
 800e512:	bd10      	pop	{r4, pc}

0800e514 <ucdr_init_buffer>:
 800e514:	2300      	movs	r3, #0
 800e516:	f7ff bff5 	b.w	800e504 <ucdr_init_buffer_origin>
 800e51a:	bf00      	nop

0800e51c <ucdr_alignment>:
 800e51c:	fbb0 f3f1 	udiv	r3, r0, r1
 800e520:	fb03 0011 	mls	r0, r3, r1, r0
 800e524:	1a08      	subs	r0, r1, r0
 800e526:	3901      	subs	r1, #1
 800e528:	4008      	ands	r0, r1
 800e52a:	4770      	bx	lr

0800e52c <ucdr_buffer_alignment>:
 800e52c:	7d43      	ldrb	r3, [r0, #21]
 800e52e:	428b      	cmp	r3, r1
 800e530:	d208      	bcs.n	800e544 <ucdr_buffer_alignment+0x18>
 800e532:	6900      	ldr	r0, [r0, #16]
 800e534:	fbb0 f3f1 	udiv	r3, r0, r1
 800e538:	fb01 0013 	mls	r0, r1, r3, r0
 800e53c:	1a08      	subs	r0, r1, r0
 800e53e:	3901      	subs	r1, #1
 800e540:	4008      	ands	r0, r1
 800e542:	4770      	bx	lr
 800e544:	2000      	movs	r0, #0
 800e546:	4770      	bx	lr

0800e548 <ucdr_align_to>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4604      	mov	r4, r0
 800e54c:	460d      	mov	r5, r1
 800e54e:	f7ff ffed 	bl	800e52c <ucdr_buffer_alignment>
 800e552:	68a3      	ldr	r3, [r4, #8]
 800e554:	6861      	ldr	r1, [r4, #4]
 800e556:	6922      	ldr	r2, [r4, #16]
 800e558:	7565      	strb	r5, [r4, #21]
 800e55a:	4403      	add	r3, r0
 800e55c:	428b      	cmp	r3, r1
 800e55e:	bf28      	it	cs
 800e560:	460b      	movcs	r3, r1
 800e562:	4402      	add	r2, r0
 800e564:	60a3      	str	r3, [r4, #8]
 800e566:	6122      	str	r2, [r4, #16]
 800e568:	bd38      	pop	{r3, r4, r5, pc}
 800e56a:	bf00      	nop

0800e56c <ucdr_buffer_length>:
 800e56c:	6882      	ldr	r2, [r0, #8]
 800e56e:	6800      	ldr	r0, [r0, #0]
 800e570:	1a10      	subs	r0, r2, r0
 800e572:	4770      	bx	lr

0800e574 <ucdr_buffer_remaining>:
 800e574:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e578:	1a10      	subs	r0, r2, r0
 800e57a:	4770      	bx	lr

0800e57c <ucdr_check_final_buffer_behavior_array>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	7d83      	ldrb	r3, [r0, #22]
 800e580:	b963      	cbnz	r3, 800e59c <ucdr_check_final_buffer_behavior_array+0x20>
 800e582:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e586:	429a      	cmp	r2, r3
 800e588:	4604      	mov	r4, r0
 800e58a:	460d      	mov	r5, r1
 800e58c:	d308      	bcc.n	800e5a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800e58e:	b139      	cbz	r1, 800e5a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800e590:	6983      	ldr	r3, [r0, #24]
 800e592:	b163      	cbz	r3, 800e5ae <ucdr_check_final_buffer_behavior_array+0x32>
 800e594:	69c1      	ldr	r1, [r0, #28]
 800e596:	4798      	blx	r3
 800e598:	75a0      	strb	r0, [r4, #22]
 800e59a:	b108      	cbz	r0, 800e5a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800e59c:	2000      	movs	r0, #0
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f7ff ffe7 	bl	800e574 <ucdr_buffer_remaining>
 800e5a6:	42a8      	cmp	r0, r5
 800e5a8:	bf28      	it	cs
 800e5aa:	4628      	movcs	r0, r5
 800e5ac:	bd38      	pop	{r3, r4, r5, pc}
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	7583      	strb	r3, [r0, #22]
 800e5b2:	e7f3      	b.n	800e59c <ucdr_check_final_buffer_behavior_array+0x20>

0800e5b4 <ucdr_advance_buffer>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	460d      	mov	r5, r1
 800e5ba:	f7ff ff57 	bl	800e46c <ucdr_check_buffer_available_for>
 800e5be:	b178      	cbz	r0, 800e5e0 <ucdr_advance_buffer+0x2c>
 800e5c0:	6923      	ldr	r3, [r4, #16]
 800e5c2:	68a2      	ldr	r2, [r4, #8]
 800e5c4:	442b      	add	r3, r5
 800e5c6:	6123      	str	r3, [r4, #16]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	442a      	add	r2, r5
 800e5cc:	7563      	strb	r3, [r4, #21]
 800e5ce:	60a2      	str	r2, [r4, #8]
 800e5d0:	bd38      	pop	{r3, r4, r5, pc}
 800e5d2:	68a2      	ldr	r2, [r4, #8]
 800e5d4:	6923      	ldr	r3, [r4, #16]
 800e5d6:	4402      	add	r2, r0
 800e5d8:	4403      	add	r3, r0
 800e5da:	1a2d      	subs	r5, r5, r0
 800e5dc:	60a2      	str	r2, [r4, #8]
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f7ff ffc9 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	d1f1      	bne.n	800e5d2 <ucdr_advance_buffer+0x1e>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	7563      	strb	r3, [r4, #21]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}

0800e5f4 <ucdr_serialize_sequence_char>:
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	460e      	mov	r6, r1
 800e5f8:	4615      	mov	r5, r2
 800e5fa:	7d01      	ldrb	r1, [r0, #20]
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	f005 fa0f 	bl	8013a20 <ucdr_serialize_endian_uint32_t>
 800e602:	b90d      	cbnz	r5, 800e608 <ucdr_serialize_sequence_char+0x14>
 800e604:	2001      	movs	r0, #1
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	7d21      	ldrb	r1, [r4, #20]
 800e60a:	462b      	mov	r3, r5
 800e60c:	4632      	mov	r2, r6
 800e60e:	4620      	mov	r0, r4
 800e610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e614:	f004 bca0 	b.w	8012f58 <ucdr_serialize_endian_array_char>

0800e618 <ucdr_deserialize_sequence_char>:
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	461d      	mov	r5, r3
 800e61e:	4616      	mov	r6, r2
 800e620:	460f      	mov	r7, r1
 800e622:	461a      	mov	r2, r3
 800e624:	7d01      	ldrb	r1, [r0, #20]
 800e626:	4604      	mov	r4, r0
 800e628:	f005 fb18 	bl	8013c5c <ucdr_deserialize_endian_uint32_t>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	429e      	cmp	r6, r3
 800e630:	d208      	bcs.n	800e644 <ucdr_deserialize_sequence_char+0x2c>
 800e632:	2201      	movs	r2, #1
 800e634:	75a2      	strb	r2, [r4, #22]
 800e636:	7d21      	ldrb	r1, [r4, #20]
 800e638:	463a      	mov	r2, r7
 800e63a:	4620      	mov	r0, r4
 800e63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e640:	f004 bcbc 	b.w	8012fbc <ucdr_deserialize_endian_array_char>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1f6      	bne.n	800e636 <ucdr_deserialize_sequence_char+0x1e>
 800e648:	2001      	movs	r0, #1
 800e64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e64e:	bf00      	nop

0800e650 <ucdr_serialize_sequence_uint8_t>:
 800e650:	b570      	push	{r4, r5, r6, lr}
 800e652:	460e      	mov	r6, r1
 800e654:	4615      	mov	r5, r2
 800e656:	7d01      	ldrb	r1, [r0, #20]
 800e658:	4604      	mov	r4, r0
 800e65a:	f005 f9e1 	bl	8013a20 <ucdr_serialize_endian_uint32_t>
 800e65e:	b90d      	cbnz	r5, 800e664 <ucdr_serialize_sequence_uint8_t+0x14>
 800e660:	2001      	movs	r0, #1
 800e662:	bd70      	pop	{r4, r5, r6, pc}
 800e664:	7d21      	ldrb	r1, [r4, #20]
 800e666:	462b      	mov	r3, r5
 800e668:	4632      	mov	r2, r6
 800e66a:	4620      	mov	r0, r4
 800e66c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e670:	f004 bd08 	b.w	8013084 <ucdr_serialize_endian_array_uint8_t>

0800e674 <ucdr_deserialize_sequence_uint8_t>:
 800e674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e678:	461d      	mov	r5, r3
 800e67a:	4616      	mov	r6, r2
 800e67c:	460f      	mov	r7, r1
 800e67e:	461a      	mov	r2, r3
 800e680:	7d01      	ldrb	r1, [r0, #20]
 800e682:	4604      	mov	r4, r0
 800e684:	f005 faea 	bl	8013c5c <ucdr_deserialize_endian_uint32_t>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	429e      	cmp	r6, r3
 800e68c:	d208      	bcs.n	800e6a0 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800e68e:	2201      	movs	r2, #1
 800e690:	75a2      	strb	r2, [r4, #22]
 800e692:	7d21      	ldrb	r1, [r4, #20]
 800e694:	463a      	mov	r2, r7
 800e696:	4620      	mov	r0, r4
 800e698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e69c:	f004 bd56 	b.w	801314c <ucdr_deserialize_endian_array_uint8_t>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1f6      	bne.n	800e692 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800e6a4:	2001      	movs	r0, #1
 800e6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6aa:	bf00      	nop

0800e6ac <ucdr_serialize_sequence_double>:
 800e6ac:	b570      	push	{r4, r5, r6, lr}
 800e6ae:	460e      	mov	r6, r1
 800e6b0:	4615      	mov	r5, r2
 800e6b2:	7d01      	ldrb	r1, [r0, #20]
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	f005 f9b3 	bl	8013a20 <ucdr_serialize_endian_uint32_t>
 800e6ba:	b90d      	cbnz	r5, 800e6c0 <ucdr_serialize_sequence_double+0x14>
 800e6bc:	2001      	movs	r0, #1
 800e6be:	bd70      	pop	{r4, r5, r6, pc}
 800e6c0:	7d21      	ldrb	r1, [r4, #20]
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	4632      	mov	r2, r6
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6cc:	f004 bdc4 	b.w	8013258 <ucdr_serialize_endian_array_double>

0800e6d0 <ucdr_deserialize_sequence_double>:
 800e6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d4:	461d      	mov	r5, r3
 800e6d6:	4616      	mov	r6, r2
 800e6d8:	460f      	mov	r7, r1
 800e6da:	461a      	mov	r2, r3
 800e6dc:	7d01      	ldrb	r1, [r0, #20]
 800e6de:	4604      	mov	r4, r0
 800e6e0:	f005 fabc 	bl	8013c5c <ucdr_deserialize_endian_uint32_t>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	429e      	cmp	r6, r3
 800e6e8:	d208      	bcs.n	800e6fc <ucdr_deserialize_sequence_double+0x2c>
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	75a2      	strb	r2, [r4, #22]
 800e6ee:	7d21      	ldrb	r1, [r4, #20]
 800e6f0:	463a      	mov	r2, r7
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f8:	f004 be58 	b.w	80133ac <ucdr_deserialize_endian_array_double>
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1f6      	bne.n	800e6ee <ucdr_deserialize_sequence_double+0x1e>
 800e700:	2001      	movs	r0, #1
 800e702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e706:	bf00      	nop

0800e708 <rcl_get_zero_initialized_init_options>:
 800e708:	2000      	movs	r0, #0
 800e70a:	4770      	bx	lr

0800e70c <rcl_init_options_init>:
 800e70c:	b084      	sub	sp, #16
 800e70e:	b570      	push	{r4, r5, r6, lr}
 800e710:	b09e      	sub	sp, #120	@ 0x78
 800e712:	ad23      	add	r5, sp, #140	@ 0x8c
 800e714:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e718:	2800      	cmp	r0, #0
 800e71a:	d046      	beq.n	800e7aa <rcl_init_options_init+0x9e>
 800e71c:	6803      	ldr	r3, [r0, #0]
 800e71e:	4604      	mov	r4, r0
 800e720:	b133      	cbz	r3, 800e730 <rcl_init_options_init+0x24>
 800e722:	2564      	movs	r5, #100	@ 0x64
 800e724:	4628      	mov	r0, r5
 800e726:	b01e      	add	sp, #120	@ 0x78
 800e728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e72c:	b004      	add	sp, #16
 800e72e:	4770      	bx	lr
 800e730:	4628      	mov	r0, r5
 800e732:	f001 ffd9 	bl	80106e8 <rcutils_allocator_is_valid>
 800e736:	2800      	cmp	r0, #0
 800e738:	d037      	beq.n	800e7aa <rcl_init_options_init+0x9e>
 800e73a:	46ae      	mov	lr, r5
 800e73c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e740:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e748:	f8de 3000 	ldr.w	r3, [lr]
 800e74c:	f8cc 3000 	str.w	r3, [ip]
 800e750:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e754:	2070      	movs	r0, #112	@ 0x70
 800e756:	4798      	blx	r3
 800e758:	4606      	mov	r6, r0
 800e75a:	6020      	str	r0, [r4, #0]
 800e75c:	b338      	cbz	r0, 800e7ae <rcl_init_options_init+0xa2>
 800e75e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e762:	4686      	mov	lr, r0
 800e764:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e768:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e76c:	f8dc 3000 	ldr.w	r3, [ip]
 800e770:	f8ce 3000 	str.w	r3, [lr]
 800e774:	a802      	add	r0, sp, #8
 800e776:	f002 fa89 	bl	8010c8c <rmw_get_zero_initialized_init_options>
 800e77a:	2258      	movs	r2, #88	@ 0x58
 800e77c:	a902      	add	r1, sp, #8
 800e77e:	f106 0018 	add.w	r0, r6, #24
 800e782:	f00f fbde 	bl	801df42 <memcpy>
 800e786:	ab26      	add	r3, sp, #152	@ 0x98
 800e788:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e78c:	6826      	ldr	r6, [r4, #0]
 800e78e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e792:	f106 0018 	add.w	r0, r6, #24
 800e796:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800e79a:	f002 fb9b 	bl	8010ed4 <rmw_init_options_init>
 800e79e:	4605      	mov	r5, r0
 800e7a0:	b938      	cbnz	r0, 800e7b2 <rcl_init_options_init+0xa6>
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800e7a8:	e7bc      	b.n	800e724 <rcl_init_options_init+0x18>
 800e7aa:	250b      	movs	r5, #11
 800e7ac:	e7ba      	b.n	800e724 <rcl_init_options_init+0x18>
 800e7ae:	250a      	movs	r5, #10
 800e7b0:	e7b8      	b.n	800e724 <rcl_init_options_init+0x18>
 800e7b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e7b4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e7b6:	6820      	ldr	r0, [r4, #0]
 800e7b8:	4798      	blx	r3
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f009 fe4e 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	e7af      	b.n	800e724 <rcl_init_options_init+0x18>

0800e7c4 <rcl_init_options_fini>:
 800e7c4:	b530      	push	{r4, r5, lr}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	b1f0      	cbz	r0, 800e808 <rcl_init_options_fini+0x44>
 800e7ca:	6803      	ldr	r3, [r0, #0]
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	b1db      	cbz	r3, 800e808 <rcl_init_options_fini+0x44>
 800e7d0:	469c      	mov	ip, r3
 800e7d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e7d6:	f10d 0e04 	add.w	lr, sp, #4
 800e7da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e7de:	f8dc 3000 	ldr.w	r3, [ip]
 800e7e2:	f8ce 3000 	str.w	r3, [lr]
 800e7e6:	a801      	add	r0, sp, #4
 800e7e8:	f001 ff7e 	bl	80106e8 <rcutils_allocator_is_valid>
 800e7ec:	b160      	cbz	r0, 800e808 <rcl_init_options_fini+0x44>
 800e7ee:	6820      	ldr	r0, [r4, #0]
 800e7f0:	3018      	adds	r0, #24
 800e7f2:	f002 fc0b 	bl	801100c <rmw_init_options_fini>
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	b950      	cbnz	r0, 800e810 <rcl_init_options_fini+0x4c>
 800e7fa:	6820      	ldr	r0, [r4, #0]
 800e7fc:	9b02      	ldr	r3, [sp, #8]
 800e7fe:	9905      	ldr	r1, [sp, #20]
 800e800:	4798      	blx	r3
 800e802:	4628      	mov	r0, r5
 800e804:	b007      	add	sp, #28
 800e806:	bd30      	pop	{r4, r5, pc}
 800e808:	250b      	movs	r5, #11
 800e80a:	4628      	mov	r0, r5
 800e80c:	b007      	add	sp, #28
 800e80e:	bd30      	pop	{r4, r5, pc}
 800e810:	f009 fe24 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 800e814:	4605      	mov	r5, r0
 800e816:	e7f8      	b.n	800e80a <rcl_init_options_fini+0x46>

0800e818 <rcl_init_options_copy>:
 800e818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e81a:	b09d      	sub	sp, #116	@ 0x74
 800e81c:	2800      	cmp	r0, #0
 800e81e:	d04a      	beq.n	800e8b6 <rcl_init_options_copy+0x9e>
 800e820:	4604      	mov	r4, r0
 800e822:	6800      	ldr	r0, [r0, #0]
 800e824:	2800      	cmp	r0, #0
 800e826:	d046      	beq.n	800e8b6 <rcl_init_options_copy+0x9e>
 800e828:	460d      	mov	r5, r1
 800e82a:	f001 ff5d 	bl	80106e8 <rcutils_allocator_is_valid>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d041      	beq.n	800e8b6 <rcl_init_options_copy+0x9e>
 800e832:	2d00      	cmp	r5, #0
 800e834:	d03f      	beq.n	800e8b6 <rcl_init_options_copy+0x9e>
 800e836:	682b      	ldr	r3, [r5, #0]
 800e838:	b11b      	cbz	r3, 800e842 <rcl_init_options_copy+0x2a>
 800e83a:	2464      	movs	r4, #100	@ 0x64
 800e83c:	4620      	mov	r0, r4
 800e83e:	b01d      	add	sp, #116	@ 0x74
 800e840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e842:	6826      	ldr	r6, [r4, #0]
 800e844:	46b6      	mov	lr, r6
 800e846:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e84a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e84e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e852:	f8de 3000 	ldr.w	r3, [lr]
 800e856:	6837      	ldr	r7, [r6, #0]
 800e858:	f8cc 3000 	str.w	r3, [ip]
 800e85c:	4619      	mov	r1, r3
 800e85e:	2070      	movs	r0, #112	@ 0x70
 800e860:	47b8      	blx	r7
 800e862:	4606      	mov	r6, r0
 800e864:	6028      	str	r0, [r5, #0]
 800e866:	b350      	cbz	r0, 800e8be <rcl_init_options_copy+0xa6>
 800e868:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e86c:	4686      	mov	lr, r0
 800e86e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e872:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e876:	f8dc 3000 	ldr.w	r3, [ip]
 800e87a:	f8ce 3000 	str.w	r3, [lr]
 800e87e:	4668      	mov	r0, sp
 800e880:	f002 fa04 	bl	8010c8c <rmw_get_zero_initialized_init_options>
 800e884:	2258      	movs	r2, #88	@ 0x58
 800e886:	4669      	mov	r1, sp
 800e888:	f106 0018 	add.w	r0, r6, #24
 800e88c:	f00f fb59 	bl	801df42 <memcpy>
 800e890:	6820      	ldr	r0, [r4, #0]
 800e892:	6829      	ldr	r1, [r5, #0]
 800e894:	3018      	adds	r0, #24
 800e896:	3118      	adds	r1, #24
 800e898:	f002 fb84 	bl	8010fa4 <rmw_init_options_copy>
 800e89c:	4604      	mov	r4, r0
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d0cc      	beq.n	800e83c <rcl_init_options_copy+0x24>
 800e8a2:	f001 ffed 	bl	8010880 <rcutils_get_error_string>
 800e8a6:	f002 f803 	bl	80108b0 <rcutils_reset_error>
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f7ff ff8a 	bl	800e7c4 <rcl_init_options_fini>
 800e8b0:	b138      	cbz	r0, 800e8c2 <rcl_init_options_copy+0xaa>
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	e7c2      	b.n	800e83c <rcl_init_options_copy+0x24>
 800e8b6:	240b      	movs	r4, #11
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	b01d      	add	sp, #116	@ 0x74
 800e8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8be:	240a      	movs	r4, #10
 800e8c0:	e7bc      	b.n	800e83c <rcl_init_options_copy+0x24>
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	b01d      	add	sp, #116	@ 0x74
 800e8c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e8ca:	f009 bdc7 	b.w	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 800e8ce:	bf00      	nop

0800e8d0 <rcl_init_options_set_domain_id>:
 800e8d0:	b120      	cbz	r0, 800e8dc <rcl_init_options_set_domain_id+0xc>
 800e8d2:	6803      	ldr	r3, [r0, #0]
 800e8d4:	b113      	cbz	r3, 800e8dc <rcl_init_options_set_domain_id+0xc>
 800e8d6:	6259      	str	r1, [r3, #36]	@ 0x24
 800e8d8:	2000      	movs	r0, #0
 800e8da:	4770      	bx	lr
 800e8dc:	200b      	movs	r0, #11
 800e8de:	4770      	bx	lr

0800e8e0 <rcl_get_zero_initialized_node>:
 800e8e0:	4a03      	ldr	r2, [pc, #12]	@ (800e8f0 <rcl_get_zero_initialized_node+0x10>)
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	4770      	bx	lr
 800e8f0:	08020510 	.word	0x08020510

0800e8f4 <rcl_node_init>:
 800e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	b0ab      	sub	sp, #172	@ 0xac
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800e8fe:	a825      	add	r0, sp, #148	@ 0x94
 800e900:	4689      	mov	r9, r1
 800e902:	4690      	mov	r8, r2
 800e904:	461f      	mov	r7, r3
 800e906:	f009 ff1b 	bl	8018740 <rcl_guard_condition_get_default_options>
 800e90a:	2d00      	cmp	r5, #0
 800e90c:	f000 80d8 	beq.w	800eac0 <rcl_node_init+0x1cc>
 800e910:	4628      	mov	r0, r5
 800e912:	f001 fee9 	bl	80106e8 <rcutils_allocator_is_valid>
 800e916:	2800      	cmp	r0, #0
 800e918:	f000 80d2 	beq.w	800eac0 <rcl_node_init+0x1cc>
 800e91c:	f1b9 0f00 	cmp.w	r9, #0
 800e920:	f000 80ce 	beq.w	800eac0 <rcl_node_init+0x1cc>
 800e924:	f1b8 0f00 	cmp.w	r8, #0
 800e928:	f000 80ca 	beq.w	800eac0 <rcl_node_init+0x1cc>
 800e92c:	2c00      	cmp	r4, #0
 800e92e:	f000 80c7 	beq.w	800eac0 <rcl_node_init+0x1cc>
 800e932:	6866      	ldr	r6, [r4, #4]
 800e934:	2e00      	cmp	r6, #0
 800e936:	f040 80ca 	bne.w	800eace <rcl_node_init+0x1da>
 800e93a:	2f00      	cmp	r7, #0
 800e93c:	f000 80c0 	beq.w	800eac0 <rcl_node_init+0x1cc>
 800e940:	4638      	mov	r0, r7
 800e942:	f009 fdab 	bl	801849c <rcl_context_is_valid>
 800e946:	2800      	cmp	r0, #0
 800e948:	f000 80bf 	beq.w	800eaca <rcl_node_init+0x1d6>
 800e94c:	4632      	mov	r2, r6
 800e94e:	a924      	add	r1, sp, #144	@ 0x90
 800e950:	4648      	mov	r0, r9
 800e952:	9624      	str	r6, [sp, #144]	@ 0x90
 800e954:	f002 fa50 	bl	8010df8 <rmw_validate_node_name>
 800e958:	4606      	mov	r6, r0
 800e95a:	2800      	cmp	r0, #0
 800e95c:	f040 80b1 	bne.w	800eac2 <rcl_node_init+0x1ce>
 800e960:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800e962:	2800      	cmp	r0, #0
 800e964:	f040 8104 	bne.w	800eb70 <rcl_node_init+0x27c>
 800e968:	f898 3000 	ldrb.w	r3, [r8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 80f0 	beq.w	800eb52 <rcl_node_init+0x25e>
 800e972:	2b2f      	cmp	r3, #47	@ 0x2f
 800e974:	f000 80b0 	beq.w	800ead8 <rcl_node_init+0x1e4>
 800e978:	4b85      	ldr	r3, [pc, #532]	@ (800eb90 <rcl_node_init+0x29c>)
 800e97a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e97e:	9302      	str	r3, [sp, #8]
 800e980:	692b      	ldr	r3, [r5, #16]
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e98e:	f001 ffab 	bl	80108e8 <rcutils_format_string_limit>
 800e992:	4680      	mov	r8, r0
 800e994:	f1b8 0f00 	cmp.w	r8, #0
 800e998:	f000 80e8 	beq.w	800eb6c <rcl_node_init+0x278>
 800e99c:	2200      	movs	r2, #0
 800e99e:	a924      	add	r1, sp, #144	@ 0x90
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	9224      	str	r2, [sp, #144]	@ 0x90
 800e9a4:	f002 fa0a 	bl	8010dbc <rmw_validate_namespace>
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	f040 80a4 	bne.w	800eaf8 <rcl_node_init+0x204>
 800e9b0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f040 809d 	bne.w	800eaf2 <rcl_node_init+0x1fe>
 800e9b8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800e9bc:	2178      	movs	r1, #120	@ 0x78
 800e9be:	2001      	movs	r0, #1
 800e9c0:	4798      	blx	r3
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	6060      	str	r0, [r4, #4]
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f000 80d6 	beq.w	800eb78 <rcl_node_init+0x284>
 800e9cc:	a80a      	add	r0, sp, #40	@ 0x28
 800e9ce:	f000 f961 	bl	800ec94 <rcl_node_get_default_options>
 800e9d2:	a90a      	add	r1, sp, #40	@ 0x28
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	2268      	movs	r2, #104	@ 0x68
 800e9d8:	f00f fab3 	bl	801df42 <memcpy>
 800e9dc:	6861      	ldr	r1, [r4, #4]
 800e9de:	6027      	str	r7, [r4, #0]
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f000 f965 	bl	800ecb0 <rcl_node_options_copy>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	f040 8085 	bne.w	800eaf8 <rcl_node_init+0x204>
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	f7f1 fc76 	bl	80002e0 <strlen>
 800e9f4:	eb08 0300 	add.w	r3, r8, r0
 800e9f8:	6866      	ldr	r6, [r4, #4]
 800e9fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e9fe:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800ea02:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea04:	bf0c      	ite	eq
 800ea06:	4b63      	ldreq	r3, [pc, #396]	@ (800eb94 <rcl_node_init+0x2a0>)
 800ea08:	4b63      	ldrne	r3, [pc, #396]	@ (800eb98 <rcl_node_init+0x2a4>)
 800ea0a:	9302      	str	r3, [sp, #8]
 800ea0c:	692b      	ldr	r3, [r5, #16]
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea14:	9301      	str	r3, [sp, #4]
 800ea16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ea1a:	f001 ff65 	bl	80108e8 <rcutils_format_string_limit>
 800ea1e:	6863      	ldr	r3, [r4, #4]
 800ea20:	6770      	str	r0, [r6, #116]	@ 0x74
 800ea22:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	f000 80a9 	beq.w	800eb7c <rcl_node_init+0x288>
 800ea2a:	6822      	ldr	r2, [r4, #0]
 800ea2c:	9307      	str	r3, [sp, #28]
 800ea2e:	6810      	ldr	r0, [r2, #0]
 800ea30:	4649      	mov	r1, r9
 800ea32:	3028      	adds	r0, #40	@ 0x28
 800ea34:	4642      	mov	r2, r8
 800ea36:	f002 fd65 	bl	8011504 <rmw_create_node>
 800ea3a:	9b07      	ldr	r3, [sp, #28]
 800ea3c:	6698      	str	r0, [r3, #104]	@ 0x68
 800ea3e:	6863      	ldr	r3, [r4, #4]
 800ea40:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f000 809d 	beq.w	800eb82 <rcl_node_init+0x28e>
 800ea48:	f002 fdee 	bl	8011628 <rmw_node_get_graph_guard_condition>
 800ea4c:	4681      	mov	r9, r0
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	f000 809c 	beq.w	800eb8c <rcl_node_init+0x298>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	6929      	ldr	r1, [r5, #16]
 800ea58:	6866      	ldr	r6, [r4, #4]
 800ea5a:	2008      	movs	r0, #8
 800ea5c:	4798      	blx	r3
 800ea5e:	6863      	ldr	r3, [r4, #4]
 800ea60:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800ea62:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800ea66:	f1ba 0f00 	cmp.w	sl, #0
 800ea6a:	f000 808d 	beq.w	800eb88 <rcl_node_init+0x294>
 800ea6e:	f10d 0b20 	add.w	fp, sp, #32
 800ea72:	4658      	mov	r0, fp
 800ea74:	f009 fd8c 	bl	8018590 <rcl_get_zero_initialized_guard_condition>
 800ea78:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800ea7c:	6863      	ldr	r3, [r4, #4]
 800ea7e:	46ac      	mov	ip, r5
 800ea80:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800ea84:	e88a 0003 	stmia.w	sl, {r0, r1}
 800ea88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea8c:	ae25      	add	r6, sp, #148	@ 0x94
 800ea8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea90:	f8dc 3000 	ldr.w	r3, [ip]
 800ea94:	6033      	str	r3, [r6, #0]
 800ea96:	ab2a      	add	r3, sp, #168	@ 0xa8
 800ea98:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ea9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800eaa0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800eaa2:	463a      	mov	r2, r7
 800eaa4:	4649      	mov	r1, r9
 800eaa6:	4670      	mov	r0, lr
 800eaa8:	f009 fdc8 	bl	801863c <rcl_guard_condition_init_from_rmw>
 800eaac:	4606      	mov	r6, r0
 800eaae:	bb18      	cbnz	r0, 800eaf8 <rcl_node_init+0x204>
 800eab0:	686b      	ldr	r3, [r5, #4]
 800eab2:	6929      	ldr	r1, [r5, #16]
 800eab4:	4798      	blx	r3
 800eab6:	686b      	ldr	r3, [r5, #4]
 800eab8:	6929      	ldr	r1, [r5, #16]
 800eaba:	4640      	mov	r0, r8
 800eabc:	4798      	blx	r3
 800eabe:	e000      	b.n	800eac2 <rcl_node_init+0x1ce>
 800eac0:	260b      	movs	r6, #11
 800eac2:	4630      	mov	r0, r6
 800eac4:	b02b      	add	sp, #172	@ 0xac
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	2665      	movs	r6, #101	@ 0x65
 800eacc:	e7f9      	b.n	800eac2 <rcl_node_init+0x1ce>
 800eace:	2664      	movs	r6, #100	@ 0x64
 800ead0:	4630      	mov	r0, r6
 800ead2:	b02b      	add	sp, #172	@ 0xac
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	f105 030c 	add.w	r3, r5, #12
 800eadc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eae0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eae4:	4640      	mov	r0, r8
 800eae6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800eaea:	f002 f81b 	bl	8010b24 <rcutils_strdup>
 800eaee:	4680      	mov	r8, r0
 800eaf0:	e750      	b.n	800e994 <rcl_node_init+0xa0>
 800eaf2:	f002 f975 	bl	8010de0 <rmw_namespace_validation_result_string>
 800eaf6:	26ca      	movs	r6, #202	@ 0xca
 800eaf8:	6863      	ldr	r3, [r4, #4]
 800eafa:	b1f3      	cbz	r3, 800eb3a <rcl_node_init+0x246>
 800eafc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eafe:	b138      	cbz	r0, 800eb10 <rcl_node_init+0x21c>
 800eb00:	f009 fdfc 	bl	80186fc <rcl_guard_condition_fini>
 800eb04:	6863      	ldr	r3, [r4, #4]
 800eb06:	6929      	ldr	r1, [r5, #16]
 800eb08:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eb0a:	686b      	ldr	r3, [r5, #4]
 800eb0c:	4798      	blx	r3
 800eb0e:	6863      	ldr	r3, [r4, #4]
 800eb10:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800eb12:	b110      	cbz	r0, 800eb1a <rcl_node_init+0x226>
 800eb14:	f002 fd0c 	bl	8011530 <rmw_destroy_node>
 800eb18:	6863      	ldr	r3, [r4, #4]
 800eb1a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800eb1c:	6929      	ldr	r1, [r5, #16]
 800eb1e:	686b      	ldr	r3, [r5, #4]
 800eb20:	4798      	blx	r3
 800eb22:	6863      	ldr	r3, [r4, #4]
 800eb24:	6929      	ldr	r1, [r5, #16]
 800eb26:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800eb28:	686b      	ldr	r3, [r5, #4]
 800eb2a:	4798      	blx	r3
 800eb2c:	6860      	ldr	r0, [r4, #4]
 800eb2e:	f000 f8dd 	bl	800ecec <rcl_node_options_fini>
 800eb32:	686b      	ldr	r3, [r5, #4]
 800eb34:	6929      	ldr	r1, [r5, #16]
 800eb36:	6860      	ldr	r0, [r4, #4]
 800eb38:	4798      	blx	r3
 800eb3a:	686b      	ldr	r3, [r5, #4]
 800eb3c:	6929      	ldr	r1, [r5, #16]
 800eb3e:	2000      	movs	r0, #0
 800eb40:	4798      	blx	r3
 800eb42:	686b      	ldr	r3, [r5, #4]
 800eb44:	6929      	ldr	r1, [r5, #16]
 800eb46:	4640      	mov	r0, r8
 800eb48:	4798      	blx	r3
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e9c4 3300 	strd	r3, r3, [r4]
 800eb50:	e7b7      	b.n	800eac2 <rcl_node_init+0x1ce>
 800eb52:	f105 030c 	add.w	r3, r5, #12
 800eb56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eb5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb5e:	480f      	ldr	r0, [pc, #60]	@ (800eb9c <rcl_node_init+0x2a8>)
 800eb60:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800eb64:	f001 ffde 	bl	8010b24 <rcutils_strdup>
 800eb68:	4680      	mov	r8, r0
 800eb6a:	e713      	b.n	800e994 <rcl_node_init+0xa0>
 800eb6c:	260a      	movs	r6, #10
 800eb6e:	e7a8      	b.n	800eac2 <rcl_node_init+0x1ce>
 800eb70:	f002 f98e 	bl	8010e90 <rmw_node_name_validation_result_string>
 800eb74:	26c9      	movs	r6, #201	@ 0xc9
 800eb76:	e7a4      	b.n	800eac2 <rcl_node_init+0x1ce>
 800eb78:	260a      	movs	r6, #10
 800eb7a:	e7de      	b.n	800eb3a <rcl_node_init+0x246>
 800eb7c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eb7e:	260a      	movs	r6, #10
 800eb80:	e7bd      	b.n	800eafe <rcl_node_init+0x20a>
 800eb82:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eb84:	2601      	movs	r6, #1
 800eb86:	e7ba      	b.n	800eafe <rcl_node_init+0x20a>
 800eb88:	260a      	movs	r6, #10
 800eb8a:	e7c1      	b.n	800eb10 <rcl_node_init+0x21c>
 800eb8c:	2601      	movs	r6, #1
 800eb8e:	e7b3      	b.n	800eaf8 <rcl_node_init+0x204>
 800eb90:	080204e0 	.word	0x080204e0
 800eb94:	080204e4 	.word	0x080204e4
 800eb98:	080204ec 	.word	0x080204ec
 800eb9c:	080204dc 	.word	0x080204dc

0800eba0 <rcl_node_fini>:
 800eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba2:	b318      	cbz	r0, 800ebec <rcl_node_fini+0x4c>
 800eba4:	6845      	ldr	r5, [r0, #4]
 800eba6:	4604      	mov	r4, r0
 800eba8:	b1f5      	cbz	r5, 800ebe8 <rcl_node_fini+0x48>
 800ebaa:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800ebac:	686e      	ldr	r6, [r5, #4]
 800ebae:	692f      	ldr	r7, [r5, #16]
 800ebb0:	f002 fcbe 	bl	8011530 <rmw_destroy_node>
 800ebb4:	6863      	ldr	r3, [r4, #4]
 800ebb6:	4605      	mov	r5, r0
 800ebb8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ebba:	f009 fd9f 	bl	80186fc <rcl_guard_condition_fini>
 800ebbe:	6863      	ldr	r3, [r4, #4]
 800ebc0:	4305      	orrs	r5, r0
 800ebc2:	4639      	mov	r1, r7
 800ebc4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ebc6:	bf14      	ite	ne
 800ebc8:	2501      	movne	r5, #1
 800ebca:	2500      	moveq	r5, #0
 800ebcc:	47b0      	blx	r6
 800ebce:	6863      	ldr	r3, [r4, #4]
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ebd4:	47b0      	blx	r6
 800ebd6:	6863      	ldr	r3, [r4, #4]
 800ebd8:	4639      	mov	r1, r7
 800ebda:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ebdc:	47b0      	blx	r6
 800ebde:	6860      	ldr	r0, [r4, #4]
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	47b0      	blx	r6
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	6063      	str	r3, [r4, #4]
 800ebe8:	4628      	mov	r0, r5
 800ebea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebec:	25c8      	movs	r5, #200	@ 0xc8
 800ebee:	4628      	mov	r0, r5
 800ebf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf2:	bf00      	nop

0800ebf4 <rcl_node_is_valid_except_context>:
 800ebf4:	b128      	cbz	r0, 800ec02 <rcl_node_is_valid_except_context+0xe>
 800ebf6:	6840      	ldr	r0, [r0, #4]
 800ebf8:	b118      	cbz	r0, 800ec02 <rcl_node_is_valid_except_context+0xe>
 800ebfa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ebfc:	3800      	subs	r0, #0
 800ebfe:	bf18      	it	ne
 800ec00:	2001      	movne	r0, #1
 800ec02:	4770      	bx	lr

0800ec04 <rcl_node_is_valid>:
 800ec04:	b130      	cbz	r0, 800ec14 <rcl_node_is_valid+0x10>
 800ec06:	6843      	ldr	r3, [r0, #4]
 800ec08:	b123      	cbz	r3, 800ec14 <rcl_node_is_valid+0x10>
 800ec0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec0c:	b113      	cbz	r3, 800ec14 <rcl_node_is_valid+0x10>
 800ec0e:	6800      	ldr	r0, [r0, #0]
 800ec10:	f009 bc44 	b.w	801849c <rcl_context_is_valid>
 800ec14:	2000      	movs	r0, #0
 800ec16:	4770      	bx	lr

0800ec18 <rcl_node_get_name>:
 800ec18:	b120      	cbz	r0, 800ec24 <rcl_node_get_name+0xc>
 800ec1a:	6840      	ldr	r0, [r0, #4]
 800ec1c:	b110      	cbz	r0, 800ec24 <rcl_node_get_name+0xc>
 800ec1e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ec20:	b100      	cbz	r0, 800ec24 <rcl_node_get_name+0xc>
 800ec22:	6880      	ldr	r0, [r0, #8]
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop

0800ec28 <rcl_node_get_namespace>:
 800ec28:	b120      	cbz	r0, 800ec34 <rcl_node_get_namespace+0xc>
 800ec2a:	6840      	ldr	r0, [r0, #4]
 800ec2c:	b110      	cbz	r0, 800ec34 <rcl_node_get_namespace+0xc>
 800ec2e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ec30:	b100      	cbz	r0, 800ec34 <rcl_node_get_namespace+0xc>
 800ec32:	68c0      	ldr	r0, [r0, #12]
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop

0800ec38 <rcl_node_get_options>:
 800ec38:	b128      	cbz	r0, 800ec46 <rcl_node_get_options+0xe>
 800ec3a:	6840      	ldr	r0, [r0, #4]
 800ec3c:	b118      	cbz	r0, 800ec46 <rcl_node_get_options+0xe>
 800ec3e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	bf08      	it	eq
 800ec44:	2000      	moveq	r0, #0
 800ec46:	4770      	bx	lr

0800ec48 <rcl_node_get_rmw_handle>:
 800ec48:	b110      	cbz	r0, 800ec50 <rcl_node_get_rmw_handle+0x8>
 800ec4a:	6840      	ldr	r0, [r0, #4]
 800ec4c:	b100      	cbz	r0, 800ec50 <rcl_node_get_rmw_handle+0x8>
 800ec4e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop

0800ec54 <rcl_get_disable_loaned_message>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	2300      	movs	r3, #0
 800ec5a:	9301      	str	r3, [sp, #4]
 800ec5c:	b1a0      	cbz	r0, 800ec88 <rcl_get_disable_loaned_message+0x34>
 800ec5e:	4604      	mov	r4, r0
 800ec60:	a901      	add	r1, sp, #4
 800ec62:	480b      	ldr	r0, [pc, #44]	@ (800ec90 <rcl_get_disable_loaned_message+0x3c>)
 800ec64:	f001 fdf4 	bl	8010850 <rcutils_get_env>
 800ec68:	b110      	cbz	r0, 800ec70 <rcl_get_disable_loaned_message+0x1c>
 800ec6a:	2001      	movs	r0, #1
 800ec6c:	b002      	add	sp, #8
 800ec6e:	bd10      	pop	{r4, pc}
 800ec70:	9a01      	ldr	r2, [sp, #4]
 800ec72:	7813      	ldrb	r3, [r2, #0]
 800ec74:	3b31      	subs	r3, #49	@ 0x31
 800ec76:	bf08      	it	eq
 800ec78:	7853      	ldrbeq	r3, [r2, #1]
 800ec7a:	fab3 f383 	clz	r3, r3
 800ec7e:	095b      	lsrs	r3, r3, #5
 800ec80:	2000      	movs	r0, #0
 800ec82:	7023      	strb	r3, [r4, #0]
 800ec84:	b002      	add	sp, #8
 800ec86:	bd10      	pop	{r4, pc}
 800ec88:	200b      	movs	r0, #11
 800ec8a:	b002      	add	sp, #8
 800ec8c:	bd10      	pop	{r4, pc}
 800ec8e:	bf00      	nop
 800ec90:	080204f4 	.word	0x080204f4

0800ec94 <rcl_node_get_default_options>:
 800ec94:	b510      	push	{r4, lr}
 800ec96:	2253      	movs	r2, #83	@ 0x53
 800ec98:	4604      	mov	r4, r0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	3015      	adds	r0, #21
 800ec9e:	f00f f81f 	bl	801dce0 <memset>
 800eca2:	4620      	mov	r0, r4
 800eca4:	f001 fcf4 	bl	8010690 <rcutils_get_default_allocator>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	7523      	strb	r3, [r4, #20]
 800ecac:	4620      	mov	r0, r4
 800ecae:	bd10      	pop	{r4, pc}

0800ecb0 <rcl_node_options_copy>:
 800ecb0:	b1d0      	cbz	r0, 800ece8 <rcl_node_options_copy+0x38>
 800ecb2:	b570      	push	{r4, r5, r6, lr}
 800ecb4:	460c      	mov	r4, r1
 800ecb6:	b1a9      	cbz	r1, 800ece4 <rcl_node_options_copy+0x34>
 800ecb8:	4288      	cmp	r0, r1
 800ecba:	4684      	mov	ip, r0
 800ecbc:	d012      	beq.n	800ece4 <rcl_node_options_copy+0x34>
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	8a86      	ldrh	r6, [r0, #20]
 800ecc2:	468e      	mov	lr, r1
 800ecc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ecca:	682b      	ldr	r3, [r5, #0]
 800eccc:	f8ce 3000 	str.w	r3, [lr]
 800ecd0:	f10c 0118 	add.w	r1, ip, #24
 800ecd4:	2250      	movs	r2, #80	@ 0x50
 800ecd6:	82a6      	strh	r6, [r4, #20]
 800ecd8:	f104 0018 	add.w	r0, r4, #24
 800ecdc:	f00f f931 	bl	801df42 <memcpy>
 800ece0:	2000      	movs	r0, #0
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	200b      	movs	r0, #11
 800ece6:	bd70      	pop	{r4, r5, r6, pc}
 800ece8:	200b      	movs	r0, #11
 800ecea:	4770      	bx	lr

0800ecec <rcl_node_options_fini>:
 800ecec:	b1c0      	cbz	r0, 800ed20 <rcl_node_options_fini+0x34>
 800ecee:	b500      	push	{lr}
 800ecf0:	4684      	mov	ip, r0
 800ecf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	f10d 0e04 	add.w	lr, sp, #4
 800ecfc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed00:	f8dc 3000 	ldr.w	r3, [ip]
 800ed04:	f8ce 3000 	str.w	r3, [lr]
 800ed08:	a801      	add	r0, sp, #4
 800ed0a:	f001 fced 	bl	80106e8 <rcutils_allocator_is_valid>
 800ed0e:	b118      	cbz	r0, 800ed18 <rcl_node_options_fini+0x2c>
 800ed10:	2000      	movs	r0, #0
 800ed12:	b007      	add	sp, #28
 800ed14:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed18:	200b      	movs	r0, #11
 800ed1a:	b007      	add	sp, #28
 800ed1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed20:	200b      	movs	r0, #11
 800ed22:	4770      	bx	lr

0800ed24 <rcl_get_zero_initialized_publisher>:
 800ed24:	4b01      	ldr	r3, [pc, #4]	@ (800ed2c <rcl_get_zero_initialized_publisher+0x8>)
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	08020518 	.word	0x08020518

0800ed30 <rcl_publisher_init>:
 800ed30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed34:	b088      	sub	sp, #32
 800ed36:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	d06a      	beq.n	800ee12 <rcl_publisher_init+0xe2>
 800ed3c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ed40:	4604      	mov	r4, r0
 800ed42:	4648      	mov	r0, r9
 800ed44:	460e      	mov	r6, r1
 800ed46:	4690      	mov	r8, r2
 800ed48:	461f      	mov	r7, r3
 800ed4a:	f001 fccd 	bl	80106e8 <rcutils_allocator_is_valid>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d05f      	beq.n	800ee12 <rcl_publisher_init+0xe2>
 800ed52:	2c00      	cmp	r4, #0
 800ed54:	d05d      	beq.n	800ee12 <rcl_publisher_init+0xe2>
 800ed56:	f8d4 a000 	ldr.w	sl, [r4]
 800ed5a:	f1ba 0f00 	cmp.w	sl, #0
 800ed5e:	d004      	beq.n	800ed6a <rcl_publisher_init+0x3a>
 800ed60:	2764      	movs	r7, #100	@ 0x64
 800ed62:	4638      	mov	r0, r7
 800ed64:	b008      	add	sp, #32
 800ed66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f7ff ff4a 	bl	800ec04 <rcl_node_is_valid>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d053      	beq.n	800ee1c <rcl_publisher_init+0xec>
 800ed74:	f1b8 0f00 	cmp.w	r8, #0
 800ed78:	d04b      	beq.n	800ee12 <rcl_publisher_init+0xe2>
 800ed7a:	2f00      	cmp	r7, #0
 800ed7c:	d049      	beq.n	800ee12 <rcl_publisher_init+0xe2>
 800ed7e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ed82:	aa07      	add	r2, sp, #28
 800ed84:	9205      	str	r2, [sp, #20]
 800ed86:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ed8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ed92:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed96:	4639      	mov	r1, r7
 800ed98:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f009 fe7b 	bl	8018a98 <rcl_node_resolve_name>
 800eda2:	4607      	mov	r7, r0
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d150      	bne.n	800ee4a <rcl_publisher_init+0x11a>
 800eda8:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800edac:	21c8      	movs	r1, #200	@ 0xc8
 800edae:	2001      	movs	r0, #1
 800edb0:	4798      	blx	r3
 800edb2:	6020      	str	r0, [r4, #0]
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d04e      	beq.n	800ee56 <rcl_publisher_init+0x126>
 800edb8:	4630      	mov	r0, r6
 800edba:	f7ff ff45 	bl	800ec48 <rcl_node_get_rmw_handle>
 800edbe:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	9a07      	ldr	r2, [sp, #28]
 800edc6:	6827      	ldr	r7, [r4, #0]
 800edc8:	462b      	mov	r3, r5
 800edca:	4641      	mov	r1, r8
 800edcc:	f002 fc96 	bl	80116fc <rmw_create_publisher>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800edd6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800edda:	b370      	cbz	r0, 800ee3a <rcl_publisher_init+0x10a>
 800eddc:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ede0:	f002 fd68 	bl	80118b4 <rmw_publisher_get_actual_qos>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	4607      	mov	r7, r0
 800ede8:	b9d0      	cbnz	r0, 800ee20 <rcl_publisher_init+0xf0>
 800edea:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800edee:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800edf2:	4629      	mov	r1, r5
 800edf4:	2270      	movs	r2, #112	@ 0x70
 800edf6:	4618      	mov	r0, r3
 800edf8:	f00f f8a3 	bl	801df42 <memcpy>
 800edfc:	6832      	ldr	r2, [r6, #0]
 800edfe:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ee02:	9807      	ldr	r0, [sp, #28]
 800ee04:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ee06:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ee08:	4798      	blx	r3
 800ee0a:	4638      	mov	r0, r7
 800ee0c:	b008      	add	sp, #32
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee12:	270b      	movs	r7, #11
 800ee14:	4638      	mov	r0, r7
 800ee16:	b008      	add	sp, #32
 800ee18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee1c:	27c8      	movs	r7, #200	@ 0xc8
 800ee1e:	e7a0      	b.n	800ed62 <rcl_publisher_init+0x32>
 800ee20:	b18b      	cbz	r3, 800ee46 <rcl_publisher_init+0x116>
 800ee22:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ee26:	b142      	cbz	r2, 800ee3a <rcl_publisher_init+0x10a>
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7ff ff0d 	bl	800ec48 <rcl_node_get_rmw_handle>
 800ee2e:	6823      	ldr	r3, [r4, #0]
 800ee30:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ee34:	f002 fd4c 	bl	80118d0 <rmw_destroy_publisher>
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ee3c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ee3e:	4618      	mov	r0, r3
 800ee40:	4790      	blx	r2
 800ee42:	2300      	movs	r3, #0
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	2701      	movs	r7, #1
 800ee48:	e7db      	b.n	800ee02 <rcl_publisher_init+0xd2>
 800ee4a:	2867      	cmp	r0, #103	@ 0x67
 800ee4c:	d0d9      	beq.n	800ee02 <rcl_publisher_init+0xd2>
 800ee4e:	2869      	cmp	r0, #105	@ 0x69
 800ee50:	d003      	beq.n	800ee5a <rcl_publisher_init+0x12a>
 800ee52:	280a      	cmp	r0, #10
 800ee54:	d1f7      	bne.n	800ee46 <rcl_publisher_init+0x116>
 800ee56:	270a      	movs	r7, #10
 800ee58:	e7d3      	b.n	800ee02 <rcl_publisher_init+0xd2>
 800ee5a:	2767      	movs	r7, #103	@ 0x67
 800ee5c:	e7d1      	b.n	800ee02 <rcl_publisher_init+0xd2>
 800ee5e:	bf00      	nop

0800ee60 <rcl_publisher_fini>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	b1f8      	cbz	r0, 800eea4 <rcl_publisher_fini+0x44>
 800ee64:	4604      	mov	r4, r0
 800ee66:	4608      	mov	r0, r1
 800ee68:	460d      	mov	r5, r1
 800ee6a:	f7ff fec3 	bl	800ebf4 <rcl_node_is_valid_except_context>
 800ee6e:	b1e8      	cbz	r0, 800eeac <rcl_publisher_fini+0x4c>
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	b1a3      	cbz	r3, 800ee9e <rcl_publisher_fini+0x3e>
 800ee74:	4628      	mov	r0, r5
 800ee76:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800ee78:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 800ee7a:	f7ff fee5 	bl	800ec48 <rcl_node_get_rmw_handle>
 800ee7e:	b1c0      	cbz	r0, 800eeb2 <rcl_publisher_fini+0x52>
 800ee80:	6823      	ldr	r3, [r4, #0]
 800ee82:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ee86:	f002 fd23 	bl	80118d0 <rmw_destroy_publisher>
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	1e05      	subs	r5, r0, #0
 800ee8e:	6820      	ldr	r0, [r4, #0]
 800ee90:	bf18      	it	ne
 800ee92:	2501      	movne	r5, #1
 800ee94:	47b0      	blx	r6
 800ee96:	2300      	movs	r3, #0
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee9e:	461d      	mov	r5, r3
 800eea0:	4628      	mov	r0, r5
 800eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea4:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800eea8:	4628      	mov	r0, r5
 800eeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeac:	25c8      	movs	r5, #200	@ 0xc8
 800eeae:	4628      	mov	r0, r5
 800eeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeb2:	250b      	movs	r5, #11
 800eeb4:	e7f1      	b.n	800ee9a <rcl_publisher_fini+0x3a>
 800eeb6:	bf00      	nop

0800eeb8 <rcl_publisher_get_default_options>:
 800eeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeba:	4919      	ldr	r1, [pc, #100]	@ (800ef20 <rcl_publisher_get_default_options+0x68>)
 800eebc:	4c19      	ldr	r4, [pc, #100]	@ (800ef24 <rcl_publisher_get_default_options+0x6c>)
 800eebe:	b08b      	sub	sp, #44	@ 0x2c
 800eec0:	2250      	movs	r2, #80	@ 0x50
 800eec2:	4605      	mov	r5, r0
 800eec4:	4818      	ldr	r0, [pc, #96]	@ (800ef28 <rcl_publisher_get_default_options+0x70>)
 800eec6:	f00f f83c 	bl	801df42 <memcpy>
 800eeca:	a802      	add	r0, sp, #8
 800eecc:	f001 fbe0 	bl	8010690 <rcutils_get_default_allocator>
 800eed0:	f10d 0c08 	add.w	ip, sp, #8
 800eed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eeda:	466f      	mov	r7, sp
 800eedc:	f8dc 3000 	ldr.w	r3, [ip]
 800eee0:	f844 3b04 	str.w	r3, [r4], #4
 800eee4:	4638      	mov	r0, r7
 800eee6:	f001 fef9 	bl	8010cdc <rmw_get_default_publisher_options>
 800eeea:	e897 0003 	ldmia.w	r7, {r0, r1}
 800eeee:	2600      	movs	r6, #0
 800eef0:	e884 0003 	stmia.w	r4, {r0, r1}
 800eef4:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800eef8:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800eefc:	f7ff feaa 	bl	800ec54 <rcl_get_disable_loaned_message>
 800ef00:	b958      	cbnz	r0, 800ef1a <rcl_publisher_get_default_options+0x62>
 800ef02:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800ef06:	4908      	ldr	r1, [pc, #32]	@ (800ef28 <rcl_publisher_get_default_options+0x70>)
 800ef08:	2270      	movs	r2, #112	@ 0x70
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800ef10:	f00f f817 	bl	801df42 <memcpy>
 800ef14:	4628      	mov	r0, r5
 800ef16:	b00b      	add	sp, #44	@ 0x2c
 800ef18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef1a:	f001 fcc9 	bl	80108b0 <rcutils_reset_error>
 800ef1e:	e7f2      	b.n	800ef06 <rcl_publisher_get_default_options+0x4e>
 800ef20:	08020520 	.word	0x08020520
 800ef24:	20015470 	.word	0x20015470
 800ef28:	20015420 	.word	0x20015420

0800ef2c <rcl_publish>:
 800ef2c:	b1f8      	cbz	r0, 800ef6e <rcl_publish+0x42>
 800ef2e:	6803      	ldr	r3, [r0, #0]
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	b1b3      	cbz	r3, 800ef64 <rcl_publish+0x38>
 800ef36:	4616      	mov	r6, r2
 800ef38:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ef3c:	b192      	cbz	r2, 800ef64 <rcl_publish+0x38>
 800ef3e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ef42:	460d      	mov	r5, r1
 800ef44:	f009 faaa 	bl	801849c <rcl_context_is_valid>
 800ef48:	b160      	cbz	r0, 800ef64 <rcl_publish+0x38>
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ef50:	b140      	cbz	r0, 800ef64 <rcl_publish+0x38>
 800ef52:	b155      	cbz	r5, 800ef6a <rcl_publish+0x3e>
 800ef54:	4632      	mov	r2, r6
 800ef56:	4629      	mov	r1, r5
 800ef58:	f002 fb70 	bl	801163c <rmw_publish>
 800ef5c:	3800      	subs	r0, #0
 800ef5e:	bf18      	it	ne
 800ef60:	2001      	movne	r0, #1
 800ef62:	bd70      	pop	{r4, r5, r6, pc}
 800ef64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
 800ef6a:	200b      	movs	r0, #11
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
 800ef6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef72:	4770      	bx	lr

0800ef74 <rcl_publisher_is_valid>:
 800ef74:	b1a0      	cbz	r0, 800efa0 <rcl_publisher_is_valid+0x2c>
 800ef76:	6803      	ldr	r3, [r0, #0]
 800ef78:	b510      	push	{r4, lr}
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	b173      	cbz	r3, 800ef9c <rcl_publisher_is_valid+0x28>
 800ef7e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ef82:	b15a      	cbz	r2, 800ef9c <rcl_publisher_is_valid+0x28>
 800ef84:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ef88:	f009 fa88 	bl	801849c <rcl_context_is_valid>
 800ef8c:	b130      	cbz	r0, 800ef9c <rcl_publisher_is_valid+0x28>
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ef94:	3800      	subs	r0, #0
 800ef96:	bf18      	it	ne
 800ef98:	2001      	movne	r0, #1
 800ef9a:	bd10      	pop	{r4, pc}
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	bd10      	pop	{r4, pc}
 800efa0:	2000      	movs	r0, #0
 800efa2:	4770      	bx	lr

0800efa4 <rcl_publisher_is_valid_except_context>:
 800efa4:	b130      	cbz	r0, 800efb4 <rcl_publisher_is_valid_except_context+0x10>
 800efa6:	6800      	ldr	r0, [r0, #0]
 800efa8:	b120      	cbz	r0, 800efb4 <rcl_publisher_is_valid_except_context+0x10>
 800efaa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800efae:	3800      	subs	r0, #0
 800efb0:	bf18      	it	ne
 800efb2:	2001      	movne	r0, #1
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop

0800efb8 <rcl_get_zero_initialized_subscription>:
 800efb8:	4b01      	ldr	r3, [pc, #4]	@ (800efc0 <rcl_get_zero_initialized_subscription+0x8>)
 800efba:	6818      	ldr	r0, [r3, #0]
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	08020570 	.word	0x08020570

0800efc4 <rcl_subscription_init>:
 800efc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efc8:	b089      	sub	sp, #36	@ 0x24
 800efca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800efcc:	b1d6      	cbz	r6, 800f004 <rcl_subscription_init+0x40>
 800efce:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800efd2:	4604      	mov	r4, r0
 800efd4:	4648      	mov	r0, r9
 800efd6:	460d      	mov	r5, r1
 800efd8:	4690      	mov	r8, r2
 800efda:	461f      	mov	r7, r3
 800efdc:	f001 fb84 	bl	80106e8 <rcutils_allocator_is_valid>
 800efe0:	b180      	cbz	r0, 800f004 <rcl_subscription_init+0x40>
 800efe2:	b17c      	cbz	r4, 800f004 <rcl_subscription_init+0x40>
 800efe4:	4628      	mov	r0, r5
 800efe6:	f7ff fe0d 	bl	800ec04 <rcl_node_is_valid>
 800efea:	2800      	cmp	r0, #0
 800efec:	d054      	beq.n	800f098 <rcl_subscription_init+0xd4>
 800efee:	f1b8 0f00 	cmp.w	r8, #0
 800eff2:	d007      	beq.n	800f004 <rcl_subscription_init+0x40>
 800eff4:	b137      	cbz	r7, 800f004 <rcl_subscription_init+0x40>
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	b14b      	cbz	r3, 800f00e <rcl_subscription_init+0x4a>
 800effa:	2764      	movs	r7, #100	@ 0x64
 800effc:	4638      	mov	r0, r7
 800effe:	b009      	add	sp, #36	@ 0x24
 800f000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f004:	270b      	movs	r7, #11
 800f006:	4638      	mov	r0, r7
 800f008:	b009      	add	sp, #36	@ 0x24
 800f00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f00e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f012:	aa07      	add	r2, sp, #28
 800f014:	9205      	str	r2, [sp, #20]
 800f016:	9307      	str	r3, [sp, #28]
 800f018:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800f01c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f020:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f024:	4639      	mov	r1, r7
 800f026:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f02a:	4628      	mov	r0, r5
 800f02c:	f009 fd34 	bl	8018a98 <rcl_node_resolve_name>
 800f030:	4607      	mov	r7, r0
 800f032:	2800      	cmp	r0, #0
 800f034:	d15f      	bne.n	800f0f6 <rcl_subscription_init+0x132>
 800f036:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800f03a:	21d0      	movs	r1, #208	@ 0xd0
 800f03c:	2001      	movs	r0, #1
 800f03e:	4798      	blx	r3
 800f040:	6020      	str	r0, [r4, #0]
 800f042:	2800      	cmp	r0, #0
 800f044:	d05d      	beq.n	800f102 <rcl_subscription_init+0x13e>
 800f046:	4628      	mov	r0, r5
 800f048:	f7ff fdfe 	bl	800ec48 <rcl_node_get_rmw_handle>
 800f04c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800f050:	9300      	str	r3, [sp, #0]
 800f052:	9a07      	ldr	r2, [sp, #28]
 800f054:	6827      	ldr	r7, [r4, #0]
 800f056:	4641      	mov	r1, r8
 800f058:	4633      	mov	r3, r6
 800f05a:	f002 fccf 	bl	80119fc <rmw_create_subscription>
 800f05e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 800f062:	6827      	ldr	r7, [r4, #0]
 800f064:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f068:	b358      	cbz	r0, 800f0c2 <rcl_subscription_init+0xfe>
 800f06a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800f06e:	f002 fda5 	bl	8011bbc <rmw_subscription_get_actual_qos>
 800f072:	4607      	mov	r7, r0
 800f074:	b9a8      	cbnz	r0, 800f0a2 <rcl_subscription_init+0xde>
 800f076:	6820      	ldr	r0, [r4, #0]
 800f078:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f07c:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 800f080:	2278      	movs	r2, #120	@ 0x78
 800f082:	4631      	mov	r1, r6
 800f084:	f00e ff5d 	bl	801df42 <memcpy>
 800f088:	9807      	ldr	r0, [sp, #28]
 800f08a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f08c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f08e:	4798      	blx	r3
 800f090:	4638      	mov	r0, r7
 800f092:	b009      	add	sp, #36	@ 0x24
 800f094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f098:	27c8      	movs	r7, #200	@ 0xc8
 800f09a:	4638      	mov	r0, r7
 800f09c:	b009      	add	sp, #36	@ 0x24
 800f09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0a2:	6827      	ldr	r7, [r4, #0]
 800f0a4:	b32f      	cbz	r7, 800f0f2 <rcl_subscription_init+0x12e>
 800f0a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0aa:	b153      	cbz	r3, 800f0c2 <rcl_subscription_init+0xfe>
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f7ff fdcb 	bl	800ec48 <rcl_node_get_rmw_handle>
 800f0b2:	6823      	ldr	r3, [r4, #0]
 800f0b4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f0b8:	f002 fd8e 	bl	8011bd8 <rmw_destroy_subscription>
 800f0bc:	6827      	ldr	r7, [r4, #0]
 800f0be:	4638      	mov	r0, r7
 800f0c0:	b197      	cbz	r7, 800f0e8 <rcl_subscription_init+0x124>
 800f0c2:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f001 fb0e 	bl	80106e8 <rcutils_allocator_is_valid>
 800f0cc:	b1e8      	cbz	r0, 800f10a <rcl_subscription_init+0x146>
 800f0ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f0d0:	b1d8      	cbz	r0, 800f10a <rcl_subscription_init+0x146>
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	f001 fe0a 	bl	8010cec <rmw_subscription_content_filter_options_fini>
 800f0d8:	4605      	mov	r5, r0
 800f0da:	b9a0      	cbnz	r0, 800f106 <rcl_subscription_init+0x142>
 800f0dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f0e2:	4798      	blx	r3
 800f0e4:	6820      	ldr	r0, [r4, #0]
 800f0e6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800f0e8:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f0ea:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f0ec:	4798      	blx	r3
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	2701      	movs	r7, #1
 800f0f4:	e7c8      	b.n	800f088 <rcl_subscription_init+0xc4>
 800f0f6:	2867      	cmp	r0, #103	@ 0x67
 800f0f8:	d0c6      	beq.n	800f088 <rcl_subscription_init+0xc4>
 800f0fa:	2869      	cmp	r0, #105	@ 0x69
 800f0fc:	d007      	beq.n	800f10e <rcl_subscription_init+0x14a>
 800f0fe:	280a      	cmp	r0, #10
 800f100:	d1f7      	bne.n	800f0f2 <rcl_subscription_init+0x12e>
 800f102:	270a      	movs	r7, #10
 800f104:	e7c0      	b.n	800f088 <rcl_subscription_init+0xc4>
 800f106:	f009 f9a9 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 800f10a:	6820      	ldr	r0, [r4, #0]
 800f10c:	e7ec      	b.n	800f0e8 <rcl_subscription_init+0x124>
 800f10e:	2767      	movs	r7, #103	@ 0x67
 800f110:	e7ba      	b.n	800f088 <rcl_subscription_init+0xc4>
 800f112:	bf00      	nop

0800f114 <rcl_subscription_fini>:
 800f114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f118:	2800      	cmp	r0, #0
 800f11a:	d03a      	beq.n	800f192 <rcl_subscription_fini+0x7e>
 800f11c:	4604      	mov	r4, r0
 800f11e:	4608      	mov	r0, r1
 800f120:	460d      	mov	r5, r1
 800f122:	f7ff fd67 	bl	800ebf4 <rcl_node_is_valid_except_context>
 800f126:	2800      	cmp	r0, #0
 800f128:	d038      	beq.n	800f19c <rcl_subscription_fini+0x88>
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	b36b      	cbz	r3, 800f18a <rcl_subscription_fini+0x76>
 800f12e:	4628      	mov	r0, r5
 800f130:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800f132:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800f136:	f7ff fd87 	bl	800ec48 <rcl_node_get_rmw_handle>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d039      	beq.n	800f1b2 <rcl_subscription_fini+0x9e>
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f144:	f002 fd48 	bl	8011bd8 <rmw_destroy_subscription>
 800f148:	6826      	ldr	r6, [r4, #0]
 800f14a:	1e05      	subs	r5, r0, #0
 800f14c:	bf18      	it	ne
 800f14e:	2501      	movne	r5, #1
 800f150:	b36e      	cbz	r6, 800f1ae <rcl_subscription_fini+0x9a>
 800f152:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f156:	4648      	mov	r0, r9
 800f158:	f001 fac6 	bl	80106e8 <rcutils_allocator_is_valid>
 800f15c:	b358      	cbz	r0, 800f1b6 <rcl_subscription_fini+0xa2>
 800f15e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f160:	b150      	cbz	r0, 800f178 <rcl_subscription_fini+0x64>
 800f162:	4649      	mov	r1, r9
 800f164:	f001 fdc2 	bl	8010cec <rmw_subscription_content_filter_options_fini>
 800f168:	4681      	mov	r9, r0
 800f16a:	b9d8      	cbnz	r0, 800f1a4 <rcl_subscription_fini+0x90>
 800f16c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f16e:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f170:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f172:	4798      	blx	r3
 800f174:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800f178:	6826      	ldr	r6, [r4, #0]
 800f17a:	4630      	mov	r0, r6
 800f17c:	4641      	mov	r1, r8
 800f17e:	47b8      	blx	r7
 800f180:	2300      	movs	r3, #0
 800f182:	6023      	str	r3, [r4, #0]
 800f184:	4628      	mov	r0, r5
 800f186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f18a:	461d      	mov	r5, r3
 800f18c:	4628      	mov	r0, r5
 800f18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f192:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800f196:	4628      	mov	r0, r5
 800f198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19c:	25c8      	movs	r5, #200	@ 0xc8
 800f19e:	4628      	mov	r0, r5
 800f1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a4:	f009 f95a 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 800f1a8:	6826      	ldr	r6, [r4, #0]
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d0e5      	beq.n	800f17a <rcl_subscription_fini+0x66>
 800f1ae:	2501      	movs	r5, #1
 800f1b0:	e7e3      	b.n	800f17a <rcl_subscription_fini+0x66>
 800f1b2:	250b      	movs	r5, #11
 800f1b4:	e7ea      	b.n	800f18c <rcl_subscription_fini+0x78>
 800f1b6:	6826      	ldr	r6, [r4, #0]
 800f1b8:	2501      	movs	r5, #1
 800f1ba:	e7de      	b.n	800f17a <rcl_subscription_fini+0x66>

0800f1bc <rcl_subscription_get_default_options>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	4d14      	ldr	r5, [pc, #80]	@ (800f210 <rcl_subscription_get_default_options+0x54>)
 800f1c0:	4914      	ldr	r1, [pc, #80]	@ (800f214 <rcl_subscription_get_default_options+0x58>)
 800f1c2:	b08a      	sub	sp, #40	@ 0x28
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	2250      	movs	r2, #80	@ 0x50
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f00e feba 	bl	801df42 <memcpy>
 800f1ce:	a804      	add	r0, sp, #16
 800f1d0:	f001 fa5e 	bl	8010690 <rcutils_get_default_allocator>
 800f1d4:	f10d 0c10 	add.w	ip, sp, #16
 800f1d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1dc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800f1e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f1e4:	466e      	mov	r6, sp
 800f1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800f1ea:	f8ce 3000 	str.w	r3, [lr]
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f001 fd96 	bl	8010d20 <rmw_get_default_subscription_options>
 800f1f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f1f8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f1fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f200:	2278      	movs	r2, #120	@ 0x78
 800f202:	4629      	mov	r1, r5
 800f204:	4620      	mov	r0, r4
 800f206:	f00e fe9c 	bl	801df42 <memcpy>
 800f20a:	4620      	mov	r0, r4
 800f20c:	b00a      	add	sp, #40	@ 0x28
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	20015490 	.word	0x20015490
 800f214:	08020578 	.word	0x08020578

0800f218 <rcl_take>:
 800f218:	2800      	cmp	r0, #0
 800f21a:	d04b      	beq.n	800f2b4 <rcl_take+0x9c>
 800f21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f220:	4615      	mov	r5, r2
 800f222:	6802      	ldr	r2, [r0, #0]
 800f224:	b0a0      	sub	sp, #128	@ 0x80
 800f226:	4604      	mov	r4, r0
 800f228:	2a00      	cmp	r2, #0
 800f22a:	d03b      	beq.n	800f2a4 <rcl_take+0x8c>
 800f22c:	461f      	mov	r7, r3
 800f22e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 800f232:	2b00      	cmp	r3, #0
 800f234:	d036      	beq.n	800f2a4 <rcl_take+0x8c>
 800f236:	460e      	mov	r6, r1
 800f238:	2900      	cmp	r1, #0
 800f23a:	d039      	beq.n	800f2b0 <rcl_take+0x98>
 800f23c:	2d00      	cmp	r5, #0
 800f23e:	d03d      	beq.n	800f2bc <rcl_take+0xa4>
 800f240:	a802      	add	r0, sp, #8
 800f242:	f001 fd73 	bl	8010d2c <rmw_get_zero_initialized_message_info>
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	f10d 0c08 	add.w	ip, sp, #8
 800f24c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 800f250:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f254:	46ae      	mov	lr, r5
 800f256:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f25a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f25e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f266:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f26a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f26e:	462b      	mov	r3, r5
 800f270:	e88e 0003 	stmia.w	lr, {r0, r1}
 800f274:	f04f 0800 	mov.w	r8, #0
 800f278:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 800f27c:	4631      	mov	r1, r6
 800f27e:	4620      	mov	r0, r4
 800f280:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 800f284:	9700      	str	r7, [sp, #0]
 800f286:	f002 fd07 	bl	8011c98 <rmw_take_with_info>
 800f28a:	4603      	mov	r3, r0
 800f28c:	b9c0      	cbnz	r0, 800f2c0 <rcl_take+0xa8>
 800f28e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 800f292:	f240 1291 	movw	r2, #401	@ 0x191
 800f296:	2900      	cmp	r1, #0
 800f298:	bf08      	it	eq
 800f29a:	4613      	moveq	r3, r2
 800f29c:	4618      	mov	r0, r3
 800f29e:	b020      	add	sp, #128	@ 0x80
 800f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	b020      	add	sp, #128	@ 0x80
 800f2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b0:	230b      	movs	r3, #11
 800f2b2:	e7f3      	b.n	800f29c <rcl_take+0x84>
 800f2b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	4770      	bx	lr
 800f2bc:	ad12      	add	r5, sp, #72	@ 0x48
 800f2be:	e7bf      	b.n	800f240 <rcl_take+0x28>
 800f2c0:	f009 f8cc 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	e7e9      	b.n	800f29c <rcl_take+0x84>

0800f2c8 <rcl_subscription_get_rmw_handle>:
 800f2c8:	b118      	cbz	r0, 800f2d2 <rcl_subscription_get_rmw_handle+0xa>
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	b108      	cbz	r0, 800f2d2 <rcl_subscription_get_rmw_handle+0xa>
 800f2ce:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f2d2:	4770      	bx	lr

0800f2d4 <rcl_subscription_is_valid>:
 800f2d4:	b130      	cbz	r0, 800f2e4 <rcl_subscription_is_valid+0x10>
 800f2d6:	6800      	ldr	r0, [r0, #0]
 800f2d8:	b120      	cbz	r0, 800f2e4 <rcl_subscription_is_valid+0x10>
 800f2da:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f2de:	3800      	subs	r0, #0
 800f2e0:	bf18      	it	ne
 800f2e2:	2001      	movne	r0, #1
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop

0800f2e8 <_rcl_timer_time_jump>:
 800f2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ec:	4605      	mov	r5, r0
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	b131      	cbz	r1, 800f302 <_rcl_timer_time_jump+0x1a>
 800f2f4:	7803      	ldrb	r3, [r0, #0]
 800f2f6:	3b02      	subs	r3, #2
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d93f      	bls.n	800f37c <_rcl_timer_time_jump+0x94>
 800f2fc:	b004      	add	sp, #16
 800f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	a902      	add	r1, sp, #8
 800f306:	6818      	ldr	r0, [r3, #0]
 800f308:	f009 ff34 	bl	8019174 <rcl_clock_get_now>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d1f5      	bne.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f310:	6820      	ldr	r0, [r4, #0]
 800f312:	2105      	movs	r1, #5
 800f314:	3020      	adds	r0, #32
 800f316:	f001 f9f5 	bl	8010704 <__atomic_load_8>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	4681      	mov	r9, r0
 800f31e:	460f      	mov	r7, r1
 800f320:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800f324:	2105      	movs	r1, #5
 800f326:	f001 f9ed 	bl	8010704 <__atomic_load_8>
 800f32a:	4680      	mov	r8, r0
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	460e      	mov	r6, r1
 800f330:	3018      	adds	r0, #24
 800f332:	2105      	movs	r1, #5
 800f334:	f001 f9e6 	bl	8010704 <__atomic_load_8>
 800f338:	782b      	ldrb	r3, [r5, #0]
 800f33a:	3b02      	subs	r3, #2
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	460d      	mov	r5, r1
 800f340:	4682      	mov	sl, r0
 800f342:	d939      	bls.n	800f3b8 <_rcl_timer_time_jump+0xd0>
 800f344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f348:	4542      	cmp	r2, r8
 800f34a:	eb73 0606 	sbcs.w	r6, r3, r6
 800f34e:	da61      	bge.n	800f414 <_rcl_timer_time_jump+0x12c>
 800f350:	454a      	cmp	r2, r9
 800f352:	eb73 0707 	sbcs.w	r7, r3, r7
 800f356:	dad1      	bge.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f358:	1882      	adds	r2, r0, r2
 800f35a:	6820      	ldr	r0, [r4, #0]
 800f35c:	f04f 0505 	mov.w	r5, #5
 800f360:	eb43 0301 	adc.w	r3, r3, r1
 800f364:	9500      	str	r5, [sp, #0]
 800f366:	3028      	adds	r0, #40	@ 0x28
 800f368:	f001 fa02 	bl	8010770 <__atomic_store_8>
 800f36c:	6820      	ldr	r0, [r4, #0]
 800f36e:	9500      	str	r5, [sp, #0]
 800f370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f374:	3020      	adds	r0, #32
 800f376:	f001 f9fb 	bl	8010770 <__atomic_store_8>
 800f37a:	e7bf      	b.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f37c:	6813      	ldr	r3, [r2, #0]
 800f37e:	a902      	add	r1, sp, #8
 800f380:	6818      	ldr	r0, [r3, #0]
 800f382:	f009 fef7 	bl	8019174 <rcl_clock_get_now>
 800f386:	2800      	cmp	r0, #0
 800f388:	d1b8      	bne.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f38a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f38e:	4313      	orrs	r3, r2
 800f390:	d0b4      	beq.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f392:	6820      	ldr	r0, [r4, #0]
 800f394:	2105      	movs	r1, #5
 800f396:	3028      	adds	r0, #40	@ 0x28
 800f398:	f001 f9b4 	bl	8010704 <__atomic_load_8>
 800f39c:	9d02      	ldr	r5, [sp, #8]
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	6820      	ldr	r0, [r4, #0]
 800f3a4:	1b52      	subs	r2, r2, r5
 800f3a6:	f04f 0405 	mov.w	r4, #5
 800f3aa:	9400      	str	r4, [sp, #0]
 800f3ac:	eb61 0303 	sbc.w	r3, r1, r3
 800f3b0:	3030      	adds	r0, #48	@ 0x30
 800f3b2:	f001 f9dd 	bl	8010770 <__atomic_store_8>
 800f3b6:	e7a1      	b.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f3b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	d09d      	beq.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f3c0:	6820      	ldr	r0, [r4, #0]
 800f3c2:	f04f 0805 	mov.w	r8, #5
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f8cd 8000 	str.w	r8, [sp]
 800f3cc:	3030      	adds	r0, #48	@ 0x30
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f001 fa04 	bl	80107dc <__atomic_exchange_8>
 800f3d4:	ea51 0300 	orrs.w	r3, r1, r0
 800f3d8:	4606      	mov	r6, r0
 800f3da:	460f      	mov	r7, r1
 800f3dc:	d08e      	beq.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f3de:	9a02      	ldr	r2, [sp, #8]
 800f3e0:	9b03      	ldr	r3, [sp, #12]
 800f3e2:	f8cd 8000 	str.w	r8, [sp]
 800f3e6:	1a12      	subs	r2, r2, r0
 800f3e8:	6820      	ldr	r0, [r4, #0]
 800f3ea:	eb63 0301 	sbc.w	r3, r3, r1
 800f3ee:	eb12 020a 	adds.w	r2, r2, sl
 800f3f2:	eb43 0305 	adc.w	r3, r3, r5
 800f3f6:	3028      	adds	r0, #40	@ 0x28
 800f3f8:	f001 f9ba 	bl	8010770 <__atomic_store_8>
 800f3fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f400:	f8cd 8000 	str.w	r8, [sp]
 800f404:	6820      	ldr	r0, [r4, #0]
 800f406:	1b92      	subs	r2, r2, r6
 800f408:	eb63 0307 	sbc.w	r3, r3, r7
 800f40c:	3020      	adds	r0, #32
 800f40e:	f001 f9af 	bl	8010770 <__atomic_store_8>
 800f412:	e773      	b.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f414:	6820      	ldr	r0, [r4, #0]
 800f416:	3008      	adds	r0, #8
 800f418:	f009 f9ae 	bl	8018778 <rcl_trigger_guard_condition>
 800f41c:	e76e      	b.n	800f2fc <_rcl_timer_time_jump+0x14>
 800f41e:	bf00      	nop

0800f420 <rcl_get_zero_initialized_timer>:
 800f420:	4b01      	ldr	r3, [pc, #4]	@ (800f428 <rcl_get_zero_initialized_timer+0x8>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	080205c8 	.word	0x080205c8
 800f42c:	00000000 	.word	0x00000000

0800f430 <rcl_timer_init2>:
 800f430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f434:	b0ae      	sub	sp, #184	@ 0xb8
 800f436:	4604      	mov	r4, r0
 800f438:	a839      	add	r0, sp, #228	@ 0xe4
 800f43a:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 800f43e:	460d      	mov	r5, r1
 800f440:	4691      	mov	r9, r2
 800f442:	f001 f951 	bl	80106e8 <rcutils_allocator_is_valid>
 800f446:	2800      	cmp	r0, #0
 800f448:	d06a      	beq.n	800f520 <rcl_timer_init2+0xf0>
 800f44a:	2c00      	cmp	r4, #0
 800f44c:	d068      	beq.n	800f520 <rcl_timer_init2+0xf0>
 800f44e:	2d00      	cmp	r5, #0
 800f450:	d066      	beq.n	800f520 <rcl_timer_init2+0xf0>
 800f452:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800f454:	2b00      	cmp	r3, #0
 800f456:	db63      	blt.n	800f520 <rcl_timer_init2+0xf0>
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	b123      	cbz	r3, 800f466 <rcl_timer_init2+0x36>
 800f45c:	2664      	movs	r6, #100	@ 0x64
 800f45e:	4630      	mov	r0, r6
 800f460:	b02e      	add	sp, #184	@ 0xb8
 800f462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f466:	a908      	add	r1, sp, #32
 800f468:	4628      	mov	r0, r5
 800f46a:	f009 fe83 	bl	8019174 <rcl_clock_get_now>
 800f46e:	4606      	mov	r6, r0
 800f470:	2800      	cmp	r0, #0
 800f472:	d1f4      	bne.n	800f45e <rcl_timer_init2+0x2e>
 800f474:	ae06      	add	r6, sp, #24
 800f476:	4630      	mov	r0, r6
 800f478:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 800f47c:	f009 f888 	bl	8018590 <rcl_get_zero_initialized_guard_condition>
 800f480:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f484:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 800f488:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f48a:	e88a 0003 	stmia.w	sl, {r0, r1}
 800f48e:	4630      	mov	r0, r6
 800f490:	f009 f956 	bl	8018740 <rcl_guard_condition_get_default_options>
 800f494:	ab0d      	add	r3, sp, #52	@ 0x34
 800f496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f49a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f49e:	4649      	mov	r1, r9
 800f4a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f4a4:	4650      	mov	r0, sl
 800f4a6:	f009 f87d 	bl	80185a4 <rcl_guard_condition_init>
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d1d6      	bne.n	800f45e <rcl_timer_init2+0x2e>
 800f4b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d038      	beq.n	800f52a <rcl_timer_init2+0xfa>
 800f4b8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800f4ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4bc:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 800f4c0:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 800f4ca:	932c      	str	r3, [sp, #176]	@ 0xb0
 800f4cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4d0:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 800f4d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800f588 <rcl_timer_init2+0x158>
 800f4d6:	19d0      	adds	r0, r2, r7
 800f4d8:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 800f4da:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 800f4de:	eb43 0107 	adc.w	r1, r3, r7
 800f4e2:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800f4e6:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800f4ea:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800f4ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f4f2:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 800f4f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f4fa:	f8dc 3000 	ldr.w	r3, [ip]
 800f4fe:	f8ce 3000 	str.w	r3, [lr]
 800f502:	f088 0801 	eor.w	r8, r8, #1
 800f506:	4619      	mov	r1, r3
 800f508:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 800f50c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f50e:	2060      	movs	r0, #96	@ 0x60
 800f510:	4798      	blx	r3
 800f512:	6020      	str	r0, [r4, #0]
 800f514:	b358      	cbz	r0, 800f56e <rcl_timer_init2+0x13e>
 800f516:	2260      	movs	r2, #96	@ 0x60
 800f518:	a916      	add	r1, sp, #88	@ 0x58
 800f51a:	f00e fd12 	bl	801df42 <memcpy>
 800f51e:	e79e      	b.n	800f45e <rcl_timer_init2+0x2e>
 800f520:	260b      	movs	r6, #11
 800f522:	4630      	mov	r0, r6
 800f524:	b02e      	add	sp, #184	@ 0xb8
 800f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52a:	2001      	movs	r0, #1
 800f52c:	2100      	movs	r1, #0
 800f52e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800f532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f536:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f53a:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800f53e:	4a14      	ldr	r2, [pc, #80]	@ (800f590 <rcl_timer_init2+0x160>)
 800f540:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f544:	9405      	str	r4, [sp, #20]
 800f546:	9204      	str	r2, [sp, #16]
 800f548:	ab12      	add	r3, sp, #72	@ 0x48
 800f54a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f54c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f550:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f554:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800f558:	4628      	mov	r0, r5
 800f55a:	f009 fe27 	bl	80191ac <rcl_clock_add_jump_callback>
 800f55e:	4681      	mov	r9, r0
 800f560:	2800      	cmp	r0, #0
 800f562:	d0a9      	beq.n	800f4b8 <rcl_timer_init2+0x88>
 800f564:	4650      	mov	r0, sl
 800f566:	f009 f8c9 	bl	80186fc <rcl_guard_condition_fini>
 800f56a:	464e      	mov	r6, r9
 800f56c:	e777      	b.n	800f45e <rcl_timer_init2+0x2e>
 800f56e:	4650      	mov	r0, sl
 800f570:	f009 f8c4 	bl	80186fc <rcl_guard_condition_fini>
 800f574:	4906      	ldr	r1, [pc, #24]	@ (800f590 <rcl_timer_init2+0x160>)
 800f576:	4622      	mov	r2, r4
 800f578:	4628      	mov	r0, r5
 800f57a:	f009 fe79 	bl	8019270 <rcl_clock_remove_jump_callback>
 800f57e:	260a      	movs	r6, #10
 800f580:	e76d      	b.n	800f45e <rcl_timer_init2+0x2e>
 800f582:	bf00      	nop
 800f584:	f3af 8000 	nop.w
	...
 800f590:	0800f2e9 	.word	0x0800f2e9

0800f594 <rcl_timer_fini>:
 800f594:	b310      	cbz	r0, 800f5dc <rcl_timer_fini+0x48>
 800f596:	6803      	ldr	r3, [r0, #0]
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	4604      	mov	r4, r0
 800f59c:	b1b3      	cbz	r3, 800f5cc <rcl_timer_fini+0x38>
 800f59e:	f3bf 8f5b 	dmb	ish
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f5a8:	f3bf 8f5b 	dmb	ish
 800f5ac:	6803      	ldr	r3, [r0, #0]
 800f5ae:	6818      	ldr	r0, [r3, #0]
 800f5b0:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f5b2:	7802      	ldrb	r2, [r0, #0]
 800f5b4:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800f5b6:	2a01      	cmp	r2, #1
 800f5b8:	d00a      	beq.n	800f5d0 <rcl_timer_fini+0x3c>
 800f5ba:	f103 0008 	add.w	r0, r3, #8
 800f5be:	f009 f89d 	bl	80186fc <rcl_guard_condition_fini>
 800f5c2:	6820      	ldr	r0, [r4, #0]
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	47a8      	blx	r5
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	bd70      	pop	{r4, r5, r6, pc}
 800f5d0:	4903      	ldr	r1, [pc, #12]	@ (800f5e0 <rcl_timer_fini+0x4c>)
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	f009 fe4c 	bl	8019270 <rcl_clock_remove_jump_callback>
 800f5d8:	6823      	ldr	r3, [r4, #0]
 800f5da:	e7ee      	b.n	800f5ba <rcl_timer_fini+0x26>
 800f5dc:	2000      	movs	r0, #0
 800f5de:	4770      	bx	lr
 800f5e0:	0800f2e9 	.word	0x0800f2e9

0800f5e4 <rcl_timer_clock>:
 800f5e4:	b130      	cbz	r0, 800f5f4 <rcl_timer_clock+0x10>
 800f5e6:	b129      	cbz	r1, 800f5f4 <rcl_timer_clock+0x10>
 800f5e8:	6803      	ldr	r3, [r0, #0]
 800f5ea:	b12b      	cbz	r3, 800f5f8 <rcl_timer_clock+0x14>
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	600b      	str	r3, [r1, #0]
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	4770      	bx	lr
 800f5f4:	200b      	movs	r0, #11
 800f5f6:	4770      	bx	lr
 800f5f8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop

0800f600 <rcl_timer_call>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	b087      	sub	sp, #28
 800f606:	2800      	cmp	r0, #0
 800f608:	d067      	beq.n	800f6da <rcl_timer_call+0xda>
 800f60a:	6803      	ldr	r3, [r0, #0]
 800f60c:	4604      	mov	r4, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d068      	beq.n	800f6e4 <rcl_timer_call+0xe4>
 800f612:	f3bf 8f5b 	dmb	ish
 800f616:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f61a:	f3bf 8f5b 	dmb	ish
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d150      	bne.n	800f6c4 <rcl_timer_call+0xc4>
 800f622:	6803      	ldr	r3, [r0, #0]
 800f624:	a904      	add	r1, sp, #16
 800f626:	6818      	ldr	r0, [r3, #0]
 800f628:	f009 fda4 	bl	8019174 <rcl_clock_get_now>
 800f62c:	4605      	mov	r5, r0
 800f62e:	2800      	cmp	r0, #0
 800f630:	d144      	bne.n	800f6bc <rcl_timer_call+0xbc>
 800f632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f636:	2b00      	cmp	r3, #0
 800f638:	db4a      	blt.n	800f6d0 <rcl_timer_call+0xd0>
 800f63a:	6820      	ldr	r0, [r4, #0]
 800f63c:	f04f 0a05 	mov.w	sl, #5
 800f640:	f8cd a000 	str.w	sl, [sp]
 800f644:	3020      	adds	r0, #32
 800f646:	f001 f8c9 	bl	80107dc <__atomic_exchange_8>
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	f3bf 8f5b 	dmb	ish
 800f650:	4680      	mov	r8, r0
 800f652:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f656:	f3bf 8f5b 	dmb	ish
 800f65a:	6820      	ldr	r0, [r4, #0]
 800f65c:	4689      	mov	r9, r1
 800f65e:	3028      	adds	r0, #40	@ 0x28
 800f660:	4651      	mov	r1, sl
 800f662:	f001 f84f 	bl	8010704 <__atomic_load_8>
 800f666:	4606      	mov	r6, r0
 800f668:	6820      	ldr	r0, [r4, #0]
 800f66a:	460f      	mov	r7, r1
 800f66c:	3018      	adds	r0, #24
 800f66e:	4651      	mov	r1, sl
 800f670:	f001 f848 	bl	8010704 <__atomic_load_8>
 800f674:	1836      	adds	r6, r6, r0
 800f676:	eb41 0707 	adc.w	r7, r1, r7
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	4682      	mov	sl, r0
 800f680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f684:	42b0      	cmp	r0, r6
 800f686:	eb71 0c07 	sbcs.w	ip, r1, r7
 800f68a:	db04      	blt.n	800f696 <rcl_timer_call+0x96>
 800f68c:	ea53 0c02 	orrs.w	ip, r3, r2
 800f690:	d12b      	bne.n	800f6ea <rcl_timer_call+0xea>
 800f692:	4606      	mov	r6, r0
 800f694:	460f      	mov	r7, r1
 800f696:	6820      	ldr	r0, [r4, #0]
 800f698:	2105      	movs	r1, #5
 800f69a:	4632      	mov	r2, r6
 800f69c:	463b      	mov	r3, r7
 800f69e:	3028      	adds	r0, #40	@ 0x28
 800f6a0:	9100      	str	r1, [sp, #0]
 800f6a2:	f001 f865 	bl	8010770 <__atomic_store_8>
 800f6a6:	f1bb 0f00 	cmp.w	fp, #0
 800f6aa:	d007      	beq.n	800f6bc <rcl_timer_call+0xbc>
 800f6ac:	9a04      	ldr	r2, [sp, #16]
 800f6ae:	9b05      	ldr	r3, [sp, #20]
 800f6b0:	ebb2 0208 	subs.w	r2, r2, r8
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	eb63 0309 	sbc.w	r3, r3, r9
 800f6ba:	47d8      	blx	fp
 800f6bc:	4628      	mov	r0, r5
 800f6be:	b007      	add	sp, #28
 800f6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c4:	f240 3521 	movw	r5, #801	@ 0x321
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	b007      	add	sp, #28
 800f6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d0:	2501      	movs	r5, #1
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	b007      	add	sp, #28
 800f6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6da:	250b      	movs	r5, #11
 800f6dc:	4628      	mov	r0, r5
 800f6de:	b007      	add	sp, #28
 800f6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6e4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f6e8:	e7e8      	b.n	800f6bc <rcl_timer_call+0xbc>
 800f6ea:	1b80      	subs	r0, r0, r6
 800f6ec:	eb61 0107 	sbc.w	r1, r1, r7
 800f6f0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f6f4:	f7f1 fab8 	bl	8000c68 <__aeabi_ldivmod>
 800f6f8:	9b02      	ldr	r3, [sp, #8]
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	f141 0100 	adc.w	r1, r1, #0
 800f700:	fb00 f303 	mul.w	r3, r0, r3
 800f704:	fb01 330a 	mla	r3, r1, sl, r3
 800f708:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f70c:	1830      	adds	r0, r6, r0
 800f70e:	4453      	add	r3, sl
 800f710:	eb43 0707 	adc.w	r7, r3, r7
 800f714:	4606      	mov	r6, r0
 800f716:	e7be      	b.n	800f696 <rcl_timer_call+0x96>

0800f718 <rcl_timer_is_ready>:
 800f718:	b398      	cbz	r0, 800f782 <rcl_timer_is_ready+0x6a>
 800f71a:	b530      	push	{r4, r5, lr}
 800f71c:	6803      	ldr	r3, [r0, #0]
 800f71e:	b083      	sub	sp, #12
 800f720:	4604      	mov	r4, r0
 800f722:	b383      	cbz	r3, 800f786 <rcl_timer_is_ready+0x6e>
 800f724:	460d      	mov	r5, r1
 800f726:	b349      	cbz	r1, 800f77c <rcl_timer_is_ready+0x64>
 800f728:	f3bf 8f5b 	dmb	ish
 800f72c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f730:	f3bf 8f5b 	dmb	ish
 800f734:	b9fb      	cbnz	r3, 800f776 <rcl_timer_is_ready+0x5e>
 800f736:	6803      	ldr	r3, [r0, #0]
 800f738:	4669      	mov	r1, sp
 800f73a:	6818      	ldr	r0, [r3, #0]
 800f73c:	f009 fd1a 	bl	8019174 <rcl_clock_get_now>
 800f740:	b128      	cbz	r0, 800f74e <rcl_timer_is_ready+0x36>
 800f742:	f240 3321 	movw	r3, #801	@ 0x321
 800f746:	4298      	cmp	r0, r3
 800f748:	d015      	beq.n	800f776 <rcl_timer_is_ready+0x5e>
 800f74a:	b003      	add	sp, #12
 800f74c:	bd30      	pop	{r4, r5, pc}
 800f74e:	6820      	ldr	r0, [r4, #0]
 800f750:	2105      	movs	r1, #5
 800f752:	3028      	adds	r0, #40	@ 0x28
 800f754:	f000 ffd6 	bl	8010704 <__atomic_load_8>
 800f758:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f75c:	1ac0      	subs	r0, r0, r3
 800f75e:	eb61 0102 	sbc.w	r1, r1, r2
 800f762:	2801      	cmp	r0, #1
 800f764:	f171 0100 	sbcs.w	r1, r1, #0
 800f768:	bfb4      	ite	lt
 800f76a:	2301      	movlt	r3, #1
 800f76c:	2300      	movge	r3, #0
 800f76e:	702b      	strb	r3, [r5, #0]
 800f770:	2000      	movs	r0, #0
 800f772:	b003      	add	sp, #12
 800f774:	bd30      	pop	{r4, r5, pc}
 800f776:	2300      	movs	r3, #0
 800f778:	702b      	strb	r3, [r5, #0]
 800f77a:	e7f9      	b.n	800f770 <rcl_timer_is_ready+0x58>
 800f77c:	200b      	movs	r0, #11
 800f77e:	b003      	add	sp, #12
 800f780:	bd30      	pop	{r4, r5, pc}
 800f782:	200b      	movs	r0, #11
 800f784:	4770      	bx	lr
 800f786:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800f78a:	e7de      	b.n	800f74a <rcl_timer_is_ready+0x32>

0800f78c <rcl_timer_get_next_call_time>:
 800f78c:	b1d8      	cbz	r0, 800f7c6 <rcl_timer_get_next_call_time+0x3a>
 800f78e:	b538      	push	{r3, r4, r5, lr}
 800f790:	6803      	ldr	r3, [r0, #0]
 800f792:	b1d3      	cbz	r3, 800f7ca <rcl_timer_get_next_call_time+0x3e>
 800f794:	460c      	mov	r4, r1
 800f796:	b1a1      	cbz	r1, 800f7c2 <rcl_timer_get_next_call_time+0x36>
 800f798:	f3bf 8f5b 	dmb	ish
 800f79c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f7a0:	f3bf 8f5b 	dmb	ish
 800f7a4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800f7a8:	b943      	cbnz	r3, 800f7bc <rcl_timer_get_next_call_time+0x30>
 800f7aa:	6800      	ldr	r0, [r0, #0]
 800f7ac:	2105      	movs	r1, #5
 800f7ae:	3028      	adds	r0, #40	@ 0x28
 800f7b0:	f000 ffa8 	bl	8010704 <__atomic_load_8>
 800f7b4:	e9c4 0100 	strd	r0, r1, [r4]
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}
 800f7bc:	f240 3021 	movw	r0, #801	@ 0x321
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	200b      	movs	r0, #11
 800f7c4:	bd38      	pop	{r3, r4, r5, pc}
 800f7c6:	200b      	movs	r0, #11
 800f7c8:	4770      	bx	lr
 800f7ca:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}

0800f7d0 <rcl_timer_get_guard_condition>:
 800f7d0:	b130      	cbz	r0, 800f7e0 <rcl_timer_get_guard_condition+0x10>
 800f7d2:	6800      	ldr	r0, [r0, #0]
 800f7d4:	b120      	cbz	r0, 800f7e0 <rcl_timer_get_guard_condition+0x10>
 800f7d6:	68c3      	ldr	r3, [r0, #12]
 800f7d8:	b10b      	cbz	r3, 800f7de <rcl_timer_get_guard_condition+0xe>
 800f7da:	3008      	adds	r0, #8
 800f7dc:	4770      	bx	lr
 800f7de:	4618      	mov	r0, r3
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop

0800f7e4 <_rclc_check_for_new_data>:
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d046      	beq.n	800f876 <_rclc_check_for_new_data+0x92>
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	7802      	ldrb	r2, [r0, #0]
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2a0a      	cmp	r2, #10
 800f7f2:	d842      	bhi.n	800f87a <_rclc_check_for_new_data+0x96>
 800f7f4:	e8df f002 	tbb	[pc, r2]
 800f7f8:	14181212 	.word	0x14181212
 800f7fc:	06060614 	.word	0x06060614
 800f800:	2e1a      	.short	0x2e1a
 800f802:	16          	.byte	0x16
 800f803:	00          	.byte	0x00
 800f804:	6a0a      	ldr	r2, [r1, #32]
 800f806:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f808:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f80c:	3a00      	subs	r2, #0
 800f80e:	bf18      	it	ne
 800f810:	2201      	movne	r2, #1
 800f812:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f816:	2000      	movs	r0, #0
 800f818:	b004      	add	sp, #16
 800f81a:	bd10      	pop	{r4, pc}
 800f81c:	680a      	ldr	r2, [r1, #0]
 800f81e:	e7f2      	b.n	800f806 <_rclc_check_for_new_data+0x22>
 800f820:	698a      	ldr	r2, [r1, #24]
 800f822:	e7f0      	b.n	800f806 <_rclc_check_for_new_data+0x22>
 800f824:	688a      	ldr	r2, [r1, #8]
 800f826:	e7ee      	b.n	800f806 <_rclc_check_for_new_data+0x22>
 800f828:	690a      	ldr	r2, [r1, #16]
 800f82a:	e7ec      	b.n	800f806 <_rclc_check_for_new_data+0x22>
 800f82c:	685c      	ldr	r4, [r3, #4]
 800f82e:	4608      	mov	r0, r1
 800f830:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f834:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f838:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f83c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f846:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f84a:	f104 0110 	add.w	r1, r4, #16
 800f84e:	f00a fdaf 	bl	801a3b0 <rcl_action_client_wait_set_get_entities_ready>
 800f852:	e7e1      	b.n	800f818 <_rclc_check_for_new_data+0x34>
 800f854:	685c      	ldr	r4, [r3, #4]
 800f856:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f85a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f85e:	e9cd 3200 	strd	r3, r2, [sp]
 800f862:	4608      	mov	r0, r1
 800f864:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f868:	f104 0220 	add.w	r2, r4, #32
 800f86c:	f104 0110 	add.w	r1, r4, #16
 800f870:	f00a ffa4 	bl	801a7bc <rcl_action_server_wait_set_get_entities_ready>
 800f874:	e7d0      	b.n	800f818 <_rclc_check_for_new_data+0x34>
 800f876:	200b      	movs	r0, #11
 800f878:	4770      	bx	lr
 800f87a:	2001      	movs	r0, #1
 800f87c:	e7cc      	b.n	800f818 <_rclc_check_for_new_data+0x34>
 800f87e:	bf00      	nop

0800f880 <_rclc_take_new_data>:
 800f880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f882:	b099      	sub	sp, #100	@ 0x64
 800f884:	2800      	cmp	r0, #0
 800f886:	f000 8082 	beq.w	800f98e <_rclc_take_new_data+0x10e>
 800f88a:	7803      	ldrb	r3, [r0, #0]
 800f88c:	4604      	mov	r4, r0
 800f88e:	2b0a      	cmp	r3, #10
 800f890:	f200 815d 	bhi.w	800fb4e <_rclc_take_new_data+0x2ce>
 800f894:	e8df f003 	tbb	[pc, r3]
 800f898:	31531f1f 	.word	0x31531f1f
 800f89c:	06060631 	.word	0x06060631
 800f8a0:	4555      	.short	0x4555
 800f8a2:	53          	.byte	0x53
 800f8a3:	00          	.byte	0x00
 800f8a4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f8a6:	6a0b      	ldr	r3, [r1, #32]
 800f8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d046      	beq.n	800f93e <_rclc_take_new_data+0xbe>
 800f8b0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f8b4:	f104 0110 	add.w	r1, r4, #16
 800f8b8:	f009 fa88 	bl	8018dcc <rcl_take_request>
 800f8bc:	4605      	mov	r5, r0
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d03d      	beq.n	800f93e <_rclc_take_new_data+0xbe>
 800f8c2:	f240 2359 	movw	r3, #601	@ 0x259
 800f8c6:	4298      	cmp	r0, r3
 800f8c8:	d128      	bne.n	800f91c <_rclc_take_new_data+0x9c>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	b019      	add	sp, #100	@ 0x64
 800f8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8d6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f8d8:	680b      	ldr	r3, [r1, #0]
 800f8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8de:	b373      	cbz	r3, 800f93e <_rclc_take_new_data+0xbe>
 800f8e0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	aa0a      	add	r2, sp, #40	@ 0x28
 800f8e8:	f7ff fc96 	bl	800f218 <rcl_take>
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	b330      	cbz	r0, 800f93e <_rclc_take_new_data+0xbe>
 800f8f0:	f240 1391 	movw	r3, #401	@ 0x191
 800f8f4:	4298      	cmp	r0, r3
 800f8f6:	d0e8      	beq.n	800f8ca <_rclc_take_new_data+0x4a>
 800f8f8:	e010      	b.n	800f91c <_rclc_take_new_data+0x9c>
 800f8fa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f8fc:	698b      	ldr	r3, [r1, #24]
 800f8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f902:	b1e3      	cbz	r3, 800f93e <_rclc_take_new_data+0xbe>
 800f904:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f908:	f104 0110 	add.w	r1, r4, #16
 800f90c:	f008 fd30 	bl	8018370 <rcl_take_response>
 800f910:	4605      	mov	r5, r0
 800f912:	b1a0      	cbz	r0, 800f93e <_rclc_take_new_data+0xbe>
 800f914:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f918:	4298      	cmp	r0, r3
 800f91a:	d0d9      	beq.n	800f8d0 <_rclc_take_new_data+0x50>
 800f91c:	f000 ffc8 	bl	80108b0 <rcutils_reset_error>
 800f920:	e7d6      	b.n	800f8d0 <_rclc_take_new_data+0x50>
 800f922:	6840      	ldr	r0, [r0, #4]
 800f924:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d15f      	bne.n	800f9ec <_rclc_take_new_data+0x16c>
 800f92c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800f930:	2b00      	cmp	r3, #0
 800f932:	d179      	bne.n	800fa28 <_rclc_take_new_data+0x1a8>
 800f934:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f040 8096 	bne.w	800fa6a <_rclc_take_new_data+0x1ea>
 800f93e:	2500      	movs	r5, #0
 800f940:	e7c6      	b.n	800f8d0 <_rclc_take_new_data+0x50>
 800f942:	6840      	ldr	r0, [r0, #4]
 800f944:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d138      	bne.n	800f9be <_rclc_take_new_data+0x13e>
 800f94c:	69c3      	ldr	r3, [r0, #28]
 800f94e:	b113      	cbz	r3, 800f956 <_rclc_take_new_data+0xd6>
 800f950:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f954:	b9fb      	cbnz	r3, 800f996 <_rclc_take_new_data+0x116>
 800f956:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 80a8 	bne.w	800fab0 <_rclc_take_new_data+0x230>
 800f960:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f964:	2b00      	cmp	r3, #0
 800f966:	d0ea      	beq.n	800f93e <_rclc_take_new_data+0xbe>
 800f968:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f96a:	a90a      	add	r1, sp, #40	@ 0x28
 800f96c:	3010      	adds	r0, #16
 800f96e:	f00a fc03 	bl	801a178 <rcl_action_take_result_response>
 800f972:	4605      	mov	r5, r0
 800f974:	2800      	cmp	r0, #0
 800f976:	d1d1      	bne.n	800f91c <_rclc_take_new_data+0x9c>
 800f978:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f97c:	6860      	ldr	r0, [r4, #4]
 800f97e:	f00b f843 	bl	801aa08 <rclc_action_find_handle_by_result_request_sequence_number>
 800f982:	2800      	cmp	r0, #0
 800f984:	d0db      	beq.n	800f93e <_rclc_take_new_data+0xbe>
 800f986:	2301      	movs	r3, #1
 800f988:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f98c:	e7d7      	b.n	800f93e <_rclc_take_new_data+0xbe>
 800f98e:	250b      	movs	r5, #11
 800f990:	4628      	mov	r0, r5
 800f992:	b019      	add	sp, #100	@ 0x64
 800f994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f996:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f998:	3010      	adds	r0, #16
 800f99a:	f00a fc69 	bl	801a270 <rcl_action_take_feedback>
 800f99e:	4605      	mov	r5, r0
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d1bb      	bne.n	800f91c <_rclc_take_new_data+0x9c>
 800f9a4:	6860      	ldr	r0, [r4, #4]
 800f9a6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f9a8:	f00a ffec 	bl	801a984 <rclc_action_find_goal_handle_by_uuid>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	f000 80c4 	beq.w	800fb3c <_rclc_take_new_data+0x2bc>
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	6860      	ldr	r0, [r4, #4]
 800f9b8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f9bc:	e7cb      	b.n	800f956 <_rclc_take_new_data+0xd6>
 800f9be:	aa04      	add	r2, sp, #16
 800f9c0:	a90a      	add	r1, sp, #40	@ 0x28
 800f9c2:	3010      	adds	r0, #16
 800f9c4:	f00a fb68 	bl	801a098 <rcl_action_take_goal_response>
 800f9c8:	4605      	mov	r5, r0
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d1a6      	bne.n	800f91c <_rclc_take_new_data+0x9c>
 800f9ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f9d2:	6860      	ldr	r0, [r4, #4]
 800f9d4:	f00b f806 	bl	801a9e4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800f9d8:	b130      	cbz	r0, 800f9e8 <_rclc_take_new_data+0x168>
 800f9da:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f9de:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f880 2020 	strb.w	r2, [r0, #32]
 800f9e8:	6860      	ldr	r0, [r4, #4]
 800f9ea:	e7af      	b.n	800f94c <_rclc_take_new_data+0xcc>
 800f9ec:	f00a ffa4 	bl	801a938 <rclc_action_take_goal_handle>
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	6860      	ldr	r0, [r4, #4]
 800f9f4:	2e00      	cmp	r6, #0
 800f9f6:	d099      	beq.n	800f92c <_rclc_take_new_data+0xac>
 800f9f8:	6070      	str	r0, [r6, #4]
 800f9fa:	69f2      	ldr	r2, [r6, #28]
 800f9fc:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fa00:	3010      	adds	r0, #16
 800fa02:	f00a fd65 	bl	801a4d0 <rcl_action_take_goal_request>
 800fa06:	4605      	mov	r5, r0
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	f040 8099 	bne.w	800fb40 <_rclc_take_new_data+0x2c0>
 800fa0e:	69f7      	ldr	r7, [r6, #28]
 800fa10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fa12:	7235      	strb	r5, [r6, #8]
 800fa14:	f8c6 0009 	str.w	r0, [r6, #9]
 800fa18:	f8c6 100d 	str.w	r1, [r6, #13]
 800fa1c:	6860      	ldr	r0, [r4, #4]
 800fa1e:	f8c6 2011 	str.w	r2, [r6, #17]
 800fa22:	f8c6 3015 	str.w	r3, [r6, #21]
 800fa26:	e781      	b.n	800f92c <_rclc_take_new_data+0xac>
 800fa28:	aa04      	add	r2, sp, #16
 800fa2a:	3010      	adds	r0, #16
 800fa2c:	a90a      	add	r1, sp, #40	@ 0x28
 800fa2e:	f00a fdbf 	bl	801a5b0 <rcl_action_take_result_request>
 800fa32:	4605      	mov	r5, r0
 800fa34:	2800      	cmp	r0, #0
 800fa36:	f47f af71 	bne.w	800f91c <_rclc_take_new_data+0x9c>
 800fa3a:	6860      	ldr	r0, [r4, #4]
 800fa3c:	a904      	add	r1, sp, #16
 800fa3e:	f00a ffa1 	bl	801a984 <rclc_action_find_goal_handle_by_uuid>
 800fa42:	4607      	mov	r7, r0
 800fa44:	b160      	cbz	r0, 800fa60 <_rclc_take_new_data+0x1e0>
 800fa46:	ad0a      	add	r5, sp, #40	@ 0x28
 800fa48:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800fa4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fa50:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fa54:	f04f 0c02 	mov.w	ip, #2
 800fa58:	e886 0003 	stmia.w	r6, {r0, r1}
 800fa5c:	f887 c008 	strb.w	ip, [r7, #8]
 800fa60:	6860      	ldr	r0, [r4, #4]
 800fa62:	2300      	movs	r3, #0
 800fa64:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800fa68:	e764      	b.n	800f934 <_rclc_take_new_data+0xb4>
 800fa6a:	ae04      	add	r6, sp, #16
 800fa6c:	aa0a      	add	r2, sp, #40	@ 0x28
 800fa6e:	3010      	adds	r0, #16
 800fa70:	4631      	mov	r1, r6
 800fa72:	f00a fddb 	bl	801a62c <rcl_action_take_cancel_request>
 800fa76:	4605      	mov	r5, r0
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	f47f af4f 	bne.w	800f91c <_rclc_take_new_data+0x9c>
 800fa7e:	6860      	ldr	r0, [r4, #4]
 800fa80:	a90a      	add	r1, sp, #40	@ 0x28
 800fa82:	f00a ff7f 	bl	801a984 <rclc_action_find_goal_handle_by_uuid>
 800fa86:	4605      	mov	r5, r0
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	d04c      	beq.n	800fb26 <_rclc_take_new_data+0x2a6>
 800fa8c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800fa90:	2101      	movs	r1, #1
 800fa92:	f00a feff 	bl	801a894 <rcl_action_transition_goal_state>
 800fa96:	2803      	cmp	r0, #3
 800fa98:	4607      	mov	r7, r0
 800fa9a:	d139      	bne.n	800fb10 <_rclc_take_new_data+0x290>
 800fa9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fa9e:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800faa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faa4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800faa8:	e884 0003 	stmia.w	r4, {r0, r1}
 800faac:	722f      	strb	r7, [r5, #8]
 800faae:	e746      	b.n	800f93e <_rclc_take_new_data+0xbe>
 800fab0:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800fab4:	a90a      	add	r1, sp, #40	@ 0x28
 800fab6:	3010      	adds	r0, #16
 800fab8:	f00a fb9c 	bl	801a1f4 <rcl_action_take_cancel_response>
 800fabc:	4605      	mov	r5, r0
 800fabe:	2800      	cmp	r0, #0
 800fac0:	f47f af2c 	bne.w	800f91c <_rclc_take_new_data+0x9c>
 800fac4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fac8:	6860      	ldr	r0, [r4, #4]
 800faca:	f00a ffaf 	bl	801aa2c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800face:	4606      	mov	r6, r0
 800fad0:	6860      	ldr	r0, [r4, #4]
 800fad2:	2e00      	cmp	r6, #0
 800fad4:	f43f af44 	beq.w	800f960 <_rclc_take_new_data+0xe0>
 800fad8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fada:	2701      	movs	r7, #1
 800fadc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f43f af3e 	beq.w	800f960 <_rclc_take_new_data+0xe0>
 800fae4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fae6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800faea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800faee:	f00a ff49 	bl	801a984 <rclc_action_find_goal_handle_by_uuid>
 800faf2:	b138      	cbz	r0, 800fb04 <_rclc_take_new_data+0x284>
 800faf4:	6860      	ldr	r0, [r4, #4]
 800faf6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800faf8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800fafc:	3501      	adds	r5, #1
 800fafe:	42ab      	cmp	r3, r5
 800fb00:	d8f0      	bhi.n	800fae4 <_rclc_take_new_data+0x264>
 800fb02:	e72d      	b.n	800f960 <_rclc_take_new_data+0xe0>
 800fb04:	6860      	ldr	r0, [r4, #4]
 800fb06:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fb08:	3501      	adds	r5, #1
 800fb0a:	42ab      	cmp	r3, r5
 800fb0c:	d8ea      	bhi.n	800fae4 <_rclc_take_new_data+0x264>
 800fb0e:	e727      	b.n	800f960 <_rclc_take_new_data+0xe0>
 800fb10:	ab06      	add	r3, sp, #24
 800fb12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb14:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb18:	2103      	movs	r1, #3
 800fb1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fb1e:	6860      	ldr	r0, [r4, #4]
 800fb20:	f00a fffa 	bl	801ab18 <rclc_action_server_goal_cancel_reject>
 800fb24:	e70b      	b.n	800f93e <_rclc_take_new_data+0xbe>
 800fb26:	ab06      	add	r3, sp, #24
 800fb28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb2e:	2102      	movs	r1, #2
 800fb30:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fb34:	6860      	ldr	r0, [r4, #4]
 800fb36:	f00a ffef 	bl	801ab18 <rclc_action_server_goal_cancel_reject>
 800fb3a:	e700      	b.n	800f93e <_rclc_take_new_data+0xbe>
 800fb3c:	6860      	ldr	r0, [r4, #4]
 800fb3e:	e70a      	b.n	800f956 <_rclc_take_new_data+0xd6>
 800fb40:	6860      	ldr	r0, [r4, #4]
 800fb42:	4631      	mov	r1, r6
 800fb44:	f00a ff08 	bl	801a958 <rclc_action_remove_used_goal_handle>
 800fb48:	f000 feb2 	bl	80108b0 <rcutils_reset_error>
 800fb4c:	e6c0      	b.n	800f8d0 <_rclc_take_new_data+0x50>
 800fb4e:	2501      	movs	r5, #1
 800fb50:	e6be      	b.n	800f8d0 <_rclc_take_new_data+0x50>
 800fb52:	bf00      	nop

0800fb54 <rclc_executor_trigger_any>:
 800fb54:	4603      	mov	r3, r0
 800fb56:	b370      	cbz	r0, 800fbb6 <rclc_executor_trigger_any+0x62>
 800fb58:	b379      	cbz	r1, 800fbba <rclc_executor_trigger_any+0x66>
 800fb5a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800fb5e:	2200      	movs	r2, #0
 800fb60:	b350      	cbz	r0, 800fbb8 <rclc_executor_trigger_any+0x64>
 800fb62:	b430      	push	{r4, r5}
 800fb64:	f893 c000 	ldrb.w	ip, [r3]
 800fb68:	f1bc 0f08 	cmp.w	ip, #8
 800fb6c:	d017      	beq.n	800fb9e <rclc_executor_trigger_any+0x4a>
 800fb6e:	f1bc 0f09 	cmp.w	ip, #9
 800fb72:	d00d      	beq.n	800fb90 <rclc_executor_trigger_any+0x3c>
 800fb74:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800fb78:	b940      	cbnz	r0, 800fb8c <rclc_executor_trigger_any+0x38>
 800fb7a:	3201      	adds	r2, #1
 800fb7c:	4291      	cmp	r1, r2
 800fb7e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fb82:	d003      	beq.n	800fb8c <rclc_executor_trigger_any+0x38>
 800fb84:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d1eb      	bne.n	800fb64 <rclc_executor_trigger_any+0x10>
 800fb8c:	bc30      	pop	{r4, r5}
 800fb8e:	4770      	bx	lr
 800fb90:	685c      	ldr	r4, [r3, #4]
 800fb92:	6a25      	ldr	r5, [r4, #32]
 800fb94:	2d00      	cmp	r5, #0
 800fb96:	d1f9      	bne.n	800fb8c <rclc_executor_trigger_any+0x38>
 800fb98:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800fb9c:	e7ec      	b.n	800fb78 <rclc_executor_trigger_any+0x24>
 800fb9e:	685c      	ldr	r4, [r3, #4]
 800fba0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800fba2:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800fba6:	d1f1      	bne.n	800fb8c <rclc_executor_trigger_any+0x38>
 800fba8:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d1ed      	bne.n	800fb8c <rclc_executor_trigger_any+0x38>
 800fbb0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800fbb4:	e7e0      	b.n	800fb78 <rclc_executor_trigger_any+0x24>
 800fbb6:	4770      	bx	lr
 800fbb8:	4770      	bx	lr
 800fbba:	4608      	mov	r0, r1
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop

0800fbc0 <_rclc_execute>:
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	f000 80da 	beq.w	800fd7a <_rclc_execute+0x1ba>
 800fbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc8:	7843      	ldrb	r3, [r0, #1]
 800fbca:	b087      	sub	sp, #28
 800fbcc:	4604      	mov	r4, r0
 800fbce:	b123      	cbz	r3, 800fbda <_rclc_execute+0x1a>
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d01c      	beq.n	800fc0e <_rclc_execute+0x4e>
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	b007      	add	sp, #28
 800fbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbda:	7803      	ldrb	r3, [r0, #0]
 800fbdc:	2b08      	cmp	r3, #8
 800fbde:	f000 809e 	beq.w	800fd1e <_rclc_execute+0x15e>
 800fbe2:	2b09      	cmp	r3, #9
 800fbe4:	d024      	beq.n	800fc30 <_rclc_execute+0x70>
 800fbe6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d0f2      	beq.n	800fbd4 <_rclc_execute+0x14>
 800fbee:	2b0a      	cmp	r3, #10
 800fbf0:	f200 8158 	bhi.w	800fea4 <_rclc_execute+0x2e4>
 800fbf4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fbf8:	008c0071 	.word	0x008c0071
 800fbfc:	0071007e 	.word	0x0071007e
 800fc00:	00590075 	.word	0x00590075
 800fc04:	00590059 	.word	0x00590059
 800fc08:	01560156 	.word	0x01560156
 800fc0c:	007b      	.short	0x007b
 800fc0e:	7803      	ldrb	r3, [r0, #0]
 800fc10:	2b0a      	cmp	r3, #10
 800fc12:	f200 8147 	bhi.w	800fea4 <_rclc_execute+0x2e4>
 800fc16:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fc1a:	00f7      	.short	0x00f7
 800fc1c:	006d0079 	.word	0x006d0079
 800fc20:	00640060 	.word	0x00640060
 800fc24:	00480048 	.word	0x00480048
 800fc28:	00fe0048 	.word	0x00fe0048
 800fc2c:	006a0100 	.word	0x006a0100
 800fc30:	6840      	ldr	r0, [r0, #4]
 800fc32:	6a02      	ldr	r2, [r0, #32]
 800fc34:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	f040 80f1 	bne.w	800fe20 <_rclc_execute+0x260>
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d0c8      	beq.n	800fbd4 <_rclc_execute+0x14>
 800fc42:	e003      	b.n	800fc4c <_rclc_execute+0x8c>
 800fc44:	6858      	ldr	r0, [r3, #4]
 800fc46:	f00a fe87 	bl	801a958 <rclc_action_remove_used_goal_handle>
 800fc4a:	6860      	ldr	r0, [r4, #4]
 800fc4c:	f00a febe 	bl	801a9cc <rclc_action_find_first_terminated_handle>
 800fc50:	4603      	mov	r3, r0
 800fc52:	4601      	mov	r1, r0
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d1f5      	bne.n	800fc44 <_rclc_execute+0x84>
 800fc58:	6860      	ldr	r0, [r4, #4]
 800fc5a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800fc5e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 80e9 	beq.w	800fe3a <_rclc_execute+0x27a>
 800fc68:	f640 0634 	movw	r6, #2100	@ 0x834
 800fc6c:	2701      	movs	r7, #1
 800fc6e:	e007      	b.n	800fc80 <_rclc_execute+0xc0>
 800fc70:	4628      	mov	r0, r5
 800fc72:	f00a ff05 	bl	801aa80 <rclc_action_server_response_goal_request>
 800fc76:	6860      	ldr	r0, [r4, #4]
 800fc78:	4629      	mov	r1, r5
 800fc7a:	f00a fe6d 	bl	801a958 <rclc_action_remove_used_goal_handle>
 800fc7e:	6860      	ldr	r0, [r4, #4]
 800fc80:	2100      	movs	r1, #0
 800fc82:	f00a fe97 	bl	801a9b4 <rclc_action_find_first_handle_by_status>
 800fc86:	4605      	mov	r5, r0
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f000 80d3 	beq.w	800fe34 <_rclc_execute+0x274>
 800fc8e:	6863      	ldr	r3, [r4, #4]
 800fc90:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	4798      	blx	r3
 800fc96:	42b0      	cmp	r0, r6
 800fc98:	f04f 0100 	mov.w	r1, #0
 800fc9c:	d1e8      	bne.n	800fc70 <_rclc_execute+0xb0>
 800fc9e:	2101      	movs	r1, #1
 800fca0:	4628      	mov	r0, r5
 800fca2:	f00a feed 	bl	801aa80 <rclc_action_server_response_goal_request>
 800fca6:	722f      	strb	r7, [r5, #8]
 800fca8:	e7e9      	b.n	800fc7e <_rclc_execute+0xbe>
 800fcaa:	2b06      	cmp	r3, #6
 800fcac:	68a0      	ldr	r0, [r4, #8]
 800fcae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fcb0:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800fcb2:	f000 80b9 	beq.w	800fe28 <_rclc_execute+0x268>
 800fcb6:	2b07      	cmp	r3, #7
 800fcb8:	f000 80ef 	beq.w	800fe9a <_rclc_execute+0x2da>
 800fcbc:	47b0      	blx	r6
 800fcbe:	f104 0510 	add.w	r5, r4, #16
 800fcc2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fcc4:	6860      	ldr	r0, [r4, #4]
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	f009 f8d0 	bl	8018e6c <rcl_send_response>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	d082      	beq.n	800fbd6 <_rclc_execute+0x16>
 800fcd0:	9005      	str	r0, [sp, #20]
 800fcd2:	f000 fded 	bl	80108b0 <rcutils_reset_error>
 800fcd6:	9805      	ldr	r0, [sp, #20]
 800fcd8:	e77d      	b.n	800fbd6 <_rclc_execute+0x16>
 800fcda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fcdc:	68a0      	ldr	r0, [r4, #8]
 800fcde:	4798      	blx	r3
 800fce0:	e778      	b.n	800fbd4 <_rclc_execute+0x14>
 800fce2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fce4:	68a0      	ldr	r0, [r4, #8]
 800fce6:	f104 0110 	add.w	r1, r4, #16
 800fcea:	4798      	blx	r3
 800fcec:	e772      	b.n	800fbd4 <_rclc_execute+0x14>
 800fcee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fcf0:	4798      	blx	r3
 800fcf2:	e76f      	b.n	800fbd4 <_rclc_execute+0x14>
 800fcf4:	6860      	ldr	r0, [r4, #4]
 800fcf6:	f7ff fc83 	bl	800f600 <rcl_timer_call>
 800fcfa:	f240 3321 	movw	r3, #801	@ 0x321
 800fcfe:	4298      	cmp	r0, r3
 800fd00:	f43f af68 	beq.w	800fbd4 <_rclc_execute+0x14>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	f43f af66 	beq.w	800fbd6 <_rclc_execute+0x16>
 800fd0a:	e7e1      	b.n	800fcd0 <_rclc_execute+0x110>
 800fd0c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800fd10:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d0e8      	beq.n	800fcea <_rclc_execute+0x12a>
 800fd18:	68a0      	ldr	r0, [r4, #8]
 800fd1a:	4798      	blx	r3
 800fd1c:	e75a      	b.n	800fbd4 <_rclc_execute+0x14>
 800fd1e:	6840      	ldr	r0, [r0, #4]
 800fd20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800fd22:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800fd26:	d107      	bne.n	800fd38 <_rclc_execute+0x178>
 800fd28:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fd2c:	b923      	cbnz	r3, 800fd38 <_rclc_execute+0x178>
 800fd2e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f43f af4e 	beq.w	800fbd4 <_rclc_execute+0x14>
 800fd38:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fd3c:	b303      	cbz	r3, 800fd80 <_rclc_execute+0x1c0>
 800fd3e:	2600      	movs	r6, #0
 800fd40:	2701      	movs	r7, #1
 800fd42:	e004      	b.n	800fd4e <_rclc_execute+0x18e>
 800fd44:	f00a fdd2 	bl	801a8ec <rclc_action_send_result_request>
 800fd48:	b990      	cbnz	r0, 800fd70 <_rclc_execute+0x1b0>
 800fd4a:	722f      	strb	r7, [r5, #8]
 800fd4c:	6860      	ldr	r0, [r4, #4]
 800fd4e:	f00a fe7f 	bl	801aa50 <rclc_action_find_first_handle_with_goal_response>
 800fd52:	4605      	mov	r5, r0
 800fd54:	b198      	cbz	r0, 800fd7e <_rclc_execute+0x1be>
 800fd56:	6863      	ldr	r3, [r4, #4]
 800fd58:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd5a:	699b      	ldr	r3, [r3, #24]
 800fd5c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800fd60:	f885 6020 	strb.w	r6, [r5, #32]
 800fd64:	4798      	blx	r3
 800fd66:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1e9      	bne.n	800fd44 <_rclc_execute+0x184>
 800fd70:	6860      	ldr	r0, [r4, #4]
 800fd72:	4629      	mov	r1, r5
 800fd74:	f00a fdf0 	bl	801a958 <rclc_action_remove_used_goal_handle>
 800fd78:	e7e8      	b.n	800fd4c <_rclc_execute+0x18c>
 800fd7a:	200b      	movs	r0, #11
 800fd7c:	4770      	bx	lr
 800fd7e:	6860      	ldr	r0, [r4, #4]
 800fd80:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fd84:	b18b      	cbz	r3, 800fdaa <_rclc_execute+0x1ea>
 800fd86:	68c5      	ldr	r5, [r0, #12]
 800fd88:	b32d      	cbz	r5, 800fdd6 <_rclc_execute+0x216>
 800fd8a:	2600      	movs	r6, #0
 800fd8c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800fd90:	b143      	cbz	r3, 800fda4 <_rclc_execute+0x1e4>
 800fd92:	69c3      	ldr	r3, [r0, #28]
 800fd94:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800fd98:	b123      	cbz	r3, 800fda4 <_rclc_execute+0x1e4>
 800fd9a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fd9c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd9e:	4628      	mov	r0, r5
 800fda0:	4798      	blx	r3
 800fda2:	6860      	ldr	r0, [r4, #4]
 800fda4:	682d      	ldr	r5, [r5, #0]
 800fda6:	2d00      	cmp	r5, #0
 800fda8:	d1f0      	bne.n	800fd8c <_rclc_execute+0x1cc>
 800fdaa:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fdae:	b193      	cbz	r3, 800fdd6 <_rclc_execute+0x216>
 800fdb0:	68c5      	ldr	r5, [r0, #12]
 800fdb2:	b185      	cbz	r5, 800fdd6 <_rclc_execute+0x216>
 800fdb4:	2600      	movs	r6, #0
 800fdb6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800fdba:	b14b      	cbz	r3, 800fdd0 <_rclc_execute+0x210>
 800fdbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fdbe:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800fdc2:	b12b      	cbz	r3, 800fdd0 <_rclc_execute+0x210>
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fdc8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800fdcc:	4798      	blx	r3
 800fdce:	6860      	ldr	r0, [r4, #4]
 800fdd0:	682d      	ldr	r5, [r5, #0]
 800fdd2:	2d00      	cmp	r5, #0
 800fdd4:	d1ef      	bne.n	800fdb6 <_rclc_execute+0x1f6>
 800fdd6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f43f aefa 	beq.w	800fbd4 <_rclc_execute+0x14>
 800fde0:	2700      	movs	r7, #0
 800fde2:	e00b      	b.n	800fdfc <_rclc_execute+0x23c>
 800fde4:	6863      	ldr	r3, [r4, #4]
 800fde6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fde8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fdea:	6a1e      	ldr	r6, [r3, #32]
 800fdec:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800fdf0:	47b0      	blx	r6
 800fdf2:	6860      	ldr	r0, [r4, #4]
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	f00a fdaf 	bl	801a958 <rclc_action_remove_used_goal_handle>
 800fdfa:	6860      	ldr	r0, [r4, #4]
 800fdfc:	f00a fe34 	bl	801aa68 <rclc_action_find_first_handle_with_result_response>
 800fe00:	4605      	mov	r5, r0
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d1ee      	bne.n	800fde4 <_rclc_execute+0x224>
 800fe06:	e6e5      	b.n	800fbd4 <_rclc_execute+0x14>
 800fe08:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800fe0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	f43f af65 	beq.w	800fcde <_rclc_execute+0x11e>
 800fe14:	e762      	b.n	800fcdc <_rclc_execute+0x11c>
 800fe16:	6840      	ldr	r0, [r0, #4]
 800fe18:	e78e      	b.n	800fd38 <_rclc_execute+0x178>
 800fe1a:	6840      	ldr	r0, [r0, #4]
 800fe1c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f43f af1c 	beq.w	800fc5e <_rclc_execute+0x9e>
 800fe26:	e711      	b.n	800fc4c <_rclc_execute+0x8c>
 800fe28:	f104 0510 	add.w	r5, r4, #16
 800fe2c:	460a      	mov	r2, r1
 800fe2e:	4629      	mov	r1, r5
 800fe30:	47b0      	blx	r6
 800fe32:	e746      	b.n	800fcc2 <_rclc_execute+0x102>
 800fe34:	6860      	ldr	r0, [r4, #4]
 800fe36:	f880 5020 	strb.w	r5, [r0, #32]
 800fe3a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f43f aec8 	beq.w	800fbd4 <_rclc_execute+0x14>
 800fe44:	68c5      	ldr	r5, [r0, #12]
 800fe46:	b325      	cbz	r5, 800fe92 <_rclc_execute+0x2d2>
 800fe48:	2602      	movs	r6, #2
 800fe4a:	e001      	b.n	800fe50 <_rclc_execute+0x290>
 800fe4c:	682d      	ldr	r5, [r5, #0]
 800fe4e:	b305      	cbz	r5, 800fe92 <_rclc_execute+0x2d2>
 800fe50:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800fe54:	2b03      	cmp	r3, #3
 800fe56:	d1f9      	bne.n	800fe4c <_rclc_execute+0x28c>
 800fe58:	69c3      	ldr	r3, [r0, #28]
 800fe5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	4798      	blx	r3
 800fe60:	4603      	mov	r3, r0
 800fe62:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800fe66:	4628      	mov	r0, r5
 800fe68:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800fe6c:	b11b      	cbz	r3, 800fe76 <_rclc_execute+0x2b6>
 800fe6e:	f00a fe27 	bl	801aac0 <rclc_action_server_goal_cancel_accept>
 800fe72:	6860      	ldr	r0, [r4, #4]
 800fe74:	e7ea      	b.n	800fe4c <_rclc_execute+0x28c>
 800fe76:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800fe78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fe7c:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800fe80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe84:	6860      	ldr	r0, [r4, #4]
 800fe86:	2101      	movs	r1, #1
 800fe88:	f00a fe46 	bl	801ab18 <rclc_action_server_goal_cancel_reject>
 800fe8c:	722e      	strb	r6, [r5, #8]
 800fe8e:	6860      	ldr	r0, [r4, #4]
 800fe90:	e7dc      	b.n	800fe4c <_rclc_execute+0x28c>
 800fe92:	2300      	movs	r3, #0
 800fe94:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fe98:	e69c      	b.n	800fbd4 <_rclc_execute+0x14>
 800fe9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe9c:	47b0      	blx	r6
 800fe9e:	f104 0510 	add.w	r5, r4, #16
 800fea2:	e70e      	b.n	800fcc2 <_rclc_execute+0x102>
 800fea4:	2001      	movs	r0, #1
 800fea6:	e696      	b.n	800fbd6 <_rclc_execute+0x16>

0800fea8 <rclc_executor_init>:
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d05a      	beq.n	800ff62 <rclc_executor_init+0xba>
 800feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb0:	460d      	mov	r5, r1
 800feb2:	b0b2      	sub	sp, #200	@ 0xc8
 800feb4:	2900      	cmp	r1, #0
 800feb6:	d050      	beq.n	800ff5a <rclc_executor_init+0xb2>
 800feb8:	4604      	mov	r4, r0
 800feba:	4618      	mov	r0, r3
 800febc:	4616      	mov	r6, r2
 800febe:	461f      	mov	r7, r3
 800fec0:	f000 fc12 	bl	80106e8 <rcutils_allocator_is_valid>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d048      	beq.n	800ff5a <rclc_executor_init+0xb2>
 800fec8:	2e00      	cmp	r6, #0
 800feca:	d046      	beq.n	800ff5a <rclc_executor_init+0xb2>
 800fecc:	492a      	ldr	r1, [pc, #168]	@ (800ff78 <rclc_executor_init+0xd0>)
 800fece:	2290      	movs	r2, #144	@ 0x90
 800fed0:	a80e      	add	r0, sp, #56	@ 0x38
 800fed2:	f00e f836 	bl	801df42 <memcpy>
 800fed6:	a90e      	add	r1, sp, #56	@ 0x38
 800fed8:	2290      	movs	r2, #144	@ 0x90
 800feda:	4620      	mov	r0, r4
 800fedc:	f00e f831 	bl	801df42 <memcpy>
 800fee0:	6065      	str	r5, [r4, #4]
 800fee2:	4668      	mov	r0, sp
 800fee4:	60e6      	str	r6, [r4, #12]
 800fee6:	466d      	mov	r5, sp
 800fee8:	f009 fa80 	bl	80193ec <rcl_get_zero_initialized_wait_set>
 800feec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800feee:	f104 0c18 	add.w	ip, r4, #24
 800fef2:	f8d7 8000 	ldr.w	r8, [r7]
 800fef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fefa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fefc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff06:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800ff70 <rclc_executor_init+0xc8>
 800ff0a:	682b      	ldr	r3, [r5, #0]
 800ff0c:	f8cc 3000 	str.w	r3, [ip]
 800ff10:	6939      	ldr	r1, [r7, #16]
 800ff12:	6167      	str	r7, [r4, #20]
 800ff14:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800ff18:	01b0      	lsls	r0, r6, #6
 800ff1a:	47c0      	blx	r8
 800ff1c:	60a0      	str	r0, [r4, #8]
 800ff1e:	b310      	cbz	r0, 800ff66 <rclc_executor_init+0xbe>
 800ff20:	2500      	movs	r5, #0
 800ff22:	e000      	b.n	800ff26 <rclc_executor_init+0x7e>
 800ff24:	68a0      	ldr	r0, [r4, #8]
 800ff26:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	3501      	adds	r5, #1
 800ff2e:	f000 fa55 	bl	80103dc <rclc_executor_handle_init>
 800ff32:	42ae      	cmp	r6, r5
 800ff34:	d1f6      	bne.n	800ff24 <rclc_executor_init+0x7c>
 800ff36:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800ff3a:	f000 fa45 	bl	80103c8 <rclc_executor_handle_counters_zero_init>
 800ff3e:	490f      	ldr	r1, [pc, #60]	@ (800ff7c <rclc_executor_init+0xd4>)
 800ff40:	68a2      	ldr	r2, [r4, #8]
 800ff42:	2300      	movs	r3, #0
 800ff44:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800ff48:	b12a      	cbz	r2, 800ff56 <rclc_executor_init+0xae>
 800ff4a:	6962      	ldr	r2, [r4, #20]
 800ff4c:	b11a      	cbz	r2, 800ff56 <rclc_executor_init+0xae>
 800ff4e:	68e2      	ldr	r2, [r4, #12]
 800ff50:	b10a      	cbz	r2, 800ff56 <rclc_executor_init+0xae>
 800ff52:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800ff56:	2000      	movs	r0, #0
 800ff58:	e000      	b.n	800ff5c <rclc_executor_init+0xb4>
 800ff5a:	200b      	movs	r0, #11
 800ff5c:	b032      	add	sp, #200	@ 0xc8
 800ff5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff62:	200b      	movs	r0, #11
 800ff64:	4770      	bx	lr
 800ff66:	200a      	movs	r0, #10
 800ff68:	e7f8      	b.n	800ff5c <rclc_executor_init+0xb4>
 800ff6a:	bf00      	nop
 800ff6c:	f3af 8000 	nop.w
 800ff70:	3b9aca00 	.word	0x3b9aca00
 800ff74:	00000000 	.word	0x00000000
 800ff78:	080205d0 	.word	0x080205d0
 800ff7c:	0800fb55 	.word	0x0800fb55

0800ff80 <rclc_executor_fini>:
 800ff80:	b1f8      	cbz	r0, 800ffc2 <rclc_executor_fini+0x42>
 800ff82:	b538      	push	{r3, r4, r5, lr}
 800ff84:	4604      	mov	r4, r0
 800ff86:	6880      	ldr	r0, [r0, #8]
 800ff88:	b1c8      	cbz	r0, 800ffbe <rclc_executor_fini+0x3e>
 800ff8a:	6963      	ldr	r3, [r4, #20]
 800ff8c:	b1bb      	cbz	r3, 800ffbe <rclc_executor_fini+0x3e>
 800ff8e:	68e2      	ldr	r2, [r4, #12]
 800ff90:	b1aa      	cbz	r2, 800ffbe <rclc_executor_fini+0x3e>
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	6919      	ldr	r1, [r3, #16]
 800ff96:	4790      	blx	r2
 800ff98:	2300      	movs	r3, #0
 800ff9a:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800ff9e:	6123      	str	r3, [r4, #16]
 800ffa0:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800ffa4:	f104 0518 	add.w	r5, r4, #24
 800ffa8:	f000 fa0e 	bl	80103c8 <rclc_executor_handle_counters_zero_init>
 800ffac:	4628      	mov	r0, r5
 800ffae:	f009 fa31 	bl	8019414 <rcl_wait_set_is_valid>
 800ffb2:	b940      	cbnz	r0, 800ffc6 <rclc_executor_fini+0x46>
 800ffb4:	a308      	add	r3, pc, #32	@ (adr r3, 800ffd8 <rclc_executor_fini+0x58>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	4770      	bx	lr
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	f009 fa2a 	bl	8019420 <rcl_wait_set_fini>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d0f1      	beq.n	800ffb4 <rclc_executor_fini+0x34>
 800ffd0:	f000 fc6e 	bl	80108b0 <rcutils_reset_error>
 800ffd4:	e7ee      	b.n	800ffb4 <rclc_executor_fini+0x34>
 800ffd6:	bf00      	nop
 800ffd8:	3b9aca00 	.word	0x3b9aca00
 800ffdc:	00000000 	.word	0x00000000

0800ffe0 <rclc_executor_add_subscription>:
 800ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe2:	f89d e018 	ldrb.w	lr, [sp, #24]
 800ffe6:	b338      	cbz	r0, 8010038 <rclc_executor_add_subscription+0x58>
 800ffe8:	b331      	cbz	r1, 8010038 <rclc_executor_add_subscription+0x58>
 800ffea:	b32a      	cbz	r2, 8010038 <rclc_executor_add_subscription+0x58>
 800ffec:	b323      	cbz	r3, 8010038 <rclc_executor_add_subscription+0x58>
 800ffee:	4604      	mov	r4, r0
 800fff0:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800fff4:	42a8      	cmp	r0, r5
 800fff6:	d301      	bcc.n	800fffc <rclc_executor_add_subscription+0x1c>
 800fff8:	2001      	movs	r0, #1
 800fffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fffc:	68a6      	ldr	r6, [r4, #8]
 800fffe:	0187      	lsls	r7, r0, #6
 8010000:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8010004:	2500      	movs	r5, #0
 8010006:	55f5      	strb	r5, [r6, r7]
 8010008:	3001      	adds	r0, #1
 801000a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 801000e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8010012:	2301      	movs	r3, #1
 8010014:	f104 0518 	add.w	r5, r4, #24
 8010018:	e9cc 1201 	strd	r1, r2, [ip, #4]
 801001c:	f88c e001 	strb.w	lr, [ip, #1]
 8010020:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8010024:	6120      	str	r0, [r4, #16]
 8010026:	4628      	mov	r0, r5
 8010028:	f009 f9f4 	bl	8019414 <rcl_wait_set_is_valid>
 801002c:	b930      	cbnz	r0, 801003c <rclc_executor_add_subscription+0x5c>
 801002e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010030:	3301      	adds	r3, #1
 8010032:	2000      	movs	r0, #0
 8010034:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8010036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010038:	200b      	movs	r0, #11
 801003a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801003c:	4628      	mov	r0, r5
 801003e:	f009 f9ef 	bl	8019420 <rcl_wait_set_fini>
 8010042:	2800      	cmp	r0, #0
 8010044:	d0f3      	beq.n	801002e <rclc_executor_add_subscription+0x4e>
 8010046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010048 <rclc_executor_add_timer>:
 8010048:	b300      	cbz	r0, 801008c <rclc_executor_add_timer+0x44>
 801004a:	b1f9      	cbz	r1, 801008c <rclc_executor_add_timer+0x44>
 801004c:	b538      	push	{r3, r4, r5, lr}
 801004e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010052:	4293      	cmp	r3, r2
 8010054:	4604      	mov	r4, r0
 8010056:	d301      	bcc.n	801005c <rclc_executor_add_timer+0x14>
 8010058:	2001      	movs	r0, #1
 801005a:	bd38      	pop	{r3, r4, r5, pc}
 801005c:	6880      	ldr	r0, [r0, #8]
 801005e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8010062:	019d      	lsls	r5, r3, #6
 8010064:	6051      	str	r1, [r2, #4]
 8010066:	2102      	movs	r1, #2
 8010068:	5341      	strh	r1, [r0, r5]
 801006a:	3301      	adds	r3, #1
 801006c:	2000      	movs	r0, #0
 801006e:	2101      	movs	r1, #1
 8010070:	f104 0518 	add.w	r5, r4, #24
 8010074:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8010076:	8711      	strh	r1, [r2, #56]	@ 0x38
 8010078:	4628      	mov	r0, r5
 801007a:	6123      	str	r3, [r4, #16]
 801007c:	f009 f9ca 	bl	8019414 <rcl_wait_set_is_valid>
 8010080:	b930      	cbnz	r0, 8010090 <rclc_executor_add_timer+0x48>
 8010082:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010084:	3301      	adds	r3, #1
 8010086:	2000      	movs	r0, #0
 8010088:	6523      	str	r3, [r4, #80]	@ 0x50
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	200b      	movs	r0, #11
 801008e:	4770      	bx	lr
 8010090:	4628      	mov	r0, r5
 8010092:	f009 f9c5 	bl	8019420 <rcl_wait_set_fini>
 8010096:	2800      	cmp	r0, #0
 8010098:	d0f3      	beq.n	8010082 <rclc_executor_add_timer+0x3a>
 801009a:	bd38      	pop	{r3, r4, r5, pc}

0801009c <rclc_executor_prepare>:
 801009c:	2800      	cmp	r0, #0
 801009e:	d044      	beq.n	801012a <rclc_executor_prepare+0x8e>
 80100a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a2:	f100 0518 	add.w	r5, r0, #24
 80100a6:	b09b      	sub	sp, #108	@ 0x6c
 80100a8:	4604      	mov	r4, r0
 80100aa:	4628      	mov	r0, r5
 80100ac:	f009 f9b2 	bl	8019414 <rcl_wait_set_is_valid>
 80100b0:	b110      	cbz	r0, 80100b8 <rclc_executor_prepare+0x1c>
 80100b2:	2000      	movs	r0, #0
 80100b4:	b01b      	add	sp, #108	@ 0x6c
 80100b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100b8:	4628      	mov	r0, r5
 80100ba:	f009 f9b1 	bl	8019420 <rcl_wait_set_fini>
 80100be:	2800      	cmp	r0, #0
 80100c0:	d130      	bne.n	8010124 <rclc_executor_prepare+0x88>
 80100c2:	a80c      	add	r0, sp, #48	@ 0x30
 80100c4:	f009 f992 	bl	80193ec <rcl_get_zero_initialized_wait_set>
 80100c8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80100cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100d0:	46ae      	mov	lr, r5
 80100d2:	6967      	ldr	r7, [r4, #20]
 80100d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100e8:	f8dc 3000 	ldr.w	r3, [ip]
 80100ec:	f8ce 3000 	str.w	r3, [lr]
 80100f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80100f2:	ae04      	add	r6, sp, #16
 80100f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	6862      	ldr	r2, [r4, #4]
 80100fa:	6033      	str	r3, [r6, #0]
 80100fc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80100fe:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8010100:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010104:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8010108:	e9cd 2100 	strd	r2, r1, [sp]
 801010c:	4628      	mov	r0, r5
 801010e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010110:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8010112:	f009 fca1 	bl	8019a58 <rcl_wait_set_init>
 8010116:	2800      	cmp	r0, #0
 8010118:	d0cc      	beq.n	80100b4 <rclc_executor_prepare+0x18>
 801011a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801011c:	f000 fbc8 	bl	80108b0 <rcutils_reset_error>
 8010120:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010122:	e7c7      	b.n	80100b4 <rclc_executor_prepare+0x18>
 8010124:	f000 fbc4 	bl	80108b0 <rcutils_reset_error>
 8010128:	e7cb      	b.n	80100c2 <rclc_executor_prepare+0x26>
 801012a:	200b      	movs	r0, #11
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop

08010130 <rclc_executor_spin_some>:
 8010130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	b083      	sub	sp, #12
 8010136:	2800      	cmp	r0, #0
 8010138:	f000 8091 	beq.w	801025e <rclc_executor_spin_some+0x12e>
 801013c:	4604      	mov	r4, r0
 801013e:	6840      	ldr	r0, [r0, #4]
 8010140:	4690      	mov	r8, r2
 8010142:	4699      	mov	r9, r3
 8010144:	f008 f9aa 	bl	801849c <rcl_context_is_valid>
 8010148:	2800      	cmp	r0, #0
 801014a:	d037      	beq.n	80101bc <rclc_executor_spin_some+0x8c>
 801014c:	4620      	mov	r0, r4
 801014e:	f104 0718 	add.w	r7, r4, #24
 8010152:	f7ff ffa3 	bl	801009c <rclc_executor_prepare>
 8010156:	4638      	mov	r0, r7
 8010158:	f009 fa32 	bl	80195c0 <rcl_wait_set_clear>
 801015c:	4606      	mov	r6, r0
 801015e:	2800      	cmp	r0, #0
 8010160:	d177      	bne.n	8010252 <rclc_executor_spin_some+0x122>
 8010162:	68e3      	ldr	r3, [r4, #12]
 8010164:	4605      	mov	r5, r0
 8010166:	b1eb      	cbz	r3, 80101a4 <rclc_executor_spin_some+0x74>
 8010168:	68a1      	ldr	r1, [r4, #8]
 801016a:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 801016e:	01aa      	lsls	r2, r5, #6
 8010170:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8010174:	b1b3      	cbz	r3, 80101a4 <rclc_executor_spin_some+0x74>
 8010176:	5c8b      	ldrb	r3, [r1, r2]
 8010178:	2b0a      	cmp	r3, #10
 801017a:	d81f      	bhi.n	80101bc <rclc_executor_spin_some+0x8c>
 801017c:	e8df f003 	tbb	[pc, r3]
 8010180:	253e3434 	.word	0x253e3434
 8010184:	06060625 	.word	0x06060625
 8010188:	525d      	.short	0x525d
 801018a:	48          	.byte	0x48
 801018b:	00          	.byte	0x00
 801018c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010190:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010194:	4638      	mov	r0, r7
 8010196:	f009 fd73 	bl	8019c80 <rcl_wait_set_add_service>
 801019a:	b9f8      	cbnz	r0, 80101dc <rclc_executor_spin_some+0xac>
 801019c:	68e3      	ldr	r3, [r4, #12]
 801019e:	3501      	adds	r5, #1
 80101a0:	42ab      	cmp	r3, r5
 80101a2:	d8e1      	bhi.n	8010168 <rclc_executor_spin_some+0x38>
 80101a4:	4642      	mov	r2, r8
 80101a6:	464b      	mov	r3, r9
 80101a8:	4638      	mov	r0, r7
 80101aa:	f009 fd95 	bl	8019cd8 <rcl_wait>
 80101ae:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 80101b2:	2d00      	cmp	r5, #0
 80101b4:	f000 80ab 	beq.w	801030e <rclc_executor_spin_some+0x1de>
 80101b8:	2d01      	cmp	r5, #1
 80101ba:	d055      	beq.n	8010268 <rclc_executor_spin_some+0x138>
 80101bc:	f000 fb78 	bl	80108b0 <rcutils_reset_error>
 80101c0:	2601      	movs	r6, #1
 80101c2:	4630      	mov	r0, r6
 80101c4:	b003      	add	sp, #12
 80101c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80101ce:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80101d2:	4638      	mov	r0, r7
 80101d4:	f009 fd28 	bl	8019c28 <rcl_wait_set_add_client>
 80101d8:	2800      	cmp	r0, #0
 80101da:	d0df      	beq.n	801019c <rclc_executor_spin_some+0x6c>
 80101dc:	9001      	str	r0, [sp, #4]
 80101de:	f000 fb67 	bl	80108b0 <rcutils_reset_error>
 80101e2:	9801      	ldr	r0, [sp, #4]
 80101e4:	4606      	mov	r6, r0
 80101e6:	e7ec      	b.n	80101c2 <rclc_executor_spin_some+0x92>
 80101e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80101ec:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80101f0:	4638      	mov	r0, r7
 80101f2:	f009 f9b9 	bl	8019568 <rcl_wait_set_add_subscription>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d0d0      	beq.n	801019c <rclc_executor_spin_some+0x6c>
 80101fa:	e7ef      	b.n	80101dc <rclc_executor_spin_some+0xac>
 80101fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010200:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010204:	4638      	mov	r0, r7
 8010206:	f009 fcdf 	bl	8019bc8 <rcl_wait_set_add_timer>
 801020a:	2800      	cmp	r0, #0
 801020c:	d0c6      	beq.n	801019c <rclc_executor_spin_some+0x6c>
 801020e:	e7e5      	b.n	80101dc <rclc_executor_spin_some+0xac>
 8010210:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010214:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010218:	4638      	mov	r0, r7
 801021a:	f009 fca9 	bl	8019b70 <rcl_wait_set_add_guard_condition>
 801021e:	2800      	cmp	r0, #0
 8010220:	d0bc      	beq.n	801019c <rclc_executor_spin_some+0x6c>
 8010222:	e7db      	b.n	80101dc <rclc_executor_spin_some+0xac>
 8010224:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010228:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801022c:	3110      	adds	r1, #16
 801022e:	4638      	mov	r0, r7
 8010230:	f00a fa70 	bl	801a714 <rcl_action_wait_set_add_action_server>
 8010234:	2800      	cmp	r0, #0
 8010236:	d0b1      	beq.n	801019c <rclc_executor_spin_some+0x6c>
 8010238:	e7d0      	b.n	80101dc <rclc_executor_spin_some+0xac>
 801023a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801023e:	2300      	movs	r3, #0
 8010240:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010244:	3110      	adds	r1, #16
 8010246:	4638      	mov	r0, r7
 8010248:	f00a f852 	bl	801a2f0 <rcl_action_wait_set_add_action_client>
 801024c:	2800      	cmp	r0, #0
 801024e:	d0a5      	beq.n	801019c <rclc_executor_spin_some+0x6c>
 8010250:	e7c4      	b.n	80101dc <rclc_executor_spin_some+0xac>
 8010252:	f000 fb2d 	bl	80108b0 <rcutils_reset_error>
 8010256:	4630      	mov	r0, r6
 8010258:	b003      	add	sp, #12
 801025a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025e:	260b      	movs	r6, #11
 8010260:	4630      	mov	r0, r6
 8010262:	b003      	add	sp, #12
 8010264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010268:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 801026c:	4663      	mov	r3, ip
 801026e:	4615      	mov	r5, r2
 8010270:	b1ca      	cbz	r2, 80102a6 <rclc_executor_spin_some+0x176>
 8010272:	2500      	movs	r5, #0
 8010274:	46a8      	mov	r8, r5
 8010276:	f240 1991 	movw	r9, #401	@ 0x191
 801027a:	e00c      	b.n	8010296 <rclc_executor_spin_some+0x166>
 801027c:	f7ff fab2 	bl	800f7e4 <_rclc_check_for_new_data>
 8010280:	f108 0801 	add.w	r8, r8, #1
 8010284:	4605      	mov	r5, r0
 8010286:	b108      	cbz	r0, 801028c <rclc_executor_spin_some+0x15c>
 8010288:	4548      	cmp	r0, r9
 801028a:	d13e      	bne.n	801030a <rclc_executor_spin_some+0x1da>
 801028c:	68e2      	ldr	r2, [r4, #12]
 801028e:	4590      	cmp	r8, r2
 8010290:	f080 808b 	bcs.w	80103aa <rclc_executor_spin_some+0x27a>
 8010294:	68a3      	ldr	r3, [r4, #8]
 8010296:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 801029a:	469c      	mov	ip, r3
 801029c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80102a0:	4639      	mov	r1, r7
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d1ea      	bne.n	801027c <rclc_executor_spin_some+0x14c>
 80102a6:	4611      	mov	r1, r2
 80102a8:	4660      	mov	r0, ip
 80102aa:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 80102ae:	4798      	blx	r3
 80102b0:	b358      	cbz	r0, 801030a <rclc_executor_spin_some+0x1da>
 80102b2:	68e3      	ldr	r3, [r4, #12]
 80102b4:	b34b      	cbz	r3, 801030a <rclc_executor_spin_some+0x1da>
 80102b6:	f04f 0800 	mov.w	r8, #0
 80102ba:	f240 1991 	movw	r9, #401	@ 0x191
 80102be:	e00a      	b.n	80102d6 <rclc_executor_spin_some+0x1a6>
 80102c0:	f7ff fade 	bl	800f880 <_rclc_take_new_data>
 80102c4:	f108 0801 	add.w	r8, r8, #1
 80102c8:	4605      	mov	r5, r0
 80102ca:	b108      	cbz	r0, 80102d0 <rclc_executor_spin_some+0x1a0>
 80102cc:	4548      	cmp	r0, r9
 80102ce:	d11c      	bne.n	801030a <rclc_executor_spin_some+0x1da>
 80102d0:	68e3      	ldr	r3, [r4, #12]
 80102d2:	4598      	cmp	r8, r3
 80102d4:	d26f      	bcs.n	80103b6 <rclc_executor_spin_some+0x286>
 80102d6:	68a3      	ldr	r3, [r4, #8]
 80102d8:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 80102dc:	4639      	mov	r1, r7
 80102de:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80102e2:	2a00      	cmp	r2, #0
 80102e4:	d1ec      	bne.n	80102c0 <rclc_executor_spin_some+0x190>
 80102e6:	2700      	movs	r7, #0
 80102e8:	e009      	b.n	80102fe <rclc_executor_spin_some+0x1ce>
 80102ea:	f7ff fc69 	bl	800fbc0 <_rclc_execute>
 80102ee:	3701      	adds	r7, #1
 80102f0:	4605      	mov	r5, r0
 80102f2:	b950      	cbnz	r0, 801030a <rclc_executor_spin_some+0x1da>
 80102f4:	68e3      	ldr	r3, [r4, #12]
 80102f6:	429f      	cmp	r7, r3
 80102f8:	f4bf af63 	bcs.w	80101c2 <rclc_executor_spin_some+0x92>
 80102fc:	68a3      	ldr	r3, [r4, #8]
 80102fe:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 8010302:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010306:	2b00      	cmp	r3, #0
 8010308:	d1ef      	bne.n	80102ea <rclc_executor_spin_some+0x1ba>
 801030a:	462e      	mov	r6, r5
 801030c:	e759      	b.n	80101c2 <rclc_executor_spin_some+0x92>
 801030e:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8010312:	4663      	mov	r3, ip
 8010314:	2a00      	cmp	r2, #0
 8010316:	d054      	beq.n	80103c2 <rclc_executor_spin_some+0x292>
 8010318:	46a8      	mov	r8, r5
 801031a:	f240 1991 	movw	r9, #401	@ 0x191
 801031e:	e00b      	b.n	8010338 <rclc_executor_spin_some+0x208>
 8010320:	f7ff fa60 	bl	800f7e4 <_rclc_check_for_new_data>
 8010324:	f108 0801 	add.w	r8, r8, #1
 8010328:	4605      	mov	r5, r0
 801032a:	b108      	cbz	r0, 8010330 <rclc_executor_spin_some+0x200>
 801032c:	4548      	cmp	r0, r9
 801032e:	d1ec      	bne.n	801030a <rclc_executor_spin_some+0x1da>
 8010330:	68e2      	ldr	r2, [r4, #12]
 8010332:	4590      	cmp	r8, r2
 8010334:	d23c      	bcs.n	80103b0 <rclc_executor_spin_some+0x280>
 8010336:	68a3      	ldr	r3, [r4, #8]
 8010338:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 801033c:	469c      	mov	ip, r3
 801033e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010342:	4639      	mov	r1, r7
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1eb      	bne.n	8010320 <rclc_executor_spin_some+0x1f0>
 8010348:	4611      	mov	r1, r2
 801034a:	4660      	mov	r0, ip
 801034c:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8010350:	4798      	blx	r3
 8010352:	2800      	cmp	r0, #0
 8010354:	d0d9      	beq.n	801030a <rclc_executor_spin_some+0x1da>
 8010356:	68e3      	ldr	r3, [r4, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d0d6      	beq.n	801030a <rclc_executor_spin_some+0x1da>
 801035c:	f04f 0a00 	mov.w	sl, #0
 8010360:	f240 1891 	movw	r8, #401	@ 0x191
 8010364:	f240 2959 	movw	r9, #601	@ 0x259
 8010368:	e013      	b.n	8010392 <rclc_executor_spin_some+0x262>
 801036a:	f7ff fa89 	bl	800f880 <_rclc_take_new_data>
 801036e:	b118      	cbz	r0, 8010378 <rclc_executor_spin_some+0x248>
 8010370:	4540      	cmp	r0, r8
 8010372:	d001      	beq.n	8010378 <rclc_executor_spin_some+0x248>
 8010374:	4548      	cmp	r0, r9
 8010376:	d122      	bne.n	80103be <rclc_executor_spin_some+0x28e>
 8010378:	68a0      	ldr	r0, [r4, #8]
 801037a:	4458      	add	r0, fp
 801037c:	f7ff fc20 	bl	800fbc0 <_rclc_execute>
 8010380:	f10a 0a01 	add.w	sl, sl, #1
 8010384:	4605      	mov	r5, r0
 8010386:	2800      	cmp	r0, #0
 8010388:	d1bf      	bne.n	801030a <rclc_executor_spin_some+0x1da>
 801038a:	68e3      	ldr	r3, [r4, #12]
 801038c:	459a      	cmp	sl, r3
 801038e:	f4bf af18 	bcs.w	80101c2 <rclc_executor_spin_some+0x92>
 8010392:	68a0      	ldr	r0, [r4, #8]
 8010394:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8010398:	4639      	mov	r1, r7
 801039a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801039e:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1e1      	bne.n	801036a <rclc_executor_spin_some+0x23a>
 80103a6:	462e      	mov	r6, r5
 80103a8:	e70b      	b.n	80101c2 <rclc_executor_spin_some+0x92>
 80103aa:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80103ae:	e77a      	b.n	80102a6 <rclc_executor_spin_some+0x176>
 80103b0:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80103b4:	e7c8      	b.n	8010348 <rclc_executor_spin_some+0x218>
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d0a7      	beq.n	801030a <rclc_executor_spin_some+0x1da>
 80103ba:	68a3      	ldr	r3, [r4, #8]
 80103bc:	e793      	b.n	80102e6 <rclc_executor_spin_some+0x1b6>
 80103be:	4606      	mov	r6, r0
 80103c0:	e6ff      	b.n	80101c2 <rclc_executor_spin_some+0x92>
 80103c2:	4615      	mov	r5, r2
 80103c4:	e7c0      	b.n	8010348 <rclc_executor_spin_some+0x218>
 80103c6:	bf00      	nop

080103c8 <rclc_executor_handle_counters_zero_init>:
 80103c8:	b130      	cbz	r0, 80103d8 <rclc_executor_handle_counters_zero_init+0x10>
 80103ca:	b508      	push	{r3, lr}
 80103cc:	2220      	movs	r2, #32
 80103ce:	2100      	movs	r1, #0
 80103d0:	f00d fc86 	bl	801dce0 <memset>
 80103d4:	2000      	movs	r0, #0
 80103d6:	bd08      	pop	{r3, pc}
 80103d8:	200b      	movs	r0, #11
 80103da:	4770      	bx	lr

080103dc <rclc_executor_handle_init>:
 80103dc:	b158      	cbz	r0, 80103f6 <rclc_executor_handle_init+0x1a>
 80103de:	2300      	movs	r3, #0
 80103e0:	220b      	movs	r2, #11
 80103e2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80103e6:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80103ea:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80103ee:	8002      	strh	r2, [r0, #0]
 80103f0:	8703      	strh	r3, [r0, #56]	@ 0x38
 80103f2:	4618      	mov	r0, r3
 80103f4:	4770      	bx	lr
 80103f6:	200b      	movs	r0, #11
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop

080103fc <rclc_support_init_with_options>:
 80103fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010400:	b083      	sub	sp, #12
 8010402:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010404:	b340      	cbz	r0, 8010458 <rclc_support_init_with_options+0x5c>
 8010406:	461d      	mov	r5, r3
 8010408:	b333      	cbz	r3, 8010458 <rclc_support_init_with_options+0x5c>
 801040a:	b32e      	cbz	r6, 8010458 <rclc_support_init_with_options+0x5c>
 801040c:	46e9      	mov	r9, sp
 801040e:	4604      	mov	r4, r0
 8010410:	4648      	mov	r0, r9
 8010412:	460f      	mov	r7, r1
 8010414:	4690      	mov	r8, r2
 8010416:	f008 f837 	bl	8018488 <rcl_get_zero_initialized_context>
 801041a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801041e:	462a      	mov	r2, r5
 8010420:	e884 0003 	stmia.w	r4, {r0, r1}
 8010424:	4623      	mov	r3, r4
 8010426:	4641      	mov	r1, r8
 8010428:	4638      	mov	r0, r7
 801042a:	f008 f9bb 	bl	80187a4 <rcl_init>
 801042e:	4605      	mov	r5, r0
 8010430:	b960      	cbnz	r0, 801044c <rclc_support_init_with_options+0x50>
 8010432:	60a6      	str	r6, [r4, #8]
 8010434:	4632      	mov	r2, r6
 8010436:	f104 010c 	add.w	r1, r4, #12
 801043a:	2003      	movs	r0, #3
 801043c:	f008 fdfc 	bl	8019038 <rcl_clock_init>
 8010440:	4605      	mov	r5, r0
 8010442:	b918      	cbnz	r0, 801044c <rclc_support_init_with_options+0x50>
 8010444:	4628      	mov	r0, r5
 8010446:	b003      	add	sp, #12
 8010448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801044c:	f000 fa30 	bl	80108b0 <rcutils_reset_error>
 8010450:	4628      	mov	r0, r5
 8010452:	b003      	add	sp, #12
 8010454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010458:	250b      	movs	r5, #11
 801045a:	4628      	mov	r0, r5
 801045c:	b003      	add	sp, #12
 801045e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010462:	bf00      	nop

08010464 <rclc_support_fini>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	b320      	cbz	r0, 80104b2 <rclc_support_fini+0x4e>
 8010468:	4604      	mov	r4, r0
 801046a:	300c      	adds	r0, #12
 801046c:	f008 fe52 	bl	8019114 <rcl_clock_fini>
 8010470:	4605      	mov	r5, r0
 8010472:	b948      	cbnz	r0, 8010488 <rclc_support_fini+0x24>
 8010474:	4620      	mov	r0, r4
 8010476:	f008 facf 	bl	8018a18 <rcl_shutdown>
 801047a:	b968      	cbnz	r0, 8010498 <rclc_support_fini+0x34>
 801047c:	4620      	mov	r0, r4
 801047e:	f008 f873 	bl	8018568 <rcl_context_fini>
 8010482:	b988      	cbnz	r0, 80104a8 <rclc_support_fini+0x44>
 8010484:	4628      	mov	r0, r5
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	f000 fa12 	bl	80108b0 <rcutils_reset_error>
 801048c:	4620      	mov	r0, r4
 801048e:	2501      	movs	r5, #1
 8010490:	f008 fac2 	bl	8018a18 <rcl_shutdown>
 8010494:	2800      	cmp	r0, #0
 8010496:	d0f1      	beq.n	801047c <rclc_support_fini+0x18>
 8010498:	f000 fa0a 	bl	80108b0 <rcutils_reset_error>
 801049c:	4620      	mov	r0, r4
 801049e:	2501      	movs	r5, #1
 80104a0:	f008 f862 	bl	8018568 <rcl_context_fini>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d0ed      	beq.n	8010484 <rclc_support_fini+0x20>
 80104a8:	2501      	movs	r5, #1
 80104aa:	f000 fa01 	bl	80108b0 <rcutils_reset_error>
 80104ae:	4628      	mov	r0, r5
 80104b0:	bd38      	pop	{r3, r4, r5, pc}
 80104b2:	250b      	movs	r5, #11
 80104b4:	4628      	mov	r0, r5
 80104b6:	bd38      	pop	{r3, r4, r5, pc}

080104b8 <rclc_node_init_default>:
 80104b8:	b3b8      	cbz	r0, 801052a <rclc_node_init_default+0x72>
 80104ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104be:	460d      	mov	r5, r1
 80104c0:	b0a1      	sub	sp, #132	@ 0x84
 80104c2:	b329      	cbz	r1, 8010510 <rclc_node_init_default+0x58>
 80104c4:	4616      	mov	r6, r2
 80104c6:	b31a      	cbz	r2, 8010510 <rclc_node_init_default+0x58>
 80104c8:	461f      	mov	r7, r3
 80104ca:	b30b      	cbz	r3, 8010510 <rclc_node_init_default+0x58>
 80104cc:	f10d 0810 	add.w	r8, sp, #16
 80104d0:	4604      	mov	r4, r0
 80104d2:	4640      	mov	r0, r8
 80104d4:	f7fe fa04 	bl	800e8e0 <rcl_get_zero_initialized_node>
 80104d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80104dc:	f10d 0918 	add.w	r9, sp, #24
 80104e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80104e4:	4648      	mov	r0, r9
 80104e6:	f7fe fbd5 	bl	800ec94 <rcl_node_get_default_options>
 80104ea:	4640      	mov	r0, r8
 80104ec:	f7fe f9f8 	bl	800e8e0 <rcl_get_zero_initialized_node>
 80104f0:	f8cd 9000 	str.w	r9, [sp]
 80104f4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80104f8:	463b      	mov	r3, r7
 80104fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80104fe:	4632      	mov	r2, r6
 8010500:	4629      	mov	r1, r5
 8010502:	4620      	mov	r0, r4
 8010504:	f7fe f9f6 	bl	800e8f4 <rcl_node_init>
 8010508:	b930      	cbnz	r0, 8010518 <rclc_node_init_default+0x60>
 801050a:	b021      	add	sp, #132	@ 0x84
 801050c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010510:	200b      	movs	r0, #11
 8010512:	b021      	add	sp, #132	@ 0x84
 8010514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010518:	9003      	str	r0, [sp, #12]
 801051a:	f000 f9c9 	bl	80108b0 <rcutils_reset_error>
 801051e:	f000 f9c7 	bl	80108b0 <rcutils_reset_error>
 8010522:	9803      	ldr	r0, [sp, #12]
 8010524:	b021      	add	sp, #132	@ 0x84
 8010526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801052a:	200b      	movs	r0, #11
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop

08010530 <rclc_publisher_init_default>:
 8010530:	b368      	cbz	r0, 801058e <rclc_publisher_init_default+0x5e>
 8010532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010536:	460d      	mov	r5, r1
 8010538:	b0a0      	sub	sp, #128	@ 0x80
 801053a:	b321      	cbz	r1, 8010586 <rclc_publisher_init_default+0x56>
 801053c:	4616      	mov	r6, r2
 801053e:	b312      	cbz	r2, 8010586 <rclc_publisher_init_default+0x56>
 8010540:	461f      	mov	r7, r3
 8010542:	b303      	cbz	r3, 8010586 <rclc_publisher_init_default+0x56>
 8010544:	4604      	mov	r4, r0
 8010546:	f7fe fbed 	bl	800ed24 <rcl_get_zero_initialized_publisher>
 801054a:	f10d 0810 	add.w	r8, sp, #16
 801054e:	6020      	str	r0, [r4, #0]
 8010550:	4640      	mov	r0, r8
 8010552:	f7fe fcb1 	bl	800eeb8 <rcl_publisher_get_default_options>
 8010556:	490f      	ldr	r1, [pc, #60]	@ (8010594 <rclc_publisher_init_default+0x64>)
 8010558:	2250      	movs	r2, #80	@ 0x50
 801055a:	4640      	mov	r0, r8
 801055c:	f00d fcf1 	bl	801df42 <memcpy>
 8010560:	f8cd 8000 	str.w	r8, [sp]
 8010564:	463b      	mov	r3, r7
 8010566:	4632      	mov	r2, r6
 8010568:	4629      	mov	r1, r5
 801056a:	4620      	mov	r0, r4
 801056c:	f7fe fbe0 	bl	800ed30 <rcl_publisher_init>
 8010570:	b910      	cbnz	r0, 8010578 <rclc_publisher_init_default+0x48>
 8010572:	b020      	add	sp, #128	@ 0x80
 8010574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010578:	9003      	str	r0, [sp, #12]
 801057a:	f000 f999 	bl	80108b0 <rcutils_reset_error>
 801057e:	9803      	ldr	r0, [sp, #12]
 8010580:	b020      	add	sp, #128	@ 0x80
 8010582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010586:	200b      	movs	r0, #11
 8010588:	b020      	add	sp, #128	@ 0x80
 801058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801058e:	200b      	movs	r0, #11
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	08020660 	.word	0x08020660

08010598 <rclc_subscription_init_default>:
 8010598:	b368      	cbz	r0, 80105f6 <rclc_subscription_init_default+0x5e>
 801059a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059e:	460d      	mov	r5, r1
 80105a0:	b0a2      	sub	sp, #136	@ 0x88
 80105a2:	b321      	cbz	r1, 80105ee <rclc_subscription_init_default+0x56>
 80105a4:	4616      	mov	r6, r2
 80105a6:	b312      	cbz	r2, 80105ee <rclc_subscription_init_default+0x56>
 80105a8:	461f      	mov	r7, r3
 80105aa:	b303      	cbz	r3, 80105ee <rclc_subscription_init_default+0x56>
 80105ac:	4604      	mov	r4, r0
 80105ae:	f7fe fd03 	bl	800efb8 <rcl_get_zero_initialized_subscription>
 80105b2:	f10d 0810 	add.w	r8, sp, #16
 80105b6:	6020      	str	r0, [r4, #0]
 80105b8:	4640      	mov	r0, r8
 80105ba:	f7fe fdff 	bl	800f1bc <rcl_subscription_get_default_options>
 80105be:	490f      	ldr	r1, [pc, #60]	@ (80105fc <rclc_subscription_init_default+0x64>)
 80105c0:	2250      	movs	r2, #80	@ 0x50
 80105c2:	4640      	mov	r0, r8
 80105c4:	f00d fcbd 	bl	801df42 <memcpy>
 80105c8:	f8cd 8000 	str.w	r8, [sp]
 80105cc:	463b      	mov	r3, r7
 80105ce:	4632      	mov	r2, r6
 80105d0:	4629      	mov	r1, r5
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7fe fcf6 	bl	800efc4 <rcl_subscription_init>
 80105d8:	b910      	cbnz	r0, 80105e0 <rclc_subscription_init_default+0x48>
 80105da:	b022      	add	sp, #136	@ 0x88
 80105dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e0:	9003      	str	r0, [sp, #12]
 80105e2:	f000 f965 	bl	80108b0 <rcutils_reset_error>
 80105e6:	9803      	ldr	r0, [sp, #12]
 80105e8:	b022      	add	sp, #136	@ 0x88
 80105ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ee:	200b      	movs	r0, #11
 80105f0:	b022      	add	sp, #136	@ 0x88
 80105f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f6:	200b      	movs	r0, #11
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	080206b0 	.word	0x080206b0

08010600 <rclc_timer_init_default2>:
 8010600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010604:	b08c      	sub	sp, #48	@ 0x30
 8010606:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801060a:	b330      	cbz	r0, 801065a <rclc_timer_init_default2+0x5a>
 801060c:	460e      	mov	r6, r1
 801060e:	b321      	cbz	r1, 801065a <rclc_timer_init_default2+0x5a>
 8010610:	4690      	mov	r8, r2
 8010612:	461f      	mov	r7, r3
 8010614:	4605      	mov	r5, r0
 8010616:	f7fe ff03 	bl	800f420 <rcl_get_zero_initialized_timer>
 801061a:	9408      	str	r4, [sp, #32]
 801061c:	68b4      	ldr	r4, [r6, #8]
 801061e:	6028      	str	r0, [r5, #0]
 8010620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010622:	f10d 0c0c 	add.w	ip, sp, #12
 8010626:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801062a:	6823      	ldr	r3, [r4, #0]
 801062c:	f8cc 3000 	str.w	r3, [ip]
 8010630:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010632:	9302      	str	r3, [sp, #8]
 8010634:	e9cd 8700 	strd	r8, r7, [sp]
 8010638:	4628      	mov	r0, r5
 801063a:	4632      	mov	r2, r6
 801063c:	f106 010c 	add.w	r1, r6, #12
 8010640:	f7fe fef6 	bl	800f430 <rcl_timer_init2>
 8010644:	b910      	cbnz	r0, 801064c <rclc_timer_init_default2+0x4c>
 8010646:	b00c      	add	sp, #48	@ 0x30
 8010648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801064c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801064e:	f000 f92f 	bl	80108b0 <rcutils_reset_error>
 8010652:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010654:	b00c      	add	sp, #48	@ 0x30
 8010656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801065a:	200b      	movs	r0, #11
 801065c:	b00c      	add	sp, #48	@ 0x30
 801065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010662:	bf00      	nop

08010664 <__default_zero_allocate>:
 8010664:	f00c bdf4 	b.w	801d250 <calloc>

08010668 <__default_reallocate>:
 8010668:	f00c bf92 	b.w	801d590 <realloc>

0801066c <__default_deallocate>:
 801066c:	f00c be6e 	b.w	801d34c <free>

08010670 <__default_allocate>:
 8010670:	f00c be64 	b.w	801d33c <malloc>

08010674 <rcutils_get_zero_initialized_allocator>:
 8010674:	b510      	push	{r4, lr}
 8010676:	4c05      	ldr	r4, [pc, #20]	@ (801068c <rcutils_get_zero_initialized_allocator+0x18>)
 8010678:	4686      	mov	lr, r0
 801067a:	4684      	mov	ip, r0
 801067c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801067e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010682:	6823      	ldr	r3, [r4, #0]
 8010684:	f8cc 3000 	str.w	r3, [ip]
 8010688:	4670      	mov	r0, lr
 801068a:	bd10      	pop	{r4, pc}
 801068c:	08020700 	.word	0x08020700

08010690 <rcutils_get_default_allocator>:
 8010690:	b510      	push	{r4, lr}
 8010692:	4c05      	ldr	r4, [pc, #20]	@ (80106a8 <rcutils_get_default_allocator+0x18>)
 8010694:	4686      	mov	lr, r0
 8010696:	4684      	mov	ip, r0
 8010698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801069a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	f8cc 3000 	str.w	r3, [ip]
 80106a4:	4670      	mov	r0, lr
 80106a6:	bd10      	pop	{r4, pc}
 80106a8:	20000188 	.word	0x20000188

080106ac <rcutils_set_default_allocator>:
 80106ac:	b1a8      	cbz	r0, 80106da <rcutils_set_default_allocator+0x2e>
 80106ae:	6802      	ldr	r2, [r0, #0]
 80106b0:	b1a2      	cbz	r2, 80106dc <rcutils_set_default_allocator+0x30>
 80106b2:	6841      	ldr	r1, [r0, #4]
 80106b4:	b1a1      	cbz	r1, 80106e0 <rcutils_set_default_allocator+0x34>
 80106b6:	b410      	push	{r4}
 80106b8:	68c4      	ldr	r4, [r0, #12]
 80106ba:	b164      	cbz	r4, 80106d6 <rcutils_set_default_allocator+0x2a>
 80106bc:	6880      	ldr	r0, [r0, #8]
 80106be:	b138      	cbz	r0, 80106d0 <rcutils_set_default_allocator+0x24>
 80106c0:	4b08      	ldr	r3, [pc, #32]	@ (80106e4 <rcutils_set_default_allocator+0x38>)
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	2200      	movs	r2, #0
 80106c6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80106ca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80106ce:	2001      	movs	r0, #1
 80106d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	4620      	mov	r0, r4
 80106d8:	e7fa      	b.n	80106d0 <rcutils_set_default_allocator+0x24>
 80106da:	4770      	bx	lr
 80106dc:	4610      	mov	r0, r2
 80106de:	4770      	bx	lr
 80106e0:	4608      	mov	r0, r1
 80106e2:	4770      	bx	lr
 80106e4:	20000188 	.word	0x20000188

080106e8 <rcutils_allocator_is_valid>:
 80106e8:	b158      	cbz	r0, 8010702 <rcutils_allocator_is_valid+0x1a>
 80106ea:	6803      	ldr	r3, [r0, #0]
 80106ec:	b143      	cbz	r3, 8010700 <rcutils_allocator_is_valid+0x18>
 80106ee:	6843      	ldr	r3, [r0, #4]
 80106f0:	b133      	cbz	r3, 8010700 <rcutils_allocator_is_valid+0x18>
 80106f2:	68c3      	ldr	r3, [r0, #12]
 80106f4:	b123      	cbz	r3, 8010700 <rcutils_allocator_is_valid+0x18>
 80106f6:	6880      	ldr	r0, [r0, #8]
 80106f8:	3800      	subs	r0, #0
 80106fa:	bf18      	it	ne
 80106fc:	2001      	movne	r0, #1
 80106fe:	4770      	bx	lr
 8010700:	4618      	mov	r0, r3
 8010702:	4770      	bx	lr

08010704 <__atomic_load_8>:
 8010704:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010708:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801070c:	4a15      	ldr	r2, [pc, #84]	@ (8010764 <__atomic_load_8+0x60>)
 801070e:	4b16      	ldr	r3, [pc, #88]	@ (8010768 <__atomic_load_8+0x64>)
 8010710:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010714:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010718:	fb02 f101 	mul.w	r1, r2, r1
 801071c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010720:	fba3 2301 	umull	r2, r3, r3, r1
 8010724:	091b      	lsrs	r3, r3, #4
 8010726:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801072a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801072e:	b4f0      	push	{r4, r5, r6, r7}
 8010730:	4d0e      	ldr	r5, [pc, #56]	@ (801076c <__atomic_load_8+0x68>)
 8010732:	1ac9      	subs	r1, r1, r3
 8010734:	194a      	adds	r2, r1, r5
 8010736:	f04f 0c01 	mov.w	ip, #1
 801073a:	e8d2 3f4f 	ldrexb	r3, [r2]
 801073e:	e8c2 cf44 	strexb	r4, ip, [r2]
 8010742:	2c00      	cmp	r4, #0
 8010744:	d1f9      	bne.n	801073a <__atomic_load_8+0x36>
 8010746:	f3bf 8f5b 	dmb	ish
 801074a:	b2dc      	uxtb	r4, r3
 801074c:	2c00      	cmp	r4, #0
 801074e:	d1f4      	bne.n	801073a <__atomic_load_8+0x36>
 8010750:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010754:	f3bf 8f5b 	dmb	ish
 8010758:	546b      	strb	r3, [r5, r1]
 801075a:	4630      	mov	r0, r6
 801075c:	4639      	mov	r1, r7
 801075e:	bcf0      	pop	{r4, r5, r6, r7}
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	27d4eb2d 	.word	0x27d4eb2d
 8010768:	b21642c9 	.word	0xb21642c9
 801076c:	20015508 	.word	0x20015508

08010770 <__atomic_store_8>:
 8010770:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010774:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801077e:	4c14      	ldr	r4, [pc, #80]	@ (80107d0 <__atomic_store_8+0x60>)
 8010780:	4e14      	ldr	r6, [pc, #80]	@ (80107d4 <__atomic_store_8+0x64>)
 8010782:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010786:	fb04 f101 	mul.w	r1, r4, r1
 801078a:	4c13      	ldr	r4, [pc, #76]	@ (80107d8 <__atomic_store_8+0x68>)
 801078c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010790:	fba4 5401 	umull	r5, r4, r4, r1
 8010794:	0924      	lsrs	r4, r4, #4
 8010796:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801079a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801079e:	eba1 0e04 	sub.w	lr, r1, r4
 80107a2:	f04f 0501 	mov.w	r5, #1
 80107a6:	eb0e 0c06 	add.w	ip, lr, r6
 80107aa:	e8dc 1f4f 	ldrexb	r1, [ip]
 80107ae:	e8cc 5f44 	strexb	r4, r5, [ip]
 80107b2:	2c00      	cmp	r4, #0
 80107b4:	d1f9      	bne.n	80107aa <__atomic_store_8+0x3a>
 80107b6:	f3bf 8f5b 	dmb	ish
 80107ba:	b2cc      	uxtb	r4, r1
 80107bc:	2c00      	cmp	r4, #0
 80107be:	d1f4      	bne.n	80107aa <__atomic_store_8+0x3a>
 80107c0:	e9c0 2300 	strd	r2, r3, [r0]
 80107c4:	f3bf 8f5b 	dmb	ish
 80107c8:	f806 100e 	strb.w	r1, [r6, lr]
 80107cc:	bd70      	pop	{r4, r5, r6, pc}
 80107ce:	bf00      	nop
 80107d0:	27d4eb2d 	.word	0x27d4eb2d
 80107d4:	20015508 	.word	0x20015508
 80107d8:	b21642c9 	.word	0xb21642c9

080107dc <__atomic_exchange_8>:
 80107dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107de:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80107e2:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80107e6:	4917      	ldr	r1, [pc, #92]	@ (8010844 <__atomic_exchange_8+0x68>)
 80107e8:	4f17      	ldr	r7, [pc, #92]	@ (8010848 <__atomic_exchange_8+0x6c>)
 80107ea:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80107ee:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80107f2:	fb01 fe0e 	mul.w	lr, r1, lr
 80107f6:	4915      	ldr	r1, [pc, #84]	@ (801084c <__atomic_exchange_8+0x70>)
 80107f8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80107fc:	4606      	mov	r6, r0
 80107fe:	fba1 010e 	umull	r0, r1, r1, lr
 8010802:	0909      	lsrs	r1, r1, #4
 8010804:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8010808:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801080c:	ebae 0e01 	sub.w	lr, lr, r1
 8010810:	f04f 0501 	mov.w	r5, #1
 8010814:	eb0e 0107 	add.w	r1, lr, r7
 8010818:	e8d1 cf4f 	ldrexb	ip, [r1]
 801081c:	e8c1 5f40 	strexb	r0, r5, [r1]
 8010820:	2800      	cmp	r0, #0
 8010822:	d1f9      	bne.n	8010818 <__atomic_exchange_8+0x3c>
 8010824:	f3bf 8f5b 	dmb	ish
 8010828:	fa5f f48c 	uxtb.w	r4, ip
 801082c:	2c00      	cmp	r4, #0
 801082e:	d1f3      	bne.n	8010818 <__atomic_exchange_8+0x3c>
 8010830:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010834:	e9c6 2300 	strd	r2, r3, [r6]
 8010838:	f3bf 8f5b 	dmb	ish
 801083c:	f807 c00e 	strb.w	ip, [r7, lr]
 8010840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010842:	bf00      	nop
 8010844:	27d4eb2d 	.word	0x27d4eb2d
 8010848:	20015508 	.word	0x20015508
 801084c:	b21642c9 	.word	0xb21642c9

08010850 <rcutils_get_env>:
 8010850:	b150      	cbz	r0, 8010868 <rcutils_get_env+0x18>
 8010852:	b510      	push	{r4, lr}
 8010854:	460c      	mov	r4, r1
 8010856:	b909      	cbnz	r1, 801085c <rcutils_get_env+0xc>
 8010858:	4806      	ldr	r0, [pc, #24]	@ (8010874 <rcutils_get_env+0x24>)
 801085a:	bd10      	pop	{r4, pc}
 801085c:	f00c fd26 	bl	801d2ac <getenv>
 8010860:	b120      	cbz	r0, 801086c <rcutils_get_env+0x1c>
 8010862:	6020      	str	r0, [r4, #0]
 8010864:	2000      	movs	r0, #0
 8010866:	bd10      	pop	{r4, pc}
 8010868:	4803      	ldr	r0, [pc, #12]	@ (8010878 <rcutils_get_env+0x28>)
 801086a:	4770      	bx	lr
 801086c:	4b03      	ldr	r3, [pc, #12]	@ (801087c <rcutils_get_env+0x2c>)
 801086e:	6023      	str	r3, [r4, #0]
 8010870:	e7f8      	b.n	8010864 <rcutils_get_env+0x14>
 8010872:	bf00      	nop
 8010874:	08020730 	.word	0x08020730
 8010878:	08020714 	.word	0x08020714
 801087c:	0802155c 	.word	0x0802155c

08010880 <rcutils_get_error_string>:
 8010880:	4b06      	ldr	r3, [pc, #24]	@ (801089c <rcutils_get_error_string+0x1c>)
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	b13b      	cbz	r3, 8010896 <rcutils_get_error_string+0x16>
 8010886:	4b06      	ldr	r3, [pc, #24]	@ (80108a0 <rcutils_get_error_string+0x20>)
 8010888:	781a      	ldrb	r2, [r3, #0]
 801088a:	b90a      	cbnz	r2, 8010890 <rcutils_get_error_string+0x10>
 801088c:	2201      	movs	r2, #1
 801088e:	701a      	strb	r2, [r3, #0]
 8010890:	4b04      	ldr	r3, [pc, #16]	@ (80108a4 <rcutils_get_error_string+0x24>)
 8010892:	7818      	ldrb	r0, [r3, #0]
 8010894:	4770      	bx	lr
 8010896:	4b04      	ldr	r3, [pc, #16]	@ (80108a8 <rcutils_get_error_string+0x28>)
 8010898:	7818      	ldrb	r0, [r3, #0]
 801089a:	4770      	bx	lr
 801089c:	2001551f 	.word	0x2001551f
 80108a0:	20015521 	.word	0x20015521
 80108a4:	20015520 	.word	0x20015520
 80108a8:	0802074c 	.word	0x0802074c
 80108ac:	00000000 	.word	0x00000000

080108b0 <rcutils_reset_error>:
 80108b0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80108d0 <rcutils_reset_error+0x20>
 80108b4:	4a08      	ldr	r2, [pc, #32]	@ (80108d8 <rcutils_reset_error+0x28>)
 80108b6:	4809      	ldr	r0, [pc, #36]	@ (80108dc <rcutils_reset_error+0x2c>)
 80108b8:	4909      	ldr	r1, [pc, #36]	@ (80108e0 <rcutils_reset_error+0x30>)
 80108ba:	2300      	movs	r3, #0
 80108bc:	8013      	strh	r3, [r2, #0]
 80108be:	ed82 7b02 	vstr	d7, [r2, #8]
 80108c2:	4a08      	ldr	r2, [pc, #32]	@ (80108e4 <rcutils_reset_error+0x34>)
 80108c4:	7003      	strb	r3, [r0, #0]
 80108c6:	700b      	strb	r3, [r1, #0]
 80108c8:	7013      	strb	r3, [r2, #0]
 80108ca:	4770      	bx	lr
 80108cc:	f3af 8000 	nop.w
	...
 80108d8:	20015528 	.word	0x20015528
 80108dc:	20015521 	.word	0x20015521
 80108e0:	20015520 	.word	0x20015520
 80108e4:	2001551f 	.word	0x2001551f

080108e8 <rcutils_format_string_limit>:
 80108e8:	b40f      	push	{r0, r1, r2, r3}
 80108ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ec:	b083      	sub	sp, #12
 80108ee:	ac08      	add	r4, sp, #32
 80108f0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80108f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80108f6:	b376      	cbz	r6, 8010956 <rcutils_format_string_limit+0x6e>
 80108f8:	4620      	mov	r0, r4
 80108fa:	f7ff fef5 	bl	80106e8 <rcutils_allocator_is_valid>
 80108fe:	b350      	cbz	r0, 8010956 <rcutils_format_string_limit+0x6e>
 8010900:	2100      	movs	r1, #0
 8010902:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010904:	4632      	mov	r2, r6
 8010906:	4608      	mov	r0, r1
 8010908:	e9cd 3300 	strd	r3, r3, [sp]
 801090c:	f000 f8f8 	bl	8010b00 <rcutils_vsnprintf>
 8010910:	1c43      	adds	r3, r0, #1
 8010912:	4605      	mov	r5, r0
 8010914:	d01f      	beq.n	8010956 <rcutils_format_string_limit+0x6e>
 8010916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010918:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801091a:	1c47      	adds	r7, r0, #1
 801091c:	429f      	cmp	r7, r3
 801091e:	bf84      	itt	hi
 8010920:	461f      	movhi	r7, r3
 8010922:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8010926:	4638      	mov	r0, r7
 8010928:	9b08      	ldr	r3, [sp, #32]
 801092a:	4798      	blx	r3
 801092c:	4604      	mov	r4, r0
 801092e:	b190      	cbz	r0, 8010956 <rcutils_format_string_limit+0x6e>
 8010930:	9b01      	ldr	r3, [sp, #4]
 8010932:	4632      	mov	r2, r6
 8010934:	4639      	mov	r1, r7
 8010936:	f000 f8e3 	bl	8010b00 <rcutils_vsnprintf>
 801093a:	2800      	cmp	r0, #0
 801093c:	db07      	blt.n	801094e <rcutils_format_string_limit+0x66>
 801093e:	2300      	movs	r3, #0
 8010940:	5563      	strb	r3, [r4, r5]
 8010942:	4620      	mov	r0, r4
 8010944:	b003      	add	sp, #12
 8010946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801094a:	b004      	add	sp, #16
 801094c:	4770      	bx	lr
 801094e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010950:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010952:	4620      	mov	r0, r4
 8010954:	4798      	blx	r3
 8010956:	2400      	movs	r4, #0
 8010958:	e7f3      	b.n	8010942 <rcutils_format_string_limit+0x5a>
 801095a:	bf00      	nop

0801095c <rcutils_repl_str>:
 801095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	4699      	mov	r9, r3
 8010962:	b089      	sub	sp, #36	@ 0x24
 8010964:	4603      	mov	r3, r0
 8010966:	4648      	mov	r0, r9
 8010968:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801096c:	4698      	mov	r8, r3
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	460c      	mov	r4, r1
 8010972:	f7ff feb9 	bl	80106e8 <rcutils_allocator_is_valid>
 8010976:	2800      	cmp	r0, #0
 8010978:	f000 80a3 	beq.w	8010ac2 <rcutils_repl_str+0x166>
 801097c:	4620      	mov	r0, r4
 801097e:	f7ef fcaf 	bl	80002e0 <strlen>
 8010982:	f04f 0a00 	mov.w	sl, #0
 8010986:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801098a:	9001      	str	r0, [sp, #4]
 801098c:	4657      	mov	r7, sl
 801098e:	4655      	mov	r5, sl
 8010990:	2610      	movs	r6, #16
 8010992:	e01e      	b.n	80109d2 <rcutils_repl_str+0x76>
 8010994:	3501      	adds	r5, #1
 8010996:	45aa      	cmp	sl, r5
 8010998:	d212      	bcs.n	80109c0 <rcutils_repl_str+0x64>
 801099a:	44b2      	add	sl, r6
 801099c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80109a0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80109a4:	4798      	blx	r3
 80109a6:	2800      	cmp	r0, #0
 80109a8:	f000 8088 	beq.w	8010abc <rcutils_repl_str+0x160>
 80109ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80109b0:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80109b4:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80109b8:	4607      	mov	r7, r0
 80109ba:	bf28      	it	cs
 80109bc:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80109c0:	9a00      	ldr	r2, [sp, #0]
 80109c2:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80109c6:	1aa2      	subs	r2, r4, r2
 80109c8:	f843 2c04 	str.w	r2, [r3, #-4]
 80109cc:	9b01      	ldr	r3, [sp, #4]
 80109ce:	eb04 0803 	add.w	r8, r4, r3
 80109d2:	9902      	ldr	r1, [sp, #8]
 80109d4:	4640      	mov	r0, r8
 80109d6:	f00d f9bd 	bl	801dd54 <strstr>
 80109da:	4604      	mov	r4, r0
 80109dc:	465a      	mov	r2, fp
 80109de:	4638      	mov	r0, r7
 80109e0:	2c00      	cmp	r4, #0
 80109e2:	d1d7      	bne.n	8010994 <rcutils_repl_str+0x38>
 80109e4:	4640      	mov	r0, r8
 80109e6:	f7ef fc7b 	bl	80002e0 <strlen>
 80109ea:	9b00      	ldr	r3, [sp, #0]
 80109ec:	eba8 0803 	sub.w	r8, r8, r3
 80109f0:	eb08 0300 	add.w	r3, r8, r0
 80109f4:	9304      	str	r3, [sp, #16]
 80109f6:	f8d9 8000 	ldr.w	r8, [r9]
 80109fa:	2d00      	cmp	r5, #0
 80109fc:	d03f      	beq.n	8010a7e <rcutils_repl_str+0x122>
 80109fe:	9803      	ldr	r0, [sp, #12]
 8010a00:	f7ef fc6e 	bl	80002e0 <strlen>
 8010a04:	4606      	mov	r6, r0
 8010a06:	9801      	ldr	r0, [sp, #4]
 8010a08:	9a04      	ldr	r2, [sp, #16]
 8010a0a:	1a33      	subs	r3, r6, r0
 8010a0c:	fb05 2a03 	mla	sl, r5, r3, r2
 8010a10:	4659      	mov	r1, fp
 8010a12:	f10a 0001 	add.w	r0, sl, #1
 8010a16:	47c0      	blx	r8
 8010a18:	4683      	mov	fp, r0
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d04e      	beq.n	8010abc <rcutils_repl_str+0x160>
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	9900      	ldr	r1, [sp, #0]
 8010a22:	f00d fa8e 	bl	801df42 <memcpy>
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	9706      	str	r7, [sp, #24]
 8010a2a:	1e6a      	subs	r2, r5, #1
 8010a2c:	445b      	add	r3, fp
 8010a2e:	46a8      	mov	r8, r5
 8010a30:	9202      	str	r2, [sp, #8]
 8010a32:	4625      	mov	r5, r4
 8010a34:	f8cd 901c 	str.w	r9, [sp, #28]
 8010a38:	461c      	mov	r4, r3
 8010a3a:	9903      	ldr	r1, [sp, #12]
 8010a3c:	4632      	mov	r2, r6
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f00d fa7f 	bl	801df42 <memcpy>
 8010a44:	9b01      	ldr	r3, [sp, #4]
 8010a46:	f857 2b04 	ldr.w	r2, [r7], #4
 8010a4a:	eb02 0c03 	add.w	ip, r2, r3
 8010a4e:	9b00      	ldr	r3, [sp, #0]
 8010a50:	eb03 010c 	add.w	r1, r3, ip
 8010a54:	9b02      	ldr	r3, [sp, #8]
 8010a56:	4434      	add	r4, r6
 8010a58:	429d      	cmp	r5, r3
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	d022      	beq.n	8010aa4 <rcutils_repl_str+0x148>
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	eba2 090c 	sub.w	r9, r2, ip
 8010a64:	464a      	mov	r2, r9
 8010a66:	3501      	adds	r5, #1
 8010a68:	f00d fa6b 	bl	801df42 <memcpy>
 8010a6c:	45a8      	cmp	r8, r5
 8010a6e:	444c      	add	r4, r9
 8010a70:	d1e3      	bne.n	8010a3a <rcutils_repl_str+0xde>
 8010a72:	2300      	movs	r3, #0
 8010a74:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8010a78:	f80b 300a 	strb.w	r3, [fp, sl]
 8010a7c:	e008      	b.n	8010a90 <rcutils_repl_str+0x134>
 8010a7e:	4618      	mov	r0, r3
 8010a80:	4659      	mov	r1, fp
 8010a82:	3001      	adds	r0, #1
 8010a84:	47c0      	blx	r8
 8010a86:	4683      	mov	fp, r0
 8010a88:	b110      	cbz	r0, 8010a90 <rcutils_repl_str+0x134>
 8010a8a:	9900      	ldr	r1, [sp, #0]
 8010a8c:	f00d fa51 	bl	801df32 <strcpy>
 8010a90:	4638      	mov	r0, r7
 8010a92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010a96:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010a9a:	4798      	blx	r3
 8010a9c:	4658      	mov	r0, fp
 8010a9e:	b009      	add	sp, #36	@ 0x24
 8010aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa4:	9b04      	ldr	r3, [sp, #16]
 8010aa6:	eba3 020c 	sub.w	r2, r3, ip
 8010aaa:	9205      	str	r2, [sp, #20]
 8010aac:	3501      	adds	r5, #1
 8010aae:	f00d fa48 	bl	801df42 <memcpy>
 8010ab2:	9a05      	ldr	r2, [sp, #20]
 8010ab4:	45a8      	cmp	r8, r5
 8010ab6:	4414      	add	r4, r2
 8010ab8:	d1bf      	bne.n	8010a3a <rcutils_repl_str+0xde>
 8010aba:	e7da      	b.n	8010a72 <rcutils_repl_str+0x116>
 8010abc:	f04f 0b00 	mov.w	fp, #0
 8010ac0:	e7e6      	b.n	8010a90 <rcutils_repl_str+0x134>
 8010ac2:	4683      	mov	fp, r0
 8010ac4:	4658      	mov	r0, fp
 8010ac6:	b009      	add	sp, #36	@ 0x24
 8010ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010acc <rcutils_snprintf>:
 8010acc:	b40c      	push	{r2, r3}
 8010ace:	b530      	push	{r4, r5, lr}
 8010ad0:	b083      	sub	sp, #12
 8010ad2:	ab06      	add	r3, sp, #24
 8010ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ad8:	9301      	str	r3, [sp, #4]
 8010ada:	b152      	cbz	r2, 8010af2 <rcutils_snprintf+0x26>
 8010adc:	b138      	cbz	r0, 8010aee <rcutils_snprintf+0x22>
 8010ade:	b141      	cbz	r1, 8010af2 <rcutils_snprintf+0x26>
 8010ae0:	f00d f832 	bl	801db48 <vsniprintf>
 8010ae4:	b003      	add	sp, #12
 8010ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aea:	b002      	add	sp, #8
 8010aec:	4770      	bx	lr
 8010aee:	2900      	cmp	r1, #0
 8010af0:	d0f6      	beq.n	8010ae0 <rcutils_snprintf+0x14>
 8010af2:	f00d f9f1 	bl	801ded8 <__errno>
 8010af6:	2316      	movs	r3, #22
 8010af8:	6003      	str	r3, [r0, #0]
 8010afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010afe:	e7f1      	b.n	8010ae4 <rcutils_snprintf+0x18>

08010b00 <rcutils_vsnprintf>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	b13a      	cbz	r2, 8010b14 <rcutils_vsnprintf+0x14>
 8010b04:	b120      	cbz	r0, 8010b10 <rcutils_vsnprintf+0x10>
 8010b06:	b129      	cbz	r1, 8010b14 <rcutils_vsnprintf+0x14>
 8010b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b0c:	f00d b81c 	b.w	801db48 <vsniprintf>
 8010b10:	2900      	cmp	r1, #0
 8010b12:	d0f9      	beq.n	8010b08 <rcutils_vsnprintf+0x8>
 8010b14:	f00d f9e0 	bl	801ded8 <__errno>
 8010b18:	2316      	movs	r3, #22
 8010b1a:	6003      	str	r3, [r0, #0]
 8010b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b20:	bd70      	pop	{r4, r5, r6, pc}
 8010b22:	bf00      	nop

08010b24 <rcutils_strdup>:
 8010b24:	b084      	sub	sp, #16
 8010b26:	b570      	push	{r4, r5, r6, lr}
 8010b28:	b086      	sub	sp, #24
 8010b2a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8010b2e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8010b32:	4604      	mov	r4, r0
 8010b34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b38:	f10d 0e04 	add.w	lr, sp, #4
 8010b3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010b40:	f8dc 3000 	ldr.w	r3, [ip]
 8010b44:	f8ce 3000 	str.w	r3, [lr]
 8010b48:	b304      	cbz	r4, 8010b8c <rcutils_strdup+0x68>
 8010b4a:	a801      	add	r0, sp, #4
 8010b4c:	f7ff fdcc 	bl	80106e8 <rcutils_allocator_is_valid>
 8010b50:	b1e0      	cbz	r0, 8010b8c <rcutils_strdup+0x68>
 8010b52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b56:	2100      	movs	r1, #0
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f7ef fb71 	bl	8000240 <memchr>
 8010b5e:	b190      	cbz	r0, 8010b86 <rcutils_strdup+0x62>
 8010b60:	1b06      	subs	r6, r0, r4
 8010b62:	1c70      	adds	r0, r6, #1
 8010b64:	9b01      	ldr	r3, [sp, #4]
 8010b66:	9905      	ldr	r1, [sp, #20]
 8010b68:	4798      	blx	r3
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	b128      	cbz	r0, 8010b7a <rcutils_strdup+0x56>
 8010b6e:	4632      	mov	r2, r6
 8010b70:	4621      	mov	r1, r4
 8010b72:	f00d f9e6 	bl	801df42 <memcpy>
 8010b76:	2300      	movs	r3, #0
 8010b78:	55ab      	strb	r3, [r5, r6]
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	b006      	add	sp, #24
 8010b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b82:	b004      	add	sp, #16
 8010b84:	4770      	bx	lr
 8010b86:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010b8a:	e7eb      	b.n	8010b64 <rcutils_strdup+0x40>
 8010b8c:	2500      	movs	r5, #0
 8010b8e:	e7f4      	b.n	8010b7a <rcutils_strdup+0x56>

08010b90 <rcutils_strndup>:
 8010b90:	b082      	sub	sp, #8
 8010b92:	b570      	push	{r4, r5, r6, lr}
 8010b94:	ac04      	add	r4, sp, #16
 8010b96:	e884 000c 	stmia.w	r4, {r2, r3}
 8010b9a:	b1e8      	cbz	r0, 8010bd8 <rcutils_strndup+0x48>
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	a804      	add	r0, sp, #16
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	f7ff fda1 	bl	80106e8 <rcutils_allocator_is_valid>
 8010ba6:	b1b8      	cbz	r0, 8010bd8 <rcutils_strndup+0x48>
 8010ba8:	4622      	mov	r2, r4
 8010baa:	2100      	movs	r1, #0
 8010bac:	4628      	mov	r0, r5
 8010bae:	f7ef fb47 	bl	8000240 <memchr>
 8010bb2:	b100      	cbz	r0, 8010bb6 <rcutils_strndup+0x26>
 8010bb4:	1b44      	subs	r4, r0, r5
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	9908      	ldr	r1, [sp, #32]
 8010bba:	1c60      	adds	r0, r4, #1
 8010bbc:	4798      	blx	r3
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	b128      	cbz	r0, 8010bce <rcutils_strndup+0x3e>
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f00d f9bc 	bl	801df42 <memcpy>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	5533      	strb	r3, [r6, r4]
 8010bce:	4630      	mov	r0, r6
 8010bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bd4:	b002      	add	sp, #8
 8010bd6:	4770      	bx	lr
 8010bd8:	2600      	movs	r6, #0
 8010bda:	4630      	mov	r0, r6
 8010bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010be0:	b002      	add	sp, #8
 8010be2:	4770      	bx	lr

08010be4 <rcutils_system_time_now>:
 8010be4:	b318      	cbz	r0, 8010c2e <rcutils_system_time_now+0x4a>
 8010be6:	b570      	push	{r4, r5, r6, lr}
 8010be8:	b084      	sub	sp, #16
 8010bea:	4604      	mov	r4, r0
 8010bec:	4669      	mov	r1, sp
 8010bee:	2001      	movs	r0, #1
 8010bf0:	f7f2 f812 	bl	8002c18 <clock_gettime>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	db17      	blt.n	8010c28 <rcutils_system_time_now+0x44>
 8010bf8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010bfc:	2900      	cmp	r1, #0
 8010bfe:	db13      	blt.n	8010c28 <rcutils_system_time_now+0x44>
 8010c00:	9d02      	ldr	r5, [sp, #8]
 8010c02:	2d00      	cmp	r5, #0
 8010c04:	db0d      	blt.n	8010c22 <rcutils_system_time_now+0x3e>
 8010c06:	4e0b      	ldr	r6, [pc, #44]	@ (8010c34 <rcutils_system_time_now+0x50>)
 8010c08:	fba3 3206 	umull	r3, r2, r3, r6
 8010c0c:	195b      	adds	r3, r3, r5
 8010c0e:	fb06 2201 	mla	r2, r6, r1, r2
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010c1a:	e9c4 3200 	strd	r3, r2, [r4]
 8010c1e:	b004      	add	sp, #16
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
 8010c22:	ea53 0201 	orrs.w	r2, r3, r1
 8010c26:	d1ee      	bne.n	8010c06 <rcutils_system_time_now+0x22>
 8010c28:	2002      	movs	r0, #2
 8010c2a:	b004      	add	sp, #16
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	200b      	movs	r0, #11
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	3b9aca00 	.word	0x3b9aca00

08010c38 <rcutils_steady_time_now>:
 8010c38:	b318      	cbz	r0, 8010c82 <rcutils_steady_time_now+0x4a>
 8010c3a:	b570      	push	{r4, r5, r6, lr}
 8010c3c:	b084      	sub	sp, #16
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4669      	mov	r1, sp
 8010c42:	2000      	movs	r0, #0
 8010c44:	f7f1 ffe8 	bl	8002c18 <clock_gettime>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	db17      	blt.n	8010c7c <rcutils_steady_time_now+0x44>
 8010c4c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010c50:	2900      	cmp	r1, #0
 8010c52:	db13      	blt.n	8010c7c <rcutils_steady_time_now+0x44>
 8010c54:	9d02      	ldr	r5, [sp, #8]
 8010c56:	2d00      	cmp	r5, #0
 8010c58:	db0d      	blt.n	8010c76 <rcutils_steady_time_now+0x3e>
 8010c5a:	4e0b      	ldr	r6, [pc, #44]	@ (8010c88 <rcutils_steady_time_now+0x50>)
 8010c5c:	fba3 3206 	umull	r3, r2, r3, r6
 8010c60:	195b      	adds	r3, r3, r5
 8010c62:	fb06 2201 	mla	r2, r6, r1, r2
 8010c66:	f04f 0000 	mov.w	r0, #0
 8010c6a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010c6e:	e9c4 3200 	strd	r3, r2, [r4]
 8010c72:	b004      	add	sp, #16
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
 8010c76:	ea53 0201 	orrs.w	r2, r3, r1
 8010c7a:	d1ee      	bne.n	8010c5a <rcutils_steady_time_now+0x22>
 8010c7c:	2002      	movs	r0, #2
 8010c7e:	b004      	add	sp, #16
 8010c80:	bd70      	pop	{r4, r5, r6, pc}
 8010c82:	200b      	movs	r0, #11
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	3b9aca00 	.word	0x3b9aca00

08010c8c <rmw_get_zero_initialized_init_options>:
 8010c8c:	b530      	push	{r4, r5, lr}
 8010c8e:	b08b      	sub	sp, #44	@ 0x2c
 8010c90:	466d      	mov	r5, sp
 8010c92:	4604      	mov	r4, r0
 8010c94:	4628      	mov	r0, r5
 8010c96:	f000 f825 	bl	8010ce4 <rmw_get_default_security_options>
 8010c9a:	a802      	add	r0, sp, #8
 8010c9c:	f00a f8ee 	bl	801ae7c <rmw_get_zero_initialized_discovery_options>
 8010ca0:	2258      	movs	r2, #88	@ 0x58
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f00d f81b 	bl	801dce0 <memset>
 8010caa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010cae:	f104 0310 	add.w	r3, r4, #16
 8010cb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010cb6:	f10d 0c08 	add.w	ip, sp, #8
 8010cba:	e883 0003 	stmia.w	r3, {r0, r1}
 8010cbe:	60e2      	str	r2, [r4, #12]
 8010cc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cc4:	f104 0e1c 	add.w	lr, r4, #28
 8010cc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ccc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010cd0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	b00b      	add	sp, #44	@ 0x2c
 8010cd8:	bd30      	pop	{r4, r5, pc}
 8010cda:	bf00      	nop

08010cdc <rmw_get_default_publisher_options>:
 8010cdc:	2200      	movs	r2, #0
 8010cde:	6002      	str	r2, [r0, #0]
 8010ce0:	7102      	strb	r2, [r0, #4]
 8010ce2:	4770      	bx	lr

08010ce4 <rmw_get_default_security_options>:
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	7002      	strb	r2, [r0, #0]
 8010ce8:	6042      	str	r2, [r0, #4]
 8010cea:	4770      	bx	lr

08010cec <rmw_subscription_content_filter_options_fini>:
 8010cec:	b1b0      	cbz	r0, 8010d1c <rmw_subscription_content_filter_options_fini+0x30>
 8010cee:	b538      	push	{r3, r4, r5, lr}
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	4608      	mov	r0, r1
 8010cf4:	460d      	mov	r5, r1
 8010cf6:	f7ff fcf7 	bl	80106e8 <rcutils_allocator_is_valid>
 8010cfa:	b168      	cbz	r0, 8010d18 <rmw_subscription_content_filter_options_fini+0x2c>
 8010cfc:	6820      	ldr	r0, [r4, #0]
 8010cfe:	b120      	cbz	r0, 8010d0a <rmw_subscription_content_filter_options_fini+0x1e>
 8010d00:	686b      	ldr	r3, [r5, #4]
 8010d02:	6929      	ldr	r1, [r5, #16]
 8010d04:	4798      	blx	r3
 8010d06:	2300      	movs	r3, #0
 8010d08:	6023      	str	r3, [r4, #0]
 8010d0a:	1d20      	adds	r0, r4, #4
 8010d0c:	f009 ff74 	bl	801abf8 <rcutils_string_array_fini>
 8010d10:	3800      	subs	r0, #0
 8010d12:	bf18      	it	ne
 8010d14:	2001      	movne	r0, #1
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
 8010d18:	200b      	movs	r0, #11
 8010d1a:	bd38      	pop	{r3, r4, r5, pc}
 8010d1c:	200b      	movs	r0, #11
 8010d1e:	4770      	bx	lr

08010d20 <rmw_get_default_subscription_options>:
 8010d20:	2200      	movs	r2, #0
 8010d22:	e9c0 2200 	strd	r2, r2, [r0]
 8010d26:	6082      	str	r2, [r0, #8]
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop

08010d2c <rmw_get_zero_initialized_message_info>:
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	2238      	movs	r2, #56	@ 0x38
 8010d30:	4604      	mov	r4, r0
 8010d32:	2100      	movs	r1, #0
 8010d34:	f00c ffd4 	bl	801dce0 <memset>
 8010d38:	4620      	mov	r0, r4
 8010d3a:	bd10      	pop	{r4, pc}

08010d3c <rmw_validate_namespace_with_size>:
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d031      	beq.n	8010da4 <rmw_validate_namespace_with_size+0x68>
 8010d40:	b570      	push	{r4, r5, r6, lr}
 8010d42:	4614      	mov	r4, r2
 8010d44:	b0c2      	sub	sp, #264	@ 0x108
 8010d46:	b1ba      	cbz	r2, 8010d78 <rmw_validate_namespace_with_size+0x3c>
 8010d48:	2901      	cmp	r1, #1
 8010d4a:	460e      	mov	r6, r1
 8010d4c:	461d      	mov	r5, r3
 8010d4e:	d102      	bne.n	8010d56 <rmw_validate_namespace_with_size+0x1a>
 8010d50:	7803      	ldrb	r3, [r0, #0]
 8010d52:	2b2f      	cmp	r3, #47	@ 0x2f
 8010d54:	d015      	beq.n	8010d82 <rmw_validate_namespace_with_size+0x46>
 8010d56:	aa01      	add	r2, sp, #4
 8010d58:	4669      	mov	r1, sp
 8010d5a:	f00a f961 	bl	801b020 <rmw_validate_full_topic_name>
 8010d5e:	b960      	cbnz	r0, 8010d7a <rmw_validate_namespace_with_size+0x3e>
 8010d60:	9b00      	ldr	r3, [sp, #0]
 8010d62:	b163      	cbz	r3, 8010d7e <rmw_validate_namespace_with_size+0x42>
 8010d64:	2b07      	cmp	r3, #7
 8010d66:	d00a      	beq.n	8010d7e <rmw_validate_namespace_with_size+0x42>
 8010d68:	1e5a      	subs	r2, r3, #1
 8010d6a:	2a05      	cmp	r2, #5
 8010d6c:	d81c      	bhi.n	8010da8 <rmw_validate_namespace_with_size+0x6c>
 8010d6e:	e8df f002 	tbb	[pc, r2]
 8010d72:	0c0c      	.short	0x0c0c
 8010d74:	0c0c0c0c 	.word	0x0c0c0c0c
 8010d78:	200b      	movs	r0, #11
 8010d7a:	b042      	add	sp, #264	@ 0x108
 8010d7c:	bd70      	pop	{r4, r5, r6, pc}
 8010d7e:	2ef5      	cmp	r6, #245	@ 0xf5
 8010d80:	d809      	bhi.n	8010d96 <rmw_validate_namespace_with_size+0x5a>
 8010d82:	2300      	movs	r3, #0
 8010d84:	6023      	str	r3, [r4, #0]
 8010d86:	2000      	movs	r0, #0
 8010d88:	e7f7      	b.n	8010d7a <rmw_validate_namespace_with_size+0x3e>
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	2d00      	cmp	r5, #0
 8010d8e:	d0fa      	beq.n	8010d86 <rmw_validate_namespace_with_size+0x4a>
 8010d90:	9b01      	ldr	r3, [sp, #4]
 8010d92:	602b      	str	r3, [r5, #0]
 8010d94:	e7f7      	b.n	8010d86 <rmw_validate_namespace_with_size+0x4a>
 8010d96:	2307      	movs	r3, #7
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	2d00      	cmp	r5, #0
 8010d9c:	d0f3      	beq.n	8010d86 <rmw_validate_namespace_with_size+0x4a>
 8010d9e:	23f4      	movs	r3, #244	@ 0xf4
 8010da0:	602b      	str	r3, [r5, #0]
 8010da2:	e7f0      	b.n	8010d86 <rmw_validate_namespace_with_size+0x4a>
 8010da4:	200b      	movs	r0, #11
 8010da6:	4770      	bx	lr
 8010da8:	4a03      	ldr	r2, [pc, #12]	@ (8010db8 <rmw_validate_namespace_with_size+0x7c>)
 8010daa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010dae:	a802      	add	r0, sp, #8
 8010db0:	f7ff fe8c 	bl	8010acc <rcutils_snprintf>
 8010db4:	2001      	movs	r0, #1
 8010db6:	e7e0      	b.n	8010d7a <rmw_validate_namespace_with_size+0x3e>
 8010db8:	08020750 	.word	0x08020750

08010dbc <rmw_validate_namespace>:
 8010dbc:	b168      	cbz	r0, 8010dda <rmw_validate_namespace+0x1e>
 8010dbe:	b570      	push	{r4, r5, r6, lr}
 8010dc0:	460d      	mov	r5, r1
 8010dc2:	4616      	mov	r6, r2
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	f7ef fa8b 	bl	80002e0 <strlen>
 8010dca:	4633      	mov	r3, r6
 8010dcc:	4601      	mov	r1, r0
 8010dce:	462a      	mov	r2, r5
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dd6:	f7ff bfb1 	b.w	8010d3c <rmw_validate_namespace_with_size>
 8010dda:	200b      	movs	r0, #11
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop

08010de0 <rmw_namespace_validation_result_string>:
 8010de0:	2807      	cmp	r0, #7
 8010de2:	bf9a      	itte	ls
 8010de4:	4b02      	ldrls	r3, [pc, #8]	@ (8010df0 <rmw_namespace_validation_result_string+0x10>)
 8010de6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010dea:	4802      	ldrhi	r0, [pc, #8]	@ (8010df4 <rmw_namespace_validation_result_string+0x14>)
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	08020948 	.word	0x08020948
 8010df4:	080207a0 	.word	0x080207a0

08010df8 <rmw_validate_node_name>:
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d037      	beq.n	8010e6c <rmw_validate_node_name+0x74>
 8010dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfe:	460e      	mov	r6, r1
 8010e00:	2900      	cmp	r1, #0
 8010e02:	d035      	beq.n	8010e70 <rmw_validate_node_name+0x78>
 8010e04:	4617      	mov	r7, r2
 8010e06:	4604      	mov	r4, r0
 8010e08:	f7ef fa6a 	bl	80002e0 <strlen>
 8010e0c:	b1d8      	cbz	r0, 8010e46 <rmw_validate_node_name+0x4e>
 8010e0e:	1e63      	subs	r3, r4, #1
 8010e10:	1819      	adds	r1, r3, r0
 8010e12:	461a      	mov	r2, r3
 8010e14:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010e18:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8010e1c:	f02e 0c20 	bic.w	ip, lr, #32
 8010e20:	2d09      	cmp	r5, #9
 8010e22:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010e26:	d915      	bls.n	8010e54 <rmw_validate_node_name+0x5c>
 8010e28:	f1bc 0f19 	cmp.w	ip, #25
 8010e2c:	d912      	bls.n	8010e54 <rmw_validate_node_name+0x5c>
 8010e2e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010e32:	d00f      	beq.n	8010e54 <rmw_validate_node_name+0x5c>
 8010e34:	2302      	movs	r3, #2
 8010e36:	6033      	str	r3, [r6, #0]
 8010e38:	b11f      	cbz	r7, 8010e42 <rmw_validate_node_name+0x4a>
 8010e3a:	f1c4 0401 	rsb	r4, r4, #1
 8010e3e:	4414      	add	r4, r2
 8010e40:	603c      	str	r4, [r7, #0]
 8010e42:	2000      	movs	r0, #0
 8010e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e46:	2301      	movs	r3, #1
 8010e48:	6033      	str	r3, [r6, #0]
 8010e4a:	2f00      	cmp	r7, #0
 8010e4c:	d0f9      	beq.n	8010e42 <rmw_validate_node_name+0x4a>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	603b      	str	r3, [r7, #0]
 8010e52:	e7f6      	b.n	8010e42 <rmw_validate_node_name+0x4a>
 8010e54:	4299      	cmp	r1, r3
 8010e56:	d1dc      	bne.n	8010e12 <rmw_validate_node_name+0x1a>
 8010e58:	7823      	ldrb	r3, [r4, #0]
 8010e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8010e8c <rmw_validate_node_name+0x94>)
 8010e5c:	5cd3      	ldrb	r3, [r2, r3]
 8010e5e:	f013 0304 	ands.w	r3, r3, #4
 8010e62:	d10e      	bne.n	8010e82 <rmw_validate_node_name+0x8a>
 8010e64:	28ff      	cmp	r0, #255	@ 0xff
 8010e66:	d805      	bhi.n	8010e74 <rmw_validate_node_name+0x7c>
 8010e68:	6033      	str	r3, [r6, #0]
 8010e6a:	e7ea      	b.n	8010e42 <rmw_validate_node_name+0x4a>
 8010e6c:	200b      	movs	r0, #11
 8010e6e:	4770      	bx	lr
 8010e70:	200b      	movs	r0, #11
 8010e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e74:	2304      	movs	r3, #4
 8010e76:	6033      	str	r3, [r6, #0]
 8010e78:	2f00      	cmp	r7, #0
 8010e7a:	d0e2      	beq.n	8010e42 <rmw_validate_node_name+0x4a>
 8010e7c:	23fe      	movs	r3, #254	@ 0xfe
 8010e7e:	603b      	str	r3, [r7, #0]
 8010e80:	e7df      	b.n	8010e42 <rmw_validate_node_name+0x4a>
 8010e82:	2303      	movs	r3, #3
 8010e84:	6033      	str	r3, [r6, #0]
 8010e86:	2f00      	cmp	r7, #0
 8010e88:	d1e1      	bne.n	8010e4e <rmw_validate_node_name+0x56>
 8010e8a:	e7da      	b.n	8010e42 <rmw_validate_node_name+0x4a>
 8010e8c:	08021672 	.word	0x08021672

08010e90 <rmw_node_name_validation_result_string>:
 8010e90:	2804      	cmp	r0, #4
 8010e92:	bf9a      	itte	ls
 8010e94:	4b02      	ldrls	r3, [pc, #8]	@ (8010ea0 <rmw_node_name_validation_result_string+0x10>)
 8010e96:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010e9a:	4802      	ldrhi	r0, [pc, #8]	@ (8010ea4 <rmw_node_name_validation_result_string+0x14>)
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	08020a54 	.word	0x08020a54
 8010ea4:	08020968 	.word	0x08020968

08010ea8 <rmw_uros_set_custom_transport>:
 8010ea8:	b470      	push	{r4, r5, r6}
 8010eaa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010eae:	b162      	cbz	r2, 8010eca <rmw_uros_set_custom_transport+0x22>
 8010eb0:	b15b      	cbz	r3, 8010eca <rmw_uros_set_custom_transport+0x22>
 8010eb2:	b155      	cbz	r5, 8010eca <rmw_uros_set_custom_transport+0x22>
 8010eb4:	b14e      	cbz	r6, 8010eca <rmw_uros_set_custom_transport+0x22>
 8010eb6:	4c06      	ldr	r4, [pc, #24]	@ (8010ed0 <rmw_uros_set_custom_transport+0x28>)
 8010eb8:	7020      	strb	r0, [r4, #0]
 8010eba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010ebe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010ec2:	6166      	str	r6, [r4, #20]
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	bc70      	pop	{r4, r5, r6}
 8010ec8:	4770      	bx	lr
 8010eca:	200b      	movs	r0, #11
 8010ecc:	bc70      	pop	{r4, r5, r6}
 8010ece:	4770      	bx	lr
 8010ed0:	20015538 	.word	0x20015538

08010ed4 <rmw_init_options_init>:
 8010ed4:	b084      	sub	sp, #16
 8010ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	ad09      	add	r5, sp, #36	@ 0x24
 8010edc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010ee0:	b130      	cbz	r0, 8010ef0 <rmw_init_options_init+0x1c>
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	f7ff fbff 	bl	80106e8 <rcutils_allocator_is_valid>
 8010eea:	b108      	cbz	r0, 8010ef0 <rmw_init_options_init+0x1c>
 8010eec:	68a6      	ldr	r6, [r4, #8]
 8010eee:	b12e      	cbz	r6, 8010efc <rmw_init_options_init+0x28>
 8010ef0:	200b      	movs	r0, #11
 8010ef2:	b003      	add	sp, #12
 8010ef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ef8:	b004      	add	sp, #16
 8010efa:	4770      	bx	lr
 8010efc:	2200      	movs	r2, #0
 8010efe:	2300      	movs	r3, #0
 8010f00:	e9c4 2300 	strd	r2, r3, [r4]
 8010f04:	4b22      	ldr	r3, [pc, #136]	@ (8010f90 <rmw_init_options_init+0xbc>)
 8010f06:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8010fa0 <rmw_init_options_init+0xcc>
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	60a3      	str	r3, [r4, #8]
 8010f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f10:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8010f14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f18:	466f      	mov	r7, sp
 8010f1a:	682b      	ldr	r3, [r5, #0]
 8010f1c:	f8cc 3000 	str.w	r3, [ip]
 8010f20:	4638      	mov	r0, r7
 8010f22:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8010f26:	60e6      	str	r6, [r4, #12]
 8010f28:	f7ff fedc 	bl	8010ce4 <rmw_get_default_security_options>
 8010f2c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010f30:	f104 0310 	add.w	r3, r4, #16
 8010f34:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f38:	2203      	movs	r2, #3
 8010f3a:	4816      	ldr	r0, [pc, #88]	@ (8010f94 <rmw_init_options_init+0xc0>)
 8010f3c:	4916      	ldr	r1, [pc, #88]	@ (8010f98 <rmw_init_options_init+0xc4>)
 8010f3e:	7626      	strb	r6, [r4, #24]
 8010f40:	f001 f834 	bl	8011fac <rmw_uxrce_init_init_options_impl_memory>
 8010f44:	4813      	ldr	r0, [pc, #76]	@ (8010f94 <rmw_init_options_init+0xc0>)
 8010f46:	f00a f9cb 	bl	801b2e0 <get_memory>
 8010f4a:	b1f0      	cbz	r0, 8010f8a <rmw_init_options_init+0xb6>
 8010f4c:	4a13      	ldr	r2, [pc, #76]	@ (8010f9c <rmw_init_options_init+0xc8>)
 8010f4e:	6883      	ldr	r3, [r0, #8]
 8010f50:	6851      	ldr	r1, [r2, #4]
 8010f52:	7810      	ldrb	r0, [r2, #0]
 8010f54:	6563      	str	r3, [r4, #84]	@ 0x54
 8010f56:	7418      	strb	r0, [r3, #16]
 8010f58:	6159      	str	r1, [r3, #20]
 8010f5a:	68d1      	ldr	r1, [r2, #12]
 8010f5c:	61d9      	str	r1, [r3, #28]
 8010f5e:	6911      	ldr	r1, [r2, #16]
 8010f60:	6219      	str	r1, [r3, #32]
 8010f62:	6951      	ldr	r1, [r2, #20]
 8010f64:	6892      	ldr	r2, [r2, #8]
 8010f66:	619a      	str	r2, [r3, #24]
 8010f68:	6259      	str	r1, [r3, #36]	@ 0x24
 8010f6a:	f005 ff99 	bl	8016ea0 <uxr_nanos>
 8010f6e:	f00c faa3 	bl	801d4b8 <srand>
 8010f72:	f00c facf 	bl	801d514 <rand>
 8010f76:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010f78:	6298      	str	r0, [r3, #40]	@ 0x28
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d0f9      	beq.n	8010f72 <rmw_init_options_init+0x9e>
 8010f7e:	2000      	movs	r0, #0
 8010f80:	b003      	add	sp, #12
 8010f82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f86:	b004      	add	sp, #16
 8010f88:	4770      	bx	lr
 8010f8a:	2001      	movs	r0, #1
 8010f8c:	e7b1      	b.n	8010ef2 <rmw_init_options_init+0x1e>
 8010f8e:	bf00      	nop
 8010f90:	0802124c 	.word	0x0802124c
 8010f94:	20015724 	.word	0x20015724
 8010f98:	200156a0 	.word	0x200156a0
 8010f9c:	20015538 	.word	0x20015538
 8010fa0:	080204dc 	.word	0x080204dc

08010fa4 <rmw_init_options_copy>:
 8010fa4:	b570      	push	{r4, r5, r6, lr}
 8010fa6:	b158      	cbz	r0, 8010fc0 <rmw_init_options_copy+0x1c>
 8010fa8:	460d      	mov	r5, r1
 8010faa:	b149      	cbz	r1, 8010fc0 <rmw_init_options_copy+0x1c>
 8010fac:	4604      	mov	r4, r0
 8010fae:	6880      	ldr	r0, [r0, #8]
 8010fb0:	b120      	cbz	r0, 8010fbc <rmw_init_options_copy+0x18>
 8010fb2:	4b14      	ldr	r3, [pc, #80]	@ (8011004 <rmw_init_options_copy+0x60>)
 8010fb4:	6819      	ldr	r1, [r3, #0]
 8010fb6:	f7ef f933 	bl	8000220 <strcmp>
 8010fba:	b9e8      	cbnz	r0, 8010ff8 <rmw_init_options_copy+0x54>
 8010fbc:	68ae      	ldr	r6, [r5, #8]
 8010fbe:	b116      	cbz	r6, 8010fc6 <rmw_init_options_copy+0x22>
 8010fc0:	260b      	movs	r6, #11
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	bd70      	pop	{r4, r5, r6, pc}
 8010fc6:	2258      	movs	r2, #88	@ 0x58
 8010fc8:	4621      	mov	r1, r4
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f00c ffb9 	bl	801df42 <memcpy>
 8010fd0:	480d      	ldr	r0, [pc, #52]	@ (8011008 <rmw_init_options_copy+0x64>)
 8010fd2:	f00a f985 	bl	801b2e0 <get_memory>
 8010fd6:	b190      	cbz	r0, 8010ffe <rmw_init_options_copy+0x5a>
 8010fd8:	6883      	ldr	r3, [r0, #8]
 8010fda:	656b      	str	r3, [r5, #84]	@ 0x54
 8010fdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010fde:	f102 0c10 	add.w	ip, r2, #16
 8010fe2:	f103 0510 	add.w	r5, r3, #16
 8010fe6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010ff0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	bd70      	pop	{r4, r5, r6, pc}
 8010ff8:	260c      	movs	r6, #12
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	bd70      	pop	{r4, r5, r6, pc}
 8010ffe:	2601      	movs	r6, #1
 8011000:	e7df      	b.n	8010fc2 <rmw_init_options_copy+0x1e>
 8011002:	bf00      	nop
 8011004:	0802124c 	.word	0x0802124c
 8011008:	20015724 	.word	0x20015724

0801100c <rmw_init_options_fini>:
 801100c:	b368      	cbz	r0, 801106a <rmw_init_options_fini+0x5e>
 801100e:	b510      	push	{r4, lr}
 8011010:	4604      	mov	r4, r0
 8011012:	b096      	sub	sp, #88	@ 0x58
 8011014:	3040      	adds	r0, #64	@ 0x40
 8011016:	f7ff fb67 	bl	80106e8 <rcutils_allocator_is_valid>
 801101a:	b1f0      	cbz	r0, 801105a <rmw_init_options_fini+0x4e>
 801101c:	68a0      	ldr	r0, [r4, #8]
 801101e:	b120      	cbz	r0, 801102a <rmw_init_options_fini+0x1e>
 8011020:	4b13      	ldr	r3, [pc, #76]	@ (8011070 <rmw_init_options_fini+0x64>)
 8011022:	6819      	ldr	r1, [r3, #0]
 8011024:	f7ef f8fc 	bl	8000220 <strcmp>
 8011028:	b9e8      	cbnz	r0, 8011066 <rmw_init_options_fini+0x5a>
 801102a:	4b12      	ldr	r3, [pc, #72]	@ (8011074 <rmw_init_options_fini+0x68>)
 801102c:	6819      	ldr	r1, [r3, #0]
 801102e:	b1b9      	cbz	r1, 8011060 <rmw_init_options_fini+0x54>
 8011030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011032:	e001      	b.n	8011038 <rmw_init_options_fini+0x2c>
 8011034:	6849      	ldr	r1, [r1, #4]
 8011036:	b199      	cbz	r1, 8011060 <rmw_init_options_fini+0x54>
 8011038:	688b      	ldr	r3, [r1, #8]
 801103a:	429a      	cmp	r2, r3
 801103c:	d1fa      	bne.n	8011034 <rmw_init_options_fini+0x28>
 801103e:	480d      	ldr	r0, [pc, #52]	@ (8011074 <rmw_init_options_fini+0x68>)
 8011040:	f00a f95e 	bl	801b300 <put_memory>
 8011044:	4668      	mov	r0, sp
 8011046:	f7ff fe21 	bl	8010c8c <rmw_get_zero_initialized_init_options>
 801104a:	2258      	movs	r2, #88	@ 0x58
 801104c:	4669      	mov	r1, sp
 801104e:	4620      	mov	r0, r4
 8011050:	f00c ff77 	bl	801df42 <memcpy>
 8011054:	2000      	movs	r0, #0
 8011056:	b016      	add	sp, #88	@ 0x58
 8011058:	bd10      	pop	{r4, pc}
 801105a:	200b      	movs	r0, #11
 801105c:	b016      	add	sp, #88	@ 0x58
 801105e:	bd10      	pop	{r4, pc}
 8011060:	2001      	movs	r0, #1
 8011062:	b016      	add	sp, #88	@ 0x58
 8011064:	bd10      	pop	{r4, pc}
 8011066:	200c      	movs	r0, #12
 8011068:	e7f5      	b.n	8011056 <rmw_init_options_fini+0x4a>
 801106a:	200b      	movs	r0, #11
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	0802124c 	.word	0x0802124c
 8011074:	20015724 	.word	0x20015724

08011078 <rmw_init>:
 8011078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801107c:	b083      	sub	sp, #12
 801107e:	2800      	cmp	r0, #0
 8011080:	f000 80d4 	beq.w	801122c <rmw_init+0x1b4>
 8011084:	460e      	mov	r6, r1
 8011086:	2900      	cmp	r1, #0
 8011088:	f000 80d0 	beq.w	801122c <rmw_init+0x1b4>
 801108c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801108e:	4605      	mov	r5, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	f000 80cb 	beq.w	801122c <rmw_init+0x1b4>
 8011096:	4b77      	ldr	r3, [pc, #476]	@ (8011274 <rmw_init+0x1fc>)
 8011098:	6880      	ldr	r0, [r0, #8]
 801109a:	681f      	ldr	r7, [r3, #0]
 801109c:	b128      	cbz	r0, 80110aa <rmw_init+0x32>
 801109e:	4639      	mov	r1, r7
 80110a0:	f7ef f8be 	bl	8000220 <strcmp>
 80110a4:	2800      	cmp	r0, #0
 80110a6:	f040 80d3 	bne.w	8011250 <rmw_init+0x1d8>
 80110aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110ae:	4c72      	ldr	r4, [pc, #456]	@ (8011278 <rmw_init+0x200>)
 80110b0:	4972      	ldr	r1, [pc, #456]	@ (801127c <rmw_init+0x204>)
 80110b2:	4873      	ldr	r0, [pc, #460]	@ (8011280 <rmw_init+0x208>)
 80110b4:	60b7      	str	r7, [r6, #8]
 80110b6:	e9c6 2300 	strd	r2, r3, [r6]
 80110ba:	68eb      	ldr	r3, [r5, #12]
 80110bc:	66b3      	str	r3, [r6, #104]	@ 0x68
 80110be:	2201      	movs	r2, #1
 80110c0:	f000 ff14 	bl	8011eec <rmw_uxrce_init_session_memory>
 80110c4:	4620      	mov	r0, r4
 80110c6:	496f      	ldr	r1, [pc, #444]	@ (8011284 <rmw_init+0x20c>)
 80110c8:	2204      	movs	r2, #4
 80110ca:	f000 ff4f 	bl	8011f6c <rmw_uxrce_init_static_input_buffer_memory>
 80110ce:	f04f 0800 	mov.w	r8, #0
 80110d2:	486b      	ldr	r0, [pc, #428]	@ (8011280 <rmw_init+0x208>)
 80110d4:	f884 800d 	strb.w	r8, [r4, #13]
 80110d8:	f00a f902 	bl	801b2e0 <get_memory>
 80110dc:	2800      	cmp	r0, #0
 80110de:	f000 80b2 	beq.w	8011246 <rmw_init+0x1ce>
 80110e2:	6884      	ldr	r4, [r0, #8]
 80110e4:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80110e6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80110e8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80110ec:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80110f0:	9101      	str	r1, [sp, #4]
 80110f2:	6a00      	ldr	r0, [r0, #32]
 80110f4:	9000      	str	r0, [sp, #0]
 80110f6:	f104 0910 	add.w	r9, r4, #16
 80110fa:	4661      	mov	r1, ip
 80110fc:	4648      	mov	r0, r9
 80110fe:	f003 fe99 	bl	8014e34 <uxr_set_custom_transport_callbacks>
 8011102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011106:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 801110a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801110e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8011112:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011116:	495c      	ldr	r1, [pc, #368]	@ (8011288 <rmw_init+0x210>)
 8011118:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801111c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8011120:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011124:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011128:	4858      	ldr	r0, [pc, #352]	@ (801128c <rmw_init+0x214>)
 801112a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801112e:	2201      	movs	r2, #1
 8011130:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8011132:	f000 febb 	bl	8011eac <rmw_uxrce_init_node_memory>
 8011136:	4956      	ldr	r1, [pc, #344]	@ (8011290 <rmw_init+0x218>)
 8011138:	4856      	ldr	r0, [pc, #344]	@ (8011294 <rmw_init+0x21c>)
 801113a:	2205      	movs	r2, #5
 801113c:	f000 fe96 	bl	8011e6c <rmw_uxrce_init_subscription_memory>
 8011140:	4955      	ldr	r1, [pc, #340]	@ (8011298 <rmw_init+0x220>)
 8011142:	4856      	ldr	r0, [pc, #344]	@ (801129c <rmw_init+0x224>)
 8011144:	220a      	movs	r2, #10
 8011146:	f000 fe71 	bl	8011e2c <rmw_uxrce_init_publisher_memory>
 801114a:	4955      	ldr	r1, [pc, #340]	@ (80112a0 <rmw_init+0x228>)
 801114c:	4855      	ldr	r0, [pc, #340]	@ (80112a4 <rmw_init+0x22c>)
 801114e:	2201      	movs	r2, #1
 8011150:	f000 fe2c 	bl	8011dac <rmw_uxrce_init_service_memory>
 8011154:	4954      	ldr	r1, [pc, #336]	@ (80112a8 <rmw_init+0x230>)
 8011156:	4855      	ldr	r0, [pc, #340]	@ (80112ac <rmw_init+0x234>)
 8011158:	2201      	movs	r2, #1
 801115a:	f000 fe47 	bl	8011dec <rmw_uxrce_init_client_memory>
 801115e:	4954      	ldr	r1, [pc, #336]	@ (80112b0 <rmw_init+0x238>)
 8011160:	4854      	ldr	r0, [pc, #336]	@ (80112b4 <rmw_init+0x23c>)
 8011162:	220f      	movs	r2, #15
 8011164:	f000 fee2 	bl	8011f2c <rmw_uxrce_init_topic_memory>
 8011168:	4953      	ldr	r1, [pc, #332]	@ (80112b8 <rmw_init+0x240>)
 801116a:	4854      	ldr	r0, [pc, #336]	@ (80112bc <rmw_init+0x244>)
 801116c:	2203      	movs	r2, #3
 801116e:	f000 ff1d 	bl	8011fac <rmw_uxrce_init_init_options_impl_memory>
 8011172:	4953      	ldr	r1, [pc, #332]	@ (80112c0 <rmw_init+0x248>)
 8011174:	4853      	ldr	r0, [pc, #332]	@ (80112c4 <rmw_init+0x24c>)
 8011176:	2204      	movs	r2, #4
 8011178:	f000 ff38 	bl	8011fec <rmw_uxrce_init_wait_set_memory>
 801117c:	4952      	ldr	r1, [pc, #328]	@ (80112c8 <rmw_init+0x250>)
 801117e:	4853      	ldr	r0, [pc, #332]	@ (80112cc <rmw_init+0x254>)
 8011180:	2204      	movs	r2, #4
 8011182:	f000 ff53 	bl	801202c <rmw_uxrce_init_guard_condition_memory>
 8011186:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8011188:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 801118a:	4642      	mov	r2, r8
 801118c:	f000 fdd6 	bl	8011d3c <rmw_uxrce_transport_init>
 8011190:	4607      	mov	r7, r0
 8011192:	2800      	cmp	r0, #0
 8011194:	d161      	bne.n	801125a <rmw_init+0x1e2>
 8011196:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8011198:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801119c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801119e:	4628      	mov	r0, r5
 80111a0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80111a4:	f004 f880 	bl	80152a8 <uxr_init_session>
 80111a8:	4628      	mov	r0, r5
 80111aa:	4949      	ldr	r1, [pc, #292]	@ (80112d0 <rmw_init+0x258>)
 80111ac:	4622      	mov	r2, r4
 80111ae:	f004 f89f 	bl	80152f0 <uxr_set_topic_callback>
 80111b2:	4628      	mov	r0, r5
 80111b4:	4947      	ldr	r1, [pc, #284]	@ (80112d4 <rmw_init+0x25c>)
 80111b6:	463a      	mov	r2, r7
 80111b8:	f004 f896 	bl	80152e8 <uxr_set_status_callback>
 80111bc:	4628      	mov	r0, r5
 80111be:	4946      	ldr	r1, [pc, #280]	@ (80112d8 <rmw_init+0x260>)
 80111c0:	463a      	mov	r2, r7
 80111c2:	f004 f899 	bl	80152f8 <uxr_set_request_callback>
 80111c6:	4628      	mov	r0, r5
 80111c8:	4944      	ldr	r1, [pc, #272]	@ (80112dc <rmw_init+0x264>)
 80111ca:	463a      	mov	r2, r7
 80111cc:	f004 f898 	bl	8015300 <uxr_set_reply_callback>
 80111d0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80111d4:	2304      	movs	r3, #4
 80111d6:	0092      	lsls	r2, r2, #2
 80111d8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80111dc:	4628      	mov	r0, r5
 80111de:	f004 f8bd 	bl	801535c <uxr_create_input_reliable_stream>
 80111e2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80111e6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80111ea:	2304      	movs	r3, #4
 80111ec:	0092      	lsls	r2, r2, #2
 80111ee:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80111f2:	4628      	mov	r0, r5
 80111f4:	f004 f89a 	bl	801532c <uxr_create_output_reliable_stream>
 80111f8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80111fc:	4628      	mov	r0, r5
 80111fe:	f004 f8a7 	bl	8015350 <uxr_create_input_best_effort_stream>
 8011202:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8011206:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801120a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801120e:	3114      	adds	r1, #20
 8011210:	4628      	mov	r0, r5
 8011212:	f004 f879 	bl	8015308 <uxr_create_output_best_effort_stream>
 8011216:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801121a:	4628      	mov	r0, r5
 801121c:	f004 fe10 	bl	8015e40 <uxr_create_session>
 8011220:	4605      	mov	r5, r0
 8011222:	b140      	cbz	r0, 8011236 <rmw_init+0x1be>
 8011224:	4638      	mov	r0, r7
 8011226:	b003      	add	sp, #12
 8011228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801122c:	270b      	movs	r7, #11
 801122e:	4638      	mov	r0, r7
 8011230:	b003      	add	sp, #12
 8011232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011236:	4648      	mov	r0, r9
 8011238:	f003 fe3e 	bl	8014eb8 <uxr_close_custom_transport>
 801123c:	4810      	ldr	r0, [pc, #64]	@ (8011280 <rmw_init+0x208>)
 801123e:	4621      	mov	r1, r4
 8011240:	f00a f85e 	bl	801b300 <put_memory>
 8011244:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8011246:	2701      	movs	r7, #1
 8011248:	4638      	mov	r0, r7
 801124a:	b003      	add	sp, #12
 801124c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011250:	270c      	movs	r7, #12
 8011252:	4638      	mov	r0, r7
 8011254:	b003      	add	sp, #12
 8011256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801125a:	4648      	mov	r0, r9
 801125c:	f003 fe2c 	bl	8014eb8 <uxr_close_custom_transport>
 8011260:	4807      	ldr	r0, [pc, #28]	@ (8011280 <rmw_init+0x208>)
 8011262:	4621      	mov	r1, r4
 8011264:	f00a f84c 	bl	801b300 <put_memory>
 8011268:	4638      	mov	r0, r7
 801126a:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 801126e:	b003      	add	sp, #12
 8011270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011274:	0802124c 	.word	0x0802124c
 8011278:	20017838 	.word	0x20017838
 801127c:	20018930 	.word	0x20018930
 8011280:	20019ed8 	.word	0x20019ed8
 8011284:	20015738 	.word	0x20015738
 8011288:	20018878 	.word	0x20018878
 801128c:	2001891c 	.word	0x2001891c
 8011290:	20017bb0 	.word	0x20017bb0
 8011294:	20017fe8 	.word	0x20017fe8
 8011298:	20017ff8 	.word	0x20017ff8
 801129c:	20018868 	.word	0x20018868
 80112a0:	20017ad8 	.word	0x20017ad8
 80112a4:	20017ba0 	.word	0x20017ba0
 80112a8:	20017a00 	.word	0x20017a00
 80112ac:	20017ac8 	.word	0x20017ac8
 80112b0:	20017848 	.word	0x20017848
 80112b4:	200179ec 	.word	0x200179ec
 80112b8:	200156a0 	.word	0x200156a0
 80112bc:	20015724 	.word	0x20015724
 80112c0:	20015620 	.word	0x20015620
 80112c4:	20015690 	.word	0x20015690
 80112c8:	20015590 	.word	0x20015590
 80112cc:	20015610 	.word	0x20015610
 80112d0:	0801b119 	.word	0x0801b119
 80112d4:	0801b111 	.word	0x0801b111
 80112d8:	0801b1b1 	.word	0x0801b1b1
 80112dc:	0801b24d 	.word	0x0801b24d

080112e0 <rmw_shutdown>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	b09c      	sub	sp, #112	@ 0x70
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d051      	beq.n	801138c <rmw_shutdown+0xac>
 80112e8:	4605      	mov	r5, r0
 80112ea:	6880      	ldr	r0, [r0, #8]
 80112ec:	b128      	cbz	r0, 80112fa <rmw_shutdown+0x1a>
 80112ee:	4b2b      	ldr	r3, [pc, #172]	@ (801139c <rmw_shutdown+0xbc>)
 80112f0:	6819      	ldr	r1, [r3, #0]
 80112f2:	f7ee ff95 	bl	8000220 <strcmp>
 80112f6:	2800      	cmp	r0, #0
 80112f8:	d144      	bne.n	8011384 <rmw_shutdown+0xa4>
 80112fa:	4b29      	ldr	r3, [pc, #164]	@ (80113a0 <rmw_shutdown+0xc0>)
 80112fc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80112fe:	681c      	ldr	r4, [r3, #0]
 8011300:	2c00      	cmp	r4, #0
 8011302:	d047      	beq.n	8011394 <rmw_shutdown+0xb4>
 8011304:	2600      	movs	r6, #0
 8011306:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801130a:	691a      	ldr	r2, [r3, #16]
 801130c:	4282      	cmp	r2, r0
 801130e:	d024      	beq.n	801135a <rmw_shutdown+0x7a>
 8011310:	2c00      	cmp	r4, #0
 8011312:	d1f8      	bne.n	8011306 <rmw_shutdown+0x26>
 8011314:	b188      	cbz	r0, 801133a <rmw_shutdown+0x5a>
 8011316:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801131a:	789b      	ldrb	r3, [r3, #2]
 801131c:	2b01      	cmp	r3, #1
 801131e:	bf14      	ite	ne
 8011320:	210a      	movne	r1, #10
 8011322:	2100      	moveq	r1, #0
 8011324:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011328:	f004 fd62 	bl	8015df0 <uxr_delete_session_retries>
 801132c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801132e:	f000 fe9d 	bl	801206c <rmw_uxrce_fini_session_memory>
 8011332:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011334:	3010      	adds	r0, #16
 8011336:	f003 fdbf 	bl	8014eb8 <uxr_close_custom_transport>
 801133a:	2300      	movs	r3, #0
 801133c:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801133e:	b1be      	cbz	r6, 8011370 <rmw_shutdown+0x90>
 8011340:	4d18      	ldr	r5, [pc, #96]	@ (80113a4 <rmw_shutdown+0xc4>)
 8011342:	682c      	ldr	r4, [r5, #0]
 8011344:	b134      	cbz	r4, 8011354 <rmw_shutdown+0x74>
 8011346:	4621      	mov	r1, r4
 8011348:	6864      	ldr	r4, [r4, #4]
 801134a:	4628      	mov	r0, r5
 801134c:	f009 ffd8 	bl	801b300 <put_memory>
 8011350:	2c00      	cmp	r4, #0
 8011352:	d1f8      	bne.n	8011346 <rmw_shutdown+0x66>
 8011354:	4630      	mov	r0, r6
 8011356:	b01c      	add	sp, #112	@ 0x70
 8011358:	bd70      	pop	{r4, r5, r6, pc}
 801135a:	f103 0018 	add.w	r0, r3, #24
 801135e:	f000 f8e7 	bl	8011530 <rmw_destroy_node>
 8011362:	4606      	mov	r6, r0
 8011364:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011366:	2c00      	cmp	r4, #0
 8011368:	d1cd      	bne.n	8011306 <rmw_shutdown+0x26>
 801136a:	2800      	cmp	r0, #0
 801136c:	d1d3      	bne.n	8011316 <rmw_shutdown+0x36>
 801136e:	e7e4      	b.n	801133a <rmw_shutdown+0x5a>
 8011370:	4668      	mov	r0, sp
 8011372:	f009 fdb7 	bl	801aee4 <rmw_get_zero_initialized_context>
 8011376:	2270      	movs	r2, #112	@ 0x70
 8011378:	4669      	mov	r1, sp
 801137a:	4628      	mov	r0, r5
 801137c:	f00c fde1 	bl	801df42 <memcpy>
 8011380:	2600      	movs	r6, #0
 8011382:	e7dd      	b.n	8011340 <rmw_shutdown+0x60>
 8011384:	260c      	movs	r6, #12
 8011386:	4630      	mov	r0, r6
 8011388:	b01c      	add	sp, #112	@ 0x70
 801138a:	bd70      	pop	{r4, r5, r6, pc}
 801138c:	260b      	movs	r6, #11
 801138e:	4630      	mov	r0, r6
 8011390:	b01c      	add	sp, #112	@ 0x70
 8011392:	bd70      	pop	{r4, r5, r6, pc}
 8011394:	2800      	cmp	r0, #0
 8011396:	d0eb      	beq.n	8011370 <rmw_shutdown+0x90>
 8011398:	4626      	mov	r6, r4
 801139a:	e7bc      	b.n	8011316 <rmw_shutdown+0x36>
 801139c:	0802124c 	.word	0x0802124c
 80113a0:	2001891c 	.word	0x2001891c
 80113a4:	20017838 	.word	0x20017838

080113a8 <rmw_context_fini>:
 80113a8:	4b17      	ldr	r3, [pc, #92]	@ (8011408 <rmw_context_fini+0x60>)
 80113aa:	b570      	push	{r4, r5, r6, lr}
 80113ac:	681c      	ldr	r4, [r3, #0]
 80113ae:	4605      	mov	r5, r0
 80113b0:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80113b2:	b33c      	cbz	r4, 8011404 <rmw_context_fini+0x5c>
 80113b4:	2600      	movs	r6, #0
 80113b6:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 80113ba:	691a      	ldr	r2, [r3, #16]
 80113bc:	4282      	cmp	r2, r0
 80113be:	d018      	beq.n	80113f2 <rmw_context_fini+0x4a>
 80113c0:	2c00      	cmp	r4, #0
 80113c2:	d1f8      	bne.n	80113b6 <rmw_context_fini+0xe>
 80113c4:	b188      	cbz	r0, 80113ea <rmw_context_fini+0x42>
 80113c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80113ca:	789b      	ldrb	r3, [r3, #2]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	bf14      	ite	ne
 80113d0:	210a      	movne	r1, #10
 80113d2:	2100      	moveq	r1, #0
 80113d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113d8:	f004 fd0a 	bl	8015df0 <uxr_delete_session_retries>
 80113dc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80113de:	f000 fe45 	bl	801206c <rmw_uxrce_fini_session_memory>
 80113e2:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80113e4:	3010      	adds	r0, #16
 80113e6:	f003 fd67 	bl	8014eb8 <uxr_close_custom_transport>
 80113ea:	2300      	movs	r3, #0
 80113ec:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80113ee:	4630      	mov	r0, r6
 80113f0:	bd70      	pop	{r4, r5, r6, pc}
 80113f2:	f103 0018 	add.w	r0, r3, #24
 80113f6:	f000 f89b 	bl	8011530 <rmw_destroy_node>
 80113fa:	4606      	mov	r6, r0
 80113fc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80113fe:	2c00      	cmp	r4, #0
 8011400:	d1d9      	bne.n	80113b6 <rmw_context_fini+0xe>
 8011402:	e7df      	b.n	80113c4 <rmw_context_fini+0x1c>
 8011404:	4626      	mov	r6, r4
 8011406:	e7dd      	b.n	80113c4 <rmw_context_fini+0x1c>
 8011408:	2001891c 	.word	0x2001891c

0801140c <create_node>:
 801140c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011410:	b083      	sub	sp, #12
 8011412:	2b00      	cmp	r3, #0
 8011414:	d063      	beq.n	80114de <create_node+0xd2>
 8011416:	4606      	mov	r6, r0
 8011418:	4836      	ldr	r0, [pc, #216]	@ (80114f4 <create_node+0xe8>)
 801141a:	460f      	mov	r7, r1
 801141c:	4690      	mov	r8, r2
 801141e:	461d      	mov	r5, r3
 8011420:	f009 ff5e 	bl	801b2e0 <get_memory>
 8011424:	2800      	cmp	r0, #0
 8011426:	d05a      	beq.n	80114de <create_node+0xd2>
 8011428:	6884      	ldr	r4, [r0, #8]
 801142a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 801142c:	6123      	str	r3, [r4, #16]
 801142e:	f009 ffdd 	bl	801b3ec <rmw_get_implementation_identifier>
 8011432:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8011436:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801143a:	f8c4 9020 	str.w	r9, [r4, #32]
 801143e:	4630      	mov	r0, r6
 8011440:	f7ee ff4e 	bl	80002e0 <strlen>
 8011444:	1c42      	adds	r2, r0, #1
 8011446:	2a3c      	cmp	r2, #60	@ 0x3c
 8011448:	f104 0518 	add.w	r5, r4, #24
 801144c:	d844      	bhi.n	80114d8 <create_node+0xcc>
 801144e:	4648      	mov	r0, r9
 8011450:	4631      	mov	r1, r6
 8011452:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011456:	f00c fd74 	bl	801df42 <memcpy>
 801145a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801145e:	4638      	mov	r0, r7
 8011460:	f7ee ff3e 	bl	80002e0 <strlen>
 8011464:	1c42      	adds	r2, r0, #1
 8011466:	2a3c      	cmp	r2, #60	@ 0x3c
 8011468:	d836      	bhi.n	80114d8 <create_node+0xcc>
 801146a:	4639      	mov	r1, r7
 801146c:	4648      	mov	r0, r9
 801146e:	f00c fd68 	bl	801df42 <memcpy>
 8011472:	6923      	ldr	r3, [r4, #16]
 8011474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011478:	2101      	movs	r1, #1
 801147a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801147e:	1842      	adds	r2, r0, r1
 8011480:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011484:	f003 fd1c 	bl	8014ec0 <uxr_object_id>
 8011488:	6160      	str	r0, [r4, #20]
 801148a:	783b      	ldrb	r3, [r7, #0]
 801148c:	2b2f      	cmp	r3, #47	@ 0x2f
 801148e:	d128      	bne.n	80114e2 <create_node+0xd6>
 8011490:	787b      	ldrb	r3, [r7, #1]
 8011492:	bb33      	cbnz	r3, 80114e2 <create_node+0xd6>
 8011494:	4a18      	ldr	r2, [pc, #96]	@ (80114f8 <create_node+0xec>)
 8011496:	4819      	ldr	r0, [pc, #100]	@ (80114fc <create_node+0xf0>)
 8011498:	4633      	mov	r3, r6
 801149a:	213c      	movs	r1, #60	@ 0x3c
 801149c:	f00c fab2 	bl	801da04 <sniprintf>
 80114a0:	6920      	ldr	r0, [r4, #16]
 80114a2:	4916      	ldr	r1, [pc, #88]	@ (80114fc <create_node+0xf0>)
 80114a4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80114a8:	9100      	str	r1, [sp, #0]
 80114aa:	2106      	movs	r1, #6
 80114ac:	9101      	str	r1, [sp, #4]
 80114ae:	6811      	ldr	r1, [r2, #0]
 80114b0:	6962      	ldr	r2, [r4, #20]
 80114b2:	fa1f f388 	uxth.w	r3, r8
 80114b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114ba:	f003 fab1 	bl	8014a20 <uxr_buffer_create_participant_bin>
 80114be:	4602      	mov	r2, r0
 80114c0:	6920      	ldr	r0, [r4, #16]
 80114c2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80114c6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80114ca:	f000 ff4f 	bl	801236c <run_xrce_session>
 80114ce:	b118      	cbz	r0, 80114d8 <create_node+0xcc>
 80114d0:	4628      	mov	r0, r5
 80114d2:	b003      	add	sp, #12
 80114d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114d8:	4628      	mov	r0, r5
 80114da:	f000 fdcd 	bl	8012078 <rmw_uxrce_fini_node_memory>
 80114de:	2500      	movs	r5, #0
 80114e0:	e7f6      	b.n	80114d0 <create_node+0xc4>
 80114e2:	4a07      	ldr	r2, [pc, #28]	@ (8011500 <create_node+0xf4>)
 80114e4:	9600      	str	r6, [sp, #0]
 80114e6:	463b      	mov	r3, r7
 80114e8:	213c      	movs	r1, #60	@ 0x3c
 80114ea:	4804      	ldr	r0, [pc, #16]	@ (80114fc <create_node+0xf0>)
 80114ec:	f00c fa8a 	bl	801da04 <sniprintf>
 80114f0:	e7d6      	b.n	80114a0 <create_node+0x94>
 80114f2:	bf00      	nop
 80114f4:	2001891c 	.word	0x2001891c
 80114f8:	08020a78 	.word	0x08020a78
 80114fc:	20015554 	.word	0x20015554
 8011500:	080204ec 	.word	0x080204ec

08011504 <rmw_create_node>:
 8011504:	b191      	cbz	r1, 801152c <rmw_create_node+0x28>
 8011506:	b410      	push	{r4}
 8011508:	4614      	mov	r4, r2
 801150a:	780a      	ldrb	r2, [r1, #0]
 801150c:	4603      	mov	r3, r0
 801150e:	4608      	mov	r0, r1
 8011510:	b142      	cbz	r2, 8011524 <rmw_create_node+0x20>
 8011512:	b13c      	cbz	r4, 8011524 <rmw_create_node+0x20>
 8011514:	7822      	ldrb	r2, [r4, #0]
 8011516:	b12a      	cbz	r2, 8011524 <rmw_create_node+0x20>
 8011518:	4621      	mov	r1, r4
 801151a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801151c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011520:	f7ff bf74 	b.w	801140c <create_node>
 8011524:	2000      	movs	r0, #0
 8011526:	f85d 4b04 	ldr.w	r4, [sp], #4
 801152a:	4770      	bx	lr
 801152c:	2000      	movs	r0, #0
 801152e:	4770      	bx	lr

08011530 <rmw_destroy_node>:
 8011530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011532:	b328      	cbz	r0, 8011580 <rmw_destroy_node+0x50>
 8011534:	4607      	mov	r7, r0
 8011536:	6800      	ldr	r0, [r0, #0]
 8011538:	b120      	cbz	r0, 8011544 <rmw_destroy_node+0x14>
 801153a:	4b36      	ldr	r3, [pc, #216]	@ (8011614 <rmw_destroy_node+0xe4>)
 801153c:	6819      	ldr	r1, [r3, #0]
 801153e:	f7ee fe6f 	bl	8000220 <strcmp>
 8011542:	b9e8      	cbnz	r0, 8011580 <rmw_destroy_node+0x50>
 8011544:	687d      	ldr	r5, [r7, #4]
 8011546:	b1dd      	cbz	r5, 8011580 <rmw_destroy_node+0x50>
 8011548:	4b33      	ldr	r3, [pc, #204]	@ (8011618 <rmw_destroy_node+0xe8>)
 801154a:	681c      	ldr	r4, [r3, #0]
 801154c:	2c00      	cmp	r4, #0
 801154e:	d05f      	beq.n	8011610 <rmw_destroy_node+0xe0>
 8011550:	2600      	movs	r6, #0
 8011552:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011556:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801155a:	429d      	cmp	r5, r3
 801155c:	d013      	beq.n	8011586 <rmw_destroy_node+0x56>
 801155e:	2c00      	cmp	r4, #0
 8011560:	d1f7      	bne.n	8011552 <rmw_destroy_node+0x22>
 8011562:	4b2e      	ldr	r3, [pc, #184]	@ (801161c <rmw_destroy_node+0xec>)
 8011564:	681c      	ldr	r4, [r3, #0]
 8011566:	b1c4      	cbz	r4, 801159a <rmw_destroy_node+0x6a>
 8011568:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801156c:	6a0b      	ldr	r3, [r1, #32]
 801156e:	429d      	cmp	r5, r3
 8011570:	d1f9      	bne.n	8011566 <rmw_destroy_node+0x36>
 8011572:	317c      	adds	r1, #124	@ 0x7c
 8011574:	4638      	mov	r0, r7
 8011576:	f000 fb2f 	bl	8011bd8 <rmw_destroy_subscription>
 801157a:	2801      	cmp	r0, #1
 801157c:	4606      	mov	r6, r0
 801157e:	d1f2      	bne.n	8011566 <rmw_destroy_node+0x36>
 8011580:	2601      	movs	r6, #1
 8011582:	4630      	mov	r0, r6
 8011584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011586:	3184      	adds	r1, #132	@ 0x84
 8011588:	4638      	mov	r0, r7
 801158a:	f000 f9a1 	bl	80118d0 <rmw_destroy_publisher>
 801158e:	2801      	cmp	r0, #1
 8011590:	4606      	mov	r6, r0
 8011592:	d0f5      	beq.n	8011580 <rmw_destroy_node+0x50>
 8011594:	2c00      	cmp	r4, #0
 8011596:	d1dc      	bne.n	8011552 <rmw_destroy_node+0x22>
 8011598:	e7e3      	b.n	8011562 <rmw_destroy_node+0x32>
 801159a:	4b21      	ldr	r3, [pc, #132]	@ (8011620 <rmw_destroy_node+0xf0>)
 801159c:	681c      	ldr	r4, [r3, #0]
 801159e:	b16c      	cbz	r4, 80115bc <rmw_destroy_node+0x8c>
 80115a0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80115a4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80115a6:	429d      	cmp	r5, r3
 80115a8:	d1f9      	bne.n	801159e <rmw_destroy_node+0x6e>
 80115aa:	317c      	adds	r1, #124	@ 0x7c
 80115ac:	4638      	mov	r0, r7
 80115ae:	f000 f9e1 	bl	8011974 <rmw_destroy_service>
 80115b2:	2801      	cmp	r0, #1
 80115b4:	4606      	mov	r6, r0
 80115b6:	d0e3      	beq.n	8011580 <rmw_destroy_node+0x50>
 80115b8:	2c00      	cmp	r4, #0
 80115ba:	d1f1      	bne.n	80115a0 <rmw_destroy_node+0x70>
 80115bc:	4b19      	ldr	r3, [pc, #100]	@ (8011624 <rmw_destroy_node+0xf4>)
 80115be:	681c      	ldr	r4, [r3, #0]
 80115c0:	b16c      	cbz	r4, 80115de <rmw_destroy_node+0xae>
 80115c2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80115c6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80115c8:	429d      	cmp	r5, r3
 80115ca:	d1f9      	bne.n	80115c0 <rmw_destroy_node+0x90>
 80115cc:	317c      	adds	r1, #124	@ 0x7c
 80115ce:	4638      	mov	r0, r7
 80115d0:	f009 feaa 	bl	801b328 <rmw_destroy_client>
 80115d4:	2801      	cmp	r0, #1
 80115d6:	4606      	mov	r6, r0
 80115d8:	d0d2      	beq.n	8011580 <rmw_destroy_node+0x50>
 80115da:	2c00      	cmp	r4, #0
 80115dc:	d1f1      	bne.n	80115c2 <rmw_destroy_node+0x92>
 80115de:	6928      	ldr	r0, [r5, #16]
 80115e0:	696a      	ldr	r2, [r5, #20]
 80115e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80115e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80115ea:	6819      	ldr	r1, [r3, #0]
 80115ec:	f003 f9ce 	bl	801498c <uxr_buffer_delete_entity>
 80115f0:	4602      	mov	r2, r0
 80115f2:	6928      	ldr	r0, [r5, #16]
 80115f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80115f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80115fc:	f000 feb6 	bl	801236c <run_xrce_session>
 8011600:	2800      	cmp	r0, #0
 8011602:	bf08      	it	eq
 8011604:	2602      	moveq	r6, #2
 8011606:	4638      	mov	r0, r7
 8011608:	f000 fd36 	bl	8012078 <rmw_uxrce_fini_node_memory>
 801160c:	4630      	mov	r0, r6
 801160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011610:	4626      	mov	r6, r4
 8011612:	e7a6      	b.n	8011562 <rmw_destroy_node+0x32>
 8011614:	0802124c 	.word	0x0802124c
 8011618:	20018868 	.word	0x20018868
 801161c:	20017fe8 	.word	0x20017fe8
 8011620:	20017ba0 	.word	0x20017ba0
 8011624:	20017ac8 	.word	0x20017ac8

08011628 <rmw_node_get_graph_guard_condition>:
 8011628:	6843      	ldr	r3, [r0, #4]
 801162a:	6918      	ldr	r0, [r3, #16]
 801162c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop

08011634 <flush_session>:
 8011634:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8011636:	f004 ba3f 	b.w	8015ab8 <uxr_run_session_until_confirm_delivery>
 801163a:	bf00      	nop

0801163c <rmw_publish>:
 801163c:	2800      	cmp	r0, #0
 801163e:	d053      	beq.n	80116e8 <rmw_publish+0xac>
 8011640:	b570      	push	{r4, r5, r6, lr}
 8011642:	460d      	mov	r5, r1
 8011644:	b08e      	sub	sp, #56	@ 0x38
 8011646:	2900      	cmp	r1, #0
 8011648:	d04b      	beq.n	80116e2 <rmw_publish+0xa6>
 801164a:	4604      	mov	r4, r0
 801164c:	6800      	ldr	r0, [r0, #0]
 801164e:	f000 ff13 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 8011652:	2800      	cmp	r0, #0
 8011654:	d045      	beq.n	80116e2 <rmw_publish+0xa6>
 8011656:	6866      	ldr	r6, [r4, #4]
 8011658:	2e00      	cmp	r6, #0
 801165a:	d042      	beq.n	80116e2 <rmw_publish+0xa6>
 801165c:	69b4      	ldr	r4, [r6, #24]
 801165e:	4628      	mov	r0, r5
 8011660:	6923      	ldr	r3, [r4, #16]
 8011662:	4798      	blx	r3
 8011664:	69f3      	ldr	r3, [r6, #28]
 8011666:	9005      	str	r0, [sp, #20]
 8011668:	b113      	cbz	r3, 8011670 <rmw_publish+0x34>
 801166a:	a805      	add	r0, sp, #20
 801166c:	4798      	blx	r3
 801166e:	9805      	ldr	r0, [sp, #20]
 8011670:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	9000      	str	r0, [sp, #0]
 8011678:	6972      	ldr	r2, [r6, #20]
 801167a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801167c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011680:	ab06      	add	r3, sp, #24
 8011682:	f005 fcaf 	bl	8016fe4 <uxr_prepare_output_stream>
 8011686:	b1d8      	cbz	r0, 80116c0 <rmw_publish+0x84>
 8011688:	68a3      	ldr	r3, [r4, #8]
 801168a:	a906      	add	r1, sp, #24
 801168c:	4628      	mov	r0, r5
 801168e:	4798      	blx	r3
 8011690:	6a33      	ldr	r3, [r6, #32]
 8011692:	4604      	mov	r4, r0
 8011694:	b10b      	cbz	r3, 801169a <rmw_publish+0x5e>
 8011696:	a806      	add	r0, sp, #24
 8011698:	4798      	blx	r3
 801169a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801169e:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	6910      	ldr	r0, [r2, #16]
 80116a6:	d021      	beq.n	80116ec <rmw_publish+0xb0>
 80116a8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80116aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116ae:	f004 fa03 	bl	8015ab8 <uxr_run_session_until_confirm_delivery>
 80116b2:	4004      	ands	r4, r0
 80116b4:	b2e4      	uxtb	r4, r4
 80116b6:	f084 0001 	eor.w	r0, r4, #1
 80116ba:	b2c0      	uxtb	r0, r0
 80116bc:	b00e      	add	sp, #56	@ 0x38
 80116be:	bd70      	pop	{r4, r5, r6, pc}
 80116c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80116c4:	6918      	ldr	r0, [r3, #16]
 80116c6:	4b0c      	ldr	r3, [pc, #48]	@ (80116f8 <rmw_publish+0xbc>)
 80116c8:	9301      	str	r3, [sp, #4]
 80116ca:	9b05      	ldr	r3, [sp, #20]
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	9602      	str	r6, [sp, #8]
 80116d0:	6972      	ldr	r2, [r6, #20]
 80116d2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80116d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116d8:	ab06      	add	r3, sp, #24
 80116da:	f005 fcb3 	bl	8017044 <uxr_prepare_output_stream_fragmented>
 80116de:	2800      	cmp	r0, #0
 80116e0:	d1d2      	bne.n	8011688 <rmw_publish+0x4c>
 80116e2:	2001      	movs	r0, #1
 80116e4:	b00e      	add	sp, #56	@ 0x38
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	2001      	movs	r0, #1
 80116ea:	4770      	bx	lr
 80116ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116f0:	f003 fe4a 	bl	8015388 <uxr_flash_output_streams>
 80116f4:	e7df      	b.n	80116b6 <rmw_publish+0x7a>
 80116f6:	bf00      	nop
 80116f8:	08011635 	.word	0x08011635

080116fc <rmw_create_publisher>:
 80116fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	b087      	sub	sp, #28
 8011702:	2800      	cmp	r0, #0
 8011704:	f000 80c9 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011708:	460f      	mov	r7, r1
 801170a:	2900      	cmp	r1, #0
 801170c:	f000 80c5 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011710:	4604      	mov	r4, r0
 8011712:	6800      	ldr	r0, [r0, #0]
 8011714:	4615      	mov	r5, r2
 8011716:	461e      	mov	r6, r3
 8011718:	f000 feae 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 801171c:	2800      	cmp	r0, #0
 801171e:	f000 80bc 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011722:	2d00      	cmp	r5, #0
 8011724:	f000 80b9 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011728:	782b      	ldrb	r3, [r5, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	f000 80b5 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011730:	2e00      	cmp	r6, #0
 8011732:	f000 80b2 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011736:	485c      	ldr	r0, [pc, #368]	@ (80118a8 <rmw_create_publisher+0x1ac>)
 8011738:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801173c:	f009 fdd0 	bl	801b2e0 <get_memory>
 8011740:	2800      	cmp	r0, #0
 8011742:	f000 80aa 	beq.w	801189a <rmw_create_publisher+0x19e>
 8011746:	6884      	ldr	r4, [r0, #8]
 8011748:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801174c:	f009 fe4e 	bl	801b3ec <rmw_get_implementation_identifier>
 8011750:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8011754:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011758:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801175c:	4628      	mov	r0, r5
 801175e:	f7ee fdbf 	bl	80002e0 <strlen>
 8011762:	3001      	adds	r0, #1
 8011764:	283c      	cmp	r0, #60	@ 0x3c
 8011766:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801176a:	f200 808f 	bhi.w	801188c <rmw_create_publisher+0x190>
 801176e:	4a4f      	ldr	r2, [pc, #316]	@ (80118ac <rmw_create_publisher+0x1b0>)
 8011770:	462b      	mov	r3, r5
 8011772:	213c      	movs	r1, #60	@ 0x3c
 8011774:	4650      	mov	r0, sl
 8011776:	f00c f945 	bl	801da04 <sniprintf>
 801177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801177e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8011780:	4631      	mov	r1, r6
 8011782:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8011786:	2250      	movs	r2, #80	@ 0x50
 8011788:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801178c:	f00c fbd9 	bl	801df42 <memcpy>
 8011790:	7a33      	ldrb	r3, [r6, #8]
 8011792:	4947      	ldr	r1, [pc, #284]	@ (80118b0 <rmw_create_publisher+0x1b4>)
 8011794:	2b02      	cmp	r3, #2
 8011796:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801179a:	bf0c      	ite	eq
 801179c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80117a0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80117a4:	67a3      	str	r3, [r4, #120]	@ 0x78
 80117a6:	2300      	movs	r3, #0
 80117a8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80117ac:	4638      	mov	r0, r7
 80117ae:	f000 fe71 	bl	8012494 <get_message_typesupport_handle>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d06a      	beq.n	801188c <rmw_create_publisher+0x190>
 80117b6:	6842      	ldr	r2, [r0, #4]
 80117b8:	61a2      	str	r2, [r4, #24]
 80117ba:	2a00      	cmp	r2, #0
 80117bc:	d066      	beq.n	801188c <rmw_create_publisher+0x190>
 80117be:	4629      	mov	r1, r5
 80117c0:	4633      	mov	r3, r6
 80117c2:	4648      	mov	r0, r9
 80117c4:	f009 fe40 	bl	801b448 <create_topic>
 80117c8:	6260      	str	r0, [r4, #36]	@ 0x24
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d062      	beq.n	8011894 <rmw_create_publisher+0x198>
 80117ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80117d6:	2103      	movs	r1, #3
 80117d8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80117dc:	1c42      	adds	r2, r0, #1
 80117de:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80117e2:	f003 fb6d 	bl	8014ec0 <uxr_object_id>
 80117e6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80117ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117ee:	6120      	str	r0, [r4, #16]
 80117f0:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80117f4:	6910      	ldr	r0, [r2, #16]
 80117f6:	2506      	movs	r5, #6
 80117f8:	9500      	str	r5, [sp, #0]
 80117fa:	6819      	ldr	r1, [r3, #0]
 80117fc:	6922      	ldr	r2, [r4, #16]
 80117fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011802:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011806:	f003 f971 	bl	8014aec <uxr_buffer_create_publisher_bin>
 801180a:	4602      	mov	r2, r0
 801180c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011810:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011814:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011818:	f000 fda8 	bl	801236c <run_xrce_session>
 801181c:	b3b0      	cbz	r0, 801188c <rmw_create_publisher+0x190>
 801181e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011826:	2105      	movs	r1, #5
 8011828:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801182c:	1c42      	adds	r2, r0, #1
 801182e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8011832:	f003 fb45 	bl	8014ec0 <uxr_object_id>
 8011836:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801183a:	6160      	str	r0, [r4, #20]
 801183c:	4631      	mov	r1, r6
 801183e:	af04      	add	r7, sp, #16
 8011840:	691e      	ldr	r6, [r3, #16]
 8011842:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011846:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801184a:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 801184e:	4638      	mov	r0, r7
 8011850:	f000 fdac 	bl	80123ac <convert_qos_profile>
 8011854:	9503      	str	r5, [sp, #12]
 8011856:	e897 0003 	ldmia.w	r7, {r0, r1}
 801185a:	9001      	str	r0, [sp, #4]
 801185c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011860:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011864:	9300      	str	r3, [sp, #0]
 8011866:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801186a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801186e:	f8da 1000 	ldr.w	r1, [sl]
 8011872:	4630      	mov	r0, r6
 8011874:	f003 f998 	bl	8014ba8 <uxr_buffer_create_datawriter_bin>
 8011878:	4602      	mov	r2, r0
 801187a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801187e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011882:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011886:	f000 fd71 	bl	801236c <run_xrce_session>
 801188a:	b940      	cbnz	r0, 801189e <rmw_create_publisher+0x1a2>
 801188c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801188e:	b108      	cbz	r0, 8011894 <rmw_create_publisher+0x198>
 8011890:	f000 fc62 	bl	8012158 <rmw_uxrce_fini_topic_memory>
 8011894:	4640      	mov	r0, r8
 8011896:	f000 fc07 	bl	80120a8 <rmw_uxrce_fini_publisher_memory>
 801189a:	f04f 0800 	mov.w	r8, #0
 801189e:	4640      	mov	r0, r8
 80118a0:	b007      	add	sp, #28
 80118a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a6:	bf00      	nop
 80118a8:	20018868 	.word	0x20018868
 80118ac:	08020a78 	.word	0x08020a78
 80118b0:	08020428 	.word	0x08020428

080118b4 <rmw_publisher_get_actual_qos>:
 80118b4:	b508      	push	{r3, lr}
 80118b6:	4603      	mov	r3, r0
 80118b8:	b140      	cbz	r0, 80118cc <rmw_publisher_get_actual_qos+0x18>
 80118ba:	4608      	mov	r0, r1
 80118bc:	b131      	cbz	r1, 80118cc <rmw_publisher_get_actual_qos+0x18>
 80118be:	6859      	ldr	r1, [r3, #4]
 80118c0:	2250      	movs	r2, #80	@ 0x50
 80118c2:	3128      	adds	r1, #40	@ 0x28
 80118c4:	f00c fb3d 	bl	801df42 <memcpy>
 80118c8:	2000      	movs	r0, #0
 80118ca:	bd08      	pop	{r3, pc}
 80118cc:	200b      	movs	r0, #11
 80118ce:	bd08      	pop	{r3, pc}

080118d0 <rmw_destroy_publisher>:
 80118d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118d4:	b128      	cbz	r0, 80118e2 <rmw_destroy_publisher+0x12>
 80118d6:	4604      	mov	r4, r0
 80118d8:	6800      	ldr	r0, [r0, #0]
 80118da:	460d      	mov	r5, r1
 80118dc:	f000 fdcc 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 80118e0:	b918      	cbnz	r0, 80118ea <rmw_destroy_publisher+0x1a>
 80118e2:	2401      	movs	r4, #1
 80118e4:	4620      	mov	r0, r4
 80118e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ea:	6863      	ldr	r3, [r4, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d0f8      	beq.n	80118e2 <rmw_destroy_publisher+0x12>
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	d0f6      	beq.n	80118e2 <rmw_destroy_publisher+0x12>
 80118f4:	6828      	ldr	r0, [r5, #0]
 80118f6:	f000 fdbf 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d0f1      	beq.n	80118e2 <rmw_destroy_publisher+0x12>
 80118fe:	686c      	ldr	r4, [r5, #4]
 8011900:	2c00      	cmp	r4, #0
 8011902:	d0ee      	beq.n	80118e2 <rmw_destroy_publisher+0x12>
 8011904:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011906:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 801190a:	f009 fdf1 	bl	801b4f0 <destroy_topic>
 801190e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011912:	6962      	ldr	r2, [r4, #20]
 8011914:	6918      	ldr	r0, [r3, #16]
 8011916:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801191a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801191e:	6819      	ldr	r1, [r3, #0]
 8011920:	f003 f834 	bl	801498c <uxr_buffer_delete_entity>
 8011924:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011928:	6922      	ldr	r2, [r4, #16]
 801192a:	4680      	mov	r8, r0
 801192c:	6918      	ldr	r0, [r3, #16]
 801192e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011932:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011936:	6819      	ldr	r1, [r3, #0]
 8011938:	f003 f828 	bl	801498c <uxr_buffer_delete_entity>
 801193c:	4606      	mov	r6, r0
 801193e:	6938      	ldr	r0, [r7, #16]
 8011940:	4642      	mov	r2, r8
 8011942:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011946:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801194a:	f000 fd0f 	bl	801236c <run_xrce_session>
 801194e:	4604      	mov	r4, r0
 8011950:	6938      	ldr	r0, [r7, #16]
 8011952:	4632      	mov	r2, r6
 8011954:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011958:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801195c:	f000 fd06 	bl	801236c <run_xrce_session>
 8011960:	4004      	ands	r4, r0
 8011962:	f084 0401 	eor.w	r4, r4, #1
 8011966:	b2e4      	uxtb	r4, r4
 8011968:	4628      	mov	r0, r5
 801196a:	0064      	lsls	r4, r4, #1
 801196c:	f000 fb9c 	bl	80120a8 <rmw_uxrce_fini_publisher_memory>
 8011970:	e7b8      	b.n	80118e4 <rmw_destroy_publisher+0x14>
 8011972:	bf00      	nop

08011974 <rmw_destroy_service>:
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	b128      	cbz	r0, 8011984 <rmw_destroy_service+0x10>
 8011978:	4604      	mov	r4, r0
 801197a:	6800      	ldr	r0, [r0, #0]
 801197c:	460d      	mov	r5, r1
 801197e:	f000 fd7b 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 8011982:	b910      	cbnz	r0, 801198a <rmw_destroy_service+0x16>
 8011984:	2401      	movs	r4, #1
 8011986:	4620      	mov	r0, r4
 8011988:	bd70      	pop	{r4, r5, r6, pc}
 801198a:	6863      	ldr	r3, [r4, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d0f9      	beq.n	8011984 <rmw_destroy_service+0x10>
 8011990:	2d00      	cmp	r5, #0
 8011992:	d0f7      	beq.n	8011984 <rmw_destroy_service+0x10>
 8011994:	6828      	ldr	r0, [r5, #0]
 8011996:	f000 fd6f 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 801199a:	2800      	cmp	r0, #0
 801199c:	d0f2      	beq.n	8011984 <rmw_destroy_service+0x10>
 801199e:	686e      	ldr	r6, [r5, #4]
 80119a0:	2e00      	cmp	r6, #0
 80119a2:	d0ef      	beq.n	8011984 <rmw_destroy_service+0x10>
 80119a4:	6864      	ldr	r4, [r4, #4]
 80119a6:	6932      	ldr	r2, [r6, #16]
 80119a8:	6920      	ldr	r0, [r4, #16]
 80119aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119b2:	6819      	ldr	r1, [r3, #0]
 80119b4:	f003 faea 	bl	8014f8c <uxr_buffer_cancel_data>
 80119b8:	4602      	mov	r2, r0
 80119ba:	6920      	ldr	r0, [r4, #16]
 80119bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80119c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80119c4:	f000 fcd2 	bl	801236c <run_xrce_session>
 80119c8:	6920      	ldr	r0, [r4, #16]
 80119ca:	6932      	ldr	r2, [r6, #16]
 80119cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119d4:	6819      	ldr	r1, [r3, #0]
 80119d6:	f002 ffd9 	bl	801498c <uxr_buffer_delete_entity>
 80119da:	4602      	mov	r2, r0
 80119dc:	6920      	ldr	r0, [r4, #16]
 80119de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80119e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80119e6:	f000 fcc1 	bl	801236c <run_xrce_session>
 80119ea:	f080 0401 	eor.w	r4, r0, #1
 80119ee:	b2e4      	uxtb	r4, r4
 80119f0:	4628      	mov	r0, r5
 80119f2:	0064      	lsls	r4, r4, #1
 80119f4:	f000 fb84 	bl	8012100 <rmw_uxrce_fini_service_memory>
 80119f8:	e7c5      	b.n	8011986 <rmw_destroy_service+0x12>
 80119fa:	bf00      	nop

080119fc <rmw_create_subscription>:
 80119fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a00:	b08d      	sub	sp, #52	@ 0x34
 8011a02:	2800      	cmp	r0, #0
 8011a04:	f000 80d1 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a08:	460f      	mov	r7, r1
 8011a0a:	2900      	cmp	r1, #0
 8011a0c:	f000 80cd 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a10:	4604      	mov	r4, r0
 8011a12:	6800      	ldr	r0, [r0, #0]
 8011a14:	4615      	mov	r5, r2
 8011a16:	461e      	mov	r6, r3
 8011a18:	f000 fd2e 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	f000 80c4 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a22:	2d00      	cmp	r5, #0
 8011a24:	f000 80c1 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a28:	782b      	ldrb	r3, [r5, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f000 80bd 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a30:	2e00      	cmp	r6, #0
 8011a32:	f000 80ba 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a36:	485e      	ldr	r0, [pc, #376]	@ (8011bb0 <rmw_create_subscription+0x1b4>)
 8011a38:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011a3c:	f009 fc50 	bl	801b2e0 <get_memory>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	f000 80b2 	beq.w	8011baa <rmw_create_subscription+0x1ae>
 8011a46:	6884      	ldr	r4, [r0, #8]
 8011a48:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8011a4c:	f009 fcce 	bl	801b3ec <rmw_get_implementation_identifier>
 8011a50:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8011a54:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8011a56:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f7ee fc40 	bl	80002e0 <strlen>
 8011a60:	3001      	adds	r0, #1
 8011a62:	283c      	cmp	r0, #60	@ 0x3c
 8011a64:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8011a68:	f200 8098 	bhi.w	8011b9c <rmw_create_subscription+0x1a0>
 8011a6c:	4a51      	ldr	r2, [pc, #324]	@ (8011bb4 <rmw_create_subscription+0x1b8>)
 8011a6e:	462b      	mov	r3, r5
 8011a70:	213c      	movs	r1, #60	@ 0x3c
 8011a72:	4650      	mov	r0, sl
 8011a74:	f00b ffc6 	bl	801da04 <sniprintf>
 8011a78:	4631      	mov	r1, r6
 8011a7a:	f8c4 9020 	str.w	r9, [r4, #32]
 8011a7e:	2250      	movs	r2, #80	@ 0x50
 8011a80:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011a84:	f00c fa5d 	bl	801df42 <memcpy>
 8011a88:	494b      	ldr	r1, [pc, #300]	@ (8011bb8 <rmw_create_subscription+0x1bc>)
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	f000 fd02 	bl	8012494 <get_message_typesupport_handle>
 8011a90:	2800      	cmp	r0, #0
 8011a92:	f000 8083 	beq.w	8011b9c <rmw_create_subscription+0x1a0>
 8011a96:	6842      	ldr	r2, [r0, #4]
 8011a98:	61a2      	str	r2, [r4, #24]
 8011a9a:	2a00      	cmp	r2, #0
 8011a9c:	d07e      	beq.n	8011b9c <rmw_create_subscription+0x1a0>
 8011a9e:	4629      	mov	r1, r5
 8011aa0:	4633      	mov	r3, r6
 8011aa2:	4648      	mov	r0, r9
 8011aa4:	f009 fcd0 	bl	801b448 <create_topic>
 8011aa8:	61e0      	str	r0, [r4, #28]
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	d07a      	beq.n	8011ba4 <rmw_create_subscription+0x1a8>
 8011aae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011ab6:	2104      	movs	r1, #4
 8011ab8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8011abc:	1c42      	adds	r2, r0, #1
 8011abe:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011ac2:	f003 f9fd 	bl	8014ec0 <uxr_object_id>
 8011ac6:	6120      	str	r0, [r4, #16]
 8011ac8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011acc:	2506      	movs	r5, #6
 8011ace:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011ad2:	9500      	str	r5, [sp, #0]
 8011ad4:	6819      	ldr	r1, [r3, #0]
 8011ad6:	6922      	ldr	r2, [r4, #16]
 8011ad8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011adc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ae0:	f003 f832 	bl	8014b48 <uxr_buffer_create_subscriber_bin>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011aea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011aee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011af2:	f000 fc3b 	bl	801236c <run_xrce_session>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d050      	beq.n	8011b9c <rmw_create_subscription+0x1a0>
 8011afa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011b02:	4629      	mov	r1, r5
 8011b04:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011b08:	1c42      	adds	r2, r0, #1
 8011b0a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8011b0e:	f003 f9d7 	bl	8014ec0 <uxr_object_id>
 8011b12:	af08      	add	r7, sp, #32
 8011b14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011b18:	69e3      	ldr	r3, [r4, #28]
 8011b1a:	6160      	str	r0, [r4, #20]
 8011b1c:	4631      	mov	r1, r6
 8011b1e:	4638      	mov	r0, r7
 8011b20:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011b24:	9305      	str	r3, [sp, #20]
 8011b26:	f000 fc41 	bl	80123ac <convert_qos_profile>
 8011b2a:	9503      	str	r5, [sp, #12]
 8011b2c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011b30:	9b05      	ldr	r3, [sp, #20]
 8011b32:	9001      	str	r0, [sp, #4]
 8011b34:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011b38:	691b      	ldr	r3, [r3, #16]
 8011b3a:	9300      	str	r3, [sp, #0]
 8011b3c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011b40:	f8db 1000 	ldr.w	r1, [fp]
 8011b44:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8011b48:	f003 f892 	bl	8014c70 <uxr_buffer_create_datareader_bin>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011b52:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011b56:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011b5a:	f000 fc07 	bl	801236c <run_xrce_session>
 8011b5e:	b1e8      	cbz	r0, 8011b9c <rmw_create_subscription+0x1a0>
 8011b60:	7a33      	ldrb	r3, [r6, #8]
 8011b62:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011b66:	2b02      	cmp	r3, #2
 8011b68:	bf0c      	ite	eq
 8011b6a:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8011b6e:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8011b72:	9307      	str	r3, [sp, #28]
 8011b74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011b78:	2200      	movs	r2, #0
 8011b7a:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8011b7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011b80:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	6962      	ldr	r2, [r4, #20]
 8011b88:	9b07      	ldr	r3, [sp, #28]
 8011b8a:	6809      	ldr	r1, [r1, #0]
 8011b8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011b90:	f003 f9c4 	bl	8014f1c <uxr_buffer_request_data>
 8011b94:	4640      	mov	r0, r8
 8011b96:	b00d      	add	sp, #52	@ 0x34
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	69e0      	ldr	r0, [r4, #28]
 8011b9e:	b108      	cbz	r0, 8011ba4 <rmw_create_subscription+0x1a8>
 8011ba0:	f000 fada 	bl	8012158 <rmw_uxrce_fini_topic_memory>
 8011ba4:	4640      	mov	r0, r8
 8011ba6:	f000 fa95 	bl	80120d4 <rmw_uxrce_fini_subscription_memory>
 8011baa:	f04f 0800 	mov.w	r8, #0
 8011bae:	e7f1      	b.n	8011b94 <rmw_create_subscription+0x198>
 8011bb0:	20017fe8 	.word	0x20017fe8
 8011bb4:	08020a78 	.word	0x08020a78
 8011bb8:	08020428 	.word	0x08020428

08011bbc <rmw_subscription_get_actual_qos>:
 8011bbc:	b508      	push	{r3, lr}
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	b140      	cbz	r0, 8011bd4 <rmw_subscription_get_actual_qos+0x18>
 8011bc2:	4608      	mov	r0, r1
 8011bc4:	b131      	cbz	r1, 8011bd4 <rmw_subscription_get_actual_qos+0x18>
 8011bc6:	6859      	ldr	r1, [r3, #4]
 8011bc8:	2250      	movs	r2, #80	@ 0x50
 8011bca:	3128      	adds	r1, #40	@ 0x28
 8011bcc:	f00c f9b9 	bl	801df42 <memcpy>
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	bd08      	pop	{r3, pc}
 8011bd4:	200b      	movs	r0, #11
 8011bd6:	bd08      	pop	{r3, pc}

08011bd8 <rmw_destroy_subscription>:
 8011bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bdc:	b128      	cbz	r0, 8011bea <rmw_destroy_subscription+0x12>
 8011bde:	4604      	mov	r4, r0
 8011be0:	6800      	ldr	r0, [r0, #0]
 8011be2:	460d      	mov	r5, r1
 8011be4:	f000 fc48 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 8011be8:	b918      	cbnz	r0, 8011bf2 <rmw_destroy_subscription+0x1a>
 8011bea:	2401      	movs	r4, #1
 8011bec:	4620      	mov	r0, r4
 8011bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf2:	6863      	ldr	r3, [r4, #4]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d0f8      	beq.n	8011bea <rmw_destroy_subscription+0x12>
 8011bf8:	2d00      	cmp	r5, #0
 8011bfa:	d0f6      	beq.n	8011bea <rmw_destroy_subscription+0x12>
 8011bfc:	6828      	ldr	r0, [r5, #0]
 8011bfe:	f000 fc3b 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d0f1      	beq.n	8011bea <rmw_destroy_subscription+0x12>
 8011c06:	686c      	ldr	r4, [r5, #4]
 8011c08:	2c00      	cmp	r4, #0
 8011c0a:	d0ee      	beq.n	8011bea <rmw_destroy_subscription+0x12>
 8011c0c:	6a26      	ldr	r6, [r4, #32]
 8011c0e:	6962      	ldr	r2, [r4, #20]
 8011c10:	6930      	ldr	r0, [r6, #16]
 8011c12:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011c16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c1a:	6819      	ldr	r1, [r3, #0]
 8011c1c:	f003 f9b6 	bl	8014f8c <uxr_buffer_cancel_data>
 8011c20:	4602      	mov	r2, r0
 8011c22:	6930      	ldr	r0, [r6, #16]
 8011c24:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011c28:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011c2c:	f000 fb9e 	bl	801236c <run_xrce_session>
 8011c30:	69e0      	ldr	r0, [r4, #28]
 8011c32:	f009 fc5d 	bl	801b4f0 <destroy_topic>
 8011c36:	6a23      	ldr	r3, [r4, #32]
 8011c38:	6962      	ldr	r2, [r4, #20]
 8011c3a:	6918      	ldr	r0, [r3, #16]
 8011c3c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011c40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c44:	6819      	ldr	r1, [r3, #0]
 8011c46:	f002 fea1 	bl	801498c <uxr_buffer_delete_entity>
 8011c4a:	6a23      	ldr	r3, [r4, #32]
 8011c4c:	6922      	ldr	r2, [r4, #16]
 8011c4e:	4680      	mov	r8, r0
 8011c50:	6918      	ldr	r0, [r3, #16]
 8011c52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011c56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c5a:	6819      	ldr	r1, [r3, #0]
 8011c5c:	f002 fe96 	bl	801498c <uxr_buffer_delete_entity>
 8011c60:	4607      	mov	r7, r0
 8011c62:	6930      	ldr	r0, [r6, #16]
 8011c64:	4642      	mov	r2, r8
 8011c66:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011c6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011c6e:	f000 fb7d 	bl	801236c <run_xrce_session>
 8011c72:	4604      	mov	r4, r0
 8011c74:	6930      	ldr	r0, [r6, #16]
 8011c76:	463a      	mov	r2, r7
 8011c78:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011c7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011c80:	f000 fb74 	bl	801236c <run_xrce_session>
 8011c84:	4004      	ands	r4, r0
 8011c86:	f084 0401 	eor.w	r4, r4, #1
 8011c8a:	b2e4      	uxtb	r4, r4
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	0064      	lsls	r4, r4, #1
 8011c90:	f000 fa20 	bl	80120d4 <rmw_uxrce_fini_subscription_memory>
 8011c94:	e7aa      	b.n	8011bec <rmw_destroy_subscription+0x14>
 8011c96:	bf00      	nop

08011c98 <rmw_take_with_info>:
 8011c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	6800      	ldr	r0, [r0, #0]
 8011c9e:	b089      	sub	sp, #36	@ 0x24
 8011ca0:	460f      	mov	r7, r1
 8011ca2:	4615      	mov	r5, r2
 8011ca4:	b128      	cbz	r0, 8011cb2 <rmw_take_with_info+0x1a>
 8011ca6:	4b23      	ldr	r3, [pc, #140]	@ (8011d34 <rmw_take_with_info+0x9c>)
 8011ca8:	6819      	ldr	r1, [r3, #0]
 8011caa:	f7ee fab9 	bl	8000220 <strcmp>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	d13d      	bne.n	8011d2e <rmw_take_with_info+0x96>
 8011cb2:	6864      	ldr	r4, [r4, #4]
 8011cb4:	b1fd      	cbz	r5, 8011cf6 <rmw_take_with_info+0x5e>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	702b      	strb	r3, [r5, #0]
 8011cba:	f000 fad9 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f000 faae 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011cc4:	4606      	mov	r6, r0
 8011cc6:	b1e8      	cbz	r0, 8011d04 <rmw_take_with_info+0x6c>
 8011cc8:	6881      	ldr	r1, [r0, #8]
 8011cca:	4668      	mov	r0, sp
 8011ccc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011cd0:	3110      	adds	r1, #16
 8011cd2:	f7fc fc1f 	bl	800e514 <ucdr_init_buffer>
 8011cd6:	69a3      	ldr	r3, [r4, #24]
 8011cd8:	4639      	mov	r1, r7
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	4668      	mov	r0, sp
 8011cde:	4798      	blx	r3
 8011ce0:	4631      	mov	r1, r6
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	4814      	ldr	r0, [pc, #80]	@ (8011d38 <rmw_take_with_info+0xa0>)
 8011ce6:	f009 fb0b 	bl	801b300 <put_memory>
 8011cea:	702c      	strb	r4, [r5, #0]
 8011cec:	f084 0001 	eor.w	r0, r4, #1
 8011cf0:	b2c0      	uxtb	r0, r0
 8011cf2:	b009      	add	sp, #36	@ 0x24
 8011cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cf6:	f000 fabb 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f000 fa90 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011d00:	4605      	mov	r5, r0
 8011d02:	b910      	cbnz	r0, 8011d0a <rmw_take_with_info+0x72>
 8011d04:	2001      	movs	r0, #1
 8011d06:	b009      	add	sp, #36	@ 0x24
 8011d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d0a:	68a9      	ldr	r1, [r5, #8]
 8011d0c:	4668      	mov	r0, sp
 8011d0e:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011d12:	3110      	adds	r1, #16
 8011d14:	f7fc fbfe 	bl	800e514 <ucdr_init_buffer>
 8011d18:	69a3      	ldr	r3, [r4, #24]
 8011d1a:	4639      	mov	r1, r7
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	4668      	mov	r0, sp
 8011d20:	4798      	blx	r3
 8011d22:	4629      	mov	r1, r5
 8011d24:	4604      	mov	r4, r0
 8011d26:	4804      	ldr	r0, [pc, #16]	@ (8011d38 <rmw_take_with_info+0xa0>)
 8011d28:	f009 faea 	bl	801b300 <put_memory>
 8011d2c:	e7de      	b.n	8011cec <rmw_take_with_info+0x54>
 8011d2e:	200c      	movs	r0, #12
 8011d30:	b009      	add	sp, #36	@ 0x24
 8011d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d34:	0802124c 	.word	0x0802124c
 8011d38:	20017838 	.word	0x20017838

08011d3c <rmw_uxrce_transport_init>:
 8011d3c:	b508      	push	{r3, lr}
 8011d3e:	b108      	cbz	r0, 8011d44 <rmw_uxrce_transport_init+0x8>
 8011d40:	f100 0210 	add.w	r2, r0, #16
 8011d44:	b139      	cbz	r1, 8011d56 <rmw_uxrce_transport_init+0x1a>
 8011d46:	6949      	ldr	r1, [r1, #20]
 8011d48:	4610      	mov	r0, r2
 8011d4a:	f003 f881 	bl	8014e50 <uxr_init_custom_transport>
 8011d4e:	f080 0001 	eor.w	r0, r0, #1
 8011d52:	b2c0      	uxtb	r0, r0
 8011d54:	bd08      	pop	{r3, pc}
 8011d56:	4b04      	ldr	r3, [pc, #16]	@ (8011d68 <rmw_uxrce_transport_init+0x2c>)
 8011d58:	4610      	mov	r0, r2
 8011d5a:	6859      	ldr	r1, [r3, #4]
 8011d5c:	f003 f878 	bl	8014e50 <uxr_init_custom_transport>
 8011d60:	f080 0001 	eor.w	r0, r0, #1
 8011d64:	b2c0      	uxtb	r0, r0
 8011d66:	bd08      	pop	{r3, pc}
 8011d68:	20015538 	.word	0x20015538

08011d6c <rmw_uros_epoch_nanos>:
 8011d6c:	4b05      	ldr	r3, [pc, #20]	@ (8011d84 <rmw_uros_epoch_nanos+0x18>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	b123      	cbz	r3, 8011d7c <rmw_uros_epoch_nanos+0x10>
 8011d72:	6898      	ldr	r0, [r3, #8]
 8011d74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d78:	f003 bafc 	b.w	8015374 <uxr_epoch_nanos>
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	2100      	movs	r1, #0
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	20019ed8 	.word	0x20019ed8

08011d88 <rmw_uros_sync_session>:
 8011d88:	b508      	push	{r3, lr}
 8011d8a:	4b07      	ldr	r3, [pc, #28]	@ (8011da8 <rmw_uros_sync_session+0x20>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	b14b      	cbz	r3, 8011da4 <rmw_uros_sync_session+0x1c>
 8011d90:	4601      	mov	r1, r0
 8011d92:	6898      	ldr	r0, [r3, #8]
 8011d94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d98:	f003 ff0a 	bl	8015bb0 <uxr_sync_session>
 8011d9c:	f080 0001 	eor.w	r0, r0, #1
 8011da0:	b2c0      	uxtb	r0, r0
 8011da2:	bd08      	pop	{r3, pc}
 8011da4:	2001      	movs	r0, #1
 8011da6:	bd08      	pop	{r3, pc}
 8011da8:	20019ed8 	.word	0x20019ed8

08011dac <rmw_uxrce_init_service_memory>:
 8011dac:	b1e2      	cbz	r2, 8011de8 <rmw_uxrce_init_service_memory+0x3c>
 8011dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db2:	7b05      	ldrb	r5, [r0, #12]
 8011db4:	4606      	mov	r6, r0
 8011db6:	b9ad      	cbnz	r5, 8011de4 <rmw_uxrce_init_service_memory+0x38>
 8011db8:	23c8      	movs	r3, #200	@ 0xc8
 8011dba:	e9c0 5500 	strd	r5, r5, [r0]
 8011dbe:	6083      	str	r3, [r0, #8]
 8011dc0:	f240 1301 	movw	r3, #257	@ 0x101
 8011dc4:	4617      	mov	r7, r2
 8011dc6:	8183      	strh	r3, [r0, #12]
 8011dc8:	460c      	mov	r4, r1
 8011dca:	46a8      	mov	r8, r5
 8011dcc:	4621      	mov	r1, r4
 8011dce:	4630      	mov	r0, r6
 8011dd0:	3501      	adds	r5, #1
 8011dd2:	f009 fa95 	bl	801b300 <put_memory>
 8011dd6:	42af      	cmp	r7, r5
 8011dd8:	60a4      	str	r4, [r4, #8]
 8011dda:	f884 800c 	strb.w	r8, [r4, #12]
 8011dde:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011de2:	d1f3      	bne.n	8011dcc <rmw_uxrce_init_service_memory+0x20>
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	4770      	bx	lr
 8011dea:	bf00      	nop

08011dec <rmw_uxrce_init_client_memory>:
 8011dec:	b1e2      	cbz	r2, 8011e28 <rmw_uxrce_init_client_memory+0x3c>
 8011dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df2:	7b05      	ldrb	r5, [r0, #12]
 8011df4:	4606      	mov	r6, r0
 8011df6:	b9ad      	cbnz	r5, 8011e24 <rmw_uxrce_init_client_memory+0x38>
 8011df8:	23c8      	movs	r3, #200	@ 0xc8
 8011dfa:	e9c0 5500 	strd	r5, r5, [r0]
 8011dfe:	6083      	str	r3, [r0, #8]
 8011e00:	f240 1301 	movw	r3, #257	@ 0x101
 8011e04:	4617      	mov	r7, r2
 8011e06:	8183      	strh	r3, [r0, #12]
 8011e08:	460c      	mov	r4, r1
 8011e0a:	46a8      	mov	r8, r5
 8011e0c:	4621      	mov	r1, r4
 8011e0e:	4630      	mov	r0, r6
 8011e10:	3501      	adds	r5, #1
 8011e12:	f009 fa75 	bl	801b300 <put_memory>
 8011e16:	42af      	cmp	r7, r5
 8011e18:	60a4      	str	r4, [r4, #8]
 8011e1a:	f884 800c 	strb.w	r8, [r4, #12]
 8011e1e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011e22:	d1f3      	bne.n	8011e0c <rmw_uxrce_init_client_memory+0x20>
 8011e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop

08011e2c <rmw_uxrce_init_publisher_memory>:
 8011e2c:	b1e2      	cbz	r2, 8011e68 <rmw_uxrce_init_publisher_memory+0x3c>
 8011e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e32:	7b05      	ldrb	r5, [r0, #12]
 8011e34:	4606      	mov	r6, r0
 8011e36:	b9ad      	cbnz	r5, 8011e64 <rmw_uxrce_init_publisher_memory+0x38>
 8011e38:	23d8      	movs	r3, #216	@ 0xd8
 8011e3a:	e9c0 5500 	strd	r5, r5, [r0]
 8011e3e:	6083      	str	r3, [r0, #8]
 8011e40:	f240 1301 	movw	r3, #257	@ 0x101
 8011e44:	4617      	mov	r7, r2
 8011e46:	8183      	strh	r3, [r0, #12]
 8011e48:	460c      	mov	r4, r1
 8011e4a:	46a8      	mov	r8, r5
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	4630      	mov	r0, r6
 8011e50:	3501      	adds	r5, #1
 8011e52:	f009 fa55 	bl	801b300 <put_memory>
 8011e56:	42af      	cmp	r7, r5
 8011e58:	60a4      	str	r4, [r4, #8]
 8011e5a:	f884 800c 	strb.w	r8, [r4, #12]
 8011e5e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011e62:	d1f3      	bne.n	8011e4c <rmw_uxrce_init_publisher_memory+0x20>
 8011e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop

08011e6c <rmw_uxrce_init_subscription_memory>:
 8011e6c:	b1e2      	cbz	r2, 8011ea8 <rmw_uxrce_init_subscription_memory+0x3c>
 8011e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e72:	7b05      	ldrb	r5, [r0, #12]
 8011e74:	4606      	mov	r6, r0
 8011e76:	b9ad      	cbnz	r5, 8011ea4 <rmw_uxrce_init_subscription_memory+0x38>
 8011e78:	23d8      	movs	r3, #216	@ 0xd8
 8011e7a:	e9c0 5500 	strd	r5, r5, [r0]
 8011e7e:	6083      	str	r3, [r0, #8]
 8011e80:	f240 1301 	movw	r3, #257	@ 0x101
 8011e84:	4617      	mov	r7, r2
 8011e86:	8183      	strh	r3, [r0, #12]
 8011e88:	460c      	mov	r4, r1
 8011e8a:	46a8      	mov	r8, r5
 8011e8c:	4621      	mov	r1, r4
 8011e8e:	4630      	mov	r0, r6
 8011e90:	3501      	adds	r5, #1
 8011e92:	f009 fa35 	bl	801b300 <put_memory>
 8011e96:	42af      	cmp	r7, r5
 8011e98:	60a4      	str	r4, [r4, #8]
 8011e9a:	f884 800c 	strb.w	r8, [r4, #12]
 8011e9e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011ea2:	d1f3      	bne.n	8011e8c <rmw_uxrce_init_subscription_memory+0x20>
 8011ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop

08011eac <rmw_uxrce_init_node_memory>:
 8011eac:	b1e2      	cbz	r2, 8011ee8 <rmw_uxrce_init_node_memory+0x3c>
 8011eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb2:	7b05      	ldrb	r5, [r0, #12]
 8011eb4:	4606      	mov	r6, r0
 8011eb6:	b9ad      	cbnz	r5, 8011ee4 <rmw_uxrce_init_node_memory+0x38>
 8011eb8:	23a4      	movs	r3, #164	@ 0xa4
 8011eba:	e9c0 5500 	strd	r5, r5, [r0]
 8011ebe:	6083      	str	r3, [r0, #8]
 8011ec0:	f240 1301 	movw	r3, #257	@ 0x101
 8011ec4:	4617      	mov	r7, r2
 8011ec6:	8183      	strh	r3, [r0, #12]
 8011ec8:	460c      	mov	r4, r1
 8011eca:	46a8      	mov	r8, r5
 8011ecc:	4621      	mov	r1, r4
 8011ece:	4630      	mov	r0, r6
 8011ed0:	3501      	adds	r5, #1
 8011ed2:	f009 fa15 	bl	801b300 <put_memory>
 8011ed6:	42af      	cmp	r7, r5
 8011ed8:	60a4      	str	r4, [r4, #8]
 8011eda:	f884 800c 	strb.w	r8, [r4, #12]
 8011ede:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011ee2:	d1f3      	bne.n	8011ecc <rmw_uxrce_init_node_memory+0x20>
 8011ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop

08011eec <rmw_uxrce_init_session_memory>:
 8011eec:	b1ea      	cbz	r2, 8011f2a <rmw_uxrce_init_session_memory+0x3e>
 8011eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ef2:	7b05      	ldrb	r5, [r0, #12]
 8011ef4:	4606      	mov	r6, r0
 8011ef6:	b9b5      	cbnz	r5, 8011f26 <rmw_uxrce_init_session_memory+0x3a>
 8011ef8:	e9c0 5500 	strd	r5, r5, [r0]
 8011efc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011f00:	f240 1301 	movw	r3, #257	@ 0x101
 8011f04:	4617      	mov	r7, r2
 8011f06:	f8c0 8008 	str.w	r8, [r0, #8]
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	8183      	strh	r3, [r0, #12]
 8011f0e:	46a9      	mov	r9, r5
 8011f10:	4621      	mov	r1, r4
 8011f12:	4630      	mov	r0, r6
 8011f14:	3501      	adds	r5, #1
 8011f16:	f009 f9f3 	bl	801b300 <put_memory>
 8011f1a:	42af      	cmp	r7, r5
 8011f1c:	60a4      	str	r4, [r4, #8]
 8011f1e:	f884 900c 	strb.w	r9, [r4, #12]
 8011f22:	4444      	add	r4, r8
 8011f24:	d1f4      	bne.n	8011f10 <rmw_uxrce_init_session_memory+0x24>
 8011f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f2a:	4770      	bx	lr

08011f2c <rmw_uxrce_init_topic_memory>:
 8011f2c:	b1e2      	cbz	r2, 8011f68 <rmw_uxrce_init_topic_memory+0x3c>
 8011f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f32:	7b05      	ldrb	r5, [r0, #12]
 8011f34:	4606      	mov	r6, r0
 8011f36:	b9ad      	cbnz	r5, 8011f64 <rmw_uxrce_init_topic_memory+0x38>
 8011f38:	231c      	movs	r3, #28
 8011f3a:	e9c0 5500 	strd	r5, r5, [r0]
 8011f3e:	6083      	str	r3, [r0, #8]
 8011f40:	f240 1301 	movw	r3, #257	@ 0x101
 8011f44:	4617      	mov	r7, r2
 8011f46:	8183      	strh	r3, [r0, #12]
 8011f48:	460c      	mov	r4, r1
 8011f4a:	46a8      	mov	r8, r5
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	4630      	mov	r0, r6
 8011f50:	3501      	adds	r5, #1
 8011f52:	f009 f9d5 	bl	801b300 <put_memory>
 8011f56:	42af      	cmp	r7, r5
 8011f58:	60a4      	str	r4, [r4, #8]
 8011f5a:	f884 800c 	strb.w	r8, [r4, #12]
 8011f5e:	f104 041c 	add.w	r4, r4, #28
 8011f62:	d1f3      	bne.n	8011f4c <rmw_uxrce_init_topic_memory+0x20>
 8011f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop

08011f6c <rmw_uxrce_init_static_input_buffer_memory>:
 8011f6c:	b1ea      	cbz	r2, 8011faa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f72:	7b05      	ldrb	r5, [r0, #12]
 8011f74:	4606      	mov	r6, r0
 8011f76:	b9b5      	cbnz	r5, 8011fa6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011f78:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011f7c:	e9c0 5500 	strd	r5, r5, [r0]
 8011f80:	6083      	str	r3, [r0, #8]
 8011f82:	f240 1301 	movw	r3, #257	@ 0x101
 8011f86:	4617      	mov	r7, r2
 8011f88:	8183      	strh	r3, [r0, #12]
 8011f8a:	460c      	mov	r4, r1
 8011f8c:	46a8      	mov	r8, r5
 8011f8e:	4621      	mov	r1, r4
 8011f90:	4630      	mov	r0, r6
 8011f92:	3501      	adds	r5, #1
 8011f94:	f009 f9b4 	bl	801b300 <put_memory>
 8011f98:	42af      	cmp	r7, r5
 8011f9a:	60a4      	str	r4, [r4, #8]
 8011f9c:	f884 800c 	strb.w	r8, [r4, #12]
 8011fa0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011fa4:	d1f3      	bne.n	8011f8e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011faa:	4770      	bx	lr

08011fac <rmw_uxrce_init_init_options_impl_memory>:
 8011fac:	b1e2      	cbz	r2, 8011fe8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb2:	7b05      	ldrb	r5, [r0, #12]
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	b9ad      	cbnz	r5, 8011fe4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011fb8:	232c      	movs	r3, #44	@ 0x2c
 8011fba:	e9c0 5500 	strd	r5, r5, [r0]
 8011fbe:	6083      	str	r3, [r0, #8]
 8011fc0:	f240 1301 	movw	r3, #257	@ 0x101
 8011fc4:	4617      	mov	r7, r2
 8011fc6:	8183      	strh	r3, [r0, #12]
 8011fc8:	460c      	mov	r4, r1
 8011fca:	46a8      	mov	r8, r5
 8011fcc:	4621      	mov	r1, r4
 8011fce:	4630      	mov	r0, r6
 8011fd0:	3501      	adds	r5, #1
 8011fd2:	f009 f995 	bl	801b300 <put_memory>
 8011fd6:	42af      	cmp	r7, r5
 8011fd8:	60a4      	str	r4, [r4, #8]
 8011fda:	f884 800c 	strb.w	r8, [r4, #12]
 8011fde:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011fe2:	d1f3      	bne.n	8011fcc <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop

08011fec <rmw_uxrce_init_wait_set_memory>:
 8011fec:	b1e2      	cbz	r2, 8012028 <rmw_uxrce_init_wait_set_memory+0x3c>
 8011fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff2:	7b05      	ldrb	r5, [r0, #12]
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	b9ad      	cbnz	r5, 8012024 <rmw_uxrce_init_wait_set_memory+0x38>
 8011ff8:	231c      	movs	r3, #28
 8011ffa:	e9c0 5500 	strd	r5, r5, [r0]
 8011ffe:	6083      	str	r3, [r0, #8]
 8012000:	f240 1301 	movw	r3, #257	@ 0x101
 8012004:	4617      	mov	r7, r2
 8012006:	8183      	strh	r3, [r0, #12]
 8012008:	460c      	mov	r4, r1
 801200a:	46a8      	mov	r8, r5
 801200c:	4621      	mov	r1, r4
 801200e:	4630      	mov	r0, r6
 8012010:	3501      	adds	r5, #1
 8012012:	f009 f975 	bl	801b300 <put_memory>
 8012016:	42af      	cmp	r7, r5
 8012018:	60a4      	str	r4, [r4, #8]
 801201a:	f884 800c 	strb.w	r8, [r4, #12]
 801201e:	f104 041c 	add.w	r4, r4, #28
 8012022:	d1f3      	bne.n	801200c <rmw_uxrce_init_wait_set_memory+0x20>
 8012024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012028:	4770      	bx	lr
 801202a:	bf00      	nop

0801202c <rmw_uxrce_init_guard_condition_memory>:
 801202c:	b1e2      	cbz	r2, 8012068 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801202e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012032:	7b05      	ldrb	r5, [r0, #12]
 8012034:	4606      	mov	r6, r0
 8012036:	b9ad      	cbnz	r5, 8012064 <rmw_uxrce_init_guard_condition_memory+0x38>
 8012038:	2320      	movs	r3, #32
 801203a:	e9c0 5500 	strd	r5, r5, [r0]
 801203e:	6083      	str	r3, [r0, #8]
 8012040:	f240 1301 	movw	r3, #257	@ 0x101
 8012044:	4617      	mov	r7, r2
 8012046:	8183      	strh	r3, [r0, #12]
 8012048:	460c      	mov	r4, r1
 801204a:	46a8      	mov	r8, r5
 801204c:	4621      	mov	r1, r4
 801204e:	4630      	mov	r0, r6
 8012050:	3501      	adds	r5, #1
 8012052:	f009 f955 	bl	801b300 <put_memory>
 8012056:	42af      	cmp	r7, r5
 8012058:	60a4      	str	r4, [r4, #8]
 801205a:	f884 800c 	strb.w	r8, [r4, #12]
 801205e:	f104 0420 	add.w	r4, r4, #32
 8012062:	d1f3      	bne.n	801204c <rmw_uxrce_init_guard_condition_memory+0x20>
 8012064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop

0801206c <rmw_uxrce_fini_session_memory>:
 801206c:	4601      	mov	r1, r0
 801206e:	4801      	ldr	r0, [pc, #4]	@ (8012074 <rmw_uxrce_fini_session_memory+0x8>)
 8012070:	f009 b946 	b.w	801b300 <put_memory>
 8012074:	20019ed8 	.word	0x20019ed8

08012078 <rmw_uxrce_fini_node_memory>:
 8012078:	b538      	push	{r3, r4, r5, lr}
 801207a:	4604      	mov	r4, r0
 801207c:	6800      	ldr	r0, [r0, #0]
 801207e:	b128      	cbz	r0, 801208c <rmw_uxrce_fini_node_memory+0x14>
 8012080:	4b07      	ldr	r3, [pc, #28]	@ (80120a0 <rmw_uxrce_fini_node_memory+0x28>)
 8012082:	6819      	ldr	r1, [r3, #0]
 8012084:	f7ee f8cc 	bl	8000220 <strcmp>
 8012088:	b940      	cbnz	r0, 801209c <rmw_uxrce_fini_node_memory+0x24>
 801208a:	6020      	str	r0, [r4, #0]
 801208c:	6861      	ldr	r1, [r4, #4]
 801208e:	b129      	cbz	r1, 801209c <rmw_uxrce_fini_node_memory+0x24>
 8012090:	2500      	movs	r5, #0
 8012092:	4804      	ldr	r0, [pc, #16]	@ (80120a4 <rmw_uxrce_fini_node_memory+0x2c>)
 8012094:	610d      	str	r5, [r1, #16]
 8012096:	f009 f933 	bl	801b300 <put_memory>
 801209a:	6065      	str	r5, [r4, #4]
 801209c:	bd38      	pop	{r3, r4, r5, pc}
 801209e:	bf00      	nop
 80120a0:	0802124c 	.word	0x0802124c
 80120a4:	2001891c 	.word	0x2001891c

080120a8 <rmw_uxrce_fini_publisher_memory>:
 80120a8:	b510      	push	{r4, lr}
 80120aa:	4604      	mov	r4, r0
 80120ac:	6800      	ldr	r0, [r0, #0]
 80120ae:	b128      	cbz	r0, 80120bc <rmw_uxrce_fini_publisher_memory+0x14>
 80120b0:	4b06      	ldr	r3, [pc, #24]	@ (80120cc <rmw_uxrce_fini_publisher_memory+0x24>)
 80120b2:	6819      	ldr	r1, [r3, #0]
 80120b4:	f7ee f8b4 	bl	8000220 <strcmp>
 80120b8:	b938      	cbnz	r0, 80120ca <rmw_uxrce_fini_publisher_memory+0x22>
 80120ba:	6020      	str	r0, [r4, #0]
 80120bc:	6861      	ldr	r1, [r4, #4]
 80120be:	b121      	cbz	r1, 80120ca <rmw_uxrce_fini_publisher_memory+0x22>
 80120c0:	4803      	ldr	r0, [pc, #12]	@ (80120d0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80120c2:	f009 f91d 	bl	801b300 <put_memory>
 80120c6:	2300      	movs	r3, #0
 80120c8:	6063      	str	r3, [r4, #4]
 80120ca:	bd10      	pop	{r4, pc}
 80120cc:	0802124c 	.word	0x0802124c
 80120d0:	20018868 	.word	0x20018868

080120d4 <rmw_uxrce_fini_subscription_memory>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	4604      	mov	r4, r0
 80120d8:	6800      	ldr	r0, [r0, #0]
 80120da:	b128      	cbz	r0, 80120e8 <rmw_uxrce_fini_subscription_memory+0x14>
 80120dc:	4b06      	ldr	r3, [pc, #24]	@ (80120f8 <rmw_uxrce_fini_subscription_memory+0x24>)
 80120de:	6819      	ldr	r1, [r3, #0]
 80120e0:	f7ee f89e 	bl	8000220 <strcmp>
 80120e4:	b938      	cbnz	r0, 80120f6 <rmw_uxrce_fini_subscription_memory+0x22>
 80120e6:	6020      	str	r0, [r4, #0]
 80120e8:	6861      	ldr	r1, [r4, #4]
 80120ea:	b121      	cbz	r1, 80120f6 <rmw_uxrce_fini_subscription_memory+0x22>
 80120ec:	4803      	ldr	r0, [pc, #12]	@ (80120fc <rmw_uxrce_fini_subscription_memory+0x28>)
 80120ee:	f009 f907 	bl	801b300 <put_memory>
 80120f2:	2300      	movs	r3, #0
 80120f4:	6063      	str	r3, [r4, #4]
 80120f6:	bd10      	pop	{r4, pc}
 80120f8:	0802124c 	.word	0x0802124c
 80120fc:	20017fe8 	.word	0x20017fe8

08012100 <rmw_uxrce_fini_service_memory>:
 8012100:	b510      	push	{r4, lr}
 8012102:	4604      	mov	r4, r0
 8012104:	6800      	ldr	r0, [r0, #0]
 8012106:	b128      	cbz	r0, 8012114 <rmw_uxrce_fini_service_memory+0x14>
 8012108:	4b06      	ldr	r3, [pc, #24]	@ (8012124 <rmw_uxrce_fini_service_memory+0x24>)
 801210a:	6819      	ldr	r1, [r3, #0]
 801210c:	f7ee f888 	bl	8000220 <strcmp>
 8012110:	b938      	cbnz	r0, 8012122 <rmw_uxrce_fini_service_memory+0x22>
 8012112:	6020      	str	r0, [r4, #0]
 8012114:	6861      	ldr	r1, [r4, #4]
 8012116:	b121      	cbz	r1, 8012122 <rmw_uxrce_fini_service_memory+0x22>
 8012118:	4803      	ldr	r0, [pc, #12]	@ (8012128 <rmw_uxrce_fini_service_memory+0x28>)
 801211a:	f009 f8f1 	bl	801b300 <put_memory>
 801211e:	2300      	movs	r3, #0
 8012120:	6063      	str	r3, [r4, #4]
 8012122:	bd10      	pop	{r4, pc}
 8012124:	0802124c 	.word	0x0802124c
 8012128:	20017ba0 	.word	0x20017ba0

0801212c <rmw_uxrce_fini_client_memory>:
 801212c:	b510      	push	{r4, lr}
 801212e:	4604      	mov	r4, r0
 8012130:	6800      	ldr	r0, [r0, #0]
 8012132:	b128      	cbz	r0, 8012140 <rmw_uxrce_fini_client_memory+0x14>
 8012134:	4b06      	ldr	r3, [pc, #24]	@ (8012150 <rmw_uxrce_fini_client_memory+0x24>)
 8012136:	6819      	ldr	r1, [r3, #0]
 8012138:	f7ee f872 	bl	8000220 <strcmp>
 801213c:	b938      	cbnz	r0, 801214e <rmw_uxrce_fini_client_memory+0x22>
 801213e:	6020      	str	r0, [r4, #0]
 8012140:	6861      	ldr	r1, [r4, #4]
 8012142:	b121      	cbz	r1, 801214e <rmw_uxrce_fini_client_memory+0x22>
 8012144:	4803      	ldr	r0, [pc, #12]	@ (8012154 <rmw_uxrce_fini_client_memory+0x28>)
 8012146:	f009 f8db 	bl	801b300 <put_memory>
 801214a:	2300      	movs	r3, #0
 801214c:	6063      	str	r3, [r4, #4]
 801214e:	bd10      	pop	{r4, pc}
 8012150:	0802124c 	.word	0x0802124c
 8012154:	20017ac8 	.word	0x20017ac8

08012158 <rmw_uxrce_fini_topic_memory>:
 8012158:	b510      	push	{r4, lr}
 801215a:	4604      	mov	r4, r0
 801215c:	4621      	mov	r1, r4
 801215e:	4803      	ldr	r0, [pc, #12]	@ (801216c <rmw_uxrce_fini_topic_memory+0x14>)
 8012160:	f009 f8ce 	bl	801b300 <put_memory>
 8012164:	2300      	movs	r3, #0
 8012166:	61a3      	str	r3, [r4, #24]
 8012168:	bd10      	pop	{r4, pc}
 801216a:	bf00      	nop
 801216c:	200179ec 	.word	0x200179ec

08012170 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8012170:	b082      	sub	sp, #8
 8012172:	b530      	push	{r4, r5, lr}
 8012174:	4929      	ldr	r1, [pc, #164]	@ (801221c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 8012176:	ac03      	add	r4, sp, #12
 8012178:	e884 000c 	stmia.w	r4, {r2, r3}
 801217c:	680c      	ldr	r4, [r1, #0]
 801217e:	461d      	mov	r5, r3
 8012180:	4602      	mov	r2, r0
 8012182:	2c00      	cmp	r4, #0
 8012184:	d043      	beq.n	801220e <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 8012186:	4620      	mov	r0, r4
 8012188:	2100      	movs	r1, #0
 801218a:	6883      	ldr	r3, [r0, #8]
 801218c:	6840      	ldr	r0, [r0, #4]
 801218e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 8012192:	429a      	cmp	r2, r3
 8012194:	bf08      	it	eq
 8012196:	3101      	addeq	r1, #1
 8012198:	2800      	cmp	r0, #0
 801219a:	d1f6      	bne.n	801218a <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 801219c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80121a0:	2b02      	cmp	r3, #2
 80121a2:	d027      	beq.n	80121f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 80121a4:	d906      	bls.n	80121b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80121a6:	2b03      	cmp	r3, #3
 80121a8:	d004      	beq.n	80121b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80121aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121ae:	2000      	movs	r0, #0
 80121b0:	b002      	add	sp, #8
 80121b2:	4770      	bx	lr
 80121b4:	b1fd      	cbz	r5, 80121f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80121b6:	428d      	cmp	r5, r1
 80121b8:	d81d      	bhi.n	80121f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80121ba:	2c00      	cmp	r4, #0
 80121bc:	d0f5      	beq.n	80121aa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80121be:	2000      	movs	r0, #0
 80121c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80121c4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80121c8:	e001      	b.n	80121ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80121ca:	6864      	ldr	r4, [r4, #4]
 80121cc:	b1dc      	cbz	r4, 8012206 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80121d4:	428a      	cmp	r2, r1
 80121d6:	d1f8      	bne.n	80121ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80121d8:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80121dc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80121e0:	4561      	cmp	r1, ip
 80121e2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80121e6:	eb73 0e05 	sbcs.w	lr, r3, r5
 80121ea:	daee      	bge.n	80121ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80121ec:	468c      	mov	ip, r1
 80121ee:	461d      	mov	r5, r3
 80121f0:	4620      	mov	r0, r4
 80121f2:	e7ea      	b.n	80121ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80121f4:	b92d      	cbnz	r5, 8012202 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 80121f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121fa:	4808      	ldr	r0, [pc, #32]	@ (801221c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80121fc:	b002      	add	sp, #8
 80121fe:	f009 b86f 	b.w	801b2e0 <get_memory>
 8012202:	428d      	cmp	r5, r1
 8012204:	d8f7      	bhi.n	80121f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012206:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801220a:	b002      	add	sp, #8
 801220c:	4770      	bx	lr
 801220e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012212:	2b02      	cmp	r3, #2
 8012214:	d0ef      	beq.n	80121f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012216:	d9ee      	bls.n	80121f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012218:	4621      	mov	r1, r4
 801221a:	e7c4      	b.n	80121a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 801221c:	20017838 	.word	0x20017838

08012220 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8012220:	4b11      	ldr	r3, [pc, #68]	@ (8012268 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	b1eb      	cbz	r3, 8012262 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8012226:	b530      	push	{r4, r5, lr}
 8012228:	4684      	mov	ip, r0
 801222a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801222e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8012232:	2000      	movs	r0, #0
 8012234:	e001      	b.n	801223a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	b193      	cbz	r3, 8012260 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 801223a:	689a      	ldr	r2, [r3, #8]
 801223c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8012240:	458c      	cmp	ip, r1
 8012242:	d1f8      	bne.n	8012236 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8012244:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8012248:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 801224c:	42a1      	cmp	r1, r4
 801224e:	eb72 050e 	sbcs.w	r5, r2, lr
 8012252:	daf0      	bge.n	8012236 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8012254:	4618      	mov	r0, r3
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	460c      	mov	r4, r1
 801225a:	4696      	mov	lr, r2
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1ec      	bne.n	801223a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8012260:	bd30      	pop	{r4, r5, pc}
 8012262:	4618      	mov	r0, r3
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	20017838 	.word	0x20017838
 801226c:	00000000 	.word	0x00000000

08012270 <rmw_uxrce_clean_expired_static_input_buffer>:
 8012270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012274:	4b3c      	ldr	r3, [pc, #240]	@ (8012368 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012276:	ed2d 8b06 	vpush	{d8-d10}
 801227a:	f8d3 8000 	ldr.w	r8, [r3]
 801227e:	b08d      	sub	sp, #52	@ 0x34
 8012280:	f7ff fd74 	bl	8011d6c <rmw_uros_epoch_nanos>
 8012284:	f1b8 0f00 	cmp.w	r8, #0
 8012288:	d05c      	beq.n	8012344 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 801228a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801228e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012292:	2b04      	cmp	r3, #4
 8012294:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 8012350 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8012298:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 8012358 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801229c:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 8012360 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80122a0:	4683      	mov	fp, r0
 80122a2:	ac04      	add	r4, sp, #16
 80122a4:	468a      	mov	sl, r1
 80122a6:	d03f      	beq.n	8012328 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 80122a8:	2b05      	cmp	r3, #5
 80122aa:	d044      	beq.n	8012336 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 80122ac:	2b03      	cmp	r3, #3
 80122ae:	d03b      	beq.n	8012328 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 80122b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80122b4:	ed8d ab06 	vstr	d10, [sp, #24]
 80122b8:	ed8d 8b08 	vstr	d8, [sp, #32]
 80122bc:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80122c0:	ab08      	add	r3, sp, #32
 80122c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80122c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80122cc:	f008 fe22 	bl	801af14 <rmw_time_equal>
 80122d0:	b118      	cbz	r0, 80122da <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 80122d2:	ed8d 9b04 	vstr	d9, [sp, #16]
 80122d6:	ed8d 8b06 	vstr	d8, [sp, #24]
 80122da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80122de:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 80122e2:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 80122e6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80122ea:	f008 fe67 	bl	801afbc <rmw_time_total_nsec>
 80122ee:	183f      	adds	r7, r7, r0
 80122f0:	eb46 0601 	adc.w	r6, r6, r1
 80122f4:	455f      	cmp	r7, fp
 80122f6:	eb76 060a 	sbcs.w	r6, r6, sl
 80122fa:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80122fe:	db05      	blt.n	801230c <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 8012300:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8012304:	4593      	cmp	fp, r2
 8012306:	eb7a 0303 	sbcs.w	r3, sl, r3
 801230a:	da03      	bge.n	8012314 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 801230c:	4816      	ldr	r0, [pc, #88]	@ (8012368 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801230e:	4641      	mov	r1, r8
 8012310:	f008 fff6 	bl	801b300 <put_memory>
 8012314:	f1b9 0f00 	cmp.w	r9, #0
 8012318:	d014      	beq.n	8012344 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 801231a:	46c8      	mov	r8, r9
 801231c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012320:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012324:	2b04      	cmp	r3, #4
 8012326:	d1bf      	bne.n	80122a8 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 8012328:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801232c:	3340      	adds	r3, #64	@ 0x40
 801232e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012334:	e7c0      	b.n	80122b8 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 8012336:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801233a:	3348      	adds	r3, #72	@ 0x48
 801233c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801233e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012342:	e7b9      	b.n	80122b8 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 8012344:	b00d      	add	sp, #52	@ 0x34
 8012346:	ecbd 8b06 	vpop	{d8-d10}
 801234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234e:	bf00      	nop
	...
 8012358:	00000001 	.word	0x00000001
 801235c:	00000000 	.word	0x00000000
 8012360:	0000001e 	.word	0x0000001e
 8012364:	00000000 	.word	0x00000000
 8012368:	20017838 	.word	0x20017838

0801236c <run_xrce_session>:
 801236c:	b500      	push	{lr}
 801236e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8012372:	b087      	sub	sp, #28
 8012374:	f1bc 0f01 	cmp.w	ip, #1
 8012378:	f8ad 200e 	strh.w	r2, [sp, #14]
 801237c:	d00f      	beq.n	801239e <run_xrce_session+0x32>
 801237e:	4619      	mov	r1, r3
 8012380:	2301      	movs	r3, #1
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	f10d 020e 	add.w	r2, sp, #14
 8012388:	f10d 0317 	add.w	r3, sp, #23
 801238c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012390:	f003 fbb8 	bl	8015b04 <uxr_run_session_until_all_status>
 8012394:	b100      	cbz	r0, 8012398 <run_xrce_session+0x2c>
 8012396:	2001      	movs	r0, #1
 8012398:	b007      	add	sp, #28
 801239a:	f85d fb04 	ldr.w	pc, [sp], #4
 801239e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123a2:	f002 fff1 	bl	8015388 <uxr_flash_output_streams>
 80123a6:	2001      	movs	r0, #1
 80123a8:	e7f6      	b.n	8012398 <run_xrce_session+0x2c>
 80123aa:	bf00      	nop

080123ac <convert_qos_profile>:
 80123ac:	780a      	ldrb	r2, [r1, #0]
 80123ae:	f891 c008 	ldrb.w	ip, [r1, #8]
 80123b2:	f1a2 0202 	sub.w	r2, r2, #2
 80123b6:	fab2 f282 	clz	r2, r2
 80123ba:	0952      	lsrs	r2, r2, #5
 80123bc:	7082      	strb	r2, [r0, #2]
 80123be:	7a4a      	ldrb	r2, [r1, #9]
 80123c0:	8889      	ldrh	r1, [r1, #4]
 80123c2:	8081      	strh	r1, [r0, #4]
 80123c4:	f1a2 0202 	sub.w	r2, r2, #2
 80123c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80123cc:	fab2 f282 	clz	r2, r2
 80123d0:	fabc fc8c 	clz	ip, ip
 80123d4:	0952      	lsrs	r2, r2, #5
 80123d6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80123da:	0052      	lsls	r2, r2, #1
 80123dc:	f880 c001 	strb.w	ip, [r0, #1]
 80123e0:	7002      	strb	r2, [r0, #0]
 80123e2:	4770      	bx	lr

080123e4 <generate_type_name>:
 80123e4:	b530      	push	{r4, r5, lr}
 80123e6:	2300      	movs	r3, #0
 80123e8:	700b      	strb	r3, [r1, #0]
 80123ea:	6803      	ldr	r3, [r0, #0]
 80123ec:	b087      	sub	sp, #28
 80123ee:	4614      	mov	r4, r2
 80123f0:	b1d3      	cbz	r3, 8012428 <generate_type_name+0x44>
 80123f2:	4a0f      	ldr	r2, [pc, #60]	@ (8012430 <generate_type_name+0x4c>)
 80123f4:	4615      	mov	r5, r2
 80123f6:	9203      	str	r2, [sp, #12]
 80123f8:	9500      	str	r5, [sp, #0]
 80123fa:	6842      	ldr	r2, [r0, #4]
 80123fc:	480d      	ldr	r0, [pc, #52]	@ (8012434 <generate_type_name+0x50>)
 80123fe:	9001      	str	r0, [sp, #4]
 8012400:	4608      	mov	r0, r1
 8012402:	490d      	ldr	r1, [pc, #52]	@ (8012438 <generate_type_name+0x54>)
 8012404:	9204      	str	r2, [sp, #16]
 8012406:	9105      	str	r1, [sp, #20]
 8012408:	9102      	str	r1, [sp, #8]
 801240a:	4a0c      	ldr	r2, [pc, #48]	@ (801243c <generate_type_name+0x58>)
 801240c:	4621      	mov	r1, r4
 801240e:	f00b faf9 	bl	801da04 <sniprintf>
 8012412:	2800      	cmp	r0, #0
 8012414:	db05      	blt.n	8012422 <generate_type_name+0x3e>
 8012416:	4284      	cmp	r4, r0
 8012418:	bfd4      	ite	le
 801241a:	2000      	movle	r0, #0
 801241c:	2001      	movgt	r0, #1
 801241e:	b007      	add	sp, #28
 8012420:	bd30      	pop	{r4, r5, pc}
 8012422:	2000      	movs	r0, #0
 8012424:	b007      	add	sp, #28
 8012426:	bd30      	pop	{r4, r5, pc}
 8012428:	4b05      	ldr	r3, [pc, #20]	@ (8012440 <generate_type_name+0x5c>)
 801242a:	4a01      	ldr	r2, [pc, #4]	@ (8012430 <generate_type_name+0x4c>)
 801242c:	461d      	mov	r5, r3
 801242e:	e7e2      	b.n	80123f6 <generate_type_name+0x12>
 8012430:	08020a68 	.word	0x08020a68
 8012434:	08020a80 	.word	0x08020a80
 8012438:	08020a7c 	.word	0x08020a7c
 801243c:	08020a6c 	.word	0x08020a6c
 8012440:	0802155c 	.word	0x0802155c

08012444 <generate_topic_name>:
 8012444:	b510      	push	{r4, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	4614      	mov	r4, r2
 801244a:	9000      	str	r0, [sp, #0]
 801244c:	4b08      	ldr	r3, [pc, #32]	@ (8012470 <generate_topic_name+0x2c>)
 801244e:	4a09      	ldr	r2, [pc, #36]	@ (8012474 <generate_topic_name+0x30>)
 8012450:	4608      	mov	r0, r1
 8012452:	4621      	mov	r1, r4
 8012454:	f00b fad6 	bl	801da04 <sniprintf>
 8012458:	2800      	cmp	r0, #0
 801245a:	db05      	blt.n	8012468 <generate_topic_name+0x24>
 801245c:	4284      	cmp	r4, r0
 801245e:	bfd4      	ite	le
 8012460:	2000      	movle	r0, #0
 8012462:	2001      	movgt	r0, #1
 8012464:	b002      	add	sp, #8
 8012466:	bd10      	pop	{r4, pc}
 8012468:	2000      	movs	r0, #0
 801246a:	b002      	add	sp, #8
 801246c:	bd10      	pop	{r4, pc}
 801246e:	bf00      	nop
 8012470:	08020a84 	.word	0x08020a84
 8012474:	080204e4 	.word	0x080204e4

08012478 <is_uxrce_rmw_identifier_valid>:
 8012478:	b510      	push	{r4, lr}
 801247a:	4604      	mov	r4, r0
 801247c:	b140      	cbz	r0, 8012490 <is_uxrce_rmw_identifier_valid+0x18>
 801247e:	f008 ffb5 	bl	801b3ec <rmw_get_implementation_identifier>
 8012482:	4601      	mov	r1, r0
 8012484:	4620      	mov	r0, r4
 8012486:	f7ed fecb 	bl	8000220 <strcmp>
 801248a:	fab0 f080 	clz	r0, r0
 801248e:	0940      	lsrs	r0, r0, #5
 8012490:	bd10      	pop	{r4, pc}
 8012492:	bf00      	nop

08012494 <get_message_typesupport_handle>:
 8012494:	6883      	ldr	r3, [r0, #8]
 8012496:	4718      	bx	r3

08012498 <get_message_typesupport_handle_function>:
 8012498:	b510      	push	{r4, lr}
 801249a:	4604      	mov	r4, r0
 801249c:	6800      	ldr	r0, [r0, #0]
 801249e:	f7ed febf 	bl	8000220 <strcmp>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	bf0c      	ite	eq
 80124a6:	4620      	moveq	r0, r4
 80124a8:	2000      	movne	r0, #0
 80124aa:	bd10      	pop	{r4, pc}

080124ac <rosidl_runtime_c__double__Sequence__init>:
 80124ac:	b1b0      	cbz	r0, 80124dc <rosidl_runtime_c__double__Sequence__init+0x30>
 80124ae:	b530      	push	{r4, r5, lr}
 80124b0:	460d      	mov	r5, r1
 80124b2:	b087      	sub	sp, #28
 80124b4:	4604      	mov	r4, r0
 80124b6:	b931      	cbnz	r1, 80124c6 <rosidl_runtime_c__double__Sequence__init+0x1a>
 80124b8:	4608      	mov	r0, r1
 80124ba:	e9c4 0500 	strd	r0, r5, [r4]
 80124be:	60a5      	str	r5, [r4, #8]
 80124c0:	2001      	movs	r0, #1
 80124c2:	b007      	add	sp, #28
 80124c4:	bd30      	pop	{r4, r5, pc}
 80124c6:	a801      	add	r0, sp, #4
 80124c8:	f7fe f8e2 	bl	8010690 <rcutils_get_default_allocator>
 80124cc:	9b01      	ldr	r3, [sp, #4]
 80124ce:	9905      	ldr	r1, [sp, #20]
 80124d0:	00e8      	lsls	r0, r5, #3
 80124d2:	4798      	blx	r3
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d1f0      	bne.n	80124ba <rosidl_runtime_c__double__Sequence__init+0xe>
 80124d8:	2000      	movs	r0, #0
 80124da:	e7f2      	b.n	80124c2 <rosidl_runtime_c__double__Sequence__init+0x16>
 80124dc:	2000      	movs	r0, #0
 80124de:	4770      	bx	lr

080124e0 <rosidl_runtime_c__double__Sequence__fini>:
 80124e0:	b188      	cbz	r0, 8012506 <rosidl_runtime_c__double__Sequence__fini+0x26>
 80124e2:	b510      	push	{r4, lr}
 80124e4:	6803      	ldr	r3, [r0, #0]
 80124e6:	b086      	sub	sp, #24
 80124e8:	4604      	mov	r4, r0
 80124ea:	b153      	cbz	r3, 8012502 <rosidl_runtime_c__double__Sequence__fini+0x22>
 80124ec:	a801      	add	r0, sp, #4
 80124ee:	f7fe f8cf 	bl	8010690 <rcutils_get_default_allocator>
 80124f2:	9b02      	ldr	r3, [sp, #8]
 80124f4:	9905      	ldr	r1, [sp, #20]
 80124f6:	6820      	ldr	r0, [r4, #0]
 80124f8:	4798      	blx	r3
 80124fa:	2300      	movs	r3, #0
 80124fc:	e9c4 3300 	strd	r3, r3, [r4]
 8012500:	60a3      	str	r3, [r4, #8]
 8012502:	b006      	add	sp, #24
 8012504:	bd10      	pop	{r4, pc}
 8012506:	4770      	bx	lr

08012508 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801250c:	6805      	ldr	r5, [r0, #0]
 801250e:	4604      	mov	r4, r0
 8012510:	4628      	mov	r0, r5
 8012512:	460e      	mov	r6, r1
 8012514:	f7ed fe84 	bl	8000220 <strcmp>
 8012518:	b308      	cbz	r0, 801255e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 801251a:	4b12      	ldr	r3, [pc, #72]	@ (8012564 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 801251c:	4628      	mov	r0, r5
 801251e:	6819      	ldr	r1, [r3, #0]
 8012520:	f7ed fe7e 	bl	8000220 <strcmp>
 8012524:	4605      	mov	r5, r0
 8012526:	b980      	cbnz	r0, 801254a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8012528:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801252c:	f8d8 4000 	ldr.w	r4, [r8]
 8012530:	b1ac      	cbz	r4, 801255e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8012532:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012536:	3f04      	subs	r7, #4
 8012538:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801253c:	4631      	mov	r1, r6
 801253e:	f7ed fe6f 	bl	8000220 <strcmp>
 8012542:	b128      	cbz	r0, 8012550 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8012544:	3501      	adds	r5, #1
 8012546:	42a5      	cmp	r5, r4
 8012548:	d1f6      	bne.n	8012538 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 801254a:	2000      	movs	r0, #0
 801254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012550:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012554:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801255c:	4718      	bx	r3
 801255e:	4620      	mov	r0, r4
 8012560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012564:	2000019c 	.word	0x2000019c

08012568 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012568:	4b04      	ldr	r3, [pc, #16]	@ (801257c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	b10a      	cbz	r2, 8012572 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 801256e:	4803      	ldr	r0, [pc, #12]	@ (801257c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8012570:	4770      	bx	lr
 8012572:	4a03      	ldr	r2, [pc, #12]	@ (8012580 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8012574:	4801      	ldr	r0, [pc, #4]	@ (801257c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8012576:	6812      	ldr	r2, [r2, #0]
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	4770      	bx	lr
 801257c:	200001a4 	.word	0x200001a4
 8012580:	2000019c 	.word	0x2000019c

08012584 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012584:	4a02      	ldr	r2, [pc, #8]	@ (8012590 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8012586:	4b03      	ldr	r3, [pc, #12]	@ (8012594 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8012588:	6812      	ldr	r2, [r2, #0]
 801258a:	601a      	str	r2, [r3, #0]
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	2000019c 	.word	0x2000019c
 8012594:	200001a4 	.word	0x200001a4

08012598 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8012598:	2009      	movs	r0, #9
 801259a:	4770      	bx	lr

0801259c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 801259c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop

080125a4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 80125a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125a8:	e9d0 0100 	ldrd	r0, r1, [r0]
 80125ac:	e9c2 0100 	strd	r0, r1, [r2]
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop

080125b4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 80125b4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80125b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125bc:	e9c0 2300 	strd	r2, r3, [r0]
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop

080125c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 80125c4:	f009 bb3c 	b.w	801bc40 <sensor_msgs__msg__Imu__init>

080125c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 80125c8:	f009 bb86 	b.w	801bcd8 <sensor_msgs__msg__Imu__fini>

080125cc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 80125cc:	2009      	movs	r0, #9
 80125ce:	4770      	bx	lr

080125d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 80125d0:	2009      	movs	r0, #9
 80125d2:	4770      	bx	lr

080125d4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 80125d4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125d8:	4770      	bx	lr
 80125da:	bf00      	nop

080125dc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80125dc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop

080125e4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80125e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop

080125ec <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80125ec:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop

080125f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80125f4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125f8:	4770      	bx	lr
 80125fa:	bf00      	nop

080125fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80125fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012600:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012604:	e9c2 0100 	strd	r0, r1, [r2]
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop

0801260c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 801260c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012610:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012614:	e9c0 2300 	strd	r2, r3, [r0]
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop

0801261c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 801261c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012620:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012624:	e9c2 0100 	strd	r0, r1, [r2]
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop

0801262c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 801262c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012630:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012634:	e9c0 2300 	strd	r2, r3, [r0]
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop

0801263c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801263c:	b510      	push	{r4, lr}
 801263e:	f000 f90b 	bl	8012858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012642:	4c0b      	ldr	r4, [pc, #44]	@ (8012670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8012644:	60e0      	str	r0, [r4, #12]
 8012646:	f000 fb1f 	bl	8012c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801264a:	64a0      	str	r0, [r4, #72]	@ 0x48
 801264c:	f000 fb2e 	bl	8012cac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012650:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8012654:	f000 fb2a 	bl	8012cac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012658:	4b06      	ldr	r3, [pc, #24]	@ (8012674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801265a:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	b10a      	cbz	r2, 8012666 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8012662:	4804      	ldr	r0, [pc, #16]	@ (8012674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8012664:	bd10      	pop	{r4, pc}
 8012666:	4a04      	ldr	r2, [pc, #16]	@ (8012678 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8012668:	4802      	ldr	r0, [pc, #8]	@ (8012674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801266a:	6812      	ldr	r2, [r2, #0]
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	bd10      	pop	{r4, pc}
 8012670:	200001dc 	.word	0x200001dc
 8012674:	200001c4 	.word	0x200001c4
 8012678:	200001a0 	.word	0x200001a0

0801267c <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 801267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267e:	4607      	mov	r7, r0
 8012680:	460e      	mov	r6, r1
 8012682:	f000 f90d 	bl	80128a0 <get_serialized_size_std_msgs__msg__Header>
 8012686:	1834      	adds	r4, r6, r0
 8012688:	4621      	mov	r1, r4
 801268a:	f107 0018 	add.w	r0, r7, #24
 801268e:	f000 fb1b 	bl	8012cc8 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8012692:	4404      	add	r4, r0
 8012694:	2108      	movs	r1, #8
 8012696:	4620      	mov	r0, r4
 8012698:	f7fb ff40 	bl	800e51c <ucdr_alignment>
 801269c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 80126a0:	4425      	add	r5, r4
 80126a2:	4629      	mov	r1, r5
 80126a4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80126a8:	f000 fbc6 	bl	8012e38 <get_serialized_size_geometry_msgs__msg__Vector3>
 80126ac:	4405      	add	r5, r0
 80126ae:	2108      	movs	r1, #8
 80126b0:	4628      	mov	r0, r5
 80126b2:	f7fb ff33 	bl	800e51c <ucdr_alignment>
 80126b6:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 80126ba:	442c      	add	r4, r5
 80126bc:	4621      	mov	r1, r4
 80126be:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80126c2:	f000 fbb9 	bl	8012e38 <get_serialized_size_geometry_msgs__msg__Vector3>
 80126c6:	4404      	add	r4, r0
 80126c8:	2108      	movs	r1, #8
 80126ca:	4620      	mov	r0, r4
 80126cc:	f7fb ff26 	bl	800e51c <ucdr_alignment>
 80126d0:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 80126d4:	4430      	add	r0, r6
 80126d6:	4420      	add	r0, r4
 80126d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126da:	bf00      	nop

080126dc <get_serialized_size_sensor_msgs__msg__Imu>:
 80126dc:	b108      	cbz	r0, 80126e2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 80126de:	f7ff bfcd 	b.w	801267c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80126e2:	4770      	bx	lr

080126e4 <_Imu__get_serialized_size>:
 80126e4:	b110      	cbz	r0, 80126ec <_Imu__get_serialized_size+0x8>
 80126e6:	2100      	movs	r1, #0
 80126e8:	f7ff bfc8 	b.w	801267c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop

080126f0 <_Imu__cdr_deserialize>:
 80126f0:	b538      	push	{r3, r4, r5, lr}
 80126f2:	460c      	mov	r4, r1
 80126f4:	b399      	cbz	r1, 801275e <_Imu__cdr_deserialize+0x6e>
 80126f6:	4605      	mov	r5, r0
 80126f8:	f000 f954 	bl	80129a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80126fc:	6843      	ldr	r3, [r0, #4]
 80126fe:	4621      	mov	r1, r4
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	4628      	mov	r0, r5
 8012704:	4798      	blx	r3
 8012706:	f000 fb93 	bl	8012e30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801270a:	6843      	ldr	r3, [r0, #4]
 801270c:	f104 0118 	add.w	r1, r4, #24
 8012710:	68db      	ldr	r3, [r3, #12]
 8012712:	4628      	mov	r0, r5
 8012714:	4798      	blx	r3
 8012716:	2209      	movs	r2, #9
 8012718:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801271c:	4628      	mov	r0, r5
 801271e:	f000 fdef 	bl	8013300 <ucdr_deserialize_array_double>
 8012722:	f000 fc15 	bl	8012f50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012726:	6843      	ldr	r3, [r0, #4]
 8012728:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	4628      	mov	r0, r5
 8012730:	4798      	blx	r3
 8012732:	2209      	movs	r2, #9
 8012734:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8012738:	4628      	mov	r0, r5
 801273a:	f000 fde1 	bl	8013300 <ucdr_deserialize_array_double>
 801273e:	f000 fc07 	bl	8012f50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012742:	6843      	ldr	r3, [r0, #4]
 8012744:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	4628      	mov	r0, r5
 801274c:	4798      	blx	r3
 801274e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8012752:	4628      	mov	r0, r5
 8012754:	2209      	movs	r2, #9
 8012756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801275a:	f000 bdd1 	b.w	8013300 <ucdr_deserialize_array_double>
 801275e:	4608      	mov	r0, r1
 8012760:	bd38      	pop	{r3, r4, r5, pc}
 8012762:	bf00      	nop

08012764 <_Imu__cdr_serialize>:
 8012764:	2800      	cmp	r0, #0
 8012766:	d035      	beq.n	80127d4 <_Imu__cdr_serialize+0x70>
 8012768:	b538      	push	{r3, r4, r5, lr}
 801276a:	4604      	mov	r4, r0
 801276c:	460d      	mov	r5, r1
 801276e:	f000 f919 	bl	80129a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012772:	6843      	ldr	r3, [r0, #4]
 8012774:	4629      	mov	r1, r5
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	4620      	mov	r0, r4
 801277a:	4798      	blx	r3
 801277c:	f000 fb58 	bl	8012e30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8012780:	6843      	ldr	r3, [r0, #4]
 8012782:	4629      	mov	r1, r5
 8012784:	689b      	ldr	r3, [r3, #8]
 8012786:	f104 0018 	add.w	r0, r4, #24
 801278a:	4798      	blx	r3
 801278c:	2209      	movs	r2, #9
 801278e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012792:	4628      	mov	r0, r5
 8012794:	f000 fd0c 	bl	80131b0 <ucdr_serialize_array_double>
 8012798:	f000 fbda 	bl	8012f50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801279c:	6843      	ldr	r3, [r0, #4]
 801279e:	4629      	mov	r1, r5
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80127a6:	4798      	blx	r3
 80127a8:	2209      	movs	r2, #9
 80127aa:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80127ae:	4628      	mov	r0, r5
 80127b0:	f000 fcfe 	bl	80131b0 <ucdr_serialize_array_double>
 80127b4:	f000 fbcc 	bl	8012f50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80127b8:	6843      	ldr	r3, [r0, #4]
 80127ba:	4629      	mov	r1, r5
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80127c2:	4798      	blx	r3
 80127c4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80127c8:	4628      	mov	r0, r5
 80127ca:	2209      	movs	r2, #9
 80127cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127d0:	f000 bcee 	b.w	80131b0 <ucdr_serialize_array_double>
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop

080127d8 <max_serialized_size_sensor_msgs__msg__Imu>:
 80127d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127da:	2301      	movs	r3, #1
 80127dc:	7003      	strb	r3, [r0, #0]
 80127de:	4607      	mov	r7, r0
 80127e0:	460e      	mov	r6, r1
 80127e2:	f000 f8d5 	bl	8012990 <max_serialized_size_std_msgs__msg__Header>
 80127e6:	1834      	adds	r4, r6, r0
 80127e8:	4621      	mov	r1, r4
 80127ea:	4638      	mov	r0, r7
 80127ec:	f000 fafe 	bl	8012dec <max_serialized_size_geometry_msgs__msg__Quaternion>
 80127f0:	4404      	add	r4, r0
 80127f2:	2108      	movs	r1, #8
 80127f4:	4620      	mov	r0, r4
 80127f6:	f7fb fe91 	bl	800e51c <ucdr_alignment>
 80127fa:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 80127fe:	4425      	add	r5, r4
 8012800:	4629      	mov	r1, r5
 8012802:	4638      	mov	r0, r7
 8012804:	f000 fb8a 	bl	8012f1c <max_serialized_size_geometry_msgs__msg__Vector3>
 8012808:	4405      	add	r5, r0
 801280a:	2108      	movs	r1, #8
 801280c:	4628      	mov	r0, r5
 801280e:	f7fb fe85 	bl	800e51c <ucdr_alignment>
 8012812:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8012816:	442c      	add	r4, r5
 8012818:	4621      	mov	r1, r4
 801281a:	4638      	mov	r0, r7
 801281c:	f000 fb7e 	bl	8012f1c <max_serialized_size_geometry_msgs__msg__Vector3>
 8012820:	4404      	add	r4, r0
 8012822:	2108      	movs	r1, #8
 8012824:	4620      	mov	r0, r4
 8012826:	f7fb fe79 	bl	800e51c <ucdr_alignment>
 801282a:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 801282e:	4430      	add	r0, r6
 8012830:	4420      	add	r0, r4
 8012832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012834 <_Imu__max_serialized_size>:
 8012834:	b500      	push	{lr}
 8012836:	b083      	sub	sp, #12
 8012838:	2100      	movs	r1, #0
 801283a:	f10d 0007 	add.w	r0, sp, #7
 801283e:	f7ff ffcb 	bl	80127d8 <max_serialized_size_sensor_msgs__msg__Imu>
 8012842:	b003      	add	sp, #12
 8012844:	f85d fb04 	ldr.w	pc, [sp], #4

08012848 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012848:	4800      	ldr	r0, [pc, #0]	@ (801284c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 801284a:	4770      	bx	lr
 801284c:	20000380 	.word	0x20000380

08012850 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8012850:	f009 ba9e 	b.w	801bd90 <std_msgs__msg__Header__init>

08012854 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012854:	f009 babc 	b.w	801bdd0 <std_msgs__msg__Header__fini>

08012858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012858:	b508      	push	{r3, lr}
 801285a:	f000 f99b 	bl	8012b94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801285e:	4b06      	ldr	r3, [pc, #24]	@ (8012878 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012860:	4906      	ldr	r1, [pc, #24]	@ (801287c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	60c8      	str	r0, [r1, #12]
 8012866:	b10a      	cbz	r2, 801286c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8012868:	4803      	ldr	r0, [pc, #12]	@ (8012878 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801286a:	bd08      	pop	{r3, pc}
 801286c:	4a04      	ldr	r2, [pc, #16]	@ (8012880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801286e:	4802      	ldr	r0, [pc, #8]	@ (8012878 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012870:	6812      	ldr	r2, [r2, #0]
 8012872:	601a      	str	r2, [r3, #0]
 8012874:	bd08      	pop	{r3, pc}
 8012876:	bf00      	nop
 8012878:	200003b4 	.word	0x200003b4
 801287c:	200003cc 	.word	0x200003cc
 8012880:	200001a0 	.word	0x200001a0

08012884 <_Header__max_serialized_size>:
 8012884:	b500      	push	{lr}
 8012886:	b083      	sub	sp, #12
 8012888:	2301      	movs	r3, #1
 801288a:	2100      	movs	r1, #0
 801288c:	f10d 0007 	add.w	r0, sp, #7
 8012890:	f88d 3007 	strb.w	r3, [sp, #7]
 8012894:	f000 f9dc 	bl	8012c50 <max_serialized_size_builtin_interfaces__msg__Time>
 8012898:	b003      	add	sp, #12
 801289a:	f85d fb04 	ldr.w	pc, [sp], #4
 801289e:	bf00      	nop

080128a0 <get_serialized_size_std_msgs__msg__Header>:
 80128a0:	b570      	push	{r4, r5, r6, lr}
 80128a2:	4605      	mov	r5, r0
 80128a4:	b168      	cbz	r0, 80128c2 <get_serialized_size_std_msgs__msg__Header+0x22>
 80128a6:	460c      	mov	r4, r1
 80128a8:	f000 f982 	bl	8012bb0 <get_serialized_size_builtin_interfaces__msg__Time>
 80128ac:	1826      	adds	r6, r4, r0
 80128ae:	2104      	movs	r1, #4
 80128b0:	4630      	mov	r0, r6
 80128b2:	f7fb fe33 	bl	800e51c <ucdr_alignment>
 80128b6:	68eb      	ldr	r3, [r5, #12]
 80128b8:	f1c4 0405 	rsb	r4, r4, #5
 80128bc:	441c      	add	r4, r3
 80128be:	4404      	add	r4, r0
 80128c0:	19a0      	adds	r0, r4, r6
 80128c2:	bd70      	pop	{r4, r5, r6, pc}

080128c4 <_Header__cdr_deserialize>:
 80128c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128c6:	460c      	mov	r4, r1
 80128c8:	b083      	sub	sp, #12
 80128ca:	b1e1      	cbz	r1, 8012906 <_Header__cdr_deserialize+0x42>
 80128cc:	4606      	mov	r6, r0
 80128ce:	f000 f9d3 	bl	8012c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128d2:	6843      	ldr	r3, [r0, #4]
 80128d4:	4621      	mov	r1, r4
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	4630      	mov	r0, r6
 80128da:	4798      	blx	r3
 80128dc:	6927      	ldr	r7, [r4, #16]
 80128de:	68a1      	ldr	r1, [r4, #8]
 80128e0:	ab01      	add	r3, sp, #4
 80128e2:	463a      	mov	r2, r7
 80128e4:	4630      	mov	r0, r6
 80128e6:	f7fb fe97 	bl	800e618 <ucdr_deserialize_sequence_char>
 80128ea:	9b01      	ldr	r3, [sp, #4]
 80128ec:	4605      	mov	r5, r0
 80128ee:	b920      	cbnz	r0, 80128fa <_Header__cdr_deserialize+0x36>
 80128f0:	429f      	cmp	r7, r3
 80128f2:	d30c      	bcc.n	801290e <_Header__cdr_deserialize+0x4a>
 80128f4:	4628      	mov	r0, r5
 80128f6:	b003      	add	sp, #12
 80128f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128fa:	b103      	cbz	r3, 80128fe <_Header__cdr_deserialize+0x3a>
 80128fc:	3b01      	subs	r3, #1
 80128fe:	4628      	mov	r0, r5
 8012900:	60e3      	str	r3, [r4, #12]
 8012902:	b003      	add	sp, #12
 8012904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012906:	460d      	mov	r5, r1
 8012908:	4628      	mov	r0, r5
 801290a:	b003      	add	sp, #12
 801290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801290e:	2101      	movs	r1, #1
 8012910:	75b0      	strb	r0, [r6, #22]
 8012912:	7571      	strb	r1, [r6, #21]
 8012914:	60e0      	str	r0, [r4, #12]
 8012916:	4630      	mov	r0, r6
 8012918:	f7fb fe16 	bl	800e548 <ucdr_align_to>
 801291c:	4630      	mov	r0, r6
 801291e:	9901      	ldr	r1, [sp, #4]
 8012920:	f7fb fe48 	bl	800e5b4 <ucdr_advance_buffer>
 8012924:	4628      	mov	r0, r5
 8012926:	b003      	add	sp, #12
 8012928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801292a:	bf00      	nop

0801292c <_Header__cdr_serialize>:
 801292c:	b1f8      	cbz	r0, 801296e <_Header__cdr_serialize+0x42>
 801292e:	b570      	push	{r4, r5, r6, lr}
 8012930:	4604      	mov	r4, r0
 8012932:	460d      	mov	r5, r1
 8012934:	f000 f9a0 	bl	8012c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012938:	6843      	ldr	r3, [r0, #4]
 801293a:	4629      	mov	r1, r5
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	4620      	mov	r0, r4
 8012940:	4798      	blx	r3
 8012942:	68a6      	ldr	r6, [r4, #8]
 8012944:	b156      	cbz	r6, 801295c <_Header__cdr_serialize+0x30>
 8012946:	4630      	mov	r0, r6
 8012948:	f7ed fcca 	bl	80002e0 <strlen>
 801294c:	4631      	mov	r1, r6
 801294e:	60e0      	str	r0, [r4, #12]
 8012950:	1c42      	adds	r2, r0, #1
 8012952:	4628      	mov	r0, r5
 8012954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012958:	f7fb be4c 	b.w	800e5f4 <ucdr_serialize_sequence_char>
 801295c:	4630      	mov	r0, r6
 801295e:	60e0      	str	r0, [r4, #12]
 8012960:	4632      	mov	r2, r6
 8012962:	4631      	mov	r1, r6
 8012964:	4628      	mov	r0, r5
 8012966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801296a:	f7fb be43 	b.w	800e5f4 <ucdr_serialize_sequence_char>
 801296e:	4770      	bx	lr

08012970 <_Header__get_serialized_size>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	4604      	mov	r4, r0
 8012974:	b150      	cbz	r0, 801298c <_Header__get_serialized_size+0x1c>
 8012976:	2100      	movs	r1, #0
 8012978:	f000 f91a 	bl	8012bb0 <get_serialized_size_builtin_interfaces__msg__Time>
 801297c:	2104      	movs	r1, #4
 801297e:	4605      	mov	r5, r0
 8012980:	f7fb fdcc 	bl	800e51c <ucdr_alignment>
 8012984:	68e4      	ldr	r4, [r4, #12]
 8012986:	3405      	adds	r4, #5
 8012988:	442c      	add	r4, r5
 801298a:	4420      	add	r0, r4
 801298c:	bd38      	pop	{r3, r4, r5, pc}
 801298e:	bf00      	nop

08012990 <max_serialized_size_std_msgs__msg__Header>:
 8012990:	b510      	push	{r4, lr}
 8012992:	2301      	movs	r3, #1
 8012994:	4604      	mov	r4, r0
 8012996:	7003      	strb	r3, [r0, #0]
 8012998:	f000 f95a 	bl	8012c50 <max_serialized_size_builtin_interfaces__msg__Time>
 801299c:	2300      	movs	r3, #0
 801299e:	7023      	strb	r3, [r4, #0]
 80129a0:	bd10      	pop	{r4, pc}
 80129a2:	bf00      	nop

080129a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80129a4:	4800      	ldr	r0, [pc, #0]	@ (80129a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80129a6:	4770      	bx	lr
 80129a8:	20000444 	.word	0x20000444

080129ac <actuator_msgs__msg__Actuators__get_type_hash>:
 80129ac:	4800      	ldr	r0, [pc, #0]	@ (80129b0 <actuator_msgs__msg__Actuators__get_type_hash+0x4>)
 80129ae:	4770      	bx	lr
 80129b0:	20000478 	.word	0x20000478

080129b4 <actuator_msgs__msg__Actuators__get_type_description>:
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	4e0c      	ldr	r6, [pc, #48]	@ (80129e8 <actuator_msgs__msg__Actuators__get_type_description+0x34>)
 80129b8:	7835      	ldrb	r5, [r6, #0]
 80129ba:	b10d      	cbz	r5, 80129c0 <actuator_msgs__msg__Actuators__get_type_description+0xc>
 80129bc:	480b      	ldr	r0, [pc, #44]	@ (80129ec <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 80129be:	bd70      	pop	{r4, r5, r6, pc}
 80129c0:	4628      	mov	r0, r5
 80129c2:	f000 f8b7 	bl	8012b34 <builtin_interfaces__msg__Time__get_type_description>
 80129c6:	300c      	adds	r0, #12
 80129c8:	c807      	ldmia	r0, {r0, r1, r2}
 80129ca:	4c09      	ldr	r4, [pc, #36]	@ (80129f0 <actuator_msgs__msg__Actuators__get_type_description+0x3c>)
 80129cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80129d0:	4628      	mov	r0, r5
 80129d2:	f009 f999 	bl	801bd08 <std_msgs__msg__Header__get_type_description>
 80129d6:	300c      	adds	r0, #12
 80129d8:	c807      	ldmia	r0, {r0, r1, r2}
 80129da:	3418      	adds	r4, #24
 80129dc:	2301      	movs	r3, #1
 80129de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80129e2:	7033      	strb	r3, [r6, #0]
 80129e4:	4801      	ldr	r0, [pc, #4]	@ (80129ec <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 80129e6:	bd70      	pop	{r4, r5, r6, pc}
 80129e8:	20019f55 	.word	0x20019f55
 80129ec:	08020ce8 	.word	0x08020ce8
 80129f0:	20000680 	.word	0x20000680

080129f4 <actuator_msgs__msg__Actuators__get_type_description_sources>:
 80129f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f6:	4e17      	ldr	r6, [pc, #92]	@ (8012a54 <actuator_msgs__msg__Actuators__get_type_description_sources+0x60>)
 80129f8:	7837      	ldrb	r7, [r6, #0]
 80129fa:	b10f      	cbz	r7, 8012a00 <actuator_msgs__msg__Actuators__get_type_description_sources+0xc>
 80129fc:	4816      	ldr	r0, [pc, #88]	@ (8012a58 <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 80129fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a00:	4d16      	ldr	r5, [pc, #88]	@ (8012a5c <actuator_msgs__msg__Actuators__get_type_description_sources+0x68>)
 8012a02:	4c17      	ldr	r4, [pc, #92]	@ (8012a60 <actuator_msgs__msg__Actuators__get_type_description_sources+0x6c>)
 8012a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a0c:	682b      	ldr	r3, [r5, #0]
 8012a0e:	4625      	mov	r5, r4
 8012a10:	4638      	mov	r0, r7
 8012a12:	f845 3b04 	str.w	r3, [r5], #4
 8012a16:	f000 f899 	bl	8012b4c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8012a1a:	4684      	mov	ip, r0
 8012a1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a28:	4638      	mov	r0, r7
 8012a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8012a2e:	602b      	str	r3, [r5, #0]
 8012a30:	f009 f982 	bl	801bd38 <std_msgs__msg__Header__get_individual_type_description_source>
 8012a34:	2301      	movs	r3, #1
 8012a36:	4684      	mov	ip, r0
 8012a38:	7033      	strb	r3, [r6, #0]
 8012a3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a3e:	3428      	adds	r4, #40	@ 0x28
 8012a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a48:	f8dc 3000 	ldr.w	r3, [ip]
 8012a4c:	4802      	ldr	r0, [pc, #8]	@ (8012a58 <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 8012a4e:	6023      	str	r3, [r4, #0]
 8012a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a52:	bf00      	nop
 8012a54:	20019f54 	.word	0x20019f54
 8012a58:	08020cb8 	.word	0x08020cb8
 8012a5c:	08020cc4 	.word	0x08020cc4
 8012a60:	20019ee8 	.word	0x20019ee8

08012a64 <actuator_msgs__msg__Actuators__init>:
 8012a64:	b3f0      	cbz	r0, 8012ae4 <actuator_msgs__msg__Actuators__init+0x80>
 8012a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a68:	4604      	mov	r4, r0
 8012a6a:	f009 f991 	bl	801bd90 <std_msgs__msg__Header__init>
 8012a6e:	b1a8      	cbz	r0, 8012a9c <actuator_msgs__msg__Actuators__init+0x38>
 8012a70:	f104 0514 	add.w	r5, r4, #20
 8012a74:	2100      	movs	r1, #0
 8012a76:	4628      	mov	r0, r5
 8012a78:	f7ff fd18 	bl	80124ac <rosidl_runtime_c__double__Sequence__init>
 8012a7c:	b368      	cbz	r0, 8012ada <actuator_msgs__msg__Actuators__init+0x76>
 8012a7e:	f104 0620 	add.w	r6, r4, #32
 8012a82:	2100      	movs	r1, #0
 8012a84:	4630      	mov	r0, r6
 8012a86:	f7ff fd11 	bl	80124ac <rosidl_runtime_c__double__Sequence__init>
 8012a8a:	b1c0      	cbz	r0, 8012abe <actuator_msgs__msg__Actuators__init+0x5a>
 8012a8c:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 8012a90:	2100      	movs	r1, #0
 8012a92:	4638      	mov	r0, r7
 8012a94:	f7ff fd0a 	bl	80124ac <rosidl_runtime_c__double__Sequence__init>
 8012a98:	b330      	cbz	r0, 8012ae8 <actuator_msgs__msg__Actuators__init+0x84>
 8012a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f009 f997 	bl	801bdd0 <std_msgs__msg__Header__fini>
 8012aa2:	f104 0014 	add.w	r0, r4, #20
 8012aa6:	f7ff fd1b 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012aaa:	f104 0020 	add.w	r0, r4, #32
 8012aae:	f7ff fd17 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012ab2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012ab6:	f7ff fd13 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012aba:	2000      	movs	r0, #0
 8012abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f009 f986 	bl	801bdd0 <std_msgs__msg__Header__fini>
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	f7ff fd0b 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012aca:	4630      	mov	r0, r6
 8012acc:	f7ff fd08 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012ad0:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012ad4:	f7ff fd04 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012ad8:	e7ef      	b.n	8012aba <actuator_msgs__msg__Actuators__init+0x56>
 8012ada:	4620      	mov	r0, r4
 8012adc:	f009 f978 	bl	801bdd0 <std_msgs__msg__Header__fini>
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	e7e0      	b.n	8012aa6 <actuator_msgs__msg__Actuators__init+0x42>
 8012ae4:	2000      	movs	r0, #0
 8012ae6:	4770      	bx	lr
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f009 f971 	bl	801bdd0 <std_msgs__msg__Header__fini>
 8012aee:	4628      	mov	r0, r5
 8012af0:	f7ff fcf6 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012af4:	4630      	mov	r0, r6
 8012af6:	f7ff fcf3 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012afa:	4638      	mov	r0, r7
 8012afc:	f7ff fcf0 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012b00:	e7db      	b.n	8012aba <actuator_msgs__msg__Actuators__init+0x56>
 8012b02:	bf00      	nop

08012b04 <actuator_msgs__msg__Actuators__fini>:
 8012b04:	b188      	cbz	r0, 8012b2a <actuator_msgs__msg__Actuators__fini+0x26>
 8012b06:	b510      	push	{r4, lr}
 8012b08:	4604      	mov	r4, r0
 8012b0a:	f009 f961 	bl	801bdd0 <std_msgs__msg__Header__fini>
 8012b0e:	f104 0014 	add.w	r0, r4, #20
 8012b12:	f7ff fce5 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012b16:	f104 0020 	add.w	r0, r4, #32
 8012b1a:	f7ff fce1 	bl	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012b1e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b26:	f7ff bcdb 	b.w	80124e0 <rosidl_runtime_c__double__Sequence__fini>
 8012b2a:	4770      	bx	lr

08012b2c <builtin_interfaces__msg__Time__get_type_hash>:
 8012b2c:	4800      	ldr	r0, [pc, #0]	@ (8012b30 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8012b2e:	4770      	bx	lr
 8012b30:	20000840 	.word	0x20000840

08012b34 <builtin_interfaces__msg__Time__get_type_description>:
 8012b34:	4b03      	ldr	r3, [pc, #12]	@ (8012b44 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8012b36:	781a      	ldrb	r2, [r3, #0]
 8012b38:	b90a      	cbnz	r2, 8012b3e <builtin_interfaces__msg__Time__get_type_description+0xa>
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	701a      	strb	r2, [r3, #0]
 8012b3e:	4802      	ldr	r0, [pc, #8]	@ (8012b48 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	20019f7d 	.word	0x20019f7d
 8012b48:	08020d3c 	.word	0x08020d3c

08012b4c <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8012b4c:	4800      	ldr	r0, [pc, #0]	@ (8012b50 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8012b4e:	4770      	bx	lr
 8012b50:	08020d18 	.word	0x08020d18

08012b54 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8012b54:	4b09      	ldr	r3, [pc, #36]	@ (8012b7c <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8012b56:	781a      	ldrb	r2, [r3, #0]
 8012b58:	b96a      	cbnz	r2, 8012b76 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8012b5a:	b430      	push	{r4, r5}
 8012b5c:	4d08      	ldr	r5, [pc, #32]	@ (8012b80 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8012b5e:	4c09      	ldr	r4, [pc, #36]	@ (8012b84 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8012b60:	2201      	movs	r2, #1
 8012b62:	701a      	strb	r2, [r3, #0]
 8012b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b6c:	682b      	ldr	r3, [r5, #0]
 8012b6e:	4806      	ldr	r0, [pc, #24]	@ (8012b88 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8012b70:	6023      	str	r3, [r4, #0]
 8012b72:	bc30      	pop	{r4, r5}
 8012b74:	4770      	bx	lr
 8012b76:	4804      	ldr	r0, [pc, #16]	@ (8012b88 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8012b78:	4770      	bx	lr
 8012b7a:	bf00      	nop
 8012b7c:	20019f7c 	.word	0x20019f7c
 8012b80:	08020d18 	.word	0x08020d18
 8012b84:	20019f58 	.word	0x20019f58
 8012b88:	08020d0c 	.word	0x08020d0c

08012b8c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012b8c:	f009 b92c 	b.w	801bde8 <builtin_interfaces__msg__Time__init>

08012b90 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012b90:	f009 b92e 	b.w	801bdf0 <builtin_interfaces__msg__Time__fini>

08012b94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012b94:	4b04      	ldr	r3, [pc, #16]	@ (8012ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	b10a      	cbz	r2, 8012b9e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012b9a:	4803      	ldr	r0, [pc, #12]	@ (8012ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b9c:	4770      	bx	lr
 8012b9e:	4a03      	ldr	r2, [pc, #12]	@ (8012bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012ba0:	4801      	ldr	r0, [pc, #4]	@ (8012ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012ba2:	6812      	ldr	r2, [r2, #0]
 8012ba4:	601a      	str	r2, [r3, #0]
 8012ba6:	4770      	bx	lr
 8012ba8:	20000a18 	.word	0x20000a18
 8012bac:	200001a0 	.word	0x200001a0

08012bb0 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012bb0:	b180      	cbz	r0, 8012bd4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012bb2:	b538      	push	{r3, r4, r5, lr}
 8012bb4:	460d      	mov	r5, r1
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	2104      	movs	r1, #4
 8012bba:	f7fb fcaf 	bl	800e51c <ucdr_alignment>
 8012bbe:	2104      	movs	r1, #4
 8012bc0:	186c      	adds	r4, r5, r1
 8012bc2:	4404      	add	r4, r0
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f7fb fca9 	bl	800e51c <ucdr_alignment>
 8012bca:	f1c5 0504 	rsb	r5, r5, #4
 8012bce:	4405      	add	r5, r0
 8012bd0:	1928      	adds	r0, r5, r4
 8012bd2:	bd38      	pop	{r3, r4, r5, pc}
 8012bd4:	4770      	bx	lr
 8012bd6:	bf00      	nop

08012bd8 <_Time__cdr_deserialize>:
 8012bd8:	b538      	push	{r3, r4, r5, lr}
 8012bda:	460c      	mov	r4, r1
 8012bdc:	b141      	cbz	r1, 8012bf0 <_Time__cdr_deserialize+0x18>
 8012bde:	4605      	mov	r5, r0
 8012be0:	f001 fb30 	bl	8014244 <ucdr_deserialize_int32_t>
 8012be4:	1d21      	adds	r1, r4, #4
 8012be6:	4628      	mov	r0, r5
 8012be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bec:	f000 bfa8 	b.w	8013b40 <ucdr_deserialize_uint32_t>
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	bd38      	pop	{r3, r4, r5, pc}

08012bf4 <_Time__cdr_serialize>:
 8012bf4:	b160      	cbz	r0, 8012c10 <_Time__cdr_serialize+0x1c>
 8012bf6:	b538      	push	{r3, r4, r5, lr}
 8012bf8:	460d      	mov	r5, r1
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	6801      	ldr	r1, [r0, #0]
 8012bfe:	4628      	mov	r0, r5
 8012c00:	f001 fa86 	bl	8014110 <ucdr_serialize_int32_t>
 8012c04:	6861      	ldr	r1, [r4, #4]
 8012c06:	4628      	mov	r0, r5
 8012c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c0c:	f000 be6e 	b.w	80138ec <ucdr_serialize_uint32_t>
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop

08012c14 <_Time__get_serialized_size>:
 8012c14:	b160      	cbz	r0, 8012c30 <_Time__get_serialized_size+0x1c>
 8012c16:	b510      	push	{r4, lr}
 8012c18:	2104      	movs	r1, #4
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	f7fb fc7e 	bl	800e51c <ucdr_alignment>
 8012c20:	1d04      	adds	r4, r0, #4
 8012c22:	2104      	movs	r1, #4
 8012c24:	4620      	mov	r0, r4
 8012c26:	f7fb fc79 	bl	800e51c <ucdr_alignment>
 8012c2a:	3004      	adds	r0, #4
 8012c2c:	4420      	add	r0, r4
 8012c2e:	bd10      	pop	{r4, pc}
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop

08012c34 <_Time__max_serialized_size>:
 8012c34:	b510      	push	{r4, lr}
 8012c36:	2104      	movs	r1, #4
 8012c38:	2000      	movs	r0, #0
 8012c3a:	f7fb fc6f 	bl	800e51c <ucdr_alignment>
 8012c3e:	1d04      	adds	r4, r0, #4
 8012c40:	2104      	movs	r1, #4
 8012c42:	4620      	mov	r0, r4
 8012c44:	f7fb fc6a 	bl	800e51c <ucdr_alignment>
 8012c48:	3004      	adds	r0, #4
 8012c4a:	4420      	add	r0, r4
 8012c4c:	bd10      	pop	{r4, pc}
 8012c4e:	bf00      	nop

08012c50 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	460c      	mov	r4, r1
 8012c54:	2301      	movs	r3, #1
 8012c56:	7003      	strb	r3, [r0, #0]
 8012c58:	2104      	movs	r1, #4
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f7fb fc5e 	bl	800e51c <ucdr_alignment>
 8012c60:	2104      	movs	r1, #4
 8012c62:	1863      	adds	r3, r4, r1
 8012c64:	18c5      	adds	r5, r0, r3
 8012c66:	4628      	mov	r0, r5
 8012c68:	f7fb fc58 	bl	800e51c <ucdr_alignment>
 8012c6c:	f1c4 0404 	rsb	r4, r4, #4
 8012c70:	4420      	add	r0, r4
 8012c72:	4428      	add	r0, r5
 8012c74:	bd38      	pop	{r3, r4, r5, pc}
 8012c76:	bf00      	nop

08012c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c78:	4800      	ldr	r0, [pc, #0]	@ (8012c7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012c7a:	4770      	bx	lr
 8012c7c:	20000aa8 	.word	0x20000aa8

08012c80 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8012c80:	f009 b8ea 	b.w	801be58 <geometry_msgs__msg__Quaternion__init>

08012c84 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8012c84:	f009 b8fc 	b.w	801be80 <geometry_msgs__msg__Quaternion__fini>

08012c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8012c88:	4b04      	ldr	r3, [pc, #16]	@ (8012c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	b10a      	cbz	r2, 8012c92 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8012c8e:	4803      	ldr	r0, [pc, #12]	@ (8012c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8012c90:	4770      	bx	lr
 8012c92:	4a03      	ldr	r2, [pc, #12]	@ (8012ca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8012c94:	4801      	ldr	r0, [pc, #4]	@ (8012c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8012c96:	6812      	ldr	r2, [r2, #0]
 8012c98:	601a      	str	r2, [r3, #0]
 8012c9a:	4770      	bx	lr
 8012c9c:	20000adc 	.word	0x20000adc
 8012ca0:	200001a0 	.word	0x200001a0

08012ca4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8012ca4:	f009 b91e 	b.w	801bee4 <geometry_msgs__msg__Vector3__init>

08012ca8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8012ca8:	f009 b920 	b.w	801beec <geometry_msgs__msg__Vector3__fini>

08012cac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8012cac:	4b04      	ldr	r3, [pc, #16]	@ (8012cc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	b10a      	cbz	r2, 8012cb6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8012cb2:	4803      	ldr	r0, [pc, #12]	@ (8012cc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012cb4:	4770      	bx	lr
 8012cb6:	4a03      	ldr	r2, [pc, #12]	@ (8012cc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8012cb8:	4801      	ldr	r0, [pc, #4]	@ (8012cc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012cba:	6812      	ldr	r2, [r2, #0]
 8012cbc:	601a      	str	r2, [r3, #0]
 8012cbe:	4770      	bx	lr
 8012cc0:	20000be4 	.word	0x20000be4
 8012cc4:	200001a0 	.word	0x200001a0

08012cc8 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8012cc8:	b1f0      	cbz	r0, 8012d08 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8012cca:	b570      	push	{r4, r5, r6, lr}
 8012ccc:	460d      	mov	r5, r1
 8012cce:	4628      	mov	r0, r5
 8012cd0:	2108      	movs	r1, #8
 8012cd2:	f7fb fc23 	bl	800e51c <ucdr_alignment>
 8012cd6:	2108      	movs	r1, #8
 8012cd8:	186c      	adds	r4, r5, r1
 8012cda:	4404      	add	r4, r0
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f7fb fc1d 	bl	800e51c <ucdr_alignment>
 8012ce2:	f100 0608 	add.w	r6, r0, #8
 8012ce6:	4426      	add	r6, r4
 8012ce8:	2108      	movs	r1, #8
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7fb fc16 	bl	800e51c <ucdr_alignment>
 8012cf0:	f100 0408 	add.w	r4, r0, #8
 8012cf4:	4434      	add	r4, r6
 8012cf6:	2108      	movs	r1, #8
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f7fb fc0f 	bl	800e51c <ucdr_alignment>
 8012cfe:	f1c5 0508 	rsb	r5, r5, #8
 8012d02:	4405      	add	r5, r0
 8012d04:	1928      	adds	r0, r5, r4
 8012d06:	bd70      	pop	{r4, r5, r6, pc}
 8012d08:	4770      	bx	lr
 8012d0a:	bf00      	nop

08012d0c <_Quaternion__cdr_deserialize>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	460c      	mov	r4, r1
 8012d10:	b199      	cbz	r1, 8012d3a <_Quaternion__cdr_deserialize+0x2e>
 8012d12:	4605      	mov	r5, r0
 8012d14:	f001 fcb4 	bl	8014680 <ucdr_deserialize_double>
 8012d18:	f104 0108 	add.w	r1, r4, #8
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	f001 fcaf 	bl	8014680 <ucdr_deserialize_double>
 8012d22:	f104 0110 	add.w	r1, r4, #16
 8012d26:	4628      	mov	r0, r5
 8012d28:	f001 fcaa 	bl	8014680 <ucdr_deserialize_double>
 8012d2c:	f104 0118 	add.w	r1, r4, #24
 8012d30:	4628      	mov	r0, r5
 8012d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d36:	f001 bca3 	b.w	8014680 <ucdr_deserialize_double>
 8012d3a:	4608      	mov	r0, r1
 8012d3c:	bd38      	pop	{r3, r4, r5, pc}
 8012d3e:	bf00      	nop

08012d40 <_Quaternion__cdr_serialize>:
 8012d40:	b1c0      	cbz	r0, 8012d74 <_Quaternion__cdr_serialize+0x34>
 8012d42:	b538      	push	{r3, r4, r5, lr}
 8012d44:	ed90 0b00 	vldr	d0, [r0]
 8012d48:	460d      	mov	r5, r1
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	4608      	mov	r0, r1
 8012d4e:	f001 fb07 	bl	8014360 <ucdr_serialize_double>
 8012d52:	ed94 0b02 	vldr	d0, [r4, #8]
 8012d56:	4628      	mov	r0, r5
 8012d58:	f001 fb02 	bl	8014360 <ucdr_serialize_double>
 8012d5c:	ed94 0b04 	vldr	d0, [r4, #16]
 8012d60:	4628      	mov	r0, r5
 8012d62:	f001 fafd 	bl	8014360 <ucdr_serialize_double>
 8012d66:	ed94 0b06 	vldr	d0, [r4, #24]
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d70:	f001 baf6 	b.w	8014360 <ucdr_serialize_double>
 8012d74:	4770      	bx	lr
 8012d76:	bf00      	nop

08012d78 <_Quaternion__get_serialized_size>:
 8012d78:	b1d8      	cbz	r0, 8012db2 <_Quaternion__get_serialized_size+0x3a>
 8012d7a:	b538      	push	{r3, r4, r5, lr}
 8012d7c:	2108      	movs	r1, #8
 8012d7e:	2000      	movs	r0, #0
 8012d80:	f7fb fbcc 	bl	800e51c <ucdr_alignment>
 8012d84:	f100 0408 	add.w	r4, r0, #8
 8012d88:	2108      	movs	r1, #8
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f7fb fbc6 	bl	800e51c <ucdr_alignment>
 8012d90:	f100 0508 	add.w	r5, r0, #8
 8012d94:	4425      	add	r5, r4
 8012d96:	2108      	movs	r1, #8
 8012d98:	4628      	mov	r0, r5
 8012d9a:	f7fb fbbf 	bl	800e51c <ucdr_alignment>
 8012d9e:	f100 0408 	add.w	r4, r0, #8
 8012da2:	442c      	add	r4, r5
 8012da4:	2108      	movs	r1, #8
 8012da6:	4620      	mov	r0, r4
 8012da8:	f7fb fbb8 	bl	800e51c <ucdr_alignment>
 8012dac:	3008      	adds	r0, #8
 8012dae:	4420      	add	r0, r4
 8012db0:	bd38      	pop	{r3, r4, r5, pc}
 8012db2:	4770      	bx	lr

08012db4 <_Quaternion__max_serialized_size>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	2108      	movs	r1, #8
 8012db8:	2000      	movs	r0, #0
 8012dba:	f7fb fbaf 	bl	800e51c <ucdr_alignment>
 8012dbe:	f100 0408 	add.w	r4, r0, #8
 8012dc2:	2108      	movs	r1, #8
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f7fb fba9 	bl	800e51c <ucdr_alignment>
 8012dca:	f100 0508 	add.w	r5, r0, #8
 8012dce:	4425      	add	r5, r4
 8012dd0:	2108      	movs	r1, #8
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f7fb fba2 	bl	800e51c <ucdr_alignment>
 8012dd8:	f100 0408 	add.w	r4, r0, #8
 8012ddc:	442c      	add	r4, r5
 8012dde:	2108      	movs	r1, #8
 8012de0:	4620      	mov	r0, r4
 8012de2:	f7fb fb9b 	bl	800e51c <ucdr_alignment>
 8012de6:	3008      	adds	r0, #8
 8012de8:	4420      	add	r0, r4
 8012dea:	bd38      	pop	{r3, r4, r5, pc}

08012dec <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8012dec:	b570      	push	{r4, r5, r6, lr}
 8012dee:	2301      	movs	r3, #1
 8012df0:	460c      	mov	r4, r1
 8012df2:	7003      	strb	r3, [r0, #0]
 8012df4:	2108      	movs	r1, #8
 8012df6:	4620      	mov	r0, r4
 8012df8:	f7fb fb90 	bl	800e51c <ucdr_alignment>
 8012dfc:	2108      	movs	r1, #8
 8012dfe:	1863      	adds	r3, r4, r1
 8012e00:	18c5      	adds	r5, r0, r3
 8012e02:	4628      	mov	r0, r5
 8012e04:	f7fb fb8a 	bl	800e51c <ucdr_alignment>
 8012e08:	f100 0608 	add.w	r6, r0, #8
 8012e0c:	442e      	add	r6, r5
 8012e0e:	2108      	movs	r1, #8
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7fb fb83 	bl	800e51c <ucdr_alignment>
 8012e16:	f100 0508 	add.w	r5, r0, #8
 8012e1a:	4435      	add	r5, r6
 8012e1c:	2108      	movs	r1, #8
 8012e1e:	4628      	mov	r0, r5
 8012e20:	f7fb fb7c 	bl	800e51c <ucdr_alignment>
 8012e24:	f1c4 0408 	rsb	r4, r4, #8
 8012e28:	4420      	add	r0, r4
 8012e2a:	4428      	add	r0, r5
 8012e2c:	bd70      	pop	{r4, r5, r6, pc}
 8012e2e:	bf00      	nop

08012e30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8012e30:	4800      	ldr	r0, [pc, #0]	@ (8012e34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8012e32:	4770      	bx	lr
 8012e34:	20000cb0 	.word	0x20000cb0

08012e38 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8012e38:	b1b8      	cbz	r0, 8012e6a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8012e3a:	b570      	push	{r4, r5, r6, lr}
 8012e3c:	460d      	mov	r5, r1
 8012e3e:	4628      	mov	r0, r5
 8012e40:	2108      	movs	r1, #8
 8012e42:	f7fb fb6b 	bl	800e51c <ucdr_alignment>
 8012e46:	2108      	movs	r1, #8
 8012e48:	186e      	adds	r6, r5, r1
 8012e4a:	4406      	add	r6, r0
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f7fb fb65 	bl	800e51c <ucdr_alignment>
 8012e52:	f100 0408 	add.w	r4, r0, #8
 8012e56:	4434      	add	r4, r6
 8012e58:	2108      	movs	r1, #8
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7fb fb5e 	bl	800e51c <ucdr_alignment>
 8012e60:	f1c5 0508 	rsb	r5, r5, #8
 8012e64:	4405      	add	r5, r0
 8012e66:	1928      	adds	r0, r5, r4
 8012e68:	bd70      	pop	{r4, r5, r6, pc}
 8012e6a:	4770      	bx	lr

08012e6c <_Vector3__cdr_deserialize>:
 8012e6c:	b538      	push	{r3, r4, r5, lr}
 8012e6e:	460c      	mov	r4, r1
 8012e70:	b171      	cbz	r1, 8012e90 <_Vector3__cdr_deserialize+0x24>
 8012e72:	4605      	mov	r5, r0
 8012e74:	f001 fc04 	bl	8014680 <ucdr_deserialize_double>
 8012e78:	f104 0108 	add.w	r1, r4, #8
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f001 fbff 	bl	8014680 <ucdr_deserialize_double>
 8012e82:	f104 0110 	add.w	r1, r4, #16
 8012e86:	4628      	mov	r0, r5
 8012e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e8c:	f001 bbf8 	b.w	8014680 <ucdr_deserialize_double>
 8012e90:	4608      	mov	r0, r1
 8012e92:	bd38      	pop	{r3, r4, r5, pc}

08012e94 <_Vector3__cdr_serialize>:
 8012e94:	b198      	cbz	r0, 8012ebe <_Vector3__cdr_serialize+0x2a>
 8012e96:	b538      	push	{r3, r4, r5, lr}
 8012e98:	ed90 0b00 	vldr	d0, [r0]
 8012e9c:	460d      	mov	r5, r1
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	4608      	mov	r0, r1
 8012ea2:	f001 fa5d 	bl	8014360 <ucdr_serialize_double>
 8012ea6:	ed94 0b02 	vldr	d0, [r4, #8]
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f001 fa58 	bl	8014360 <ucdr_serialize_double>
 8012eb0:	ed94 0b04 	vldr	d0, [r4, #16]
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eba:	f001 ba51 	b.w	8014360 <ucdr_serialize_double>
 8012ebe:	4770      	bx	lr

08012ec0 <_Vector3__get_serialized_size>:
 8012ec0:	b1a0      	cbz	r0, 8012eec <_Vector3__get_serialized_size+0x2c>
 8012ec2:	b538      	push	{r3, r4, r5, lr}
 8012ec4:	2108      	movs	r1, #8
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	f7fb fb28 	bl	800e51c <ucdr_alignment>
 8012ecc:	f100 0508 	add.w	r5, r0, #8
 8012ed0:	2108      	movs	r1, #8
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f7fb fb22 	bl	800e51c <ucdr_alignment>
 8012ed8:	f100 0408 	add.w	r4, r0, #8
 8012edc:	442c      	add	r4, r5
 8012ede:	2108      	movs	r1, #8
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f7fb fb1b 	bl	800e51c <ucdr_alignment>
 8012ee6:	3008      	adds	r0, #8
 8012ee8:	4420      	add	r0, r4
 8012eea:	bd38      	pop	{r3, r4, r5, pc}
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop

08012ef0 <_Vector3__max_serialized_size>:
 8012ef0:	b538      	push	{r3, r4, r5, lr}
 8012ef2:	2108      	movs	r1, #8
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	f7fb fb11 	bl	800e51c <ucdr_alignment>
 8012efa:	f100 0508 	add.w	r5, r0, #8
 8012efe:	2108      	movs	r1, #8
 8012f00:	4628      	mov	r0, r5
 8012f02:	f7fb fb0b 	bl	800e51c <ucdr_alignment>
 8012f06:	f100 0408 	add.w	r4, r0, #8
 8012f0a:	442c      	add	r4, r5
 8012f0c:	2108      	movs	r1, #8
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f7fb fb04 	bl	800e51c <ucdr_alignment>
 8012f14:	3008      	adds	r0, #8
 8012f16:	4420      	add	r0, r4
 8012f18:	bd38      	pop	{r3, r4, r5, pc}
 8012f1a:	bf00      	nop

08012f1c <max_serialized_size_geometry_msgs__msg__Vector3>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	2301      	movs	r3, #1
 8012f20:	460c      	mov	r4, r1
 8012f22:	7003      	strb	r3, [r0, #0]
 8012f24:	2108      	movs	r1, #8
 8012f26:	4620      	mov	r0, r4
 8012f28:	f7fb faf8 	bl	800e51c <ucdr_alignment>
 8012f2c:	2108      	movs	r1, #8
 8012f2e:	1863      	adds	r3, r4, r1
 8012f30:	18c6      	adds	r6, r0, r3
 8012f32:	4630      	mov	r0, r6
 8012f34:	f7fb faf2 	bl	800e51c <ucdr_alignment>
 8012f38:	f100 0508 	add.w	r5, r0, #8
 8012f3c:	4435      	add	r5, r6
 8012f3e:	2108      	movs	r1, #8
 8012f40:	4628      	mov	r0, r5
 8012f42:	f7fb faeb 	bl	800e51c <ucdr_alignment>
 8012f46:	f1c4 0408 	rsb	r4, r4, #8
 8012f4a:	4420      	add	r0, r4
 8012f4c:	4428      	add	r0, r5
 8012f4e:	bd70      	pop	{r4, r5, r6, pc}

08012f50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8012f50:	4800      	ldr	r0, [pc, #0]	@ (8012f54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8012f52:	4770      	bx	lr
 8012f54:	20000ce4 	.word	0x20000ce4

08012f58 <ucdr_serialize_endian_array_char>:
 8012f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	461f      	mov	r7, r3
 8012f60:	4605      	mov	r5, r0
 8012f62:	4690      	mov	r8, r2
 8012f64:	f7fb fa82 	bl	800e46c <ucdr_check_buffer_available_for>
 8012f68:	b9e0      	cbnz	r0, 8012fa4 <ucdr_serialize_endian_array_char+0x4c>
 8012f6a:	463e      	mov	r6, r7
 8012f6c:	e009      	b.n	8012f82 <ucdr_serialize_endian_array_char+0x2a>
 8012f6e:	68a8      	ldr	r0, [r5, #8]
 8012f70:	f00a ffe7 	bl	801df42 <memcpy>
 8012f74:	68ab      	ldr	r3, [r5, #8]
 8012f76:	6928      	ldr	r0, [r5, #16]
 8012f78:	4423      	add	r3, r4
 8012f7a:	4420      	add	r0, r4
 8012f7c:	1b36      	subs	r6, r6, r4
 8012f7e:	60ab      	str	r3, [r5, #8]
 8012f80:	6128      	str	r0, [r5, #16]
 8012f82:	2201      	movs	r2, #1
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	f7fb faf8 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8012f8c:	1bb9      	subs	r1, r7, r6
 8012f8e:	4604      	mov	r4, r0
 8012f90:	4602      	mov	r2, r0
 8012f92:	4441      	add	r1, r8
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d1ea      	bne.n	8012f6e <ucdr_serialize_endian_array_char+0x16>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	7da8      	ldrb	r0, [r5, #22]
 8012f9c:	756b      	strb	r3, [r5, #21]
 8012f9e:	4058      	eors	r0, r3
 8012fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa4:	463a      	mov	r2, r7
 8012fa6:	68a8      	ldr	r0, [r5, #8]
 8012fa8:	4641      	mov	r1, r8
 8012faa:	f00a ffca 	bl	801df42 <memcpy>
 8012fae:	68aa      	ldr	r2, [r5, #8]
 8012fb0:	692b      	ldr	r3, [r5, #16]
 8012fb2:	443a      	add	r2, r7
 8012fb4:	443b      	add	r3, r7
 8012fb6:	60aa      	str	r2, [r5, #8]
 8012fb8:	612b      	str	r3, [r5, #16]
 8012fba:	e7ed      	b.n	8012f98 <ucdr_serialize_endian_array_char+0x40>

08012fbc <ucdr_deserialize_endian_array_char>:
 8012fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	461f      	mov	r7, r3
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	4690      	mov	r8, r2
 8012fc8:	f7fb fa50 	bl	800e46c <ucdr_check_buffer_available_for>
 8012fcc:	b9e0      	cbnz	r0, 8013008 <ucdr_deserialize_endian_array_char+0x4c>
 8012fce:	463e      	mov	r6, r7
 8012fd0:	e009      	b.n	8012fe6 <ucdr_deserialize_endian_array_char+0x2a>
 8012fd2:	68a9      	ldr	r1, [r5, #8]
 8012fd4:	f00a ffb5 	bl	801df42 <memcpy>
 8012fd8:	68aa      	ldr	r2, [r5, #8]
 8012fda:	692b      	ldr	r3, [r5, #16]
 8012fdc:	4422      	add	r2, r4
 8012fde:	4423      	add	r3, r4
 8012fe0:	1b36      	subs	r6, r6, r4
 8012fe2:	60aa      	str	r2, [r5, #8]
 8012fe4:	612b      	str	r3, [r5, #16]
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	4631      	mov	r1, r6
 8012fea:	4628      	mov	r0, r5
 8012fec:	f7fb fac6 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	1bb8      	subs	r0, r7, r6
 8012ff4:	4622      	mov	r2, r4
 8012ff6:	4440      	add	r0, r8
 8012ff8:	2c00      	cmp	r4, #0
 8012ffa:	d1ea      	bne.n	8012fd2 <ucdr_deserialize_endian_array_char+0x16>
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	7da8      	ldrb	r0, [r5, #22]
 8013000:	756b      	strb	r3, [r5, #21]
 8013002:	4058      	eors	r0, r3
 8013004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013008:	463a      	mov	r2, r7
 801300a:	68a9      	ldr	r1, [r5, #8]
 801300c:	4640      	mov	r0, r8
 801300e:	f00a ff98 	bl	801df42 <memcpy>
 8013012:	68aa      	ldr	r2, [r5, #8]
 8013014:	692b      	ldr	r3, [r5, #16]
 8013016:	443a      	add	r2, r7
 8013018:	443b      	add	r3, r7
 801301a:	60aa      	str	r2, [r5, #8]
 801301c:	612b      	str	r3, [r5, #16]
 801301e:	e7ed      	b.n	8012ffc <ucdr_deserialize_endian_array_char+0x40>

08013020 <ucdr_serialize_array_uint8_t>:
 8013020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013024:	4688      	mov	r8, r1
 8013026:	4611      	mov	r1, r2
 8013028:	4617      	mov	r7, r2
 801302a:	4605      	mov	r5, r0
 801302c:	f7fb fa1e 	bl	800e46c <ucdr_check_buffer_available_for>
 8013030:	b9e0      	cbnz	r0, 801306c <ucdr_serialize_array_uint8_t+0x4c>
 8013032:	463e      	mov	r6, r7
 8013034:	e009      	b.n	801304a <ucdr_serialize_array_uint8_t+0x2a>
 8013036:	68a8      	ldr	r0, [r5, #8]
 8013038:	f00a ff83 	bl	801df42 <memcpy>
 801303c:	68aa      	ldr	r2, [r5, #8]
 801303e:	692b      	ldr	r3, [r5, #16]
 8013040:	4422      	add	r2, r4
 8013042:	4423      	add	r3, r4
 8013044:	1b36      	subs	r6, r6, r4
 8013046:	60aa      	str	r2, [r5, #8]
 8013048:	612b      	str	r3, [r5, #16]
 801304a:	2201      	movs	r2, #1
 801304c:	4631      	mov	r1, r6
 801304e:	4628      	mov	r0, r5
 8013050:	f7fb fa94 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8013054:	1bb9      	subs	r1, r7, r6
 8013056:	4604      	mov	r4, r0
 8013058:	4602      	mov	r2, r0
 801305a:	4441      	add	r1, r8
 801305c:	2800      	cmp	r0, #0
 801305e:	d1ea      	bne.n	8013036 <ucdr_serialize_array_uint8_t+0x16>
 8013060:	2301      	movs	r3, #1
 8013062:	7da8      	ldrb	r0, [r5, #22]
 8013064:	756b      	strb	r3, [r5, #21]
 8013066:	4058      	eors	r0, r3
 8013068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306c:	463a      	mov	r2, r7
 801306e:	68a8      	ldr	r0, [r5, #8]
 8013070:	4641      	mov	r1, r8
 8013072:	f00a ff66 	bl	801df42 <memcpy>
 8013076:	68aa      	ldr	r2, [r5, #8]
 8013078:	692b      	ldr	r3, [r5, #16]
 801307a:	443a      	add	r2, r7
 801307c:	443b      	add	r3, r7
 801307e:	60aa      	str	r2, [r5, #8]
 8013080:	612b      	str	r3, [r5, #16]
 8013082:	e7ed      	b.n	8013060 <ucdr_serialize_array_uint8_t+0x40>

08013084 <ucdr_serialize_endian_array_uint8_t>:
 8013084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013088:	4619      	mov	r1, r3
 801308a:	461f      	mov	r7, r3
 801308c:	4605      	mov	r5, r0
 801308e:	4690      	mov	r8, r2
 8013090:	f7fb f9ec 	bl	800e46c <ucdr_check_buffer_available_for>
 8013094:	b9e0      	cbnz	r0, 80130d0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013096:	463e      	mov	r6, r7
 8013098:	e009      	b.n	80130ae <ucdr_serialize_endian_array_uint8_t+0x2a>
 801309a:	68a8      	ldr	r0, [r5, #8]
 801309c:	f00a ff51 	bl	801df42 <memcpy>
 80130a0:	68ab      	ldr	r3, [r5, #8]
 80130a2:	6928      	ldr	r0, [r5, #16]
 80130a4:	4423      	add	r3, r4
 80130a6:	4420      	add	r0, r4
 80130a8:	1b36      	subs	r6, r6, r4
 80130aa:	60ab      	str	r3, [r5, #8]
 80130ac:	6128      	str	r0, [r5, #16]
 80130ae:	2201      	movs	r2, #1
 80130b0:	4631      	mov	r1, r6
 80130b2:	4628      	mov	r0, r5
 80130b4:	f7fb fa62 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 80130b8:	1bb9      	subs	r1, r7, r6
 80130ba:	4604      	mov	r4, r0
 80130bc:	4602      	mov	r2, r0
 80130be:	4441      	add	r1, r8
 80130c0:	2800      	cmp	r0, #0
 80130c2:	d1ea      	bne.n	801309a <ucdr_serialize_endian_array_uint8_t+0x16>
 80130c4:	2301      	movs	r3, #1
 80130c6:	7da8      	ldrb	r0, [r5, #22]
 80130c8:	756b      	strb	r3, [r5, #21]
 80130ca:	4058      	eors	r0, r3
 80130cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d0:	463a      	mov	r2, r7
 80130d2:	68a8      	ldr	r0, [r5, #8]
 80130d4:	4641      	mov	r1, r8
 80130d6:	f00a ff34 	bl	801df42 <memcpy>
 80130da:	68aa      	ldr	r2, [r5, #8]
 80130dc:	692b      	ldr	r3, [r5, #16]
 80130de:	443a      	add	r2, r7
 80130e0:	443b      	add	r3, r7
 80130e2:	60aa      	str	r2, [r5, #8]
 80130e4:	612b      	str	r3, [r5, #16]
 80130e6:	e7ed      	b.n	80130c4 <ucdr_serialize_endian_array_uint8_t+0x40>

080130e8 <ucdr_deserialize_array_uint8_t>:
 80130e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ec:	4688      	mov	r8, r1
 80130ee:	4611      	mov	r1, r2
 80130f0:	4617      	mov	r7, r2
 80130f2:	4605      	mov	r5, r0
 80130f4:	f7fb f9ba 	bl	800e46c <ucdr_check_buffer_available_for>
 80130f8:	b9e0      	cbnz	r0, 8013134 <ucdr_deserialize_array_uint8_t+0x4c>
 80130fa:	463e      	mov	r6, r7
 80130fc:	e009      	b.n	8013112 <ucdr_deserialize_array_uint8_t+0x2a>
 80130fe:	68a9      	ldr	r1, [r5, #8]
 8013100:	f00a ff1f 	bl	801df42 <memcpy>
 8013104:	68aa      	ldr	r2, [r5, #8]
 8013106:	692b      	ldr	r3, [r5, #16]
 8013108:	4422      	add	r2, r4
 801310a:	4423      	add	r3, r4
 801310c:	1b36      	subs	r6, r6, r4
 801310e:	60aa      	str	r2, [r5, #8]
 8013110:	612b      	str	r3, [r5, #16]
 8013112:	2201      	movs	r2, #1
 8013114:	4631      	mov	r1, r6
 8013116:	4628      	mov	r0, r5
 8013118:	f7fb fa30 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 801311c:	4604      	mov	r4, r0
 801311e:	1bb8      	subs	r0, r7, r6
 8013120:	4622      	mov	r2, r4
 8013122:	4440      	add	r0, r8
 8013124:	2c00      	cmp	r4, #0
 8013126:	d1ea      	bne.n	80130fe <ucdr_deserialize_array_uint8_t+0x16>
 8013128:	2301      	movs	r3, #1
 801312a:	7da8      	ldrb	r0, [r5, #22]
 801312c:	756b      	strb	r3, [r5, #21]
 801312e:	4058      	eors	r0, r3
 8013130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013134:	463a      	mov	r2, r7
 8013136:	68a9      	ldr	r1, [r5, #8]
 8013138:	4640      	mov	r0, r8
 801313a:	f00a ff02 	bl	801df42 <memcpy>
 801313e:	68aa      	ldr	r2, [r5, #8]
 8013140:	692b      	ldr	r3, [r5, #16]
 8013142:	443a      	add	r2, r7
 8013144:	443b      	add	r3, r7
 8013146:	60aa      	str	r2, [r5, #8]
 8013148:	612b      	str	r3, [r5, #16]
 801314a:	e7ed      	b.n	8013128 <ucdr_deserialize_array_uint8_t+0x40>

0801314c <ucdr_deserialize_endian_array_uint8_t>:
 801314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013150:	4619      	mov	r1, r3
 8013152:	461f      	mov	r7, r3
 8013154:	4605      	mov	r5, r0
 8013156:	4690      	mov	r8, r2
 8013158:	f7fb f988 	bl	800e46c <ucdr_check_buffer_available_for>
 801315c:	b9e0      	cbnz	r0, 8013198 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801315e:	463e      	mov	r6, r7
 8013160:	e009      	b.n	8013176 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013162:	68a9      	ldr	r1, [r5, #8]
 8013164:	f00a feed 	bl	801df42 <memcpy>
 8013168:	68aa      	ldr	r2, [r5, #8]
 801316a:	692b      	ldr	r3, [r5, #16]
 801316c:	4422      	add	r2, r4
 801316e:	4423      	add	r3, r4
 8013170:	1b36      	subs	r6, r6, r4
 8013172:	60aa      	str	r2, [r5, #8]
 8013174:	612b      	str	r3, [r5, #16]
 8013176:	2201      	movs	r2, #1
 8013178:	4631      	mov	r1, r6
 801317a:	4628      	mov	r0, r5
 801317c:	f7fb f9fe 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8013180:	4604      	mov	r4, r0
 8013182:	1bb8      	subs	r0, r7, r6
 8013184:	4622      	mov	r2, r4
 8013186:	4440      	add	r0, r8
 8013188:	2c00      	cmp	r4, #0
 801318a:	d1ea      	bne.n	8013162 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801318c:	2301      	movs	r3, #1
 801318e:	7da8      	ldrb	r0, [r5, #22]
 8013190:	756b      	strb	r3, [r5, #21]
 8013192:	4058      	eors	r0, r3
 8013194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013198:	463a      	mov	r2, r7
 801319a:	68a9      	ldr	r1, [r5, #8]
 801319c:	4640      	mov	r0, r8
 801319e:	f00a fed0 	bl	801df42 <memcpy>
 80131a2:	68aa      	ldr	r2, [r5, #8]
 80131a4:	692b      	ldr	r3, [r5, #16]
 80131a6:	443a      	add	r2, r7
 80131a8:	443b      	add	r3, r7
 80131aa:	60aa      	str	r2, [r5, #8]
 80131ac:	612b      	str	r3, [r5, #16]
 80131ae:	e7ed      	b.n	801318c <ucdr_deserialize_endian_array_uint8_t+0x40>

080131b0 <ucdr_serialize_array_double>:
 80131b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131b4:	460e      	mov	r6, r1
 80131b6:	2108      	movs	r1, #8
 80131b8:	4604      	mov	r4, r0
 80131ba:	4617      	mov	r7, r2
 80131bc:	f7fb f9b6 	bl	800e52c <ucdr_buffer_alignment>
 80131c0:	4601      	mov	r1, r0
 80131c2:	4620      	mov	r0, r4
 80131c4:	7d65      	ldrb	r5, [r4, #21]
 80131c6:	f7fb f9f5 	bl	800e5b4 <ucdr_advance_buffer>
 80131ca:	7d21      	ldrb	r1, [r4, #20]
 80131cc:	7565      	strb	r5, [r4, #21]
 80131ce:	2901      	cmp	r1, #1
 80131d0:	d010      	beq.n	80131f4 <ucdr_serialize_array_double+0x44>
 80131d2:	b157      	cbz	r7, 80131ea <ucdr_serialize_array_double+0x3a>
 80131d4:	2500      	movs	r5, #0
 80131d6:	e000      	b.n	80131da <ucdr_serialize_array_double+0x2a>
 80131d8:	7d21      	ldrb	r1, [r4, #20]
 80131da:	ecb6 0b02 	vldmia	r6!, {d0}
 80131de:	4620      	mov	r0, r4
 80131e0:	3501      	adds	r5, #1
 80131e2:	f001 f985 	bl	80144f0 <ucdr_serialize_endian_double>
 80131e6:	42af      	cmp	r7, r5
 80131e8:	d1f6      	bne.n	80131d8 <ucdr_serialize_array_double+0x28>
 80131ea:	7da0      	ldrb	r0, [r4, #22]
 80131ec:	f080 0001 	eor.w	r0, r0, #1
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f4:	00ff      	lsls	r7, r7, #3
 80131f6:	4639      	mov	r1, r7
 80131f8:	4620      	mov	r0, r4
 80131fa:	f7fb f937 	bl	800e46c <ucdr_check_buffer_available_for>
 80131fe:	b9f8      	cbnz	r0, 8013240 <ucdr_serialize_array_double+0x90>
 8013200:	46b8      	mov	r8, r7
 8013202:	e00a      	b.n	801321a <ucdr_serialize_array_double+0x6a>
 8013204:	68a0      	ldr	r0, [r4, #8]
 8013206:	f00a fe9c 	bl	801df42 <memcpy>
 801320a:	68a2      	ldr	r2, [r4, #8]
 801320c:	6923      	ldr	r3, [r4, #16]
 801320e:	442a      	add	r2, r5
 8013210:	442b      	add	r3, r5
 8013212:	eba8 0805 	sub.w	r8, r8, r5
 8013216:	60a2      	str	r2, [r4, #8]
 8013218:	6123      	str	r3, [r4, #16]
 801321a:	2208      	movs	r2, #8
 801321c:	4641      	mov	r1, r8
 801321e:	4620      	mov	r0, r4
 8013220:	f7fb f9ac 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8013224:	eba7 0108 	sub.w	r1, r7, r8
 8013228:	4605      	mov	r5, r0
 801322a:	4602      	mov	r2, r0
 801322c:	4431      	add	r1, r6
 801322e:	2800      	cmp	r0, #0
 8013230:	d1e8      	bne.n	8013204 <ucdr_serialize_array_double+0x54>
 8013232:	7da0      	ldrb	r0, [r4, #22]
 8013234:	2308      	movs	r3, #8
 8013236:	7563      	strb	r3, [r4, #21]
 8013238:	f080 0001 	eor.w	r0, r0, #1
 801323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013240:	463a      	mov	r2, r7
 8013242:	68a0      	ldr	r0, [r4, #8]
 8013244:	4631      	mov	r1, r6
 8013246:	f00a fe7c 	bl	801df42 <memcpy>
 801324a:	68a2      	ldr	r2, [r4, #8]
 801324c:	6923      	ldr	r3, [r4, #16]
 801324e:	443a      	add	r2, r7
 8013250:	443b      	add	r3, r7
 8013252:	60a2      	str	r2, [r4, #8]
 8013254:	6123      	str	r3, [r4, #16]
 8013256:	e7ec      	b.n	8013232 <ucdr_serialize_array_double+0x82>

08013258 <ucdr_serialize_endian_array_double>:
 8013258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801325c:	4688      	mov	r8, r1
 801325e:	2108      	movs	r1, #8
 8013260:	4604      	mov	r4, r0
 8013262:	4616      	mov	r6, r2
 8013264:	461f      	mov	r7, r3
 8013266:	f7fb f961 	bl	800e52c <ucdr_buffer_alignment>
 801326a:	4601      	mov	r1, r0
 801326c:	4620      	mov	r0, r4
 801326e:	7d65      	ldrb	r5, [r4, #21]
 8013270:	f7fb f9a0 	bl	800e5b4 <ucdr_advance_buffer>
 8013274:	f1b8 0f01 	cmp.w	r8, #1
 8013278:	7565      	strb	r5, [r4, #21]
 801327a:	d00f      	beq.n	801329c <ucdr_serialize_endian_array_double+0x44>
 801327c:	2500      	movs	r5, #0
 801327e:	b147      	cbz	r7, 8013292 <ucdr_serialize_endian_array_double+0x3a>
 8013280:	ecb6 0b02 	vldmia	r6!, {d0}
 8013284:	4641      	mov	r1, r8
 8013286:	4620      	mov	r0, r4
 8013288:	3501      	adds	r5, #1
 801328a:	f001 f931 	bl	80144f0 <ucdr_serialize_endian_double>
 801328e:	42af      	cmp	r7, r5
 8013290:	d1f6      	bne.n	8013280 <ucdr_serialize_endian_array_double+0x28>
 8013292:	7da0      	ldrb	r0, [r4, #22]
 8013294:	f080 0001 	eor.w	r0, r0, #1
 8013298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801329c:	00ff      	lsls	r7, r7, #3
 801329e:	4639      	mov	r1, r7
 80132a0:	4620      	mov	r0, r4
 80132a2:	f7fb f8e3 	bl	800e46c <ucdr_check_buffer_available_for>
 80132a6:	b9f8      	cbnz	r0, 80132e8 <ucdr_serialize_endian_array_double+0x90>
 80132a8:	46b8      	mov	r8, r7
 80132aa:	e00a      	b.n	80132c2 <ucdr_serialize_endian_array_double+0x6a>
 80132ac:	68a0      	ldr	r0, [r4, #8]
 80132ae:	f00a fe48 	bl	801df42 <memcpy>
 80132b2:	68a2      	ldr	r2, [r4, #8]
 80132b4:	6923      	ldr	r3, [r4, #16]
 80132b6:	442a      	add	r2, r5
 80132b8:	442b      	add	r3, r5
 80132ba:	eba8 0805 	sub.w	r8, r8, r5
 80132be:	60a2      	str	r2, [r4, #8]
 80132c0:	6123      	str	r3, [r4, #16]
 80132c2:	2208      	movs	r2, #8
 80132c4:	4641      	mov	r1, r8
 80132c6:	4620      	mov	r0, r4
 80132c8:	f7fb f958 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 80132cc:	eba7 0108 	sub.w	r1, r7, r8
 80132d0:	4605      	mov	r5, r0
 80132d2:	4602      	mov	r2, r0
 80132d4:	4431      	add	r1, r6
 80132d6:	2800      	cmp	r0, #0
 80132d8:	d1e8      	bne.n	80132ac <ucdr_serialize_endian_array_double+0x54>
 80132da:	7da0      	ldrb	r0, [r4, #22]
 80132dc:	2308      	movs	r3, #8
 80132de:	7563      	strb	r3, [r4, #21]
 80132e0:	f080 0001 	eor.w	r0, r0, #1
 80132e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132e8:	463a      	mov	r2, r7
 80132ea:	68a0      	ldr	r0, [r4, #8]
 80132ec:	4631      	mov	r1, r6
 80132ee:	f00a fe28 	bl	801df42 <memcpy>
 80132f2:	68a2      	ldr	r2, [r4, #8]
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	443a      	add	r2, r7
 80132f8:	443b      	add	r3, r7
 80132fa:	60a2      	str	r2, [r4, #8]
 80132fc:	6123      	str	r3, [r4, #16]
 80132fe:	e7ec      	b.n	80132da <ucdr_serialize_endian_array_double+0x82>

08013300 <ucdr_deserialize_array_double>:
 8013300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013304:	460e      	mov	r6, r1
 8013306:	2108      	movs	r1, #8
 8013308:	4604      	mov	r4, r0
 801330a:	4617      	mov	r7, r2
 801330c:	f7fb f90e 	bl	800e52c <ucdr_buffer_alignment>
 8013310:	4601      	mov	r1, r0
 8013312:	4620      	mov	r0, r4
 8013314:	7d65      	ldrb	r5, [r4, #21]
 8013316:	f7fb f94d 	bl	800e5b4 <ucdr_advance_buffer>
 801331a:	7d21      	ldrb	r1, [r4, #20]
 801331c:	7565      	strb	r5, [r4, #21]
 801331e:	2901      	cmp	r1, #1
 8013320:	d011      	beq.n	8013346 <ucdr_deserialize_array_double+0x46>
 8013322:	b15f      	cbz	r7, 801333c <ucdr_deserialize_array_double+0x3c>
 8013324:	2500      	movs	r5, #0
 8013326:	e000      	b.n	801332a <ucdr_deserialize_array_double+0x2a>
 8013328:	7d21      	ldrb	r1, [r4, #20]
 801332a:	4632      	mov	r2, r6
 801332c:	4620      	mov	r0, r4
 801332e:	3501      	adds	r5, #1
 8013330:	f001 fa64 	bl	80147fc <ucdr_deserialize_endian_double>
 8013334:	42af      	cmp	r7, r5
 8013336:	f106 0608 	add.w	r6, r6, #8
 801333a:	d1f5      	bne.n	8013328 <ucdr_deserialize_array_double+0x28>
 801333c:	7da0      	ldrb	r0, [r4, #22]
 801333e:	f080 0001 	eor.w	r0, r0, #1
 8013342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013346:	00ff      	lsls	r7, r7, #3
 8013348:	4639      	mov	r1, r7
 801334a:	4620      	mov	r0, r4
 801334c:	f7fb f88e 	bl	800e46c <ucdr_check_buffer_available_for>
 8013350:	b9f8      	cbnz	r0, 8013392 <ucdr_deserialize_array_double+0x92>
 8013352:	46b8      	mov	r8, r7
 8013354:	e00a      	b.n	801336c <ucdr_deserialize_array_double+0x6c>
 8013356:	68a1      	ldr	r1, [r4, #8]
 8013358:	f00a fdf3 	bl	801df42 <memcpy>
 801335c:	68a2      	ldr	r2, [r4, #8]
 801335e:	6923      	ldr	r3, [r4, #16]
 8013360:	442a      	add	r2, r5
 8013362:	442b      	add	r3, r5
 8013364:	eba8 0805 	sub.w	r8, r8, r5
 8013368:	60a2      	str	r2, [r4, #8]
 801336a:	6123      	str	r3, [r4, #16]
 801336c:	2208      	movs	r2, #8
 801336e:	4641      	mov	r1, r8
 8013370:	4620      	mov	r0, r4
 8013372:	f7fb f903 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8013376:	4605      	mov	r5, r0
 8013378:	eba7 0008 	sub.w	r0, r7, r8
 801337c:	462a      	mov	r2, r5
 801337e:	4430      	add	r0, r6
 8013380:	2d00      	cmp	r5, #0
 8013382:	d1e8      	bne.n	8013356 <ucdr_deserialize_array_double+0x56>
 8013384:	7da0      	ldrb	r0, [r4, #22]
 8013386:	2308      	movs	r3, #8
 8013388:	7563      	strb	r3, [r4, #21]
 801338a:	f080 0001 	eor.w	r0, r0, #1
 801338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013392:	463a      	mov	r2, r7
 8013394:	68a1      	ldr	r1, [r4, #8]
 8013396:	4630      	mov	r0, r6
 8013398:	f00a fdd3 	bl	801df42 <memcpy>
 801339c:	68a2      	ldr	r2, [r4, #8]
 801339e:	6923      	ldr	r3, [r4, #16]
 80133a0:	443a      	add	r2, r7
 80133a2:	443b      	add	r3, r7
 80133a4:	60a2      	str	r2, [r4, #8]
 80133a6:	6123      	str	r3, [r4, #16]
 80133a8:	e7ec      	b.n	8013384 <ucdr_deserialize_array_double+0x84>
 80133aa:	bf00      	nop

080133ac <ucdr_deserialize_endian_array_double>:
 80133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b0:	4688      	mov	r8, r1
 80133b2:	2108      	movs	r1, #8
 80133b4:	4605      	mov	r5, r0
 80133b6:	4614      	mov	r4, r2
 80133b8:	461f      	mov	r7, r3
 80133ba:	f7fb f8b7 	bl	800e52c <ucdr_buffer_alignment>
 80133be:	4601      	mov	r1, r0
 80133c0:	4628      	mov	r0, r5
 80133c2:	7d6e      	ldrb	r6, [r5, #21]
 80133c4:	f7fb f8f6 	bl	800e5b4 <ucdr_advance_buffer>
 80133c8:	f1b8 0f01 	cmp.w	r8, #1
 80133cc:	756e      	strb	r6, [r5, #21]
 80133ce:	d010      	beq.n	80133f2 <ucdr_deserialize_endian_array_double+0x46>
 80133d0:	2600      	movs	r6, #0
 80133d2:	b14f      	cbz	r7, 80133e8 <ucdr_deserialize_endian_array_double+0x3c>
 80133d4:	4622      	mov	r2, r4
 80133d6:	4641      	mov	r1, r8
 80133d8:	4628      	mov	r0, r5
 80133da:	3601      	adds	r6, #1
 80133dc:	f001 fa0e 	bl	80147fc <ucdr_deserialize_endian_double>
 80133e0:	42b7      	cmp	r7, r6
 80133e2:	f104 0408 	add.w	r4, r4, #8
 80133e6:	d1f5      	bne.n	80133d4 <ucdr_deserialize_endian_array_double+0x28>
 80133e8:	7da8      	ldrb	r0, [r5, #22]
 80133ea:	f080 0001 	eor.w	r0, r0, #1
 80133ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f2:	00ff      	lsls	r7, r7, #3
 80133f4:	4639      	mov	r1, r7
 80133f6:	4628      	mov	r0, r5
 80133f8:	f7fb f838 	bl	800e46c <ucdr_check_buffer_available_for>
 80133fc:	b9f8      	cbnz	r0, 801343e <ucdr_deserialize_endian_array_double+0x92>
 80133fe:	46b8      	mov	r8, r7
 8013400:	e00a      	b.n	8013418 <ucdr_deserialize_endian_array_double+0x6c>
 8013402:	68a9      	ldr	r1, [r5, #8]
 8013404:	f00a fd9d 	bl	801df42 <memcpy>
 8013408:	68aa      	ldr	r2, [r5, #8]
 801340a:	692b      	ldr	r3, [r5, #16]
 801340c:	4432      	add	r2, r6
 801340e:	4433      	add	r3, r6
 8013410:	eba8 0806 	sub.w	r8, r8, r6
 8013414:	60aa      	str	r2, [r5, #8]
 8013416:	612b      	str	r3, [r5, #16]
 8013418:	2208      	movs	r2, #8
 801341a:	4641      	mov	r1, r8
 801341c:	4628      	mov	r0, r5
 801341e:	f7fb f8ad 	bl	800e57c <ucdr_check_final_buffer_behavior_array>
 8013422:	4606      	mov	r6, r0
 8013424:	eba7 0008 	sub.w	r0, r7, r8
 8013428:	4632      	mov	r2, r6
 801342a:	4420      	add	r0, r4
 801342c:	2e00      	cmp	r6, #0
 801342e:	d1e8      	bne.n	8013402 <ucdr_deserialize_endian_array_double+0x56>
 8013430:	7da8      	ldrb	r0, [r5, #22]
 8013432:	2308      	movs	r3, #8
 8013434:	756b      	strb	r3, [r5, #21]
 8013436:	f080 0001 	eor.w	r0, r0, #1
 801343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343e:	463a      	mov	r2, r7
 8013440:	68a9      	ldr	r1, [r5, #8]
 8013442:	4620      	mov	r0, r4
 8013444:	f00a fd7d 	bl	801df42 <memcpy>
 8013448:	68aa      	ldr	r2, [r5, #8]
 801344a:	692b      	ldr	r3, [r5, #16]
 801344c:	443a      	add	r2, r7
 801344e:	443b      	add	r3, r7
 8013450:	60aa      	str	r2, [r5, #8]
 8013452:	612b      	str	r3, [r5, #16]
 8013454:	e7ec      	b.n	8013430 <ucdr_deserialize_endian_array_double+0x84>
 8013456:	bf00      	nop

08013458 <ucdr_serialize_bool>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	460d      	mov	r5, r1
 801345c:	2101      	movs	r1, #1
 801345e:	4604      	mov	r4, r0
 8013460:	f7fb f810 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013464:	b148      	cbz	r0, 801347a <ucdr_serialize_bool+0x22>
 8013466:	68a3      	ldr	r3, [r4, #8]
 8013468:	701d      	strb	r5, [r3, #0]
 801346a:	68a2      	ldr	r2, [r4, #8]
 801346c:	6923      	ldr	r3, [r4, #16]
 801346e:	2101      	movs	r1, #1
 8013470:	440a      	add	r2, r1
 8013472:	440b      	add	r3, r1
 8013474:	60a2      	str	r2, [r4, #8]
 8013476:	6123      	str	r3, [r4, #16]
 8013478:	7561      	strb	r1, [r4, #21]
 801347a:	7da0      	ldrb	r0, [r4, #22]
 801347c:	f080 0001 	eor.w	r0, r0, #1
 8013480:	bd38      	pop	{r3, r4, r5, pc}
 8013482:	bf00      	nop

08013484 <ucdr_deserialize_bool>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	460d      	mov	r5, r1
 8013488:	2101      	movs	r1, #1
 801348a:	4604      	mov	r4, r0
 801348c:	f7fa fffa 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013490:	b160      	cbz	r0, 80134ac <ucdr_deserialize_bool+0x28>
 8013492:	68a2      	ldr	r2, [r4, #8]
 8013494:	6923      	ldr	r3, [r4, #16]
 8013496:	f812 1b01 	ldrb.w	r1, [r2], #1
 801349a:	3900      	subs	r1, #0
 801349c:	bf18      	it	ne
 801349e:	2101      	movne	r1, #1
 80134a0:	7029      	strb	r1, [r5, #0]
 80134a2:	3301      	adds	r3, #1
 80134a4:	2101      	movs	r1, #1
 80134a6:	60a2      	str	r2, [r4, #8]
 80134a8:	6123      	str	r3, [r4, #16]
 80134aa:	7561      	strb	r1, [r4, #21]
 80134ac:	7da0      	ldrb	r0, [r4, #22]
 80134ae:	f080 0001 	eor.w	r0, r0, #1
 80134b2:	bd38      	pop	{r3, r4, r5, pc}

080134b4 <ucdr_serialize_uint8_t>:
 80134b4:	b538      	push	{r3, r4, r5, lr}
 80134b6:	460d      	mov	r5, r1
 80134b8:	2101      	movs	r1, #1
 80134ba:	4604      	mov	r4, r0
 80134bc:	f7fa ffe2 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80134c0:	b148      	cbz	r0, 80134d6 <ucdr_serialize_uint8_t+0x22>
 80134c2:	68a3      	ldr	r3, [r4, #8]
 80134c4:	701d      	strb	r5, [r3, #0]
 80134c6:	68a2      	ldr	r2, [r4, #8]
 80134c8:	6923      	ldr	r3, [r4, #16]
 80134ca:	2101      	movs	r1, #1
 80134cc:	440a      	add	r2, r1
 80134ce:	440b      	add	r3, r1
 80134d0:	60a2      	str	r2, [r4, #8]
 80134d2:	6123      	str	r3, [r4, #16]
 80134d4:	7561      	strb	r1, [r4, #21]
 80134d6:	7da0      	ldrb	r0, [r4, #22]
 80134d8:	f080 0001 	eor.w	r0, r0, #1
 80134dc:	bd38      	pop	{r3, r4, r5, pc}
 80134de:	bf00      	nop

080134e0 <ucdr_deserialize_uint8_t>:
 80134e0:	b538      	push	{r3, r4, r5, lr}
 80134e2:	460d      	mov	r5, r1
 80134e4:	2101      	movs	r1, #1
 80134e6:	4604      	mov	r4, r0
 80134e8:	f7fa ffcc 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80134ec:	b150      	cbz	r0, 8013504 <ucdr_deserialize_uint8_t+0x24>
 80134ee:	68a3      	ldr	r3, [r4, #8]
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	702b      	strb	r3, [r5, #0]
 80134f4:	68a2      	ldr	r2, [r4, #8]
 80134f6:	6923      	ldr	r3, [r4, #16]
 80134f8:	2101      	movs	r1, #1
 80134fa:	440a      	add	r2, r1
 80134fc:	440b      	add	r3, r1
 80134fe:	60a2      	str	r2, [r4, #8]
 8013500:	6123      	str	r3, [r4, #16]
 8013502:	7561      	strb	r1, [r4, #21]
 8013504:	7da0      	ldrb	r0, [r4, #22]
 8013506:	f080 0001 	eor.w	r0, r0, #1
 801350a:	bd38      	pop	{r3, r4, r5, pc}

0801350c <ucdr_serialize_uint16_t>:
 801350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013510:	b082      	sub	sp, #8
 8013512:	460b      	mov	r3, r1
 8013514:	2102      	movs	r1, #2
 8013516:	4604      	mov	r4, r0
 8013518:	f8ad 3006 	strh.w	r3, [sp, #6]
 801351c:	f7fb f806 	bl	800e52c <ucdr_buffer_alignment>
 8013520:	4601      	mov	r1, r0
 8013522:	4620      	mov	r0, r4
 8013524:	7d67      	ldrb	r7, [r4, #21]
 8013526:	f7fb f845 	bl	800e5b4 <ucdr_advance_buffer>
 801352a:	2102      	movs	r1, #2
 801352c:	4620      	mov	r0, r4
 801352e:	f7fa ff9d 	bl	800e46c <ucdr_check_buffer_available_for>
 8013532:	b1c0      	cbz	r0, 8013566 <ucdr_serialize_uint16_t+0x5a>
 8013534:	7d22      	ldrb	r2, [r4, #20]
 8013536:	68a3      	ldr	r3, [r4, #8]
 8013538:	2a01      	cmp	r2, #1
 801353a:	d04e      	beq.n	80135da <ucdr_serialize_uint16_t+0xce>
 801353c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013540:	701a      	strb	r2, [r3, #0]
 8013542:	68a3      	ldr	r3, [r4, #8]
 8013544:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013548:	705a      	strb	r2, [r3, #1]
 801354a:	68a2      	ldr	r2, [r4, #8]
 801354c:	6923      	ldr	r3, [r4, #16]
 801354e:	3202      	adds	r2, #2
 8013550:	3302      	adds	r3, #2
 8013552:	2102      	movs	r1, #2
 8013554:	60a2      	str	r2, [r4, #8]
 8013556:	6123      	str	r3, [r4, #16]
 8013558:	7561      	strb	r1, [r4, #21]
 801355a:	7da0      	ldrb	r0, [r4, #22]
 801355c:	f080 0001 	eor.w	r0, r0, #1
 8013560:	b002      	add	sp, #8
 8013562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013566:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801356a:	42ab      	cmp	r3, r5
 801356c:	d923      	bls.n	80135b6 <ucdr_serialize_uint16_t+0xaa>
 801356e:	1b5e      	subs	r6, r3, r5
 8013570:	60a3      	str	r3, [r4, #8]
 8013572:	6923      	ldr	r3, [r4, #16]
 8013574:	f1c6 0802 	rsb	r8, r6, #2
 8013578:	4433      	add	r3, r6
 801357a:	6123      	str	r3, [r4, #16]
 801357c:	4641      	mov	r1, r8
 801357e:	4620      	mov	r0, r4
 8013580:	f7fa ff80 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013584:	b368      	cbz	r0, 80135e2 <ucdr_serialize_uint16_t+0xd6>
 8013586:	7d23      	ldrb	r3, [r4, #20]
 8013588:	2b01      	cmp	r3, #1
 801358a:	d03b      	beq.n	8013604 <ucdr_serialize_uint16_t+0xf8>
 801358c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013590:	702b      	strb	r3, [r5, #0]
 8013592:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013596:	706b      	strb	r3, [r5, #1]
 8013598:	6923      	ldr	r3, [r4, #16]
 801359a:	68a2      	ldr	r2, [r4, #8]
 801359c:	7da0      	ldrb	r0, [r4, #22]
 801359e:	3302      	adds	r3, #2
 80135a0:	4442      	add	r2, r8
 80135a2:	1b9b      	subs	r3, r3, r6
 80135a4:	2102      	movs	r1, #2
 80135a6:	f080 0001 	eor.w	r0, r0, #1
 80135aa:	60a2      	str	r2, [r4, #8]
 80135ac:	6123      	str	r3, [r4, #16]
 80135ae:	7561      	strb	r1, [r4, #21]
 80135b0:	b002      	add	sp, #8
 80135b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b6:	2102      	movs	r1, #2
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7fa ff63 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80135be:	2800      	cmp	r0, #0
 80135c0:	d0cb      	beq.n	801355a <ucdr_serialize_uint16_t+0x4e>
 80135c2:	7d23      	ldrb	r3, [r4, #20]
 80135c4:	68a2      	ldr	r2, [r4, #8]
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d018      	beq.n	80135fc <ucdr_serialize_uint16_t+0xf0>
 80135ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80135ce:	7013      	strb	r3, [r2, #0]
 80135d0:	68a3      	ldr	r3, [r4, #8]
 80135d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80135d6:	705a      	strb	r2, [r3, #1]
 80135d8:	e7b7      	b.n	801354a <ucdr_serialize_uint16_t+0x3e>
 80135da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80135de:	801a      	strh	r2, [r3, #0]
 80135e0:	e7b3      	b.n	801354a <ucdr_serialize_uint16_t+0x3e>
 80135e2:	68a2      	ldr	r2, [r4, #8]
 80135e4:	6923      	ldr	r3, [r4, #16]
 80135e6:	7da0      	ldrb	r0, [r4, #22]
 80135e8:	7567      	strb	r7, [r4, #21]
 80135ea:	1b92      	subs	r2, r2, r6
 80135ec:	1b9b      	subs	r3, r3, r6
 80135ee:	f080 0001 	eor.w	r0, r0, #1
 80135f2:	60a2      	str	r2, [r4, #8]
 80135f4:	6123      	str	r3, [r4, #16]
 80135f6:	b002      	add	sp, #8
 80135f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013600:	8013      	strh	r3, [r2, #0]
 8013602:	e7a2      	b.n	801354a <ucdr_serialize_uint16_t+0x3e>
 8013604:	4628      	mov	r0, r5
 8013606:	f10d 0506 	add.w	r5, sp, #6
 801360a:	4632      	mov	r2, r6
 801360c:	4629      	mov	r1, r5
 801360e:	f00a fc98 	bl	801df42 <memcpy>
 8013612:	68a0      	ldr	r0, [r4, #8]
 8013614:	4642      	mov	r2, r8
 8013616:	19a9      	adds	r1, r5, r6
 8013618:	f00a fc93 	bl	801df42 <memcpy>
 801361c:	e7bc      	b.n	8013598 <ucdr_serialize_uint16_t+0x8c>
 801361e:	bf00      	nop

08013620 <ucdr_serialize_endian_uint16_t>:
 8013620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013624:	b083      	sub	sp, #12
 8013626:	460d      	mov	r5, r1
 8013628:	2102      	movs	r1, #2
 801362a:	4604      	mov	r4, r0
 801362c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013630:	f7fa ff7c 	bl	800e52c <ucdr_buffer_alignment>
 8013634:	4601      	mov	r1, r0
 8013636:	4620      	mov	r0, r4
 8013638:	f894 8015 	ldrb.w	r8, [r4, #21]
 801363c:	f7fa ffba 	bl	800e5b4 <ucdr_advance_buffer>
 8013640:	2102      	movs	r1, #2
 8013642:	4620      	mov	r0, r4
 8013644:	f7fa ff12 	bl	800e46c <ucdr_check_buffer_available_for>
 8013648:	bb60      	cbnz	r0, 80136a4 <ucdr_serialize_endian_uint16_t+0x84>
 801364a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801364e:	42be      	cmp	r6, r7
 8013650:	d923      	bls.n	801369a <ucdr_serialize_endian_uint16_t+0x7a>
 8013652:	6923      	ldr	r3, [r4, #16]
 8013654:	60a6      	str	r6, [r4, #8]
 8013656:	1bf6      	subs	r6, r6, r7
 8013658:	4433      	add	r3, r6
 801365a:	f1c6 0902 	rsb	r9, r6, #2
 801365e:	6123      	str	r3, [r4, #16]
 8013660:	4649      	mov	r1, r9
 8013662:	4620      	mov	r0, r4
 8013664:	f7fa ff0e 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013668:	2800      	cmp	r0, #0
 801366a:	d037      	beq.n	80136dc <ucdr_serialize_endian_uint16_t+0xbc>
 801366c:	2d01      	cmp	r5, #1
 801366e:	d043      	beq.n	80136f8 <ucdr_serialize_endian_uint16_t+0xd8>
 8013670:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013674:	703b      	strb	r3, [r7, #0]
 8013676:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801367a:	707b      	strb	r3, [r7, #1]
 801367c:	6923      	ldr	r3, [r4, #16]
 801367e:	68a2      	ldr	r2, [r4, #8]
 8013680:	7da0      	ldrb	r0, [r4, #22]
 8013682:	3302      	adds	r3, #2
 8013684:	444a      	add	r2, r9
 8013686:	1b9b      	subs	r3, r3, r6
 8013688:	2102      	movs	r1, #2
 801368a:	f080 0001 	eor.w	r0, r0, #1
 801368e:	60a2      	str	r2, [r4, #8]
 8013690:	6123      	str	r3, [r4, #16]
 8013692:	7561      	strb	r1, [r4, #21]
 8013694:	b003      	add	sp, #12
 8013696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801369a:	2102      	movs	r1, #2
 801369c:	4620      	mov	r0, r4
 801369e:	f7fa fef1 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80136a2:	b188      	cbz	r0, 80136c8 <ucdr_serialize_endian_uint16_t+0xa8>
 80136a4:	2d01      	cmp	r5, #1
 80136a6:	68a3      	ldr	r3, [r4, #8]
 80136a8:	d014      	beq.n	80136d4 <ucdr_serialize_endian_uint16_t+0xb4>
 80136aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80136ae:	701a      	strb	r2, [r3, #0]
 80136b0:	68a3      	ldr	r3, [r4, #8]
 80136b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136b6:	705a      	strb	r2, [r3, #1]
 80136b8:	68a2      	ldr	r2, [r4, #8]
 80136ba:	6923      	ldr	r3, [r4, #16]
 80136bc:	3202      	adds	r2, #2
 80136be:	3302      	adds	r3, #2
 80136c0:	2102      	movs	r1, #2
 80136c2:	60a2      	str	r2, [r4, #8]
 80136c4:	6123      	str	r3, [r4, #16]
 80136c6:	7561      	strb	r1, [r4, #21]
 80136c8:	7da0      	ldrb	r0, [r4, #22]
 80136ca:	f080 0001 	eor.w	r0, r0, #1
 80136ce:	b003      	add	sp, #12
 80136d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80136d8:	801a      	strh	r2, [r3, #0]
 80136da:	e7ed      	b.n	80136b8 <ucdr_serialize_endian_uint16_t+0x98>
 80136dc:	68a2      	ldr	r2, [r4, #8]
 80136de:	6923      	ldr	r3, [r4, #16]
 80136e0:	7da0      	ldrb	r0, [r4, #22]
 80136e2:	f884 8015 	strb.w	r8, [r4, #21]
 80136e6:	1b92      	subs	r2, r2, r6
 80136e8:	1b9b      	subs	r3, r3, r6
 80136ea:	f080 0001 	eor.w	r0, r0, #1
 80136ee:	60a2      	str	r2, [r4, #8]
 80136f0:	6123      	str	r3, [r4, #16]
 80136f2:	b003      	add	sp, #12
 80136f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136f8:	f10d 0506 	add.w	r5, sp, #6
 80136fc:	4632      	mov	r2, r6
 80136fe:	4629      	mov	r1, r5
 8013700:	4638      	mov	r0, r7
 8013702:	f00a fc1e 	bl	801df42 <memcpy>
 8013706:	68a0      	ldr	r0, [r4, #8]
 8013708:	464a      	mov	r2, r9
 801370a:	19a9      	adds	r1, r5, r6
 801370c:	f00a fc19 	bl	801df42 <memcpy>
 8013710:	e7b4      	b.n	801367c <ucdr_serialize_endian_uint16_t+0x5c>
 8013712:	bf00      	nop

08013714 <ucdr_deserialize_uint16_t>:
 8013714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013718:	460d      	mov	r5, r1
 801371a:	2102      	movs	r1, #2
 801371c:	4604      	mov	r4, r0
 801371e:	f7fa ff05 	bl	800e52c <ucdr_buffer_alignment>
 8013722:	4601      	mov	r1, r0
 8013724:	4620      	mov	r0, r4
 8013726:	f894 8015 	ldrb.w	r8, [r4, #21]
 801372a:	f7fa ff43 	bl	800e5b4 <ucdr_advance_buffer>
 801372e:	2102      	movs	r1, #2
 8013730:	4620      	mov	r0, r4
 8013732:	f7fa fe9b 	bl	800e46c <ucdr_check_buffer_available_for>
 8013736:	b1a8      	cbz	r0, 8013764 <ucdr_deserialize_uint16_t+0x50>
 8013738:	7d22      	ldrb	r2, [r4, #20]
 801373a:	68a3      	ldr	r3, [r4, #8]
 801373c:	2a01      	cmp	r2, #1
 801373e:	d046      	beq.n	80137ce <ucdr_deserialize_uint16_t+0xba>
 8013740:	785b      	ldrb	r3, [r3, #1]
 8013742:	702b      	strb	r3, [r5, #0]
 8013744:	68a3      	ldr	r3, [r4, #8]
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	706b      	strb	r3, [r5, #1]
 801374a:	68a2      	ldr	r2, [r4, #8]
 801374c:	6923      	ldr	r3, [r4, #16]
 801374e:	3202      	adds	r2, #2
 8013750:	3302      	adds	r3, #2
 8013752:	2102      	movs	r1, #2
 8013754:	60a2      	str	r2, [r4, #8]
 8013756:	6123      	str	r3, [r4, #16]
 8013758:	7561      	strb	r1, [r4, #21]
 801375a:	7da0      	ldrb	r0, [r4, #22]
 801375c:	f080 0001 	eor.w	r0, r0, #1
 8013760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013764:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013768:	42be      	cmp	r6, r7
 801376a:	d920      	bls.n	80137ae <ucdr_deserialize_uint16_t+0x9a>
 801376c:	6923      	ldr	r3, [r4, #16]
 801376e:	60a6      	str	r6, [r4, #8]
 8013770:	1bf6      	subs	r6, r6, r7
 8013772:	4433      	add	r3, r6
 8013774:	f1c6 0902 	rsb	r9, r6, #2
 8013778:	6123      	str	r3, [r4, #16]
 801377a:	4649      	mov	r1, r9
 801377c:	4620      	mov	r0, r4
 801377e:	f7fa fe81 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013782:	b338      	cbz	r0, 80137d4 <ucdr_deserialize_uint16_t+0xc0>
 8013784:	7d23      	ldrb	r3, [r4, #20]
 8013786:	2b01      	cmp	r3, #1
 8013788:	d034      	beq.n	80137f4 <ucdr_deserialize_uint16_t+0xe0>
 801378a:	787b      	ldrb	r3, [r7, #1]
 801378c:	702b      	strb	r3, [r5, #0]
 801378e:	783b      	ldrb	r3, [r7, #0]
 8013790:	706b      	strb	r3, [r5, #1]
 8013792:	6923      	ldr	r3, [r4, #16]
 8013794:	68a2      	ldr	r2, [r4, #8]
 8013796:	7da0      	ldrb	r0, [r4, #22]
 8013798:	2102      	movs	r1, #2
 801379a:	3302      	adds	r3, #2
 801379c:	444a      	add	r2, r9
 801379e:	1b9b      	subs	r3, r3, r6
 80137a0:	7561      	strb	r1, [r4, #21]
 80137a2:	60a2      	str	r2, [r4, #8]
 80137a4:	6123      	str	r3, [r4, #16]
 80137a6:	f080 0001 	eor.w	r0, r0, #1
 80137aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ae:	2102      	movs	r1, #2
 80137b0:	4620      	mov	r0, r4
 80137b2:	f7fa fe67 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d0cf      	beq.n	801375a <ucdr_deserialize_uint16_t+0x46>
 80137ba:	7d23      	ldrb	r3, [r4, #20]
 80137bc:	68a2      	ldr	r2, [r4, #8]
 80137be:	2b01      	cmp	r3, #1
 80137c0:	d015      	beq.n	80137ee <ucdr_deserialize_uint16_t+0xda>
 80137c2:	7853      	ldrb	r3, [r2, #1]
 80137c4:	702b      	strb	r3, [r5, #0]
 80137c6:	68a3      	ldr	r3, [r4, #8]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	706b      	strb	r3, [r5, #1]
 80137cc:	e7bd      	b.n	801374a <ucdr_deserialize_uint16_t+0x36>
 80137ce:	881b      	ldrh	r3, [r3, #0]
 80137d0:	802b      	strh	r3, [r5, #0]
 80137d2:	e7ba      	b.n	801374a <ucdr_deserialize_uint16_t+0x36>
 80137d4:	68a2      	ldr	r2, [r4, #8]
 80137d6:	6923      	ldr	r3, [r4, #16]
 80137d8:	7da0      	ldrb	r0, [r4, #22]
 80137da:	f884 8015 	strb.w	r8, [r4, #21]
 80137de:	1b92      	subs	r2, r2, r6
 80137e0:	1b9b      	subs	r3, r3, r6
 80137e2:	60a2      	str	r2, [r4, #8]
 80137e4:	6123      	str	r3, [r4, #16]
 80137e6:	f080 0001 	eor.w	r0, r0, #1
 80137ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ee:	8813      	ldrh	r3, [r2, #0]
 80137f0:	802b      	strh	r3, [r5, #0]
 80137f2:	e7aa      	b.n	801374a <ucdr_deserialize_uint16_t+0x36>
 80137f4:	4639      	mov	r1, r7
 80137f6:	4632      	mov	r2, r6
 80137f8:	4628      	mov	r0, r5
 80137fa:	f00a fba2 	bl	801df42 <memcpy>
 80137fe:	68a1      	ldr	r1, [r4, #8]
 8013800:	464a      	mov	r2, r9
 8013802:	19a8      	adds	r0, r5, r6
 8013804:	f00a fb9d 	bl	801df42 <memcpy>
 8013808:	e7c3      	b.n	8013792 <ucdr_deserialize_uint16_t+0x7e>
 801380a:	bf00      	nop

0801380c <ucdr_deserialize_endian_uint16_t>:
 801380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013810:	460e      	mov	r6, r1
 8013812:	2102      	movs	r1, #2
 8013814:	4604      	mov	r4, r0
 8013816:	4615      	mov	r5, r2
 8013818:	f7fa fe88 	bl	800e52c <ucdr_buffer_alignment>
 801381c:	4601      	mov	r1, r0
 801381e:	4620      	mov	r0, r4
 8013820:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013824:	f7fa fec6 	bl	800e5b4 <ucdr_advance_buffer>
 8013828:	2102      	movs	r1, #2
 801382a:	4620      	mov	r0, r4
 801382c:	f7fa fe1e 	bl	800e46c <ucdr_check_buffer_available_for>
 8013830:	bb60      	cbnz	r0, 801388c <ucdr_deserialize_endian_uint16_t+0x80>
 8013832:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8013836:	4547      	cmp	r7, r8
 8013838:	d923      	bls.n	8013882 <ucdr_deserialize_endian_uint16_t+0x76>
 801383a:	6923      	ldr	r3, [r4, #16]
 801383c:	60a7      	str	r7, [r4, #8]
 801383e:	eba7 0708 	sub.w	r7, r7, r8
 8013842:	443b      	add	r3, r7
 8013844:	f1c7 0a02 	rsb	sl, r7, #2
 8013848:	6123      	str	r3, [r4, #16]
 801384a:	4651      	mov	r1, sl
 801384c:	4620      	mov	r0, r4
 801384e:	f7fa fe19 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013852:	2800      	cmp	r0, #0
 8013854:	d032      	beq.n	80138bc <ucdr_deserialize_endian_uint16_t+0xb0>
 8013856:	2e01      	cmp	r6, #1
 8013858:	d03d      	beq.n	80138d6 <ucdr_deserialize_endian_uint16_t+0xca>
 801385a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801385e:	702b      	strb	r3, [r5, #0]
 8013860:	f898 3000 	ldrb.w	r3, [r8]
 8013864:	706b      	strb	r3, [r5, #1]
 8013866:	6923      	ldr	r3, [r4, #16]
 8013868:	68a2      	ldr	r2, [r4, #8]
 801386a:	7da0      	ldrb	r0, [r4, #22]
 801386c:	2102      	movs	r1, #2
 801386e:	3302      	adds	r3, #2
 8013870:	4452      	add	r2, sl
 8013872:	1bdb      	subs	r3, r3, r7
 8013874:	7561      	strb	r1, [r4, #21]
 8013876:	60a2      	str	r2, [r4, #8]
 8013878:	6123      	str	r3, [r4, #16]
 801387a:	f080 0001 	eor.w	r0, r0, #1
 801387e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013882:	2102      	movs	r1, #2
 8013884:	4620      	mov	r0, r4
 8013886:	f7fa fdfd 	bl	800e484 <ucdr_check_final_buffer_behavior>
 801388a:	b178      	cbz	r0, 80138ac <ucdr_deserialize_endian_uint16_t+0xa0>
 801388c:	2e01      	cmp	r6, #1
 801388e:	68a3      	ldr	r3, [r4, #8]
 8013890:	d011      	beq.n	80138b6 <ucdr_deserialize_endian_uint16_t+0xaa>
 8013892:	785b      	ldrb	r3, [r3, #1]
 8013894:	702b      	strb	r3, [r5, #0]
 8013896:	68a3      	ldr	r3, [r4, #8]
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	706b      	strb	r3, [r5, #1]
 801389c:	68a2      	ldr	r2, [r4, #8]
 801389e:	6923      	ldr	r3, [r4, #16]
 80138a0:	3202      	adds	r2, #2
 80138a2:	3302      	adds	r3, #2
 80138a4:	2102      	movs	r1, #2
 80138a6:	60a2      	str	r2, [r4, #8]
 80138a8:	6123      	str	r3, [r4, #16]
 80138aa:	7561      	strb	r1, [r4, #21]
 80138ac:	7da0      	ldrb	r0, [r4, #22]
 80138ae:	f080 0001 	eor.w	r0, r0, #1
 80138b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b6:	881b      	ldrh	r3, [r3, #0]
 80138b8:	802b      	strh	r3, [r5, #0]
 80138ba:	e7ef      	b.n	801389c <ucdr_deserialize_endian_uint16_t+0x90>
 80138bc:	68a2      	ldr	r2, [r4, #8]
 80138be:	6923      	ldr	r3, [r4, #16]
 80138c0:	7da0      	ldrb	r0, [r4, #22]
 80138c2:	f884 9015 	strb.w	r9, [r4, #21]
 80138c6:	1bd2      	subs	r2, r2, r7
 80138c8:	1bdb      	subs	r3, r3, r7
 80138ca:	60a2      	str	r2, [r4, #8]
 80138cc:	6123      	str	r3, [r4, #16]
 80138ce:	f080 0001 	eor.w	r0, r0, #1
 80138d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d6:	4641      	mov	r1, r8
 80138d8:	463a      	mov	r2, r7
 80138da:	4628      	mov	r0, r5
 80138dc:	f00a fb31 	bl	801df42 <memcpy>
 80138e0:	68a1      	ldr	r1, [r4, #8]
 80138e2:	4652      	mov	r2, sl
 80138e4:	19e8      	adds	r0, r5, r7
 80138e6:	f00a fb2c 	bl	801df42 <memcpy>
 80138ea:	e7bc      	b.n	8013866 <ucdr_deserialize_endian_uint16_t+0x5a>

080138ec <ucdr_serialize_uint32_t>:
 80138ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f0:	b082      	sub	sp, #8
 80138f2:	4604      	mov	r4, r0
 80138f4:	9101      	str	r1, [sp, #4]
 80138f6:	2104      	movs	r1, #4
 80138f8:	f7fa fe18 	bl	800e52c <ucdr_buffer_alignment>
 80138fc:	4601      	mov	r1, r0
 80138fe:	4620      	mov	r0, r4
 8013900:	7d67      	ldrb	r7, [r4, #21]
 8013902:	f7fa fe57 	bl	800e5b4 <ucdr_advance_buffer>
 8013906:	2104      	movs	r1, #4
 8013908:	4620      	mov	r0, r4
 801390a:	f7fa fdaf 	bl	800e46c <ucdr_check_buffer_available_for>
 801390e:	b300      	cbz	r0, 8013952 <ucdr_serialize_uint32_t+0x66>
 8013910:	7d22      	ldrb	r2, [r4, #20]
 8013912:	68a3      	ldr	r3, [r4, #8]
 8013914:	2a01      	cmp	r2, #1
 8013916:	d05d      	beq.n	80139d4 <ucdr_serialize_uint32_t+0xe8>
 8013918:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801391c:	701a      	strb	r2, [r3, #0]
 801391e:	68a3      	ldr	r3, [r4, #8]
 8013920:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013924:	705a      	strb	r2, [r3, #1]
 8013926:	68a3      	ldr	r3, [r4, #8]
 8013928:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801392c:	709a      	strb	r2, [r3, #2]
 801392e:	68a3      	ldr	r3, [r4, #8]
 8013930:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013934:	70da      	strb	r2, [r3, #3]
 8013936:	68a2      	ldr	r2, [r4, #8]
 8013938:	6923      	ldr	r3, [r4, #16]
 801393a:	3204      	adds	r2, #4
 801393c:	3304      	adds	r3, #4
 801393e:	2104      	movs	r1, #4
 8013940:	60a2      	str	r2, [r4, #8]
 8013942:	6123      	str	r3, [r4, #16]
 8013944:	7561      	strb	r1, [r4, #21]
 8013946:	7da0      	ldrb	r0, [r4, #22]
 8013948:	f080 0001 	eor.w	r0, r0, #1
 801394c:	b002      	add	sp, #8
 801394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013952:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013956:	42ab      	cmp	r3, r5
 8013958:	d92e      	bls.n	80139b8 <ucdr_serialize_uint32_t+0xcc>
 801395a:	1b5e      	subs	r6, r3, r5
 801395c:	60a3      	str	r3, [r4, #8]
 801395e:	6923      	ldr	r3, [r4, #16]
 8013960:	f1c6 0804 	rsb	r8, r6, #4
 8013964:	4433      	add	r3, r6
 8013966:	6123      	str	r3, [r4, #16]
 8013968:	4641      	mov	r1, r8
 801396a:	4620      	mov	r0, r4
 801396c:	f7fa fd8a 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013970:	b398      	cbz	r0, 80139da <ucdr_serialize_uint32_t+0xee>
 8013972:	7d23      	ldrb	r3, [r4, #20]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d046      	beq.n	8013a06 <ucdr_serialize_uint32_t+0x11a>
 8013978:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801397c:	702b      	strb	r3, [r5, #0]
 801397e:	2e01      	cmp	r6, #1
 8013980:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013984:	706b      	strb	r3, [r5, #1]
 8013986:	d035      	beq.n	80139f4 <ucdr_serialize_uint32_t+0x108>
 8013988:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801398c:	70ab      	strb	r3, [r5, #2]
 801398e:	2e02      	cmp	r6, #2
 8013990:	d034      	beq.n	80139fc <ucdr_serialize_uint32_t+0x110>
 8013992:	3503      	adds	r5, #3
 8013994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013998:	702b      	strb	r3, [r5, #0]
 801399a:	6923      	ldr	r3, [r4, #16]
 801399c:	68a2      	ldr	r2, [r4, #8]
 801399e:	7da0      	ldrb	r0, [r4, #22]
 80139a0:	3304      	adds	r3, #4
 80139a2:	4442      	add	r2, r8
 80139a4:	1b9b      	subs	r3, r3, r6
 80139a6:	2104      	movs	r1, #4
 80139a8:	f080 0001 	eor.w	r0, r0, #1
 80139ac:	60a2      	str	r2, [r4, #8]
 80139ae:	6123      	str	r3, [r4, #16]
 80139b0:	7561      	strb	r1, [r4, #21]
 80139b2:	b002      	add	sp, #8
 80139b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b8:	2104      	movs	r1, #4
 80139ba:	4620      	mov	r0, r4
 80139bc:	f7fa fd62 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	d0c0      	beq.n	8013946 <ucdr_serialize_uint32_t+0x5a>
 80139c4:	7d23      	ldrb	r3, [r4, #20]
 80139c6:	68a2      	ldr	r2, [r4, #8]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d019      	beq.n	8013a00 <ucdr_serialize_uint32_t+0x114>
 80139cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80139d0:	7013      	strb	r3, [r2, #0]
 80139d2:	e7a4      	b.n	801391e <ucdr_serialize_uint32_t+0x32>
 80139d4:	9a01      	ldr	r2, [sp, #4]
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	e7ad      	b.n	8013936 <ucdr_serialize_uint32_t+0x4a>
 80139da:	68a2      	ldr	r2, [r4, #8]
 80139dc:	6923      	ldr	r3, [r4, #16]
 80139de:	7da0      	ldrb	r0, [r4, #22]
 80139e0:	7567      	strb	r7, [r4, #21]
 80139e2:	1b92      	subs	r2, r2, r6
 80139e4:	1b9b      	subs	r3, r3, r6
 80139e6:	f080 0001 	eor.w	r0, r0, #1
 80139ea:	60a2      	str	r2, [r4, #8]
 80139ec:	6123      	str	r3, [r4, #16]
 80139ee:	b002      	add	sp, #8
 80139f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f4:	68a3      	ldr	r3, [r4, #8]
 80139f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80139fa:	701a      	strb	r2, [r3, #0]
 80139fc:	68a5      	ldr	r5, [r4, #8]
 80139fe:	e7c9      	b.n	8013994 <ucdr_serialize_uint32_t+0xa8>
 8013a00:	9b01      	ldr	r3, [sp, #4]
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	e797      	b.n	8013936 <ucdr_serialize_uint32_t+0x4a>
 8013a06:	4628      	mov	r0, r5
 8013a08:	ad01      	add	r5, sp, #4
 8013a0a:	4632      	mov	r2, r6
 8013a0c:	4629      	mov	r1, r5
 8013a0e:	f00a fa98 	bl	801df42 <memcpy>
 8013a12:	68a0      	ldr	r0, [r4, #8]
 8013a14:	4642      	mov	r2, r8
 8013a16:	19a9      	adds	r1, r5, r6
 8013a18:	f00a fa93 	bl	801df42 <memcpy>
 8013a1c:	e7bd      	b.n	801399a <ucdr_serialize_uint32_t+0xae>
 8013a1e:	bf00      	nop

08013a20 <ucdr_serialize_endian_uint32_t>:
 8013a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a24:	b083      	sub	sp, #12
 8013a26:	460d      	mov	r5, r1
 8013a28:	2104      	movs	r1, #4
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	9201      	str	r2, [sp, #4]
 8013a2e:	f7fa fd7d 	bl	800e52c <ucdr_buffer_alignment>
 8013a32:	4601      	mov	r1, r0
 8013a34:	4620      	mov	r0, r4
 8013a36:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013a3a:	f7fa fdbb 	bl	800e5b4 <ucdr_advance_buffer>
 8013a3e:	2104      	movs	r1, #4
 8013a40:	4620      	mov	r0, r4
 8013a42:	f7fa fd13 	bl	800e46c <ucdr_check_buffer_available_for>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d137      	bne.n	8013aba <ucdr_serialize_endian_uint32_t+0x9a>
 8013a4a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013a4e:	42b7      	cmp	r7, r6
 8013a50:	d92e      	bls.n	8013ab0 <ucdr_serialize_endian_uint32_t+0x90>
 8013a52:	6923      	ldr	r3, [r4, #16]
 8013a54:	60a7      	str	r7, [r4, #8]
 8013a56:	1bbf      	subs	r7, r7, r6
 8013a58:	443b      	add	r3, r7
 8013a5a:	f1c7 0904 	rsb	r9, r7, #4
 8013a5e:	6123      	str	r3, [r4, #16]
 8013a60:	4649      	mov	r1, r9
 8013a62:	4620      	mov	r0, r4
 8013a64:	f7fa fd0e 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d049      	beq.n	8013b00 <ucdr_serialize_endian_uint32_t+0xe0>
 8013a6c:	2d01      	cmp	r5, #1
 8013a6e:	d05b      	beq.n	8013b28 <ucdr_serialize_endian_uint32_t+0x108>
 8013a70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013a74:	7033      	strb	r3, [r6, #0]
 8013a76:	2f01      	cmp	r7, #1
 8013a78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013a7c:	7073      	strb	r3, [r6, #1]
 8013a7e:	d04d      	beq.n	8013b1c <ucdr_serialize_endian_uint32_t+0xfc>
 8013a80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013a84:	70b3      	strb	r3, [r6, #2]
 8013a86:	2f02      	cmp	r7, #2
 8013a88:	d04c      	beq.n	8013b24 <ucdr_serialize_endian_uint32_t+0x104>
 8013a8a:	3603      	adds	r6, #3
 8013a8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013a90:	7033      	strb	r3, [r6, #0]
 8013a92:	6923      	ldr	r3, [r4, #16]
 8013a94:	68a2      	ldr	r2, [r4, #8]
 8013a96:	7da0      	ldrb	r0, [r4, #22]
 8013a98:	3304      	adds	r3, #4
 8013a9a:	444a      	add	r2, r9
 8013a9c:	1bdb      	subs	r3, r3, r7
 8013a9e:	2104      	movs	r1, #4
 8013aa0:	f080 0001 	eor.w	r0, r0, #1
 8013aa4:	60a2      	str	r2, [r4, #8]
 8013aa6:	6123      	str	r3, [r4, #16]
 8013aa8:	7561      	strb	r1, [r4, #21]
 8013aaa:	b003      	add	sp, #12
 8013aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ab0:	2104      	movs	r1, #4
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f7fa fce6 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013ab8:	b1c8      	cbz	r0, 8013aee <ucdr_serialize_endian_uint32_t+0xce>
 8013aba:	2d01      	cmp	r5, #1
 8013abc:	68a3      	ldr	r3, [r4, #8]
 8013abe:	d01c      	beq.n	8013afa <ucdr_serialize_endian_uint32_t+0xda>
 8013ac0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ac4:	701a      	strb	r2, [r3, #0]
 8013ac6:	68a3      	ldr	r3, [r4, #8]
 8013ac8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013acc:	705a      	strb	r2, [r3, #1]
 8013ace:	68a3      	ldr	r3, [r4, #8]
 8013ad0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013ad4:	709a      	strb	r2, [r3, #2]
 8013ad6:	68a3      	ldr	r3, [r4, #8]
 8013ad8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013adc:	70da      	strb	r2, [r3, #3]
 8013ade:	68a2      	ldr	r2, [r4, #8]
 8013ae0:	6923      	ldr	r3, [r4, #16]
 8013ae2:	3204      	adds	r2, #4
 8013ae4:	3304      	adds	r3, #4
 8013ae6:	2104      	movs	r1, #4
 8013ae8:	60a2      	str	r2, [r4, #8]
 8013aea:	6123      	str	r3, [r4, #16]
 8013aec:	7561      	strb	r1, [r4, #21]
 8013aee:	7da0      	ldrb	r0, [r4, #22]
 8013af0:	f080 0001 	eor.w	r0, r0, #1
 8013af4:	b003      	add	sp, #12
 8013af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013afa:	9a01      	ldr	r2, [sp, #4]
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	e7ee      	b.n	8013ade <ucdr_serialize_endian_uint32_t+0xbe>
 8013b00:	68a2      	ldr	r2, [r4, #8]
 8013b02:	6923      	ldr	r3, [r4, #16]
 8013b04:	7da0      	ldrb	r0, [r4, #22]
 8013b06:	f884 8015 	strb.w	r8, [r4, #21]
 8013b0a:	1bd2      	subs	r2, r2, r7
 8013b0c:	1bdb      	subs	r3, r3, r7
 8013b0e:	f080 0001 	eor.w	r0, r0, #1
 8013b12:	60a2      	str	r2, [r4, #8]
 8013b14:	6123      	str	r3, [r4, #16]
 8013b16:	b003      	add	sp, #12
 8013b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b1c:	68a3      	ldr	r3, [r4, #8]
 8013b1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013b22:	701a      	strb	r2, [r3, #0]
 8013b24:	68a6      	ldr	r6, [r4, #8]
 8013b26:	e7b1      	b.n	8013a8c <ucdr_serialize_endian_uint32_t+0x6c>
 8013b28:	ad01      	add	r5, sp, #4
 8013b2a:	463a      	mov	r2, r7
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f00a fa07 	bl	801df42 <memcpy>
 8013b34:	68a0      	ldr	r0, [r4, #8]
 8013b36:	464a      	mov	r2, r9
 8013b38:	19e9      	adds	r1, r5, r7
 8013b3a:	f00a fa02 	bl	801df42 <memcpy>
 8013b3e:	e7a8      	b.n	8013a92 <ucdr_serialize_endian_uint32_t+0x72>

08013b40 <ucdr_deserialize_uint32_t>:
 8013b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b44:	460d      	mov	r5, r1
 8013b46:	2104      	movs	r1, #4
 8013b48:	4604      	mov	r4, r0
 8013b4a:	f7fa fcef 	bl	800e52c <ucdr_buffer_alignment>
 8013b4e:	4601      	mov	r1, r0
 8013b50:	4620      	mov	r0, r4
 8013b52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013b56:	f7fa fd2d 	bl	800e5b4 <ucdr_advance_buffer>
 8013b5a:	2104      	movs	r1, #4
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f7fa fc85 	bl	800e46c <ucdr_check_buffer_available_for>
 8013b62:	b1d8      	cbz	r0, 8013b9c <ucdr_deserialize_uint32_t+0x5c>
 8013b64:	7d22      	ldrb	r2, [r4, #20]
 8013b66:	68a3      	ldr	r3, [r4, #8]
 8013b68:	2a01      	cmp	r2, #1
 8013b6a:	d052      	beq.n	8013c12 <ucdr_deserialize_uint32_t+0xd2>
 8013b6c:	78db      	ldrb	r3, [r3, #3]
 8013b6e:	702b      	strb	r3, [r5, #0]
 8013b70:	68a3      	ldr	r3, [r4, #8]
 8013b72:	789b      	ldrb	r3, [r3, #2]
 8013b74:	706b      	strb	r3, [r5, #1]
 8013b76:	68a3      	ldr	r3, [r4, #8]
 8013b78:	785b      	ldrb	r3, [r3, #1]
 8013b7a:	70ab      	strb	r3, [r5, #2]
 8013b7c:	68a3      	ldr	r3, [r4, #8]
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	70eb      	strb	r3, [r5, #3]
 8013b82:	68a2      	ldr	r2, [r4, #8]
 8013b84:	6923      	ldr	r3, [r4, #16]
 8013b86:	3204      	adds	r2, #4
 8013b88:	3304      	adds	r3, #4
 8013b8a:	2104      	movs	r1, #4
 8013b8c:	60a2      	str	r2, [r4, #8]
 8013b8e:	6123      	str	r3, [r4, #16]
 8013b90:	7561      	strb	r1, [r4, #21]
 8013b92:	7da0      	ldrb	r0, [r4, #22]
 8013b94:	f080 0001 	eor.w	r0, r0, #1
 8013b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b9c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013ba0:	42b7      	cmp	r7, r6
 8013ba2:	d92a      	bls.n	8013bfa <ucdr_deserialize_uint32_t+0xba>
 8013ba4:	6923      	ldr	r3, [r4, #16]
 8013ba6:	60a7      	str	r7, [r4, #8]
 8013ba8:	1bbf      	subs	r7, r7, r6
 8013baa:	443b      	add	r3, r7
 8013bac:	f1c7 0904 	rsb	r9, r7, #4
 8013bb0:	6123      	str	r3, [r4, #16]
 8013bb2:	4649      	mov	r1, r9
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f7fa fc65 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013bba:	b368      	cbz	r0, 8013c18 <ucdr_deserialize_uint32_t+0xd8>
 8013bbc:	7d23      	ldrb	r3, [r4, #20]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d040      	beq.n	8013c44 <ucdr_deserialize_uint32_t+0x104>
 8013bc2:	78f3      	ldrb	r3, [r6, #3]
 8013bc4:	702b      	strb	r3, [r5, #0]
 8013bc6:	78b3      	ldrb	r3, [r6, #2]
 8013bc8:	706b      	strb	r3, [r5, #1]
 8013bca:	2f01      	cmp	r7, #1
 8013bcc:	d031      	beq.n	8013c32 <ucdr_deserialize_uint32_t+0xf2>
 8013bce:	7873      	ldrb	r3, [r6, #1]
 8013bd0:	70ab      	strb	r3, [r5, #2]
 8013bd2:	2f02      	cmp	r7, #2
 8013bd4:	f105 0503 	add.w	r5, r5, #3
 8013bd8:	d02f      	beq.n	8013c3a <ucdr_deserialize_uint32_t+0xfa>
 8013bda:	7833      	ldrb	r3, [r6, #0]
 8013bdc:	702b      	strb	r3, [r5, #0]
 8013bde:	6923      	ldr	r3, [r4, #16]
 8013be0:	68a2      	ldr	r2, [r4, #8]
 8013be2:	7da0      	ldrb	r0, [r4, #22]
 8013be4:	2104      	movs	r1, #4
 8013be6:	3304      	adds	r3, #4
 8013be8:	444a      	add	r2, r9
 8013bea:	1bdb      	subs	r3, r3, r7
 8013bec:	7561      	strb	r1, [r4, #21]
 8013bee:	60a2      	str	r2, [r4, #8]
 8013bf0:	6123      	str	r3, [r4, #16]
 8013bf2:	f080 0001 	eor.w	r0, r0, #1
 8013bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bfa:	2104      	movs	r1, #4
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f7fa fc41 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013c02:	2800      	cmp	r0, #0
 8013c04:	d0c5      	beq.n	8013b92 <ucdr_deserialize_uint32_t+0x52>
 8013c06:	7d23      	ldrb	r3, [r4, #20]
 8013c08:	68a2      	ldr	r2, [r4, #8]
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d017      	beq.n	8013c3e <ucdr_deserialize_uint32_t+0xfe>
 8013c0e:	78d3      	ldrb	r3, [r2, #3]
 8013c10:	e7ad      	b.n	8013b6e <ucdr_deserialize_uint32_t+0x2e>
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	602b      	str	r3, [r5, #0]
 8013c16:	e7b4      	b.n	8013b82 <ucdr_deserialize_uint32_t+0x42>
 8013c18:	68a2      	ldr	r2, [r4, #8]
 8013c1a:	6923      	ldr	r3, [r4, #16]
 8013c1c:	7da0      	ldrb	r0, [r4, #22]
 8013c1e:	f884 8015 	strb.w	r8, [r4, #21]
 8013c22:	1bd2      	subs	r2, r2, r7
 8013c24:	1bdb      	subs	r3, r3, r7
 8013c26:	60a2      	str	r2, [r4, #8]
 8013c28:	6123      	str	r3, [r4, #16]
 8013c2a:	f080 0001 	eor.w	r0, r0, #1
 8013c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c32:	68a3      	ldr	r3, [r4, #8]
 8013c34:	785b      	ldrb	r3, [r3, #1]
 8013c36:	70ab      	strb	r3, [r5, #2]
 8013c38:	3503      	adds	r5, #3
 8013c3a:	68a6      	ldr	r6, [r4, #8]
 8013c3c:	e7cd      	b.n	8013bda <ucdr_deserialize_uint32_t+0x9a>
 8013c3e:	6813      	ldr	r3, [r2, #0]
 8013c40:	602b      	str	r3, [r5, #0]
 8013c42:	e79e      	b.n	8013b82 <ucdr_deserialize_uint32_t+0x42>
 8013c44:	4631      	mov	r1, r6
 8013c46:	463a      	mov	r2, r7
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f00a f97a 	bl	801df42 <memcpy>
 8013c4e:	68a1      	ldr	r1, [r4, #8]
 8013c50:	464a      	mov	r2, r9
 8013c52:	19e8      	adds	r0, r5, r7
 8013c54:	f00a f975 	bl	801df42 <memcpy>
 8013c58:	e7c1      	b.n	8013bde <ucdr_deserialize_uint32_t+0x9e>
 8013c5a:	bf00      	nop

08013c5c <ucdr_deserialize_endian_uint32_t>:
 8013c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c60:	460e      	mov	r6, r1
 8013c62:	2104      	movs	r1, #4
 8013c64:	4604      	mov	r4, r0
 8013c66:	4615      	mov	r5, r2
 8013c68:	f7fa fc60 	bl	800e52c <ucdr_buffer_alignment>
 8013c6c:	4601      	mov	r1, r0
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013c74:	f7fa fc9e 	bl	800e5b4 <ucdr_advance_buffer>
 8013c78:	2104      	movs	r1, #4
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	f7fa fbf6 	bl	800e46c <ucdr_check_buffer_available_for>
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d137      	bne.n	8013cf4 <ucdr_deserialize_endian_uint32_t+0x98>
 8013c84:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013c88:	42bb      	cmp	r3, r7
 8013c8a:	d92e      	bls.n	8013cea <ucdr_deserialize_endian_uint32_t+0x8e>
 8013c8c:	eba3 0807 	sub.w	r8, r3, r7
 8013c90:	60a3      	str	r3, [r4, #8]
 8013c92:	6923      	ldr	r3, [r4, #16]
 8013c94:	f1c8 0a04 	rsb	sl, r8, #4
 8013c98:	4443      	add	r3, r8
 8013c9a:	6123      	str	r3, [r4, #16]
 8013c9c:	4651      	mov	r1, sl
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	f7fa fbf0 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d043      	beq.n	8013d30 <ucdr_deserialize_endian_uint32_t+0xd4>
 8013ca8:	2e01      	cmp	r6, #1
 8013caa:	d056      	beq.n	8013d5a <ucdr_deserialize_endian_uint32_t+0xfe>
 8013cac:	78fb      	ldrb	r3, [r7, #3]
 8013cae:	702b      	strb	r3, [r5, #0]
 8013cb0:	78bb      	ldrb	r3, [r7, #2]
 8013cb2:	706b      	strb	r3, [r5, #1]
 8013cb4:	f1b8 0f01 	cmp.w	r8, #1
 8013cb8:	d049      	beq.n	8013d4e <ucdr_deserialize_endian_uint32_t+0xf2>
 8013cba:	787b      	ldrb	r3, [r7, #1]
 8013cbc:	70ab      	strb	r3, [r5, #2]
 8013cbe:	f1b8 0f02 	cmp.w	r8, #2
 8013cc2:	f105 0503 	add.w	r5, r5, #3
 8013cc6:	d046      	beq.n	8013d56 <ucdr_deserialize_endian_uint32_t+0xfa>
 8013cc8:	783b      	ldrb	r3, [r7, #0]
 8013cca:	702b      	strb	r3, [r5, #0]
 8013ccc:	6923      	ldr	r3, [r4, #16]
 8013cce:	68a2      	ldr	r2, [r4, #8]
 8013cd0:	7da0      	ldrb	r0, [r4, #22]
 8013cd2:	2104      	movs	r1, #4
 8013cd4:	3304      	adds	r3, #4
 8013cd6:	4452      	add	r2, sl
 8013cd8:	eba3 0308 	sub.w	r3, r3, r8
 8013cdc:	7561      	strb	r1, [r4, #21]
 8013cde:	60a2      	str	r2, [r4, #8]
 8013ce0:	6123      	str	r3, [r4, #16]
 8013ce2:	f080 0001 	eor.w	r0, r0, #1
 8013ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cea:	2104      	movs	r1, #4
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7fa fbc9 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013cf2:	b1a8      	cbz	r0, 8013d20 <ucdr_deserialize_endian_uint32_t+0xc4>
 8013cf4:	2e01      	cmp	r6, #1
 8013cf6:	68a3      	ldr	r3, [r4, #8]
 8013cf8:	d017      	beq.n	8013d2a <ucdr_deserialize_endian_uint32_t+0xce>
 8013cfa:	78db      	ldrb	r3, [r3, #3]
 8013cfc:	702b      	strb	r3, [r5, #0]
 8013cfe:	68a3      	ldr	r3, [r4, #8]
 8013d00:	789b      	ldrb	r3, [r3, #2]
 8013d02:	706b      	strb	r3, [r5, #1]
 8013d04:	68a3      	ldr	r3, [r4, #8]
 8013d06:	785b      	ldrb	r3, [r3, #1]
 8013d08:	70ab      	strb	r3, [r5, #2]
 8013d0a:	68a3      	ldr	r3, [r4, #8]
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	70eb      	strb	r3, [r5, #3]
 8013d10:	68a2      	ldr	r2, [r4, #8]
 8013d12:	6923      	ldr	r3, [r4, #16]
 8013d14:	3204      	adds	r2, #4
 8013d16:	3304      	adds	r3, #4
 8013d18:	2104      	movs	r1, #4
 8013d1a:	60a2      	str	r2, [r4, #8]
 8013d1c:	6123      	str	r3, [r4, #16]
 8013d1e:	7561      	strb	r1, [r4, #21]
 8013d20:	7da0      	ldrb	r0, [r4, #22]
 8013d22:	f080 0001 	eor.w	r0, r0, #1
 8013d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	602b      	str	r3, [r5, #0]
 8013d2e:	e7ef      	b.n	8013d10 <ucdr_deserialize_endian_uint32_t+0xb4>
 8013d30:	68a2      	ldr	r2, [r4, #8]
 8013d32:	6923      	ldr	r3, [r4, #16]
 8013d34:	7da0      	ldrb	r0, [r4, #22]
 8013d36:	f884 9015 	strb.w	r9, [r4, #21]
 8013d3a:	eba2 0208 	sub.w	r2, r2, r8
 8013d3e:	eba3 0308 	sub.w	r3, r3, r8
 8013d42:	60a2      	str	r2, [r4, #8]
 8013d44:	6123      	str	r3, [r4, #16]
 8013d46:	f080 0001 	eor.w	r0, r0, #1
 8013d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d4e:	68a3      	ldr	r3, [r4, #8]
 8013d50:	785b      	ldrb	r3, [r3, #1]
 8013d52:	70ab      	strb	r3, [r5, #2]
 8013d54:	3503      	adds	r5, #3
 8013d56:	68a7      	ldr	r7, [r4, #8]
 8013d58:	e7b6      	b.n	8013cc8 <ucdr_deserialize_endian_uint32_t+0x6c>
 8013d5a:	4639      	mov	r1, r7
 8013d5c:	4642      	mov	r2, r8
 8013d5e:	4628      	mov	r0, r5
 8013d60:	f00a f8ef 	bl	801df42 <memcpy>
 8013d64:	68a1      	ldr	r1, [r4, #8]
 8013d66:	4652      	mov	r2, sl
 8013d68:	eb05 0008 	add.w	r0, r5, r8
 8013d6c:	f00a f8e9 	bl	801df42 <memcpy>
 8013d70:	e7ac      	b.n	8013ccc <ucdr_deserialize_endian_uint32_t+0x70>
 8013d72:	bf00      	nop

08013d74 <ucdr_serialize_uint64_t>:
 8013d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d78:	2108      	movs	r1, #8
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8013d82:	f7fa fbd3 	bl	800e52c <ucdr_buffer_alignment>
 8013d86:	4601      	mov	r1, r0
 8013d88:	4620      	mov	r0, r4
 8013d8a:	7d67      	ldrb	r7, [r4, #21]
 8013d8c:	f7fa fc12 	bl	800e5b4 <ucdr_advance_buffer>
 8013d90:	2108      	movs	r1, #8
 8013d92:	4620      	mov	r0, r4
 8013d94:	f7fa fb6a 	bl	800e46c <ucdr_check_buffer_available_for>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d14d      	bne.n	8013e38 <ucdr_serialize_uint64_t+0xc4>
 8013d9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013da0:	42ab      	cmp	r3, r5
 8013da2:	d944      	bls.n	8013e2e <ucdr_serialize_uint64_t+0xba>
 8013da4:	1b5e      	subs	r6, r3, r5
 8013da6:	60a3      	str	r3, [r4, #8]
 8013da8:	6923      	ldr	r3, [r4, #16]
 8013daa:	f1c6 0808 	rsb	r8, r6, #8
 8013dae:	4433      	add	r3, r6
 8013db0:	6123      	str	r3, [r4, #16]
 8013db2:	4641      	mov	r1, r8
 8013db4:	4620      	mov	r0, r4
 8013db6:	f7fa fb65 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d072      	beq.n	8013ea4 <ucdr_serialize_uint64_t+0x130>
 8013dbe:	7d23      	ldrb	r3, [r4, #20]
 8013dc0:	2b01      	cmp	r3, #1
 8013dc2:	f000 8092 	beq.w	8013eea <ucdr_serialize_uint64_t+0x176>
 8013dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013dca:	702b      	strb	r3, [r5, #0]
 8013dcc:	2e01      	cmp	r6, #1
 8013dce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013dd2:	706b      	strb	r3, [r5, #1]
 8013dd4:	d073      	beq.n	8013ebe <ucdr_serialize_uint64_t+0x14a>
 8013dd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013dda:	70ab      	strb	r3, [r5, #2]
 8013ddc:	2e02      	cmp	r6, #2
 8013dde:	d072      	beq.n	8013ec6 <ucdr_serialize_uint64_t+0x152>
 8013de0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013de4:	70eb      	strb	r3, [r5, #3]
 8013de6:	2e03      	cmp	r6, #3
 8013de8:	d071      	beq.n	8013ece <ucdr_serialize_uint64_t+0x15a>
 8013dea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013dee:	712b      	strb	r3, [r5, #4]
 8013df0:	2e04      	cmp	r6, #4
 8013df2:	d070      	beq.n	8013ed6 <ucdr_serialize_uint64_t+0x162>
 8013df4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013df8:	716b      	strb	r3, [r5, #5]
 8013dfa:	2e05      	cmp	r6, #5
 8013dfc:	d06f      	beq.n	8013ede <ucdr_serialize_uint64_t+0x16a>
 8013dfe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013e02:	71ab      	strb	r3, [r5, #6]
 8013e04:	2e06      	cmp	r6, #6
 8013e06:	d06e      	beq.n	8013ee6 <ucdr_serialize_uint64_t+0x172>
 8013e08:	3507      	adds	r5, #7
 8013e0a:	f89d 3000 	ldrb.w	r3, [sp]
 8013e0e:	702b      	strb	r3, [r5, #0]
 8013e10:	6923      	ldr	r3, [r4, #16]
 8013e12:	68a2      	ldr	r2, [r4, #8]
 8013e14:	7da0      	ldrb	r0, [r4, #22]
 8013e16:	3308      	adds	r3, #8
 8013e18:	4442      	add	r2, r8
 8013e1a:	1b9b      	subs	r3, r3, r6
 8013e1c:	2108      	movs	r1, #8
 8013e1e:	f080 0001 	eor.w	r0, r0, #1
 8013e22:	60a2      	str	r2, [r4, #8]
 8013e24:	6123      	str	r3, [r4, #16]
 8013e26:	7561      	strb	r1, [r4, #21]
 8013e28:	b002      	add	sp, #8
 8013e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e2e:	2108      	movs	r1, #8
 8013e30:	4620      	mov	r0, r4
 8013e32:	f7fa fb27 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013e36:	b350      	cbz	r0, 8013e8e <ucdr_serialize_uint64_t+0x11a>
 8013e38:	7d22      	ldrb	r2, [r4, #20]
 8013e3a:	68a3      	ldr	r3, [r4, #8]
 8013e3c:	2a01      	cmp	r2, #1
 8013e3e:	d02c      	beq.n	8013e9a <ucdr_serialize_uint64_t+0x126>
 8013e40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e44:	701a      	strb	r2, [r3, #0]
 8013e46:	68a3      	ldr	r3, [r4, #8]
 8013e48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e4c:	705a      	strb	r2, [r3, #1]
 8013e4e:	68a3      	ldr	r3, [r4, #8]
 8013e50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013e54:	709a      	strb	r2, [r3, #2]
 8013e56:	68a3      	ldr	r3, [r4, #8]
 8013e58:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013e5c:	70da      	strb	r2, [r3, #3]
 8013e5e:	68a3      	ldr	r3, [r4, #8]
 8013e60:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013e64:	711a      	strb	r2, [r3, #4]
 8013e66:	68a3      	ldr	r3, [r4, #8]
 8013e68:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013e6c:	715a      	strb	r2, [r3, #5]
 8013e6e:	68a3      	ldr	r3, [r4, #8]
 8013e70:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013e74:	719a      	strb	r2, [r3, #6]
 8013e76:	68a3      	ldr	r3, [r4, #8]
 8013e78:	f89d 2000 	ldrb.w	r2, [sp]
 8013e7c:	71da      	strb	r2, [r3, #7]
 8013e7e:	68a2      	ldr	r2, [r4, #8]
 8013e80:	6923      	ldr	r3, [r4, #16]
 8013e82:	3208      	adds	r2, #8
 8013e84:	3308      	adds	r3, #8
 8013e86:	2108      	movs	r1, #8
 8013e88:	60a2      	str	r2, [r4, #8]
 8013e8a:	6123      	str	r3, [r4, #16]
 8013e8c:	7561      	strb	r1, [r4, #21]
 8013e8e:	7da0      	ldrb	r0, [r4, #22]
 8013e90:	f080 0001 	eor.w	r0, r0, #1
 8013e94:	b002      	add	sp, #8
 8013e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013e9e:	6019      	str	r1, [r3, #0]
 8013ea0:	605a      	str	r2, [r3, #4]
 8013ea2:	e7ec      	b.n	8013e7e <ucdr_serialize_uint64_t+0x10a>
 8013ea4:	68a2      	ldr	r2, [r4, #8]
 8013ea6:	6923      	ldr	r3, [r4, #16]
 8013ea8:	7da0      	ldrb	r0, [r4, #22]
 8013eaa:	7567      	strb	r7, [r4, #21]
 8013eac:	1b92      	subs	r2, r2, r6
 8013eae:	1b9b      	subs	r3, r3, r6
 8013eb0:	f080 0001 	eor.w	r0, r0, #1
 8013eb4:	60a2      	str	r2, [r4, #8]
 8013eb6:	6123      	str	r3, [r4, #16]
 8013eb8:	b002      	add	sp, #8
 8013eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebe:	68a3      	ldr	r3, [r4, #8]
 8013ec0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013ec4:	701a      	strb	r2, [r3, #0]
 8013ec6:	68a3      	ldr	r3, [r4, #8]
 8013ec8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013ecc:	701a      	strb	r2, [r3, #0]
 8013ece:	68a3      	ldr	r3, [r4, #8]
 8013ed0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013ed4:	701a      	strb	r2, [r3, #0]
 8013ed6:	68a3      	ldr	r3, [r4, #8]
 8013ed8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013edc:	701a      	strb	r2, [r3, #0]
 8013ede:	68a3      	ldr	r3, [r4, #8]
 8013ee0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013ee4:	701a      	strb	r2, [r3, #0]
 8013ee6:	68a5      	ldr	r5, [r4, #8]
 8013ee8:	e78f      	b.n	8013e0a <ucdr_serialize_uint64_t+0x96>
 8013eea:	4628      	mov	r0, r5
 8013eec:	466d      	mov	r5, sp
 8013eee:	4632      	mov	r2, r6
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	f00a f826 	bl	801df42 <memcpy>
 8013ef6:	68a0      	ldr	r0, [r4, #8]
 8013ef8:	4642      	mov	r2, r8
 8013efa:	19a9      	adds	r1, r5, r6
 8013efc:	f00a f821 	bl	801df42 <memcpy>
 8013f00:	e786      	b.n	8013e10 <ucdr_serialize_uint64_t+0x9c>
 8013f02:	bf00      	nop

08013f04 <ucdr_serialize_int16_t>:
 8013f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f08:	b082      	sub	sp, #8
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	2102      	movs	r1, #2
 8013f0e:	4604      	mov	r4, r0
 8013f10:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f14:	f7fa fb0a 	bl	800e52c <ucdr_buffer_alignment>
 8013f18:	4601      	mov	r1, r0
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	7d67      	ldrb	r7, [r4, #21]
 8013f1e:	f7fa fb49 	bl	800e5b4 <ucdr_advance_buffer>
 8013f22:	2102      	movs	r1, #2
 8013f24:	4620      	mov	r0, r4
 8013f26:	f7fa faa1 	bl	800e46c <ucdr_check_buffer_available_for>
 8013f2a:	b1c0      	cbz	r0, 8013f5e <ucdr_serialize_int16_t+0x5a>
 8013f2c:	7d22      	ldrb	r2, [r4, #20]
 8013f2e:	68a3      	ldr	r3, [r4, #8]
 8013f30:	2a01      	cmp	r2, #1
 8013f32:	d04e      	beq.n	8013fd2 <ucdr_serialize_int16_t+0xce>
 8013f34:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	68a3      	ldr	r3, [r4, #8]
 8013f3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f40:	705a      	strb	r2, [r3, #1]
 8013f42:	68a2      	ldr	r2, [r4, #8]
 8013f44:	6923      	ldr	r3, [r4, #16]
 8013f46:	3202      	adds	r2, #2
 8013f48:	3302      	adds	r3, #2
 8013f4a:	2102      	movs	r1, #2
 8013f4c:	60a2      	str	r2, [r4, #8]
 8013f4e:	6123      	str	r3, [r4, #16]
 8013f50:	7561      	strb	r1, [r4, #21]
 8013f52:	7da0      	ldrb	r0, [r4, #22]
 8013f54:	f080 0001 	eor.w	r0, r0, #1
 8013f58:	b002      	add	sp, #8
 8013f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f5e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013f62:	42ab      	cmp	r3, r5
 8013f64:	d923      	bls.n	8013fae <ucdr_serialize_int16_t+0xaa>
 8013f66:	1b5e      	subs	r6, r3, r5
 8013f68:	60a3      	str	r3, [r4, #8]
 8013f6a:	6923      	ldr	r3, [r4, #16]
 8013f6c:	f1c6 0802 	rsb	r8, r6, #2
 8013f70:	4433      	add	r3, r6
 8013f72:	6123      	str	r3, [r4, #16]
 8013f74:	4641      	mov	r1, r8
 8013f76:	4620      	mov	r0, r4
 8013f78:	f7fa fa84 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013f7c:	b368      	cbz	r0, 8013fda <ucdr_serialize_int16_t+0xd6>
 8013f7e:	7d23      	ldrb	r3, [r4, #20]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d03b      	beq.n	8013ffc <ucdr_serialize_int16_t+0xf8>
 8013f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f88:	702b      	strb	r3, [r5, #0]
 8013f8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f8e:	706b      	strb	r3, [r5, #1]
 8013f90:	6923      	ldr	r3, [r4, #16]
 8013f92:	68a2      	ldr	r2, [r4, #8]
 8013f94:	7da0      	ldrb	r0, [r4, #22]
 8013f96:	3302      	adds	r3, #2
 8013f98:	4442      	add	r2, r8
 8013f9a:	1b9b      	subs	r3, r3, r6
 8013f9c:	2102      	movs	r1, #2
 8013f9e:	f080 0001 	eor.w	r0, r0, #1
 8013fa2:	60a2      	str	r2, [r4, #8]
 8013fa4:	6123      	str	r3, [r4, #16]
 8013fa6:	7561      	strb	r1, [r4, #21]
 8013fa8:	b002      	add	sp, #8
 8013faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fae:	2102      	movs	r1, #2
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f7fa fa67 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d0cb      	beq.n	8013f52 <ucdr_serialize_int16_t+0x4e>
 8013fba:	7d23      	ldrb	r3, [r4, #20]
 8013fbc:	68a2      	ldr	r2, [r4, #8]
 8013fbe:	2b01      	cmp	r3, #1
 8013fc0:	d018      	beq.n	8013ff4 <ucdr_serialize_int16_t+0xf0>
 8013fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013fc6:	7013      	strb	r3, [r2, #0]
 8013fc8:	68a3      	ldr	r3, [r4, #8]
 8013fca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013fce:	705a      	strb	r2, [r3, #1]
 8013fd0:	e7b7      	b.n	8013f42 <ucdr_serialize_int16_t+0x3e>
 8013fd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013fd6:	801a      	strh	r2, [r3, #0]
 8013fd8:	e7b3      	b.n	8013f42 <ucdr_serialize_int16_t+0x3e>
 8013fda:	68a2      	ldr	r2, [r4, #8]
 8013fdc:	6923      	ldr	r3, [r4, #16]
 8013fde:	7da0      	ldrb	r0, [r4, #22]
 8013fe0:	7567      	strb	r7, [r4, #21]
 8013fe2:	1b92      	subs	r2, r2, r6
 8013fe4:	1b9b      	subs	r3, r3, r6
 8013fe6:	f080 0001 	eor.w	r0, r0, #1
 8013fea:	60a2      	str	r2, [r4, #8]
 8013fec:	6123      	str	r3, [r4, #16]
 8013fee:	b002      	add	sp, #8
 8013ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ff4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013ff8:	8013      	strh	r3, [r2, #0]
 8013ffa:	e7a2      	b.n	8013f42 <ucdr_serialize_int16_t+0x3e>
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	f10d 0506 	add.w	r5, sp, #6
 8014002:	4632      	mov	r2, r6
 8014004:	4629      	mov	r1, r5
 8014006:	f009 ff9c 	bl	801df42 <memcpy>
 801400a:	68a0      	ldr	r0, [r4, #8]
 801400c:	4642      	mov	r2, r8
 801400e:	19a9      	adds	r1, r5, r6
 8014010:	f009 ff97 	bl	801df42 <memcpy>
 8014014:	e7bc      	b.n	8013f90 <ucdr_serialize_int16_t+0x8c>
 8014016:	bf00      	nop

08014018 <ucdr_deserialize_int16_t>:
 8014018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801401c:	460d      	mov	r5, r1
 801401e:	2102      	movs	r1, #2
 8014020:	4604      	mov	r4, r0
 8014022:	f7fa fa83 	bl	800e52c <ucdr_buffer_alignment>
 8014026:	4601      	mov	r1, r0
 8014028:	4620      	mov	r0, r4
 801402a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801402e:	f7fa fac1 	bl	800e5b4 <ucdr_advance_buffer>
 8014032:	2102      	movs	r1, #2
 8014034:	4620      	mov	r0, r4
 8014036:	f7fa fa19 	bl	800e46c <ucdr_check_buffer_available_for>
 801403a:	b1a8      	cbz	r0, 8014068 <ucdr_deserialize_int16_t+0x50>
 801403c:	7d22      	ldrb	r2, [r4, #20]
 801403e:	68a3      	ldr	r3, [r4, #8]
 8014040:	2a01      	cmp	r2, #1
 8014042:	d046      	beq.n	80140d2 <ucdr_deserialize_int16_t+0xba>
 8014044:	785b      	ldrb	r3, [r3, #1]
 8014046:	702b      	strb	r3, [r5, #0]
 8014048:	68a3      	ldr	r3, [r4, #8]
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	706b      	strb	r3, [r5, #1]
 801404e:	68a2      	ldr	r2, [r4, #8]
 8014050:	6923      	ldr	r3, [r4, #16]
 8014052:	3202      	adds	r2, #2
 8014054:	3302      	adds	r3, #2
 8014056:	2102      	movs	r1, #2
 8014058:	60a2      	str	r2, [r4, #8]
 801405a:	6123      	str	r3, [r4, #16]
 801405c:	7561      	strb	r1, [r4, #21]
 801405e:	7da0      	ldrb	r0, [r4, #22]
 8014060:	f080 0001 	eor.w	r0, r0, #1
 8014064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014068:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801406c:	42be      	cmp	r6, r7
 801406e:	d920      	bls.n	80140b2 <ucdr_deserialize_int16_t+0x9a>
 8014070:	6923      	ldr	r3, [r4, #16]
 8014072:	60a6      	str	r6, [r4, #8]
 8014074:	1bf6      	subs	r6, r6, r7
 8014076:	4433      	add	r3, r6
 8014078:	f1c6 0902 	rsb	r9, r6, #2
 801407c:	6123      	str	r3, [r4, #16]
 801407e:	4649      	mov	r1, r9
 8014080:	4620      	mov	r0, r4
 8014082:	f7fa f9ff 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8014086:	b338      	cbz	r0, 80140d8 <ucdr_deserialize_int16_t+0xc0>
 8014088:	7d23      	ldrb	r3, [r4, #20]
 801408a:	2b01      	cmp	r3, #1
 801408c:	d034      	beq.n	80140f8 <ucdr_deserialize_int16_t+0xe0>
 801408e:	787b      	ldrb	r3, [r7, #1]
 8014090:	702b      	strb	r3, [r5, #0]
 8014092:	783b      	ldrb	r3, [r7, #0]
 8014094:	706b      	strb	r3, [r5, #1]
 8014096:	6923      	ldr	r3, [r4, #16]
 8014098:	68a2      	ldr	r2, [r4, #8]
 801409a:	7da0      	ldrb	r0, [r4, #22]
 801409c:	2102      	movs	r1, #2
 801409e:	3302      	adds	r3, #2
 80140a0:	444a      	add	r2, r9
 80140a2:	1b9b      	subs	r3, r3, r6
 80140a4:	7561      	strb	r1, [r4, #21]
 80140a6:	60a2      	str	r2, [r4, #8]
 80140a8:	6123      	str	r3, [r4, #16]
 80140aa:	f080 0001 	eor.w	r0, r0, #1
 80140ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140b2:	2102      	movs	r1, #2
 80140b4:	4620      	mov	r0, r4
 80140b6:	f7fa f9e5 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d0cf      	beq.n	801405e <ucdr_deserialize_int16_t+0x46>
 80140be:	7d23      	ldrb	r3, [r4, #20]
 80140c0:	68a2      	ldr	r2, [r4, #8]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d015      	beq.n	80140f2 <ucdr_deserialize_int16_t+0xda>
 80140c6:	7853      	ldrb	r3, [r2, #1]
 80140c8:	702b      	strb	r3, [r5, #0]
 80140ca:	68a3      	ldr	r3, [r4, #8]
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	706b      	strb	r3, [r5, #1]
 80140d0:	e7bd      	b.n	801404e <ucdr_deserialize_int16_t+0x36>
 80140d2:	881b      	ldrh	r3, [r3, #0]
 80140d4:	802b      	strh	r3, [r5, #0]
 80140d6:	e7ba      	b.n	801404e <ucdr_deserialize_int16_t+0x36>
 80140d8:	68a2      	ldr	r2, [r4, #8]
 80140da:	6923      	ldr	r3, [r4, #16]
 80140dc:	7da0      	ldrb	r0, [r4, #22]
 80140de:	f884 8015 	strb.w	r8, [r4, #21]
 80140e2:	1b92      	subs	r2, r2, r6
 80140e4:	1b9b      	subs	r3, r3, r6
 80140e6:	60a2      	str	r2, [r4, #8]
 80140e8:	6123      	str	r3, [r4, #16]
 80140ea:	f080 0001 	eor.w	r0, r0, #1
 80140ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140f2:	8813      	ldrh	r3, [r2, #0]
 80140f4:	802b      	strh	r3, [r5, #0]
 80140f6:	e7aa      	b.n	801404e <ucdr_deserialize_int16_t+0x36>
 80140f8:	4639      	mov	r1, r7
 80140fa:	4632      	mov	r2, r6
 80140fc:	4628      	mov	r0, r5
 80140fe:	f009 ff20 	bl	801df42 <memcpy>
 8014102:	68a1      	ldr	r1, [r4, #8]
 8014104:	464a      	mov	r2, r9
 8014106:	19a8      	adds	r0, r5, r6
 8014108:	f009 ff1b 	bl	801df42 <memcpy>
 801410c:	e7c3      	b.n	8014096 <ucdr_deserialize_int16_t+0x7e>
 801410e:	bf00      	nop

08014110 <ucdr_serialize_int32_t>:
 8014110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014114:	b082      	sub	sp, #8
 8014116:	4604      	mov	r4, r0
 8014118:	9101      	str	r1, [sp, #4]
 801411a:	2104      	movs	r1, #4
 801411c:	f7fa fa06 	bl	800e52c <ucdr_buffer_alignment>
 8014120:	4601      	mov	r1, r0
 8014122:	4620      	mov	r0, r4
 8014124:	7d67      	ldrb	r7, [r4, #21]
 8014126:	f7fa fa45 	bl	800e5b4 <ucdr_advance_buffer>
 801412a:	2104      	movs	r1, #4
 801412c:	4620      	mov	r0, r4
 801412e:	f7fa f99d 	bl	800e46c <ucdr_check_buffer_available_for>
 8014132:	b300      	cbz	r0, 8014176 <ucdr_serialize_int32_t+0x66>
 8014134:	7d22      	ldrb	r2, [r4, #20]
 8014136:	68a3      	ldr	r3, [r4, #8]
 8014138:	2a01      	cmp	r2, #1
 801413a:	d05d      	beq.n	80141f8 <ucdr_serialize_int32_t+0xe8>
 801413c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014140:	701a      	strb	r2, [r3, #0]
 8014142:	68a3      	ldr	r3, [r4, #8]
 8014144:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014148:	705a      	strb	r2, [r3, #1]
 801414a:	68a3      	ldr	r3, [r4, #8]
 801414c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014150:	709a      	strb	r2, [r3, #2]
 8014152:	68a3      	ldr	r3, [r4, #8]
 8014154:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014158:	70da      	strb	r2, [r3, #3]
 801415a:	68a2      	ldr	r2, [r4, #8]
 801415c:	6923      	ldr	r3, [r4, #16]
 801415e:	3204      	adds	r2, #4
 8014160:	3304      	adds	r3, #4
 8014162:	2104      	movs	r1, #4
 8014164:	60a2      	str	r2, [r4, #8]
 8014166:	6123      	str	r3, [r4, #16]
 8014168:	7561      	strb	r1, [r4, #21]
 801416a:	7da0      	ldrb	r0, [r4, #22]
 801416c:	f080 0001 	eor.w	r0, r0, #1
 8014170:	b002      	add	sp, #8
 8014172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014176:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801417a:	42ab      	cmp	r3, r5
 801417c:	d92e      	bls.n	80141dc <ucdr_serialize_int32_t+0xcc>
 801417e:	1b5e      	subs	r6, r3, r5
 8014180:	60a3      	str	r3, [r4, #8]
 8014182:	6923      	ldr	r3, [r4, #16]
 8014184:	f1c6 0804 	rsb	r8, r6, #4
 8014188:	4433      	add	r3, r6
 801418a:	6123      	str	r3, [r4, #16]
 801418c:	4641      	mov	r1, r8
 801418e:	4620      	mov	r0, r4
 8014190:	f7fa f978 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8014194:	b398      	cbz	r0, 80141fe <ucdr_serialize_int32_t+0xee>
 8014196:	7d23      	ldrb	r3, [r4, #20]
 8014198:	2b01      	cmp	r3, #1
 801419a:	d046      	beq.n	801422a <ucdr_serialize_int32_t+0x11a>
 801419c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141a0:	702b      	strb	r3, [r5, #0]
 80141a2:	2e01      	cmp	r6, #1
 80141a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80141a8:	706b      	strb	r3, [r5, #1]
 80141aa:	d035      	beq.n	8014218 <ucdr_serialize_int32_t+0x108>
 80141ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80141b0:	70ab      	strb	r3, [r5, #2]
 80141b2:	2e02      	cmp	r6, #2
 80141b4:	d034      	beq.n	8014220 <ucdr_serialize_int32_t+0x110>
 80141b6:	3503      	adds	r5, #3
 80141b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80141bc:	702b      	strb	r3, [r5, #0]
 80141be:	6923      	ldr	r3, [r4, #16]
 80141c0:	68a2      	ldr	r2, [r4, #8]
 80141c2:	7da0      	ldrb	r0, [r4, #22]
 80141c4:	3304      	adds	r3, #4
 80141c6:	4442      	add	r2, r8
 80141c8:	1b9b      	subs	r3, r3, r6
 80141ca:	2104      	movs	r1, #4
 80141cc:	f080 0001 	eor.w	r0, r0, #1
 80141d0:	60a2      	str	r2, [r4, #8]
 80141d2:	6123      	str	r3, [r4, #16]
 80141d4:	7561      	strb	r1, [r4, #21]
 80141d6:	b002      	add	sp, #8
 80141d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141dc:	2104      	movs	r1, #4
 80141de:	4620      	mov	r0, r4
 80141e0:	f7fa f950 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	d0c0      	beq.n	801416a <ucdr_serialize_int32_t+0x5a>
 80141e8:	7d23      	ldrb	r3, [r4, #20]
 80141ea:	68a2      	ldr	r2, [r4, #8]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d019      	beq.n	8014224 <ucdr_serialize_int32_t+0x114>
 80141f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141f4:	7013      	strb	r3, [r2, #0]
 80141f6:	e7a4      	b.n	8014142 <ucdr_serialize_int32_t+0x32>
 80141f8:	9a01      	ldr	r2, [sp, #4]
 80141fa:	601a      	str	r2, [r3, #0]
 80141fc:	e7ad      	b.n	801415a <ucdr_serialize_int32_t+0x4a>
 80141fe:	68a2      	ldr	r2, [r4, #8]
 8014200:	6923      	ldr	r3, [r4, #16]
 8014202:	7da0      	ldrb	r0, [r4, #22]
 8014204:	7567      	strb	r7, [r4, #21]
 8014206:	1b92      	subs	r2, r2, r6
 8014208:	1b9b      	subs	r3, r3, r6
 801420a:	f080 0001 	eor.w	r0, r0, #1
 801420e:	60a2      	str	r2, [r4, #8]
 8014210:	6123      	str	r3, [r4, #16]
 8014212:	b002      	add	sp, #8
 8014214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014218:	68a3      	ldr	r3, [r4, #8]
 801421a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801421e:	701a      	strb	r2, [r3, #0]
 8014220:	68a5      	ldr	r5, [r4, #8]
 8014222:	e7c9      	b.n	80141b8 <ucdr_serialize_int32_t+0xa8>
 8014224:	9b01      	ldr	r3, [sp, #4]
 8014226:	6013      	str	r3, [r2, #0]
 8014228:	e797      	b.n	801415a <ucdr_serialize_int32_t+0x4a>
 801422a:	4628      	mov	r0, r5
 801422c:	ad01      	add	r5, sp, #4
 801422e:	4632      	mov	r2, r6
 8014230:	4629      	mov	r1, r5
 8014232:	f009 fe86 	bl	801df42 <memcpy>
 8014236:	68a0      	ldr	r0, [r4, #8]
 8014238:	4642      	mov	r2, r8
 801423a:	19a9      	adds	r1, r5, r6
 801423c:	f009 fe81 	bl	801df42 <memcpy>
 8014240:	e7bd      	b.n	80141be <ucdr_serialize_int32_t+0xae>
 8014242:	bf00      	nop

08014244 <ucdr_deserialize_int32_t>:
 8014244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014248:	460d      	mov	r5, r1
 801424a:	2104      	movs	r1, #4
 801424c:	4604      	mov	r4, r0
 801424e:	f7fa f96d 	bl	800e52c <ucdr_buffer_alignment>
 8014252:	4601      	mov	r1, r0
 8014254:	4620      	mov	r0, r4
 8014256:	f894 8015 	ldrb.w	r8, [r4, #21]
 801425a:	f7fa f9ab 	bl	800e5b4 <ucdr_advance_buffer>
 801425e:	2104      	movs	r1, #4
 8014260:	4620      	mov	r0, r4
 8014262:	f7fa f903 	bl	800e46c <ucdr_check_buffer_available_for>
 8014266:	b1d8      	cbz	r0, 80142a0 <ucdr_deserialize_int32_t+0x5c>
 8014268:	7d22      	ldrb	r2, [r4, #20]
 801426a:	68a3      	ldr	r3, [r4, #8]
 801426c:	2a01      	cmp	r2, #1
 801426e:	d052      	beq.n	8014316 <ucdr_deserialize_int32_t+0xd2>
 8014270:	78db      	ldrb	r3, [r3, #3]
 8014272:	702b      	strb	r3, [r5, #0]
 8014274:	68a3      	ldr	r3, [r4, #8]
 8014276:	789b      	ldrb	r3, [r3, #2]
 8014278:	706b      	strb	r3, [r5, #1]
 801427a:	68a3      	ldr	r3, [r4, #8]
 801427c:	785b      	ldrb	r3, [r3, #1]
 801427e:	70ab      	strb	r3, [r5, #2]
 8014280:	68a3      	ldr	r3, [r4, #8]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	70eb      	strb	r3, [r5, #3]
 8014286:	68a2      	ldr	r2, [r4, #8]
 8014288:	6923      	ldr	r3, [r4, #16]
 801428a:	3204      	adds	r2, #4
 801428c:	3304      	adds	r3, #4
 801428e:	2104      	movs	r1, #4
 8014290:	60a2      	str	r2, [r4, #8]
 8014292:	6123      	str	r3, [r4, #16]
 8014294:	7561      	strb	r1, [r4, #21]
 8014296:	7da0      	ldrb	r0, [r4, #22]
 8014298:	f080 0001 	eor.w	r0, r0, #1
 801429c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142a0:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80142a4:	42b7      	cmp	r7, r6
 80142a6:	d92a      	bls.n	80142fe <ucdr_deserialize_int32_t+0xba>
 80142a8:	6923      	ldr	r3, [r4, #16]
 80142aa:	60a7      	str	r7, [r4, #8]
 80142ac:	1bbf      	subs	r7, r7, r6
 80142ae:	443b      	add	r3, r7
 80142b0:	f1c7 0904 	rsb	r9, r7, #4
 80142b4:	6123      	str	r3, [r4, #16]
 80142b6:	4649      	mov	r1, r9
 80142b8:	4620      	mov	r0, r4
 80142ba:	f7fa f8e3 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80142be:	b368      	cbz	r0, 801431c <ucdr_deserialize_int32_t+0xd8>
 80142c0:	7d23      	ldrb	r3, [r4, #20]
 80142c2:	2b01      	cmp	r3, #1
 80142c4:	d040      	beq.n	8014348 <ucdr_deserialize_int32_t+0x104>
 80142c6:	78f3      	ldrb	r3, [r6, #3]
 80142c8:	702b      	strb	r3, [r5, #0]
 80142ca:	78b3      	ldrb	r3, [r6, #2]
 80142cc:	706b      	strb	r3, [r5, #1]
 80142ce:	2f01      	cmp	r7, #1
 80142d0:	d031      	beq.n	8014336 <ucdr_deserialize_int32_t+0xf2>
 80142d2:	7873      	ldrb	r3, [r6, #1]
 80142d4:	70ab      	strb	r3, [r5, #2]
 80142d6:	2f02      	cmp	r7, #2
 80142d8:	f105 0503 	add.w	r5, r5, #3
 80142dc:	d02f      	beq.n	801433e <ucdr_deserialize_int32_t+0xfa>
 80142de:	7833      	ldrb	r3, [r6, #0]
 80142e0:	702b      	strb	r3, [r5, #0]
 80142e2:	6923      	ldr	r3, [r4, #16]
 80142e4:	68a2      	ldr	r2, [r4, #8]
 80142e6:	7da0      	ldrb	r0, [r4, #22]
 80142e8:	2104      	movs	r1, #4
 80142ea:	3304      	adds	r3, #4
 80142ec:	444a      	add	r2, r9
 80142ee:	1bdb      	subs	r3, r3, r7
 80142f0:	7561      	strb	r1, [r4, #21]
 80142f2:	60a2      	str	r2, [r4, #8]
 80142f4:	6123      	str	r3, [r4, #16]
 80142f6:	f080 0001 	eor.w	r0, r0, #1
 80142fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142fe:	2104      	movs	r1, #4
 8014300:	4620      	mov	r0, r4
 8014302:	f7fa f8bf 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8014306:	2800      	cmp	r0, #0
 8014308:	d0c5      	beq.n	8014296 <ucdr_deserialize_int32_t+0x52>
 801430a:	7d23      	ldrb	r3, [r4, #20]
 801430c:	68a2      	ldr	r2, [r4, #8]
 801430e:	2b01      	cmp	r3, #1
 8014310:	d017      	beq.n	8014342 <ucdr_deserialize_int32_t+0xfe>
 8014312:	78d3      	ldrb	r3, [r2, #3]
 8014314:	e7ad      	b.n	8014272 <ucdr_deserialize_int32_t+0x2e>
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	602b      	str	r3, [r5, #0]
 801431a:	e7b4      	b.n	8014286 <ucdr_deserialize_int32_t+0x42>
 801431c:	68a2      	ldr	r2, [r4, #8]
 801431e:	6923      	ldr	r3, [r4, #16]
 8014320:	7da0      	ldrb	r0, [r4, #22]
 8014322:	f884 8015 	strb.w	r8, [r4, #21]
 8014326:	1bd2      	subs	r2, r2, r7
 8014328:	1bdb      	subs	r3, r3, r7
 801432a:	60a2      	str	r2, [r4, #8]
 801432c:	6123      	str	r3, [r4, #16]
 801432e:	f080 0001 	eor.w	r0, r0, #1
 8014332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014336:	68a3      	ldr	r3, [r4, #8]
 8014338:	785b      	ldrb	r3, [r3, #1]
 801433a:	70ab      	strb	r3, [r5, #2]
 801433c:	3503      	adds	r5, #3
 801433e:	68a6      	ldr	r6, [r4, #8]
 8014340:	e7cd      	b.n	80142de <ucdr_deserialize_int32_t+0x9a>
 8014342:	6813      	ldr	r3, [r2, #0]
 8014344:	602b      	str	r3, [r5, #0]
 8014346:	e79e      	b.n	8014286 <ucdr_deserialize_int32_t+0x42>
 8014348:	4631      	mov	r1, r6
 801434a:	463a      	mov	r2, r7
 801434c:	4628      	mov	r0, r5
 801434e:	f009 fdf8 	bl	801df42 <memcpy>
 8014352:	68a1      	ldr	r1, [r4, #8]
 8014354:	464a      	mov	r2, r9
 8014356:	19e8      	adds	r0, r5, r7
 8014358:	f009 fdf3 	bl	801df42 <memcpy>
 801435c:	e7c1      	b.n	80142e2 <ucdr_deserialize_int32_t+0x9e>
 801435e:	bf00      	nop

08014360 <ucdr_serialize_double>:
 8014360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014364:	2108      	movs	r1, #8
 8014366:	b082      	sub	sp, #8
 8014368:	4604      	mov	r4, r0
 801436a:	ed8d 0b00 	vstr	d0, [sp]
 801436e:	f7fa f8dd 	bl	800e52c <ucdr_buffer_alignment>
 8014372:	4601      	mov	r1, r0
 8014374:	4620      	mov	r0, r4
 8014376:	7d67      	ldrb	r7, [r4, #21]
 8014378:	f7fa f91c 	bl	800e5b4 <ucdr_advance_buffer>
 801437c:	2108      	movs	r1, #8
 801437e:	4620      	mov	r0, r4
 8014380:	f7fa f874 	bl	800e46c <ucdr_check_buffer_available_for>
 8014384:	2800      	cmp	r0, #0
 8014386:	d14d      	bne.n	8014424 <ucdr_serialize_double+0xc4>
 8014388:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801438c:	42ab      	cmp	r3, r5
 801438e:	d944      	bls.n	801441a <ucdr_serialize_double+0xba>
 8014390:	1b5e      	subs	r6, r3, r5
 8014392:	60a3      	str	r3, [r4, #8]
 8014394:	6923      	ldr	r3, [r4, #16]
 8014396:	f1c6 0808 	rsb	r8, r6, #8
 801439a:	4433      	add	r3, r6
 801439c:	6123      	str	r3, [r4, #16]
 801439e:	4641      	mov	r1, r8
 80143a0:	4620      	mov	r0, r4
 80143a2:	f7fa f86f 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d072      	beq.n	8014490 <ucdr_serialize_double+0x130>
 80143aa:	7d23      	ldrb	r3, [r4, #20]
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	f000 8092 	beq.w	80144d6 <ucdr_serialize_double+0x176>
 80143b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80143b6:	702b      	strb	r3, [r5, #0]
 80143b8:	2e01      	cmp	r6, #1
 80143ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80143be:	706b      	strb	r3, [r5, #1]
 80143c0:	d073      	beq.n	80144aa <ucdr_serialize_double+0x14a>
 80143c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80143c6:	70ab      	strb	r3, [r5, #2]
 80143c8:	2e02      	cmp	r6, #2
 80143ca:	d072      	beq.n	80144b2 <ucdr_serialize_double+0x152>
 80143cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80143d0:	70eb      	strb	r3, [r5, #3]
 80143d2:	2e03      	cmp	r6, #3
 80143d4:	d071      	beq.n	80144ba <ucdr_serialize_double+0x15a>
 80143d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80143da:	712b      	strb	r3, [r5, #4]
 80143dc:	2e04      	cmp	r6, #4
 80143de:	d070      	beq.n	80144c2 <ucdr_serialize_double+0x162>
 80143e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80143e4:	716b      	strb	r3, [r5, #5]
 80143e6:	2e05      	cmp	r6, #5
 80143e8:	d06f      	beq.n	80144ca <ucdr_serialize_double+0x16a>
 80143ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80143ee:	71ab      	strb	r3, [r5, #6]
 80143f0:	2e06      	cmp	r6, #6
 80143f2:	d06e      	beq.n	80144d2 <ucdr_serialize_double+0x172>
 80143f4:	3507      	adds	r5, #7
 80143f6:	f89d 3000 	ldrb.w	r3, [sp]
 80143fa:	702b      	strb	r3, [r5, #0]
 80143fc:	6923      	ldr	r3, [r4, #16]
 80143fe:	68a2      	ldr	r2, [r4, #8]
 8014400:	7da0      	ldrb	r0, [r4, #22]
 8014402:	3308      	adds	r3, #8
 8014404:	4442      	add	r2, r8
 8014406:	1b9b      	subs	r3, r3, r6
 8014408:	2108      	movs	r1, #8
 801440a:	f080 0001 	eor.w	r0, r0, #1
 801440e:	60a2      	str	r2, [r4, #8]
 8014410:	6123      	str	r3, [r4, #16]
 8014412:	7561      	strb	r1, [r4, #21]
 8014414:	b002      	add	sp, #8
 8014416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801441a:	2108      	movs	r1, #8
 801441c:	4620      	mov	r0, r4
 801441e:	f7fa f831 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8014422:	b350      	cbz	r0, 801447a <ucdr_serialize_double+0x11a>
 8014424:	7d22      	ldrb	r2, [r4, #20]
 8014426:	68a3      	ldr	r3, [r4, #8]
 8014428:	2a01      	cmp	r2, #1
 801442a:	d02c      	beq.n	8014486 <ucdr_serialize_double+0x126>
 801442c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014430:	701a      	strb	r2, [r3, #0]
 8014432:	68a3      	ldr	r3, [r4, #8]
 8014434:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014438:	705a      	strb	r2, [r3, #1]
 801443a:	68a3      	ldr	r3, [r4, #8]
 801443c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014440:	709a      	strb	r2, [r3, #2]
 8014442:	68a3      	ldr	r3, [r4, #8]
 8014444:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014448:	70da      	strb	r2, [r3, #3]
 801444a:	68a3      	ldr	r3, [r4, #8]
 801444c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014450:	711a      	strb	r2, [r3, #4]
 8014452:	68a3      	ldr	r3, [r4, #8]
 8014454:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014458:	715a      	strb	r2, [r3, #5]
 801445a:	68a3      	ldr	r3, [r4, #8]
 801445c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014460:	719a      	strb	r2, [r3, #6]
 8014462:	68a3      	ldr	r3, [r4, #8]
 8014464:	f89d 2000 	ldrb.w	r2, [sp]
 8014468:	71da      	strb	r2, [r3, #7]
 801446a:	68a2      	ldr	r2, [r4, #8]
 801446c:	6923      	ldr	r3, [r4, #16]
 801446e:	3208      	adds	r2, #8
 8014470:	3308      	adds	r3, #8
 8014472:	2108      	movs	r1, #8
 8014474:	60a2      	str	r2, [r4, #8]
 8014476:	6123      	str	r3, [r4, #16]
 8014478:	7561      	strb	r1, [r4, #21]
 801447a:	7da0      	ldrb	r0, [r4, #22]
 801447c:	f080 0001 	eor.w	r0, r0, #1
 8014480:	b002      	add	sp, #8
 8014482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014486:	e9dd 1200 	ldrd	r1, r2, [sp]
 801448a:	6019      	str	r1, [r3, #0]
 801448c:	605a      	str	r2, [r3, #4]
 801448e:	e7ec      	b.n	801446a <ucdr_serialize_double+0x10a>
 8014490:	68a2      	ldr	r2, [r4, #8]
 8014492:	6923      	ldr	r3, [r4, #16]
 8014494:	7da0      	ldrb	r0, [r4, #22]
 8014496:	7567      	strb	r7, [r4, #21]
 8014498:	1b92      	subs	r2, r2, r6
 801449a:	1b9b      	subs	r3, r3, r6
 801449c:	f080 0001 	eor.w	r0, r0, #1
 80144a0:	60a2      	str	r2, [r4, #8]
 80144a2:	6123      	str	r3, [r4, #16]
 80144a4:	b002      	add	sp, #8
 80144a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144aa:	68a3      	ldr	r3, [r4, #8]
 80144ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80144b0:	701a      	strb	r2, [r3, #0]
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144b8:	701a      	strb	r2, [r3, #0]
 80144ba:	68a3      	ldr	r3, [r4, #8]
 80144bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80144c0:	701a      	strb	r2, [r3, #0]
 80144c2:	68a3      	ldr	r3, [r4, #8]
 80144c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80144c8:	701a      	strb	r2, [r3, #0]
 80144ca:	68a3      	ldr	r3, [r4, #8]
 80144cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80144d0:	701a      	strb	r2, [r3, #0]
 80144d2:	68a5      	ldr	r5, [r4, #8]
 80144d4:	e78f      	b.n	80143f6 <ucdr_serialize_double+0x96>
 80144d6:	4628      	mov	r0, r5
 80144d8:	466d      	mov	r5, sp
 80144da:	4632      	mov	r2, r6
 80144dc:	4629      	mov	r1, r5
 80144de:	f009 fd30 	bl	801df42 <memcpy>
 80144e2:	68a0      	ldr	r0, [r4, #8]
 80144e4:	4642      	mov	r2, r8
 80144e6:	19a9      	adds	r1, r5, r6
 80144e8:	f009 fd2b 	bl	801df42 <memcpy>
 80144ec:	e786      	b.n	80143fc <ucdr_serialize_double+0x9c>
 80144ee:	bf00      	nop

080144f0 <ucdr_serialize_endian_double>:
 80144f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144f4:	460e      	mov	r6, r1
 80144f6:	b083      	sub	sp, #12
 80144f8:	2108      	movs	r1, #8
 80144fa:	4604      	mov	r4, r0
 80144fc:	ed8d 0b00 	vstr	d0, [sp]
 8014500:	f7fa f814 	bl	800e52c <ucdr_buffer_alignment>
 8014504:	4601      	mov	r1, r0
 8014506:	4620      	mov	r0, r4
 8014508:	f894 8015 	ldrb.w	r8, [r4, #21]
 801450c:	f7fa f852 	bl	800e5b4 <ucdr_advance_buffer>
 8014510:	2108      	movs	r1, #8
 8014512:	4620      	mov	r0, r4
 8014514:	f7f9 ffaa 	bl	800e46c <ucdr_check_buffer_available_for>
 8014518:	2800      	cmp	r0, #0
 801451a:	d14c      	bne.n	80145b6 <ucdr_serialize_endian_double+0xc6>
 801451c:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8014520:	42bd      	cmp	r5, r7
 8014522:	d943      	bls.n	80145ac <ucdr_serialize_endian_double+0xbc>
 8014524:	6923      	ldr	r3, [r4, #16]
 8014526:	60a5      	str	r5, [r4, #8]
 8014528:	1bed      	subs	r5, r5, r7
 801452a:	442b      	add	r3, r5
 801452c:	f1c5 0908 	rsb	r9, r5, #8
 8014530:	6123      	str	r3, [r4, #16]
 8014532:	4649      	mov	r1, r9
 8014534:	4620      	mov	r0, r4
 8014536:	f7f9 ffa5 	bl	800e484 <ucdr_check_final_buffer_behavior>
 801453a:	2800      	cmp	r0, #0
 801453c:	d070      	beq.n	8014620 <ucdr_serialize_endian_double+0x130>
 801453e:	2e01      	cmp	r6, #1
 8014540:	f000 8092 	beq.w	8014668 <ucdr_serialize_endian_double+0x178>
 8014544:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014548:	703b      	strb	r3, [r7, #0]
 801454a:	2d01      	cmp	r5, #1
 801454c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014550:	707b      	strb	r3, [r7, #1]
 8014552:	d073      	beq.n	801463c <ucdr_serialize_endian_double+0x14c>
 8014554:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014558:	70bb      	strb	r3, [r7, #2]
 801455a:	2d02      	cmp	r5, #2
 801455c:	d072      	beq.n	8014644 <ucdr_serialize_endian_double+0x154>
 801455e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014562:	70fb      	strb	r3, [r7, #3]
 8014564:	2d03      	cmp	r5, #3
 8014566:	d071      	beq.n	801464c <ucdr_serialize_endian_double+0x15c>
 8014568:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801456c:	713b      	strb	r3, [r7, #4]
 801456e:	2d04      	cmp	r5, #4
 8014570:	d070      	beq.n	8014654 <ucdr_serialize_endian_double+0x164>
 8014572:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014576:	717b      	strb	r3, [r7, #5]
 8014578:	2d05      	cmp	r5, #5
 801457a:	d06f      	beq.n	801465c <ucdr_serialize_endian_double+0x16c>
 801457c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014580:	71bb      	strb	r3, [r7, #6]
 8014582:	2d06      	cmp	r5, #6
 8014584:	d06e      	beq.n	8014664 <ucdr_serialize_endian_double+0x174>
 8014586:	3707      	adds	r7, #7
 8014588:	f89d 3000 	ldrb.w	r3, [sp]
 801458c:	703b      	strb	r3, [r7, #0]
 801458e:	6923      	ldr	r3, [r4, #16]
 8014590:	68a2      	ldr	r2, [r4, #8]
 8014592:	7da0      	ldrb	r0, [r4, #22]
 8014594:	3308      	adds	r3, #8
 8014596:	444a      	add	r2, r9
 8014598:	1b5b      	subs	r3, r3, r5
 801459a:	2108      	movs	r1, #8
 801459c:	f080 0001 	eor.w	r0, r0, #1
 80145a0:	60a2      	str	r2, [r4, #8]
 80145a2:	6123      	str	r3, [r4, #16]
 80145a4:	7561      	strb	r1, [r4, #21]
 80145a6:	b003      	add	sp, #12
 80145a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145ac:	2108      	movs	r1, #8
 80145ae:	4620      	mov	r0, r4
 80145b0:	f7f9 ff68 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80145b4:	b348      	cbz	r0, 801460a <ucdr_serialize_endian_double+0x11a>
 80145b6:	2e01      	cmp	r6, #1
 80145b8:	68a3      	ldr	r3, [r4, #8]
 80145ba:	d02c      	beq.n	8014616 <ucdr_serialize_endian_double+0x126>
 80145bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80145c0:	701a      	strb	r2, [r3, #0]
 80145c2:	68a3      	ldr	r3, [r4, #8]
 80145c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80145c8:	705a      	strb	r2, [r3, #1]
 80145ca:	68a3      	ldr	r3, [r4, #8]
 80145cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80145d0:	709a      	strb	r2, [r3, #2]
 80145d2:	68a3      	ldr	r3, [r4, #8]
 80145d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80145d8:	70da      	strb	r2, [r3, #3]
 80145da:	68a3      	ldr	r3, [r4, #8]
 80145dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80145e0:	711a      	strb	r2, [r3, #4]
 80145e2:	68a3      	ldr	r3, [r4, #8]
 80145e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80145e8:	715a      	strb	r2, [r3, #5]
 80145ea:	68a3      	ldr	r3, [r4, #8]
 80145ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80145f0:	719a      	strb	r2, [r3, #6]
 80145f2:	68a3      	ldr	r3, [r4, #8]
 80145f4:	f89d 2000 	ldrb.w	r2, [sp]
 80145f8:	71da      	strb	r2, [r3, #7]
 80145fa:	68a2      	ldr	r2, [r4, #8]
 80145fc:	6923      	ldr	r3, [r4, #16]
 80145fe:	3208      	adds	r2, #8
 8014600:	3308      	adds	r3, #8
 8014602:	2108      	movs	r1, #8
 8014604:	60a2      	str	r2, [r4, #8]
 8014606:	6123      	str	r3, [r4, #16]
 8014608:	7561      	strb	r1, [r4, #21]
 801460a:	7da0      	ldrb	r0, [r4, #22]
 801460c:	f080 0001 	eor.w	r0, r0, #1
 8014610:	b003      	add	sp, #12
 8014612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014616:	e9dd 1200 	ldrd	r1, r2, [sp]
 801461a:	6019      	str	r1, [r3, #0]
 801461c:	605a      	str	r2, [r3, #4]
 801461e:	e7ec      	b.n	80145fa <ucdr_serialize_endian_double+0x10a>
 8014620:	68a2      	ldr	r2, [r4, #8]
 8014622:	6923      	ldr	r3, [r4, #16]
 8014624:	7da0      	ldrb	r0, [r4, #22]
 8014626:	f884 8015 	strb.w	r8, [r4, #21]
 801462a:	1b52      	subs	r2, r2, r5
 801462c:	1b5b      	subs	r3, r3, r5
 801462e:	f080 0001 	eor.w	r0, r0, #1
 8014632:	60a2      	str	r2, [r4, #8]
 8014634:	6123      	str	r3, [r4, #16]
 8014636:	b003      	add	sp, #12
 8014638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801463c:	68a3      	ldr	r3, [r4, #8]
 801463e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014642:	701a      	strb	r2, [r3, #0]
 8014644:	68a3      	ldr	r3, [r4, #8]
 8014646:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801464a:	701a      	strb	r2, [r3, #0]
 801464c:	68a3      	ldr	r3, [r4, #8]
 801464e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014652:	701a      	strb	r2, [r3, #0]
 8014654:	68a3      	ldr	r3, [r4, #8]
 8014656:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801465a:	701a      	strb	r2, [r3, #0]
 801465c:	68a3      	ldr	r3, [r4, #8]
 801465e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014662:	701a      	strb	r2, [r3, #0]
 8014664:	68a7      	ldr	r7, [r4, #8]
 8014666:	e78f      	b.n	8014588 <ucdr_serialize_endian_double+0x98>
 8014668:	466e      	mov	r6, sp
 801466a:	462a      	mov	r2, r5
 801466c:	4631      	mov	r1, r6
 801466e:	4638      	mov	r0, r7
 8014670:	f009 fc67 	bl	801df42 <memcpy>
 8014674:	68a0      	ldr	r0, [r4, #8]
 8014676:	464a      	mov	r2, r9
 8014678:	1971      	adds	r1, r6, r5
 801467a:	f009 fc62 	bl	801df42 <memcpy>
 801467e:	e786      	b.n	801458e <ucdr_serialize_endian_double+0x9e>

08014680 <ucdr_deserialize_double>:
 8014680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014684:	460d      	mov	r5, r1
 8014686:	2108      	movs	r1, #8
 8014688:	4604      	mov	r4, r0
 801468a:	f7f9 ff4f 	bl	800e52c <ucdr_buffer_alignment>
 801468e:	4601      	mov	r1, r0
 8014690:	4620      	mov	r0, r4
 8014692:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014696:	f7f9 ff8d 	bl	800e5b4 <ucdr_advance_buffer>
 801469a:	2108      	movs	r1, #8
 801469c:	4620      	mov	r0, r4
 801469e:	f7f9 fee5 	bl	800e46c <ucdr_check_buffer_available_for>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	d147      	bne.n	8014736 <ucdr_deserialize_double+0xb6>
 80146a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80146aa:	42be      	cmp	r6, r7
 80146ac:	d93e      	bls.n	801472c <ucdr_deserialize_double+0xac>
 80146ae:	6923      	ldr	r3, [r4, #16]
 80146b0:	60a6      	str	r6, [r4, #8]
 80146b2:	1bf6      	subs	r6, r6, r7
 80146b4:	4433      	add	r3, r6
 80146b6:	f1c6 0908 	rsb	r9, r6, #8
 80146ba:	6123      	str	r3, [r4, #16]
 80146bc:	4649      	mov	r1, r9
 80146be:	4620      	mov	r0, r4
 80146c0:	f7f9 fee0 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	d063      	beq.n	8014790 <ucdr_deserialize_double+0x110>
 80146c8:	7d23      	ldrb	r3, [r4, #20]
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	f000 8083 	beq.w	80147d6 <ucdr_deserialize_double+0x156>
 80146d0:	79fb      	ldrb	r3, [r7, #7]
 80146d2:	702b      	strb	r3, [r5, #0]
 80146d4:	79bb      	ldrb	r3, [r7, #6]
 80146d6:	706b      	strb	r3, [r5, #1]
 80146d8:	2e01      	cmp	r6, #1
 80146da:	d066      	beq.n	80147aa <ucdr_deserialize_double+0x12a>
 80146dc:	797b      	ldrb	r3, [r7, #5]
 80146de:	70ab      	strb	r3, [r5, #2]
 80146e0:	2e02      	cmp	r6, #2
 80146e2:	f000 8089 	beq.w	80147f8 <ucdr_deserialize_double+0x178>
 80146e6:	793b      	ldrb	r3, [r7, #4]
 80146e8:	70eb      	strb	r3, [r5, #3]
 80146ea:	2e03      	cmp	r6, #3
 80146ec:	f000 8082 	beq.w	80147f4 <ucdr_deserialize_double+0x174>
 80146f0:	78fb      	ldrb	r3, [r7, #3]
 80146f2:	712b      	strb	r3, [r5, #4]
 80146f4:	2e04      	cmp	r6, #4
 80146f6:	d07b      	beq.n	80147f0 <ucdr_deserialize_double+0x170>
 80146f8:	78bb      	ldrb	r3, [r7, #2]
 80146fa:	716b      	strb	r3, [r5, #5]
 80146fc:	2e05      	cmp	r6, #5
 80146fe:	d075      	beq.n	80147ec <ucdr_deserialize_double+0x16c>
 8014700:	787b      	ldrb	r3, [r7, #1]
 8014702:	71ab      	strb	r3, [r5, #6]
 8014704:	2e06      	cmp	r6, #6
 8014706:	f105 0507 	add.w	r5, r5, #7
 801470a:	d062      	beq.n	80147d2 <ucdr_deserialize_double+0x152>
 801470c:	783b      	ldrb	r3, [r7, #0]
 801470e:	702b      	strb	r3, [r5, #0]
 8014710:	6923      	ldr	r3, [r4, #16]
 8014712:	68a2      	ldr	r2, [r4, #8]
 8014714:	7da0      	ldrb	r0, [r4, #22]
 8014716:	2108      	movs	r1, #8
 8014718:	3308      	adds	r3, #8
 801471a:	444a      	add	r2, r9
 801471c:	1b9b      	subs	r3, r3, r6
 801471e:	7561      	strb	r1, [r4, #21]
 8014720:	60a2      	str	r2, [r4, #8]
 8014722:	6123      	str	r3, [r4, #16]
 8014724:	f080 0001 	eor.w	r0, r0, #1
 8014728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801472c:	2108      	movs	r1, #8
 801472e:	4620      	mov	r0, r4
 8014730:	f7f9 fea8 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8014734:	b310      	cbz	r0, 801477c <ucdr_deserialize_double+0xfc>
 8014736:	7d22      	ldrb	r2, [r4, #20]
 8014738:	68a3      	ldr	r3, [r4, #8]
 801473a:	2a01      	cmp	r2, #1
 801473c:	d023      	beq.n	8014786 <ucdr_deserialize_double+0x106>
 801473e:	79db      	ldrb	r3, [r3, #7]
 8014740:	702b      	strb	r3, [r5, #0]
 8014742:	68a3      	ldr	r3, [r4, #8]
 8014744:	799b      	ldrb	r3, [r3, #6]
 8014746:	706b      	strb	r3, [r5, #1]
 8014748:	68a3      	ldr	r3, [r4, #8]
 801474a:	795b      	ldrb	r3, [r3, #5]
 801474c:	70ab      	strb	r3, [r5, #2]
 801474e:	68a3      	ldr	r3, [r4, #8]
 8014750:	791b      	ldrb	r3, [r3, #4]
 8014752:	70eb      	strb	r3, [r5, #3]
 8014754:	68a3      	ldr	r3, [r4, #8]
 8014756:	78db      	ldrb	r3, [r3, #3]
 8014758:	712b      	strb	r3, [r5, #4]
 801475a:	68a3      	ldr	r3, [r4, #8]
 801475c:	789b      	ldrb	r3, [r3, #2]
 801475e:	716b      	strb	r3, [r5, #5]
 8014760:	68a3      	ldr	r3, [r4, #8]
 8014762:	785b      	ldrb	r3, [r3, #1]
 8014764:	71ab      	strb	r3, [r5, #6]
 8014766:	68a3      	ldr	r3, [r4, #8]
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	71eb      	strb	r3, [r5, #7]
 801476c:	68a2      	ldr	r2, [r4, #8]
 801476e:	6923      	ldr	r3, [r4, #16]
 8014770:	3208      	adds	r2, #8
 8014772:	3308      	adds	r3, #8
 8014774:	2108      	movs	r1, #8
 8014776:	60a2      	str	r2, [r4, #8]
 8014778:	6123      	str	r3, [r4, #16]
 801477a:	7561      	strb	r1, [r4, #21]
 801477c:	7da0      	ldrb	r0, [r4, #22]
 801477e:	f080 0001 	eor.w	r0, r0, #1
 8014782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	606b      	str	r3, [r5, #4]
 801478c:	602a      	str	r2, [r5, #0]
 801478e:	e7ed      	b.n	801476c <ucdr_deserialize_double+0xec>
 8014790:	68a2      	ldr	r2, [r4, #8]
 8014792:	6923      	ldr	r3, [r4, #16]
 8014794:	7da0      	ldrb	r0, [r4, #22]
 8014796:	f884 8015 	strb.w	r8, [r4, #21]
 801479a:	1b92      	subs	r2, r2, r6
 801479c:	1b9b      	subs	r3, r3, r6
 801479e:	60a2      	str	r2, [r4, #8]
 80147a0:	6123      	str	r3, [r4, #16]
 80147a2:	f080 0001 	eor.w	r0, r0, #1
 80147a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147aa:	68a3      	ldr	r3, [r4, #8]
 80147ac:	795b      	ldrb	r3, [r3, #5]
 80147ae:	70ab      	strb	r3, [r5, #2]
 80147b0:	3503      	adds	r5, #3
 80147b2:	68a3      	ldr	r3, [r4, #8]
 80147b4:	791b      	ldrb	r3, [r3, #4]
 80147b6:	f805 3b01 	strb.w	r3, [r5], #1
 80147ba:	68a3      	ldr	r3, [r4, #8]
 80147bc:	78db      	ldrb	r3, [r3, #3]
 80147be:	f805 3b01 	strb.w	r3, [r5], #1
 80147c2:	68a3      	ldr	r3, [r4, #8]
 80147c4:	789b      	ldrb	r3, [r3, #2]
 80147c6:	f805 3b01 	strb.w	r3, [r5], #1
 80147ca:	68a3      	ldr	r3, [r4, #8]
 80147cc:	785b      	ldrb	r3, [r3, #1]
 80147ce:	f805 3b01 	strb.w	r3, [r5], #1
 80147d2:	68a7      	ldr	r7, [r4, #8]
 80147d4:	e79a      	b.n	801470c <ucdr_deserialize_double+0x8c>
 80147d6:	4639      	mov	r1, r7
 80147d8:	4632      	mov	r2, r6
 80147da:	4628      	mov	r0, r5
 80147dc:	f009 fbb1 	bl	801df42 <memcpy>
 80147e0:	68a1      	ldr	r1, [r4, #8]
 80147e2:	464a      	mov	r2, r9
 80147e4:	19a8      	adds	r0, r5, r6
 80147e6:	f009 fbac 	bl	801df42 <memcpy>
 80147ea:	e791      	b.n	8014710 <ucdr_deserialize_double+0x90>
 80147ec:	3506      	adds	r5, #6
 80147ee:	e7ec      	b.n	80147ca <ucdr_deserialize_double+0x14a>
 80147f0:	3505      	adds	r5, #5
 80147f2:	e7e6      	b.n	80147c2 <ucdr_deserialize_double+0x142>
 80147f4:	3504      	adds	r5, #4
 80147f6:	e7e0      	b.n	80147ba <ucdr_deserialize_double+0x13a>
 80147f8:	3503      	adds	r5, #3
 80147fa:	e7da      	b.n	80147b2 <ucdr_deserialize_double+0x132>

080147fc <ucdr_deserialize_endian_double>:
 80147fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014800:	460f      	mov	r7, r1
 8014802:	2108      	movs	r1, #8
 8014804:	4604      	mov	r4, r0
 8014806:	4615      	mov	r5, r2
 8014808:	f7f9 fe90 	bl	800e52c <ucdr_buffer_alignment>
 801480c:	4601      	mov	r1, r0
 801480e:	4620      	mov	r0, r4
 8014810:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014814:	f7f9 fece 	bl	800e5b4 <ucdr_advance_buffer>
 8014818:	2108      	movs	r1, #8
 801481a:	4620      	mov	r0, r4
 801481c:	f7f9 fe26 	bl	800e46c <ucdr_check_buffer_available_for>
 8014820:	2800      	cmp	r0, #0
 8014822:	d14f      	bne.n	80148c4 <ucdr_deserialize_endian_double+0xc8>
 8014824:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8014828:	4546      	cmp	r6, r8
 801482a:	d946      	bls.n	80148ba <ucdr_deserialize_endian_double+0xbe>
 801482c:	6923      	ldr	r3, [r4, #16]
 801482e:	60a6      	str	r6, [r4, #8]
 8014830:	eba6 0608 	sub.w	r6, r6, r8
 8014834:	4433      	add	r3, r6
 8014836:	f1c6 0a08 	rsb	sl, r6, #8
 801483a:	6123      	str	r3, [r4, #16]
 801483c:	4651      	mov	r1, sl
 801483e:	4620      	mov	r0, r4
 8014840:	f7f9 fe20 	bl	800e484 <ucdr_check_final_buffer_behavior>
 8014844:	2800      	cmp	r0, #0
 8014846:	d069      	beq.n	801491c <ucdr_deserialize_endian_double+0x120>
 8014848:	2f01      	cmp	r7, #1
 801484a:	f000 808b 	beq.w	8014964 <ucdr_deserialize_endian_double+0x168>
 801484e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8014852:	702b      	strb	r3, [r5, #0]
 8014854:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014858:	706b      	strb	r3, [r5, #1]
 801485a:	2e01      	cmp	r6, #1
 801485c:	d06b      	beq.n	8014936 <ucdr_deserialize_endian_double+0x13a>
 801485e:	f898 3005 	ldrb.w	r3, [r8, #5]
 8014862:	70ab      	strb	r3, [r5, #2]
 8014864:	2e02      	cmp	r6, #2
 8014866:	f000 808e 	beq.w	8014986 <ucdr_deserialize_endian_double+0x18a>
 801486a:	f898 3004 	ldrb.w	r3, [r8, #4]
 801486e:	70eb      	strb	r3, [r5, #3]
 8014870:	2e03      	cmp	r6, #3
 8014872:	f000 8086 	beq.w	8014982 <ucdr_deserialize_endian_double+0x186>
 8014876:	f898 3003 	ldrb.w	r3, [r8, #3]
 801487a:	712b      	strb	r3, [r5, #4]
 801487c:	2e04      	cmp	r6, #4
 801487e:	d07e      	beq.n	801497e <ucdr_deserialize_endian_double+0x182>
 8014880:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014884:	716b      	strb	r3, [r5, #5]
 8014886:	2e05      	cmp	r6, #5
 8014888:	d077      	beq.n	801497a <ucdr_deserialize_endian_double+0x17e>
 801488a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801488e:	71ab      	strb	r3, [r5, #6]
 8014890:	2e06      	cmp	r6, #6
 8014892:	f105 0507 	add.w	r5, r5, #7
 8014896:	d062      	beq.n	801495e <ucdr_deserialize_endian_double+0x162>
 8014898:	f898 3000 	ldrb.w	r3, [r8]
 801489c:	702b      	strb	r3, [r5, #0]
 801489e:	6923      	ldr	r3, [r4, #16]
 80148a0:	68a2      	ldr	r2, [r4, #8]
 80148a2:	7da0      	ldrb	r0, [r4, #22]
 80148a4:	2108      	movs	r1, #8
 80148a6:	3308      	adds	r3, #8
 80148a8:	4452      	add	r2, sl
 80148aa:	1b9b      	subs	r3, r3, r6
 80148ac:	7561      	strb	r1, [r4, #21]
 80148ae:	60a2      	str	r2, [r4, #8]
 80148b0:	6123      	str	r3, [r4, #16]
 80148b2:	f080 0001 	eor.w	r0, r0, #1
 80148b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ba:	2108      	movs	r1, #8
 80148bc:	4620      	mov	r0, r4
 80148be:	f7f9 fde1 	bl	800e484 <ucdr_check_final_buffer_behavior>
 80148c2:	b308      	cbz	r0, 8014908 <ucdr_deserialize_endian_double+0x10c>
 80148c4:	2f01      	cmp	r7, #1
 80148c6:	68a3      	ldr	r3, [r4, #8]
 80148c8:	d023      	beq.n	8014912 <ucdr_deserialize_endian_double+0x116>
 80148ca:	79db      	ldrb	r3, [r3, #7]
 80148cc:	702b      	strb	r3, [r5, #0]
 80148ce:	68a3      	ldr	r3, [r4, #8]
 80148d0:	799b      	ldrb	r3, [r3, #6]
 80148d2:	706b      	strb	r3, [r5, #1]
 80148d4:	68a3      	ldr	r3, [r4, #8]
 80148d6:	795b      	ldrb	r3, [r3, #5]
 80148d8:	70ab      	strb	r3, [r5, #2]
 80148da:	68a3      	ldr	r3, [r4, #8]
 80148dc:	791b      	ldrb	r3, [r3, #4]
 80148de:	70eb      	strb	r3, [r5, #3]
 80148e0:	68a3      	ldr	r3, [r4, #8]
 80148e2:	78db      	ldrb	r3, [r3, #3]
 80148e4:	712b      	strb	r3, [r5, #4]
 80148e6:	68a3      	ldr	r3, [r4, #8]
 80148e8:	789b      	ldrb	r3, [r3, #2]
 80148ea:	716b      	strb	r3, [r5, #5]
 80148ec:	68a3      	ldr	r3, [r4, #8]
 80148ee:	785b      	ldrb	r3, [r3, #1]
 80148f0:	71ab      	strb	r3, [r5, #6]
 80148f2:	68a3      	ldr	r3, [r4, #8]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	71eb      	strb	r3, [r5, #7]
 80148f8:	68a2      	ldr	r2, [r4, #8]
 80148fa:	6923      	ldr	r3, [r4, #16]
 80148fc:	3208      	adds	r2, #8
 80148fe:	3308      	adds	r3, #8
 8014900:	2108      	movs	r1, #8
 8014902:	60a2      	str	r2, [r4, #8]
 8014904:	6123      	str	r3, [r4, #16]
 8014906:	7561      	strb	r1, [r4, #21]
 8014908:	7da0      	ldrb	r0, [r4, #22]
 801490a:	f080 0001 	eor.w	r0, r0, #1
 801490e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	606b      	str	r3, [r5, #4]
 8014918:	602a      	str	r2, [r5, #0]
 801491a:	e7ed      	b.n	80148f8 <ucdr_deserialize_endian_double+0xfc>
 801491c:	68a2      	ldr	r2, [r4, #8]
 801491e:	6923      	ldr	r3, [r4, #16]
 8014920:	7da0      	ldrb	r0, [r4, #22]
 8014922:	f884 9015 	strb.w	r9, [r4, #21]
 8014926:	1b92      	subs	r2, r2, r6
 8014928:	1b9b      	subs	r3, r3, r6
 801492a:	60a2      	str	r2, [r4, #8]
 801492c:	6123      	str	r3, [r4, #16]
 801492e:	f080 0001 	eor.w	r0, r0, #1
 8014932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014936:	68a3      	ldr	r3, [r4, #8]
 8014938:	795b      	ldrb	r3, [r3, #5]
 801493a:	70ab      	strb	r3, [r5, #2]
 801493c:	3503      	adds	r5, #3
 801493e:	68a3      	ldr	r3, [r4, #8]
 8014940:	791b      	ldrb	r3, [r3, #4]
 8014942:	f805 3b01 	strb.w	r3, [r5], #1
 8014946:	68a3      	ldr	r3, [r4, #8]
 8014948:	78db      	ldrb	r3, [r3, #3]
 801494a:	f805 3b01 	strb.w	r3, [r5], #1
 801494e:	68a3      	ldr	r3, [r4, #8]
 8014950:	789b      	ldrb	r3, [r3, #2]
 8014952:	f805 3b01 	strb.w	r3, [r5], #1
 8014956:	68a3      	ldr	r3, [r4, #8]
 8014958:	785b      	ldrb	r3, [r3, #1]
 801495a:	f805 3b01 	strb.w	r3, [r5], #1
 801495e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8014962:	e799      	b.n	8014898 <ucdr_deserialize_endian_double+0x9c>
 8014964:	4641      	mov	r1, r8
 8014966:	4632      	mov	r2, r6
 8014968:	4628      	mov	r0, r5
 801496a:	f009 faea 	bl	801df42 <memcpy>
 801496e:	68a1      	ldr	r1, [r4, #8]
 8014970:	4652      	mov	r2, sl
 8014972:	19a8      	adds	r0, r5, r6
 8014974:	f009 fae5 	bl	801df42 <memcpy>
 8014978:	e791      	b.n	801489e <ucdr_deserialize_endian_double+0xa2>
 801497a:	3506      	adds	r5, #6
 801497c:	e7eb      	b.n	8014956 <ucdr_deserialize_endian_double+0x15a>
 801497e:	3505      	adds	r5, #5
 8014980:	e7e5      	b.n	801494e <ucdr_deserialize_endian_double+0x152>
 8014982:	3504      	adds	r5, #4
 8014984:	e7df      	b.n	8014946 <ucdr_deserialize_endian_double+0x14a>
 8014986:	3503      	adds	r5, #3
 8014988:	e7d9      	b.n	801493e <ucdr_deserialize_endian_double+0x142>
 801498a:	bf00      	nop

0801498c <uxr_buffer_delete_entity>:
 801498c:	b510      	push	{r4, lr}
 801498e:	2300      	movs	r3, #0
 8014990:	b08e      	sub	sp, #56	@ 0x38
 8014992:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014996:	2303      	movs	r3, #3
 8014998:	9300      	str	r3, [sp, #0]
 801499a:	2204      	movs	r2, #4
 801499c:	ab06      	add	r3, sp, #24
 801499e:	4604      	mov	r4, r0
 80149a0:	f001 fb34 	bl	801600c <uxr_prepare_stream_to_write_submessage>
 80149a4:	b918      	cbnz	r0, 80149ae <uxr_buffer_delete_entity+0x22>
 80149a6:	4604      	mov	r4, r0
 80149a8:	4620      	mov	r0, r4
 80149aa:	b00e      	add	sp, #56	@ 0x38
 80149ac:	bd10      	pop	{r4, pc}
 80149ae:	9902      	ldr	r1, [sp, #8]
 80149b0:	aa05      	add	r2, sp, #20
 80149b2:	4620      	mov	r0, r4
 80149b4:	f001 fc64 	bl	8016280 <uxr_init_base_object_request>
 80149b8:	a905      	add	r1, sp, #20
 80149ba:	4604      	mov	r4, r0
 80149bc:	a806      	add	r0, sp, #24
 80149be:	f003 fad7 	bl	8017f70 <uxr_serialize_DELETE_Payload>
 80149c2:	4620      	mov	r0, r4
 80149c4:	b00e      	add	sp, #56	@ 0x38
 80149c6:	bd10      	pop	{r4, pc}

080149c8 <uxr_common_create_entity>:
 80149c8:	b510      	push	{r4, lr}
 80149ca:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80149ce:	b08c      	sub	sp, #48	@ 0x30
 80149d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80149d4:	f1bc 0f01 	cmp.w	ip, #1
 80149d8:	bf08      	it	eq
 80149da:	f003 0201 	andeq.w	r2, r3, #1
 80149de:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80149e2:	bf18      	it	ne
 80149e4:	2200      	movne	r2, #0
 80149e6:	330e      	adds	r3, #14
 80149e8:	441a      	add	r2, r3
 80149ea:	2301      	movs	r3, #1
 80149ec:	e9cd 3100 	strd	r3, r1, [sp]
 80149f0:	b292      	uxth	r2, r2
 80149f2:	9903      	ldr	r1, [sp, #12]
 80149f4:	ab04      	add	r3, sp, #16
 80149f6:	4604      	mov	r4, r0
 80149f8:	f001 fb08 	bl	801600c <uxr_prepare_stream_to_write_submessage>
 80149fc:	b918      	cbnz	r0, 8014a06 <uxr_common_create_entity+0x3e>
 80149fe:	4604      	mov	r4, r0
 8014a00:	4620      	mov	r0, r4
 8014a02:	b00c      	add	sp, #48	@ 0x30
 8014a04:	bd10      	pop	{r4, pc}
 8014a06:	9902      	ldr	r1, [sp, #8]
 8014a08:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f001 fc38 	bl	8016280 <uxr_init_base_object_request>
 8014a10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014a12:	4604      	mov	r4, r0
 8014a14:	a804      	add	r0, sp, #16
 8014a16:	f003 fa09 	bl	8017e2c <uxr_serialize_CREATE_Payload>
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	b00c      	add	sp, #48	@ 0x30
 8014a1e:	bd10      	pop	{r4, pc}

08014a20 <uxr_buffer_create_participant_bin>:
 8014a20:	b570      	push	{r4, r5, r6, lr}
 8014a22:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8014a26:	ac11      	add	r4, sp, #68	@ 0x44
 8014a28:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8014a2c:	2303      	movs	r3, #3
 8014a2e:	7223      	strb	r3, [r4, #8]
 8014a30:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8014a32:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8014a36:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	2100      	movs	r1, #0
 8014a3e:	4605      	mov	r5, r0
 8014a40:	7122      	strb	r2, [r4, #4]
 8014a42:	f88d 1014 	strb.w	r1, [sp, #20]
 8014a46:	b1cb      	cbz	r3, 8014a7c <uxr_buffer_create_participant_bin+0x5c>
 8014a48:	f88d 201c 	strb.w	r2, [sp, #28]
 8014a4c:	9308      	str	r3, [sp, #32]
 8014a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a52:	a915      	add	r1, sp, #84	@ 0x54
 8014a54:	a809      	add	r0, sp, #36	@ 0x24
 8014a56:	f7f9 fd5d 	bl	800e514 <ucdr_init_buffer>
 8014a5a:	a905      	add	r1, sp, #20
 8014a5c:	a809      	add	r0, sp, #36	@ 0x24
 8014a5e:	f002 fded 	bl	801763c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8014a62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a64:	9600      	str	r6, [sp, #0]
 8014a66:	9401      	str	r4, [sp, #4]
 8014a68:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014a6c:	60e3      	str	r3, [r4, #12]
 8014a6e:	4628      	mov	r0, r5
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	f7ff ffa9 	bl	80149c8 <uxr_common_create_entity>
 8014a76:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8014a7a:	bd70      	pop	{r4, r5, r6, pc}
 8014a7c:	f88d 301c 	strb.w	r3, [sp, #28]
 8014a80:	e7e5      	b.n	8014a4e <uxr_buffer_create_participant_bin+0x2e>
 8014a82:	bf00      	nop

08014a84 <uxr_buffer_create_topic_bin>:
 8014a84:	b570      	push	{r4, r5, r6, lr}
 8014a86:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	9105      	str	r1, [sp, #20]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	a997      	add	r1, sp, #604	@ 0x25c
 8014a92:	2302      	movs	r3, #2
 8014a94:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8014a98:	9204      	str	r2, [sp, #16]
 8014a9a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8014a9e:	f000 fa31 	bl	8014f04 <uxr_object_id_to_raw>
 8014aa2:	2303      	movs	r3, #3
 8014aa4:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8014aa8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8014aaa:	9306      	str	r3, [sp, #24]
 8014aac:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8014aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014aba:	2300      	movs	r3, #0
 8014abc:	a917      	add	r1, sp, #92	@ 0x5c
 8014abe:	a80b      	add	r0, sp, #44	@ 0x2c
 8014ac0:	f88d 301c 	strb.w	r3, [sp, #28]
 8014ac4:	f7f9 fd26 	bl	800e514 <ucdr_init_buffer>
 8014ac8:	a906      	add	r1, sp, #24
 8014aca:	a80b      	add	r0, sp, #44	@ 0x2c
 8014acc:	f002 fdd8 	bl	8017680 <uxr_serialize_OBJK_Topic_Binary>
 8014ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ad2:	9316      	str	r3, [sp, #88]	@ 0x58
 8014ad4:	ac13      	add	r4, sp, #76	@ 0x4c
 8014ad6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014ada:	9600      	str	r6, [sp, #0]
 8014adc:	9401      	str	r4, [sp, #4]
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	4628      	mov	r0, r5
 8014ae2:	f7ff ff71 	bl	80149c8 <uxr_common_create_entity>
 8014ae6:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8014aea:	bd70      	pop	{r4, r5, r6, pc}

08014aec <uxr_buffer_create_publisher_bin>:
 8014aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aee:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8014af2:	4605      	mov	r5, r0
 8014af4:	9105      	str	r1, [sp, #20]
 8014af6:	4618      	mov	r0, r3
 8014af8:	2603      	movs	r6, #3
 8014afa:	a992      	add	r1, sp, #584	@ 0x248
 8014afc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8014b00:	9204      	str	r2, [sp, #16]
 8014b02:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8014b06:	f000 f9fd 	bl	8014f04 <uxr_object_id_to_raw>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b10:	a912      	add	r1, sp, #72	@ 0x48
 8014b12:	a806      	add	r0, sp, #24
 8014b14:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014b18:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014b1c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8014b20:	f7f9 fcf8 	bl	800e514 <ucdr_init_buffer>
 8014b24:	a993      	add	r1, sp, #588	@ 0x24c
 8014b26:	a806      	add	r0, sp, #24
 8014b28:	f002 fe60 	bl	80177ec <uxr_serialize_OBJK_Publisher_Binary>
 8014b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8014b30:	ac0e      	add	r4, sp, #56	@ 0x38
 8014b32:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014b36:	9700      	str	r7, [sp, #0]
 8014b38:	9401      	str	r4, [sp, #4]
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	f7ff ff43 	bl	80149c8 <uxr_common_create_entity>
 8014b42:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8014b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b48 <uxr_buffer_create_subscriber_bin>:
 8014b48:	b570      	push	{r4, r5, r6, lr}
 8014b4a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8014b4e:	4605      	mov	r5, r0
 8014b50:	9105      	str	r1, [sp, #20]
 8014b52:	4618      	mov	r0, r3
 8014b54:	a992      	add	r1, sp, #584	@ 0x248
 8014b56:	2304      	movs	r3, #4
 8014b58:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8014b5c:	9204      	str	r2, [sp, #16]
 8014b5e:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8014b62:	f000 f9cf 	bl	8014f04 <uxr_object_id_to_raw>
 8014b66:	2203      	movs	r2, #3
 8014b68:	2300      	movs	r3, #0
 8014b6a:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 8014b6e:	a912      	add	r1, sp, #72	@ 0x48
 8014b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b74:	a806      	add	r0, sp, #24
 8014b76:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014b7a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014b7e:	f7f9 fcc9 	bl	800e514 <ucdr_init_buffer>
 8014b82:	a993      	add	r1, sp, #588	@ 0x24c
 8014b84:	a806      	add	r0, sp, #24
 8014b86:	f002 fee3 	bl	8017950 <uxr_serialize_OBJK_Subscriber_Binary>
 8014b8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8014b8e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014b90:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014b94:	9600      	str	r6, [sp, #0]
 8014b96:	9401      	str	r4, [sp, #4]
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	f7ff ff14 	bl	80149c8 <uxr_common_create_entity>
 8014ba0:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8014ba4:	bd70      	pop	{r4, r5, r6, pc}
 8014ba6:	bf00      	nop

08014ba8 <uxr_buffer_create_datawriter_bin>:
 8014ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014baa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8014bae:	ac1d      	add	r4, sp, #116	@ 0x74
 8014bb0:	9105      	str	r1, [sp, #20]
 8014bb2:	4605      	mov	r5, r0
 8014bb4:	a9a1      	add	r1, sp, #644	@ 0x284
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	2305      	movs	r3, #5
 8014bba:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8014bbe:	9204      	str	r2, [sp, #16]
 8014bc0:	7123      	strb	r3, [r4, #4]
 8014bc2:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8014bc6:	f000 f99d 	bl	8014f04 <uxr_object_id_to_raw>
 8014bca:	2303      	movs	r3, #3
 8014bcc:	a90e      	add	r1, sp, #56	@ 0x38
 8014bce:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8014bd0:	7223      	strb	r3, [r4, #8]
 8014bd2:	f000 f997 	bl	8014f04 <uxr_object_id_to_raw>
 8014bd6:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 8014bda:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8014bde:	2200      	movs	r2, #0
 8014be0:	3f00      	subs	r7, #0
 8014be2:	fab3 f383 	clz	r3, r3
 8014be6:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 8014bea:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8014bee:	bf18      	it	ne
 8014bf0:	2701      	movne	r7, #1
 8014bf2:	095b      	lsrs	r3, r3, #5
 8014bf4:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8014bf8:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8014bfc:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8014c00:	2201      	movs	r2, #1
 8014c02:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8014c06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014c0a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8014c0e:	b919      	cbnz	r1, 8014c18 <uxr_buffer_create_datawriter_bin+0x70>
 8014c10:	f043 0302 	orr.w	r3, r3, #2
 8014c14:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014c18:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8014c1c:	2a01      	cmp	r2, #1
 8014c1e:	d022      	beq.n	8014c66 <uxr_buffer_create_datawriter_bin+0xbe>
 8014c20:	2a03      	cmp	r2, #3
 8014c22:	d01b      	beq.n	8014c5c <uxr_buffer_create_datawriter_bin+0xb4>
 8014c24:	b91a      	cbnz	r2, 8014c2e <uxr_buffer_create_datawriter_bin+0x86>
 8014c26:	f043 0308 	orr.w	r3, r3, #8
 8014c2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c32:	a921      	add	r1, sp, #132	@ 0x84
 8014c34:	a806      	add	r0, sp, #24
 8014c36:	f7f9 fc6d 	bl	800e514 <ucdr_init_buffer>
 8014c3a:	a90e      	add	r1, sp, #56	@ 0x38
 8014c3c:	a806      	add	r0, sp, #24
 8014c3e:	f002 ff29 	bl	8017a94 <uxr_serialize_OBJK_DataWriter_Binary>
 8014c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c44:	9600      	str	r6, [sp, #0]
 8014c46:	9401      	str	r4, [sp, #4]
 8014c48:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014c4c:	60e3      	str	r3, [r4, #12]
 8014c4e:	4628      	mov	r0, r5
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	f7ff feb9 	bl	80149c8 <uxr_common_create_entity>
 8014c56:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8014c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5c:	f043 0320 	orr.w	r3, r3, #32
 8014c60:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014c64:	e7e3      	b.n	8014c2e <uxr_buffer_create_datawriter_bin+0x86>
 8014c66:	f043 0310 	orr.w	r3, r3, #16
 8014c6a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014c6e:	e7de      	b.n	8014c2e <uxr_buffer_create_datawriter_bin+0x86>

08014c70 <uxr_buffer_create_datareader_bin>:
 8014c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c72:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8014c76:	ac1f      	add	r4, sp, #124	@ 0x7c
 8014c78:	9105      	str	r1, [sp, #20]
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	a9a3      	add	r1, sp, #652	@ 0x28c
 8014c7e:	4618      	mov	r0, r3
 8014c80:	2306      	movs	r3, #6
 8014c82:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 8014c86:	9204      	str	r2, [sp, #16]
 8014c88:	7123      	strb	r3, [r4, #4]
 8014c8a:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 8014c8e:	f000 f939 	bl	8014f04 <uxr_object_id_to_raw>
 8014c92:	2303      	movs	r3, #3
 8014c94:	a90e      	add	r1, sp, #56	@ 0x38
 8014c96:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8014c98:	7223      	strb	r3, [r4, #8]
 8014c9a:	f000 f933 	bl	8014f04 <uxr_object_id_to_raw>
 8014c9e:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8014ca2:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	3f00      	subs	r7, #0
 8014caa:	fab3 f383 	clz	r3, r3
 8014cae:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8014cb2:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 8014cb6:	bf18      	it	ne
 8014cb8:	2701      	movne	r7, #1
 8014cba:	095b      	lsrs	r3, r3, #5
 8014cbc:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8014cc0:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8014cc4:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8014cc8:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8014ccc:	2201      	movs	r2, #1
 8014cce:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8014cd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014cd6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8014cda:	b919      	cbnz	r1, 8014ce4 <uxr_buffer_create_datareader_bin+0x74>
 8014cdc:	f043 0302 	orr.w	r3, r3, #2
 8014ce0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014ce4:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 8014ce8:	2a01      	cmp	r2, #1
 8014cea:	d022      	beq.n	8014d32 <uxr_buffer_create_datareader_bin+0xc2>
 8014cec:	2a03      	cmp	r2, #3
 8014cee:	d01b      	beq.n	8014d28 <uxr_buffer_create_datareader_bin+0xb8>
 8014cf0:	b91a      	cbnz	r2, 8014cfa <uxr_buffer_create_datareader_bin+0x8a>
 8014cf2:	f043 0308 	orr.w	r3, r3, #8
 8014cf6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014cfe:	a923      	add	r1, sp, #140	@ 0x8c
 8014d00:	a806      	add	r0, sp, #24
 8014d02:	f7f9 fc07 	bl	800e514 <ucdr_init_buffer>
 8014d06:	a90e      	add	r1, sp, #56	@ 0x38
 8014d08:	a806      	add	r0, sp, #24
 8014d0a:	f002 fe87 	bl	8017a1c <uxr_serialize_OBJK_DataReader_Binary>
 8014d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d10:	9600      	str	r6, [sp, #0]
 8014d12:	9401      	str	r4, [sp, #4]
 8014d14:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014d18:	60e3      	str	r3, [r4, #12]
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	f7ff fe53 	bl	80149c8 <uxr_common_create_entity>
 8014d22:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 8014d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d28:	f043 0320 	orr.w	r3, r3, #32
 8014d2c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014d30:	e7e3      	b.n	8014cfa <uxr_buffer_create_datareader_bin+0x8a>
 8014d32:	f043 0310 	orr.w	r3, r3, #16
 8014d36:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014d3a:	e7de      	b.n	8014cfa <uxr_buffer_create_datareader_bin+0x8a>

08014d3c <get_custom_error>:
 8014d3c:	4b01      	ldr	r3, [pc, #4]	@ (8014d44 <get_custom_error+0x8>)
 8014d3e:	7818      	ldrb	r0, [r3, #0]
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop
 8014d44:	20019f7e 	.word	0x20019f7e

08014d48 <recv_custom_msg>:
 8014d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4c:	b089      	sub	sp, #36	@ 0x24
 8014d4e:	4693      	mov	fp, r2
 8014d50:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014d54:	9104      	str	r1, [sp, #16]
 8014d56:	2100      	movs	r1, #0
 8014d58:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014d5c:	9305      	str	r3, [sp, #20]
 8014d5e:	4604      	mov	r4, r0
 8014d60:	f88d 101e 	strb.w	r1, [sp, #30]
 8014d64:	b332      	cbz	r2, 8014db4 <recv_custom_msg+0x6c>
 8014d66:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8014d6a:	f10d 091f 	add.w	r9, sp, #31
 8014d6e:	f10d 0814 	add.w	r8, sp, #20
 8014d72:	f10d 071e 	add.w	r7, sp, #30
 8014d76:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8014d7a:	e004      	b.n	8014d86 <recv_custom_msg+0x3e>
 8014d7c:	9b05      	ldr	r3, [sp, #20]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	dd10      	ble.n	8014da4 <recv_custom_msg+0x5c>
 8014d82:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8014d86:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014d8a:	e9cd 6700 	strd	r6, r7, [sp]
 8014d8e:	4623      	mov	r3, r4
 8014d90:	4622      	mov	r2, r4
 8014d92:	4629      	mov	r1, r5
 8014d94:	4650      	mov	r0, sl
 8014d96:	f001 fc85 	bl	80166a4 <uxr_read_framed_msg>
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d0ee      	beq.n	8014d7c <recv_custom_msg+0x34>
 8014d9e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014da2:	b1a3      	cbz	r3, 8014dce <recv_custom_msg+0x86>
 8014da4:	4b0e      	ldr	r3, [pc, #56]	@ (8014de0 <recv_custom_msg+0x98>)
 8014da6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014daa:	701a      	strb	r2, [r3, #0]
 8014dac:	2000      	movs	r0, #0
 8014dae:	b009      	add	sp, #36	@ 0x24
 8014db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db4:	f10d 021f 	add.w	r2, sp, #31
 8014db8:	9200      	str	r2, [sp, #0]
 8014dba:	4601      	mov	r1, r0
 8014dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014dc0:	47a8      	blx	r5
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d0ee      	beq.n	8014da4 <recv_custom_msg+0x5c>
 8014dc6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d1ea      	bne.n	8014da4 <recv_custom_msg+0x5c>
 8014dce:	9b04      	ldr	r3, [sp, #16]
 8014dd0:	f8cb 0000 	str.w	r0, [fp]
 8014dd4:	2001      	movs	r0, #1
 8014dd6:	601c      	str	r4, [r3, #0]
 8014dd8:	b009      	add	sp, #36	@ 0x24
 8014dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dde:	bf00      	nop
 8014de0:	20019f7e 	.word	0x20019f7e

08014de4 <send_custom_msg>:
 8014de4:	b570      	push	{r4, r5, r6, lr}
 8014de6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8014dea:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014dee:	b086      	sub	sp, #24
 8014df0:	4616      	mov	r6, r2
 8014df2:	b965      	cbnz	r5, 8014e0e <send_custom_msg+0x2a>
 8014df4:	f10d 0317 	add.w	r3, sp, #23
 8014df8:	47a0      	blx	r4
 8014dfa:	b108      	cbz	r0, 8014e00 <send_custom_msg+0x1c>
 8014dfc:	42b0      	cmp	r0, r6
 8014dfe:	d014      	beq.n	8014e2a <send_custom_msg+0x46>
 8014e00:	4b0b      	ldr	r3, [pc, #44]	@ (8014e30 <send_custom_msg+0x4c>)
 8014e02:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014e06:	701a      	strb	r2, [r3, #0]
 8014e08:	2000      	movs	r0, #0
 8014e0a:	b006      	add	sp, #24
 8014e0c:	bd70      	pop	{r4, r5, r6, pc}
 8014e0e:	f10d 0217 	add.w	r2, sp, #23
 8014e12:	9202      	str	r2, [sp, #8]
 8014e14:	2200      	movs	r2, #0
 8014e16:	e9cd 6200 	strd	r6, r2, [sp]
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	4602      	mov	r2, r0
 8014e1e:	4621      	mov	r1, r4
 8014e20:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014e24:	f001 fa60 	bl	80162e8 <uxr_write_framed_msg>
 8014e28:	e7e7      	b.n	8014dfa <send_custom_msg+0x16>
 8014e2a:	2001      	movs	r0, #1
 8014e2c:	b006      	add	sp, #24
 8014e2e:	bd70      	pop	{r4, r5, r6, pc}
 8014e30:	20019f7e 	.word	0x20019f7e

08014e34 <uxr_set_custom_transport_callbacks>:
 8014e34:	b410      	push	{r4}
 8014e36:	9c01      	ldr	r4, [sp, #4]
 8014e38:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014e3c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014e40:	9b02      	ldr	r3, [sp, #8]
 8014e42:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e4a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014e4e:	4770      	bx	lr

08014e50 <uxr_init_custom_transport>:
 8014e50:	b538      	push	{r3, r4, r5, lr}
 8014e52:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014e56:	b303      	cbz	r3, 8014e9a <uxr_init_custom_transport+0x4a>
 8014e58:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	b1e2      	cbz	r2, 8014e9a <uxr_init_custom_transport+0x4a>
 8014e60:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014e64:	b1ca      	cbz	r2, 8014e9a <uxr_init_custom_transport+0x4a>
 8014e66:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014e6a:	b1b2      	cbz	r2, 8014e9a <uxr_init_custom_transport+0x4a>
 8014e6c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014e70:	4798      	blx	r3
 8014e72:	4605      	mov	r5, r0
 8014e74:	b188      	cbz	r0, 8014e9a <uxr_init_custom_transport+0x4a>
 8014e76:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014e7a:	b98b      	cbnz	r3, 8014ea0 <uxr_init_custom_transport+0x50>
 8014e7c:	490b      	ldr	r1, [pc, #44]	@ (8014eac <uxr_init_custom_transport+0x5c>)
 8014e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8014eb0 <uxr_init_custom_transport+0x60>)
 8014e80:	4a0c      	ldr	r2, [pc, #48]	@ (8014eb4 <uxr_init_custom_transport+0x64>)
 8014e82:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014e86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014e8a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014e8e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014e92:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014e96:	4628      	mov	r0, r5
 8014e98:	bd38      	pop	{r3, r4, r5, pc}
 8014e9a:	2500      	movs	r5, #0
 8014e9c:	4628      	mov	r0, r5
 8014e9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014ea6:	f001 fa19 	bl	80162dc <uxr_init_framing_io>
 8014eaa:	e7e7      	b.n	8014e7c <uxr_init_custom_transport+0x2c>
 8014eac:	08014de5 	.word	0x08014de5
 8014eb0:	08014d49 	.word	0x08014d49
 8014eb4:	08014d3d 	.word	0x08014d3d

08014eb8 <uxr_close_custom_transport>:
 8014eb8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014ebc:	4718      	bx	r3
 8014ebe:	bf00      	nop

08014ec0 <uxr_object_id>:
 8014ec0:	b082      	sub	sp, #8
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	f88d 1006 	strb.w	r1, [sp, #6]
 8014ec8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014ecc:	f360 030f 	bfi	r3, r0, #0, #16
 8014ed0:	f362 431f 	bfi	r3, r2, #16, #16
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	b002      	add	sp, #8
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop

08014edc <uxr_object_id_from_raw>:
 8014edc:	7843      	ldrb	r3, [r0, #1]
 8014ede:	7801      	ldrb	r1, [r0, #0]
 8014ee0:	b082      	sub	sp, #8
 8014ee2:	f003 020f 	and.w	r2, r3, #15
 8014ee6:	f88d 2006 	strb.w	r2, [sp, #6]
 8014eea:	091b      	lsrs	r3, r3, #4
 8014eec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014ef0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	f363 000f 	bfi	r0, r3, #0, #16
 8014efa:	f362 401f 	bfi	r0, r2, #16, #16
 8014efe:	b002      	add	sp, #8
 8014f00:	4770      	bx	lr
 8014f02:	bf00      	nop

08014f04 <uxr_object_id_to_raw>:
 8014f04:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8014f08:	b082      	sub	sp, #8
 8014f0a:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8014f0e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8014f12:	700a      	strb	r2, [r1, #0]
 8014f14:	704b      	strb	r3, [r1, #1]
 8014f16:	b002      	add	sp, #8
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop

08014f1c <uxr_buffer_request_data>:
 8014f1c:	b530      	push	{r4, r5, lr}
 8014f1e:	b095      	sub	sp, #84	@ 0x54
 8014f20:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014f24:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8014f26:	f88d 301c 	strb.w	r3, [sp, #28]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	2d00      	cmp	r5, #0
 8014f2e:	bf14      	ite	ne
 8014f30:	2101      	movne	r1, #1
 8014f32:	4611      	moveq	r1, r2
 8014f34:	4604      	mov	r4, r0
 8014f36:	f88d 201d 	strb.w	r2, [sp, #29]
 8014f3a:	f88d 201e 	strb.w	r2, [sp, #30]
 8014f3e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8014f42:	d021      	beq.n	8014f88 <uxr_buffer_request_data+0x6c>
 8014f44:	682a      	ldr	r2, [r5, #0]
 8014f46:	686b      	ldr	r3, [r5, #4]
 8014f48:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8014f4c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014f50:	2210      	movs	r2, #16
 8014f52:	2308      	movs	r3, #8
 8014f54:	2100      	movs	r1, #0
 8014f56:	e9cd 3100 	strd	r3, r1, [sp]
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	9905      	ldr	r1, [sp, #20]
 8014f5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f60:	f001 f854 	bl	801600c <uxr_prepare_stream_to_write_submessage>
 8014f64:	b918      	cbnz	r0, 8014f6e <uxr_buffer_request_data+0x52>
 8014f66:	4604      	mov	r4, r0
 8014f68:	4620      	mov	r0, r4
 8014f6a:	b015      	add	sp, #84	@ 0x54
 8014f6c:	bd30      	pop	{r4, r5, pc}
 8014f6e:	9904      	ldr	r1, [sp, #16]
 8014f70:	aa06      	add	r2, sp, #24
 8014f72:	4620      	mov	r0, r4
 8014f74:	f001 f984 	bl	8016280 <uxr_init_base_object_request>
 8014f78:	a906      	add	r1, sp, #24
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	a80c      	add	r0, sp, #48	@ 0x30
 8014f7e:	f003 f8a1 	bl	80180c4 <uxr_serialize_READ_DATA_Payload>
 8014f82:	4620      	mov	r0, r4
 8014f84:	b015      	add	sp, #84	@ 0x54
 8014f86:	bd30      	pop	{r4, r5, pc}
 8014f88:	2208      	movs	r2, #8
 8014f8a:	e7e2      	b.n	8014f52 <uxr_buffer_request_data+0x36>

08014f8c <uxr_buffer_cancel_data>:
 8014f8c:	b510      	push	{r4, lr}
 8014f8e:	b094      	sub	sp, #80	@ 0x50
 8014f90:	2300      	movs	r3, #0
 8014f92:	9301      	str	r3, [sp, #4]
 8014f94:	9205      	str	r2, [sp, #20]
 8014f96:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	f88d 301e 	strb.w	r3, [sp, #30]
 8014fa0:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014fa4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014fa8:	2308      	movs	r3, #8
 8014faa:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	2210      	movs	r2, #16
 8014fb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	f001 f829 	bl	801600c <uxr_prepare_stream_to_write_submessage>
 8014fba:	b918      	cbnz	r0, 8014fc4 <uxr_buffer_cancel_data+0x38>
 8014fbc:	4604      	mov	r4, r0
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	b014      	add	sp, #80	@ 0x50
 8014fc2:	bd10      	pop	{r4, pc}
 8014fc4:	9905      	ldr	r1, [sp, #20]
 8014fc6:	aa06      	add	r2, sp, #24
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f001 f959 	bl	8016280 <uxr_init_base_object_request>
 8014fce:	a906      	add	r1, sp, #24
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	a80c      	add	r0, sp, #48	@ 0x30
 8014fd4:	f003 f876 	bl	80180c4 <uxr_serialize_READ_DATA_Payload>
 8014fd8:	4620      	mov	r0, r4
 8014fda:	b014      	add	sp, #80	@ 0x50
 8014fdc:	bd10      	pop	{r4, pc}
 8014fde:	bf00      	nop

08014fe0 <read_submessage_format>:
 8014fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fe4:	b095      	sub	sp, #84	@ 0x54
 8014fe6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8014fea:	b113      	cbz	r3, 8014ff2 <read_submessage_format+0x12>
 8014fec:	b015      	add	sp, #84	@ 0x54
 8014fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff2:	460c      	mov	r4, r1
 8014ff4:	4616      	mov	r6, r2
 8014ff6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014ffa:	461d      	mov	r5, r3
 8014ffc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014ffe:	9304      	str	r3, [sp, #16]
 8015000:	1a52      	subs	r2, r2, r1
 8015002:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015004:	9305      	str	r3, [sp, #20]
 8015006:	4680      	mov	r8, r0
 8015008:	a80c      	add	r0, sp, #48	@ 0x30
 801500a:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801500e:	f7f9 fa81 	bl	800e514 <ucdr_init_buffer>
 8015012:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015016:	a80c      	add	r0, sp, #48	@ 0x30
 8015018:	f7f9 fa50 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801501c:	69e3      	ldr	r3, [r4, #28]
 801501e:	b35b      	cbz	r3, 8015078 <read_submessage_format+0x98>
 8015020:	f1b9 0f07 	cmp.w	r9, #7
 8015024:	751d      	strb	r5, [r3, #20]
 8015026:	d043      	beq.n	80150b0 <read_submessage_format+0xd0>
 8015028:	f1b9 0f08 	cmp.w	r9, #8
 801502c:	d032      	beq.n	8015094 <read_submessage_format+0xb4>
 801502e:	f1b9 0f06 	cmp.w	r9, #6
 8015032:	d008      	beq.n	8015046 <read_submessage_format+0x66>
 8015034:	2201      	movs	r2, #1
 8015036:	751a      	strb	r2, [r3, #20]
 8015038:	4631      	mov	r1, r6
 801503a:	4620      	mov	r0, r4
 801503c:	f7f9 faba 	bl	800e5b4 <ucdr_advance_buffer>
 8015040:	b015      	add	sp, #84	@ 0x54
 8015042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015046:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801504a:	2d00      	cmp	r5, #0
 801504c:	d0f2      	beq.n	8015034 <read_submessage_format+0x54>
 801504e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015050:	e9cd 3600 	strd	r3, r6, [sp]
 8015054:	2306      	movs	r3, #6
 8015056:	f88d 3016 	strb.w	r3, [sp, #22]
 801505a:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801505e:	9302      	str	r3, [sp, #8]
 8015060:	463a      	mov	r2, r7
 8015062:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015066:	4640      	mov	r0, r8
 8015068:	47a8      	blx	r5
 801506a:	69e3      	ldr	r3, [r4, #28]
 801506c:	2201      	movs	r2, #1
 801506e:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8015072:	2b00      	cmp	r3, #0
 8015074:	d1de      	bne.n	8015034 <read_submessage_format+0x54>
 8015076:	e7df      	b.n	8015038 <read_submessage_format+0x58>
 8015078:	f1b9 0f07 	cmp.w	r9, #7
 801507c:	d032      	beq.n	80150e4 <read_submessage_format+0x104>
 801507e:	f1b9 0f08 	cmp.w	r9, #8
 8015082:	d02a      	beq.n	80150da <read_submessage_format+0xfa>
 8015084:	f1b9 0f06 	cmp.w	r9, #6
 8015088:	d1d6      	bne.n	8015038 <read_submessage_format+0x58>
 801508a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801508e:	2d00      	cmp	r5, #0
 8015090:	d1dd      	bne.n	801504e <read_submessage_format+0x6e>
 8015092:	e7d1      	b.n	8015038 <read_submessage_format+0x58>
 8015094:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8015098:	2a00      	cmp	r2, #0
 801509a:	d0cb      	beq.n	8015034 <read_submessage_format+0x54>
 801509c:	a906      	add	r1, sp, #24
 801509e:	a80c      	add	r0, sp, #48	@ 0x30
 80150a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80150a2:	f003 f8e3 	bl	801826c <uxr_deserialize_SampleIdentity>
 80150a6:	bb28      	cbnz	r0, 80150f4 <read_submessage_format+0x114>
 80150a8:	69e3      	ldr	r3, [r4, #28]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d1c2      	bne.n	8015034 <read_submessage_format+0x54>
 80150ae:	e7c3      	b.n	8015038 <read_submessage_format+0x58>
 80150b0:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 80150b4:	b16a      	cbz	r2, 80150d2 <read_submessage_format+0xf2>
 80150b6:	a906      	add	r1, sp, #24
 80150b8:	a80c      	add	r0, sp, #48	@ 0x30
 80150ba:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80150bc:	f002 fdb6 	bl	8017c2c <uxr_deserialize_BaseObjectRequest>
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d13a      	bne.n	801513a <read_submessage_format+0x15a>
 80150c4:	68a2      	ldr	r2, [r4, #8]
 80150c6:	69e3      	ldr	r3, [r4, #28]
 80150c8:	4432      	add	r2, r6
 80150ca:	60a2      	str	r2, [r4, #8]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d1b1      	bne.n	8015034 <read_submessage_format+0x54>
 80150d0:	e7b2      	b.n	8015038 <read_submessage_format+0x58>
 80150d2:	68a2      	ldr	r2, [r4, #8]
 80150d4:	4432      	add	r2, r6
 80150d6:	60a2      	str	r2, [r4, #8]
 80150d8:	e7ac      	b.n	8015034 <read_submessage_format+0x54>
 80150da:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d1dc      	bne.n	801509c <read_submessage_format+0xbc>
 80150e2:	e7a9      	b.n	8015038 <read_submessage_format+0x58>
 80150e4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d1e4      	bne.n	80150b6 <read_submessage_format+0xd6>
 80150ec:	68a3      	ldr	r3, [r4, #8]
 80150ee:	4433      	add	r3, r6
 80150f0:	60a3      	str	r3, [r4, #8]
 80150f2:	e7a1      	b.n	8015038 <read_submessage_format+0x58>
 80150f4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80150f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80150fa:	1a52      	subs	r2, r2, r1
 80150fc:	1aed      	subs	r5, r5, r3
 80150fe:	a80c      	add	r0, sp, #48	@ 0x30
 8015100:	f7f9 fa08 	bl	800e514 <ucdr_init_buffer>
 8015104:	4435      	add	r5, r6
 8015106:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801510a:	a80c      	add	r0, sp, #48	@ 0x30
 801510c:	f7f9 f9d6 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 8015110:	b2ad      	uxth	r5, r5
 8015112:	ab0c      	add	r3, sp, #48	@ 0x30
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	9501      	str	r5, [sp, #4]
 8015118:	2108      	movs	r1, #8
 801511a:	f88d 1016 	strb.w	r1, [sp, #22]
 801511e:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8015122:	9102      	str	r1, [sp, #8]
 8015124:	ab06      	add	r3, sp, #24
 8015126:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801512a:	9905      	ldr	r1, [sp, #20]
 801512c:	463a      	mov	r2, r7
 801512e:	4640      	mov	r0, r8
 8015130:	47a8      	blx	r5
 8015132:	2301      	movs	r3, #1
 8015134:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015138:	e7b6      	b.n	80150a8 <read_submessage_format+0xc8>
 801513a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801513e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015140:	1a52      	subs	r2, r2, r1
 8015142:	1aed      	subs	r5, r5, r3
 8015144:	a80c      	add	r0, sp, #48	@ 0x30
 8015146:	f7f9 f9e5 	bl	800e514 <ucdr_init_buffer>
 801514a:	4435      	add	r5, r6
 801514c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015150:	a80c      	add	r0, sp, #48	@ 0x30
 8015152:	f7f9 f9b3 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 8015156:	b2ad      	uxth	r5, r5
 8015158:	ab0c      	add	r3, sp, #48	@ 0x30
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	9501      	str	r5, [sp, #4]
 801515e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015162:	2107      	movs	r1, #7
 8015164:	f88d 1016 	strb.w	r1, [sp, #22]
 8015168:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 801516c:	9102      	str	r1, [sp, #8]
 801516e:	ba5b      	rev16	r3, r3
 8015170:	b29b      	uxth	r3, r3
 8015172:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8015176:	9905      	ldr	r1, [sp, #20]
 8015178:	463a      	mov	r2, r7
 801517a:	4640      	mov	r0, r8
 801517c:	47a8      	blx	r5
 801517e:	2301      	movs	r3, #1
 8015180:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015184:	e79e      	b.n	80150c4 <read_submessage_format+0xe4>
 8015186:	bf00      	nop

08015188 <on_get_fragmentation_info>:
 8015188:	b500      	push	{lr}
 801518a:	b08b      	sub	sp, #44	@ 0x2c
 801518c:	4601      	mov	r1, r0
 801518e:	2204      	movs	r2, #4
 8015190:	a802      	add	r0, sp, #8
 8015192:	f7f9 f9bf 	bl	800e514 <ucdr_init_buffer>
 8015196:	f10d 0305 	add.w	r3, sp, #5
 801519a:	f10d 0206 	add.w	r2, sp, #6
 801519e:	a901      	add	r1, sp, #4
 80151a0:	a802      	add	r0, sp, #8
 80151a2:	f001 fe37 	bl	8016e14 <uxr_read_submessage_header>
 80151a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80151aa:	2b0d      	cmp	r3, #13
 80151ac:	d003      	beq.n	80151b6 <on_get_fragmentation_info+0x2e>
 80151ae:	2000      	movs	r0, #0
 80151b0:	b00b      	add	sp, #44	@ 0x2c
 80151b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80151b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80151ba:	f013 0f02 	tst.w	r3, #2
 80151be:	bf0c      	ite	eq
 80151c0:	2001      	moveq	r0, #1
 80151c2:	2002      	movne	r0, #2
 80151c4:	b00b      	add	sp, #44	@ 0x2c
 80151c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80151ca:	bf00      	nop

080151cc <read_submessage_get_info>:
 80151cc:	b570      	push	{r4, r5, r6, lr}
 80151ce:	2500      	movs	r5, #0
 80151d0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80151d4:	4604      	mov	r4, r0
 80151d6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80151da:	460e      	mov	r6, r1
 80151dc:	a810      	add	r0, sp, #64	@ 0x40
 80151de:	4629      	mov	r1, r5
 80151e0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80151e4:	f008 fd7c 	bl	801dce0 <memset>
 80151e8:	a903      	add	r1, sp, #12
 80151ea:	4630      	mov	r0, r6
 80151ec:	f002 feac 	bl	8017f48 <uxr_deserialize_GET_INFO_Payload>
 80151f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80151f4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80151f8:	4620      	mov	r0, r4
 80151fa:	f001 f839 	bl	8016270 <uxr_session_header_offset>
 80151fe:	462b      	mov	r3, r5
 8015200:	9000      	str	r0, [sp, #0]
 8015202:	220c      	movs	r2, #12
 8015204:	a905      	add	r1, sp, #20
 8015206:	a808      	add	r0, sp, #32
 8015208:	f7f9 f972 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801520c:	a910      	add	r1, sp, #64	@ 0x40
 801520e:	a808      	add	r0, sp, #32
 8015210:	f002 ff0c 	bl	801802c <uxr_serialize_INFO_Payload>
 8015214:	9b08      	ldr	r3, [sp, #32]
 8015216:	462a      	mov	r2, r5
 8015218:	4629      	mov	r1, r5
 801521a:	4620      	mov	r0, r4
 801521c:	f000 ffd4 	bl	80161c8 <uxr_stamp_session_header>
 8015220:	a808      	add	r0, sp, #32
 8015222:	f7f9 f9a3 	bl	800e56c <ucdr_buffer_length>
 8015226:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015228:	4602      	mov	r2, r0
 801522a:	a905      	add	r1, sp, #20
 801522c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015230:	47a0      	blx	r4
 8015232:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8015236:	bd70      	pop	{r4, r5, r6, pc}

08015238 <write_submessage_acknack.isra.0>:
 8015238:	b570      	push	{r4, r5, r6, lr}
 801523a:	b092      	sub	sp, #72	@ 0x48
 801523c:	4605      	mov	r5, r0
 801523e:	460e      	mov	r6, r1
 8015240:	4614      	mov	r4, r2
 8015242:	f001 f815 	bl	8016270 <uxr_session_header_offset>
 8015246:	a905      	add	r1, sp, #20
 8015248:	9000      	str	r0, [sp, #0]
 801524a:	2300      	movs	r3, #0
 801524c:	a80a      	add	r0, sp, #40	@ 0x28
 801524e:	2211      	movs	r2, #17
 8015250:	f7f9 f94e 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 8015254:	2318      	movs	r3, #24
 8015256:	fb03 5404 	mla	r4, r3, r4, r5
 801525a:	2205      	movs	r2, #5
 801525c:	2300      	movs	r3, #0
 801525e:	3450      	adds	r4, #80	@ 0x50
 8015260:	210a      	movs	r1, #10
 8015262:	a80a      	add	r0, sp, #40	@ 0x28
 8015264:	f001 fdbc 	bl	8016de0 <uxr_buffer_submessage_header>
 8015268:	a903      	add	r1, sp, #12
 801526a:	4620      	mov	r0, r4
 801526c:	f006 ffec 	bl	801c248 <uxr_compute_acknack>
 8015270:	ba40      	rev16	r0, r0
 8015272:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015276:	a903      	add	r1, sp, #12
 8015278:	a80a      	add	r0, sp, #40	@ 0x28
 801527a:	f88d 6010 	strb.w	r6, [sp, #16]
 801527e:	f002 ff45 	bl	801810c <uxr_serialize_ACKNACK_Payload>
 8015282:	2200      	movs	r2, #0
 8015284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015286:	4611      	mov	r1, r2
 8015288:	4628      	mov	r0, r5
 801528a:	f000 ff9d 	bl	80161c8 <uxr_stamp_session_header>
 801528e:	a80a      	add	r0, sp, #40	@ 0x28
 8015290:	f7f9 f96c 	bl	800e56c <ucdr_buffer_length>
 8015294:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8015296:	4602      	mov	r2, r0
 8015298:	a905      	add	r1, sp, #20
 801529a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801529e:	47a0      	blx	r4
 80152a0:	b012      	add	sp, #72	@ 0x48
 80152a2:	bd70      	pop	{r4, r5, r6, pc}
 80152a4:	0000      	movs	r0, r0
	...

080152a8 <uxr_init_session>:
 80152a8:	b510      	push	{r4, lr}
 80152aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80152e0 <uxr_init_session+0x38>
 80152ae:	2300      	movs	r3, #0
 80152b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80152b4:	4604      	mov	r4, r0
 80152b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80152ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80152be:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80152c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80152c6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80152ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80152ce:	2181      	movs	r1, #129	@ 0x81
 80152d0:	f000 fede 	bl	8016090 <uxr_init_session_info>
 80152d4:	f104 0008 	add.w	r0, r4, #8
 80152d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152dc:	f001 bc9c 	b.w	8016c18 <uxr_init_stream_storage>
	...

080152e8 <uxr_set_status_callback>:
 80152e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop

080152f0 <uxr_set_topic_callback>:
 80152f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop

080152f8 <uxr_set_request_callback>:
 80152f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop

08015300 <uxr_set_reply_callback>:
 8015300:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop

08015308 <uxr_create_output_best_effort_stream>:
 8015308:	b570      	push	{r4, r5, r6, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	4604      	mov	r4, r0
 801530e:	460d      	mov	r5, r1
 8015310:	4616      	mov	r6, r2
 8015312:	f000 ffad 	bl	8016270 <uxr_session_header_offset>
 8015316:	4632      	mov	r2, r6
 8015318:	4603      	mov	r3, r0
 801531a:	4629      	mov	r1, r5
 801531c:	f104 0008 	add.w	r0, r4, #8
 8015320:	b002      	add	sp, #8
 8015322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015326:	f001 bcc1 	b.w	8016cac <uxr_add_output_best_effort_buffer>
 801532a:	bf00      	nop

0801532c <uxr_create_output_reliable_stream>:
 801532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801532e:	b085      	sub	sp, #20
 8015330:	4604      	mov	r4, r0
 8015332:	460d      	mov	r5, r1
 8015334:	4616      	mov	r6, r2
 8015336:	461f      	mov	r7, r3
 8015338:	f000 ff9a 	bl	8016270 <uxr_session_header_offset>
 801533c:	463b      	mov	r3, r7
 801533e:	9000      	str	r0, [sp, #0]
 8015340:	4632      	mov	r2, r6
 8015342:	4629      	mov	r1, r5
 8015344:	f104 0008 	add.w	r0, r4, #8
 8015348:	f001 fcc4 	bl	8016cd4 <uxr_add_output_reliable_buffer>
 801534c:	b005      	add	sp, #20
 801534e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015350 <uxr_create_input_best_effort_stream>:
 8015350:	b082      	sub	sp, #8
 8015352:	3008      	adds	r0, #8
 8015354:	b002      	add	sp, #8
 8015356:	f001 bcd7 	b.w	8016d08 <uxr_add_input_best_effort_buffer>
 801535a:	bf00      	nop

0801535c <uxr_create_input_reliable_stream>:
 801535c:	b510      	push	{r4, lr}
 801535e:	b084      	sub	sp, #16
 8015360:	4c03      	ldr	r4, [pc, #12]	@ (8015370 <uxr_create_input_reliable_stream+0x14>)
 8015362:	9400      	str	r4, [sp, #0]
 8015364:	3008      	adds	r0, #8
 8015366:	f001 fce5 	bl	8016d34 <uxr_add_input_reliable_buffer>
 801536a:	b004      	add	sp, #16
 801536c:	bd10      	pop	{r4, pc}
 801536e:	bf00      	nop
 8015370:	08015189 	.word	0x08015189

08015374 <uxr_epoch_nanos>:
 8015374:	b510      	push	{r4, lr}
 8015376:	4604      	mov	r4, r0
 8015378:	f001 fd92 	bl	8016ea0 <uxr_nanos>
 801537c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8015380:	1ac0      	subs	r0, r0, r3
 8015382:	eb61 0102 	sbc.w	r1, r1, r2
 8015386:	bd10      	pop	{r4, pc}

08015388 <uxr_flash_output_streams>:
 8015388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801538c:	7e03      	ldrb	r3, [r0, #24]
 801538e:	b084      	sub	sp, #16
 8015390:	4604      	mov	r4, r0
 8015392:	b373      	cbz	r3, 80153f2 <uxr_flash_output_streams+0x6a>
 8015394:	2500      	movs	r5, #0
 8015396:	f100 0908 	add.w	r9, r0, #8
 801539a:	f10d 0802 	add.w	r8, sp, #2
 801539e:	4628      	mov	r0, r5
 80153a0:	af03      	add	r7, sp, #12
 80153a2:	ae02      	add	r6, sp, #8
 80153a4:	e006      	b.n	80153b4 <uxr_flash_output_streams+0x2c>
 80153a6:	7e23      	ldrb	r3, [r4, #24]
 80153a8:	3501      	adds	r5, #1
 80153aa:	b2e8      	uxtb	r0, r5
 80153ac:	4283      	cmp	r3, r0
 80153ae:	f109 0910 	add.w	r9, r9, #16
 80153b2:	d91e      	bls.n	80153f2 <uxr_flash_output_streams+0x6a>
 80153b4:	2201      	movs	r2, #1
 80153b6:	4611      	mov	r1, r2
 80153b8:	f001 fbf6 	bl	8016ba8 <uxr_stream_id>
 80153bc:	4643      	mov	r3, r8
 80153be:	4684      	mov	ip, r0
 80153c0:	463a      	mov	r2, r7
 80153c2:	4631      	mov	r1, r6
 80153c4:	4648      	mov	r0, r9
 80153c6:	f8cd c004 	str.w	ip, [sp, #4]
 80153ca:	f006 ffc1 	bl	801c350 <uxr_prepare_best_effort_buffer_to_send>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d0e9      	beq.n	80153a6 <uxr_flash_output_streams+0x1e>
 80153d2:	9b02      	ldr	r3, [sp, #8]
 80153d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80153d8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80153dc:	4620      	mov	r0, r4
 80153de:	f000 fef3 	bl	80161c8 <uxr_stamp_session_header>
 80153e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80153e4:	9a03      	ldr	r2, [sp, #12]
 80153e6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80153ea:	9902      	ldr	r1, [sp, #8]
 80153ec:	6818      	ldr	r0, [r3, #0]
 80153ee:	47d0      	blx	sl
 80153f0:	e7d9      	b.n	80153a6 <uxr_flash_output_streams+0x1e>
 80153f2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80153f6:	b37b      	cbz	r3, 8015458 <uxr_flash_output_streams+0xd0>
 80153f8:	f04f 0900 	mov.w	r9, #0
 80153fc:	f104 0520 	add.w	r5, r4, #32
 8015400:	f10d 0802 	add.w	r8, sp, #2
 8015404:	af03      	add	r7, sp, #12
 8015406:	ae02      	add	r6, sp, #8
 8015408:	4648      	mov	r0, r9
 801540a:	2201      	movs	r2, #1
 801540c:	2102      	movs	r1, #2
 801540e:	f001 fbcb 	bl	8016ba8 <uxr_stream_id>
 8015412:	9001      	str	r0, [sp, #4]
 8015414:	e00e      	b.n	8015434 <uxr_flash_output_streams+0xac>
 8015416:	9b02      	ldr	r3, [sp, #8]
 8015418:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801541c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015420:	4620      	mov	r0, r4
 8015422:	f000 fed1 	bl	80161c8 <uxr_stamp_session_header>
 8015426:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015428:	9a03      	ldr	r2, [sp, #12]
 801542a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801542e:	9902      	ldr	r1, [sp, #8]
 8015430:	6818      	ldr	r0, [r3, #0]
 8015432:	47d0      	blx	sl
 8015434:	4643      	mov	r3, r8
 8015436:	463a      	mov	r2, r7
 8015438:	4631      	mov	r1, r6
 801543a:	4628      	mov	r0, r5
 801543c:	f007 f99c 	bl	801c778 <uxr_prepare_next_reliable_buffer_to_send>
 8015440:	2800      	cmp	r0, #0
 8015442:	d1e8      	bne.n	8015416 <uxr_flash_output_streams+0x8e>
 8015444:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015448:	f109 0901 	add.w	r9, r9, #1
 801544c:	fa5f f089 	uxtb.w	r0, r9
 8015450:	4283      	cmp	r3, r0
 8015452:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 8015456:	d8d8      	bhi.n	801540a <uxr_flash_output_streams+0x82>
 8015458:	b004      	add	sp, #16
 801545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801545e:	bf00      	nop

08015460 <read_submessage_info>:
 8015460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015464:	460d      	mov	r5, r1
 8015466:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801546a:	4669      	mov	r1, sp
 801546c:	4607      	mov	r7, r0
 801546e:	4628      	mov	r0, r5
 8015470:	f002 fc7a 	bl	8017d68 <uxr_deserialize_BaseObjectReply>
 8015474:	a902      	add	r1, sp, #8
 8015476:	4604      	mov	r4, r0
 8015478:	4628      	mov	r0, r5
 801547a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801547e:	f7fe f801 	bl	8013484 <ucdr_deserialize_bool>
 8015482:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8015486:	4004      	ands	r4, r0
 8015488:	b2e4      	uxtb	r4, r4
 801548a:	b95b      	cbnz	r3, 80154a4 <read_submessage_info+0x44>
 801548c:	a987      	add	r1, sp, #540	@ 0x21c
 801548e:	4628      	mov	r0, r5
 8015490:	f7fd fff8 	bl	8013484 <ucdr_deserialize_bool>
 8015494:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8015498:	4606      	mov	r6, r0
 801549a:	b94b      	cbnz	r3, 80154b0 <read_submessage_info+0x50>
 801549c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80154a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154a4:	a903      	add	r1, sp, #12
 80154a6:	4628      	mov	r0, r5
 80154a8:	f002 fb20 	bl	8017aec <uxr_deserialize_ObjectVariant>
 80154ac:	4004      	ands	r4, r0
 80154ae:	e7ed      	b.n	801548c <read_submessage_info+0x2c>
 80154b0:	a988      	add	r1, sp, #544	@ 0x220
 80154b2:	4628      	mov	r0, r5
 80154b4:	f7fe f814 	bl	80134e0 <ucdr_deserialize_uint8_t>
 80154b8:	4234      	tst	r4, r6
 80154ba:	d0ef      	beq.n	801549c <read_submessage_info+0x3c>
 80154bc:	2800      	cmp	r0, #0
 80154be:	d0ed      	beq.n	801549c <read_submessage_info+0x3c>
 80154c0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80154c4:	2b0d      	cmp	r3, #13
 80154c6:	d1e9      	bne.n	801549c <read_submessage_info+0x3c>
 80154c8:	a98a      	add	r1, sp, #552	@ 0x228
 80154ca:	4628      	mov	r0, r5
 80154cc:	f7fe fda4 	bl	8014018 <ucdr_deserialize_int16_t>
 80154d0:	b140      	cbz	r0, 80154e4 <read_submessage_info+0x84>
 80154d2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	dd07      	ble.n	80154ea <read_submessage_info+0x8a>
 80154da:	f1b8 0f00 	cmp.w	r8, #0
 80154de:	bf0c      	ite	eq
 80154e0:	2002      	moveq	r0, #2
 80154e2:	2001      	movne	r0, #1
 80154e4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80154e8:	e7d8      	b.n	801549c <read_submessage_info+0x3c>
 80154ea:	2000      	movs	r0, #0
 80154ec:	e7fa      	b.n	80154e4 <read_submessage_info+0x84>
 80154ee:	bf00      	nop

080154f0 <read_submessage_list>:
 80154f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154f4:	b097      	sub	sp, #92	@ 0x5c
 80154f6:	4604      	mov	r4, r0
 80154f8:	460d      	mov	r5, r1
 80154fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80154fc:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8015500:	aa0c      	add	r2, sp, #48	@ 0x30
 8015502:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8015506:	4628      	mov	r0, r5
 8015508:	f001 fc84 	bl	8016e14 <uxr_read_submessage_header>
 801550c:	2800      	cmp	r0, #0
 801550e:	f000 812c 	beq.w	801576a <read_submessage_list+0x27a>
 8015512:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8015516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015518:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 801551c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8015520:	3902      	subs	r1, #2
 8015522:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015526:	290d      	cmp	r1, #13
 8015528:	d8e8      	bhi.n	80154fc <read_submessage_list+0xc>
 801552a:	a201      	add	r2, pc, #4	@ (adr r2, 8015530 <read_submessage_list+0x40>)
 801552c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8015530:	08015761 	.word	0x08015761
 8015534:	080154fd 	.word	0x080154fd
 8015538:	08015751 	.word	0x08015751
 801553c:	080156f3 	.word	0x080156f3
 8015540:	080156e9 	.word	0x080156e9
 8015544:	080154fd 	.word	0x080154fd
 8015548:	080154fd 	.word	0x080154fd
 801554c:	0801566d 	.word	0x0801566d
 8015550:	08015605 	.word	0x08015605
 8015554:	080155c5 	.word	0x080155c5
 8015558:	080154fd 	.word	0x080154fd
 801555c:	080154fd 	.word	0x080154fd
 8015560:	080154fd 	.word	0x080154fd
 8015564:	08015569 	.word	0x08015569
 8015568:	a910      	add	r1, sp, #64	@ 0x40
 801556a:	4628      	mov	r0, r5
 801556c:	f002 fe2c 	bl	80181c8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8015570:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8015574:	2e00      	cmp	r6, #0
 8015576:	f000 8100 	beq.w	801577a <read_submessage_list+0x28a>
 801557a:	f001 fc91 	bl	8016ea0 <uxr_nanos>
 801557e:	f04f 0800 	mov.w	r8, #0
 8015582:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801558a:	4990      	ldr	r1, [pc, #576]	@ (80157cc <read_submessage_list+0x2dc>)
 801558c:	46c4      	mov	ip, r8
 801558e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8015592:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8015596:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015598:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801559a:	46c6      	mov	lr, r8
 801559c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 80155a0:	46bc      	mov	ip, r7
 80155a2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80155a6:	fbc0 7801 	smlal	r7, r8, r0, r1
 80155aa:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80155ae:	e9cd 7800 	strd	r7, r8, [sp]
 80155b2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80155b6:	9106      	str	r1, [sp, #24]
 80155b8:	4620      	mov	r0, r4
 80155ba:	47b0      	blx	r6
 80155bc:	2301      	movs	r3, #1
 80155be:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80155c2:	e79b      	b.n	80154fc <read_submessage_list+0xc>
 80155c4:	a910      	add	r1, sp, #64	@ 0x40
 80155c6:	4628      	mov	r0, r5
 80155c8:	f002 fdde 	bl	8018188 <uxr_deserialize_HEARTBEAT_Payload>
 80155cc:	2100      	movs	r1, #0
 80155ce:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80155d2:	f001 fb05 	bl	8016be0 <uxr_stream_id_from_raw>
 80155d6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80155da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80155dc:	4631      	mov	r1, r6
 80155de:	f104 0008 	add.w	r0, r4, #8
 80155e2:	f001 fbdd 	bl	8016da0 <uxr_get_input_reliable_stream>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d088      	beq.n	80154fc <read_submessage_list+0xc>
 80155ea:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80155ee:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80155f2:	f006 fe1d 	bl	801c230 <uxr_process_heartbeat>
 80155f6:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80155fa:	4632      	mov	r2, r6
 80155fc:	4620      	mov	r0, r4
 80155fe:	f7ff fe1b 	bl	8015238 <write_submessage_acknack.isra.0>
 8015602:	e77b      	b.n	80154fc <read_submessage_list+0xc>
 8015604:	a910      	add	r1, sp, #64	@ 0x40
 8015606:	4628      	mov	r0, r5
 8015608:	f002 fd96 	bl	8018138 <uxr_deserialize_ACKNACK_Payload>
 801560c:	2100      	movs	r1, #0
 801560e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015612:	f001 fae5 	bl	8016be0 <uxr_stream_id_from_raw>
 8015616:	900d      	str	r0, [sp, #52]	@ 0x34
 8015618:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801561c:	f104 0008 	add.w	r0, r4, #8
 8015620:	f001 fbaa 	bl	8016d78 <uxr_get_output_reliable_stream>
 8015624:	4606      	mov	r6, r0
 8015626:	2800      	cmp	r0, #0
 8015628:	f43f af68 	beq.w	80154fc <read_submessage_list+0xc>
 801562c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8015630:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015634:	ba49      	rev16	r1, r1
 8015636:	b289      	uxth	r1, r1
 8015638:	f007 f948 	bl	801c8cc <uxr_process_acknack>
 801563c:	4630      	mov	r0, r6
 801563e:	f007 f909 	bl	801c854 <uxr_begin_output_nack_buffer_it>
 8015642:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015646:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801564a:	e005      	b.n	8015658 <read_submessage_list+0x168>
 801564c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801564e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015650:	685f      	ldr	r7, [r3, #4]
 8015652:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015654:	6818      	ldr	r0, [r3, #0]
 8015656:	47b8      	blx	r7
 8015658:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801565c:	aa0f      	add	r2, sp, #60	@ 0x3c
 801565e:	4641      	mov	r1, r8
 8015660:	4630      	mov	r0, r6
 8015662:	f007 f8f9 	bl	801c858 <uxr_next_reliable_nack_buffer_to_send>
 8015666:	2800      	cmp	r0, #0
 8015668:	d1f0      	bne.n	801564c <read_submessage_list+0x15c>
 801566a:	e747      	b.n	80154fc <read_submessage_list+0xc>
 801566c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015670:	4641      	mov	r1, r8
 8015672:	900d      	str	r0, [sp, #52]	@ 0x34
 8015674:	4628      	mov	r0, r5
 8015676:	f002 fad9 	bl	8017c2c <uxr_deserialize_BaseObjectRequest>
 801567a:	3e04      	subs	r6, #4
 801567c:	4640      	mov	r0, r8
 801567e:	a90f      	add	r1, sp, #60	@ 0x3c
 8015680:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8015684:	f000 fe1a 	bl	80162bc <uxr_parse_base_object_request>
 8015688:	fa1f f886 	uxth.w	r8, r6
 801568c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8015690:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015692:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8015696:	9110      	str	r1, [sp, #64]	@ 0x40
 8015698:	f007 070e 	and.w	r7, r7, #14
 801569c:	b136      	cbz	r6, 80156ac <read_submessage_list+0x1bc>
 801569e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	464a      	mov	r2, r9
 80156a6:	2300      	movs	r3, #0
 80156a8:	4620      	mov	r0, r4
 80156aa:	47b0      	blx	r6
 80156ac:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80156ae:	b16b      	cbz	r3, 80156cc <read_submessage_list+0x1dc>
 80156b0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80156b2:	2100      	movs	r1, #0
 80156b4:	3802      	subs	r0, #2
 80156b6:	e002      	b.n	80156be <read_submessage_list+0x1ce>
 80156b8:	3101      	adds	r1, #1
 80156ba:	428b      	cmp	r3, r1
 80156bc:	d006      	beq.n	80156cc <read_submessage_list+0x1dc>
 80156be:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80156c2:	454e      	cmp	r6, r9
 80156c4:	d1f8      	bne.n	80156b8 <read_submessage_list+0x1c8>
 80156c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80156c8:	2200      	movs	r2, #0
 80156ca:	545a      	strb	r2, [r3, r1]
 80156cc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80156d0:	9102      	str	r1, [sp, #8]
 80156d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80156d4:	9101      	str	r1, [sp, #4]
 80156d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80156d8:	9100      	str	r1, [sp, #0]
 80156da:	463b      	mov	r3, r7
 80156dc:	4642      	mov	r2, r8
 80156de:	4629      	mov	r1, r5
 80156e0:	4620      	mov	r0, r4
 80156e2:	f7ff fc7d 	bl	8014fe0 <read_submessage_format>
 80156e6:	e709      	b.n	80154fc <read_submessage_list+0xc>
 80156e8:	4629      	mov	r1, r5
 80156ea:	4620      	mov	r0, r4
 80156ec:	f7ff feb8 	bl	8015460 <read_submessage_info>
 80156f0:	e704      	b.n	80154fc <read_submessage_list+0xc>
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d03c      	beq.n	8015770 <read_submessage_list+0x280>
 80156f6:	a910      	add	r1, sp, #64	@ 0x40
 80156f8:	4628      	mov	r0, r5
 80156fa:	f002 fc79 	bl	8017ff0 <uxr_deserialize_STATUS_Payload>
 80156fe:	a90e      	add	r1, sp, #56	@ 0x38
 8015700:	a810      	add	r0, sp, #64	@ 0x40
 8015702:	aa0d      	add	r2, sp, #52	@ 0x34
 8015704:	f000 fdda 	bl	80162bc <uxr_parse_base_object_request>
 8015708:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 801570c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801570e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8015712:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8015716:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015718:	b136      	cbz	r6, 8015728 <read_submessage_list+0x238>
 801571a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801571e:	9300      	str	r3, [sp, #0]
 8015720:	463a      	mov	r2, r7
 8015722:	4643      	mov	r3, r8
 8015724:	4620      	mov	r0, r4
 8015726:	47b0      	blx	r6
 8015728:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801572a:	2a00      	cmp	r2, #0
 801572c:	f43f aee6 	beq.w	80154fc <read_submessage_list+0xc>
 8015730:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015732:	2100      	movs	r1, #0
 8015734:	3802      	subs	r0, #2
 8015736:	e003      	b.n	8015740 <read_submessage_list+0x250>
 8015738:	3101      	adds	r1, #1
 801573a:	4291      	cmp	r1, r2
 801573c:	f43f aede 	beq.w	80154fc <read_submessage_list+0xc>
 8015740:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8015744:	42be      	cmp	r6, r7
 8015746:	d1f7      	bne.n	8015738 <read_submessage_list+0x248>
 8015748:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801574a:	f803 8001 	strb.w	r8, [r3, r1]
 801574e:	e6d5      	b.n	80154fc <read_submessage_list+0xc>
 8015750:	2b00      	cmp	r3, #0
 8015752:	f47f aed3 	bne.w	80154fc <read_submessage_list+0xc>
 8015756:	4629      	mov	r1, r5
 8015758:	4620      	mov	r0, r4
 801575a:	f000 fcf7 	bl	801614c <uxr_read_create_session_status>
 801575e:	e6cd      	b.n	80154fc <read_submessage_list+0xc>
 8015760:	4629      	mov	r1, r5
 8015762:	4620      	mov	r0, r4
 8015764:	f7ff fd32 	bl	80151cc <read_submessage_get_info>
 8015768:	e6c8      	b.n	80154fc <read_submessage_list+0xc>
 801576a:	b017      	add	sp, #92	@ 0x5c
 801576c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015770:	4629      	mov	r1, r5
 8015772:	4620      	mov	r0, r4
 8015774:	f000 fcf8 	bl	8016168 <uxr_read_delete_session_status>
 8015778:	e6c0      	b.n	80154fc <read_submessage_list+0xc>
 801577a:	f001 fb91 	bl	8016ea0 <uxr_nanos>
 801577e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8015782:	f8df c048 	ldr.w	ip, [pc, #72]	@ 80157cc <read_submessage_list+0x2dc>
 8015786:	4633      	mov	r3, r6
 8015788:	fbc7 230c 	smlal	r2, r3, r7, ip
 801578c:	1810      	adds	r0, r2, r0
 801578e:	eb43 0301 	adc.w	r3, r3, r1
 8015792:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8015796:	46b6      	mov	lr, r6
 8015798:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 801579c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 80157a0:	fbc1 760c 	smlal	r7, r6, r1, ip
 80157a4:	19d2      	adds	r2, r2, r7
 80157a6:	eb4e 0106 	adc.w	r1, lr, r6
 80157aa:	1a80      	subs	r0, r0, r2
 80157ac:	eb63 0301 	sbc.w	r3, r3, r1
 80157b0:	0fda      	lsrs	r2, r3, #31
 80157b2:	1812      	adds	r2, r2, r0
 80157b4:	f143 0300 	adc.w	r3, r3, #0
 80157b8:	0852      	lsrs	r2, r2, #1
 80157ba:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80157be:	105b      	asrs	r3, r3, #1
 80157c0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80157c4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80157c8:	e6f8      	b.n	80155bc <read_submessage_list+0xcc>
 80157ca:	bf00      	nop
 80157cc:	3b9aca00 	.word	0x3b9aca00

080157d0 <listen_message_reliably>:
 80157d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d4:	f1b1 0b00 	subs.w	fp, r1, #0
 80157d8:	b09f      	sub	sp, #124	@ 0x7c
 80157da:	4606      	mov	r6, r0
 80157dc:	bfb8      	it	lt
 80157de:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 80157e2:	f001 fb43 	bl	8016e6c <uxr_millis>
 80157e6:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80157ea:	9003      	str	r0, [sp, #12]
 80157ec:	9104      	str	r1, [sp, #16]
 80157ee:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80157f2:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f000 80a4 	beq.w	8015944 <listen_message_reliably+0x174>
 80157fc:	2500      	movs	r5, #0
 80157fe:	e9cd b806 	strd	fp, r8, [sp, #24]
 8015802:	f106 0420 	add.w	r4, r6, #32
 8015806:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801580a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 801580e:	4628      	mov	r0, r5
 8015810:	e011      	b.n	8015836 <listen_message_reliably+0x66>
 8015812:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015816:	42ba      	cmp	r2, r7
 8015818:	eb73 0109 	sbcs.w	r1, r3, r9
 801581c:	bfb8      	it	lt
 801581e:	4699      	movlt	r9, r3
 8015820:	f105 0501 	add.w	r5, r5, #1
 8015824:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015828:	b2e8      	uxtb	r0, r5
 801582a:	bfb8      	it	lt
 801582c:	4617      	movlt	r7, r2
 801582e:	4283      	cmp	r3, r0
 8015830:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8015834:	d94a      	bls.n	80158cc <listen_message_reliably+0xfc>
 8015836:	2201      	movs	r2, #1
 8015838:	2102      	movs	r1, #2
 801583a:	f001 f9b5 	bl	8016ba8 <uxr_stream_id>
 801583e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015842:	4601      	mov	r1, r0
 8015844:	4620      	mov	r0, r4
 8015846:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015848:	f006 ffd4 	bl	801c7f4 <uxr_update_output_stream_heartbeat_timestamp>
 801584c:	2800      	cmp	r0, #0
 801584e:	d0e0      	beq.n	8015812 <listen_message_reliably+0x42>
 8015850:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8015854:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8015858:	9305      	str	r3, [sp, #20]
 801585a:	4630      	mov	r0, r6
 801585c:	f000 fd08 	bl	8016270 <uxr_session_header_offset>
 8015860:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8015864:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8015868:	9000      	str	r0, [sp, #0]
 801586a:	a90e      	add	r1, sp, #56	@ 0x38
 801586c:	4640      	mov	r0, r8
 801586e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8015872:	2300      	movs	r3, #0
 8015874:	2211      	movs	r2, #17
 8015876:	f7f8 fe3b 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801587a:	2300      	movs	r3, #0
 801587c:	2205      	movs	r2, #5
 801587e:	210b      	movs	r1, #11
 8015880:	4640      	mov	r0, r8
 8015882:	f001 faad 	bl	8016de0 <uxr_buffer_submessage_header>
 8015886:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 801588a:	2101      	movs	r1, #1
 801588c:	f007 f874 	bl	801c978 <uxr_seq_num_add>
 8015890:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8015894:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015898:	4602      	mov	r2, r0
 801589a:	9b05      	ldr	r3, [sp, #20]
 801589c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80158a0:	a90c      	add	r1, sp, #48	@ 0x30
 80158a2:	4640      	mov	r0, r8
 80158a4:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80158a8:	f002 fc5a 	bl	8018160 <uxr_serialize_HEARTBEAT_Payload>
 80158ac:	2200      	movs	r2, #0
 80158ae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80158b0:	4611      	mov	r1, r2
 80158b2:	4630      	mov	r0, r6
 80158b4:	f000 fc88 	bl	80161c8 <uxr_stamp_session_header>
 80158b8:	4640      	mov	r0, r8
 80158ba:	f7f8 fe57 	bl	800e56c <ucdr_buffer_length>
 80158be:	4602      	mov	r2, r0
 80158c0:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 80158c2:	a90e      	add	r1, sp, #56	@ 0x38
 80158c4:	e9d0 0300 	ldrd	r0, r3, [r0]
 80158c8:	4798      	blx	r3
 80158ca:	e7a2      	b.n	8015812 <listen_message_reliably+0x42>
 80158cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158d0:	4599      	cmp	r9, r3
 80158d2:	bf08      	it	eq
 80158d4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 80158d8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 80158dc:	d032      	beq.n	8015944 <listen_message_reliably+0x174>
 80158de:	9b03      	ldr	r3, [sp, #12]
 80158e0:	1aff      	subs	r7, r7, r3
 80158e2:	2f00      	cmp	r7, #0
 80158e4:	bf08      	it	eq
 80158e6:	2701      	moveq	r7, #1
 80158e8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80158ea:	455f      	cmp	r7, fp
 80158ec:	bfa8      	it	ge
 80158ee:	465f      	movge	r7, fp
 80158f0:	689c      	ldr	r4, [r3, #8]
 80158f2:	6818      	ldr	r0, [r3, #0]
 80158f4:	4642      	mov	r2, r8
 80158f6:	463b      	mov	r3, r7
 80158f8:	4651      	mov	r1, sl
 80158fa:	47a0      	blx	r4
 80158fc:	ebab 0b07 	sub.w	fp, fp, r7
 8015900:	b958      	cbnz	r0, 801591a <listen_message_reliably+0x14a>
 8015902:	f1bb 0f00 	cmp.w	fp, #0
 8015906:	dd44      	ble.n	8015992 <listen_message_reliably+0x1c2>
 8015908:	f001 fab0 	bl	8016e6c <uxr_millis>
 801590c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015910:	2b00      	cmp	r3, #0
 8015912:	d03c      	beq.n	801598e <listen_message_reliably+0x1be>
 8015914:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015918:	e770      	b.n	80157fc <listen_message_reliably+0x2c>
 801591a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 801591e:	4604      	mov	r4, r0
 8015920:	a80e      	add	r0, sp, #56	@ 0x38
 8015922:	f7f8 fdf7 	bl	800e514 <ucdr_init_buffer>
 8015926:	2500      	movs	r5, #0
 8015928:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 801592c:	aa08      	add	r2, sp, #32
 801592e:	a90e      	add	r1, sp, #56	@ 0x38
 8015930:	4630      	mov	r0, r6
 8015932:	f88d 5020 	strb.w	r5, [sp, #32]
 8015936:	f000 fc5d 	bl	80161f4 <uxr_read_session_header>
 801593a:	b928      	cbnz	r0, 8015948 <listen_message_reliably+0x178>
 801593c:	4620      	mov	r0, r4
 801593e:	b01f      	add	sp, #124	@ 0x7c
 8015940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015944:	465f      	mov	r7, fp
 8015946:	e7cc      	b.n	80158e2 <listen_message_reliably+0x112>
 8015948:	4629      	mov	r1, r5
 801594a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801594e:	f001 f947 	bl	8016be0 <uxr_stream_id_from_raw>
 8015952:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015956:	2f01      	cmp	r7, #1
 8015958:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 801595c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8015960:	fa5f f880 	uxtb.w	r8, r0
 8015964:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8015968:	d050      	beq.n	8015a0c <listen_message_reliably+0x23c>
 801596a:	2f02      	cmp	r7, #2
 801596c:	d016      	beq.n	801599c <listen_message_reliably+0x1cc>
 801596e:	2f00      	cmp	r7, #0
 8015970:	d1e4      	bne.n	801593c <listen_message_reliably+0x16c>
 8015972:	4639      	mov	r1, r7
 8015974:	4638      	mov	r0, r7
 8015976:	f001 f933 	bl	8016be0 <uxr_stream_id_from_raw>
 801597a:	a90e      	add	r1, sp, #56	@ 0x38
 801597c:	4602      	mov	r2, r0
 801597e:	4630      	mov	r0, r6
 8015980:	920c      	str	r2, [sp, #48]	@ 0x30
 8015982:	f7ff fdb5 	bl	80154f0 <read_submessage_list>
 8015986:	4620      	mov	r0, r4
 8015988:	b01f      	add	sp, #124	@ 0x7c
 801598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598e:	465f      	mov	r7, fp
 8015990:	e7aa      	b.n	80158e8 <listen_message_reliably+0x118>
 8015992:	4604      	mov	r4, r0
 8015994:	4620      	mov	r0, r4
 8015996:	b01f      	add	sp, #124	@ 0x7c
 8015998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599c:	4629      	mov	r1, r5
 801599e:	f106 0008 	add.w	r0, r6, #8
 80159a2:	f001 f9fd 	bl	8016da0 <uxr_get_input_reliable_stream>
 80159a6:	4681      	mov	r9, r0
 80159a8:	b338      	cbz	r0, 80159fa <listen_message_reliably+0x22a>
 80159aa:	a80e      	add	r0, sp, #56	@ 0x38
 80159ac:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80159b0:	f7f8 fde0 	bl	800e574 <ucdr_buffer_remaining>
 80159b4:	4603      	mov	r3, r0
 80159b6:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 80159ba:	9000      	str	r0, [sp, #0]
 80159bc:	465a      	mov	r2, fp
 80159be:	4651      	mov	r1, sl
 80159c0:	4648      	mov	r0, r9
 80159c2:	f006 fb43 	bl	801c04c <uxr_receive_reliable_message>
 80159c6:	b1c0      	cbz	r0, 80159fa <listen_message_reliably+0x22a>
 80159c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80159cc:	b393      	cbz	r3, 8015a34 <listen_message_reliably+0x264>
 80159ce:	af16      	add	r7, sp, #88	@ 0x58
 80159d0:	f04f 0a02 	mov.w	sl, #2
 80159d4:	e00a      	b.n	80159ec <listen_message_reliably+0x21c>
 80159d6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 80159da:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 80159de:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 80159e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80159e4:	4639      	mov	r1, r7
 80159e6:	4630      	mov	r0, r6
 80159e8:	f7ff fd82 	bl	80154f0 <read_submessage_list>
 80159ec:	2204      	movs	r2, #4
 80159ee:	4639      	mov	r1, r7
 80159f0:	4648      	mov	r0, r9
 80159f2:	f006 fba5 	bl	801c140 <uxr_next_input_reliable_buffer_available>
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d1ed      	bne.n	80159d6 <listen_message_reliably+0x206>
 80159fa:	4630      	mov	r0, r6
 80159fc:	462a      	mov	r2, r5
 80159fe:	4641      	mov	r1, r8
 8015a00:	f7ff fc1a 	bl	8015238 <write_submessage_acknack.isra.0>
 8015a04:	4620      	mov	r0, r4
 8015a06:	b01f      	add	sp, #124	@ 0x7c
 8015a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0c:	4629      	mov	r1, r5
 8015a0e:	f106 0008 	add.w	r0, r6, #8
 8015a12:	f001 f9bb 	bl	8016d8c <uxr_get_input_best_effort_stream>
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d090      	beq.n	801593c <listen_message_reliably+0x16c>
 8015a1a:	4651      	mov	r1, sl
 8015a1c:	f006 fa86 	bl	801bf2c <uxr_receive_best_effort_message>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d08b      	beq.n	801593c <listen_message_reliably+0x16c>
 8015a24:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015a28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015a2a:	a90e      	add	r1, sp, #56	@ 0x38
 8015a2c:	4630      	mov	r0, r6
 8015a2e:	f7ff fd5f 	bl	80154f0 <read_submessage_list>
 8015a32:	e783      	b.n	801593c <listen_message_reliably+0x16c>
 8015a34:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015a38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015a3a:	a90e      	add	r1, sp, #56	@ 0x38
 8015a3c:	4630      	mov	r0, r6
 8015a3e:	f7ff fd57 	bl	80154f0 <read_submessage_list>
 8015a42:	e7c4      	b.n	80159ce <listen_message_reliably+0x1fe>

08015a44 <uxr_run_session_timeout>:
 8015a44:	b570      	push	{r4, r5, r6, lr}
 8015a46:	4604      	mov	r4, r0
 8015a48:	460d      	mov	r5, r1
 8015a4a:	f001 fa0f 	bl	8016e6c <uxr_millis>
 8015a4e:	4606      	mov	r6, r0
 8015a50:	4620      	mov	r0, r4
 8015a52:	f7ff fc99 	bl	8015388 <uxr_flash_output_streams>
 8015a56:	4629      	mov	r1, r5
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f7ff feb9 	bl	80157d0 <listen_message_reliably>
 8015a5e:	f001 fa05 	bl	8016e6c <uxr_millis>
 8015a62:	1b81      	subs	r1, r0, r6
 8015a64:	1a69      	subs	r1, r5, r1
 8015a66:	2900      	cmp	r1, #0
 8015a68:	dcf6      	bgt.n	8015a58 <uxr_run_session_timeout+0x14>
 8015a6a:	f104 0008 	add.w	r0, r4, #8
 8015a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a72:	f001 b99f 	b.w	8016db4 <uxr_output_streams_confirmed>
 8015a76:	bf00      	nop

08015a78 <uxr_run_session_until_data>:
 8015a78:	b570      	push	{r4, r5, r6, lr}
 8015a7a:	4604      	mov	r4, r0
 8015a7c:	460d      	mov	r5, r1
 8015a7e:	f001 f9f5 	bl	8016e6c <uxr_millis>
 8015a82:	4606      	mov	r6, r0
 8015a84:	4620      	mov	r0, r4
 8015a86:	f7ff fc7f 	bl	8015388 <uxr_flash_output_streams>
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8015a90:	4629      	mov	r1, r5
 8015a92:	e005      	b.n	8015aa0 <uxr_run_session_until_data+0x28>
 8015a94:	f001 f9ea 	bl	8016e6c <uxr_millis>
 8015a98:	1b81      	subs	r1, r0, r6
 8015a9a:	1a69      	subs	r1, r5, r1
 8015a9c:	2900      	cmp	r1, #0
 8015a9e:	dd07      	ble.n	8015ab0 <uxr_run_session_until_data+0x38>
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	f7ff fe95 	bl	80157d0 <listen_message_reliably>
 8015aa6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	d0f2      	beq.n	8015a94 <uxr_run_session_until_data+0x1c>
 8015aae:	bd70      	pop	{r4, r5, r6, pc}
 8015ab0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015ab4:	bd70      	pop	{r4, r5, r6, pc}
 8015ab6:	bf00      	nop

08015ab8 <uxr_run_session_until_confirm_delivery>:
 8015ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015abc:	4606      	mov	r6, r0
 8015abe:	460d      	mov	r5, r1
 8015ac0:	f001 f9d4 	bl	8016e6c <uxr_millis>
 8015ac4:	4607      	mov	r7, r0
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	f7ff fc5e 	bl	8015388 <uxr_flash_output_streams>
 8015acc:	2d00      	cmp	r5, #0
 8015ace:	db16      	blt.n	8015afe <uxr_run_session_until_confirm_delivery+0x46>
 8015ad0:	462c      	mov	r4, r5
 8015ad2:	f106 0808 	add.w	r8, r6, #8
 8015ad6:	e008      	b.n	8015aea <uxr_run_session_until_confirm_delivery+0x32>
 8015ad8:	4621      	mov	r1, r4
 8015ada:	4630      	mov	r0, r6
 8015adc:	f7ff fe78 	bl	80157d0 <listen_message_reliably>
 8015ae0:	f001 f9c4 	bl	8016e6c <uxr_millis>
 8015ae4:	1bc1      	subs	r1, r0, r7
 8015ae6:	1a6c      	subs	r4, r5, r1
 8015ae8:	d404      	bmi.n	8015af4 <uxr_run_session_until_confirm_delivery+0x3c>
 8015aea:	4640      	mov	r0, r8
 8015aec:	f001 f962 	bl	8016db4 <uxr_output_streams_confirmed>
 8015af0:	2800      	cmp	r0, #0
 8015af2:	d0f1      	beq.n	8015ad8 <uxr_run_session_until_confirm_delivery+0x20>
 8015af4:	4640      	mov	r0, r8
 8015af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015afa:	f001 b95b 	b.w	8016db4 <uxr_output_streams_confirmed>
 8015afe:	f106 0808 	add.w	r8, r6, #8
 8015b02:	e7f7      	b.n	8015af4 <uxr_run_session_until_confirm_delivery+0x3c>

08015b04 <uxr_run_session_until_all_status>:
 8015b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b08:	9c08      	ldr	r4, [sp, #32]
 8015b0a:	4605      	mov	r5, r0
 8015b0c:	460f      	mov	r7, r1
 8015b0e:	4690      	mov	r8, r2
 8015b10:	461e      	mov	r6, r3
 8015b12:	f7ff fc39 	bl	8015388 <uxr_flash_output_streams>
 8015b16:	b124      	cbz	r4, 8015b22 <uxr_run_session_until_all_status+0x1e>
 8015b18:	4622      	mov	r2, r4
 8015b1a:	21ff      	movs	r1, #255	@ 0xff
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	f008 f8df 	bl	801dce0 <memset>
 8015b22:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8015b26:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8015b28:	f001 f9a0 	bl	8016e6c <uxr_millis>
 8015b2c:	4639      	mov	r1, r7
 8015b2e:	4681      	mov	r9, r0
 8015b30:	4628      	mov	r0, r5
 8015b32:	f7ff fe4d 	bl	80157d0 <listen_message_reliably>
 8015b36:	f001 f999 	bl	8016e6c <uxr_millis>
 8015b3a:	eba0 0109 	sub.w	r1, r0, r9
 8015b3e:	1a79      	subs	r1, r7, r1
 8015b40:	b36c      	cbz	r4, 8015b9e <uxr_run_session_until_all_status+0x9a>
 8015b42:	1e70      	subs	r0, r6, #1
 8015b44:	46c6      	mov	lr, r8
 8015b46:	1902      	adds	r2, r0, r4
 8015b48:	4684      	mov	ip, r0
 8015b4a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015b4e:	2bff      	cmp	r3, #255	@ 0xff
 8015b50:	d007      	beq.n	8015b62 <uxr_run_session_until_all_status+0x5e>
 8015b52:	4594      	cmp	ip, r2
 8015b54:	d00f      	beq.n	8015b76 <uxr_run_session_until_all_status+0x72>
 8015b56:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015b5a:	2bff      	cmp	r3, #255	@ 0xff
 8015b5c:	f10e 0e02 	add.w	lr, lr, #2
 8015b60:	d1f7      	bne.n	8015b52 <uxr_run_session_until_all_status+0x4e>
 8015b62:	4594      	cmp	ip, r2
 8015b64:	f8be 3000 	ldrh.w	r3, [lr]
 8015b68:	d014      	beq.n	8015b94 <uxr_run_session_until_all_status+0x90>
 8015b6a:	f10e 0e02 	add.w	lr, lr, #2
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d0eb      	beq.n	8015b4a <uxr_run_session_until_all_status+0x46>
 8015b72:	2900      	cmp	r1, #0
 8015b74:	dcdc      	bgt.n	8015b30 <uxr_run_session_until_all_status+0x2c>
 8015b76:	2300      	movs	r3, #0
 8015b78:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8015b7a:	e001      	b.n	8015b80 <uxr_run_session_until_all_status+0x7c>
 8015b7c:	2b01      	cmp	r3, #1
 8015b7e:	d812      	bhi.n	8015ba6 <uxr_run_session_until_all_status+0xa2>
 8015b80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015b84:	4290      	cmp	r0, r2
 8015b86:	d1f9      	bne.n	8015b7c <uxr_run_session_until_all_status+0x78>
 8015b88:	2b01      	cmp	r3, #1
 8015b8a:	bf8c      	ite	hi
 8015b8c:	2000      	movhi	r0, #0
 8015b8e:	2001      	movls	r0, #1
 8015b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b94:	2900      	cmp	r1, #0
 8015b96:	ddee      	ble.n	8015b76 <uxr_run_session_until_all_status+0x72>
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1c9      	bne.n	8015b30 <uxr_run_session_until_all_status+0x2c>
 8015b9c:	e7eb      	b.n	8015b76 <uxr_run_session_until_all_status+0x72>
 8015b9e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8015ba0:	2001      	movs	r0, #1
 8015ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ba6:	2000      	movs	r0, #0
 8015ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bac:	0000      	movs	r0, r0
	...

08015bb0 <uxr_sync_session>:
 8015bb0:	b570      	push	{r4, r5, r6, lr}
 8015bb2:	b092      	sub	sp, #72	@ 0x48
 8015bb4:	4604      	mov	r4, r0
 8015bb6:	460d      	mov	r5, r1
 8015bb8:	f000 fb5a 	bl	8016270 <uxr_session_header_offset>
 8015bbc:	2214      	movs	r2, #20
 8015bbe:	eb0d 0102 	add.w	r1, sp, r2
 8015bc2:	9000      	str	r0, [sp, #0]
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	a80a      	add	r0, sp, #40	@ 0x28
 8015bc8:	f7f8 fc92 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 8015bcc:	2300      	movs	r3, #0
 8015bce:	2208      	movs	r2, #8
 8015bd0:	210e      	movs	r1, #14
 8015bd2:	a80a      	add	r0, sp, #40	@ 0x28
 8015bd4:	f001 f904 	bl	8016de0 <uxr_buffer_submessage_header>
 8015bd8:	f001 f962 	bl	8016ea0 <uxr_nanos>
 8015bdc:	a318      	add	r3, pc, #96	@ (adr r3, 8015c40 <uxr_sync_session+0x90>)
 8015bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be2:	f7eb f841 	bl	8000c68 <__aeabi_ldivmod>
 8015be6:	a903      	add	r1, sp, #12
 8015be8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8015bec:	a80a      	add	r0, sp, #40	@ 0x28
 8015bee:	f002 fadd 	bl	80181ac <uxr_serialize_TIMESTAMP_Payload>
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	4611      	mov	r1, r2
 8015bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f000 fae5 	bl	80161c8 <uxr_stamp_session_header>
 8015bfe:	a80a      	add	r0, sp, #40	@ 0x28
 8015c00:	f7f8 fcb4 	bl	800e56c <ucdr_buffer_length>
 8015c04:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015c06:	4602      	mov	r2, r0
 8015c08:	a905      	add	r1, sp, #20
 8015c0a:	e9d3 0600 	ldrd	r0, r6, [r3]
 8015c0e:	47b0      	blx	r6
 8015c10:	f001 f92c 	bl	8016e6c <uxr_millis>
 8015c14:	2300      	movs	r3, #0
 8015c16:	4606      	mov	r6, r0
 8015c18:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	e000      	b.n	8015c22 <uxr_sync_session+0x72>
 8015c20:	b950      	cbnz	r0, 8015c38 <uxr_sync_session+0x88>
 8015c22:	4620      	mov	r0, r4
 8015c24:	f7ff fdd4 	bl	80157d0 <listen_message_reliably>
 8015c28:	f001 f920 	bl	8016e6c <uxr_millis>
 8015c2c:	1b81      	subs	r1, r0, r6
 8015c2e:	1a69      	subs	r1, r5, r1
 8015c30:	2900      	cmp	r1, #0
 8015c32:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8015c36:	dcf3      	bgt.n	8015c20 <uxr_sync_session+0x70>
 8015c38:	b012      	add	sp, #72	@ 0x48
 8015c3a:	bd70      	pop	{r4, r5, r6, pc}
 8015c3c:	f3af 8000 	nop.w
 8015c40:	3b9aca00 	.word	0x3b9aca00
 8015c44:	00000000 	.word	0x00000000

08015c48 <wait_session_status>:
 8015c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	20ff      	movs	r0, #255	@ 0xff
 8015c50:	b09f      	sub	sp, #124	@ 0x7c
 8015c52:	7160      	strb	r0, [r4, #5]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	f000 80bb 	beq.w	8015dd0 <wait_session_status+0x188>
 8015c5a:	4692      	mov	sl, r2
 8015c5c:	469b      	mov	fp, r3
 8015c5e:	f04f 0800 	mov.w	r8, #0
 8015c62:	9105      	str	r1, [sp, #20]
 8015c64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015c66:	9905      	ldr	r1, [sp, #20]
 8015c68:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015c6c:	4652      	mov	r2, sl
 8015c6e:	47a8      	blx	r5
 8015c70:	f001 f8fc 	bl	8016e6c <uxr_millis>
 8015c74:	2700      	movs	r7, #0
 8015c76:	4605      	mov	r5, r0
 8015c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015c7c:	e009      	b.n	8015c92 <wait_session_status+0x4a>
 8015c7e:	f001 f8f5 	bl	8016e6c <uxr_millis>
 8015c82:	1b43      	subs	r3, r0, r5
 8015c84:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	7962      	ldrb	r2, [r4, #5]
 8015c8c:	dd3d      	ble.n	8015d0a <wait_session_status+0xc2>
 8015c8e:	2aff      	cmp	r2, #255	@ 0xff
 8015c90:	d13b      	bne.n	8015d0a <wait_session_status+0xc2>
 8015c92:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8015c94:	a90a      	add	r1, sp, #40	@ 0x28
 8015c96:	6896      	ldr	r6, [r2, #8]
 8015c98:	6810      	ldr	r0, [r2, #0]
 8015c9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015c9c:	47b0      	blx	r6
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	d0ed      	beq.n	8015c7e <wait_session_status+0x36>
 8015ca2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8015ca6:	a80e      	add	r0, sp, #56	@ 0x38
 8015ca8:	f7f8 fc34 	bl	800e514 <ucdr_init_buffer>
 8015cac:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8015cb0:	aa09      	add	r2, sp, #36	@ 0x24
 8015cb2:	a90e      	add	r1, sp, #56	@ 0x38
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8015cba:	f000 fa9b 	bl	80161f4 <uxr_read_session_header>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d0dd      	beq.n	8015c7e <wait_session_status+0x36>
 8015cc2:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	f000 ff8a 	bl	8016be0 <uxr_stream_id_from_raw>
 8015ccc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015cd0:	9304      	str	r3, [sp, #16]
 8015cd2:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8015cd6:	b2c3      	uxtb	r3, r0
 8015cd8:	f1b9 0f01 	cmp.w	r9, #1
 8015cdc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8015ce0:	9303      	str	r3, [sp, #12]
 8015ce2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015ce6:	d05d      	beq.n	8015da4 <wait_session_status+0x15c>
 8015ce8:	f1b9 0f02 	cmp.w	r9, #2
 8015cec:	d01a      	beq.n	8015d24 <wait_session_status+0xdc>
 8015cee:	f1b9 0f00 	cmp.w	r9, #0
 8015cf2:	d1c4      	bne.n	8015c7e <wait_session_status+0x36>
 8015cf4:	4649      	mov	r1, r9
 8015cf6:	4648      	mov	r0, r9
 8015cf8:	f000 ff72 	bl	8016be0 <uxr_stream_id_from_raw>
 8015cfc:	a90e      	add	r1, sp, #56	@ 0x38
 8015cfe:	4602      	mov	r2, r0
 8015d00:	900d      	str	r0, [sp, #52]	@ 0x34
 8015d02:	4620      	mov	r0, r4
 8015d04:	f7ff fbf4 	bl	80154f0 <read_submessage_list>
 8015d08:	e7b9      	b.n	8015c7e <wait_session_status+0x36>
 8015d0a:	f108 0801 	add.w	r8, r8, #1
 8015d0e:	45c3      	cmp	fp, r8
 8015d10:	d001      	beq.n	8015d16 <wait_session_status+0xce>
 8015d12:	2aff      	cmp	r2, #255	@ 0xff
 8015d14:	d0a6      	beq.n	8015c64 <wait_session_status+0x1c>
 8015d16:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8015d1a:	bf18      	it	ne
 8015d1c:	2001      	movne	r0, #1
 8015d1e:	b01f      	add	sp, #124	@ 0x7c
 8015d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d24:	4631      	mov	r1, r6
 8015d26:	f104 0008 	add.w	r0, r4, #8
 8015d2a:	f001 f839 	bl	8016da0 <uxr_get_input_reliable_stream>
 8015d2e:	9006      	str	r0, [sp, #24]
 8015d30:	2800      	cmp	r0, #0
 8015d32:	d031      	beq.n	8015d98 <wait_session_status+0x150>
 8015d34:	aa0e      	add	r2, sp, #56	@ 0x38
 8015d36:	4610      	mov	r0, r2
 8015d38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015d3a:	9207      	str	r2, [sp, #28]
 8015d3c:	f7f8 fc1a 	bl	800e574 <ucdr_buffer_remaining>
 8015d40:	4603      	mov	r3, r0
 8015d42:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8015d46:	9000      	str	r0, [sp, #0]
 8015d48:	9a07      	ldr	r2, [sp, #28]
 8015d4a:	9904      	ldr	r1, [sp, #16]
 8015d4c:	9806      	ldr	r0, [sp, #24]
 8015d4e:	f006 f97d 	bl	801c04c <uxr_receive_reliable_message>
 8015d52:	b308      	cbz	r0, 8015d98 <wait_session_status+0x150>
 8015d54:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d041      	beq.n	8015de0 <wait_session_status+0x198>
 8015d5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015d60:	9507      	str	r5, [sp, #28]
 8015d62:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015d66:	9d06      	ldr	r5, [sp, #24]
 8015d68:	f04f 0902 	mov.w	r9, #2
 8015d6c:	e00a      	b.n	8015d84 <wait_session_status+0x13c>
 8015d6e:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8015d72:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8015d76:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8015d7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015d7c:	a916      	add	r1, sp, #88	@ 0x58
 8015d7e:	4620      	mov	r0, r4
 8015d80:	f7ff fbb6 	bl	80154f0 <read_submessage_list>
 8015d84:	2204      	movs	r2, #4
 8015d86:	a916      	add	r1, sp, #88	@ 0x58
 8015d88:	4628      	mov	r0, r5
 8015d8a:	f006 f9d9 	bl	801c140 <uxr_next_input_reliable_buffer_available>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	d1ed      	bne.n	8015d6e <wait_session_status+0x126>
 8015d92:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015d96:	9d07      	ldr	r5, [sp, #28]
 8015d98:	9903      	ldr	r1, [sp, #12]
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	f7ff fa4b 	bl	8015238 <write_submessage_acknack.isra.0>
 8015da2:	e76c      	b.n	8015c7e <wait_session_status+0x36>
 8015da4:	4631      	mov	r1, r6
 8015da6:	f104 0008 	add.w	r0, r4, #8
 8015daa:	f000 ffef 	bl	8016d8c <uxr_get_input_best_effort_stream>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	f43f af65 	beq.w	8015c7e <wait_session_status+0x36>
 8015db4:	9904      	ldr	r1, [sp, #16]
 8015db6:	f006 f8b9 	bl	801bf2c <uxr_receive_best_effort_message>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	f43f af5f 	beq.w	8015c7e <wait_session_status+0x36>
 8015dc0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8015dc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015dc6:	a90e      	add	r1, sp, #56	@ 0x38
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f7ff fb91 	bl	80154f0 <read_submessage_list>
 8015dce:	e756      	b.n	8015c7e <wait_session_status+0x36>
 8015dd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015dd2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015dd6:	47a0      	blx	r4
 8015dd8:	2001      	movs	r0, #1
 8015dda:	b01f      	add	sp, #124	@ 0x7c
 8015ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8015de4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015de6:	a90e      	add	r1, sp, #56	@ 0x38
 8015de8:	4620      	mov	r0, r4
 8015dea:	f7ff fb81 	bl	80154f0 <read_submessage_list>
 8015dee:	e7b5      	b.n	8015d5c <wait_session_status+0x114>

08015df0 <uxr_delete_session_retries>:
 8015df0:	b530      	push	{r4, r5, lr}
 8015df2:	b08f      	sub	sp, #60	@ 0x3c
 8015df4:	4604      	mov	r4, r0
 8015df6:	460d      	mov	r5, r1
 8015df8:	f000 fa3a 	bl	8016270 <uxr_session_header_offset>
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	2210      	movs	r2, #16
 8015e00:	9000      	str	r0, [sp, #0]
 8015e02:	a902      	add	r1, sp, #8
 8015e04:	a806      	add	r0, sp, #24
 8015e06:	f7f8 fb73 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 8015e0a:	a906      	add	r1, sp, #24
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f000 f981 	bl	8016114 <uxr_buffer_delete_session>
 8015e12:	2200      	movs	r2, #0
 8015e14:	4611      	mov	r1, r2
 8015e16:	9b06      	ldr	r3, [sp, #24]
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f000 f9d5 	bl	80161c8 <uxr_stamp_session_header>
 8015e1e:	a806      	add	r0, sp, #24
 8015e20:	f7f8 fba4 	bl	800e56c <ucdr_buffer_length>
 8015e24:	462b      	mov	r3, r5
 8015e26:	4602      	mov	r2, r0
 8015e28:	a902      	add	r1, sp, #8
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	f7ff ff0c 	bl	8015c48 <wait_session_status>
 8015e30:	b118      	cbz	r0, 8015e3a <uxr_delete_session_retries+0x4a>
 8015e32:	7960      	ldrb	r0, [r4, #5]
 8015e34:	fab0 f080 	clz	r0, r0
 8015e38:	0940      	lsrs	r0, r0, #5
 8015e3a:	b00f      	add	sp, #60	@ 0x3c
 8015e3c:	bd30      	pop	{r4, r5, pc}
 8015e3e:	bf00      	nop

08015e40 <uxr_create_session>:
 8015e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e44:	f100 0308 	add.w	r3, r0, #8
 8015e48:	b0ab      	sub	sp, #172	@ 0xac
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	9303      	str	r3, [sp, #12]
 8015e50:	f000 feec 	bl	8016c2c <uxr_reset_stream_storage>
 8015e54:	4620      	mov	r0, r4
 8015e56:	f000 fa0b 	bl	8016270 <uxr_session_header_offset>
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	9000      	str	r0, [sp, #0]
 8015e5e:	221c      	movs	r2, #28
 8015e60:	a90b      	add	r1, sp, #44	@ 0x2c
 8015e62:	a812      	add	r0, sp, #72	@ 0x48
 8015e64:	f7f8 fb44 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 8015e68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015e6a:	8a1a      	ldrh	r2, [r3, #16]
 8015e6c:	3a04      	subs	r2, #4
 8015e6e:	b292      	uxth	r2, r2
 8015e70:	a912      	add	r1, sp, #72	@ 0x48
 8015e72:	4620      	mov	r0, r4
 8015e74:	f000 f924 	bl	80160c0 <uxr_buffer_create_session>
 8015e78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f000 f990 	bl	80161a0 <uxr_stamp_create_session_header>
 8015e80:	a812      	add	r0, sp, #72	@ 0x48
 8015e82:	f7f8 fb73 	bl	800e56c <ucdr_buffer_length>
 8015e86:	23ff      	movs	r3, #255	@ 0xff
 8015e88:	4683      	mov	fp, r0
 8015e8a:	7163      	strb	r3, [r4, #5]
 8015e8c:	f04f 080a 	mov.w	r8, #10
 8015e90:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015e92:	465a      	mov	r2, fp
 8015e94:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015e98:	a90b      	add	r1, sp, #44	@ 0x2c
 8015e9a:	47a8      	blx	r5
 8015e9c:	f000 ffe6 	bl	8016e6c <uxr_millis>
 8015ea0:	2700      	movs	r7, #0
 8015ea2:	4605      	mov	r5, r0
 8015ea4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015ea8:	e009      	b.n	8015ebe <uxr_create_session+0x7e>
 8015eaa:	f000 ffdf 	bl	8016e6c <uxr_millis>
 8015eae:	1b43      	subs	r3, r0, r5
 8015eb0:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	7962      	ldrb	r2, [r4, #5]
 8015eb8:	dd3d      	ble.n	8015f36 <uxr_create_session+0xf6>
 8015eba:	2aff      	cmp	r2, #255	@ 0xff
 8015ebc:	d13b      	bne.n	8015f36 <uxr_create_session+0xf6>
 8015ebe:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8015ec0:	a907      	add	r1, sp, #28
 8015ec2:	6896      	ldr	r6, [r2, #8]
 8015ec4:	6810      	ldr	r0, [r2, #0]
 8015ec6:	aa08      	add	r2, sp, #32
 8015ec8:	47b0      	blx	r6
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	d0ed      	beq.n	8015eaa <uxr_create_session+0x6a>
 8015ece:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8015ed2:	a81a      	add	r0, sp, #104	@ 0x68
 8015ed4:	f7f8 fb1e 	bl	800e514 <ucdr_init_buffer>
 8015ed8:	f10d 031a 	add.w	r3, sp, #26
 8015edc:	aa06      	add	r2, sp, #24
 8015ede:	a91a      	add	r1, sp, #104	@ 0x68
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	f88d 7018 	strb.w	r7, [sp, #24]
 8015ee6:	f000 f985 	bl	80161f4 <uxr_read_session_header>
 8015eea:	2800      	cmp	r0, #0
 8015eec:	d0dd      	beq.n	8015eaa <uxr_create_session+0x6a>
 8015eee:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	f000 fe74 	bl	8016be0 <uxr_stream_id_from_raw>
 8015ef8:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8015efc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8015f00:	9302      	str	r3, [sp, #8]
 8015f02:	f1b9 0f01 	cmp.w	r9, #1
 8015f06:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8015f0a:	fa5f fa80 	uxtb.w	sl, r0
 8015f0e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015f12:	d056      	beq.n	8015fc2 <uxr_create_session+0x182>
 8015f14:	f1b9 0f02 	cmp.w	r9, #2
 8015f18:	d018      	beq.n	8015f4c <uxr_create_session+0x10c>
 8015f1a:	f1b9 0f00 	cmp.w	r9, #0
 8015f1e:	d1c4      	bne.n	8015eaa <uxr_create_session+0x6a>
 8015f20:	4649      	mov	r1, r9
 8015f22:	4648      	mov	r0, r9
 8015f24:	f000 fe5c 	bl	8016be0 <uxr_stream_id_from_raw>
 8015f28:	a91a      	add	r1, sp, #104	@ 0x68
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f7ff fade 	bl	80154f0 <read_submessage_list>
 8015f34:	e7b9      	b.n	8015eaa <uxr_create_session+0x6a>
 8015f36:	f1b8 0801 	subs.w	r8, r8, #1
 8015f3a:	d001      	beq.n	8015f40 <uxr_create_session+0x100>
 8015f3c:	2aff      	cmp	r2, #255	@ 0xff
 8015f3e:	d0a7      	beq.n	8015e90 <uxr_create_session+0x50>
 8015f40:	2a00      	cmp	r2, #0
 8015f42:	d05b      	beq.n	8015ffc <uxr_create_session+0x1bc>
 8015f44:	2000      	movs	r0, #0
 8015f46:	b02b      	add	sp, #172	@ 0xac
 8015f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4c:	9803      	ldr	r0, [sp, #12]
 8015f4e:	4631      	mov	r1, r6
 8015f50:	f000 ff26 	bl	8016da0 <uxr_get_input_reliable_stream>
 8015f54:	9004      	str	r0, [sp, #16]
 8015f56:	b370      	cbz	r0, 8015fb6 <uxr_create_session+0x176>
 8015f58:	aa1a      	add	r2, sp, #104	@ 0x68
 8015f5a:	4610      	mov	r0, r2
 8015f5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015f5e:	9205      	str	r2, [sp, #20]
 8015f60:	f7f8 fb08 	bl	800e574 <ucdr_buffer_remaining>
 8015f64:	4603      	mov	r3, r0
 8015f66:	f10d 0019 	add.w	r0, sp, #25
 8015f6a:	9000      	str	r0, [sp, #0]
 8015f6c:	9a05      	ldr	r2, [sp, #20]
 8015f6e:	9902      	ldr	r1, [sp, #8]
 8015f70:	9804      	ldr	r0, [sp, #16]
 8015f72:	f006 f86b 	bl	801c04c <uxr_receive_reliable_message>
 8015f76:	b1f0      	cbz	r0, 8015fb6 <uxr_create_session+0x176>
 8015f78:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d035      	beq.n	8015fec <uxr_create_session+0x1ac>
 8015f80:	f8cd b008 	str.w	fp, [sp, #8]
 8015f84:	f04f 0902 	mov.w	r9, #2
 8015f88:	f8dd b010 	ldr.w	fp, [sp, #16]
 8015f8c:	e00a      	b.n	8015fa4 <uxr_create_session+0x164>
 8015f8e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8015f92:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8015f96:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8015f9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015f9c:	a922      	add	r1, sp, #136	@ 0x88
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	f7ff faa6 	bl	80154f0 <read_submessage_list>
 8015fa4:	2204      	movs	r2, #4
 8015fa6:	a922      	add	r1, sp, #136	@ 0x88
 8015fa8:	4658      	mov	r0, fp
 8015faa:	f006 f8c9 	bl	801c140 <uxr_next_input_reliable_buffer_available>
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	d1ed      	bne.n	8015f8e <uxr_create_session+0x14e>
 8015fb2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8015fb6:	4632      	mov	r2, r6
 8015fb8:	4651      	mov	r1, sl
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f7ff f93c 	bl	8015238 <write_submessage_acknack.isra.0>
 8015fc0:	e773      	b.n	8015eaa <uxr_create_session+0x6a>
 8015fc2:	9803      	ldr	r0, [sp, #12]
 8015fc4:	4631      	mov	r1, r6
 8015fc6:	f000 fee1 	bl	8016d8c <uxr_get_input_best_effort_stream>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	f43f af6d 	beq.w	8015eaa <uxr_create_session+0x6a>
 8015fd0:	9902      	ldr	r1, [sp, #8]
 8015fd2:	f005 ffab 	bl	801bf2c <uxr_receive_best_effort_message>
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	f43f af67 	beq.w	8015eaa <uxr_create_session+0x6a>
 8015fdc:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8015fe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015fe2:	a91a      	add	r1, sp, #104	@ 0x68
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	f7ff fa83 	bl	80154f0 <read_submessage_list>
 8015fea:	e75e      	b.n	8015eaa <uxr_create_session+0x6a>
 8015fec:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8015ff0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015ff2:	a91a      	add	r1, sp, #104	@ 0x68
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	f7ff fa7b 	bl	80154f0 <read_submessage_list>
 8015ffa:	e7c1      	b.n	8015f80 <uxr_create_session+0x140>
 8015ffc:	9803      	ldr	r0, [sp, #12]
 8015ffe:	f000 fe15 	bl	8016c2c <uxr_reset_stream_storage>
 8016002:	2001      	movs	r0, #1
 8016004:	b02b      	add	sp, #172	@ 0xac
 8016006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801600a:	bf00      	nop

0801600c <uxr_prepare_stream_to_write_submessage>:
 801600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016010:	b082      	sub	sp, #8
 8016012:	4606      	mov	r6, r0
 8016014:	4610      	mov	r0, r2
 8016016:	4614      	mov	r4, r2
 8016018:	9101      	str	r1, [sp, #4]
 801601a:	461f      	mov	r7, r3
 801601c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8016020:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8016024:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8016028:	f000 ff1a 	bl	8016e60 <uxr_submessage_padding>
 801602c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016030:	1d21      	adds	r1, r4, #4
 8016032:	2b01      	cmp	r3, #1
 8016034:	eb01 0a00 	add.w	sl, r1, r0
 8016038:	d012      	beq.n	8016060 <uxr_prepare_stream_to_write_submessage+0x54>
 801603a:	2b02      	cmp	r3, #2
 801603c:	d003      	beq.n	8016046 <uxr_prepare_stream_to_write_submessage+0x3a>
 801603e:	2000      	movs	r0, #0
 8016040:	b002      	add	sp, #8
 8016042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016046:	4629      	mov	r1, r5
 8016048:	f106 0008 	add.w	r0, r6, #8
 801604c:	f000 fe94 	bl	8016d78 <uxr_get_output_reliable_stream>
 8016050:	2800      	cmp	r0, #0
 8016052:	d0f4      	beq.n	801603e <uxr_prepare_stream_to_write_submessage+0x32>
 8016054:	4651      	mov	r1, sl
 8016056:	463a      	mov	r2, r7
 8016058:	f006 fa28 	bl	801c4ac <uxr_prepare_reliable_buffer_to_write>
 801605c:	b968      	cbnz	r0, 801607a <uxr_prepare_stream_to_write_submessage+0x6e>
 801605e:	e7ee      	b.n	801603e <uxr_prepare_stream_to_write_submessage+0x32>
 8016060:	4629      	mov	r1, r5
 8016062:	f106 0008 	add.w	r0, r6, #8
 8016066:	f000 fe7f 	bl	8016d68 <uxr_get_output_best_effort_stream>
 801606a:	2800      	cmp	r0, #0
 801606c:	d0e7      	beq.n	801603e <uxr_prepare_stream_to_write_submessage+0x32>
 801606e:	4651      	mov	r1, sl
 8016070:	463a      	mov	r2, r7
 8016072:	f006 f94d 	bl	801c310 <uxr_prepare_best_effort_buffer_to_write>
 8016076:	2800      	cmp	r0, #0
 8016078:	d0e1      	beq.n	801603e <uxr_prepare_stream_to_write_submessage+0x32>
 801607a:	464b      	mov	r3, r9
 801607c:	b2a2      	uxth	r2, r4
 801607e:	4641      	mov	r1, r8
 8016080:	4638      	mov	r0, r7
 8016082:	f000 fead 	bl	8016de0 <uxr_buffer_submessage_header>
 8016086:	2001      	movs	r0, #1
 8016088:	b002      	add	sp, #8
 801608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801608e:	bf00      	nop

08016090 <uxr_init_session_info>:
 8016090:	2300      	movs	r3, #0
 8016092:	f361 0307 	bfi	r3, r1, #0, #8
 8016096:	0e11      	lsrs	r1, r2, #24
 8016098:	f361 230f 	bfi	r3, r1, #8, #8
 801609c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80160a0:	f361 4317 	bfi	r3, r1, #16, #8
 80160a4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80160a8:	f361 631f 	bfi	r3, r1, #24, #8
 80160ac:	f04f 0c09 	mov.w	ip, #9
 80160b0:	21ff      	movs	r1, #255	@ 0xff
 80160b2:	6003      	str	r3, [r0, #0]
 80160b4:	7102      	strb	r2, [r0, #4]
 80160b6:	f8a0 c006 	strh.w	ip, [r0, #6]
 80160ba:	7141      	strb	r1, [r0, #5]
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop

080160c0 <uxr_buffer_create_session>:
 80160c0:	b530      	push	{r4, r5, lr}
 80160c2:	4d13      	ldr	r5, [pc, #76]	@ (8016110 <uxr_buffer_create_session+0x50>)
 80160c4:	b089      	sub	sp, #36	@ 0x24
 80160c6:	2300      	movs	r3, #0
 80160c8:	9307      	str	r3, [sp, #28]
 80160ca:	f8ad 201c 	strh.w	r2, [sp, #28]
 80160ce:	682a      	ldr	r2, [r5, #0]
 80160d0:	9200      	str	r2, [sp, #0]
 80160d2:	460c      	mov	r4, r1
 80160d4:	2201      	movs	r2, #1
 80160d6:	88a9      	ldrh	r1, [r5, #4]
 80160d8:	9301      	str	r3, [sp, #4]
 80160da:	80c2      	strh	r2, [r0, #6]
 80160dc:	f8ad 1006 	strh.w	r1, [sp, #6]
 80160e0:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80160e4:	7800      	ldrb	r0, [r0, #0]
 80160e6:	9303      	str	r3, [sp, #12]
 80160e8:	f88d 2004 	strb.w	r2, [sp, #4]
 80160ec:	9102      	str	r1, [sp, #8]
 80160ee:	2210      	movs	r2, #16
 80160f0:	4619      	mov	r1, r3
 80160f2:	f88d 000c 	strb.w	r0, [sp, #12]
 80160f6:	4620      	mov	r0, r4
 80160f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80160fc:	9306      	str	r3, [sp, #24]
 80160fe:	f000 fe6f 	bl	8016de0 <uxr_buffer_submessage_header>
 8016102:	4669      	mov	r1, sp
 8016104:	4620      	mov	r0, r4
 8016106:	f001 fe8f 	bl	8017e28 <uxr_serialize_CREATE_CLIENT_Payload>
 801610a:	b009      	add	sp, #36	@ 0x24
 801610c:	bd30      	pop	{r4, r5, pc}
 801610e:	bf00      	nop
 8016110:	080200c4 	.word	0x080200c4

08016114 <uxr_buffer_delete_session>:
 8016114:	b510      	push	{r4, lr}
 8016116:	4a0c      	ldr	r2, [pc, #48]	@ (8016148 <uxr_buffer_delete_session+0x34>)
 8016118:	b082      	sub	sp, #8
 801611a:	460c      	mov	r4, r1
 801611c:	2302      	movs	r3, #2
 801611e:	8911      	ldrh	r1, [r2, #8]
 8016120:	80c3      	strh	r3, [r0, #6]
 8016122:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8016126:	2300      	movs	r3, #0
 8016128:	2204      	movs	r2, #4
 801612a:	f8ad 1006 	strh.w	r1, [sp, #6]
 801612e:	4620      	mov	r0, r4
 8016130:	2103      	movs	r1, #3
 8016132:	f8ad c004 	strh.w	ip, [sp, #4]
 8016136:	f000 fe53 	bl	8016de0 <uxr_buffer_submessage_header>
 801613a:	a901      	add	r1, sp, #4
 801613c:	4620      	mov	r0, r4
 801613e:	f001 ff17 	bl	8017f70 <uxr_serialize_DELETE_Payload>
 8016142:	b002      	add	sp, #8
 8016144:	bd10      	pop	{r4, pc}
 8016146:	bf00      	nop
 8016148:	080200c4 	.word	0x080200c4

0801614c <uxr_read_create_session_status>:
 801614c:	b510      	push	{r4, lr}
 801614e:	460b      	mov	r3, r1
 8016150:	b088      	sub	sp, #32
 8016152:	4604      	mov	r4, r0
 8016154:	a901      	add	r1, sp, #4
 8016156:	4618      	mov	r0, r3
 8016158:	f001 ff1a 	bl	8017f90 <uxr_deserialize_STATUS_AGENT_Payload>
 801615c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016160:	7163      	strb	r3, [r4, #5]
 8016162:	b008      	add	sp, #32
 8016164:	bd10      	pop	{r4, pc}
 8016166:	bf00      	nop

08016168 <uxr_read_delete_session_status>:
 8016168:	b510      	push	{r4, lr}
 801616a:	460b      	mov	r3, r1
 801616c:	b082      	sub	sp, #8
 801616e:	4604      	mov	r4, r0
 8016170:	4669      	mov	r1, sp
 8016172:	4618      	mov	r0, r3
 8016174:	f001 ff3c 	bl	8017ff0 <uxr_deserialize_STATUS_Payload>
 8016178:	88e3      	ldrh	r3, [r4, #6]
 801617a:	2b02      	cmp	r3, #2
 801617c:	d001      	beq.n	8016182 <uxr_read_delete_session_status+0x1a>
 801617e:	b002      	add	sp, #8
 8016180:	bd10      	pop	{r4, pc}
 8016182:	f10d 0002 	add.w	r0, sp, #2
 8016186:	f7fe fea9 	bl	8014edc <uxr_object_id_from_raw>
 801618a:	f8bd 3000 	ldrh.w	r3, [sp]
 801618e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016196:	bf08      	it	eq
 8016198:	7162      	strbeq	r2, [r4, #5]
 801619a:	b002      	add	sp, #8
 801619c:	bd10      	pop	{r4, pc}
 801619e:	bf00      	nop

080161a0 <uxr_stamp_create_session_header>:
 80161a0:	b510      	push	{r4, lr}
 80161a2:	2208      	movs	r2, #8
 80161a4:	b08a      	sub	sp, #40	@ 0x28
 80161a6:	4604      	mov	r4, r0
 80161a8:	eb0d 0002 	add.w	r0, sp, r2
 80161ac:	f7f8 f9b2 	bl	800e514 <ucdr_init_buffer>
 80161b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161b4:	9400      	str	r4, [sp, #0]
 80161b6:	2300      	movs	r3, #0
 80161b8:	461a      	mov	r2, r3
 80161ba:	a802      	add	r0, sp, #8
 80161bc:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80161c0:	f001 f80c 	bl	80171dc <uxr_serialize_message_header>
 80161c4:	b00a      	add	sp, #40	@ 0x28
 80161c6:	bd10      	pop	{r4, pc}

080161c8 <uxr_stamp_session_header>:
 80161c8:	b570      	push	{r4, r5, r6, lr}
 80161ca:	4604      	mov	r4, r0
 80161cc:	b08a      	sub	sp, #40	@ 0x28
 80161ce:	4616      	mov	r6, r2
 80161d0:	2208      	movs	r2, #8
 80161d2:	eb0d 0002 	add.w	r0, sp, r2
 80161d6:	460d      	mov	r5, r1
 80161d8:	4619      	mov	r1, r3
 80161da:	f7f8 f99b 	bl	800e514 <ucdr_init_buffer>
 80161de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e2:	9400      	str	r4, [sp, #0]
 80161e4:	4633      	mov	r3, r6
 80161e6:	462a      	mov	r2, r5
 80161e8:	a802      	add	r0, sp, #8
 80161ea:	f000 fff7 	bl	80171dc <uxr_serialize_message_header>
 80161ee:	b00a      	add	sp, #40	@ 0x28
 80161f0:	bd70      	pop	{r4, r5, r6, pc}
 80161f2:	bf00      	nop

080161f4 <uxr_read_session_header>:
 80161f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161f6:	4607      	mov	r7, r0
 80161f8:	b085      	sub	sp, #20
 80161fa:	4608      	mov	r0, r1
 80161fc:	460c      	mov	r4, r1
 80161fe:	4615      	mov	r5, r2
 8016200:	461e      	mov	r6, r3
 8016202:	f7f8 f9b7 	bl	800e574 <ucdr_buffer_remaining>
 8016206:	2808      	cmp	r0, #8
 8016208:	d802      	bhi.n	8016210 <uxr_read_session_header+0x1c>
 801620a:	2000      	movs	r0, #0
 801620c:	b005      	add	sp, #20
 801620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016210:	ab03      	add	r3, sp, #12
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	462a      	mov	r2, r5
 8016216:	4633      	mov	r3, r6
 8016218:	f10d 010b 	add.w	r1, sp, #11
 801621c:	4620      	mov	r0, r4
 801621e:	f000 fffb 	bl	8017218 <uxr_deserialize_message_header>
 8016222:	783a      	ldrb	r2, [r7, #0]
 8016224:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8016228:	4293      	cmp	r3, r2
 801622a:	d1ee      	bne.n	801620a <uxr_read_session_header+0x16>
 801622c:	061b      	lsls	r3, r3, #24
 801622e:	d41c      	bmi.n	801626a <uxr_read_session_header+0x76>
 8016230:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016234:	787b      	ldrb	r3, [r7, #1]
 8016236:	429a      	cmp	r2, r3
 8016238:	d003      	beq.n	8016242 <uxr_read_session_header+0x4e>
 801623a:	2001      	movs	r0, #1
 801623c:	f080 0001 	eor.w	r0, r0, #1
 8016240:	e7e4      	b.n	801620c <uxr_read_session_header+0x18>
 8016242:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8016246:	78bb      	ldrb	r3, [r7, #2]
 8016248:	429a      	cmp	r2, r3
 801624a:	f107 0102 	add.w	r1, r7, #2
 801624e:	d1f4      	bne.n	801623a <uxr_read_session_header+0x46>
 8016250:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8016254:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016258:	429a      	cmp	r2, r3
 801625a:	d1ee      	bne.n	801623a <uxr_read_session_header+0x46>
 801625c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8016260:	784b      	ldrb	r3, [r1, #1]
 8016262:	429a      	cmp	r2, r3
 8016264:	d1e9      	bne.n	801623a <uxr_read_session_header+0x46>
 8016266:	2000      	movs	r0, #0
 8016268:	e7e8      	b.n	801623c <uxr_read_session_header+0x48>
 801626a:	2001      	movs	r0, #1
 801626c:	e7ce      	b.n	801620c <uxr_read_session_header+0x18>
 801626e:	bf00      	nop

08016270 <uxr_session_header_offset>:
 8016270:	f990 3000 	ldrsb.w	r3, [r0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	bfb4      	ite	lt
 8016278:	2004      	movlt	r0, #4
 801627a:	2008      	movge	r0, #8
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop

08016280 <uxr_init_base_object_request>:
 8016280:	b510      	push	{r4, lr}
 8016282:	88c3      	ldrh	r3, [r0, #6]
 8016284:	b082      	sub	sp, #8
 8016286:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801628a:	9101      	str	r1, [sp, #4]
 801628c:	f1a3 010a 	sub.w	r1, r3, #10
 8016290:	b289      	uxth	r1, r1
 8016292:	42a1      	cmp	r1, r4
 8016294:	d80e      	bhi.n	80162b4 <uxr_init_base_object_request+0x34>
 8016296:	3301      	adds	r3, #1
 8016298:	b29c      	uxth	r4, r3
 801629a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	80c4      	strh	r4, [r0, #6]
 80162a2:	9801      	ldr	r0, [sp, #4]
 80162a4:	7011      	strb	r1, [r2, #0]
 80162a6:	7053      	strb	r3, [r2, #1]
 80162a8:	1c91      	adds	r1, r2, #2
 80162aa:	f7fe fe2b 	bl	8014f04 <uxr_object_id_to_raw>
 80162ae:	4620      	mov	r0, r4
 80162b0:	b002      	add	sp, #8
 80162b2:	bd10      	pop	{r4, pc}
 80162b4:	230a      	movs	r3, #10
 80162b6:	2100      	movs	r1, #0
 80162b8:	461c      	mov	r4, r3
 80162ba:	e7f1      	b.n	80162a0 <uxr_init_base_object_request+0x20>

080162bc <uxr_parse_base_object_request>:
 80162bc:	b570      	push	{r4, r5, r6, lr}
 80162be:	4604      	mov	r4, r0
 80162c0:	3002      	adds	r0, #2
 80162c2:	460d      	mov	r5, r1
 80162c4:	4616      	mov	r6, r2
 80162c6:	f7fe fe09 	bl	8014edc <uxr_object_id_from_raw>
 80162ca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80162ce:	8028      	strh	r0, [r5, #0]
 80162d0:	806b      	strh	r3, [r5, #2]
 80162d2:	8823      	ldrh	r3, [r4, #0]
 80162d4:	ba5b      	rev16	r3, r3
 80162d6:	8033      	strh	r3, [r6, #0]
 80162d8:	bd70      	pop	{r4, r5, r6, pc}
 80162da:	bf00      	nop

080162dc <uxr_init_framing_io>:
 80162dc:	2300      	movs	r3, #0
 80162de:	7041      	strb	r1, [r0, #1]
 80162e0:	7003      	strb	r3, [r0, #0]
 80162e2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80162e4:	4770      	bx	lr
 80162e6:	bf00      	nop

080162e8 <uxr_write_framed_msg>:
 80162e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ec:	f890 c001 	ldrb.w	ip, [r0, #1]
 80162f0:	4617      	mov	r7, r2
 80162f2:	227e      	movs	r2, #126	@ 0x7e
 80162f4:	b085      	sub	sp, #20
 80162f6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80162fa:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 80162fe:	2a01      	cmp	r2, #1
 8016300:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8016304:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8016308:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801630c:	4604      	mov	r4, r0
 801630e:	460e      	mov	r6, r1
 8016310:	469a      	mov	sl, r3
 8016312:	f240 812e 	bls.w	8016572 <uxr_write_framed_msg+0x28a>
 8016316:	2003      	movs	r0, #3
 8016318:	2102      	movs	r1, #2
 801631a:	f04f 0905 	mov.w	r9, #5
 801631e:	2204      	movs	r2, #4
 8016320:	4686      	mov	lr, r0
 8016322:	460b      	mov	r3, r1
 8016324:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8016328:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801632c:	f1bc 0f01 	cmp.w	ip, #1
 8016330:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016334:	4421      	add	r1, r4
 8016336:	f240 8110 	bls.w	801655a <uxr_write_framed_msg+0x272>
 801633a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801633e:	fa5f fc8b 	uxtb.w	ip, fp
 8016342:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8016346:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801634a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 801634e:	f1be 0f01 	cmp.w	lr, #1
 8016352:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8016356:	b2ed      	uxtb	r5, r5
 8016358:	d94c      	bls.n	80163f4 <uxr_write_framed_msg+0x10c>
 801635a:	4420      	add	r0, r4
 801635c:	2d01      	cmp	r5, #1
 801635e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8016362:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016366:	d95d      	bls.n	8016424 <uxr_write_framed_msg+0x13c>
 8016368:	18a0      	adds	r0, r4, r2
 801636a:	3201      	adds	r2, #1
 801636c:	b2d2      	uxtb	r2, r2
 801636e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016372:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016376:	f1bb 0f00 	cmp.w	fp, #0
 801637a:	f000 8108 	beq.w	801658e <uxr_write_framed_msg+0x2a6>
 801637e:	f04f 0c00 	mov.w	ip, #0
 8016382:	4661      	mov	r1, ip
 8016384:	46de      	mov	lr, fp
 8016386:	46e3      	mov	fp, ip
 8016388:	46d4      	mov	ip, sl
 801638a:	468a      	mov	sl, r1
 801638c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8016598 <uxr_write_framed_msg+0x2b0>
 8016390:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8016394:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016398:	2901      	cmp	r1, #1
 801639a:	d91b      	bls.n	80163d4 <uxr_write_framed_msg+0xec>
 801639c:	2a29      	cmp	r2, #41	@ 0x29
 801639e:	d84e      	bhi.n	801643e <uxr_write_framed_msg+0x156>
 80163a0:	18a1      	adds	r1, r4, r2
 80163a2:	3201      	adds	r2, #1
 80163a4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80163a8:	b2d2      	uxtb	r2, r2
 80163aa:	ea8b 0303 	eor.w	r3, fp, r3
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80163b4:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80163b8:	f10a 0a01 	add.w	sl, sl, #1
 80163bc:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 80163c0:	45d6      	cmp	lr, sl
 80163c2:	d95a      	bls.n	801647a <uxr_write_framed_msg+0x192>
 80163c4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80163c8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80163cc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80163d0:	2901      	cmp	r1, #1
 80163d2:	d8e3      	bhi.n	801639c <uxr_write_framed_msg+0xb4>
 80163d4:	1c51      	adds	r1, r2, #1
 80163d6:	b2c9      	uxtb	r1, r1
 80163d8:	2929      	cmp	r1, #41	@ 0x29
 80163da:	d830      	bhi.n	801643e <uxr_write_framed_msg+0x156>
 80163dc:	18a1      	adds	r1, r4, r2
 80163de:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 80163e2:	3202      	adds	r2, #2
 80163e4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80163e8:	f083 0020 	eor.w	r0, r3, #32
 80163ec:	b2d2      	uxtb	r2, r2
 80163ee:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80163f2:	e7da      	b.n	80163aa <uxr_write_framed_msg+0xc2>
 80163f4:	eb04 0e00 	add.w	lr, r4, r0
 80163f8:	f08c 0c20 	eor.w	ip, ip, #32
 80163fc:	1c82      	adds	r2, r0, #2
 80163fe:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8016402:	b2d2      	uxtb	r2, r2
 8016404:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016408:	2d01      	cmp	r5, #1
 801640a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 801640e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016412:	d907      	bls.n	8016424 <uxr_write_framed_msg+0x13c>
 8016414:	4422      	add	r2, r4
 8016416:	3003      	adds	r0, #3
 8016418:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 801641c:	b2c2      	uxtb	r2, r0
 801641e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016422:	e7ac      	b.n	801637e <uxr_write_framed_msg+0x96>
 8016424:	18a0      	adds	r0, r4, r2
 8016426:	f081 0120 	eor.w	r1, r1, #32
 801642a:	3202      	adds	r2, #2
 801642c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8016430:	b2d2      	uxtb	r2, r2
 8016432:	217d      	movs	r1, #125	@ 0x7d
 8016434:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016438:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801643c:	e79f      	b.n	801637e <uxr_write_framed_msg+0x96>
 801643e:	e9cd ba00 	strd	fp, sl, [sp]
 8016442:	2500      	movs	r5, #0
 8016444:	46e2      	mov	sl, ip
 8016446:	46f3      	mov	fp, lr
 8016448:	e000      	b.n	801644c <uxr_write_framed_msg+0x164>
 801644a:	b190      	cbz	r0, 8016472 <uxr_write_framed_msg+0x18a>
 801644c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016450:	1b52      	subs	r2, r2, r5
 8016452:	4643      	mov	r3, r8
 8016454:	4421      	add	r1, r4
 8016456:	4638      	mov	r0, r7
 8016458:	47b0      	blx	r6
 801645a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801645e:	4405      	add	r5, r0
 8016460:	4295      	cmp	r5, r2
 8016462:	d3f2      	bcc.n	801644a <uxr_write_framed_msg+0x162>
 8016464:	46d4      	mov	ip, sl
 8016466:	46de      	mov	lr, fp
 8016468:	f8dd a004 	ldr.w	sl, [sp, #4]
 801646c:	f8dd b000 	ldr.w	fp, [sp]
 8016470:	d06f      	beq.n	8016552 <uxr_write_framed_msg+0x26a>
 8016472:	2000      	movs	r0, #0
 8016474:	b005      	add	sp, #20
 8016476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801647a:	46dc      	mov	ip, fp
 801647c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016480:	f8ad c00c 	strh.w	ip, [sp, #12]
 8016484:	46f3      	mov	fp, lr
 8016486:	fa5f fc8c 	uxtb.w	ip, ip
 801648a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801648e:	2b01      	cmp	r3, #1
 8016490:	f04f 0900 	mov.w	r9, #0
 8016494:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8016498:	d930      	bls.n	80164fc <uxr_write_framed_msg+0x214>
 801649a:	2a29      	cmp	r2, #41	@ 0x29
 801649c:	d91c      	bls.n	80164d8 <uxr_write_framed_msg+0x1f0>
 801649e:	2500      	movs	r5, #0
 80164a0:	e001      	b.n	80164a6 <uxr_write_framed_msg+0x1be>
 80164a2:	2800      	cmp	r0, #0
 80164a4:	d0e5      	beq.n	8016472 <uxr_write_framed_msg+0x18a>
 80164a6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80164aa:	1b52      	subs	r2, r2, r5
 80164ac:	4643      	mov	r3, r8
 80164ae:	4421      	add	r1, r4
 80164b0:	4638      	mov	r0, r7
 80164b2:	47b0      	blx	r6
 80164b4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80164b8:	4405      	add	r5, r0
 80164ba:	4295      	cmp	r5, r2
 80164bc:	d3f1      	bcc.n	80164a2 <uxr_write_framed_msg+0x1ba>
 80164be:	d1d8      	bne.n	8016472 <uxr_write_framed_msg+0x18a>
 80164c0:	f109 0310 	add.w	r3, r9, #16
 80164c4:	446b      	add	r3, sp
 80164c6:	2200      	movs	r2, #0
 80164c8:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 80164cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80164d0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80164d4:	2b01      	cmp	r3, #1
 80164d6:	d911      	bls.n	80164fc <uxr_write_framed_msg+0x214>
 80164d8:	18a3      	adds	r3, r4, r2
 80164da:	3201      	adds	r2, #1
 80164dc:	b2d2      	uxtb	r2, r2
 80164de:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80164e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80164e6:	f1b9 0f00 	cmp.w	r9, #0
 80164ea:	d119      	bne.n	8016520 <uxr_write_framed_msg+0x238>
 80164ec:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80164f0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80164f4:	2b01      	cmp	r3, #1
 80164f6:	f04f 0901 	mov.w	r9, #1
 80164fa:	d8ce      	bhi.n	801649a <uxr_write_framed_msg+0x1b2>
 80164fc:	1c53      	adds	r3, r2, #1
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	2b29      	cmp	r3, #41	@ 0x29
 8016502:	d8cc      	bhi.n	801649e <uxr_write_framed_msg+0x1b6>
 8016504:	18a3      	adds	r3, r4, r2
 8016506:	3202      	adds	r2, #2
 8016508:	f08c 0c20 	eor.w	ip, ip, #32
 801650c:	b2d2      	uxtb	r2, r2
 801650e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8016512:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 8016516:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801651a:	f1b9 0f00 	cmp.w	r9, #0
 801651e:	d0e5      	beq.n	80164ec <uxr_write_framed_msg+0x204>
 8016520:	2500      	movs	r5, #0
 8016522:	e001      	b.n	8016528 <uxr_write_framed_msg+0x240>
 8016524:	2800      	cmp	r0, #0
 8016526:	d0a4      	beq.n	8016472 <uxr_write_framed_msg+0x18a>
 8016528:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801652c:	1b52      	subs	r2, r2, r5
 801652e:	4643      	mov	r3, r8
 8016530:	4421      	add	r1, r4
 8016532:	4638      	mov	r0, r7
 8016534:	47b0      	blx	r6
 8016536:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801653a:	4405      	add	r5, r0
 801653c:	4295      	cmp	r5, r2
 801653e:	d3f1      	bcc.n	8016524 <uxr_write_framed_msg+0x23c>
 8016540:	d197      	bne.n	8016472 <uxr_write_framed_msg+0x18a>
 8016542:	2300      	movs	r3, #0
 8016544:	fa1f f08b 	uxth.w	r0, fp
 8016548:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801654c:	b005      	add	sp, #20
 801654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016552:	2300      	movs	r3, #0
 8016554:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016558:	e732      	b.n	80163c0 <uxr_write_framed_msg+0xd8>
 801655a:	44a6      	add	lr, r4
 801655c:	f085 0520 	eor.w	r5, r5, #32
 8016560:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016564:	4610      	mov	r0, r2
 8016566:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801656a:	464a      	mov	r2, r9
 801656c:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8016570:	e6e5      	b.n	801633e <uxr_write_framed_msg+0x56>
 8016572:	f08c 0c20 	eor.w	ip, ip, #32
 8016576:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801657a:	2103      	movs	r1, #3
 801657c:	2004      	movs	r0, #4
 801657e:	f04f 0906 	mov.w	r9, #6
 8016582:	2205      	movs	r2, #5
 8016584:	4686      	mov	lr, r0
 8016586:	460b      	mov	r3, r1
 8016588:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801658c:	e6ca      	b.n	8016324 <uxr_write_framed_msg+0x3c>
 801658e:	f8ad b00c 	strh.w	fp, [sp, #12]
 8016592:	46dc      	mov	ip, fp
 8016594:	e779      	b.n	801648a <uxr_write_framed_msg+0x1a2>
 8016596:	bf00      	nop
 8016598:	08020e4c 	.word	0x08020e4c

0801659c <uxr_framing_read_transport>:
 801659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a0:	4604      	mov	r4, r0
 80165a2:	b083      	sub	sp, #12
 80165a4:	461f      	mov	r7, r3
 80165a6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80165aa:	4689      	mov	r9, r1
 80165ac:	4692      	mov	sl, r2
 80165ae:	f000 fc5d 	bl	8016e6c <uxr_millis>
 80165b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80165b6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80165ba:	42b3      	cmp	r3, r6
 80165bc:	4680      	mov	r8, r0
 80165be:	d062      	beq.n	8016686 <uxr_framing_read_transport+0xea>
 80165c0:	d81c      	bhi.n	80165fc <uxr_framing_read_transport+0x60>
 80165c2:	1e75      	subs	r5, r6, #1
 80165c4:	1aed      	subs	r5, r5, r3
 80165c6:	b2ed      	uxtb	r5, r5
 80165c8:	2600      	movs	r6, #0
 80165ca:	455d      	cmp	r5, fp
 80165cc:	d81f      	bhi.n	801660e <uxr_framing_read_transport+0x72>
 80165ce:	19ab      	adds	r3, r5, r6
 80165d0:	455b      	cmp	r3, fp
 80165d2:	bf84      	itt	hi
 80165d4:	ebab 0b05 	subhi.w	fp, fp, r5
 80165d8:	fa5f f68b 	uxtbhi.w	r6, fp
 80165dc:	b9e5      	cbnz	r5, 8016618 <uxr_framing_read_transport+0x7c>
 80165de:	f04f 0b00 	mov.w	fp, #0
 80165e2:	f000 fc43 	bl	8016e6c <uxr_millis>
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	eba0 0108 	sub.w	r1, r0, r8
 80165ec:	1a5b      	subs	r3, r3, r1
 80165ee:	4658      	mov	r0, fp
 80165f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80165f4:	603b      	str	r3, [r7, #0]
 80165f6:	b003      	add	sp, #12
 80165f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165fc:	2e00      	cmp	r6, #0
 80165fe:	d04a      	beq.n	8016696 <uxr_framing_read_transport+0xfa>
 8016600:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8016604:	b2dd      	uxtb	r5, r3
 8016606:	3e01      	subs	r6, #1
 8016608:	455d      	cmp	r5, fp
 801660a:	b2f6      	uxtb	r6, r6
 801660c:	d9df      	bls.n	80165ce <uxr_framing_read_transport+0x32>
 801660e:	fa5f f58b 	uxtb.w	r5, fp
 8016612:	2600      	movs	r6, #0
 8016614:	2d00      	cmp	r5, #0
 8016616:	d0e2      	beq.n	80165de <uxr_framing_read_transport+0x42>
 8016618:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801661c:	3102      	adds	r1, #2
 801661e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	4421      	add	r1, r4
 8016626:	462a      	mov	r2, r5
 8016628:	4650      	mov	r0, sl
 801662a:	47c8      	blx	r9
 801662c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016630:	4a1b      	ldr	r2, [pc, #108]	@ (80166a0 <uxr_framing_read_transport+0x104>)
 8016632:	4403      	add	r3, r0
 8016634:	0859      	lsrs	r1, r3, #1
 8016636:	4683      	mov	fp, r0
 8016638:	fba2 0101 	umull	r0, r1, r2, r1
 801663c:	0889      	lsrs	r1, r1, #2
 801663e:	222a      	movs	r2, #42	@ 0x2a
 8016640:	fb02 3111 	mls	r1, r2, r1, r3
 8016644:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016648:	f1bb 0f00 	cmp.w	fp, #0
 801664c:	d0c7      	beq.n	80165de <uxr_framing_read_transport+0x42>
 801664e:	45ab      	cmp	fp, r5
 8016650:	d1c7      	bne.n	80165e2 <uxr_framing_read_transport+0x46>
 8016652:	2e00      	cmp	r6, #0
 8016654:	d0c5      	beq.n	80165e2 <uxr_framing_read_transport+0x46>
 8016656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	3102      	adds	r1, #2
 801665c:	4632      	mov	r2, r6
 801665e:	4421      	add	r1, r4
 8016660:	2300      	movs	r3, #0
 8016662:	4650      	mov	r0, sl
 8016664:	47c8      	blx	r9
 8016666:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801666a:	4a0d      	ldr	r2, [pc, #52]	@ (80166a0 <uxr_framing_read_transport+0x104>)
 801666c:	4403      	add	r3, r0
 801666e:	0859      	lsrs	r1, r3, #1
 8016670:	fba2 2101 	umull	r2, r1, r2, r1
 8016674:	0889      	lsrs	r1, r1, #2
 8016676:	222a      	movs	r2, #42	@ 0x2a
 8016678:	fb02 3311 	mls	r3, r2, r1, r3
 801667c:	eb00 0b05 	add.w	fp, r0, r5
 8016680:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016684:	e7ad      	b.n	80165e2 <uxr_framing_read_transport+0x46>
 8016686:	2600      	movs	r6, #0
 8016688:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801668c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801668e:	d9be      	bls.n	801660e <uxr_framing_read_transport+0x72>
 8016690:	2529      	movs	r5, #41	@ 0x29
 8016692:	2102      	movs	r1, #2
 8016694:	e7c3      	b.n	801661e <uxr_framing_read_transport+0x82>
 8016696:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 801669a:	b2dd      	uxtb	r5, r3
 801669c:	e795      	b.n	80165ca <uxr_framing_read_transport+0x2e>
 801669e:	bf00      	nop
 80166a0:	30c30c31 	.word	0x30c30c31

080166a4 <uxr_read_framed_msg>:
 80166a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a8:	461d      	mov	r5, r3
 80166aa:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 80166ae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80166b2:	b085      	sub	sp, #20
 80166b4:	459c      	cmp	ip, r3
 80166b6:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80166ba:	4604      	mov	r4, r0
 80166bc:	460f      	mov	r7, r1
 80166be:	4616      	mov	r6, r2
 80166c0:	f000 81ae 	beq.w	8016a20 <uxr_read_framed_msg+0x37c>
 80166c4:	2000      	movs	r0, #0
 80166c6:	4639      	mov	r1, r7
 80166c8:	2800      	cmp	r0, #0
 80166ca:	d138      	bne.n	801673e <uxr_read_framed_msg+0x9a>
 80166cc:	468a      	mov	sl, r1
 80166ce:	7823      	ldrb	r3, [r4, #0]
 80166d0:	2b07      	cmp	r3, #7
 80166d2:	d8fd      	bhi.n	80166d0 <uxr_read_framed_msg+0x2c>
 80166d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80166d8:	0116013b 	.word	0x0116013b
 80166dc:	00cd00f0 	.word	0x00cd00f0
 80166e0:	005a00a0 	.word	0x005a00a0
 80166e4:	00080037 	.word	0x00080037
 80166e8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80166ec:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80166f0:	4290      	cmp	r0, r2
 80166f2:	f000 8167 	beq.w	80169c4 <uxr_read_framed_msg+0x320>
 80166f6:	18a3      	adds	r3, r4, r2
 80166f8:	1c57      	adds	r7, r2, #1
 80166fa:	49c7      	ldr	r1, [pc, #796]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 80166fc:	f893 c002 	ldrb.w	ip, [r3, #2]
 8016700:	087b      	lsrs	r3, r7, #1
 8016702:	fba1 8303 	umull	r8, r3, r1, r3
 8016706:	089b      	lsrs	r3, r3, #2
 8016708:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801670c:	fb08 7313 	mls	r3, r8, r3, r7
 8016710:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8016714:	b2df      	uxtb	r7, r3
 8016716:	f000 81b2 	beq.w	8016a7e <uxr_read_framed_msg+0x3da>
 801671a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801671e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8016722:	f000 8220 	beq.w	8016b66 <uxr_read_framed_msg+0x4c2>
 8016726:	4661      	mov	r1, ip
 8016728:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801672a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801672c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016730:	b29b      	uxth	r3, r3
 8016732:	2100      	movs	r1, #0
 8016734:	429a      	cmp	r2, r3
 8016736:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016738:	7021      	strb	r1, [r4, #0]
 801673a:	f000 8198 	beq.w	8016a6e <uxr_read_framed_msg+0x3ca>
 801673e:	2000      	movs	r0, #0
 8016740:	b005      	add	sp, #20
 8016742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016746:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801674a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801674e:	4297      	cmp	r7, r2
 8016750:	f000 8148 	beq.w	80169e4 <uxr_read_framed_msg+0x340>
 8016754:	18a3      	adds	r3, r4, r2
 8016756:	f102 0c01 	add.w	ip, r2, #1
 801675a:	49af      	ldr	r1, [pc, #700]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 801675c:	7898      	ldrb	r0, [r3, #2]
 801675e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016762:	fba1 8303 	umull	r8, r3, r1, r3
 8016766:	089b      	lsrs	r3, r3, #2
 8016768:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801676c:	fb08 c313 	mls	r3, r8, r3, ip
 8016770:	287d      	cmp	r0, #125	@ 0x7d
 8016772:	fa5f fc83 	uxtb.w	ip, r3
 8016776:	f000 8194 	beq.w	8016aa2 <uxr_read_framed_msg+0x3fe>
 801677a:	287e      	cmp	r0, #126	@ 0x7e
 801677c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016780:	f000 8200 	beq.w	8016b84 <uxr_read_framed_msg+0x4e0>
 8016784:	2307      	movs	r3, #7
 8016786:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016788:	7023      	strb	r3, [r4, #0]
 801678a:	e7a0      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 801678c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801678e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8016790:	429f      	cmp	r7, r3
 8016792:	f240 8164 	bls.w	8016a5e <uxr_read_framed_msg+0x3ba>
 8016796:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8016a18 <uxr_read_framed_msg+0x374>
 801679a:	f8cd a00c 	str.w	sl, [sp, #12]
 801679e:	212a      	movs	r1, #42	@ 0x2a
 80167a0:	e01f      	b.n	80167e2 <uxr_read_framed_msg+0x13e>
 80167a2:	f89a e002 	ldrb.w	lr, [sl, #2]
 80167a6:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 80167aa:	f000 80ea 	beq.w	8016982 <uxr_read_framed_msg+0x2de>
 80167ae:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80167b2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80167b6:	f000 8142 	beq.w	8016a3e <uxr_read_framed_msg+0x39a>
 80167ba:	f805 e003 	strb.w	lr, [r5, r3]
 80167be:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80167c0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80167c2:	4f96      	ldr	r7, [pc, #600]	@ (8016a1c <uxr_read_framed_msg+0x378>)
 80167c4:	ea80 020e 	eor.w	r2, r0, lr
 80167c8:	b2d2      	uxtb	r2, r2
 80167ca:	3301      	adds	r3, #1
 80167cc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80167d0:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80167d8:	42bb      	cmp	r3, r7
 80167da:	8663      	strh	r3, [r4, #50]	@ 0x32
 80167dc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80167de:	f080 80e7 	bcs.w	80169b0 <uxr_read_framed_msg+0x30c>
 80167e2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80167e6:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80167ea:	f100 0c01 	add.w	ip, r0, #1
 80167ee:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 80167f2:	fba9 e20e 	umull	lr, r2, r9, lr
 80167f6:	0892      	lsrs	r2, r2, #2
 80167f8:	fb01 c212 	mls	r2, r1, r2, ip
 80167fc:	4580      	cmp	r8, r0
 80167fe:	eb04 0a00 	add.w	sl, r4, r0
 8016802:	fa5f fc82 	uxtb.w	ip, r2
 8016806:	d1cc      	bne.n	80167a2 <uxr_read_framed_msg+0xfe>
 8016808:	42bb      	cmp	r3, r7
 801680a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801680e:	f040 8128 	bne.w	8016a62 <uxr_read_framed_msg+0x3be>
 8016812:	2306      	movs	r3, #6
 8016814:	7023      	strb	r3, [r4, #0]
 8016816:	e75a      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 8016818:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801681c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016820:	4297      	cmp	r7, r2
 8016822:	f000 80cf 	beq.w	80169c4 <uxr_read_framed_msg+0x320>
 8016826:	18a3      	adds	r3, r4, r2
 8016828:	f102 0c01 	add.w	ip, r2, #1
 801682c:	497a      	ldr	r1, [pc, #488]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 801682e:	7898      	ldrb	r0, [r3, #2]
 8016830:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016834:	fba1 8303 	umull	r8, r3, r1, r3
 8016838:	089b      	lsrs	r3, r3, #2
 801683a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801683e:	fb08 c313 	mls	r3, r8, r3, ip
 8016842:	287d      	cmp	r0, #125	@ 0x7d
 8016844:	fa5f fc83 	uxtb.w	ip, r3
 8016848:	f000 813d 	beq.w	8016ac6 <uxr_read_framed_msg+0x422>
 801684c:	287e      	cmp	r0, #126	@ 0x7e
 801684e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016852:	f000 8188 	beq.w	8016b66 <uxr_read_framed_msg+0x4c2>
 8016856:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801685a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 801685e:	b29b      	uxth	r3, r3
 8016860:	2200      	movs	r2, #0
 8016862:	428b      	cmp	r3, r1
 8016864:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016866:	8662      	strh	r2, [r4, #50]	@ 0x32
 8016868:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801686a:	f240 80f5 	bls.w	8016a58 <uxr_read_framed_msg+0x3b4>
 801686e:	7022      	strb	r2, [r4, #0]
 8016870:	e765      	b.n	801673e <uxr_read_framed_msg+0x9a>
 8016872:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016876:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801687a:	4297      	cmp	r7, r2
 801687c:	f000 80b2 	beq.w	80169e4 <uxr_read_framed_msg+0x340>
 8016880:	18a3      	adds	r3, r4, r2
 8016882:	f102 0c01 	add.w	ip, r2, #1
 8016886:	4964      	ldr	r1, [pc, #400]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 8016888:	7898      	ldrb	r0, [r3, #2]
 801688a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801688e:	fba1 8303 	umull	r8, r3, r1, r3
 8016892:	089b      	lsrs	r3, r3, #2
 8016894:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016898:	fb08 c313 	mls	r3, r8, r3, ip
 801689c:	287d      	cmp	r0, #125	@ 0x7d
 801689e:	fa5f fc83 	uxtb.w	ip, r3
 80168a2:	f000 813b 	beq.w	8016b1c <uxr_read_framed_msg+0x478>
 80168a6:	287e      	cmp	r0, #126	@ 0x7e
 80168a8:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80168ac:	f000 816a 	beq.w	8016b84 <uxr_read_framed_msg+0x4e0>
 80168b0:	2304      	movs	r3, #4
 80168b2:	8620      	strh	r0, [r4, #48]	@ 0x30
 80168b4:	7023      	strb	r3, [r4, #0]
 80168b6:	e70a      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 80168b8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80168bc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80168c0:	4297      	cmp	r7, r2
 80168c2:	f000 80c4 	beq.w	8016a4e <uxr_read_framed_msg+0x3aa>
 80168c6:	18a3      	adds	r3, r4, r2
 80168c8:	f102 0c01 	add.w	ip, r2, #1
 80168cc:	4952      	ldr	r1, [pc, #328]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 80168ce:	7898      	ldrb	r0, [r3, #2]
 80168d0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80168d4:	fba1 8303 	umull	r8, r3, r1, r3
 80168d8:	089b      	lsrs	r3, r3, #2
 80168da:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80168de:	fb08 c313 	mls	r3, r8, r3, ip
 80168e2:	287d      	cmp	r0, #125	@ 0x7d
 80168e4:	fa5f fc83 	uxtb.w	ip, r3
 80168e8:	f000 812b 	beq.w	8016b42 <uxr_read_framed_msg+0x49e>
 80168ec:	287e      	cmp	r0, #126	@ 0x7e
 80168ee:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80168f2:	f000 8155 	beq.w	8016ba0 <uxr_read_framed_msg+0x4fc>
 80168f6:	7863      	ldrb	r3, [r4, #1]
 80168f8:	4283      	cmp	r3, r0
 80168fa:	bf0c      	ite	eq
 80168fc:	2303      	moveq	r3, #3
 80168fe:	2300      	movne	r3, #0
 8016900:	7023      	strb	r3, [r4, #0]
 8016902:	e6e4      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 8016904:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016908:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801690c:	2300      	movs	r3, #0
 801690e:	4290      	cmp	r0, r2
 8016910:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8016914:	d06b      	beq.n	80169ee <uxr_read_framed_msg+0x34a>
 8016916:	18a3      	adds	r3, r4, r2
 8016918:	f102 0c01 	add.w	ip, r2, #1
 801691c:	493e      	ldr	r1, [pc, #248]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 801691e:	789f      	ldrb	r7, [r3, #2]
 8016920:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016924:	fba1 8303 	umull	r8, r3, r1, r3
 8016928:	089b      	lsrs	r3, r3, #2
 801692a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801692e:	fb08 c313 	mls	r3, r8, r3, ip
 8016932:	2f7d      	cmp	r7, #125	@ 0x7d
 8016934:	fa5f fc83 	uxtb.w	ip, r3
 8016938:	f000 80d8 	beq.w	8016aec <uxr_read_framed_msg+0x448>
 801693c:	2f7e      	cmp	r7, #126	@ 0x7e
 801693e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016942:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 8016946:	d052      	beq.n	80169ee <uxr_read_framed_msg+0x34a>
 8016948:	2302      	movs	r3, #2
 801694a:	7023      	strb	r3, [r4, #0]
 801694c:	e6bf      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 801694e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016952:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016956:	4930      	ldr	r1, [pc, #192]	@ (8016a18 <uxr_read_framed_msg+0x374>)
 8016958:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801695c:	e004      	b.n	8016968 <uxr_read_framed_msg+0x2c4>
 801695e:	78bb      	ldrb	r3, [r7, #2]
 8016960:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016964:	2b7e      	cmp	r3, #126	@ 0x7e
 8016966:	d02a      	beq.n	80169be <uxr_read_framed_msg+0x31a>
 8016968:	1c50      	adds	r0, r2, #1
 801696a:	0843      	lsrs	r3, r0, #1
 801696c:	fba1 e303 	umull	lr, r3, r1, r3
 8016970:	089b      	lsrs	r3, r3, #2
 8016972:	fb0c 0013 	mls	r0, ip, r3, r0
 8016976:	4590      	cmp	r8, r2
 8016978:	eb04 0702 	add.w	r7, r4, r2
 801697c:	b2c2      	uxtb	r2, r0
 801697e:	d1ee      	bne.n	801695e <uxr_read_framed_msg+0x2ba>
 8016980:	e6dd      	b.n	801673e <uxr_read_framed_msg+0x9a>
 8016982:	3002      	adds	r0, #2
 8016984:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016988:	eb04 0a02 	add.w	sl, r4, r2
 801698c:	fba9 e20e 	umull	lr, r2, r9, lr
 8016990:	0892      	lsrs	r2, r2, #2
 8016992:	45e0      	cmp	r8, ip
 8016994:	fb01 0012 	mls	r0, r1, r2, r0
 8016998:	f43f af36 	beq.w	8016808 <uxr_read_framed_msg+0x164>
 801699c:	f89a e002 	ldrb.w	lr, [sl, #2]
 80169a0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80169a4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80169a8:	d049      	beq.n	8016a3e <uxr_read_framed_msg+0x39a>
 80169aa:	f08e 0e20 	eor.w	lr, lr, #32
 80169ae:	e704      	b.n	80167ba <uxr_read_framed_msg+0x116>
 80169b0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80169b4:	f43f af2d 	beq.w	8016812 <uxr_read_framed_msg+0x16e>
 80169b8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80169bc:	d151      	bne.n	8016a62 <uxr_read_framed_msg+0x3be>
 80169be:	2301      	movs	r3, #1
 80169c0:	7023      	strb	r3, [r4, #0]
 80169c2:	e684      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 80169c4:	4651      	mov	r1, sl
 80169c6:	f8cd b000 	str.w	fp, [sp]
 80169ca:	2301      	movs	r3, #1
 80169cc:	9301      	str	r3, [sp, #4]
 80169ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80169d0:	9103      	str	r1, [sp, #12]
 80169d2:	4632      	mov	r2, r6
 80169d4:	4620      	mov	r0, r4
 80169d6:	f7ff fde1 	bl	801659c <uxr_framing_read_transport>
 80169da:	fab0 f080 	clz	r0, r0
 80169de:	9903      	ldr	r1, [sp, #12]
 80169e0:	0940      	lsrs	r0, r0, #5
 80169e2:	e671      	b.n	80166c8 <uxr_read_framed_msg+0x24>
 80169e4:	4651      	mov	r1, sl
 80169e6:	f8cd b000 	str.w	fp, [sp]
 80169ea:	2302      	movs	r3, #2
 80169ec:	e7ee      	b.n	80169cc <uxr_read_framed_msg+0x328>
 80169ee:	2304      	movs	r3, #4
 80169f0:	9301      	str	r3, [sp, #4]
 80169f2:	f8cd b000 	str.w	fp, [sp]
 80169f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80169f8:	4632      	mov	r2, r6
 80169fa:	4651      	mov	r1, sl
 80169fc:	4620      	mov	r0, r4
 80169fe:	f7ff fdcd 	bl	801659c <uxr_framing_read_transport>
 8016a02:	2800      	cmp	r0, #0
 8016a04:	f47f ae63 	bne.w	80166ce <uxr_read_framed_msg+0x2a>
 8016a08:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8016a0c:	387e      	subs	r0, #126	@ 0x7e
 8016a0e:	4651      	mov	r1, sl
 8016a10:	bf18      	it	ne
 8016a12:	2001      	movne	r0, #1
 8016a14:	e658      	b.n	80166c8 <uxr_read_framed_msg+0x24>
 8016a16:	bf00      	nop
 8016a18:	30c30c31 	.word	0x30c30c31
 8016a1c:	08020e4c 	.word	0x08020e4c
 8016a20:	2305      	movs	r3, #5
 8016a22:	9301      	str	r3, [sp, #4]
 8016a24:	f8cd b000 	str.w	fp, [sp]
 8016a28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016a2a:	f7ff fdb7 	bl	801659c <uxr_framing_read_transport>
 8016a2e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016a32:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016a36:	429a      	cmp	r2, r3
 8016a38:	f43f ae81 	beq.w	801673e <uxr_read_framed_msg+0x9a>
 8016a3c:	e642      	b.n	80166c4 <uxr_read_framed_msg+0x20>
 8016a3e:	42bb      	cmp	r3, r7
 8016a40:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016a44:	f43f aee5 	beq.w	8016812 <uxr_read_framed_msg+0x16e>
 8016a48:	2301      	movs	r3, #1
 8016a4a:	7023      	strb	r3, [r4, #0]
 8016a4c:	e63f      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 8016a4e:	4651      	mov	r1, sl
 8016a50:	f8cd b000 	str.w	fp, [sp]
 8016a54:	2303      	movs	r3, #3
 8016a56:	e7b9      	b.n	80169cc <uxr_read_framed_msg+0x328>
 8016a58:	2305      	movs	r3, #5
 8016a5a:	7023      	strb	r3, [r4, #0]
 8016a5c:	e637      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 8016a5e:	f43f aed8 	beq.w	8016812 <uxr_read_framed_msg+0x16e>
 8016a62:	1afb      	subs	r3, r7, r3
 8016a64:	3302      	adds	r3, #2
 8016a66:	e9cd b300 	strd	fp, r3, [sp]
 8016a6a:	4651      	mov	r1, sl
 8016a6c:	e7af      	b.n	80169ce <uxr_read_framed_msg+0x32a>
 8016a6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016a70:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016a74:	7013      	strb	r3, [r2, #0]
 8016a76:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016a78:	b005      	add	sp, #20
 8016a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a7e:	4287      	cmp	r7, r0
 8016a80:	d0a0      	beq.n	80169c4 <uxr_read_framed_msg+0x320>
 8016a82:	4423      	add	r3, r4
 8016a84:	3202      	adds	r2, #2
 8016a86:	7898      	ldrb	r0, [r3, #2]
 8016a88:	0853      	lsrs	r3, r2, #1
 8016a8a:	fba1 e303 	umull	lr, r3, r1, r3
 8016a8e:	089b      	lsrs	r3, r3, #2
 8016a90:	fb08 2213 	mls	r2, r8, r3, r2
 8016a94:	287e      	cmp	r0, #126	@ 0x7e
 8016a96:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016a9a:	d064      	beq.n	8016b66 <uxr_read_framed_msg+0x4c2>
 8016a9c:	f080 0120 	eor.w	r1, r0, #32
 8016aa0:	e642      	b.n	8016728 <uxr_read_framed_msg+0x84>
 8016aa2:	45bc      	cmp	ip, r7
 8016aa4:	d09e      	beq.n	80169e4 <uxr_read_framed_msg+0x340>
 8016aa6:	4423      	add	r3, r4
 8016aa8:	3202      	adds	r2, #2
 8016aaa:	7898      	ldrb	r0, [r3, #2]
 8016aac:	0853      	lsrs	r3, r2, #1
 8016aae:	fba1 e303 	umull	lr, r3, r1, r3
 8016ab2:	089b      	lsrs	r3, r3, #2
 8016ab4:	fb08 2213 	mls	r2, r8, r3, r2
 8016ab8:	287e      	cmp	r0, #126	@ 0x7e
 8016aba:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016abe:	d061      	beq.n	8016b84 <uxr_read_framed_msg+0x4e0>
 8016ac0:	f080 0020 	eor.w	r0, r0, #32
 8016ac4:	e65e      	b.n	8016784 <uxr_read_framed_msg+0xe0>
 8016ac6:	4567      	cmp	r7, ip
 8016ac8:	f43f af7c 	beq.w	80169c4 <uxr_read_framed_msg+0x320>
 8016acc:	4423      	add	r3, r4
 8016ace:	3202      	adds	r2, #2
 8016ad0:	7898      	ldrb	r0, [r3, #2]
 8016ad2:	0853      	lsrs	r3, r2, #1
 8016ad4:	fba1 e303 	umull	lr, r3, r1, r3
 8016ad8:	089b      	lsrs	r3, r3, #2
 8016ada:	fb08 2213 	mls	r2, r8, r3, r2
 8016ade:	287e      	cmp	r0, #126	@ 0x7e
 8016ae0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016ae4:	d03f      	beq.n	8016b66 <uxr_read_framed_msg+0x4c2>
 8016ae6:	f080 0020 	eor.w	r0, r0, #32
 8016aea:	e6b4      	b.n	8016856 <uxr_read_framed_msg+0x1b2>
 8016aec:	4560      	cmp	r0, ip
 8016aee:	f43f af7e 	beq.w	80169ee <uxr_read_framed_msg+0x34a>
 8016af2:	4423      	add	r3, r4
 8016af4:	3202      	adds	r2, #2
 8016af6:	7898      	ldrb	r0, [r3, #2]
 8016af8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016afc:	0853      	lsrs	r3, r2, #1
 8016afe:	fba1 e303 	umull	lr, r3, r1, r3
 8016b02:	089b      	lsrs	r3, r3, #2
 8016b04:	fb08 2213 	mls	r2, r8, r3, r2
 8016b08:	287e      	cmp	r0, #126	@ 0x7e
 8016b0a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016b0e:	f43f af6e 	beq.w	80169ee <uxr_read_framed_msg+0x34a>
 8016b12:	f080 0020 	eor.w	r0, r0, #32
 8016b16:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016b1a:	e715      	b.n	8016948 <uxr_read_framed_msg+0x2a4>
 8016b1c:	4567      	cmp	r7, ip
 8016b1e:	f43f af61 	beq.w	80169e4 <uxr_read_framed_msg+0x340>
 8016b22:	4423      	add	r3, r4
 8016b24:	3202      	adds	r2, #2
 8016b26:	7898      	ldrb	r0, [r3, #2]
 8016b28:	0853      	lsrs	r3, r2, #1
 8016b2a:	fba1 e303 	umull	lr, r3, r1, r3
 8016b2e:	089b      	lsrs	r3, r3, #2
 8016b30:	fb08 2213 	mls	r2, r8, r3, r2
 8016b34:	287e      	cmp	r0, #126	@ 0x7e
 8016b36:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016b3a:	d023      	beq.n	8016b84 <uxr_read_framed_msg+0x4e0>
 8016b3c:	f080 0020 	eor.w	r0, r0, #32
 8016b40:	e6b6      	b.n	80168b0 <uxr_read_framed_msg+0x20c>
 8016b42:	45bc      	cmp	ip, r7
 8016b44:	d083      	beq.n	8016a4e <uxr_read_framed_msg+0x3aa>
 8016b46:	4423      	add	r3, r4
 8016b48:	3202      	adds	r2, #2
 8016b4a:	7898      	ldrb	r0, [r3, #2]
 8016b4c:	0853      	lsrs	r3, r2, #1
 8016b4e:	fba1 e303 	umull	lr, r3, r1, r3
 8016b52:	089b      	lsrs	r3, r3, #2
 8016b54:	fb08 2213 	mls	r2, r8, r3, r2
 8016b58:	287e      	cmp	r0, #126	@ 0x7e
 8016b5a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016b5e:	d01f      	beq.n	8016ba0 <uxr_read_framed_msg+0x4fc>
 8016b60:	f080 0020 	eor.w	r0, r0, #32
 8016b64:	e6c7      	b.n	80168f6 <uxr_read_framed_msg+0x252>
 8016b66:	2701      	movs	r7, #1
 8016b68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b6a:	f8cd b000 	str.w	fp, [sp]
 8016b6e:	9701      	str	r7, [sp, #4]
 8016b70:	4632      	mov	r2, r6
 8016b72:	4651      	mov	r1, sl
 8016b74:	4620      	mov	r0, r4
 8016b76:	f7ff fd11 	bl	801659c <uxr_framing_read_transport>
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	f47f ada7 	bne.w	80166ce <uxr_read_framed_msg+0x2a>
 8016b80:	7027      	strb	r7, [r4, #0]
 8016b82:	e5a4      	b.n	80166ce <uxr_read_framed_msg+0x2a>
 8016b84:	f8cd b000 	str.w	fp, [sp]
 8016b88:	2302      	movs	r3, #2
 8016b8a:	9301      	str	r3, [sp, #4]
 8016b8c:	4632      	mov	r2, r6
 8016b8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b90:	4651      	mov	r1, sl
 8016b92:	4620      	mov	r0, r4
 8016b94:	f7ff fd02 	bl	801659c <uxr_framing_read_transport>
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f47f ad98 	bne.w	80166ce <uxr_read_framed_msg+0x2a>
 8016b9e:	e70e      	b.n	80169be <uxr_read_framed_msg+0x31a>
 8016ba0:	f8cd b000 	str.w	fp, [sp]
 8016ba4:	2303      	movs	r3, #3
 8016ba6:	e7f0      	b.n	8016b8a <uxr_read_framed_msg+0x4e6>

08016ba8 <uxr_stream_id>:
 8016ba8:	2901      	cmp	r1, #1
 8016baa:	b082      	sub	sp, #8
 8016bac:	4603      	mov	r3, r0
 8016bae:	d011      	beq.n	8016bd4 <uxr_stream_id+0x2c>
 8016bb0:	2902      	cmp	r1, #2
 8016bb2:	f04f 0c00 	mov.w	ip, #0
 8016bb6:	d00a      	beq.n	8016bce <uxr_stream_id+0x26>
 8016bb8:	2000      	movs	r0, #0
 8016bba:	f36c 0007 	bfi	r0, ip, #0, #8
 8016bbe:	f363 200f 	bfi	r0, r3, #8, #8
 8016bc2:	f361 4017 	bfi	r0, r1, #16, #8
 8016bc6:	f362 601f 	bfi	r0, r2, #24, #8
 8016bca:	b002      	add	sp, #8
 8016bcc:	4770      	bx	lr
 8016bce:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8016bd2:	e7f1      	b.n	8016bb8 <uxr_stream_id+0x10>
 8016bd4:	f100 0c01 	add.w	ip, r0, #1
 8016bd8:	fa5f fc8c 	uxtb.w	ip, ip
 8016bdc:	e7ec      	b.n	8016bb8 <uxr_stream_id+0x10>
 8016bde:	bf00      	nop

08016be0 <uxr_stream_id_from_raw>:
 8016be0:	b082      	sub	sp, #8
 8016be2:	4603      	mov	r3, r0
 8016be4:	b130      	cbz	r0, 8016bf4 <uxr_stream_id_from_raw+0x14>
 8016be6:	0602      	lsls	r2, r0, #24
 8016be8:	d411      	bmi.n	8016c0e <uxr_stream_id_from_raw+0x2e>
 8016bea:	1e42      	subs	r2, r0, #1
 8016bec:	b2d2      	uxtb	r2, r2
 8016bee:	f04f 0c01 	mov.w	ip, #1
 8016bf2:	e001      	b.n	8016bf8 <uxr_stream_id_from_raw+0x18>
 8016bf4:	4684      	mov	ip, r0
 8016bf6:	4602      	mov	r2, r0
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	f363 0007 	bfi	r0, r3, #0, #8
 8016bfe:	f362 200f 	bfi	r0, r2, #8, #8
 8016c02:	f36c 4017 	bfi	r0, ip, #16, #8
 8016c06:	f361 601f 	bfi	r0, r1, #24, #8
 8016c0a:	b002      	add	sp, #8
 8016c0c:	4770      	bx	lr
 8016c0e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8016c12:	f04f 0c02 	mov.w	ip, #2
 8016c16:	e7ef      	b.n	8016bf8 <uxr_stream_id_from_raw+0x18>

08016c18 <uxr_init_stream_storage>:
 8016c18:	2300      	movs	r3, #0
 8016c1a:	7403      	strb	r3, [r0, #16]
 8016c1c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8016c20:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8016c24:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8016c28:	4770      	bx	lr
 8016c2a:	bf00      	nop

08016c2c <uxr_reset_stream_storage>:
 8016c2c:	b570      	push	{r4, r5, r6, lr}
 8016c2e:	7c03      	ldrb	r3, [r0, #16]
 8016c30:	4604      	mov	r4, r0
 8016c32:	b153      	cbz	r3, 8016c4a <uxr_reset_stream_storage+0x1e>
 8016c34:	4606      	mov	r6, r0
 8016c36:	2500      	movs	r5, #0
 8016c38:	4630      	mov	r0, r6
 8016c3a:	f005 fb63 	bl	801c304 <uxr_reset_output_best_effort_stream>
 8016c3e:	7c23      	ldrb	r3, [r4, #16]
 8016c40:	3501      	adds	r5, #1
 8016c42:	42ab      	cmp	r3, r5
 8016c44:	f106 0610 	add.w	r6, r6, #16
 8016c48:	d8f6      	bhi.n	8016c38 <uxr_reset_stream_storage+0xc>
 8016c4a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016c4e:	b163      	cbz	r3, 8016c6a <uxr_reset_stream_storage+0x3e>
 8016c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c54:	2500      	movs	r5, #0
 8016c56:	4630      	mov	r0, r6
 8016c58:	f005 f964 	bl	801bf24 <uxr_reset_input_best_effort_stream>
 8016c5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016c60:	3501      	adds	r5, #1
 8016c62:	42ab      	cmp	r3, r5
 8016c64:	f106 0602 	add.w	r6, r6, #2
 8016c68:	d8f5      	bhi.n	8016c56 <uxr_reset_stream_storage+0x2a>
 8016c6a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8016c6e:	b163      	cbz	r3, 8016c8a <uxr_reset_stream_storage+0x5e>
 8016c70:	f104 0618 	add.w	r6, r4, #24
 8016c74:	2500      	movs	r5, #0
 8016c76:	4630      	mov	r0, r6
 8016c78:	f005 fbee 	bl	801c458 <uxr_reset_output_reliable_stream>
 8016c7c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8016c80:	3501      	adds	r5, #1
 8016c82:	42ab      	cmp	r3, r5
 8016c84:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8016c88:	d8f5      	bhi.n	8016c76 <uxr_reset_stream_storage+0x4a>
 8016c8a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8016c8e:	b163      	cbz	r3, 8016caa <uxr_reset_stream_storage+0x7e>
 8016c90:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8016c94:	2500      	movs	r5, #0
 8016c96:	4630      	mov	r0, r6
 8016c98:	f005 f9b4 	bl	801c004 <uxr_reset_input_reliable_stream>
 8016c9c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8016ca0:	3501      	adds	r5, #1
 8016ca2:	42ab      	cmp	r3, r5
 8016ca4:	f106 0618 	add.w	r6, r6, #24
 8016ca8:	d8f5      	bhi.n	8016c96 <uxr_reset_stream_storage+0x6a>
 8016caa:	bd70      	pop	{r4, r5, r6, pc}

08016cac <uxr_add_output_best_effort_buffer>:
 8016cac:	b510      	push	{r4, lr}
 8016cae:	7c04      	ldrb	r4, [r0, #16]
 8016cb0:	f104 0c01 	add.w	ip, r4, #1
 8016cb4:	b082      	sub	sp, #8
 8016cb6:	f880 c010 	strb.w	ip, [r0, #16]
 8016cba:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8016cbe:	f005 fb17 	bl	801c2f0 <uxr_init_output_best_effort_stream>
 8016cc2:	2201      	movs	r2, #1
 8016cc4:	4611      	mov	r1, r2
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	b002      	add	sp, #8
 8016cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cce:	f7ff bf6b 	b.w	8016ba8 <uxr_stream_id>
 8016cd2:	bf00      	nop

08016cd4 <uxr_add_output_reliable_buffer>:
 8016cd4:	b510      	push	{r4, lr}
 8016cd6:	b084      	sub	sp, #16
 8016cd8:	4684      	mov	ip, r0
 8016cda:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016cde:	9000      	str	r0, [sp, #0]
 8016ce0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8016ce4:	2028      	movs	r0, #40	@ 0x28
 8016ce6:	fb00 c004 	mla	r0, r0, r4, ip
 8016cea:	f104 0e01 	add.w	lr, r4, #1
 8016cee:	3018      	adds	r0, #24
 8016cf0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8016cf4:	f005 fb78 	bl	801c3e8 <uxr_init_output_reliable_stream>
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	2102      	movs	r1, #2
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	b004      	add	sp, #16
 8016d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d04:	f7ff bf50 	b.w	8016ba8 <uxr_stream_id>

08016d08 <uxr_add_input_best_effort_buffer>:
 8016d08:	b510      	push	{r4, lr}
 8016d0a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8016d0e:	1c62      	adds	r2, r4, #1
 8016d10:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8016d14:	b082      	sub	sp, #8
 8016d16:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8016d1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016d1e:	f005 f8fd 	bl	801bf1c <uxr_init_input_best_effort_stream>
 8016d22:	2200      	movs	r2, #0
 8016d24:	2101      	movs	r1, #1
 8016d26:	4620      	mov	r0, r4
 8016d28:	b002      	add	sp, #8
 8016d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d2e:	f7ff bf3b 	b.w	8016ba8 <uxr_stream_id>
 8016d32:	bf00      	nop

08016d34 <uxr_add_input_reliable_buffer>:
 8016d34:	b510      	push	{r4, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	4684      	mov	ip, r0
 8016d3a:	9806      	ldr	r0, [sp, #24]
 8016d3c:	9000      	str	r0, [sp, #0]
 8016d3e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8016d42:	2018      	movs	r0, #24
 8016d44:	fb00 c004 	mla	r0, r0, r4, ip
 8016d48:	f104 0e01 	add.w	lr, r4, #1
 8016d4c:	3048      	adds	r0, #72	@ 0x48
 8016d4e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8016d52:	f005 f92b 	bl	801bfac <uxr_init_input_reliable_stream>
 8016d56:	2200      	movs	r2, #0
 8016d58:	2102      	movs	r1, #2
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	b004      	add	sp, #16
 8016d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d62:	f7ff bf21 	b.w	8016ba8 <uxr_stream_id>
 8016d66:	bf00      	nop

08016d68 <uxr_get_output_best_effort_stream>:
 8016d68:	7c03      	ldrb	r3, [r0, #16]
 8016d6a:	428b      	cmp	r3, r1
 8016d6c:	bf8c      	ite	hi
 8016d6e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8016d72:	2000      	movls	r0, #0
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop

08016d78 <uxr_get_output_reliable_stream>:
 8016d78:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8016d7c:	428b      	cmp	r3, r1
 8016d7e:	bf83      	ittte	hi
 8016d80:	2328      	movhi	r3, #40	@ 0x28
 8016d82:	fb03 0001 	mlahi	r0, r3, r1, r0
 8016d86:	3018      	addhi	r0, #24
 8016d88:	2000      	movls	r0, #0
 8016d8a:	4770      	bx	lr

08016d8c <uxr_get_input_best_effort_stream>:
 8016d8c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8016d90:	428b      	cmp	r3, r1
 8016d92:	bf86      	itte	hi
 8016d94:	3121      	addhi	r1, #33	@ 0x21
 8016d96:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8016d9a:	2000      	movls	r0, #0
 8016d9c:	4770      	bx	lr
 8016d9e:	bf00      	nop

08016da0 <uxr_get_input_reliable_stream>:
 8016da0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8016da4:	428b      	cmp	r3, r1
 8016da6:	bf83      	ittte	hi
 8016da8:	2318      	movhi	r3, #24
 8016daa:	fb03 0001 	mlahi	r0, r3, r1, r0
 8016dae:	3048      	addhi	r0, #72	@ 0x48
 8016db0:	2000      	movls	r0, #0
 8016db2:	4770      	bx	lr

08016db4 <uxr_output_streams_confirmed>:
 8016db4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8016db8:	b183      	cbz	r3, 8016ddc <uxr_output_streams_confirmed+0x28>
 8016dba:	b570      	push	{r4, r5, r6, lr}
 8016dbc:	4606      	mov	r6, r0
 8016dbe:	f100 0518 	add.w	r5, r0, #24
 8016dc2:	2400      	movs	r4, #0
 8016dc4:	e001      	b.n	8016dca <uxr_output_streams_confirmed+0x16>
 8016dc6:	3528      	adds	r5, #40	@ 0x28
 8016dc8:	b138      	cbz	r0, 8016dda <uxr_output_streams_confirmed+0x26>
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f005 fdac 	bl	801c928 <uxr_is_output_up_to_date>
 8016dd0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8016dd4:	3401      	adds	r4, #1
 8016dd6:	42a3      	cmp	r3, r4
 8016dd8:	d8f5      	bhi.n	8016dc6 <uxr_output_streams_confirmed+0x12>
 8016dda:	bd70      	pop	{r4, r5, r6, pc}
 8016ddc:	2001      	movs	r0, #1
 8016dde:	4770      	bx	lr

08016de0 <uxr_buffer_submessage_header>:
 8016de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016de2:	4604      	mov	r4, r0
 8016de4:	460e      	mov	r6, r1
 8016de6:	2104      	movs	r1, #4
 8016de8:	4615      	mov	r5, r2
 8016dea:	461f      	mov	r7, r3
 8016dec:	f7f7 fbac 	bl	800e548 <ucdr_align_to>
 8016df0:	2301      	movs	r3, #1
 8016df2:	7523      	strb	r3, [r4, #20]
 8016df4:	f047 0201 	orr.w	r2, r7, #1
 8016df8:	462b      	mov	r3, r5
 8016dfa:	4631      	mov	r1, r6
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f000 fa2b 	bl	8017258 <uxr_serialize_submessage_header>
 8016e02:	4620      	mov	r0, r4
 8016e04:	f7f7 fbb6 	bl	800e574 <ucdr_buffer_remaining>
 8016e08:	42a8      	cmp	r0, r5
 8016e0a:	bf34      	ite	cc
 8016e0c:	2000      	movcc	r0, #0
 8016e0e:	2001      	movcs	r0, #1
 8016e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e12:	bf00      	nop

08016e14 <uxr_read_submessage_header>:
 8016e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e18:	4604      	mov	r4, r0
 8016e1a:	460d      	mov	r5, r1
 8016e1c:	2104      	movs	r1, #4
 8016e1e:	4616      	mov	r6, r2
 8016e20:	4698      	mov	r8, r3
 8016e22:	f7f7 fb91 	bl	800e548 <ucdr_align_to>
 8016e26:	4620      	mov	r0, r4
 8016e28:	f7f7 fba4 	bl	800e574 <ucdr_buffer_remaining>
 8016e2c:	2803      	cmp	r0, #3
 8016e2e:	bf8c      	ite	hi
 8016e30:	2701      	movhi	r7, #1
 8016e32:	2700      	movls	r7, #0
 8016e34:	d802      	bhi.n	8016e3c <uxr_read_submessage_header+0x28>
 8016e36:	4638      	mov	r0, r7
 8016e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e3c:	4633      	mov	r3, r6
 8016e3e:	4642      	mov	r2, r8
 8016e40:	4620      	mov	r0, r4
 8016e42:	4629      	mov	r1, r5
 8016e44:	f000 fa1a 	bl	801727c <uxr_deserialize_submessage_header>
 8016e48:	f898 3000 	ldrb.w	r3, [r8]
 8016e4c:	f003 0201 	and.w	r2, r3, #1
 8016e50:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8016e54:	f888 3000 	strb.w	r3, [r8]
 8016e58:	7522      	strb	r2, [r4, #20]
 8016e5a:	4638      	mov	r0, r7
 8016e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e60 <uxr_submessage_padding>:
 8016e60:	f010 0003 	ands.w	r0, r0, #3
 8016e64:	bf18      	it	ne
 8016e66:	f1c0 0004 	rsbne	r0, r0, #4
 8016e6a:	4770      	bx	lr

08016e6c <uxr_millis>:
 8016e6c:	b510      	push	{r4, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	4669      	mov	r1, sp
 8016e72:	2001      	movs	r0, #1
 8016e74:	f7eb fed0 	bl	8002c18 <clock_gettime>
 8016e78:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8016e7c:	4b06      	ldr	r3, [pc, #24]	@ (8016e98 <uxr_millis+0x2c>)
 8016e7e:	fba0 0103 	umull	r0, r1, r0, r3
 8016e82:	1900      	adds	r0, r0, r4
 8016e84:	fb03 1102 	mla	r1, r3, r2, r1
 8016e88:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8016e8c:	4a03      	ldr	r2, [pc, #12]	@ (8016e9c <uxr_millis+0x30>)
 8016e8e:	2300      	movs	r3, #0
 8016e90:	f7e9 feea 	bl	8000c68 <__aeabi_ldivmod>
 8016e94:	b004      	add	sp, #16
 8016e96:	bd10      	pop	{r4, pc}
 8016e98:	3b9aca00 	.word	0x3b9aca00
 8016e9c:	000f4240 	.word	0x000f4240

08016ea0 <uxr_nanos>:
 8016ea0:	b510      	push	{r4, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	4669      	mov	r1, sp
 8016ea6:	2001      	movs	r0, #1
 8016ea8:	f7eb feb6 	bl	8002c18 <clock_gettime>
 8016eac:	4a06      	ldr	r2, [pc, #24]	@ (8016ec8 <uxr_nanos+0x28>)
 8016eae:	9800      	ldr	r0, [sp, #0]
 8016eb0:	9902      	ldr	r1, [sp, #8]
 8016eb2:	9c01      	ldr	r4, [sp, #4]
 8016eb4:	fba0 0302 	umull	r0, r3, r0, r2
 8016eb8:	1840      	adds	r0, r0, r1
 8016eba:	fb02 3304 	mla	r3, r2, r4, r3
 8016ebe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8016ec2:	b004      	add	sp, #16
 8016ec4:	bd10      	pop	{r4, pc}
 8016ec6:	bf00      	nop
 8016ec8:	3b9aca00 	.word	0x3b9aca00

08016ecc <on_full_output_buffer_fragmented>:
 8016ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	b08a      	sub	sp, #40	@ 0x28
 8016ed4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8016ed8:	4606      	mov	r6, r0
 8016eda:	f104 0008 	add.w	r0, r4, #8
 8016ede:	f7ff ff4b 	bl	8016d78 <uxr_get_output_reliable_stream>
 8016ee2:	4605      	mov	r5, r0
 8016ee4:	f005 fd2a 	bl	801c93c <get_available_free_slots>
 8016ee8:	b968      	cbnz	r0, 8016f06 <on_full_output_buffer_fragmented+0x3a>
 8016eea:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8016eee:	4620      	mov	r0, r4
 8016ef0:	4798      	blx	r3
 8016ef2:	b918      	cbnz	r0, 8016efc <on_full_output_buffer_fragmented+0x30>
 8016ef4:	2001      	movs	r0, #1
 8016ef6:	b00a      	add	sp, #40	@ 0x28
 8016ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016efc:	4628      	mov	r0, r5
 8016efe:	f005 fd1d 	bl	801c93c <get_available_free_slots>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d0f6      	beq.n	8016ef4 <on_full_output_buffer_fragmented+0x28>
 8016f06:	892a      	ldrh	r2, [r5, #8]
 8016f08:	686b      	ldr	r3, [r5, #4]
 8016f0a:	fbb3 f8f2 	udiv	r8, r3, r2
 8016f0e:	89eb      	ldrh	r3, [r5, #14]
 8016f10:	7b29      	ldrb	r1, [r5, #12]
 8016f12:	fbb3 f0f2 	udiv	r0, r3, r2
 8016f16:	fb02 3310 	mls	r3, r2, r0, r3
 8016f1a:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8016f1e:	b29b      	uxth	r3, r3
 8016f20:	fb08 f303 	mul.w	r3, r8, r3
 8016f24:	31fc      	adds	r1, #252	@ 0xfc
 8016f26:	f1a8 0804 	sub.w	r8, r8, #4
 8016f2a:	4441      	add	r1, r8
 8016f2c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8016f30:	b28f      	uxth	r7, r1
 8016f32:	6829      	ldr	r1, [r5, #0]
 8016f34:	3304      	adds	r3, #4
 8016f36:	1bd2      	subs	r2, r2, r7
 8016f38:	4419      	add	r1, r3
 8016f3a:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8016f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	4642      	mov	r2, r8
 8016f46:	2300      	movs	r3, #0
 8016f48:	a802      	add	r0, sp, #8
 8016f4a:	f7f7 fad1 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 8016f4e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8016f52:	f102 0308 	add.w	r3, r2, #8
 8016f56:	4543      	cmp	r3, r8
 8016f58:	d928      	bls.n	8016fac <on_full_output_buffer_fragmented+0xe0>
 8016f5a:	463a      	mov	r2, r7
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	210d      	movs	r1, #13
 8016f60:	a802      	add	r0, sp, #8
 8016f62:	f7ff ff3d 	bl	8016de0 <uxr_buffer_submessage_header>
 8016f66:	8929      	ldrh	r1, [r5, #8]
 8016f68:	89eb      	ldrh	r3, [r5, #14]
 8016f6a:	fbb3 f2f1 	udiv	r2, r3, r1
 8016f6e:	fb01 3312 	mls	r3, r1, r2, r3
 8016f72:	b29b      	uxth	r3, r3
 8016f74:	686a      	ldr	r2, [r5, #4]
 8016f76:	fbb2 f2f1 	udiv	r2, r2, r1
 8016f7a:	fb02 f303 	mul.w	r3, r2, r3
 8016f7e:	682a      	ldr	r2, [r5, #0]
 8016f80:	f842 8003 	str.w	r8, [r2, r3]
 8016f84:	89e8      	ldrh	r0, [r5, #14]
 8016f86:	2101      	movs	r1, #1
 8016f88:	f005 fcf6 	bl	801c978 <uxr_seq_num_add>
 8016f8c:	9904      	ldr	r1, [sp, #16]
 8016f8e:	9a03      	ldr	r2, [sp, #12]
 8016f90:	81e8      	strh	r0, [r5, #14]
 8016f92:	1a52      	subs	r2, r2, r1
 8016f94:	4630      	mov	r0, r6
 8016f96:	f7f7 fabd 	bl	800e514 <ucdr_init_buffer>
 8016f9a:	4630      	mov	r0, r6
 8016f9c:	4910      	ldr	r1, [pc, #64]	@ (8016fe0 <on_full_output_buffer_fragmented+0x114>)
 8016f9e:	4622      	mov	r2, r4
 8016fa0:	f7f7 fa8c 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 8016fa4:	2000      	movs	r0, #0
 8016fa6:	b00a      	add	sp, #40	@ 0x28
 8016fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fac:	b292      	uxth	r2, r2
 8016fae:	2302      	movs	r3, #2
 8016fb0:	210d      	movs	r1, #13
 8016fb2:	a802      	add	r0, sp, #8
 8016fb4:	f7ff ff14 	bl	8016de0 <uxr_buffer_submessage_header>
 8016fb8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8016fbc:	8928      	ldrh	r0, [r5, #8]
 8016fbe:	f103 0208 	add.w	r2, r3, #8
 8016fc2:	89eb      	ldrh	r3, [r5, #14]
 8016fc4:	fbb3 f1f0 	udiv	r1, r3, r0
 8016fc8:	fb00 3311 	mls	r3, r0, r1, r3
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	6869      	ldr	r1, [r5, #4]
 8016fd0:	fbb1 f1f0 	udiv	r1, r1, r0
 8016fd4:	fb01 f303 	mul.w	r3, r1, r3
 8016fd8:	6829      	ldr	r1, [r5, #0]
 8016fda:	50ca      	str	r2, [r1, r3]
 8016fdc:	e7d2      	b.n	8016f84 <on_full_output_buffer_fragmented+0xb8>
 8016fde:	bf00      	nop
 8016fe0:	08016ecd 	.word	0x08016ecd

08016fe4 <uxr_prepare_output_stream>:
 8016fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fe6:	b087      	sub	sp, #28
 8016fe8:	2707      	movs	r7, #7
 8016fea:	9202      	str	r2, [sp, #8]
 8016fec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016fee:	2500      	movs	r5, #0
 8016ff0:	3204      	adds	r2, #4
 8016ff2:	e9cd 7500 	strd	r7, r5, [sp]
 8016ff6:	461c      	mov	r4, r3
 8016ff8:	4606      	mov	r6, r0
 8016ffa:	f7ff f807 	bl	801600c <uxr_prepare_stream_to_write_submessage>
 8016ffe:	f080 0201 	eor.w	r2, r0, #1
 8017002:	b2d2      	uxtb	r2, r2
 8017004:	75a2      	strb	r2, [r4, #22]
 8017006:	b112      	cbz	r2, 801700e <uxr_prepare_output_stream+0x2a>
 8017008:	4628      	mov	r0, r5
 801700a:	b007      	add	sp, #28
 801700c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801700e:	aa05      	add	r2, sp, #20
 8017010:	9902      	ldr	r1, [sp, #8]
 8017012:	4630      	mov	r0, r6
 8017014:	f7ff f934 	bl	8016280 <uxr_init_base_object_request>
 8017018:	a905      	add	r1, sp, #20
 801701a:	4605      	mov	r5, r0
 801701c:	4620      	mov	r0, r4
 801701e:	f001 f865 	bl	80180ec <uxr_serialize_WRITE_DATA_Payload_Data>
 8017022:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8017026:	69a6      	ldr	r6, [r4, #24]
 8017028:	69e7      	ldr	r7, [r4, #28]
 801702a:	1a52      	subs	r2, r2, r1
 801702c:	4620      	mov	r0, r4
 801702e:	f7f7 fa71 	bl	800e514 <ucdr_init_buffer>
 8017032:	4620      	mov	r0, r4
 8017034:	463a      	mov	r2, r7
 8017036:	4631      	mov	r1, r6
 8017038:	f7f7 fa40 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801703c:	4628      	mov	r0, r5
 801703e:	b007      	add	sp, #28
 8017040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017042:	bf00      	nop

08017044 <uxr_prepare_output_stream_fragmented>:
 8017044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017048:	b093      	sub	sp, #76	@ 0x4c
 801704a:	4605      	mov	r5, r0
 801704c:	9107      	str	r1, [sp, #28]
 801704e:	3008      	adds	r0, #8
 8017050:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017054:	9303      	str	r3, [sp, #12]
 8017056:	9206      	str	r2, [sp, #24]
 8017058:	f7ff fe8e 	bl	8016d78 <uxr_get_output_reliable_stream>
 801705c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017060:	2b01      	cmp	r3, #1
 8017062:	f000 8095 	beq.w	8017190 <uxr_prepare_output_stream_fragmented+0x14c>
 8017066:	4604      	mov	r4, r0
 8017068:	2800      	cmp	r0, #0
 801706a:	f000 8091 	beq.w	8017190 <uxr_prepare_output_stream_fragmented+0x14c>
 801706e:	f005 fc65 	bl	801c93c <get_available_free_slots>
 8017072:	2800      	cmp	r0, #0
 8017074:	f000 8087 	beq.w	8017186 <uxr_prepare_output_stream_fragmented+0x142>
 8017078:	8922      	ldrh	r2, [r4, #8]
 801707a:	89e7      	ldrh	r7, [r4, #14]
 801707c:	fbb7 f3f2 	udiv	r3, r7, r2
 8017080:	fb02 7313 	mls	r3, r2, r3, r7
 8017084:	b29b      	uxth	r3, r3
 8017086:	6861      	ldr	r1, [r4, #4]
 8017088:	fbb1 f1f2 	udiv	r1, r1, r2
 801708c:	6822      	ldr	r2, [r4, #0]
 801708e:	9105      	str	r1, [sp, #20]
 8017090:	fb01 f303 	mul.w	r3, r1, r3
 8017094:	3304      	adds	r3, #4
 8017096:	eb02 0903 	add.w	r9, r2, r3
 801709a:	7b23      	ldrb	r3, [r4, #12]
 801709c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80170a0:	4543      	cmp	r3, r8
 80170a2:	f1a1 0b04 	sub.w	fp, r1, #4
 80170a6:	d37f      	bcc.n	80171a8 <uxr_prepare_output_stream_fragmented+0x164>
 80170a8:	f1ab 0a04 	sub.w	sl, fp, #4
 80170ac:	ebaa 0a03 	sub.w	sl, sl, r3
 80170b0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80170b2:	f8cd 8000 	str.w	r8, [sp]
 80170b6:	fa1f f38a 	uxth.w	r3, sl
 80170ba:	9304      	str	r3, [sp, #16]
 80170bc:	465a      	mov	r2, fp
 80170be:	2300      	movs	r3, #0
 80170c0:	4649      	mov	r1, r9
 80170c2:	a80a      	add	r0, sp, #40	@ 0x28
 80170c4:	f7f7 fa14 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 80170c8:	f106 0a08 	add.w	sl, r6, #8
 80170cc:	45da      	cmp	sl, fp
 80170ce:	bf2c      	ite	cs
 80170d0:	2300      	movcs	r3, #0
 80170d2:	2301      	movcc	r3, #1
 80170d4:	9a04      	ldr	r2, [sp, #16]
 80170d6:	005b      	lsls	r3, r3, #1
 80170d8:	210d      	movs	r1, #13
 80170da:	a80a      	add	r0, sp, #40	@ 0x28
 80170dc:	f7ff fe80 	bl	8016de0 <uxr_buffer_submessage_header>
 80170e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80170e4:	fbb7 f2fc 	udiv	r2, r7, ip
 80170e8:	fb0c 7212 	mls	r2, ip, r2, r7
 80170ec:	b292      	uxth	r2, r2
 80170ee:	6863      	ldr	r3, [r4, #4]
 80170f0:	fbb3 f3fc 	udiv	r3, r3, ip
 80170f4:	fb02 f303 	mul.w	r3, r2, r3
 80170f8:	6822      	ldr	r2, [r4, #0]
 80170fa:	2101      	movs	r1, #1
 80170fc:	f842 b003 	str.w	fp, [r2, r3]
 8017100:	4638      	mov	r0, r7
 8017102:	f005 fc39 	bl	801c978 <uxr_seq_num_add>
 8017106:	9b05      	ldr	r3, [sp, #20]
 8017108:	9e03      	ldr	r6, [sp, #12]
 801710a:	f1a3 0208 	sub.w	r2, r3, #8
 801710e:	f108 0104 	add.w	r1, r8, #4
 8017112:	4607      	mov	r7, r0
 8017114:	eba2 0208 	sub.w	r2, r2, r8
 8017118:	4449      	add	r1, r9
 801711a:	4630      	mov	r0, r6
 801711c:	f7f7 f9fa 	bl	800e514 <ucdr_init_buffer>
 8017120:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017122:	81e7      	strh	r7, [r4, #14]
 8017124:	1d1a      	adds	r2, r3, #4
 8017126:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801712a:	bf28      	it	cs
 801712c:	2200      	movcs	r2, #0
 801712e:	2300      	movs	r3, #0
 8017130:	b292      	uxth	r2, r2
 8017132:	2107      	movs	r1, #7
 8017134:	4630      	mov	r0, r6
 8017136:	f7ff fe53 	bl	8016de0 <uxr_buffer_submessage_header>
 801713a:	9906      	ldr	r1, [sp, #24]
 801713c:	aa09      	add	r2, sp, #36	@ 0x24
 801713e:	4628      	mov	r0, r5
 8017140:	f7ff f89e 	bl	8016280 <uxr_init_base_object_request>
 8017144:	4604      	mov	r4, r0
 8017146:	b320      	cbz	r0, 8017192 <uxr_prepare_output_stream_fragmented+0x14e>
 8017148:	9e03      	ldr	r6, [sp, #12]
 801714a:	a909      	add	r1, sp, #36	@ 0x24
 801714c:	4630      	mov	r0, r6
 801714e:	f000 ffcd 	bl	80180ec <uxr_serialize_WRITE_DATA_Payload_Data>
 8017152:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8017156:	4630      	mov	r0, r6
 8017158:	1a52      	subs	r2, r2, r1
 801715a:	f7f7 f9db 	bl	800e514 <ucdr_init_buffer>
 801715e:	9b07      	ldr	r3, [sp, #28]
 8017160:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8017164:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017166:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801716a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801716c:	491a      	ldr	r1, [pc, #104]	@ (80171d8 <uxr_prepare_output_stream_fragmented+0x194>)
 801716e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8017172:	4630      	mov	r0, r6
 8017174:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8017178:	462a      	mov	r2, r5
 801717a:	f7f7 f99f 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801717e:	4620      	mov	r0, r4
 8017180:	b013      	add	sp, #76	@ 0x4c
 8017182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017186:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8017188:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801718a:	4628      	mov	r0, r5
 801718c:	4798      	blx	r3
 801718e:	b920      	cbnz	r0, 801719a <uxr_prepare_output_stream_fragmented+0x156>
 8017190:	2400      	movs	r4, #0
 8017192:	4620      	mov	r0, r4
 8017194:	b013      	add	sp, #76	@ 0x4c
 8017196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719a:	4620      	mov	r0, r4
 801719c:	f005 fbce 	bl	801c93c <get_available_free_slots>
 80171a0:	2800      	cmp	r0, #0
 80171a2:	f47f af69 	bne.w	8017078 <uxr_prepare_output_stream_fragmented+0x34>
 80171a6:	e7f3      	b.n	8017190 <uxr_prepare_output_stream_fragmented+0x14c>
 80171a8:	4638      	mov	r0, r7
 80171aa:	2101      	movs	r1, #1
 80171ac:	f005 fbe4 	bl	801c978 <uxr_seq_num_add>
 80171b0:	8921      	ldrh	r1, [r4, #8]
 80171b2:	fbb0 f2f1 	udiv	r2, r0, r1
 80171b6:	fb01 0212 	mls	r2, r1, r2, r0
 80171ba:	b292      	uxth	r2, r2
 80171bc:	6863      	ldr	r3, [r4, #4]
 80171be:	fbb3 f3f1 	udiv	r3, r3, r1
 80171c2:	fb02 f303 	mul.w	r3, r2, r3
 80171c6:	6822      	ldr	r2, [r4, #0]
 80171c8:	3304      	adds	r3, #4
 80171ca:	eb02 0903 	add.w	r9, r2, r3
 80171ce:	4607      	mov	r7, r0
 80171d0:	7b23      	ldrb	r3, [r4, #12]
 80171d2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80171d6:	e767      	b.n	80170a8 <uxr_prepare_output_stream_fragmented+0x64>
 80171d8:	08016ecd 	.word	0x08016ecd

080171dc <uxr_serialize_message_header>:
 80171dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171e0:	4617      	mov	r7, r2
 80171e2:	4604      	mov	r4, r0
 80171e4:	461e      	mov	r6, r3
 80171e6:	460d      	mov	r5, r1
 80171e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80171ec:	f7fc f962 	bl	80134b4 <ucdr_serialize_uint8_t>
 80171f0:	4639      	mov	r1, r7
 80171f2:	4620      	mov	r0, r4
 80171f4:	f7fc f95e 	bl	80134b4 <ucdr_serialize_uint8_t>
 80171f8:	4632      	mov	r2, r6
 80171fa:	2101      	movs	r1, #1
 80171fc:	4620      	mov	r0, r4
 80171fe:	f7fc fa0f 	bl	8013620 <ucdr_serialize_endian_uint16_t>
 8017202:	062b      	lsls	r3, r5, #24
 8017204:	d501      	bpl.n	801720a <uxr_serialize_message_header+0x2e>
 8017206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801720a:	4641      	mov	r1, r8
 801720c:	4620      	mov	r0, r4
 801720e:	2204      	movs	r2, #4
 8017210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017214:	f7fb bf04 	b.w	8013020 <ucdr_serialize_array_uint8_t>

08017218 <uxr_deserialize_message_header>:
 8017218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801721c:	4617      	mov	r7, r2
 801721e:	4604      	mov	r4, r0
 8017220:	461e      	mov	r6, r3
 8017222:	460d      	mov	r5, r1
 8017224:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017228:	f7fc f95a 	bl	80134e0 <ucdr_deserialize_uint8_t>
 801722c:	4639      	mov	r1, r7
 801722e:	4620      	mov	r0, r4
 8017230:	f7fc f956 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017234:	4632      	mov	r2, r6
 8017236:	2101      	movs	r1, #1
 8017238:	4620      	mov	r0, r4
 801723a:	f7fc fae7 	bl	801380c <ucdr_deserialize_endian_uint16_t>
 801723e:	f995 3000 	ldrsb.w	r3, [r5]
 8017242:	2b00      	cmp	r3, #0
 8017244:	da01      	bge.n	801724a <uxr_deserialize_message_header+0x32>
 8017246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801724a:	4641      	mov	r1, r8
 801724c:	4620      	mov	r0, r4
 801724e:	2204      	movs	r2, #4
 8017250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017254:	f7fb bf48 	b.w	80130e8 <ucdr_deserialize_array_uint8_t>

08017258 <uxr_serialize_submessage_header>:
 8017258:	b570      	push	{r4, r5, r6, lr}
 801725a:	4616      	mov	r6, r2
 801725c:	4604      	mov	r4, r0
 801725e:	461d      	mov	r5, r3
 8017260:	f7fc f928 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017264:	4631      	mov	r1, r6
 8017266:	4620      	mov	r0, r4
 8017268:	f7fc f924 	bl	80134b4 <ucdr_serialize_uint8_t>
 801726c:	462a      	mov	r2, r5
 801726e:	4620      	mov	r0, r4
 8017270:	2101      	movs	r1, #1
 8017272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017276:	f7fc b9d3 	b.w	8013620 <ucdr_serialize_endian_uint16_t>
 801727a:	bf00      	nop

0801727c <uxr_deserialize_submessage_header>:
 801727c:	b570      	push	{r4, r5, r6, lr}
 801727e:	4616      	mov	r6, r2
 8017280:	4604      	mov	r4, r0
 8017282:	461d      	mov	r5, r3
 8017284:	f7fc f92c 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017288:	4631      	mov	r1, r6
 801728a:	4620      	mov	r0, r4
 801728c:	f7fc f928 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017290:	462a      	mov	r2, r5
 8017292:	4620      	mov	r0, r4
 8017294:	2101      	movs	r1, #1
 8017296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801729a:	f7fc bab7 	b.w	801380c <ucdr_deserialize_endian_uint16_t>
 801729e:	bf00      	nop

080172a0 <uxr_serialize_CLIENT_Representation>:
 80172a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172a4:	2204      	movs	r2, #4
 80172a6:	460e      	mov	r6, r1
 80172a8:	4605      	mov	r5, r0
 80172aa:	f7fb feb9 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80172ae:	2202      	movs	r2, #2
 80172b0:	1d31      	adds	r1, r6, #4
 80172b2:	4604      	mov	r4, r0
 80172b4:	4628      	mov	r0, r5
 80172b6:	f7fb feb3 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80172ba:	2202      	movs	r2, #2
 80172bc:	4004      	ands	r4, r0
 80172be:	1db1      	adds	r1, r6, #6
 80172c0:	4628      	mov	r0, r5
 80172c2:	f7fb fead 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80172c6:	b2e4      	uxtb	r4, r4
 80172c8:	2204      	movs	r2, #4
 80172ca:	4004      	ands	r4, r0
 80172cc:	f106 0108 	add.w	r1, r6, #8
 80172d0:	4628      	mov	r0, r5
 80172d2:	f7fb fea5 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80172d6:	7b31      	ldrb	r1, [r6, #12]
 80172d8:	ea00 0804 	and.w	r8, r0, r4
 80172dc:	4628      	mov	r0, r5
 80172de:	f7fc f8e9 	bl	80134b4 <ucdr_serialize_uint8_t>
 80172e2:	7b71      	ldrb	r1, [r6, #13]
 80172e4:	ea08 0800 	and.w	r8, r8, r0
 80172e8:	4628      	mov	r0, r5
 80172ea:	f7fc f8b5 	bl	8013458 <ucdr_serialize_bool>
 80172ee:	7b73      	ldrb	r3, [r6, #13]
 80172f0:	ea08 0800 	and.w	r8, r8, r0
 80172f4:	b93b      	cbnz	r3, 8017306 <uxr_serialize_CLIENT_Representation+0x66>
 80172f6:	8bb1      	ldrh	r1, [r6, #28]
 80172f8:	4628      	mov	r0, r5
 80172fa:	f7fc f907 	bl	801350c <ucdr_serialize_uint16_t>
 80172fe:	ea08 0000 	and.w	r0, r8, r0
 8017302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017306:	6931      	ldr	r1, [r6, #16]
 8017308:	4628      	mov	r0, r5
 801730a:	f7fc faef 	bl	80138ec <ucdr_serialize_uint32_t>
 801730e:	6933      	ldr	r3, [r6, #16]
 8017310:	b1e3      	cbz	r3, 801734c <uxr_serialize_CLIENT_Representation+0xac>
 8017312:	b1c0      	cbz	r0, 8017346 <uxr_serialize_CLIENT_Representation+0xa6>
 8017314:	4637      	mov	r7, r6
 8017316:	f04f 0900 	mov.w	r9, #0
 801731a:	e001      	b.n	8017320 <uxr_serialize_CLIENT_Representation+0x80>
 801731c:	3708      	adds	r7, #8
 801731e:	b194      	cbz	r4, 8017346 <uxr_serialize_CLIENT_Representation+0xa6>
 8017320:	6979      	ldr	r1, [r7, #20]
 8017322:	4628      	mov	r0, r5
 8017324:	f004 fde4 	bl	801bef0 <ucdr_serialize_string>
 8017328:	69b9      	ldr	r1, [r7, #24]
 801732a:	4604      	mov	r4, r0
 801732c:	4628      	mov	r0, r5
 801732e:	f004 fddf 	bl	801bef0 <ucdr_serialize_string>
 8017332:	6933      	ldr	r3, [r6, #16]
 8017334:	f109 0901 	add.w	r9, r9, #1
 8017338:	4004      	ands	r4, r0
 801733a:	4599      	cmp	r9, r3
 801733c:	b2e4      	uxtb	r4, r4
 801733e:	d3ed      	bcc.n	801731c <uxr_serialize_CLIENT_Representation+0x7c>
 8017340:	ea08 0804 	and.w	r8, r8, r4
 8017344:	e7d7      	b.n	80172f6 <uxr_serialize_CLIENT_Representation+0x56>
 8017346:	f04f 0800 	mov.w	r8, #0
 801734a:	e7d4      	b.n	80172f6 <uxr_serialize_CLIENT_Representation+0x56>
 801734c:	ea08 0800 	and.w	r8, r8, r0
 8017350:	e7d1      	b.n	80172f6 <uxr_serialize_CLIENT_Representation+0x56>
 8017352:	bf00      	nop

08017354 <uxr_deserialize_CLIENT_Representation>:
 8017354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017358:	2204      	movs	r2, #4
 801735a:	460c      	mov	r4, r1
 801735c:	4605      	mov	r5, r0
 801735e:	f7fb fec3 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017362:	2202      	movs	r2, #2
 8017364:	1d21      	adds	r1, r4, #4
 8017366:	4606      	mov	r6, r0
 8017368:	4628      	mov	r0, r5
 801736a:	f7fb febd 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801736e:	2202      	movs	r2, #2
 8017370:	4006      	ands	r6, r0
 8017372:	1da1      	adds	r1, r4, #6
 8017374:	4628      	mov	r0, r5
 8017376:	f7fb feb7 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801737a:	b2f6      	uxtb	r6, r6
 801737c:	2204      	movs	r2, #4
 801737e:	4006      	ands	r6, r0
 8017380:	f104 0108 	add.w	r1, r4, #8
 8017384:	4628      	mov	r0, r5
 8017386:	f7fb feaf 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801738a:	f104 010c 	add.w	r1, r4, #12
 801738e:	ea00 0706 	and.w	r7, r0, r6
 8017392:	4628      	mov	r0, r5
 8017394:	f7fc f8a4 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017398:	f104 010d 	add.w	r1, r4, #13
 801739c:	4007      	ands	r7, r0
 801739e:	4628      	mov	r0, r5
 80173a0:	f7fc f870 	bl	8013484 <ucdr_deserialize_bool>
 80173a4:	7b63      	ldrb	r3, [r4, #13]
 80173a6:	4007      	ands	r7, r0
 80173a8:	b93b      	cbnz	r3, 80173ba <uxr_deserialize_CLIENT_Representation+0x66>
 80173aa:	f104 011c 	add.w	r1, r4, #28
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7fc f9b0 	bl	8013714 <ucdr_deserialize_uint16_t>
 80173b4:	4038      	ands	r0, r7
 80173b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173ba:	f104 0110 	add.w	r1, r4, #16
 80173be:	4628      	mov	r0, r5
 80173c0:	f7fc fbbe 	bl	8013b40 <ucdr_deserialize_uint32_t>
 80173c4:	6923      	ldr	r3, [r4, #16]
 80173c6:	2b01      	cmp	r3, #1
 80173c8:	d903      	bls.n	80173d2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80173ca:	2301      	movs	r3, #1
 80173cc:	75ab      	strb	r3, [r5, #22]
 80173ce:	2700      	movs	r7, #0
 80173d0:	e7eb      	b.n	80173aa <uxr_deserialize_CLIENT_Representation+0x56>
 80173d2:	b30b      	cbz	r3, 8017418 <uxr_deserialize_CLIENT_Representation+0xc4>
 80173d4:	2800      	cmp	r0, #0
 80173d6:	d0fa      	beq.n	80173ce <uxr_deserialize_CLIENT_Representation+0x7a>
 80173d8:	46a0      	mov	r8, r4
 80173da:	f04f 0900 	mov.w	r9, #0
 80173de:	e003      	b.n	80173e8 <uxr_deserialize_CLIENT_Representation+0x94>
 80173e0:	f108 0808 	add.w	r8, r8, #8
 80173e4:	2e00      	cmp	r6, #0
 80173e6:	d0f2      	beq.n	80173ce <uxr_deserialize_CLIENT_Representation+0x7a>
 80173e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80173ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80173f0:	4628      	mov	r0, r5
 80173f2:	f004 fd8b 	bl	801bf0c <ucdr_deserialize_string>
 80173f6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80173fa:	4606      	mov	r6, r0
 80173fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017400:	4628      	mov	r0, r5
 8017402:	f004 fd83 	bl	801bf0c <ucdr_deserialize_string>
 8017406:	6923      	ldr	r3, [r4, #16]
 8017408:	f109 0901 	add.w	r9, r9, #1
 801740c:	4006      	ands	r6, r0
 801740e:	4599      	cmp	r9, r3
 8017410:	b2f6      	uxtb	r6, r6
 8017412:	d3e5      	bcc.n	80173e0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8017414:	4037      	ands	r7, r6
 8017416:	e7c8      	b.n	80173aa <uxr_deserialize_CLIENT_Representation+0x56>
 8017418:	4007      	ands	r7, r0
 801741a:	e7c6      	b.n	80173aa <uxr_deserialize_CLIENT_Representation+0x56>

0801741c <uxr_serialize_AGENT_Representation>:
 801741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017420:	2204      	movs	r2, #4
 8017422:	460f      	mov	r7, r1
 8017424:	4605      	mov	r5, r0
 8017426:	f7fb fdfb 	bl	8013020 <ucdr_serialize_array_uint8_t>
 801742a:	2202      	movs	r2, #2
 801742c:	4604      	mov	r4, r0
 801742e:	1d39      	adds	r1, r7, #4
 8017430:	4628      	mov	r0, r5
 8017432:	f7fb fdf5 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017436:	4020      	ands	r0, r4
 8017438:	2202      	movs	r2, #2
 801743a:	b2c4      	uxtb	r4, r0
 801743c:	1db9      	adds	r1, r7, #6
 801743e:	4628      	mov	r0, r5
 8017440:	f7fb fdee 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017444:	7a39      	ldrb	r1, [r7, #8]
 8017446:	4004      	ands	r4, r0
 8017448:	4628      	mov	r0, r5
 801744a:	f7fc f805 	bl	8013458 <ucdr_serialize_bool>
 801744e:	7a3b      	ldrb	r3, [r7, #8]
 8017450:	ea00 0804 	and.w	r8, r0, r4
 8017454:	b913      	cbnz	r3, 801745c <uxr_serialize_AGENT_Representation+0x40>
 8017456:	4640      	mov	r0, r8
 8017458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801745c:	68f9      	ldr	r1, [r7, #12]
 801745e:	4628      	mov	r0, r5
 8017460:	f7fc fa44 	bl	80138ec <ucdr_serialize_uint32_t>
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	b303      	cbz	r3, 80174aa <uxr_serialize_AGENT_Representation+0x8e>
 8017468:	b1d0      	cbz	r0, 80174a0 <uxr_serialize_AGENT_Representation+0x84>
 801746a:	463e      	mov	r6, r7
 801746c:	f04f 0900 	mov.w	r9, #0
 8017470:	e001      	b.n	8017476 <uxr_serialize_AGENT_Representation+0x5a>
 8017472:	3608      	adds	r6, #8
 8017474:	b1a4      	cbz	r4, 80174a0 <uxr_serialize_AGENT_Representation+0x84>
 8017476:	6931      	ldr	r1, [r6, #16]
 8017478:	4628      	mov	r0, r5
 801747a:	f004 fd39 	bl	801bef0 <ucdr_serialize_string>
 801747e:	6971      	ldr	r1, [r6, #20]
 8017480:	4604      	mov	r4, r0
 8017482:	4628      	mov	r0, r5
 8017484:	f004 fd34 	bl	801bef0 <ucdr_serialize_string>
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	f109 0901 	add.w	r9, r9, #1
 801748e:	4004      	ands	r4, r0
 8017490:	4599      	cmp	r9, r3
 8017492:	b2e4      	uxtb	r4, r4
 8017494:	d3ed      	bcc.n	8017472 <uxr_serialize_AGENT_Representation+0x56>
 8017496:	ea08 0804 	and.w	r8, r8, r4
 801749a:	4640      	mov	r0, r8
 801749c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174a0:	f04f 0800 	mov.w	r8, #0
 80174a4:	4640      	mov	r0, r8
 80174a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174aa:	ea08 0800 	and.w	r8, r8, r0
 80174ae:	e7d2      	b.n	8017456 <uxr_serialize_AGENT_Representation+0x3a>

080174b0 <uxr_serialize_DATAWRITER_Representation>:
 80174b0:	b570      	push	{r4, r5, r6, lr}
 80174b2:	460d      	mov	r5, r1
 80174b4:	7809      	ldrb	r1, [r1, #0]
 80174b6:	4606      	mov	r6, r0
 80174b8:	f7fb fffc 	bl	80134b4 <ucdr_serialize_uint8_t>
 80174bc:	4604      	mov	r4, r0
 80174be:	b130      	cbz	r0, 80174ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 80174c0:	782b      	ldrb	r3, [r5, #0]
 80174c2:	2b02      	cmp	r3, #2
 80174c4:	d00c      	beq.n	80174e0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80174c6:	2b03      	cmp	r3, #3
 80174c8:	d010      	beq.n	80174ec <uxr_serialize_DATAWRITER_Representation+0x3c>
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	d008      	beq.n	80174e0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80174ce:	2202      	movs	r2, #2
 80174d0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80174d4:	4630      	mov	r0, r6
 80174d6:	f7fb fda3 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80174da:	4020      	ands	r0, r4
 80174dc:	b2c0      	uxtb	r0, r0
 80174de:	bd70      	pop	{r4, r5, r6, pc}
 80174e0:	6869      	ldr	r1, [r5, #4]
 80174e2:	4630      	mov	r0, r6
 80174e4:	f004 fd04 	bl	801bef0 <ucdr_serialize_string>
 80174e8:	4604      	mov	r4, r0
 80174ea:	e7f0      	b.n	80174ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 80174ec:	4629      	mov	r1, r5
 80174ee:	4630      	mov	r0, r6
 80174f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80174f4:	3104      	adds	r1, #4
 80174f6:	f7f7 f8ab 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 80174fa:	4604      	mov	r4, r0
 80174fc:	e7e7      	b.n	80174ce <uxr_serialize_DATAWRITER_Representation+0x1e>
 80174fe:	bf00      	nop

08017500 <uxr_serialize_ObjectVariant.part.0>:
 8017500:	b570      	push	{r4, r5, r6, lr}
 8017502:	780b      	ldrb	r3, [r1, #0]
 8017504:	3b01      	subs	r3, #1
 8017506:	460c      	mov	r4, r1
 8017508:	4605      	mov	r5, r0
 801750a:	2b0d      	cmp	r3, #13
 801750c:	d816      	bhi.n	801753c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801750e:	e8df f003 	tbb	[pc, r3]
 8017512:	0733      	.short	0x0733
 8017514:	07071717 	.word	0x07071717
 8017518:	0c150707 	.word	0x0c150707
 801751c:	4c510c0c 	.word	0x4c510c0c
 8017520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017524:	3104      	adds	r1, #4
 8017526:	f7ff bfc3 	b.w	80174b0 <uxr_serialize_DATAWRITER_Representation>
 801752a:	7909      	ldrb	r1, [r1, #4]
 801752c:	f7fb ffc2 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017530:	b300      	cbz	r0, 8017574 <uxr_serialize_ObjectVariant.part.0+0x74>
 8017532:	7923      	ldrb	r3, [r4, #4]
 8017534:	2b01      	cmp	r3, #1
 8017536:	d042      	beq.n	80175be <uxr_serialize_ObjectVariant.part.0+0xbe>
 8017538:	2b02      	cmp	r3, #2
 801753a:	d040      	beq.n	80175be <uxr_serialize_ObjectVariant.part.0+0xbe>
 801753c:	2001      	movs	r0, #1
 801753e:	bd70      	pop	{r4, r5, r6, pc}
 8017540:	7909      	ldrb	r1, [r1, #4]
 8017542:	f7fb ffb7 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017546:	4606      	mov	r6, r0
 8017548:	b158      	cbz	r0, 8017562 <uxr_serialize_ObjectVariant.part.0+0x62>
 801754a:	7923      	ldrb	r3, [r4, #4]
 801754c:	2b02      	cmp	r3, #2
 801754e:	d03c      	beq.n	80175ca <uxr_serialize_ObjectVariant.part.0+0xca>
 8017550:	2b03      	cmp	r3, #3
 8017552:	d106      	bne.n	8017562 <uxr_serialize_ObjectVariant.part.0+0x62>
 8017554:	68a2      	ldr	r2, [r4, #8]
 8017556:	f104 010c 	add.w	r1, r4, #12
 801755a:	4628      	mov	r0, r5
 801755c:	f7f7 f878 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 8017560:	4606      	mov	r6, r0
 8017562:	2202      	movs	r2, #2
 8017564:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8017568:	4628      	mov	r0, r5
 801756a:	f7fb fd59 	bl	8013020 <ucdr_serialize_array_uint8_t>
 801756e:	4030      	ands	r0, r6
 8017570:	b2c0      	uxtb	r0, r0
 8017572:	bd70      	pop	{r4, r5, r6, pc}
 8017574:	2000      	movs	r0, #0
 8017576:	bd70      	pop	{r4, r5, r6, pc}
 8017578:	7909      	ldrb	r1, [r1, #4]
 801757a:	f7fb ff9b 	bl	80134b4 <ucdr_serialize_uint8_t>
 801757e:	4606      	mov	r6, r0
 8017580:	b158      	cbz	r0, 801759a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017582:	7923      	ldrb	r3, [r4, #4]
 8017584:	2b02      	cmp	r3, #2
 8017586:	d003      	beq.n	8017590 <uxr_serialize_ObjectVariant.part.0+0x90>
 8017588:	2b03      	cmp	r3, #3
 801758a:	d024      	beq.n	80175d6 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801758c:	2b01      	cmp	r3, #1
 801758e:	d104      	bne.n	801759a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017590:	68a1      	ldr	r1, [r4, #8]
 8017592:	4628      	mov	r0, r5
 8017594:	f004 fcac 	bl	801bef0 <ucdr_serialize_string>
 8017598:	4606      	mov	r6, r0
 801759a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801759e:	4628      	mov	r0, r5
 80175a0:	f7fc fcb0 	bl	8013f04 <ucdr_serialize_int16_t>
 80175a4:	4030      	ands	r0, r6
 80175a6:	b2c0      	uxtb	r0, r0
 80175a8:	bd70      	pop	{r4, r5, r6, pc}
 80175aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175ae:	3104      	adds	r1, #4
 80175b0:	f7ff be76 	b.w	80172a0 <uxr_serialize_CLIENT_Representation>
 80175b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175b8:	3104      	adds	r1, #4
 80175ba:	f7ff bf2f 	b.w	801741c <uxr_serialize_AGENT_Representation>
 80175be:	68a1      	ldr	r1, [r4, #8]
 80175c0:	4628      	mov	r0, r5
 80175c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175c6:	f004 bc93 	b.w	801bef0 <ucdr_serialize_string>
 80175ca:	68a1      	ldr	r1, [r4, #8]
 80175cc:	4628      	mov	r0, r5
 80175ce:	f004 fc8f 	bl	801bef0 <ucdr_serialize_string>
 80175d2:	4606      	mov	r6, r0
 80175d4:	e7c5      	b.n	8017562 <uxr_serialize_ObjectVariant.part.0+0x62>
 80175d6:	68a2      	ldr	r2, [r4, #8]
 80175d8:	f104 010c 	add.w	r1, r4, #12
 80175dc:	4628      	mov	r0, r5
 80175de:	f7f7 f837 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 80175e2:	4606      	mov	r6, r0
 80175e4:	e7d9      	b.n	801759a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80175e6:	bf00      	nop

080175e8 <uxr_deserialize_DATAWRITER_Representation>:
 80175e8:	b570      	push	{r4, r5, r6, lr}
 80175ea:	4606      	mov	r6, r0
 80175ec:	460d      	mov	r5, r1
 80175ee:	f7fb ff77 	bl	80134e0 <ucdr_deserialize_uint8_t>
 80175f2:	4604      	mov	r4, r0
 80175f4:	b130      	cbz	r0, 8017604 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80175f6:	782b      	ldrb	r3, [r5, #0]
 80175f8:	2b02      	cmp	r3, #2
 80175fa:	d00c      	beq.n	8017616 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80175fc:	2b03      	cmp	r3, #3
 80175fe:	d012      	beq.n	8017626 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8017600:	2b01      	cmp	r3, #1
 8017602:	d008      	beq.n	8017616 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017604:	2202      	movs	r2, #2
 8017606:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801760a:	4630      	mov	r0, r6
 801760c:	f7fb fd6c 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017610:	4020      	ands	r0, r4
 8017612:	b2c0      	uxtb	r0, r0
 8017614:	bd70      	pop	{r4, r5, r6, pc}
 8017616:	6869      	ldr	r1, [r5, #4]
 8017618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801761c:	4630      	mov	r0, r6
 801761e:	f004 fc75 	bl	801bf0c <ucdr_deserialize_string>
 8017622:	4604      	mov	r4, r0
 8017624:	e7ee      	b.n	8017604 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017626:	1d2b      	adds	r3, r5, #4
 8017628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801762c:	f105 0108 	add.w	r1, r5, #8
 8017630:	4630      	mov	r0, r6
 8017632:	f7f7 f81f 	bl	800e674 <ucdr_deserialize_sequence_uint8_t>
 8017636:	4604      	mov	r4, r0
 8017638:	e7e4      	b.n	8017604 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801763a:	bf00      	nop

0801763c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801763c:	b570      	push	{r4, r5, r6, lr}
 801763e:	460d      	mov	r5, r1
 8017640:	7809      	ldrb	r1, [r1, #0]
 8017642:	4606      	mov	r6, r0
 8017644:	f7fb ff08 	bl	8013458 <ucdr_serialize_bool>
 8017648:	782b      	ldrb	r3, [r5, #0]
 801764a:	4604      	mov	r4, r0
 801764c:	b94b      	cbnz	r3, 8017662 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801764e:	7a29      	ldrb	r1, [r5, #8]
 8017650:	4630      	mov	r0, r6
 8017652:	f7fb ff01 	bl	8013458 <ucdr_serialize_bool>
 8017656:	7a2b      	ldrb	r3, [r5, #8]
 8017658:	4004      	ands	r4, r0
 801765a:	b2e4      	uxtb	r4, r4
 801765c:	b943      	cbnz	r3, 8017670 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801765e:	4620      	mov	r0, r4
 8017660:	bd70      	pop	{r4, r5, r6, pc}
 8017662:	6869      	ldr	r1, [r5, #4]
 8017664:	4630      	mov	r0, r6
 8017666:	f004 fc43 	bl	801bef0 <ucdr_serialize_string>
 801766a:	4004      	ands	r4, r0
 801766c:	b2e4      	uxtb	r4, r4
 801766e:	e7ee      	b.n	801764e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017670:	68e9      	ldr	r1, [r5, #12]
 8017672:	4630      	mov	r0, r6
 8017674:	f004 fc3c 	bl	801bef0 <ucdr_serialize_string>
 8017678:	4004      	ands	r4, r0
 801767a:	4620      	mov	r0, r4
 801767c:	bd70      	pop	{r4, r5, r6, pc}
 801767e:	bf00      	nop

08017680 <uxr_serialize_OBJK_Topic_Binary>:
 8017680:	b570      	push	{r4, r5, r6, lr}
 8017682:	460d      	mov	r5, r1
 8017684:	6809      	ldr	r1, [r1, #0]
 8017686:	4606      	mov	r6, r0
 8017688:	f004 fc32 	bl	801bef0 <ucdr_serialize_string>
 801768c:	7929      	ldrb	r1, [r5, #4]
 801768e:	4604      	mov	r4, r0
 8017690:	4630      	mov	r0, r6
 8017692:	f7fb fee1 	bl	8013458 <ucdr_serialize_bool>
 8017696:	792b      	ldrb	r3, [r5, #4]
 8017698:	4004      	ands	r4, r0
 801769a:	b2e4      	uxtb	r4, r4
 801769c:	b943      	cbnz	r3, 80176b0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801769e:	7b29      	ldrb	r1, [r5, #12]
 80176a0:	4630      	mov	r0, r6
 80176a2:	f7fb fed9 	bl	8013458 <ucdr_serialize_bool>
 80176a6:	7b2b      	ldrb	r3, [r5, #12]
 80176a8:	4004      	ands	r4, r0
 80176aa:	b93b      	cbnz	r3, 80176bc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80176ac:	4620      	mov	r0, r4
 80176ae:	bd70      	pop	{r4, r5, r6, pc}
 80176b0:	68a9      	ldr	r1, [r5, #8]
 80176b2:	4630      	mov	r0, r6
 80176b4:	f004 fc1c 	bl	801bef0 <ucdr_serialize_string>
 80176b8:	4004      	ands	r4, r0
 80176ba:	e7f0      	b.n	801769e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80176bc:	6929      	ldr	r1, [r5, #16]
 80176be:	4630      	mov	r0, r6
 80176c0:	f004 fc16 	bl	801bef0 <ucdr_serialize_string>
 80176c4:	4004      	ands	r4, r0
 80176c6:	b2e4      	uxtb	r4, r4
 80176c8:	4620      	mov	r0, r4
 80176ca:	bd70      	pop	{r4, r5, r6, pc}

080176cc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80176cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d0:	460c      	mov	r4, r1
 80176d2:	7809      	ldrb	r1, [r1, #0]
 80176d4:	4606      	mov	r6, r0
 80176d6:	f7fb febf 	bl	8013458 <ucdr_serialize_bool>
 80176da:	7823      	ldrb	r3, [r4, #0]
 80176dc:	4605      	mov	r5, r0
 80176de:	b96b      	cbnz	r3, 80176fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80176e0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80176e4:	4630      	mov	r0, r6
 80176e6:	f7fb feb7 	bl	8013458 <ucdr_serialize_bool>
 80176ea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80176ee:	4005      	ands	r5, r0
 80176f0:	b2ed      	uxtb	r5, r5
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d16a      	bne.n	80177cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80176f6:	4628      	mov	r0, r5
 80176f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176fc:	6861      	ldr	r1, [r4, #4]
 80176fe:	4630      	mov	r0, r6
 8017700:	f7fc f8f4 	bl	80138ec <ucdr_serialize_uint32_t>
 8017704:	6863      	ldr	r3, [r4, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d06c      	beq.n	80177e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 801770a:	2800      	cmp	r0, #0
 801770c:	d068      	beq.n	80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801770e:	68a1      	ldr	r1, [r4, #8]
 8017710:	4630      	mov	r0, r6
 8017712:	f004 fbed 	bl	801bef0 <ucdr_serialize_string>
 8017716:	6862      	ldr	r2, [r4, #4]
 8017718:	2a01      	cmp	r2, #1
 801771a:	d953      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801771c:	2800      	cmp	r0, #0
 801771e:	d05f      	beq.n	80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017720:	68e1      	ldr	r1, [r4, #12]
 8017722:	4630      	mov	r0, r6
 8017724:	f004 fbe4 	bl	801bef0 <ucdr_serialize_string>
 8017728:	6862      	ldr	r2, [r4, #4]
 801772a:	2a02      	cmp	r2, #2
 801772c:	d94a      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801772e:	2800      	cmp	r0, #0
 8017730:	d056      	beq.n	80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017732:	6921      	ldr	r1, [r4, #16]
 8017734:	4630      	mov	r0, r6
 8017736:	f004 fbdb 	bl	801bef0 <ucdr_serialize_string>
 801773a:	6862      	ldr	r2, [r4, #4]
 801773c:	2a03      	cmp	r2, #3
 801773e:	d941      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017740:	2800      	cmp	r0, #0
 8017742:	d04d      	beq.n	80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017744:	6961      	ldr	r1, [r4, #20]
 8017746:	4630      	mov	r0, r6
 8017748:	f004 fbd2 	bl	801bef0 <ucdr_serialize_string>
 801774c:	6862      	ldr	r2, [r4, #4]
 801774e:	2a04      	cmp	r2, #4
 8017750:	d938      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017752:	2800      	cmp	r0, #0
 8017754:	d044      	beq.n	80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017756:	69a1      	ldr	r1, [r4, #24]
 8017758:	4630      	mov	r0, r6
 801775a:	f004 fbc9 	bl	801bef0 <ucdr_serialize_string>
 801775e:	6862      	ldr	r2, [r4, #4]
 8017760:	2a05      	cmp	r2, #5
 8017762:	d92f      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017764:	2800      	cmp	r0, #0
 8017766:	d03b      	beq.n	80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017768:	69e1      	ldr	r1, [r4, #28]
 801776a:	4630      	mov	r0, r6
 801776c:	f004 fbc0 	bl	801bef0 <ucdr_serialize_string>
 8017770:	6862      	ldr	r2, [r4, #4]
 8017772:	2a06      	cmp	r2, #6
 8017774:	d926      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017776:	b398      	cbz	r0, 80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017778:	6a21      	ldr	r1, [r4, #32]
 801777a:	4630      	mov	r0, r6
 801777c:	f004 fbb8 	bl	801bef0 <ucdr_serialize_string>
 8017780:	6862      	ldr	r2, [r4, #4]
 8017782:	2a07      	cmp	r2, #7
 8017784:	d91e      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017786:	b358      	cbz	r0, 80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017788:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801778a:	4630      	mov	r0, r6
 801778c:	f004 fbb0 	bl	801bef0 <ucdr_serialize_string>
 8017790:	6862      	ldr	r2, [r4, #4]
 8017792:	2a08      	cmp	r2, #8
 8017794:	d916      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017796:	b318      	cbz	r0, 80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017798:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801779a:	4630      	mov	r0, r6
 801779c:	f004 fba8 	bl	801bef0 <ucdr_serialize_string>
 80177a0:	6862      	ldr	r2, [r4, #4]
 80177a2:	2a09      	cmp	r2, #9
 80177a4:	d90e      	bls.n	80177c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80177a6:	b1d8      	cbz	r0, 80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80177a8:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80177ac:	2709      	movs	r7, #9
 80177ae:	e000      	b.n	80177b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80177b0:	b1b0      	cbz	r0, 80177e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80177b2:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80177b6:	4630      	mov	r0, r6
 80177b8:	f004 fb9a 	bl	801bef0 <ucdr_serialize_string>
 80177bc:	6862      	ldr	r2, [r4, #4]
 80177be:	3701      	adds	r7, #1
 80177c0:	4297      	cmp	r7, r2
 80177c2:	d3f5      	bcc.n	80177b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80177c4:	ea05 0300 	and.w	r3, r5, r0
 80177c8:	b2dd      	uxtb	r5, r3
 80177ca:	e789      	b.n	80176e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80177cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80177ce:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7f6 ff3c 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 80177d8:	4005      	ands	r5, r0
 80177da:	4628      	mov	r0, r5
 80177dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177e0:	2500      	movs	r5, #0
 80177e2:	e77d      	b.n	80176e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80177e4:	4028      	ands	r0, r5
 80177e6:	b2c5      	uxtb	r5, r0
 80177e8:	e77a      	b.n	80176e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80177ea:	bf00      	nop

080177ec <uxr_serialize_OBJK_Publisher_Binary>:
 80177ec:	b570      	push	{r4, r5, r6, lr}
 80177ee:	460d      	mov	r5, r1
 80177f0:	7809      	ldrb	r1, [r1, #0]
 80177f2:	4606      	mov	r6, r0
 80177f4:	f7fb fe30 	bl	8013458 <ucdr_serialize_bool>
 80177f8:	782b      	ldrb	r3, [r5, #0]
 80177fa:	4604      	mov	r4, r0
 80177fc:	b94b      	cbnz	r3, 8017812 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80177fe:	7a29      	ldrb	r1, [r5, #8]
 8017800:	4630      	mov	r0, r6
 8017802:	f7fb fe29 	bl	8013458 <ucdr_serialize_bool>
 8017806:	7a2b      	ldrb	r3, [r5, #8]
 8017808:	4004      	ands	r4, r0
 801780a:	b2e4      	uxtb	r4, r4
 801780c:	b943      	cbnz	r3, 8017820 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801780e:	4620      	mov	r0, r4
 8017810:	bd70      	pop	{r4, r5, r6, pc}
 8017812:	6869      	ldr	r1, [r5, #4]
 8017814:	4630      	mov	r0, r6
 8017816:	f004 fb6b 	bl	801bef0 <ucdr_serialize_string>
 801781a:	4004      	ands	r4, r0
 801781c:	b2e4      	uxtb	r4, r4
 801781e:	e7ee      	b.n	80177fe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8017820:	f105 010c 	add.w	r1, r5, #12
 8017824:	4630      	mov	r0, r6
 8017826:	f7ff ff51 	bl	80176cc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801782a:	4004      	ands	r4, r0
 801782c:	4620      	mov	r0, r4
 801782e:	bd70      	pop	{r4, r5, r6, pc}

08017830 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8017830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017834:	460c      	mov	r4, r1
 8017836:	7809      	ldrb	r1, [r1, #0]
 8017838:	4606      	mov	r6, r0
 801783a:	f7fb fe0d 	bl	8013458 <ucdr_serialize_bool>
 801783e:	7823      	ldrb	r3, [r4, #0]
 8017840:	4605      	mov	r5, r0
 8017842:	b96b      	cbnz	r3, 8017860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8017844:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017848:	4630      	mov	r0, r6
 801784a:	f7fb fe05 	bl	8013458 <ucdr_serialize_bool>
 801784e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017852:	4005      	ands	r5, r0
 8017854:	b2ed      	uxtb	r5, r5
 8017856:	2b00      	cmp	r3, #0
 8017858:	d16a      	bne.n	8017930 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801785a:	4628      	mov	r0, r5
 801785c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017860:	6861      	ldr	r1, [r4, #4]
 8017862:	4630      	mov	r0, r6
 8017864:	f7fc f842 	bl	80138ec <ucdr_serialize_uint32_t>
 8017868:	6863      	ldr	r3, [r4, #4]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d06c      	beq.n	8017948 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 801786e:	2800      	cmp	r0, #0
 8017870:	d068      	beq.n	8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017872:	68a1      	ldr	r1, [r4, #8]
 8017874:	4630      	mov	r0, r6
 8017876:	f004 fb3b 	bl	801bef0 <ucdr_serialize_string>
 801787a:	6862      	ldr	r2, [r4, #4]
 801787c:	2a01      	cmp	r2, #1
 801787e:	d953      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017880:	2800      	cmp	r0, #0
 8017882:	d05f      	beq.n	8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017884:	68e1      	ldr	r1, [r4, #12]
 8017886:	4630      	mov	r0, r6
 8017888:	f004 fb32 	bl	801bef0 <ucdr_serialize_string>
 801788c:	6862      	ldr	r2, [r4, #4]
 801788e:	2a02      	cmp	r2, #2
 8017890:	d94a      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017892:	2800      	cmp	r0, #0
 8017894:	d056      	beq.n	8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017896:	6921      	ldr	r1, [r4, #16]
 8017898:	4630      	mov	r0, r6
 801789a:	f004 fb29 	bl	801bef0 <ucdr_serialize_string>
 801789e:	6862      	ldr	r2, [r4, #4]
 80178a0:	2a03      	cmp	r2, #3
 80178a2:	d941      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d04d      	beq.n	8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80178a8:	6961      	ldr	r1, [r4, #20]
 80178aa:	4630      	mov	r0, r6
 80178ac:	f004 fb20 	bl	801bef0 <ucdr_serialize_string>
 80178b0:	6862      	ldr	r2, [r4, #4]
 80178b2:	2a04      	cmp	r2, #4
 80178b4:	d938      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d044      	beq.n	8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80178ba:	69a1      	ldr	r1, [r4, #24]
 80178bc:	4630      	mov	r0, r6
 80178be:	f004 fb17 	bl	801bef0 <ucdr_serialize_string>
 80178c2:	6862      	ldr	r2, [r4, #4]
 80178c4:	2a05      	cmp	r2, #5
 80178c6:	d92f      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80178c8:	2800      	cmp	r0, #0
 80178ca:	d03b      	beq.n	8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80178cc:	69e1      	ldr	r1, [r4, #28]
 80178ce:	4630      	mov	r0, r6
 80178d0:	f004 fb0e 	bl	801bef0 <ucdr_serialize_string>
 80178d4:	6862      	ldr	r2, [r4, #4]
 80178d6:	2a06      	cmp	r2, #6
 80178d8:	d926      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80178da:	b398      	cbz	r0, 8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80178dc:	6a21      	ldr	r1, [r4, #32]
 80178de:	4630      	mov	r0, r6
 80178e0:	f004 fb06 	bl	801bef0 <ucdr_serialize_string>
 80178e4:	6862      	ldr	r2, [r4, #4]
 80178e6:	2a07      	cmp	r2, #7
 80178e8:	d91e      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80178ea:	b358      	cbz	r0, 8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80178ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80178ee:	4630      	mov	r0, r6
 80178f0:	f004 fafe 	bl	801bef0 <ucdr_serialize_string>
 80178f4:	6862      	ldr	r2, [r4, #4]
 80178f6:	2a08      	cmp	r2, #8
 80178f8:	d916      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80178fa:	b318      	cbz	r0, 8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80178fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80178fe:	4630      	mov	r0, r6
 8017900:	f004 faf6 	bl	801bef0 <ucdr_serialize_string>
 8017904:	6862      	ldr	r2, [r4, #4]
 8017906:	2a09      	cmp	r2, #9
 8017908:	d90e      	bls.n	8017928 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801790a:	b1d8      	cbz	r0, 8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801790c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8017910:	2709      	movs	r7, #9
 8017912:	e000      	b.n	8017916 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8017914:	b1b0      	cbz	r0, 8017944 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017916:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801791a:	4630      	mov	r0, r6
 801791c:	f004 fae8 	bl	801bef0 <ucdr_serialize_string>
 8017920:	6862      	ldr	r2, [r4, #4]
 8017922:	3701      	adds	r7, #1
 8017924:	4297      	cmp	r7, r2
 8017926:	d3f5      	bcc.n	8017914 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8017928:	ea05 0300 	and.w	r3, r5, r0
 801792c:	b2dd      	uxtb	r5, r3
 801792e:	e789      	b.n	8017844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017930:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017932:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017936:	4630      	mov	r0, r6
 8017938:	f7f6 fe8a 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 801793c:	4005      	ands	r5, r0
 801793e:	4628      	mov	r0, r5
 8017940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017944:	2500      	movs	r5, #0
 8017946:	e77d      	b.n	8017844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017948:	4028      	ands	r0, r5
 801794a:	b2c5      	uxtb	r5, r0
 801794c:	e77a      	b.n	8017844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801794e:	bf00      	nop

08017950 <uxr_serialize_OBJK_Subscriber_Binary>:
 8017950:	b570      	push	{r4, r5, r6, lr}
 8017952:	460d      	mov	r5, r1
 8017954:	7809      	ldrb	r1, [r1, #0]
 8017956:	4606      	mov	r6, r0
 8017958:	f7fb fd7e 	bl	8013458 <ucdr_serialize_bool>
 801795c:	782b      	ldrb	r3, [r5, #0]
 801795e:	4604      	mov	r4, r0
 8017960:	b94b      	cbnz	r3, 8017976 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8017962:	7a29      	ldrb	r1, [r5, #8]
 8017964:	4630      	mov	r0, r6
 8017966:	f7fb fd77 	bl	8013458 <ucdr_serialize_bool>
 801796a:	7a2b      	ldrb	r3, [r5, #8]
 801796c:	4004      	ands	r4, r0
 801796e:	b2e4      	uxtb	r4, r4
 8017970:	b943      	cbnz	r3, 8017984 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8017972:	4620      	mov	r0, r4
 8017974:	bd70      	pop	{r4, r5, r6, pc}
 8017976:	6869      	ldr	r1, [r5, #4]
 8017978:	4630      	mov	r0, r6
 801797a:	f004 fab9 	bl	801bef0 <ucdr_serialize_string>
 801797e:	4004      	ands	r4, r0
 8017980:	b2e4      	uxtb	r4, r4
 8017982:	e7ee      	b.n	8017962 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8017984:	f105 010c 	add.w	r1, r5, #12
 8017988:	4630      	mov	r0, r6
 801798a:	f7ff ff51 	bl	8017830 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801798e:	4004      	ands	r4, r0
 8017990:	4620      	mov	r0, r4
 8017992:	bd70      	pop	{r4, r5, r6, pc}

08017994 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8017994:	b570      	push	{r4, r5, r6, lr}
 8017996:	460d      	mov	r5, r1
 8017998:	8809      	ldrh	r1, [r1, #0]
 801799a:	4606      	mov	r6, r0
 801799c:	f7fb fdb6 	bl	801350c <ucdr_serialize_uint16_t>
 80179a0:	78a9      	ldrb	r1, [r5, #2]
 80179a2:	4604      	mov	r4, r0
 80179a4:	4630      	mov	r0, r6
 80179a6:	f7fb fd57 	bl	8013458 <ucdr_serialize_bool>
 80179aa:	78ab      	ldrb	r3, [r5, #2]
 80179ac:	4004      	ands	r4, r0
 80179ae:	b2e4      	uxtb	r4, r4
 80179b0:	b9b3      	cbnz	r3, 80179e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 80179b2:	79a9      	ldrb	r1, [r5, #6]
 80179b4:	4630      	mov	r0, r6
 80179b6:	f7fb fd4f 	bl	8013458 <ucdr_serialize_bool>
 80179ba:	79ab      	ldrb	r3, [r5, #6]
 80179bc:	4004      	ands	r4, r0
 80179be:	bb33      	cbnz	r3, 8017a0e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 80179c0:	7b29      	ldrb	r1, [r5, #12]
 80179c2:	4630      	mov	r0, r6
 80179c4:	f7fb fd48 	bl	8013458 <ucdr_serialize_bool>
 80179c8:	7b2b      	ldrb	r3, [r5, #12]
 80179ca:	4004      	ands	r4, r0
 80179cc:	b9c3      	cbnz	r3, 8017a00 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 80179ce:	7d29      	ldrb	r1, [r5, #20]
 80179d0:	4630      	mov	r0, r6
 80179d2:	f7fb fd41 	bl	8013458 <ucdr_serialize_bool>
 80179d6:	7d2b      	ldrb	r3, [r5, #20]
 80179d8:	4004      	ands	r4, r0
 80179da:	b93b      	cbnz	r3, 80179ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 80179dc:	4620      	mov	r0, r4
 80179de:	bd70      	pop	{r4, r5, r6, pc}
 80179e0:	88a9      	ldrh	r1, [r5, #4]
 80179e2:	4630      	mov	r0, r6
 80179e4:	f7fb fd92 	bl	801350c <ucdr_serialize_uint16_t>
 80179e8:	4004      	ands	r4, r0
 80179ea:	e7e2      	b.n	80179b2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80179ec:	69aa      	ldr	r2, [r5, #24]
 80179ee:	f105 011c 	add.w	r1, r5, #28
 80179f2:	4630      	mov	r0, r6
 80179f4:	f7f6 fe2c 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 80179f8:	4004      	ands	r4, r0
 80179fa:	b2e4      	uxtb	r4, r4
 80179fc:	4620      	mov	r0, r4
 80179fe:	bd70      	pop	{r4, r5, r6, pc}
 8017a00:	6929      	ldr	r1, [r5, #16]
 8017a02:	4630      	mov	r0, r6
 8017a04:	f7fb ff72 	bl	80138ec <ucdr_serialize_uint32_t>
 8017a08:	4004      	ands	r4, r0
 8017a0a:	b2e4      	uxtb	r4, r4
 8017a0c:	e7df      	b.n	80179ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8017a0e:	68a9      	ldr	r1, [r5, #8]
 8017a10:	4630      	mov	r0, r6
 8017a12:	f7fb ff6b 	bl	80138ec <ucdr_serialize_uint32_t>
 8017a16:	4004      	ands	r4, r0
 8017a18:	b2e4      	uxtb	r4, r4
 8017a1a:	e7d1      	b.n	80179c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08017a1c <uxr_serialize_OBJK_DataReader_Binary>:
 8017a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1e:	2202      	movs	r2, #2
 8017a20:	460c      	mov	r4, r1
 8017a22:	4606      	mov	r6, r0
 8017a24:	f7fb fafc 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017a28:	78a1      	ldrb	r1, [r4, #2]
 8017a2a:	4605      	mov	r5, r0
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f7fb fd13 	bl	8013458 <ucdr_serialize_bool>
 8017a32:	78a3      	ldrb	r3, [r4, #2]
 8017a34:	4005      	ands	r5, r0
 8017a36:	b2ed      	uxtb	r5, r5
 8017a38:	b90b      	cbnz	r3, 8017a3e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a3e:	f104 0108 	add.w	r1, r4, #8
 8017a42:	4630      	mov	r0, r6
 8017a44:	f7ff ffa6 	bl	8017994 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017a48:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017a4c:	4607      	mov	r7, r0
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f7fb fd02 	bl	8013458 <ucdr_serialize_bool>
 8017a54:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017a58:	4007      	ands	r7, r0
 8017a5a:	b2ff      	uxtb	r7, r7
 8017a5c:	b95b      	cbnz	r3, 8017a76 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8017a5e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8017a62:	4630      	mov	r0, r6
 8017a64:	f7fb fcf8 	bl	8013458 <ucdr_serialize_bool>
 8017a68:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017a6c:	4007      	ands	r7, r0
 8017a6e:	b94b      	cbnz	r3, 8017a84 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8017a70:	403d      	ands	r5, r7
 8017a72:	4628      	mov	r0, r5
 8017a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a76:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	f7fc f97a 	bl	8013d74 <ucdr_serialize_uint64_t>
 8017a80:	4007      	ands	r7, r0
 8017a82:	e7ec      	b.n	8017a5e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8017a84:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8017a86:	4630      	mov	r0, r6
 8017a88:	f004 fa32 	bl	801bef0 <ucdr_serialize_string>
 8017a8c:	4007      	ands	r7, r0
 8017a8e:	b2ff      	uxtb	r7, r7
 8017a90:	e7ee      	b.n	8017a70 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8017a92:	bf00      	nop

08017a94 <uxr_serialize_OBJK_DataWriter_Binary>:
 8017a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a96:	2202      	movs	r2, #2
 8017a98:	460d      	mov	r5, r1
 8017a9a:	4606      	mov	r6, r0
 8017a9c:	f7fb fac0 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017aa0:	78a9      	ldrb	r1, [r5, #2]
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	4630      	mov	r0, r6
 8017aa6:	f7fb fcd7 	bl	8013458 <ucdr_serialize_bool>
 8017aaa:	78ab      	ldrb	r3, [r5, #2]
 8017aac:	4004      	ands	r4, r0
 8017aae:	b2e4      	uxtb	r4, r4
 8017ab0:	b90b      	cbnz	r3, 8017ab6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ab6:	f105 0108 	add.w	r1, r5, #8
 8017aba:	4630      	mov	r0, r6
 8017abc:	f7ff ff6a 	bl	8017994 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017ac0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8017ac4:	4607      	mov	r7, r0
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	f7fb fcc6 	bl	8013458 <ucdr_serialize_bool>
 8017acc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017ad0:	4007      	ands	r7, r0
 8017ad2:	b2ff      	uxtb	r7, r7
 8017ad4:	b913      	cbnz	r3, 8017adc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8017ad6:	403c      	ands	r4, r7
 8017ad8:	4620      	mov	r0, r4
 8017ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017adc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8017ae0:	4630      	mov	r0, r6
 8017ae2:	f7fc f947 	bl	8013d74 <ucdr_serialize_uint64_t>
 8017ae6:	4007      	ands	r7, r0
 8017ae8:	e7f5      	b.n	8017ad6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8017aea:	bf00      	nop

08017aec <uxr_deserialize_ObjectVariant>:
 8017aec:	b570      	push	{r4, r5, r6, lr}
 8017aee:	4605      	mov	r5, r0
 8017af0:	460e      	mov	r6, r1
 8017af2:	f7fb fcf5 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017af6:	b168      	cbz	r0, 8017b14 <uxr_deserialize_ObjectVariant+0x28>
 8017af8:	7833      	ldrb	r3, [r6, #0]
 8017afa:	3b01      	subs	r3, #1
 8017afc:	4604      	mov	r4, r0
 8017afe:	2b0d      	cmp	r3, #13
 8017b00:	d809      	bhi.n	8017b16 <uxr_deserialize_ObjectVariant+0x2a>
 8017b02:	e8df f003 	tbb	[pc, r3]
 8017b06:	0a64      	.short	0x0a64
 8017b08:	0a0a2323 	.word	0x0a0a2323
 8017b0c:	10080a0a 	.word	0x10080a0a
 8017b10:	5e411010 	.word	0x5e411010
 8017b14:	2400      	movs	r4, #0
 8017b16:	4620      	mov	r0, r4
 8017b18:	bd70      	pop	{r4, r5, r6, pc}
 8017b1a:	1d31      	adds	r1, r6, #4
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b22:	f7ff bd61 	b.w	80175e8 <uxr_deserialize_DATAWRITER_Representation>
 8017b26:	1d31      	adds	r1, r6, #4
 8017b28:	4628      	mov	r0, r5
 8017b2a:	f7fb fcd9 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	d0f0      	beq.n	8017b14 <uxr_deserialize_ObjectVariant+0x28>
 8017b32:	7933      	ldrb	r3, [r6, #4]
 8017b34:	2b01      	cmp	r3, #1
 8017b36:	d001      	beq.n	8017b3c <uxr_deserialize_ObjectVariant+0x50>
 8017b38:	2b02      	cmp	r3, #2
 8017b3a:	d1ec      	bne.n	8017b16 <uxr_deserialize_ObjectVariant+0x2a>
 8017b3c:	68b1      	ldr	r1, [r6, #8]
 8017b3e:	4628      	mov	r0, r5
 8017b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b48:	f004 b9e0 	b.w	801bf0c <ucdr_deserialize_string>
 8017b4c:	1d31      	adds	r1, r6, #4
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f7fb fcc6 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017b54:	4604      	mov	r4, r0
 8017b56:	b170      	cbz	r0, 8017b76 <uxr_deserialize_ObjectVariant+0x8a>
 8017b58:	7933      	ldrb	r3, [r6, #4]
 8017b5a:	2b02      	cmp	r3, #2
 8017b5c:	d053      	beq.n	8017c06 <uxr_deserialize_ObjectVariant+0x11a>
 8017b5e:	2b03      	cmp	r3, #3
 8017b60:	d109      	bne.n	8017b76 <uxr_deserialize_ObjectVariant+0x8a>
 8017b62:	f106 0308 	add.w	r3, r6, #8
 8017b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017b6a:	f106 010c 	add.w	r1, r6, #12
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f7f6 fd80 	bl	800e674 <ucdr_deserialize_sequence_uint8_t>
 8017b74:	4604      	mov	r4, r0
 8017b76:	2202      	movs	r2, #2
 8017b78:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	f7fb fab3 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017b82:	4004      	ands	r4, r0
 8017b84:	b2e4      	uxtb	r4, r4
 8017b86:	e7c6      	b.n	8017b16 <uxr_deserialize_ObjectVariant+0x2a>
 8017b88:	2204      	movs	r2, #4
 8017b8a:	18b1      	adds	r1, r6, r2
 8017b8c:	4628      	mov	r0, r5
 8017b8e:	f7fb faab 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017b92:	2202      	movs	r2, #2
 8017b94:	f106 0108 	add.w	r1, r6, #8
 8017b98:	4604      	mov	r4, r0
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	f7fb faa4 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017ba0:	2202      	movs	r2, #2
 8017ba2:	4004      	ands	r4, r0
 8017ba4:	f106 010a 	add.w	r1, r6, #10
 8017ba8:	4628      	mov	r0, r5
 8017baa:	f7fb fa9d 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017bae:	b2e4      	uxtb	r4, r4
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	f106 010c 	add.w	r1, r6, #12
 8017bb6:	4628      	mov	r0, r5
 8017bb8:	401c      	ands	r4, r3
 8017bba:	f7fb fc63 	bl	8013484 <ucdr_deserialize_bool>
 8017bbe:	4004      	ands	r4, r0
 8017bc0:	e7a9      	b.n	8017b16 <uxr_deserialize_ObjectVariant+0x2a>
 8017bc2:	1d31      	adds	r1, r6, #4
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bca:	f7ff bbc3 	b.w	8017354 <uxr_deserialize_CLIENT_Representation>
 8017bce:	1d31      	adds	r1, r6, #4
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	f7fb fc85 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	b168      	cbz	r0, 8017bf6 <uxr_deserialize_ObjectVariant+0x10a>
 8017bda:	7933      	ldrb	r3, [r6, #4]
 8017bdc:	2b02      	cmp	r3, #2
 8017bde:	d003      	beq.n	8017be8 <uxr_deserialize_ObjectVariant+0xfc>
 8017be0:	2b03      	cmp	r3, #3
 8017be2:	d018      	beq.n	8017c16 <uxr_deserialize_ObjectVariant+0x12a>
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	d106      	bne.n	8017bf6 <uxr_deserialize_ObjectVariant+0x10a>
 8017be8:	68b1      	ldr	r1, [r6, #8]
 8017bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017bee:	4628      	mov	r0, r5
 8017bf0:	f004 f98c 	bl	801bf0c <ucdr_deserialize_string>
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	f7fc fa0c 	bl	8014018 <ucdr_deserialize_int16_t>
 8017c00:	4004      	ands	r4, r0
 8017c02:	b2e4      	uxtb	r4, r4
 8017c04:	e787      	b.n	8017b16 <uxr_deserialize_ObjectVariant+0x2a>
 8017c06:	68b1      	ldr	r1, [r6, #8]
 8017c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c0c:	4628      	mov	r0, r5
 8017c0e:	f004 f97d 	bl	801bf0c <ucdr_deserialize_string>
 8017c12:	4604      	mov	r4, r0
 8017c14:	e7af      	b.n	8017b76 <uxr_deserialize_ObjectVariant+0x8a>
 8017c16:	f106 0308 	add.w	r3, r6, #8
 8017c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c1e:	f106 010c 	add.w	r1, r6, #12
 8017c22:	4628      	mov	r0, r5
 8017c24:	f7f6 fd26 	bl	800e674 <ucdr_deserialize_sequence_uint8_t>
 8017c28:	4604      	mov	r4, r0
 8017c2a:	e7e4      	b.n	8017bf6 <uxr_deserialize_ObjectVariant+0x10a>

08017c2c <uxr_deserialize_BaseObjectRequest>:
 8017c2c:	b570      	push	{r4, r5, r6, lr}
 8017c2e:	2202      	movs	r2, #2
 8017c30:	4605      	mov	r5, r0
 8017c32:	460e      	mov	r6, r1
 8017c34:	f7fb fa58 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017c38:	2202      	movs	r2, #2
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	18b1      	adds	r1, r6, r2
 8017c3e:	4628      	mov	r0, r5
 8017c40:	f7fb fa52 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017c44:	4020      	ands	r0, r4
 8017c46:	b2c0      	uxtb	r0, r0
 8017c48:	bd70      	pop	{r4, r5, r6, pc}
 8017c4a:	bf00      	nop

08017c4c <uxr_serialize_ActivityInfoVariant>:
 8017c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c50:	460d      	mov	r5, r1
 8017c52:	7809      	ldrb	r1, [r1, #0]
 8017c54:	4606      	mov	r6, r0
 8017c56:	f7fb fc2d 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017c5a:	b130      	cbz	r0, 8017c6a <uxr_serialize_ActivityInfoVariant+0x1e>
 8017c5c:	782b      	ldrb	r3, [r5, #0]
 8017c5e:	2b06      	cmp	r3, #6
 8017c60:	d014      	beq.n	8017c8c <uxr_serialize_ActivityInfoVariant+0x40>
 8017c62:	2b0d      	cmp	r3, #13
 8017c64:	d019      	beq.n	8017c9a <uxr_serialize_ActivityInfoVariant+0x4e>
 8017c66:	2b05      	cmp	r3, #5
 8017c68:	d001      	beq.n	8017c6e <uxr_serialize_ActivityInfoVariant+0x22>
 8017c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c6e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8017c72:	4630      	mov	r0, r6
 8017c74:	f7fc f946 	bl	8013f04 <ucdr_serialize_int16_t>
 8017c78:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	4630      	mov	r0, r6
 8017c80:	f7fc f878 	bl	8013d74 <ucdr_serialize_uint64_t>
 8017c84:	4020      	ands	r0, r4
 8017c86:	b2c0      	uxtb	r0, r0
 8017c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c8c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8017c90:	4630      	mov	r0, r6
 8017c92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c96:	f7fc b935 	b.w	8013f04 <ucdr_serialize_int16_t>
 8017c9a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	f7fc f930 	bl	8013f04 <ucdr_serialize_int16_t>
 8017ca4:	68e9      	ldr	r1, [r5, #12]
 8017ca6:	4681      	mov	r9, r0
 8017ca8:	4630      	mov	r0, r6
 8017caa:	f7fb fe1f 	bl	80138ec <ucdr_serialize_uint32_t>
 8017cae:	68eb      	ldr	r3, [r5, #12]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d051      	beq.n	8017d58 <uxr_serialize_ActivityInfoVariant+0x10c>
 8017cb4:	b1e8      	cbz	r0, 8017cf2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8017cb6:	f105 0714 	add.w	r7, r5, #20
 8017cba:	f04f 0800 	mov.w	r8, #0
 8017cbe:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f7fb fbf6 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017cc8:	b198      	cbz	r0, 8017cf2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8017cca:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8017cce:	2b03      	cmp	r3, #3
 8017cd0:	d839      	bhi.n	8017d46 <uxr_serialize_ActivityInfoVariant+0xfa>
 8017cd2:	e8df f003 	tbb	[pc, r3]
 8017cd6:	1e2b      	.short	0x1e2b
 8017cd8:	0211      	.short	0x0211
 8017cda:	6839      	ldr	r1, [r7, #0]
 8017cdc:	4630      	mov	r0, r6
 8017cde:	f004 f907 	bl	801bef0 <ucdr_serialize_string>
 8017ce2:	68eb      	ldr	r3, [r5, #12]
 8017ce4:	f108 0801 	add.w	r8, r8, #1
 8017ce8:	4598      	cmp	r8, r3
 8017cea:	d231      	bcs.n	8017d50 <uxr_serialize_ActivityInfoVariant+0x104>
 8017cec:	3718      	adds	r7, #24
 8017cee:	2800      	cmp	r0, #0
 8017cf0:	d1e5      	bne.n	8017cbe <uxr_serialize_ActivityInfoVariant+0x72>
 8017cf2:	2000      	movs	r0, #0
 8017cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cf8:	2210      	movs	r2, #16
 8017cfa:	4639      	mov	r1, r7
 8017cfc:	4630      	mov	r0, r6
 8017cfe:	f7fb f98f 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017d02:	6939      	ldr	r1, [r7, #16]
 8017d04:	4604      	mov	r4, r0
 8017d06:	4630      	mov	r0, r6
 8017d08:	f7fb fdf0 	bl	80138ec <ucdr_serialize_uint32_t>
 8017d0c:	4020      	ands	r0, r4
 8017d0e:	b2c0      	uxtb	r0, r0
 8017d10:	e7e7      	b.n	8017ce2 <uxr_serialize_ActivityInfoVariant+0x96>
 8017d12:	2204      	movs	r2, #4
 8017d14:	4639      	mov	r1, r7
 8017d16:	4630      	mov	r0, r6
 8017d18:	f7fb f982 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017d1c:	88b9      	ldrh	r1, [r7, #4]
 8017d1e:	4604      	mov	r4, r0
 8017d20:	4630      	mov	r0, r6
 8017d22:	f7fb fbf3 	bl	801350c <ucdr_serialize_uint16_t>
 8017d26:	4020      	ands	r0, r4
 8017d28:	b2c0      	uxtb	r0, r0
 8017d2a:	e7da      	b.n	8017ce2 <uxr_serialize_ActivityInfoVariant+0x96>
 8017d2c:	2202      	movs	r2, #2
 8017d2e:	4639      	mov	r1, r7
 8017d30:	4630      	mov	r0, r6
 8017d32:	f7fb f975 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017d36:	78b9      	ldrb	r1, [r7, #2]
 8017d38:	4604      	mov	r4, r0
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f7fb fbba 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017d40:	4020      	ands	r0, r4
 8017d42:	b2c0      	uxtb	r0, r0
 8017d44:	e7cd      	b.n	8017ce2 <uxr_serialize_ActivityInfoVariant+0x96>
 8017d46:	68eb      	ldr	r3, [r5, #12]
 8017d48:	f108 0801 	add.w	r8, r8, #1
 8017d4c:	4598      	cmp	r8, r3
 8017d4e:	d308      	bcc.n	8017d62 <uxr_serialize_ActivityInfoVariant+0x116>
 8017d50:	ea09 0000 	and.w	r0, r9, r0
 8017d54:	b2c0      	uxtb	r0, r0
 8017d56:	e788      	b.n	8017c6a <uxr_serialize_ActivityInfoVariant+0x1e>
 8017d58:	ea09 0900 	and.w	r9, r9, r0
 8017d5c:	fa5f f089 	uxtb.w	r0, r9
 8017d60:	e783      	b.n	8017c6a <uxr_serialize_ActivityInfoVariant+0x1e>
 8017d62:	3718      	adds	r7, #24
 8017d64:	e7ab      	b.n	8017cbe <uxr_serialize_ActivityInfoVariant+0x72>
 8017d66:	bf00      	nop

08017d68 <uxr_deserialize_BaseObjectReply>:
 8017d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d6c:	2202      	movs	r2, #2
 8017d6e:	4606      	mov	r6, r0
 8017d70:	460f      	mov	r7, r1
 8017d72:	f7fb f9b9 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017d76:	2202      	movs	r2, #2
 8017d78:	18b9      	adds	r1, r7, r2
 8017d7a:	4605      	mov	r5, r0
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	f7fb f9b3 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017d82:	1d39      	adds	r1, r7, #4
 8017d84:	4680      	mov	r8, r0
 8017d86:	4630      	mov	r0, r6
 8017d88:	f7fb fbaa 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017d8c:	1d79      	adds	r1, r7, #5
 8017d8e:	4604      	mov	r4, r0
 8017d90:	4630      	mov	r0, r6
 8017d92:	f7fb fba5 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017d96:	ea05 0508 	and.w	r5, r5, r8
 8017d9a:	402c      	ands	r4, r5
 8017d9c:	4020      	ands	r0, r4
 8017d9e:	b2c0      	uxtb	r0, r0
 8017da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017da4 <uxr_serialize_ReadSpecification>:
 8017da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017da8:	460d      	mov	r5, r1
 8017daa:	7809      	ldrb	r1, [r1, #0]
 8017dac:	4606      	mov	r6, r0
 8017dae:	f7fb fb81 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017db2:	7869      	ldrb	r1, [r5, #1]
 8017db4:	4604      	mov	r4, r0
 8017db6:	4630      	mov	r0, r6
 8017db8:	f7fb fb7c 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017dbc:	78a9      	ldrb	r1, [r5, #2]
 8017dbe:	4004      	ands	r4, r0
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	f7fb fb49 	bl	8013458 <ucdr_serialize_bool>
 8017dc6:	78ab      	ldrb	r3, [r5, #2]
 8017dc8:	b2e4      	uxtb	r4, r4
 8017dca:	4004      	ands	r4, r0
 8017dcc:	b94b      	cbnz	r3, 8017de2 <uxr_serialize_ReadSpecification+0x3e>
 8017dce:	7a29      	ldrb	r1, [r5, #8]
 8017dd0:	4630      	mov	r0, r6
 8017dd2:	f7fb fb41 	bl	8013458 <ucdr_serialize_bool>
 8017dd6:	7a2b      	ldrb	r3, [r5, #8]
 8017dd8:	4004      	ands	r4, r0
 8017dda:	b943      	cbnz	r3, 8017dee <uxr_serialize_ReadSpecification+0x4a>
 8017ddc:	4620      	mov	r0, r4
 8017dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017de2:	6869      	ldr	r1, [r5, #4]
 8017de4:	4630      	mov	r0, r6
 8017de6:	f004 f883 	bl	801bef0 <ucdr_serialize_string>
 8017dea:	4004      	ands	r4, r0
 8017dec:	e7ef      	b.n	8017dce <uxr_serialize_ReadSpecification+0x2a>
 8017dee:	8969      	ldrh	r1, [r5, #10]
 8017df0:	4630      	mov	r0, r6
 8017df2:	f7fb fb8b 	bl	801350c <ucdr_serialize_uint16_t>
 8017df6:	89a9      	ldrh	r1, [r5, #12]
 8017df8:	4607      	mov	r7, r0
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	f7fb fb86 	bl	801350c <ucdr_serialize_uint16_t>
 8017e00:	89e9      	ldrh	r1, [r5, #14]
 8017e02:	4007      	ands	r7, r0
 8017e04:	4630      	mov	r0, r6
 8017e06:	f7fb fb81 	bl	801350c <ucdr_serialize_uint16_t>
 8017e0a:	8a29      	ldrh	r1, [r5, #16]
 8017e0c:	4680      	mov	r8, r0
 8017e0e:	4630      	mov	r0, r6
 8017e10:	f7fb fb7c 	bl	801350c <ucdr_serialize_uint16_t>
 8017e14:	b2ff      	uxtb	r7, r7
 8017e16:	ea04 0507 	and.w	r5, r4, r7
 8017e1a:	ea05 0508 	and.w	r5, r5, r8
 8017e1e:	ea00 0405 	and.w	r4, r0, r5
 8017e22:	4620      	mov	r0, r4
 8017e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e28 <uxr_serialize_CREATE_CLIENT_Payload>:
 8017e28:	f7ff ba3a 	b.w	80172a0 <uxr_serialize_CLIENT_Representation>

08017e2c <uxr_serialize_CREATE_Payload>:
 8017e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e2e:	2202      	movs	r2, #2
 8017e30:	4606      	mov	r6, r0
 8017e32:	460d      	mov	r5, r1
 8017e34:	f7fb f8f4 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017e38:	2202      	movs	r2, #2
 8017e3a:	18a9      	adds	r1, r5, r2
 8017e3c:	4604      	mov	r4, r0
 8017e3e:	4630      	mov	r0, r6
 8017e40:	f7fb f8ee 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017e44:	7929      	ldrb	r1, [r5, #4]
 8017e46:	4607      	mov	r7, r0
 8017e48:	4630      	mov	r0, r6
 8017e4a:	f7fb fb33 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017e4e:	b170      	cbz	r0, 8017e6e <uxr_serialize_CREATE_Payload+0x42>
 8017e50:	792b      	ldrb	r3, [r5, #4]
 8017e52:	403c      	ands	r4, r7
 8017e54:	3b01      	subs	r3, #1
 8017e56:	b2e4      	uxtb	r4, r4
 8017e58:	2b0d      	cmp	r3, #13
 8017e5a:	d809      	bhi.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017e5c:	e8df f003 	tbb	[pc, r3]
 8017e60:	23230a3e 	.word	0x23230a3e
 8017e64:	0a0a0a0a 	.word	0x0a0a0a0a
 8017e68:	12121208 	.word	0x12121208
 8017e6c:	5f58      	.short	0x5f58
 8017e6e:	2400      	movs	r4, #0
 8017e70:	4620      	mov	r0, r4
 8017e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e74:	f105 0108 	add.w	r1, r5, #8
 8017e78:	4630      	mov	r0, r6
 8017e7a:	f7ff fb19 	bl	80174b0 <uxr_serialize_DATAWRITER_Representation>
 8017e7e:	4004      	ands	r4, r0
 8017e80:	4620      	mov	r0, r4
 8017e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e84:	7a29      	ldrb	r1, [r5, #8]
 8017e86:	4630      	mov	r0, r6
 8017e88:	f7fb fb14 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	d0ee      	beq.n	8017e6e <uxr_serialize_CREATE_Payload+0x42>
 8017e90:	7a2b      	ldrb	r3, [r5, #8]
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d001      	beq.n	8017e9a <uxr_serialize_CREATE_Payload+0x6e>
 8017e96:	2b02      	cmp	r3, #2
 8017e98:	d1ea      	bne.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017e9a:	68e9      	ldr	r1, [r5, #12]
 8017e9c:	4630      	mov	r0, r6
 8017e9e:	f004 f827 	bl	801bef0 <ucdr_serialize_string>
 8017ea2:	4004      	ands	r4, r0
 8017ea4:	e7e4      	b.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017ea6:	7a29      	ldrb	r1, [r5, #8]
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f7fb fb03 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017eae:	4607      	mov	r7, r0
 8017eb0:	b158      	cbz	r0, 8017eca <uxr_serialize_CREATE_Payload+0x9e>
 8017eb2:	7a2b      	ldrb	r3, [r5, #8]
 8017eb4:	2b02      	cmp	r3, #2
 8017eb6:	d039      	beq.n	8017f2c <uxr_serialize_CREATE_Payload+0x100>
 8017eb8:	2b03      	cmp	r3, #3
 8017eba:	d106      	bne.n	8017eca <uxr_serialize_CREATE_Payload+0x9e>
 8017ebc:	68ea      	ldr	r2, [r5, #12]
 8017ebe:	f105 0110 	add.w	r1, r5, #16
 8017ec2:	4630      	mov	r0, r6
 8017ec4:	f7f6 fbc4 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 8017ec8:	4607      	mov	r7, r0
 8017eca:	2202      	movs	r2, #2
 8017ecc:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f7fb f8a5 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017ed6:	4038      	ands	r0, r7
 8017ed8:	4004      	ands	r4, r0
 8017eda:	e7c9      	b.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017edc:	7a29      	ldrb	r1, [r5, #8]
 8017ede:	4630      	mov	r0, r6
 8017ee0:	f7fb fae8 	bl	80134b4 <ucdr_serialize_uint8_t>
 8017ee4:	4607      	mov	r7, r0
 8017ee6:	b158      	cbz	r0, 8017f00 <uxr_serialize_CREATE_Payload+0xd4>
 8017ee8:	7a2b      	ldrb	r3, [r5, #8]
 8017eea:	2b02      	cmp	r3, #2
 8017eec:	d003      	beq.n	8017ef6 <uxr_serialize_CREATE_Payload+0xca>
 8017eee:	2b03      	cmp	r3, #3
 8017ef0:	d022      	beq.n	8017f38 <uxr_serialize_CREATE_Payload+0x10c>
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d104      	bne.n	8017f00 <uxr_serialize_CREATE_Payload+0xd4>
 8017ef6:	68e9      	ldr	r1, [r5, #12]
 8017ef8:	4630      	mov	r0, r6
 8017efa:	f003 fff9 	bl	801bef0 <ucdr_serialize_string>
 8017efe:	4607      	mov	r7, r0
 8017f00:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8017f04:	4630      	mov	r0, r6
 8017f06:	f7fb fffd 	bl	8013f04 <ucdr_serialize_int16_t>
 8017f0a:	4038      	ands	r0, r7
 8017f0c:	4004      	ands	r4, r0
 8017f0e:	e7af      	b.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017f10:	f105 0108 	add.w	r1, r5, #8
 8017f14:	4630      	mov	r0, r6
 8017f16:	f7ff fa81 	bl	801741c <uxr_serialize_AGENT_Representation>
 8017f1a:	4004      	ands	r4, r0
 8017f1c:	e7a8      	b.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017f1e:	f105 0108 	add.w	r1, r5, #8
 8017f22:	4630      	mov	r0, r6
 8017f24:	f7ff f9bc 	bl	80172a0 <uxr_serialize_CLIENT_Representation>
 8017f28:	4004      	ands	r4, r0
 8017f2a:	e7a1      	b.n	8017e70 <uxr_serialize_CREATE_Payload+0x44>
 8017f2c:	68e9      	ldr	r1, [r5, #12]
 8017f2e:	4630      	mov	r0, r6
 8017f30:	f003 ffde 	bl	801bef0 <ucdr_serialize_string>
 8017f34:	4607      	mov	r7, r0
 8017f36:	e7c8      	b.n	8017eca <uxr_serialize_CREATE_Payload+0x9e>
 8017f38:	68ea      	ldr	r2, [r5, #12]
 8017f3a:	f105 0110 	add.w	r1, r5, #16
 8017f3e:	4630      	mov	r0, r6
 8017f40:	f7f6 fb86 	bl	800e650 <ucdr_serialize_sequence_uint8_t>
 8017f44:	4607      	mov	r7, r0
 8017f46:	e7db      	b.n	8017f00 <uxr_serialize_CREATE_Payload+0xd4>

08017f48 <uxr_deserialize_GET_INFO_Payload>:
 8017f48:	b570      	push	{r4, r5, r6, lr}
 8017f4a:	2202      	movs	r2, #2
 8017f4c:	4605      	mov	r5, r0
 8017f4e:	460e      	mov	r6, r1
 8017f50:	f7fb f8ca 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017f54:	2202      	movs	r2, #2
 8017f56:	18b1      	adds	r1, r6, r2
 8017f58:	4604      	mov	r4, r0
 8017f5a:	4628      	mov	r0, r5
 8017f5c:	f7fb f8c4 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017f60:	1d31      	adds	r1, r6, #4
 8017f62:	4004      	ands	r4, r0
 8017f64:	4628      	mov	r0, r5
 8017f66:	f7fb fdeb 	bl	8013b40 <ucdr_deserialize_uint32_t>
 8017f6a:	b2e4      	uxtb	r4, r4
 8017f6c:	4020      	ands	r0, r4
 8017f6e:	bd70      	pop	{r4, r5, r6, pc}

08017f70 <uxr_serialize_DELETE_Payload>:
 8017f70:	b570      	push	{r4, r5, r6, lr}
 8017f72:	2202      	movs	r2, #2
 8017f74:	4605      	mov	r5, r0
 8017f76:	460e      	mov	r6, r1
 8017f78:	f7fb f852 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017f7c:	2202      	movs	r2, #2
 8017f7e:	4604      	mov	r4, r0
 8017f80:	18b1      	adds	r1, r6, r2
 8017f82:	4628      	mov	r0, r5
 8017f84:	f7fb f84c 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8017f88:	4020      	ands	r0, r4
 8017f8a:	b2c0      	uxtb	r0, r0
 8017f8c:	bd70      	pop	{r4, r5, r6, pc}
 8017f8e:	bf00      	nop

08017f90 <uxr_deserialize_STATUS_AGENT_Payload>:
 8017f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f94:	4605      	mov	r5, r0
 8017f96:	460e      	mov	r6, r1
 8017f98:	f7fb faa2 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017f9c:	1c71      	adds	r1, r6, #1
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	4628      	mov	r0, r5
 8017fa2:	f7fb fa9d 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8017fa6:	2204      	movs	r2, #4
 8017fa8:	18b1      	adds	r1, r6, r2
 8017faa:	4681      	mov	r9, r0
 8017fac:	4628      	mov	r0, r5
 8017fae:	f7fb f89b 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017fb2:	f106 0108 	add.w	r1, r6, #8
 8017fb6:	4680      	mov	r8, r0
 8017fb8:	2202      	movs	r2, #2
 8017fba:	4628      	mov	r0, r5
 8017fbc:	f7fb f894 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017fc0:	2202      	movs	r2, #2
 8017fc2:	f106 010a 	add.w	r1, r6, #10
 8017fc6:	4607      	mov	r7, r0
 8017fc8:	4628      	mov	r0, r5
 8017fca:	f7fb f88d 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017fce:	ea04 0409 	and.w	r4, r4, r9
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	f106 010c 	add.w	r1, r6, #12
 8017fd8:	4628      	mov	r0, r5
 8017fda:	b2e4      	uxtb	r4, r4
 8017fdc:	461d      	mov	r5, r3
 8017fde:	ea04 0408 	and.w	r4, r4, r8
 8017fe2:	f7fb fa4f 	bl	8013484 <ucdr_deserialize_bool>
 8017fe6:	4027      	ands	r7, r4
 8017fe8:	403d      	ands	r5, r7
 8017fea:	4028      	ands	r0, r5
 8017fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017ff0 <uxr_deserialize_STATUS_Payload>:
 8017ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff4:	2202      	movs	r2, #2
 8017ff6:	4606      	mov	r6, r0
 8017ff8:	460f      	mov	r7, r1
 8017ffa:	f7fb f875 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8017ffe:	2202      	movs	r2, #2
 8018000:	18b9      	adds	r1, r7, r2
 8018002:	4605      	mov	r5, r0
 8018004:	4630      	mov	r0, r6
 8018006:	f7fb f86f 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801800a:	1d39      	adds	r1, r7, #4
 801800c:	4680      	mov	r8, r0
 801800e:	4630      	mov	r0, r6
 8018010:	f7fb fa66 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8018014:	1d79      	adds	r1, r7, #5
 8018016:	4604      	mov	r4, r0
 8018018:	4630      	mov	r0, r6
 801801a:	f7fb fa61 	bl	80134e0 <ucdr_deserialize_uint8_t>
 801801e:	ea05 0508 	and.w	r5, r5, r8
 8018022:	402c      	ands	r4, r5
 8018024:	4020      	ands	r0, r4
 8018026:	b2c0      	uxtb	r0, r0
 8018028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801802c <uxr_serialize_INFO_Payload>:
 801802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018030:	2202      	movs	r2, #2
 8018032:	460c      	mov	r4, r1
 8018034:	4605      	mov	r5, r0
 8018036:	f7fa fff3 	bl	8013020 <ucdr_serialize_array_uint8_t>
 801803a:	2202      	movs	r2, #2
 801803c:	18a1      	adds	r1, r4, r2
 801803e:	4680      	mov	r8, r0
 8018040:	4628      	mov	r0, r5
 8018042:	f7fa ffed 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8018046:	7921      	ldrb	r1, [r4, #4]
 8018048:	4607      	mov	r7, r0
 801804a:	4628      	mov	r0, r5
 801804c:	f7fb fa32 	bl	80134b4 <ucdr_serialize_uint8_t>
 8018050:	7961      	ldrb	r1, [r4, #5]
 8018052:	4606      	mov	r6, r0
 8018054:	4628      	mov	r0, r5
 8018056:	f7fb fa2d 	bl	80134b4 <ucdr_serialize_uint8_t>
 801805a:	ea08 0807 	and.w	r8, r8, r7
 801805e:	ea06 0608 	and.w	r6, r6, r8
 8018062:	ea00 0706 	and.w	r7, r0, r6
 8018066:	7a21      	ldrb	r1, [r4, #8]
 8018068:	4628      	mov	r0, r5
 801806a:	f7fb f9f5 	bl	8013458 <ucdr_serialize_bool>
 801806e:	7a23      	ldrb	r3, [r4, #8]
 8018070:	b2ff      	uxtb	r7, r7
 8018072:	4606      	mov	r6, r0
 8018074:	b96b      	cbnz	r3, 8018092 <uxr_serialize_INFO_Payload+0x66>
 8018076:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801807a:	4628      	mov	r0, r5
 801807c:	f7fb f9ec 	bl	8013458 <ucdr_serialize_bool>
 8018080:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8018084:	4030      	ands	r0, r6
 8018086:	b2c6      	uxtb	r6, r0
 8018088:	b983      	cbnz	r3, 80180ac <uxr_serialize_INFO_Payload+0x80>
 801808a:	ea06 0007 	and.w	r0, r6, r7
 801808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018092:	7b21      	ldrb	r1, [r4, #12]
 8018094:	4628      	mov	r0, r5
 8018096:	f7fb fa0d 	bl	80134b4 <ucdr_serialize_uint8_t>
 801809a:	b188      	cbz	r0, 80180c0 <uxr_serialize_INFO_Payload+0x94>
 801809c:	f104 010c 	add.w	r1, r4, #12
 80180a0:	4628      	mov	r0, r5
 80180a2:	f7ff fa2d 	bl	8017500 <uxr_serialize_ObjectVariant.part.0>
 80180a6:	4030      	ands	r0, r6
 80180a8:	b2c6      	uxtb	r6, r0
 80180aa:	e7e4      	b.n	8018076 <uxr_serialize_INFO_Payload+0x4a>
 80180ac:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80180b0:	4628      	mov	r0, r5
 80180b2:	f7ff fdcb 	bl	8017c4c <uxr_serialize_ActivityInfoVariant>
 80180b6:	4006      	ands	r6, r0
 80180b8:	ea06 0007 	and.w	r0, r6, r7
 80180bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180c0:	4606      	mov	r6, r0
 80180c2:	e7d8      	b.n	8018076 <uxr_serialize_INFO_Payload+0x4a>

080180c4 <uxr_serialize_READ_DATA_Payload>:
 80180c4:	b570      	push	{r4, r5, r6, lr}
 80180c6:	2202      	movs	r2, #2
 80180c8:	4605      	mov	r5, r0
 80180ca:	460e      	mov	r6, r1
 80180cc:	f7fa ffa8 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80180d0:	2202      	movs	r2, #2
 80180d2:	18b1      	adds	r1, r6, r2
 80180d4:	4604      	mov	r4, r0
 80180d6:	4628      	mov	r0, r5
 80180d8:	f7fa ffa2 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80180dc:	1d31      	adds	r1, r6, #4
 80180de:	4004      	ands	r4, r0
 80180e0:	4628      	mov	r0, r5
 80180e2:	f7ff fe5f 	bl	8017da4 <uxr_serialize_ReadSpecification>
 80180e6:	b2e4      	uxtb	r4, r4
 80180e8:	4020      	ands	r0, r4
 80180ea:	bd70      	pop	{r4, r5, r6, pc}

080180ec <uxr_serialize_WRITE_DATA_Payload_Data>:
 80180ec:	b570      	push	{r4, r5, r6, lr}
 80180ee:	2202      	movs	r2, #2
 80180f0:	4605      	mov	r5, r0
 80180f2:	460e      	mov	r6, r1
 80180f4:	f7fa ff94 	bl	8013020 <ucdr_serialize_array_uint8_t>
 80180f8:	2202      	movs	r2, #2
 80180fa:	4604      	mov	r4, r0
 80180fc:	18b1      	adds	r1, r6, r2
 80180fe:	4628      	mov	r0, r5
 8018100:	f7fa ff8e 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8018104:	4020      	ands	r0, r4
 8018106:	b2c0      	uxtb	r0, r0
 8018108:	bd70      	pop	{r4, r5, r6, pc}
 801810a:	bf00      	nop

0801810c <uxr_serialize_ACKNACK_Payload>:
 801810c:	b570      	push	{r4, r5, r6, lr}
 801810e:	460c      	mov	r4, r1
 8018110:	460e      	mov	r6, r1
 8018112:	f834 1b02 	ldrh.w	r1, [r4], #2
 8018116:	4605      	mov	r5, r0
 8018118:	f7fb f9f8 	bl	801350c <ucdr_serialize_uint16_t>
 801811c:	2202      	movs	r2, #2
 801811e:	4621      	mov	r1, r4
 8018120:	4604      	mov	r4, r0
 8018122:	4628      	mov	r0, r5
 8018124:	f7fa ff7c 	bl	8013020 <ucdr_serialize_array_uint8_t>
 8018128:	7931      	ldrb	r1, [r6, #4]
 801812a:	4004      	ands	r4, r0
 801812c:	4628      	mov	r0, r5
 801812e:	f7fb f9c1 	bl	80134b4 <ucdr_serialize_uint8_t>
 8018132:	b2e4      	uxtb	r4, r4
 8018134:	4020      	ands	r0, r4
 8018136:	bd70      	pop	{r4, r5, r6, pc}

08018138 <uxr_deserialize_ACKNACK_Payload>:
 8018138:	b570      	push	{r4, r5, r6, lr}
 801813a:	4605      	mov	r5, r0
 801813c:	460e      	mov	r6, r1
 801813e:	f7fb fae9 	bl	8013714 <ucdr_deserialize_uint16_t>
 8018142:	2202      	movs	r2, #2
 8018144:	18b1      	adds	r1, r6, r2
 8018146:	4604      	mov	r4, r0
 8018148:	4628      	mov	r0, r5
 801814a:	f7fa ffcd 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801814e:	1d31      	adds	r1, r6, #4
 8018150:	4004      	ands	r4, r0
 8018152:	4628      	mov	r0, r5
 8018154:	f7fb f9c4 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8018158:	b2e4      	uxtb	r4, r4
 801815a:	4020      	ands	r0, r4
 801815c:	bd70      	pop	{r4, r5, r6, pc}
 801815e:	bf00      	nop

08018160 <uxr_serialize_HEARTBEAT_Payload>:
 8018160:	b570      	push	{r4, r5, r6, lr}
 8018162:	460d      	mov	r5, r1
 8018164:	8809      	ldrh	r1, [r1, #0]
 8018166:	4606      	mov	r6, r0
 8018168:	f7fb f9d0 	bl	801350c <ucdr_serialize_uint16_t>
 801816c:	8869      	ldrh	r1, [r5, #2]
 801816e:	4604      	mov	r4, r0
 8018170:	4630      	mov	r0, r6
 8018172:	f7fb f9cb 	bl	801350c <ucdr_serialize_uint16_t>
 8018176:	7929      	ldrb	r1, [r5, #4]
 8018178:	4004      	ands	r4, r0
 801817a:	4630      	mov	r0, r6
 801817c:	f7fb f99a 	bl	80134b4 <ucdr_serialize_uint8_t>
 8018180:	b2e4      	uxtb	r4, r4
 8018182:	4020      	ands	r0, r4
 8018184:	bd70      	pop	{r4, r5, r6, pc}
 8018186:	bf00      	nop

08018188 <uxr_deserialize_HEARTBEAT_Payload>:
 8018188:	b570      	push	{r4, r5, r6, lr}
 801818a:	4605      	mov	r5, r0
 801818c:	460e      	mov	r6, r1
 801818e:	f7fb fac1 	bl	8013714 <ucdr_deserialize_uint16_t>
 8018192:	1cb1      	adds	r1, r6, #2
 8018194:	4604      	mov	r4, r0
 8018196:	4628      	mov	r0, r5
 8018198:	f7fb fabc 	bl	8013714 <ucdr_deserialize_uint16_t>
 801819c:	1d31      	adds	r1, r6, #4
 801819e:	4004      	ands	r4, r0
 80181a0:	4628      	mov	r0, r5
 80181a2:	f7fb f99d 	bl	80134e0 <ucdr_deserialize_uint8_t>
 80181a6:	b2e4      	uxtb	r4, r4
 80181a8:	4020      	ands	r0, r4
 80181aa:	bd70      	pop	{r4, r5, r6, pc}

080181ac <uxr_serialize_TIMESTAMP_Payload>:
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	460d      	mov	r5, r1
 80181b0:	6809      	ldr	r1, [r1, #0]
 80181b2:	4606      	mov	r6, r0
 80181b4:	f7fb ffac 	bl	8014110 <ucdr_serialize_int32_t>
 80181b8:	6869      	ldr	r1, [r5, #4]
 80181ba:	4604      	mov	r4, r0
 80181bc:	4630      	mov	r0, r6
 80181be:	f7fb fb95 	bl	80138ec <ucdr_serialize_uint32_t>
 80181c2:	4020      	ands	r0, r4
 80181c4:	b2c0      	uxtb	r0, r0
 80181c6:	bd70      	pop	{r4, r5, r6, pc}

080181c8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181cc:	4605      	mov	r5, r0
 80181ce:	460e      	mov	r6, r1
 80181d0:	f7fc f838 	bl	8014244 <ucdr_deserialize_int32_t>
 80181d4:	1d31      	adds	r1, r6, #4
 80181d6:	4607      	mov	r7, r0
 80181d8:	4628      	mov	r0, r5
 80181da:	f7fb fcb1 	bl	8013b40 <ucdr_deserialize_uint32_t>
 80181de:	f106 0108 	add.w	r1, r6, #8
 80181e2:	4680      	mov	r8, r0
 80181e4:	4628      	mov	r0, r5
 80181e6:	f7fc f82d 	bl	8014244 <ucdr_deserialize_int32_t>
 80181ea:	f106 010c 	add.w	r1, r6, #12
 80181ee:	4604      	mov	r4, r0
 80181f0:	4628      	mov	r0, r5
 80181f2:	f7fb fca5 	bl	8013b40 <ucdr_deserialize_uint32_t>
 80181f6:	ea07 0708 	and.w	r7, r7, r8
 80181fa:	403c      	ands	r4, r7
 80181fc:	f106 0110 	add.w	r1, r6, #16
 8018200:	4004      	ands	r4, r0
 8018202:	4628      	mov	r0, r5
 8018204:	f7fc f81e 	bl	8014244 <ucdr_deserialize_int32_t>
 8018208:	f106 0114 	add.w	r1, r6, #20
 801820c:	4607      	mov	r7, r0
 801820e:	4628      	mov	r0, r5
 8018210:	f7fb fc96 	bl	8013b40 <ucdr_deserialize_uint32_t>
 8018214:	b2e4      	uxtb	r4, r4
 8018216:	403c      	ands	r4, r7
 8018218:	4020      	ands	r0, r4
 801821a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801821e:	bf00      	nop

08018220 <uxr_serialize_SampleIdentity>:
 8018220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018224:	220c      	movs	r2, #12
 8018226:	4604      	mov	r4, r0
 8018228:	460d      	mov	r5, r1
 801822a:	f7fa fef9 	bl	8013020 <ucdr_serialize_array_uint8_t>
 801822e:	2203      	movs	r2, #3
 8018230:	f105 010c 	add.w	r1, r5, #12
 8018234:	4680      	mov	r8, r0
 8018236:	4620      	mov	r0, r4
 8018238:	f7fa fef2 	bl	8013020 <ucdr_serialize_array_uint8_t>
 801823c:	7be9      	ldrb	r1, [r5, #15]
 801823e:	4681      	mov	r9, r0
 8018240:	4620      	mov	r0, r4
 8018242:	f7fb f937 	bl	80134b4 <ucdr_serialize_uint8_t>
 8018246:	6929      	ldr	r1, [r5, #16]
 8018248:	4607      	mov	r7, r0
 801824a:	4620      	mov	r0, r4
 801824c:	f7fb ff60 	bl	8014110 <ucdr_serialize_int32_t>
 8018250:	6969      	ldr	r1, [r5, #20]
 8018252:	4606      	mov	r6, r0
 8018254:	4620      	mov	r0, r4
 8018256:	f7fb fb49 	bl	80138ec <ucdr_serialize_uint32_t>
 801825a:	ea08 0809 	and.w	r8, r8, r9
 801825e:	ea07 0708 	and.w	r7, r7, r8
 8018262:	403e      	ands	r6, r7
 8018264:	4030      	ands	r0, r6
 8018266:	b2c0      	uxtb	r0, r0
 8018268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801826c <uxr_deserialize_SampleIdentity>:
 801826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018270:	220c      	movs	r2, #12
 8018272:	4604      	mov	r4, r0
 8018274:	460d      	mov	r5, r1
 8018276:	f7fa ff37 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801827a:	2203      	movs	r2, #3
 801827c:	f105 010c 	add.w	r1, r5, #12
 8018280:	4680      	mov	r8, r0
 8018282:	4620      	mov	r0, r4
 8018284:	f7fa ff30 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 8018288:	f105 010f 	add.w	r1, r5, #15
 801828c:	4681      	mov	r9, r0
 801828e:	4620      	mov	r0, r4
 8018290:	f7fb f926 	bl	80134e0 <ucdr_deserialize_uint8_t>
 8018294:	f105 0110 	add.w	r1, r5, #16
 8018298:	4607      	mov	r7, r0
 801829a:	4620      	mov	r0, r4
 801829c:	f7fb ffd2 	bl	8014244 <ucdr_deserialize_int32_t>
 80182a0:	f105 0114 	add.w	r1, r5, #20
 80182a4:	4606      	mov	r6, r0
 80182a6:	4620      	mov	r0, r4
 80182a8:	f7fb fc4a 	bl	8013b40 <ucdr_deserialize_uint32_t>
 80182ac:	ea08 0809 	and.w	r8, r8, r9
 80182b0:	ea07 0708 	and.w	r7, r7, r8
 80182b4:	403e      	ands	r6, r7
 80182b6:	4030      	ands	r0, r6
 80182b8:	b2c0      	uxtb	r0, r0
 80182ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182be:	bf00      	nop

080182c0 <rcl_client_get_rmw_handle>:
 80182c0:	b118      	cbz	r0, 80182ca <rcl_client_get_rmw_handle+0xa>
 80182c2:	6800      	ldr	r0, [r0, #0]
 80182c4:	b108      	cbz	r0, 80182ca <rcl_client_get_rmw_handle+0xa>
 80182c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80182ca:	4770      	bx	lr

080182cc <rcl_send_request>:
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d048      	beq.n	8018362 <rcl_send_request+0x96>
 80182d0:	b570      	push	{r4, r5, r6, lr}
 80182d2:	4604      	mov	r4, r0
 80182d4:	6800      	ldr	r0, [r0, #0]
 80182d6:	b08a      	sub	sp, #40	@ 0x28
 80182d8:	b1c0      	cbz	r0, 801830c <rcl_send_request+0x40>
 80182da:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80182de:	b1ab      	cbz	r3, 801830c <rcl_send_request+0x40>
 80182e0:	460e      	mov	r6, r1
 80182e2:	b1b9      	cbz	r1, 8018314 <rcl_send_request+0x48>
 80182e4:	4615      	mov	r5, r2
 80182e6:	b1aa      	cbz	r2, 8018314 <rcl_send_request+0x48>
 80182e8:	2105      	movs	r1, #5
 80182ea:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80182ee:	f7f8 fa09 	bl	8010704 <__atomic_load_8>
 80182f2:	6823      	ldr	r3, [r4, #0]
 80182f4:	e9c5 0100 	strd	r0, r1, [r5]
 80182f8:	462a      	mov	r2, r5
 80182fa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80182fe:	4631      	mov	r1, r6
 8018300:	f003 f918 	bl	801b534 <rmw_send_request>
 8018304:	b148      	cbz	r0, 801831a <rcl_send_request+0x4e>
 8018306:	2001      	movs	r0, #1
 8018308:	b00a      	add	sp, #40	@ 0x28
 801830a:	bd70      	pop	{r4, r5, r6, pc}
 801830c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8018310:	b00a      	add	sp, #40	@ 0x28
 8018312:	bd70      	pop	{r4, r5, r6, pc}
 8018314:	200b      	movs	r0, #11
 8018316:	b00a      	add	sp, #40	@ 0x28
 8018318:	bd70      	pop	{r4, r5, r6, pc}
 801831a:	6820      	ldr	r0, [r4, #0]
 801831c:	2305      	movs	r3, #5
 801831e:	9300      	str	r3, [sp, #0]
 8018320:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018324:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8018328:	f7f8 fa58 	bl	80107dc <__atomic_exchange_8>
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8018332:	b1a2      	cbz	r2, 801835e <rcl_send_request+0x92>
 8018334:	a905      	add	r1, sp, #20
 8018336:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801833a:	f003 f839 	bl	801b3b0 <rmw_get_gid_for_client>
 801833e:	4601      	mov	r1, r0
 8018340:	b990      	cbnz	r0, 8018368 <rcl_send_request+0x9c>
 8018342:	6822      	ldr	r2, [r4, #0]
 8018344:	ab06      	add	r3, sp, #24
 8018346:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 801834a:	9302      	str	r3, [sp, #8]
 801834c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018350:	4632      	mov	r2, r6
 8018352:	e9cd 4500 	strd	r4, r5, [sp]
 8018356:	f000 fdc3 	bl	8018ee0 <rcl_send_service_event_message>
 801835a:	2800      	cmp	r0, #0
 801835c:	d1d4      	bne.n	8018308 <rcl_send_request+0x3c>
 801835e:	2000      	movs	r0, #0
 8018360:	e7d2      	b.n	8018308 <rcl_send_request+0x3c>
 8018362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8018366:	4770      	bx	lr
 8018368:	f000 f878 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 801836c:	e7cc      	b.n	8018308 <rcl_send_request+0x3c>
 801836e:	bf00      	nop

08018370 <rcl_take_response>:
 8018370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018372:	468e      	mov	lr, r1
 8018374:	460c      	mov	r4, r1
 8018376:	4617      	mov	r7, r2
 8018378:	4605      	mov	r5, r0
 801837a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801837e:	b095      	sub	sp, #84	@ 0x54
 8018380:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8018384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018388:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801838c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018390:	2d00      	cmp	r5, #0
 8018392:	d044      	beq.n	801841e <rcl_take_response+0xae>
 8018394:	682b      	ldr	r3, [r5, #0]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d041      	beq.n	801841e <rcl_take_response+0xae>
 801839a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801839e:	2800      	cmp	r0, #0
 80183a0:	d03d      	beq.n	801841e <rcl_take_response+0xae>
 80183a2:	2f00      	cmp	r7, #0
 80183a4:	d03e      	beq.n	8018424 <rcl_take_response+0xb4>
 80183a6:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8018440 <rcl_take_response+0xd0>
 80183aa:	2300      	movs	r3, #0
 80183ac:	f88d 3013 	strb.w	r3, [sp, #19]
 80183b0:	463a      	mov	r2, r7
 80183b2:	f10d 0313 	add.w	r3, sp, #19
 80183b6:	a90a      	add	r1, sp, #40	@ 0x28
 80183b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80183bc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80183c0:	f003 f9b8 	bl	801b734 <rmw_take_response>
 80183c4:	4606      	mov	r6, r0
 80183c6:	bb78      	cbnz	r0, 8018428 <rcl_take_response+0xb8>
 80183c8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80183cc:	b373      	cbz	r3, 801842c <rcl_take_response+0xbc>
 80183ce:	682b      	ldr	r3, [r5, #0]
 80183d0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80183d4:	b1aa      	cbz	r2, 8018402 <rcl_take_response+0x92>
 80183d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80183da:	a905      	add	r1, sp, #20
 80183dc:	f002 ffe8 	bl	801b3b0 <rmw_get_gid_for_client>
 80183e0:	bb38      	cbnz	r0, 8018432 <rcl_take_response+0xc2>
 80183e2:	682b      	ldr	r3, [r5, #0]
 80183e4:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80183e8:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80183ec:	ab06      	add	r3, sp, #24
 80183ee:	ed8d 7b00 	vstr	d7, [sp]
 80183f2:	463a      	mov	r2, r7
 80183f4:	9302      	str	r3, [sp, #8]
 80183f6:	2103      	movs	r1, #3
 80183f8:	f000 fd72 	bl	8018ee0 <rcl_send_service_event_message>
 80183fc:	2800      	cmp	r0, #0
 80183fe:	bf18      	it	ne
 8018400:	4606      	movne	r6, r0
 8018402:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8018406:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801840a:	46a4      	mov	ip, r4
 801840c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018410:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018414:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018418:	4630      	mov	r0, r6
 801841a:	b015      	add	sp, #84	@ 0x54
 801841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801841e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8018422:	e7ee      	b.n	8018402 <rcl_take_response+0x92>
 8018424:	260b      	movs	r6, #11
 8018426:	e7ec      	b.n	8018402 <rcl_take_response+0x92>
 8018428:	2601      	movs	r6, #1
 801842a:	e7ea      	b.n	8018402 <rcl_take_response+0x92>
 801842c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8018430:	e7e7      	b.n	8018402 <rcl_take_response+0x92>
 8018432:	f000 f813 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 8018436:	4606      	mov	r6, r0
 8018438:	e7e3      	b.n	8018402 <rcl_take_response+0x92>
 801843a:	bf00      	nop
 801843c:	f3af 8000 	nop.w
	...

08018448 <rcl_client_is_valid>:
 8018448:	b130      	cbz	r0, 8018458 <rcl_client_is_valid+0x10>
 801844a:	6800      	ldr	r0, [r0, #0]
 801844c:	b120      	cbz	r0, 8018458 <rcl_client_is_valid+0x10>
 801844e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018452:	3800      	subs	r0, #0
 8018454:	bf18      	it	ne
 8018456:	2001      	movne	r0, #1
 8018458:	4770      	bx	lr
 801845a:	bf00      	nop

0801845c <rcl_convert_rmw_ret_to_rcl_ret>:
 801845c:	280b      	cmp	r0, #11
 801845e:	dc0d      	bgt.n	801847c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8018460:	2800      	cmp	r0, #0
 8018462:	db09      	blt.n	8018478 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018464:	280b      	cmp	r0, #11
 8018466:	d807      	bhi.n	8018478 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018468:	e8df f000 	tbb	[pc, r0]
 801846c:	07060607 	.word	0x07060607
 8018470:	06060606 	.word	0x06060606
 8018474:	07070606 	.word	0x07070606
 8018478:	2001      	movs	r0, #1
 801847a:	4770      	bx	lr
 801847c:	28cb      	cmp	r0, #203	@ 0xcb
 801847e:	bf14      	ite	ne
 8018480:	2001      	movne	r0, #1
 8018482:	20cb      	moveq	r0, #203	@ 0xcb
 8018484:	4770      	bx	lr
 8018486:	bf00      	nop

08018488 <rcl_get_zero_initialized_context>:
 8018488:	4a03      	ldr	r2, [pc, #12]	@ (8018498 <rcl_get_zero_initialized_context+0x10>)
 801848a:	4603      	mov	r3, r0
 801848c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018490:	e883 0003 	stmia.w	r3, {r0, r1}
 8018494:	4618      	mov	r0, r3
 8018496:	4770      	bx	lr
 8018498:	0802104c 	.word	0x0802104c

0801849c <rcl_context_is_valid>:
 801849c:	b118      	cbz	r0, 80184a6 <rcl_context_is_valid+0xa>
 801849e:	6840      	ldr	r0, [r0, #4]
 80184a0:	3800      	subs	r0, #0
 80184a2:	bf18      	it	ne
 80184a4:	2001      	movne	r0, #1
 80184a6:	4770      	bx	lr

080184a8 <__cleanup_context>:
 80184a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184ac:	4606      	mov	r6, r0
 80184ae:	6800      	ldr	r0, [r0, #0]
 80184b0:	2300      	movs	r3, #0
 80184b2:	6073      	str	r3, [r6, #4]
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d042      	beq.n	801853e <__cleanup_context+0x96>
 80184b8:	6943      	ldr	r3, [r0, #20]
 80184ba:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80184be:	6907      	ldr	r7, [r0, #16]
 80184c0:	b39b      	cbz	r3, 801852a <__cleanup_context+0x82>
 80184c2:	3014      	adds	r0, #20
 80184c4:	f7f6 f97e 	bl	800e7c4 <rcl_init_options_fini>
 80184c8:	4680      	mov	r8, r0
 80184ca:	2800      	cmp	r0, #0
 80184cc:	d144      	bne.n	8018558 <__cleanup_context+0xb0>
 80184ce:	6830      	ldr	r0, [r6, #0]
 80184d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80184d2:	b123      	cbz	r3, 80184de <__cleanup_context+0x36>
 80184d4:	3028      	adds	r0, #40	@ 0x28
 80184d6:	f7f8 ff67 	bl	80113a8 <rmw_context_fini>
 80184da:	bbb8      	cbnz	r0, 801854c <__cleanup_context+0xa4>
 80184dc:	6830      	ldr	r0, [r6, #0]
 80184de:	6a03      	ldr	r3, [r0, #32]
 80184e0:	b1db      	cbz	r3, 801851a <__cleanup_context+0x72>
 80184e2:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80184e6:	2a01      	cmp	r2, #1
 80184e8:	f17c 0100 	sbcs.w	r1, ip, #0
 80184ec:	db11      	blt.n	8018512 <__cleanup_context+0x6a>
 80184ee:	2400      	movs	r4, #0
 80184f0:	4625      	mov	r5, r4
 80184f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80184f6:	4639      	mov	r1, r7
 80184f8:	b1c8      	cbz	r0, 801852e <__cleanup_context+0x86>
 80184fa:	47c8      	blx	r9
 80184fc:	6833      	ldr	r3, [r6, #0]
 80184fe:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8018502:	3401      	adds	r4, #1
 8018504:	f145 0500 	adc.w	r5, r5, #0
 8018508:	4294      	cmp	r4, r2
 801850a:	eb75 010c 	sbcs.w	r1, r5, ip
 801850e:	6a1b      	ldr	r3, [r3, #32]
 8018510:	dbef      	blt.n	80184f2 <__cleanup_context+0x4a>
 8018512:	4618      	mov	r0, r3
 8018514:	4639      	mov	r1, r7
 8018516:	47c8      	blx	r9
 8018518:	6830      	ldr	r0, [r6, #0]
 801851a:	4639      	mov	r1, r7
 801851c:	47c8      	blx	r9
 801851e:	2300      	movs	r3, #0
 8018520:	e9c6 3300 	strd	r3, r3, [r6]
 8018524:	4640      	mov	r0, r8
 8018526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801852a:	4698      	mov	r8, r3
 801852c:	e7d0      	b.n	80184d0 <__cleanup_context+0x28>
 801852e:	3401      	adds	r4, #1
 8018530:	f145 0500 	adc.w	r5, r5, #0
 8018534:	4294      	cmp	r4, r2
 8018536:	eb75 010c 	sbcs.w	r1, r5, ip
 801853a:	dbda      	blt.n	80184f2 <__cleanup_context+0x4a>
 801853c:	e7e9      	b.n	8018512 <__cleanup_context+0x6a>
 801853e:	4680      	mov	r8, r0
 8018540:	2300      	movs	r3, #0
 8018542:	e9c6 3300 	strd	r3, r3, [r6]
 8018546:	4640      	mov	r0, r8
 8018548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801854c:	f1b8 0f00 	cmp.w	r8, #0
 8018550:	d005      	beq.n	801855e <__cleanup_context+0xb6>
 8018552:	f7f8 f9ad 	bl	80108b0 <rcutils_reset_error>
 8018556:	e7c1      	b.n	80184dc <__cleanup_context+0x34>
 8018558:	f7f8 f9aa 	bl	80108b0 <rcutils_reset_error>
 801855c:	e7b7      	b.n	80184ce <__cleanup_context+0x26>
 801855e:	f7ff ff7d 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 8018562:	4680      	mov	r8, r0
 8018564:	e7f5      	b.n	8018552 <__cleanup_context+0xaa>
 8018566:	bf00      	nop

08018568 <rcl_context_fini>:
 8018568:	b178      	cbz	r0, 801858a <rcl_context_fini+0x22>
 801856a:	b510      	push	{r4, lr}
 801856c:	4604      	mov	r4, r0
 801856e:	6800      	ldr	r0, [r0, #0]
 8018570:	b150      	cbz	r0, 8018588 <rcl_context_fini+0x20>
 8018572:	6863      	ldr	r3, [r4, #4]
 8018574:	b93b      	cbnz	r3, 8018586 <rcl_context_fini+0x1e>
 8018576:	f7f8 f8b7 	bl	80106e8 <rcutils_allocator_is_valid>
 801857a:	b120      	cbz	r0, 8018586 <rcl_context_fini+0x1e>
 801857c:	4620      	mov	r0, r4
 801857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018582:	f7ff bf91 	b.w	80184a8 <__cleanup_context>
 8018586:	200b      	movs	r0, #11
 8018588:	bd10      	pop	{r4, pc}
 801858a:	200b      	movs	r0, #11
 801858c:	4770      	bx	lr
 801858e:	bf00      	nop

08018590 <rcl_get_zero_initialized_guard_condition>:
 8018590:	4a03      	ldr	r2, [pc, #12]	@ (80185a0 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018592:	4603      	mov	r3, r0
 8018594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018598:	e883 0003 	stmia.w	r3, {r0, r1}
 801859c:	4618      	mov	r0, r3
 801859e:	4770      	bx	lr
 80185a0:	08021054 	.word	0x08021054

080185a4 <rcl_guard_condition_init>:
 80185a4:	b082      	sub	sp, #8
 80185a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185a8:	b087      	sub	sp, #28
 80185aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80185ac:	e884 000c 	stmia.w	r4, {r2, r3}
 80185b0:	46a6      	mov	lr, r4
 80185b2:	460d      	mov	r5, r1
 80185b4:	4604      	mov	r4, r0
 80185b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80185ba:	f10d 0c04 	add.w	ip, sp, #4
 80185be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185c2:	f8de 3000 	ldr.w	r3, [lr]
 80185c6:	f8cc 3000 	str.w	r3, [ip]
 80185ca:	a801      	add	r0, sp, #4
 80185cc:	f7f8 f88c 	bl	80106e8 <rcutils_allocator_is_valid>
 80185d0:	b338      	cbz	r0, 8018622 <rcl_guard_condition_init+0x7e>
 80185d2:	b334      	cbz	r4, 8018622 <rcl_guard_condition_init+0x7e>
 80185d4:	6866      	ldr	r6, [r4, #4]
 80185d6:	b9ee      	cbnz	r6, 8018614 <rcl_guard_condition_init+0x70>
 80185d8:	b31d      	cbz	r5, 8018622 <rcl_guard_condition_init+0x7e>
 80185da:	4628      	mov	r0, r5
 80185dc:	f7ff ff5e 	bl	801849c <rcl_context_is_valid>
 80185e0:	b308      	cbz	r0, 8018626 <rcl_guard_condition_init+0x82>
 80185e2:	9b01      	ldr	r3, [sp, #4]
 80185e4:	9905      	ldr	r1, [sp, #20]
 80185e6:	201c      	movs	r0, #28
 80185e8:	4798      	blx	r3
 80185ea:	4607      	mov	r7, r0
 80185ec:	6060      	str	r0, [r4, #4]
 80185ee:	b310      	cbz	r0, 8018636 <rcl_guard_condition_init+0x92>
 80185f0:	6828      	ldr	r0, [r5, #0]
 80185f2:	3028      	adds	r0, #40	@ 0x28
 80185f4:	f002 ff00 	bl	801b3f8 <rmw_create_guard_condition>
 80185f8:	6038      	str	r0, [r7, #0]
 80185fa:	6860      	ldr	r0, [r4, #4]
 80185fc:	6807      	ldr	r7, [r0, #0]
 80185fe:	b1a7      	cbz	r7, 801862a <rcl_guard_condition_init+0x86>
 8018600:	2301      	movs	r3, #1
 8018602:	ac01      	add	r4, sp, #4
 8018604:	7103      	strb	r3, [r0, #4]
 8018606:	f100 0708 	add.w	r7, r0, #8
 801860a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801860c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801860e:	6823      	ldr	r3, [r4, #0]
 8018610:	603b      	str	r3, [r7, #0]
 8018612:	e000      	b.n	8018616 <rcl_guard_condition_init+0x72>
 8018614:	2664      	movs	r6, #100	@ 0x64
 8018616:	4630      	mov	r0, r6
 8018618:	b007      	add	sp, #28
 801861a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801861e:	b002      	add	sp, #8
 8018620:	4770      	bx	lr
 8018622:	260b      	movs	r6, #11
 8018624:	e7f7      	b.n	8018616 <rcl_guard_condition_init+0x72>
 8018626:	2665      	movs	r6, #101	@ 0x65
 8018628:	e7f5      	b.n	8018616 <rcl_guard_condition_init+0x72>
 801862a:	9b02      	ldr	r3, [sp, #8]
 801862c:	9905      	ldr	r1, [sp, #20]
 801862e:	4798      	blx	r3
 8018630:	2601      	movs	r6, #1
 8018632:	6067      	str	r7, [r4, #4]
 8018634:	e7ef      	b.n	8018616 <rcl_guard_condition_init+0x72>
 8018636:	260a      	movs	r6, #10
 8018638:	e7ed      	b.n	8018616 <rcl_guard_condition_init+0x72>
 801863a:	bf00      	nop

0801863c <rcl_guard_condition_init_from_rmw>:
 801863c:	b082      	sub	sp, #8
 801863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018642:	b086      	sub	sp, #24
 8018644:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018648:	4604      	mov	r4, r0
 801864a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801864e:	460e      	mov	r6, r1
 8018650:	4617      	mov	r7, r2
 8018652:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018656:	f10d 0e04 	add.w	lr, sp, #4
 801865a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801865e:	f8dc 3000 	ldr.w	r3, [ip]
 8018662:	f8ce 3000 	str.w	r3, [lr]
 8018666:	a801      	add	r0, sp, #4
 8018668:	f7f8 f83e 	bl	80106e8 <rcutils_allocator_is_valid>
 801866c:	b350      	cbz	r0, 80186c4 <rcl_guard_condition_init_from_rmw+0x88>
 801866e:	b34c      	cbz	r4, 80186c4 <rcl_guard_condition_init_from_rmw+0x88>
 8018670:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018674:	f1b8 0f00 	cmp.w	r8, #0
 8018678:	d11e      	bne.n	80186b8 <rcl_guard_condition_init_from_rmw+0x7c>
 801867a:	b31f      	cbz	r7, 80186c4 <rcl_guard_condition_init_from_rmw+0x88>
 801867c:	4638      	mov	r0, r7
 801867e:	f7ff ff0d 	bl	801849c <rcl_context_is_valid>
 8018682:	b328      	cbz	r0, 80186d0 <rcl_guard_condition_init_from_rmw+0x94>
 8018684:	9b01      	ldr	r3, [sp, #4]
 8018686:	9905      	ldr	r1, [sp, #20]
 8018688:	201c      	movs	r0, #28
 801868a:	4798      	blx	r3
 801868c:	4605      	mov	r5, r0
 801868e:	6060      	str	r0, [r4, #4]
 8018690:	b358      	cbz	r0, 80186ea <rcl_guard_condition_init_from_rmw+0xae>
 8018692:	b1fe      	cbz	r6, 80186d4 <rcl_guard_condition_init_from_rmw+0x98>
 8018694:	6006      	str	r6, [r0, #0]
 8018696:	f880 8004 	strb.w	r8, [r0, #4]
 801869a:	ac01      	add	r4, sp, #4
 801869c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801869e:	f105 0c08 	add.w	ip, r5, #8
 80186a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186a6:	6823      	ldr	r3, [r4, #0]
 80186a8:	f8cc 3000 	str.w	r3, [ip]
 80186ac:	2000      	movs	r0, #0
 80186ae:	b006      	add	sp, #24
 80186b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186b4:	b002      	add	sp, #8
 80186b6:	4770      	bx	lr
 80186b8:	2064      	movs	r0, #100	@ 0x64
 80186ba:	b006      	add	sp, #24
 80186bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186c0:	b002      	add	sp, #8
 80186c2:	4770      	bx	lr
 80186c4:	200b      	movs	r0, #11
 80186c6:	b006      	add	sp, #24
 80186c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186cc:	b002      	add	sp, #8
 80186ce:	4770      	bx	lr
 80186d0:	2065      	movs	r0, #101	@ 0x65
 80186d2:	e7f2      	b.n	80186ba <rcl_guard_condition_init_from_rmw+0x7e>
 80186d4:	6838      	ldr	r0, [r7, #0]
 80186d6:	3028      	adds	r0, #40	@ 0x28
 80186d8:	f002 fe8e 	bl	801b3f8 <rmw_create_guard_condition>
 80186dc:	6028      	str	r0, [r5, #0]
 80186de:	6865      	ldr	r5, [r4, #4]
 80186e0:	682e      	ldr	r6, [r5, #0]
 80186e2:	b126      	cbz	r6, 80186ee <rcl_guard_condition_init_from_rmw+0xb2>
 80186e4:	2301      	movs	r3, #1
 80186e6:	712b      	strb	r3, [r5, #4]
 80186e8:	e7d7      	b.n	801869a <rcl_guard_condition_init_from_rmw+0x5e>
 80186ea:	200a      	movs	r0, #10
 80186ec:	e7e5      	b.n	80186ba <rcl_guard_condition_init_from_rmw+0x7e>
 80186ee:	4628      	mov	r0, r5
 80186f0:	9b02      	ldr	r3, [sp, #8]
 80186f2:	9905      	ldr	r1, [sp, #20]
 80186f4:	4798      	blx	r3
 80186f6:	2001      	movs	r0, #1
 80186f8:	6066      	str	r6, [r4, #4]
 80186fa:	e7de      	b.n	80186ba <rcl_guard_condition_init_from_rmw+0x7e>

080186fc <rcl_guard_condition_fini>:
 80186fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186fe:	b1d8      	cbz	r0, 8018738 <rcl_guard_condition_fini+0x3c>
 8018700:	4604      	mov	r4, r0
 8018702:	6840      	ldr	r0, [r0, #4]
 8018704:	b158      	cbz	r0, 801871e <rcl_guard_condition_fini+0x22>
 8018706:	6803      	ldr	r3, [r0, #0]
 8018708:	68c6      	ldr	r6, [r0, #12]
 801870a:	6987      	ldr	r7, [r0, #24]
 801870c:	b153      	cbz	r3, 8018724 <rcl_guard_condition_fini+0x28>
 801870e:	7905      	ldrb	r5, [r0, #4]
 8018710:	b955      	cbnz	r5, 8018728 <rcl_guard_condition_fini+0x2c>
 8018712:	4639      	mov	r1, r7
 8018714:	47b0      	blx	r6
 8018716:	2300      	movs	r3, #0
 8018718:	6063      	str	r3, [r4, #4]
 801871a:	4628      	mov	r0, r5
 801871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801871e:	4605      	mov	r5, r0
 8018720:	4628      	mov	r0, r5
 8018722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018724:	461d      	mov	r5, r3
 8018726:	e7f4      	b.n	8018712 <rcl_guard_condition_fini+0x16>
 8018728:	4618      	mov	r0, r3
 801872a:	f002 fe79 	bl	801b420 <rmw_destroy_guard_condition>
 801872e:	1e05      	subs	r5, r0, #0
 8018730:	bf18      	it	ne
 8018732:	2501      	movne	r5, #1
 8018734:	6860      	ldr	r0, [r4, #4]
 8018736:	e7ec      	b.n	8018712 <rcl_guard_condition_fini+0x16>
 8018738:	250b      	movs	r5, #11
 801873a:	4628      	mov	r0, r5
 801873c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801873e:	bf00      	nop

08018740 <rcl_guard_condition_get_default_options>:
 8018740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018742:	b087      	sub	sp, #28
 8018744:	4606      	mov	r6, r0
 8018746:	4668      	mov	r0, sp
 8018748:	f7f7 ffa2 	bl	8010690 <rcutils_get_default_allocator>
 801874c:	46ee      	mov	lr, sp
 801874e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018752:	4c08      	ldr	r4, [pc, #32]	@ (8018774 <rcl_guard_condition_get_default_options+0x34>)
 8018754:	46a4      	mov	ip, r4
 8018756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801875a:	4625      	mov	r5, r4
 801875c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801875e:	4634      	mov	r4, r6
 8018760:	f8de 7000 	ldr.w	r7, [lr]
 8018764:	f8cc 7000 	str.w	r7, [ip]
 8018768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801876a:	4630      	mov	r0, r6
 801876c:	6027      	str	r7, [r4, #0]
 801876e:	b007      	add	sp, #28
 8018770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018772:	bf00      	nop
 8018774:	20019f80 	.word	0x20019f80

08018778 <rcl_trigger_guard_condition>:
 8018778:	b148      	cbz	r0, 801878e <rcl_trigger_guard_condition+0x16>
 801877a:	b508      	push	{r3, lr}
 801877c:	6843      	ldr	r3, [r0, #4]
 801877e:	b143      	cbz	r3, 8018792 <rcl_trigger_guard_condition+0x1a>
 8018780:	6818      	ldr	r0, [r3, #0]
 8018782:	f003 f821 	bl	801b7c8 <rmw_trigger_guard_condition>
 8018786:	3800      	subs	r0, #0
 8018788:	bf18      	it	ne
 801878a:	2001      	movne	r0, #1
 801878c:	bd08      	pop	{r3, pc}
 801878e:	200b      	movs	r0, #11
 8018790:	4770      	bx	lr
 8018792:	200b      	movs	r0, #11
 8018794:	bd08      	pop	{r3, pc}
 8018796:	bf00      	nop

08018798 <rcl_guard_condition_get_rmw_handle>:
 8018798:	b110      	cbz	r0, 80187a0 <rcl_guard_condition_get_rmw_handle+0x8>
 801879a:	6840      	ldr	r0, [r0, #4]
 801879c:	b100      	cbz	r0, 80187a0 <rcl_guard_condition_get_rmw_handle+0x8>
 801879e:	6800      	ldr	r0, [r0, #0]
 80187a0:	4770      	bx	lr
 80187a2:	bf00      	nop

080187a4 <rcl_init>:
 80187a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187a8:	1e04      	subs	r4, r0, #0
 80187aa:	b0a7      	sub	sp, #156	@ 0x9c
 80187ac:	460d      	mov	r5, r1
 80187ae:	4617      	mov	r7, r2
 80187b0:	461e      	mov	r6, r3
 80187b2:	dd13      	ble.n	80187dc <rcl_init+0x38>
 80187b4:	b161      	cbz	r1, 80187d0 <rcl_init+0x2c>
 80187b6:	f1a1 0e04 	sub.w	lr, r1, #4
 80187ba:	f04f 0c00 	mov.w	ip, #0
 80187be:	e001      	b.n	80187c4 <rcl_init+0x20>
 80187c0:	4564      	cmp	r4, ip
 80187c2:	d00d      	beq.n	80187e0 <rcl_init+0x3c>
 80187c4:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80187c8:	f10c 0c01 	add.w	ip, ip, #1
 80187cc:	2800      	cmp	r0, #0
 80187ce:	d1f7      	bne.n	80187c0 <rcl_init+0x1c>
 80187d0:	f04f 080b 	mov.w	r8, #11
 80187d4:	4640      	mov	r0, r8
 80187d6:	b027      	add	sp, #156	@ 0x9c
 80187d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187dc:	2900      	cmp	r1, #0
 80187de:	d1f7      	bne.n	80187d0 <rcl_init+0x2c>
 80187e0:	2f00      	cmp	r7, #0
 80187e2:	d0f5      	beq.n	80187d0 <rcl_init+0x2c>
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d0f2      	beq.n	80187d0 <rcl_init+0x2c>
 80187ea:	469c      	mov	ip, r3
 80187ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80187f0:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 80187f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80187f8:	f8dc 3000 	ldr.w	r3, [ip]
 80187fc:	f8ce 3000 	str.w	r3, [lr]
 8018800:	a821      	add	r0, sp, #132	@ 0x84
 8018802:	f7f7 ff71 	bl	80106e8 <rcutils_allocator_is_valid>
 8018806:	2800      	cmp	r0, #0
 8018808:	d0e2      	beq.n	80187d0 <rcl_init+0x2c>
 801880a:	2e00      	cmp	r6, #0
 801880c:	d0e0      	beq.n	80187d0 <rcl_init+0x2c>
 801880e:	6833      	ldr	r3, [r6, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d176      	bne.n	8018902 <rcl_init+0x15e>
 8018814:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8018818:	2198      	movs	r1, #152	@ 0x98
 801881a:	2001      	movs	r0, #1
 801881c:	4798      	blx	r3
 801881e:	4680      	mov	r8, r0
 8018820:	6030      	str	r0, [r6, #0]
 8018822:	2800      	cmp	r0, #0
 8018824:	f000 80cc 	beq.w	80189c0 <rcl_init+0x21c>
 8018828:	a802      	add	r0, sp, #8
 801882a:	f002 fb5b 	bl	801aee4 <rmw_get_zero_initialized_context>
 801882e:	a902      	add	r1, sp, #8
 8018830:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8018834:	2270      	movs	r2, #112	@ 0x70
 8018836:	f005 fb84 	bl	801df42 <memcpy>
 801883a:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 801883e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018842:	f8d6 8000 	ldr.w	r8, [r6]
 8018846:	46c4      	mov	ip, r8
 8018848:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801884c:	f8de 3000 	ldr.w	r3, [lr]
 8018850:	f8cc 3000 	str.w	r3, [ip]
 8018854:	f108 0114 	add.w	r1, r8, #20
 8018858:	4638      	mov	r0, r7
 801885a:	f7f5 ffdd 	bl	800e818 <rcl_init_options_copy>
 801885e:	4680      	mov	r8, r0
 8018860:	2800      	cmp	r0, #0
 8018862:	d147      	bne.n	80188f4 <rcl_init+0x150>
 8018864:	f8d6 9000 	ldr.w	r9, [r6]
 8018868:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 801886c:	f8c9 0020 	str.w	r0, [r9, #32]
 8018870:	f8c9 4018 	str.w	r4, [r9, #24]
 8018874:	f8c9 a01c 	str.w	sl, [r9, #28]
 8018878:	2c00      	cmp	r4, #0
 801887a:	d04a      	beq.n	8018912 <rcl_init+0x16e>
 801887c:	2d00      	cmp	r5, #0
 801887e:	d048      	beq.n	8018912 <rcl_init+0x16e>
 8018880:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8018884:	2104      	movs	r1, #4
 8018886:	4620      	mov	r0, r4
 8018888:	4798      	blx	r3
 801888a:	f8c9 0020 	str.w	r0, [r9, #32]
 801888e:	f8d6 9000 	ldr.w	r9, [r6]
 8018892:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8018896:	f1bb 0f00 	cmp.w	fp, #0
 801889a:	d029      	beq.n	80188f0 <rcl_init+0x14c>
 801889c:	2c01      	cmp	r4, #1
 801889e:	f17a 0300 	sbcs.w	r3, sl, #0
 80188a2:	db36      	blt.n	8018912 <rcl_init+0x16e>
 80188a4:	f04f 0800 	mov.w	r8, #0
 80188a8:	3d04      	subs	r5, #4
 80188aa:	46c1      	mov	r9, r8
 80188ac:	e00d      	b.n	80188ca <rcl_init+0x126>
 80188ae:	6829      	ldr	r1, [r5, #0]
 80188b0:	f005 fb47 	bl	801df42 <memcpy>
 80188b4:	f118 0801 	adds.w	r8, r8, #1
 80188b8:	f149 0900 	adc.w	r9, r9, #0
 80188bc:	45ca      	cmp	sl, r9
 80188be:	bf08      	it	eq
 80188c0:	4544      	cmpeq	r4, r8
 80188c2:	d024      	beq.n	801890e <rcl_init+0x16a>
 80188c4:	6833      	ldr	r3, [r6, #0]
 80188c6:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80188ca:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80188ce:	f7e7 fd07 	bl	80002e0 <strlen>
 80188d2:	1c42      	adds	r2, r0, #1
 80188d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80188d6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80188d8:	9201      	str	r2, [sp, #4]
 80188da:	4610      	mov	r0, r2
 80188dc:	4798      	blx	r3
 80188de:	6833      	ldr	r3, [r6, #0]
 80188e0:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 80188e4:	6a1b      	ldr	r3, [r3, #32]
 80188e6:	9a01      	ldr	r2, [sp, #4]
 80188e8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80188ec:	2800      	cmp	r0, #0
 80188ee:	d1de      	bne.n	80188ae <rcl_init+0x10a>
 80188f0:	f04f 080a 	mov.w	r8, #10
 80188f4:	4630      	mov	r0, r6
 80188f6:	f7ff fdd7 	bl	80184a8 <__cleanup_context>
 80188fa:	4640      	mov	r0, r8
 80188fc:	b027      	add	sp, #156	@ 0x9c
 80188fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018902:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8018906:	4640      	mov	r0, r8
 8018908:	b027      	add	sp, #156	@ 0x9c
 801890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801890e:	f8d6 9000 	ldr.w	r9, [r6]
 8018912:	4a40      	ldr	r2, [pc, #256]	@ (8018a14 <rcl_init+0x270>)
 8018914:	6813      	ldr	r3, [r2, #0]
 8018916:	3301      	adds	r3, #1
 8018918:	d04d      	beq.n	80189b6 <rcl_init+0x212>
 801891a:	461d      	mov	r5, r3
 801891c:	2000      	movs	r0, #0
 801891e:	4619      	mov	r1, r3
 8018920:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8018924:	6073      	str	r3, [r6, #4]
 8018926:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018928:	6011      	str	r1, [r2, #0]
 801892a:	3301      	adds	r3, #1
 801892c:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8018930:	d05e      	beq.n	80189f0 <rcl_init+0x24c>
 8018932:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8018936:	2b00      	cmp	r3, #0
 8018938:	d045      	beq.n	80189c6 <rcl_init+0x222>
 801893a:	683a      	ldr	r2, [r7, #0]
 801893c:	2b01      	cmp	r3, #1
 801893e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8018942:	d04c      	beq.n	80189de <rcl_init+0x23a>
 8018944:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8018948:	2a00      	cmp	r2, #0
 801894a:	d05c      	beq.n	8018a06 <rcl_init+0x262>
 801894c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801894e:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8018952:	b953      	cbnz	r3, 801896a <rcl_init+0x1c6>
 8018954:	2801      	cmp	r0, #1
 8018956:	d008      	beq.n	801896a <rcl_init+0x1c6>
 8018958:	a921      	add	r1, sp, #132	@ 0x84
 801895a:	4628      	mov	r0, r5
 801895c:	f004 f876 	bl	801ca4c <rcl_get_discovery_static_peers>
 8018960:	4680      	mov	r8, r0
 8018962:	2800      	cmp	r0, #0
 8018964:	d1c6      	bne.n	80188f4 <rcl_init+0x150>
 8018966:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801896a:	f004 f865 	bl	801ca38 <rcl_automatic_discovery_range_to_string>
 801896e:	6833      	ldr	r3, [r6, #0]
 8018970:	695b      	ldr	r3, [r3, #20]
 8018972:	aa20      	add	r2, sp, #128	@ 0x80
 8018974:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8018976:	a91f      	add	r1, sp, #124	@ 0x7c
 8018978:	f000 fd26 	bl	80193c8 <rcl_validate_enclave_name>
 801897c:	4680      	mov	r8, r0
 801897e:	2800      	cmp	r0, #0
 8018980:	d1b8      	bne.n	80188f4 <rcl_init+0x150>
 8018982:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018984:	bb8b      	cbnz	r3, 80189ea <rcl_init+0x246>
 8018986:	6831      	ldr	r1, [r6, #0]
 8018988:	694b      	ldr	r3, [r1, #20]
 801898a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 801898c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8018990:	f000 f9d4 	bl	8018d3c <rcl_get_security_options_from_environment>
 8018994:	4680      	mov	r8, r0
 8018996:	2800      	cmp	r0, #0
 8018998:	d1ac      	bne.n	80188f4 <rcl_init+0x150>
 801899a:	6831      	ldr	r1, [r6, #0]
 801899c:	6948      	ldr	r0, [r1, #20]
 801899e:	3128      	adds	r1, #40	@ 0x28
 80189a0:	3018      	adds	r0, #24
 80189a2:	f7f8 fb69 	bl	8011078 <rmw_init>
 80189a6:	4680      	mov	r8, r0
 80189a8:	2800      	cmp	r0, #0
 80189aa:	f43f af13 	beq.w	80187d4 <rcl_init+0x30>
 80189ae:	f7ff fd55 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 80189b2:	4680      	mov	r8, r0
 80189b4:	e79e      	b.n	80188f4 <rcl_init+0x150>
 80189b6:	2101      	movs	r1, #1
 80189b8:	4618      	mov	r0, r3
 80189ba:	460d      	mov	r5, r1
 80189bc:	460b      	mov	r3, r1
 80189be:	e7af      	b.n	8018920 <rcl_init+0x17c>
 80189c0:	f04f 080a 	mov.w	r8, #10
 80189c4:	e706      	b.n	80187d4 <rcl_init+0x30>
 80189c6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80189ca:	f000 f843 	bl	8018a54 <rcl_get_localhost_only>
 80189ce:	4680      	mov	r8, r0
 80189d0:	2800      	cmp	r0, #0
 80189d2:	d18f      	bne.n	80188f4 <rcl_init+0x150>
 80189d4:	6832      	ldr	r2, [r6, #0]
 80189d6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80189da:	6954      	ldr	r4, [r2, #20]
 80189dc:	e7ad      	b.n	801893a <rcl_init+0x196>
 80189de:	2002      	movs	r0, #2
 80189e0:	2300      	movs	r3, #0
 80189e2:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 80189e6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80189e8:	e7bf      	b.n	801896a <rcl_init+0x1c6>
 80189ea:	f04f 0801 	mov.w	r8, #1
 80189ee:	e781      	b.n	80188f4 <rcl_init+0x150>
 80189f0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80189f4:	f004 f894 	bl	801cb20 <rcl_get_default_domain_id>
 80189f8:	4680      	mov	r8, r0
 80189fa:	2800      	cmp	r0, #0
 80189fc:	f47f af7a 	bne.w	80188f4 <rcl_init+0x150>
 8018a00:	6833      	ldr	r3, [r6, #0]
 8018a02:	695c      	ldr	r4, [r3, #20]
 8018a04:	e795      	b.n	8018932 <rcl_init+0x18e>
 8018a06:	4628      	mov	r0, r5
 8018a08:	f003 ffd4 	bl	801c9b4 <rcl_get_automatic_discovery_range>
 8018a0c:	4680      	mov	r8, r0
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	d09c      	beq.n	801894c <rcl_init+0x1a8>
 8018a12:	e76f      	b.n	80188f4 <rcl_init+0x150>
 8018a14:	20019f94 	.word	0x20019f94

08018a18 <rcl_shutdown>:
 8018a18:	b1a8      	cbz	r0, 8018a46 <rcl_shutdown+0x2e>
 8018a1a:	6803      	ldr	r3, [r0, #0]
 8018a1c:	b510      	push	{r4, lr}
 8018a1e:	4604      	mov	r4, r0
 8018a20:	b173      	cbz	r3, 8018a40 <rcl_shutdown+0x28>
 8018a22:	f7ff fd3b 	bl	801849c <rcl_context_is_valid>
 8018a26:	b140      	cbz	r0, 8018a3a <rcl_shutdown+0x22>
 8018a28:	6820      	ldr	r0, [r4, #0]
 8018a2a:	3028      	adds	r0, #40	@ 0x28
 8018a2c:	f7f8 fc58 	bl	80112e0 <rmw_shutdown>
 8018a30:	4603      	mov	r3, r0
 8018a32:	b958      	cbnz	r0, 8018a4c <rcl_shutdown+0x34>
 8018a34:	6060      	str	r0, [r4, #4]
 8018a36:	4618      	mov	r0, r3
 8018a38:	bd10      	pop	{r4, pc}
 8018a3a:	236a      	movs	r3, #106	@ 0x6a
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	bd10      	pop	{r4, pc}
 8018a40:	230b      	movs	r3, #11
 8018a42:	4618      	mov	r0, r3
 8018a44:	bd10      	pop	{r4, pc}
 8018a46:	230b      	movs	r3, #11
 8018a48:	4618      	mov	r0, r3
 8018a4a:	4770      	bx	lr
 8018a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a50:	f7ff bd04 	b.w	801845c <rcl_convert_rmw_ret_to_rcl_ret>

08018a54 <rcl_get_localhost_only>:
 8018a54:	b510      	push	{r4, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	2300      	movs	r3, #0
 8018a5a:	9301      	str	r3, [sp, #4]
 8018a5c:	b1b8      	cbz	r0, 8018a8e <rcl_get_localhost_only+0x3a>
 8018a5e:	4604      	mov	r4, r0
 8018a60:	a901      	add	r1, sp, #4
 8018a62:	480c      	ldr	r0, [pc, #48]	@ (8018a94 <rcl_get_localhost_only+0x40>)
 8018a64:	f7f7 fef4 	bl	8010850 <rcutils_get_env>
 8018a68:	b110      	cbz	r0, 8018a70 <rcl_get_localhost_only+0x1c>
 8018a6a:	2001      	movs	r0, #1
 8018a6c:	b002      	add	sp, #8
 8018a6e:	bd10      	pop	{r4, pc}
 8018a70:	9b01      	ldr	r3, [sp, #4]
 8018a72:	b10b      	cbz	r3, 8018a78 <rcl_get_localhost_only+0x24>
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	b923      	cbnz	r3, 8018a82 <rcl_get_localhost_only+0x2e>
 8018a78:	2300      	movs	r3, #0
 8018a7a:	7023      	strb	r3, [r4, #0]
 8018a7c:	2000      	movs	r0, #0
 8018a7e:	b002      	add	sp, #8
 8018a80:	bd10      	pop	{r4, pc}
 8018a82:	2b31      	cmp	r3, #49	@ 0x31
 8018a84:	bf14      	ite	ne
 8018a86:	2302      	movne	r3, #2
 8018a88:	2301      	moveq	r3, #1
 8018a8a:	7023      	strb	r3, [r4, #0]
 8018a8c:	e7f6      	b.n	8018a7c <rcl_get_localhost_only+0x28>
 8018a8e:	200b      	movs	r0, #11
 8018a90:	b002      	add	sp, #8
 8018a92:	bd10      	pop	{r4, pc}
 8018a94:	0802105c 	.word	0x0802105c

08018a98 <rcl_node_resolve_name>:
 8018a98:	b082      	sub	sp, #8
 8018a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a9e:	b091      	sub	sp, #68	@ 0x44
 8018aa0:	ac1a      	add	r4, sp, #104	@ 0x68
 8018aa2:	e884 000c 	stmia.w	r4, {r2, r3}
 8018aa6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	d03a      	beq.n	8018b24 <rcl_node_resolve_name+0x8c>
 8018aae:	460c      	mov	r4, r1
 8018ab0:	4605      	mov	r5, r0
 8018ab2:	f7f6 f8c1 	bl	800ec38 <rcl_node_get_options>
 8018ab6:	b370      	cbz	r0, 8018b16 <rcl_node_resolve_name+0x7e>
 8018ab8:	4628      	mov	r0, r5
 8018aba:	f7f6 f8ad 	bl	800ec18 <rcl_node_get_name>
 8018abe:	4681      	mov	r9, r0
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	f7f6 f8b1 	bl	800ec28 <rcl_node_get_namespace>
 8018ac6:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8018aca:	4607      	mov	r7, r0
 8018acc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ad0:	ad0b      	add	r5, sp, #44	@ 0x2c
 8018ad2:	46ac      	mov	ip, r5
 8018ad4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ad8:	f8de 3000 	ldr.w	r3, [lr]
 8018adc:	f8cc 3000 	str.w	r3, [ip]
 8018ae0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018ae2:	b1fb      	cbz	r3, 8018b24 <rcl_node_resolve_name+0x8c>
 8018ae4:	468a      	mov	sl, r1
 8018ae6:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8018aea:	f002 f8ab 	bl	801ac44 <rcutils_get_zero_initialized_string_map>
 8018aee:	ab10      	add	r3, sp, #64	@ 0x40
 8018af0:	9008      	str	r0, [sp, #32]
 8018af2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8018af6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018afa:	2100      	movs	r1, #0
 8018afc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8018b00:	a808      	add	r0, sp, #32
 8018b02:	f002 f8f9 	bl	801acf8 <rcutils_string_map_init>
 8018b06:	4606      	mov	r6, r0
 8018b08:	b170      	cbz	r0, 8018b28 <rcl_node_resolve_name+0x90>
 8018b0a:	f7f7 feb9 	bl	8010880 <rcutils_get_error_string>
 8018b0e:	f7f7 fecf 	bl	80108b0 <rcutils_reset_error>
 8018b12:	2e0a      	cmp	r6, #10
 8018b14:	d000      	beq.n	8018b18 <rcl_node_resolve_name+0x80>
 8018b16:	2601      	movs	r6, #1
 8018b18:	4630      	mov	r0, r6
 8018b1a:	b011      	add	sp, #68	@ 0x44
 8018b1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b20:	b002      	add	sp, #8
 8018b22:	4770      	bx	lr
 8018b24:	260b      	movs	r6, #11
 8018b26:	e7f7      	b.n	8018b18 <rcl_node_resolve_name+0x80>
 8018b28:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b2a:	9007      	str	r0, [sp, #28]
 8018b2c:	a808      	add	r0, sp, #32
 8018b2e:	f004 f983 	bl	801ce38 <rcl_get_default_topic_name_substitutions>
 8018b32:	4606      	mov	r6, r0
 8018b34:	b1b0      	cbz	r0, 8018b64 <rcl_node_resolve_name+0xcc>
 8018b36:	280a      	cmp	r0, #10
 8018b38:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018b3c:	d000      	beq.n	8018b40 <rcl_node_resolve_name+0xa8>
 8018b3e:	2601      	movs	r6, #1
 8018b40:	a808      	add	r0, sp, #32
 8018b42:	f002 f917 	bl	801ad74 <rcutils_string_map_fini>
 8018b46:	2800      	cmp	r0, #0
 8018b48:	d132      	bne.n	8018bb0 <rcl_node_resolve_name+0x118>
 8018b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b4c:	4659      	mov	r1, fp
 8018b4e:	47d0      	blx	sl
 8018b50:	4659      	mov	r1, fp
 8018b52:	4648      	mov	r0, r9
 8018b54:	47d0      	blx	sl
 8018b56:	f1b8 0f00 	cmp.w	r8, #0
 8018b5a:	d0dd      	beq.n	8018b18 <rcl_node_resolve_name+0x80>
 8018b5c:	2e67      	cmp	r6, #103	@ 0x67
 8018b5e:	bf08      	it	eq
 8018b60:	2668      	moveq	r6, #104	@ 0x68
 8018b62:	e7d9      	b.n	8018b18 <rcl_node_resolve_name+0x80>
 8018b64:	ab09      	add	r3, sp, #36	@ 0x24
 8018b66:	9305      	str	r3, [sp, #20]
 8018b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b6a:	46ec      	mov	ip, sp
 8018b6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b70:	682b      	ldr	r3, [r5, #0]
 8018b72:	f8cc 3000 	str.w	r3, [ip]
 8018b76:	463a      	mov	r2, r7
 8018b78:	4649      	mov	r1, r9
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	ab08      	add	r3, sp, #32
 8018b7e:	f003 fffd 	bl	801cb7c <rcl_expand_topic_name>
 8018b82:	4606      	mov	r6, r0
 8018b84:	b9c8      	cbnz	r0, 8018bba <rcl_node_resolve_name+0x122>
 8018b86:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8018b8a:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b8c:	4602      	mov	r2, r0
 8018b8e:	a90a      	add	r1, sp, #40	@ 0x28
 8018b90:	4648      	mov	r0, r9
 8018b92:	f002 fa45 	bl	801b020 <rmw_validate_full_topic_name>
 8018b96:	b998      	cbnz	r0, 8018bc0 <rcl_node_resolve_name+0x128>
 8018b98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018b9a:	bb14      	cbnz	r4, 8018be2 <rcl_node_resolve_name+0x14a>
 8018b9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018b9e:	a808      	add	r0, sp, #32
 8018ba0:	f8c3 9000 	str.w	r9, [r3]
 8018ba4:	f002 f8e6 	bl	801ad74 <rcutils_string_map_fini>
 8018ba8:	4606      	mov	r6, r0
 8018baa:	b978      	cbnz	r0, 8018bcc <rcl_node_resolve_name+0x134>
 8018bac:	4681      	mov	r9, r0
 8018bae:	e7cc      	b.n	8018b4a <rcl_node_resolve_name+0xb2>
 8018bb0:	f7f7 fe66 	bl	8010880 <rcutils_get_error_string>
 8018bb4:	f7f7 fe7c 	bl	80108b0 <rcutils_reset_error>
 8018bb8:	e7c7      	b.n	8018b4a <rcl_node_resolve_name+0xb2>
 8018bba:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018bbe:	e7bf      	b.n	8018b40 <rcl_node_resolve_name+0xa8>
 8018bc0:	f7f7 fe5e 	bl	8010880 <rcutils_get_error_string>
 8018bc4:	2601      	movs	r6, #1
 8018bc6:	f7f7 fe73 	bl	80108b0 <rcutils_reset_error>
 8018bca:	e7b9      	b.n	8018b40 <rcl_node_resolve_name+0xa8>
 8018bcc:	f7f7 fe58 	bl	8010880 <rcutils_get_error_string>
 8018bd0:	f7f7 fe6e 	bl	80108b0 <rcutils_reset_error>
 8018bd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018bd6:	4659      	mov	r1, fp
 8018bd8:	47d0      	blx	sl
 8018bda:	4659      	mov	r1, fp
 8018bdc:	4620      	mov	r0, r4
 8018bde:	47d0      	blx	sl
 8018be0:	e799      	b.n	8018b16 <rcl_node_resolve_name+0x7e>
 8018be2:	2667      	movs	r6, #103	@ 0x67
 8018be4:	e7ac      	b.n	8018b40 <rcl_node_resolve_name+0xa8>
 8018be6:	bf00      	nop

08018be8 <exact_match_lookup>:
 8018be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bea:	f102 0708 	add.w	r7, r2, #8
 8018bee:	460b      	mov	r3, r1
 8018bf0:	4614      	mov	r4, r2
 8018bf2:	4606      	mov	r6, r0
 8018bf4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8018bf8:	b085      	sub	sp, #20
 8018bfa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	4918      	ldr	r1, [pc, #96]	@ (8018c64 <exact_match_lookup+0x7c>)
 8018c02:	e894 000c 	ldmia.w	r4, {r2, r3}
 8018c06:	f001 ffa9 	bl	801ab5c <rcutils_join_path>
 8018c0a:	7833      	ldrb	r3, [r6, #0]
 8018c0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c0e:	4605      	mov	r5, r0
 8018c10:	d022      	beq.n	8018c58 <exact_match_lookup+0x70>
 8018c12:	f104 030c 	add.w	r3, r4, #12
 8018c16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018c1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018c1e:	1c70      	adds	r0, r6, #1
 8018c20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018c24:	f001 ffa0 	bl	801ab68 <rcutils_to_native_path>
 8018c28:	4606      	mov	r6, r0
 8018c2a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8018c2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018c32:	4631      	mov	r1, r6
 8018c34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8018c38:	4628      	mov	r0, r5
 8018c3a:	f001 ff8f 	bl	801ab5c <rcutils_join_path>
 8018c3e:	6863      	ldr	r3, [r4, #4]
 8018c40:	6921      	ldr	r1, [r4, #16]
 8018c42:	4607      	mov	r7, r0
 8018c44:	4630      	mov	r0, r6
 8018c46:	4798      	blx	r3
 8018c48:	4628      	mov	r0, r5
 8018c4a:	6863      	ldr	r3, [r4, #4]
 8018c4c:	6921      	ldr	r1, [r4, #16]
 8018c4e:	4798      	blx	r3
 8018c50:	463d      	mov	r5, r7
 8018c52:	4628      	mov	r0, r5
 8018c54:	b005      	add	sp, #20
 8018c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c58:	7873      	ldrb	r3, [r6, #1]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d1d9      	bne.n	8018c12 <exact_match_lookup+0x2a>
 8018c5e:	4628      	mov	r0, r5
 8018c60:	b005      	add	sp, #20
 8018c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c64:	080210ac 	.word	0x080210ac

08018c68 <rcl_get_secure_root>:
 8018c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c6c:	b085      	sub	sp, #20
 8018c6e:	b168      	cbz	r0, 8018c8c <rcl_get_secure_root+0x24>
 8018c70:	4607      	mov	r7, r0
 8018c72:	4608      	mov	r0, r1
 8018c74:	460c      	mov	r4, r1
 8018c76:	f7f7 fd37 	bl	80106e8 <rcutils_allocator_is_valid>
 8018c7a:	b138      	cbz	r0, 8018c8c <rcl_get_secure_root+0x24>
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	482d      	ldr	r0, [pc, #180]	@ (8018d34 <rcl_get_secure_root+0xcc>)
 8018c80:	9303      	str	r3, [sp, #12]
 8018c82:	a903      	add	r1, sp, #12
 8018c84:	f7f7 fde4 	bl	8010850 <rcutils_get_env>
 8018c88:	4605      	mov	r5, r0
 8018c8a:	b120      	cbz	r0, 8018c96 <rcl_get_secure_root+0x2e>
 8018c8c:	2500      	movs	r5, #0
 8018c8e:	4628      	mov	r0, r5
 8018c90:	b005      	add	sp, #20
 8018c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c96:	9b03      	ldr	r3, [sp, #12]
 8018c98:	781a      	ldrb	r2, [r3, #0]
 8018c9a:	2a00      	cmp	r2, #0
 8018c9c:	d0f6      	beq.n	8018c8c <rcl_get_secure_root+0x24>
 8018c9e:	f104 090c 	add.w	r9, r4, #12
 8018ca2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018ca6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018caa:	4618      	mov	r0, r3
 8018cac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018cb0:	f7f7 ff38 	bl	8010b24 <rcutils_strdup>
 8018cb4:	4680      	mov	r8, r0
 8018cb6:	2800      	cmp	r0, #0
 8018cb8:	d0e8      	beq.n	8018c8c <rcl_get_secure_root+0x24>
 8018cba:	481f      	ldr	r0, [pc, #124]	@ (8018d38 <rcl_get_secure_root+0xd0>)
 8018cbc:	9503      	str	r5, [sp, #12]
 8018cbe:	a903      	add	r1, sp, #12
 8018cc0:	f7f7 fdc6 	bl	8010850 <rcutils_get_env>
 8018cc4:	b160      	cbz	r0, 8018ce0 <rcl_get_secure_root+0x78>
 8018cc6:	2600      	movs	r6, #0
 8018cc8:	6863      	ldr	r3, [r4, #4]
 8018cca:	6921      	ldr	r1, [r4, #16]
 8018ccc:	4630      	mov	r0, r6
 8018cce:	4798      	blx	r3
 8018cd0:	4640      	mov	r0, r8
 8018cd2:	6863      	ldr	r3, [r4, #4]
 8018cd4:	6921      	ldr	r1, [r4, #16]
 8018cd6:	4798      	blx	r3
 8018cd8:	4628      	mov	r0, r5
 8018cda:	b005      	add	sp, #20
 8018cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ce0:	9b03      	ldr	r3, [sp, #12]
 8018ce2:	781e      	ldrb	r6, [r3, #0]
 8018ce4:	b1f6      	cbz	r6, 8018d24 <rcl_get_secure_root+0xbc>
 8018ce6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018cea:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018cee:	4618      	mov	r0, r3
 8018cf0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018cf4:	f7f7 ff16 	bl	8010b24 <rcutils_strdup>
 8018cf8:	4606      	mov	r6, r0
 8018cfa:	2800      	cmp	r0, #0
 8018cfc:	d0e3      	beq.n	8018cc6 <rcl_get_secure_root+0x5e>
 8018cfe:	4622      	mov	r2, r4
 8018d00:	4641      	mov	r1, r8
 8018d02:	f7ff ff71 	bl	8018be8 <exact_match_lookup>
 8018d06:	4605      	mov	r5, r0
 8018d08:	2d00      	cmp	r5, #0
 8018d0a:	d0dd      	beq.n	8018cc8 <rcl_get_secure_root+0x60>
 8018d0c:	4628      	mov	r0, r5
 8018d0e:	f001 ff23 	bl	801ab58 <rcutils_is_directory>
 8018d12:	4607      	mov	r7, r0
 8018d14:	2800      	cmp	r0, #0
 8018d16:	d1d7      	bne.n	8018cc8 <rcl_get_secure_root+0x60>
 8018d18:	4628      	mov	r0, r5
 8018d1a:	6863      	ldr	r3, [r4, #4]
 8018d1c:	6921      	ldr	r1, [r4, #16]
 8018d1e:	4798      	blx	r3
 8018d20:	463d      	mov	r5, r7
 8018d22:	e7d1      	b.n	8018cc8 <rcl_get_secure_root+0x60>
 8018d24:	4622      	mov	r2, r4
 8018d26:	4638      	mov	r0, r7
 8018d28:	4641      	mov	r1, r8
 8018d2a:	f7ff ff5d 	bl	8018be8 <exact_match_lookup>
 8018d2e:	4605      	mov	r5, r0
 8018d30:	e7ea      	b.n	8018d08 <rcl_get_secure_root+0xa0>
 8018d32:	bf00      	nop
 8018d34:	080210b8 	.word	0x080210b8
 8018d38:	080210d0 	.word	0x080210d0

08018d3c <rcl_get_security_options_from_environment>:
 8018d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d3e:	b083      	sub	sp, #12
 8018d40:	2300      	movs	r3, #0
 8018d42:	4605      	mov	r5, r0
 8018d44:	460e      	mov	r6, r1
 8018d46:	481a      	ldr	r0, [pc, #104]	@ (8018db0 <rcl_get_security_options_from_environment+0x74>)
 8018d48:	9301      	str	r3, [sp, #4]
 8018d4a:	a901      	add	r1, sp, #4
 8018d4c:	4617      	mov	r7, r2
 8018d4e:	f7f7 fd7f 	bl	8010850 <rcutils_get_env>
 8018d52:	b110      	cbz	r0, 8018d5a <rcl_get_security_options_from_environment+0x1e>
 8018d54:	2001      	movs	r0, #1
 8018d56:	b003      	add	sp, #12
 8018d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d5a:	4604      	mov	r4, r0
 8018d5c:	4915      	ldr	r1, [pc, #84]	@ (8018db4 <rcl_get_security_options_from_environment+0x78>)
 8018d5e:	9801      	ldr	r0, [sp, #4]
 8018d60:	f7e7 fa5e 	bl	8000220 <strcmp>
 8018d64:	b9b0      	cbnz	r0, 8018d94 <rcl_get_security_options_from_environment+0x58>
 8018d66:	9001      	str	r0, [sp, #4]
 8018d68:	b1c7      	cbz	r7, 8018d9c <rcl_get_security_options_from_environment+0x60>
 8018d6a:	4813      	ldr	r0, [pc, #76]	@ (8018db8 <rcl_get_security_options_from_environment+0x7c>)
 8018d6c:	a901      	add	r1, sp, #4
 8018d6e:	f7f7 fd6f 	bl	8010850 <rcutils_get_env>
 8018d72:	2800      	cmp	r0, #0
 8018d74:	d1ee      	bne.n	8018d54 <rcl_get_security_options_from_environment+0x18>
 8018d76:	4911      	ldr	r1, [pc, #68]	@ (8018dbc <rcl_get_security_options_from_environment+0x80>)
 8018d78:	9801      	ldr	r0, [sp, #4]
 8018d7a:	f7e7 fa51 	bl	8000220 <strcmp>
 8018d7e:	fab0 f080 	clz	r0, r0
 8018d82:	0940      	lsrs	r0, r0, #5
 8018d84:	7038      	strb	r0, [r7, #0]
 8018d86:	4631      	mov	r1, r6
 8018d88:	4628      	mov	r0, r5
 8018d8a:	f7ff ff6d 	bl	8018c68 <rcl_get_secure_root>
 8018d8e:	b138      	cbz	r0, 8018da0 <rcl_get_security_options_from_environment+0x64>
 8018d90:	6078      	str	r0, [r7, #4]
 8018d92:	e000      	b.n	8018d96 <rcl_get_security_options_from_environment+0x5a>
 8018d94:	703c      	strb	r4, [r7, #0]
 8018d96:	2000      	movs	r0, #0
 8018d98:	b003      	add	sp, #12
 8018d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d9c:	200b      	movs	r0, #11
 8018d9e:	e7da      	b.n	8018d56 <rcl_get_security_options_from_environment+0x1a>
 8018da0:	7838      	ldrb	r0, [r7, #0]
 8018da2:	f1a0 0001 	sub.w	r0, r0, #1
 8018da6:	fab0 f080 	clz	r0, r0
 8018daa:	0940      	lsrs	r0, r0, #5
 8018dac:	e7d3      	b.n	8018d56 <rcl_get_security_options_from_environment+0x1a>
 8018dae:	bf00      	nop
 8018db0:	08021070 	.word	0x08021070
 8018db4:	08021084 	.word	0x08021084
 8018db8:	0802108c 	.word	0x0802108c
 8018dbc:	080210a4 	.word	0x080210a4

08018dc0 <rcl_service_get_rmw_handle>:
 8018dc0:	b118      	cbz	r0, 8018dca <rcl_service_get_rmw_handle+0xa>
 8018dc2:	6800      	ldr	r0, [r0, #0]
 8018dc4:	b108      	cbz	r0, 8018dca <rcl_service_get_rmw_handle+0xa>
 8018dc6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018dca:	4770      	bx	lr

08018dcc <rcl_take_request>:
 8018dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dce:	468e      	mov	lr, r1
 8018dd0:	460c      	mov	r4, r1
 8018dd2:	4617      	mov	r7, r2
 8018dd4:	4605      	mov	r5, r0
 8018dd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018dda:	b091      	sub	sp, #68	@ 0x44
 8018ddc:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8018de0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018de4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018de8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018dec:	b30d      	cbz	r5, 8018e32 <rcl_take_request+0x66>
 8018dee:	682b      	ldr	r3, [r5, #0]
 8018df0:	b1fb      	cbz	r3, 8018e32 <rcl_take_request+0x66>
 8018df2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018df6:	b1e0      	cbz	r0, 8018e32 <rcl_take_request+0x66>
 8018df8:	b397      	cbz	r7, 8018e60 <rcl_take_request+0x94>
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	f88d 3017 	strb.w	r3, [sp, #23]
 8018e00:	463a      	mov	r2, r7
 8018e02:	f10d 0317 	add.w	r3, sp, #23
 8018e06:	a906      	add	r1, sp, #24
 8018e08:	f002 fbdc 	bl	801b5c4 <rmw_take_request>
 8018e0c:	4606      	mov	r6, r0
 8018e0e:	b198      	cbz	r0, 8018e38 <rcl_take_request+0x6c>
 8018e10:	280a      	cmp	r0, #10
 8018e12:	bf18      	it	ne
 8018e14:	2601      	movne	r6, #1
 8018e16:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8018e1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018e1e:	46a6      	mov	lr, r4
 8018e20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018e24:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8018e28:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018e2c:	4630      	mov	r0, r6
 8018e2e:	b011      	add	sp, #68	@ 0x44
 8018e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e32:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8018e36:	e7ee      	b.n	8018e16 <rcl_take_request+0x4a>
 8018e38:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8018e3c:	b193      	cbz	r3, 8018e64 <rcl_take_request+0x98>
 8018e3e:	682b      	ldr	r3, [r5, #0]
 8018e40:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8018e44:	2800      	cmp	r0, #0
 8018e46:	d0e6      	beq.n	8018e16 <rcl_take_request+0x4a>
 8018e48:	463a      	mov	r2, r7
 8018e4a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8018e4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8018e50:	e9cd 6700 	strd	r6, r7, [sp]
 8018e54:	9302      	str	r3, [sp, #8]
 8018e56:	2101      	movs	r1, #1
 8018e58:	f000 f842 	bl	8018ee0 <rcl_send_service_event_message>
 8018e5c:	4606      	mov	r6, r0
 8018e5e:	e7da      	b.n	8018e16 <rcl_take_request+0x4a>
 8018e60:	260b      	movs	r6, #11
 8018e62:	e7d8      	b.n	8018e16 <rcl_take_request+0x4a>
 8018e64:	f240 2659 	movw	r6, #601	@ 0x259
 8018e68:	e7d5      	b.n	8018e16 <rcl_take_request+0x4a>
 8018e6a:	bf00      	nop

08018e6c <rcl_send_response>:
 8018e6c:	b350      	cbz	r0, 8018ec4 <rcl_send_response+0x58>
 8018e6e:	b570      	push	{r4, r5, r6, lr}
 8018e70:	6803      	ldr	r3, [r0, #0]
 8018e72:	b084      	sub	sp, #16
 8018e74:	4604      	mov	r4, r0
 8018e76:	b1cb      	cbz	r3, 8018eac <rcl_send_response+0x40>
 8018e78:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018e7c:	b1b0      	cbz	r0, 8018eac <rcl_send_response+0x40>
 8018e7e:	460e      	mov	r6, r1
 8018e80:	b1e9      	cbz	r1, 8018ebe <rcl_send_response+0x52>
 8018e82:	4615      	mov	r5, r2
 8018e84:	b1da      	cbz	r2, 8018ebe <rcl_send_response+0x52>
 8018e86:	f002 fbfb 	bl	801b680 <rmw_send_response>
 8018e8a:	b998      	cbnz	r0, 8018eb4 <rcl_send_response+0x48>
 8018e8c:	6823      	ldr	r3, [r4, #0]
 8018e8e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8018e92:	b16b      	cbz	r3, 8018eb0 <rcl_send_response+0x44>
 8018e94:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8018e98:	462a      	mov	r2, r5
 8018e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8018e9e:	9602      	str	r6, [sp, #8]
 8018ea0:	2102      	movs	r1, #2
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f000 f81c 	bl	8018ee0 <rcl_send_service_event_message>
 8018ea8:	b004      	add	sp, #16
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8018eb0:	b004      	add	sp, #16
 8018eb2:	bd70      	pop	{r4, r5, r6, pc}
 8018eb4:	2802      	cmp	r0, #2
 8018eb6:	bf18      	it	ne
 8018eb8:	2001      	movne	r0, #1
 8018eba:	b004      	add	sp, #16
 8018ebc:	bd70      	pop	{r4, r5, r6, pc}
 8018ebe:	200b      	movs	r0, #11
 8018ec0:	b004      	add	sp, #16
 8018ec2:	bd70      	pop	{r4, r5, r6, pc}
 8018ec4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8018ec8:	4770      	bx	lr
 8018eca:	bf00      	nop

08018ecc <rcl_service_is_valid>:
 8018ecc:	b130      	cbz	r0, 8018edc <rcl_service_is_valid+0x10>
 8018ece:	6800      	ldr	r0, [r0, #0]
 8018ed0:	b120      	cbz	r0, 8018edc <rcl_service_is_valid+0x10>
 8018ed2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018ed6:	3800      	subs	r0, #0
 8018ed8:	bf18      	it	ne
 8018eda:	2001      	movne	r0, #1
 8018edc:	4770      	bx	lr
 8018ede:	bf00      	nop

08018ee0 <rcl_send_service_event_message>:
 8018ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ee2:	b093      	sub	sp, #76	@ 0x4c
 8018ee4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018ee6:	b17a      	cbz	r2, 8018f08 <rcl_send_service_event_message+0x28>
 8018ee8:	b176      	cbz	r6, 8018f08 <rcl_send_service_event_message+0x28>
 8018eea:	4604      	mov	r4, r0
 8018eec:	b150      	cbz	r0, 8018f04 <rcl_send_service_event_message+0x24>
 8018eee:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8018ef2:	b13b      	cbz	r3, 8018f04 <rcl_send_service_event_message+0x24>
 8018ef4:	68c0      	ldr	r0, [r0, #12]
 8018ef6:	460f      	mov	r7, r1
 8018ef8:	4615      	mov	r5, r2
 8018efa:	f000 f893 	bl	8019024 <rcl_clock_valid>
 8018efe:	b108      	cbz	r0, 8018f04 <rcl_send_service_event_message+0x24>
 8018f00:	7a23      	ldrb	r3, [r4, #8]
 8018f02:	b92b      	cbnz	r3, 8018f10 <rcl_send_service_event_message+0x30>
 8018f04:	2501      	movs	r5, #1
 8018f06:	e000      	b.n	8018f0a <rcl_send_service_event_message+0x2a>
 8018f08:	250b      	movs	r5, #11
 8018f0a:	4628      	mov	r0, r5
 8018f0c:	b013      	add	sp, #76	@ 0x4c
 8018f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f10:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8018f14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f18:	f10d 0c0c 	add.w	ip, sp, #12
 8018f1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f20:	f8de 3000 	ldr.w	r3, [lr]
 8018f24:	f8cc 3000 	str.w	r3, [ip]
 8018f28:	a803      	add	r0, sp, #12
 8018f2a:	f7f7 fbdd 	bl	80106e8 <rcutils_allocator_is_valid>
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	d0ea      	beq.n	8018f08 <rcl_send_service_event_message+0x28>
 8018f32:	6820      	ldr	r0, [r4, #0]
 8018f34:	f7f6 f81e 	bl	800ef74 <rcl_publisher_is_valid>
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d045      	beq.n	8018fc8 <rcl_send_service_event_message+0xe8>
 8018f3c:	4669      	mov	r1, sp
 8018f3e:	68e0      	ldr	r0, [r4, #12]
 8018f40:	f000 f918 	bl	8019174 <rcl_clock_get_now>
 8018f44:	4601      	mov	r1, r0
 8018f46:	2800      	cmp	r0, #0
 8018f48:	d13b      	bne.n	8018fc2 <rcl_send_service_event_message+0xe2>
 8018f4a:	2220      	movs	r2, #32
 8018f4c:	eb0d 0002 	add.w	r0, sp, r2
 8018f50:	f004 fec6 	bl	801dce0 <memset>
 8018f54:	a324      	add	r3, pc, #144	@ (adr r3, 8018fe8 <rcl_send_service_event_message+0x108>)
 8018f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f5e:	f88d 7020 	strb.w	r7, [sp, #32]
 8018f62:	f7e7 fe81 	bl	8000c68 <__aeabi_ldivmod>
 8018f66:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8018f6a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8018f6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018f72:	7a23      	ldrb	r3, [r4, #8]
 8018f74:	6830      	ldr	r0, [r6, #0]
 8018f76:	6871      	ldr	r1, [r6, #4]
 8018f78:	68b2      	ldr	r2, [r6, #8]
 8018f7a:	2b01      	cmp	r3, #1
 8018f7c:	68f3      	ldr	r3, [r6, #12]
 8018f7e:	bf08      	it	eq
 8018f80:	2500      	moveq	r5, #0
 8018f82:	ae0b      	add	r6, sp, #44	@ 0x2c
 8018f84:	2f01      	cmp	r7, #1
 8018f86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018f88:	d821      	bhi.n	8018fce <rcl_send_service_event_message+0xee>
 8018f8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8018f8e:	462a      	mov	r2, r5
 8018f90:	a808      	add	r0, sp, #32
 8018f92:	699d      	ldr	r5, [r3, #24]
 8018f94:	a903      	add	r1, sp, #12
 8018f96:	2300      	movs	r3, #0
 8018f98:	47a8      	blx	r5
 8018f9a:	4606      	mov	r6, r0
 8018f9c:	2e00      	cmp	r6, #0
 8018f9e:	d0b1      	beq.n	8018f04 <rcl_send_service_event_message+0x24>
 8018fa0:	4631      	mov	r1, r6
 8018fa2:	6820      	ldr	r0, [r4, #0]
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	f7f5 ffc1 	bl	800ef2c <rcl_publish>
 8018faa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8018fae:	4605      	mov	r5, r0
 8018fb0:	69db      	ldr	r3, [r3, #28]
 8018fb2:	a903      	add	r1, sp, #12
 8018fb4:	4630      	mov	r0, r6
 8018fb6:	4798      	blx	r3
 8018fb8:	2d00      	cmp	r5, #0
 8018fba:	d0a6      	beq.n	8018f0a <rcl_send_service_event_message+0x2a>
 8018fbc:	f7f7 fc78 	bl	80108b0 <rcutils_reset_error>
 8018fc0:	e7a3      	b.n	8018f0a <rcl_send_service_event_message+0x2a>
 8018fc2:	f7f7 fc75 	bl	80108b0 <rcutils_reset_error>
 8018fc6:	e79d      	b.n	8018f04 <rcl_send_service_event_message+0x24>
 8018fc8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8018fcc:	e79d      	b.n	8018f0a <rcl_send_service_event_message+0x2a>
 8018fce:	1eb9      	subs	r1, r7, #2
 8018fd0:	2901      	cmp	r1, #1
 8018fd2:	d8f6      	bhi.n	8018fc2 <rcl_send_service_event_message+0xe2>
 8018fd4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8018fd8:	462b      	mov	r3, r5
 8018fda:	a808      	add	r0, sp, #32
 8018fdc:	6995      	ldr	r5, [r2, #24]
 8018fde:	a903      	add	r1, sp, #12
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	47a8      	blx	r5
 8018fe4:	4606      	mov	r6, r0
 8018fe6:	e7d9      	b.n	8018f9c <rcl_send_service_event_message+0xbc>
 8018fe8:	3b9aca00 	.word	0x3b9aca00
 8018fec:	00000000 	.word	0x00000000

08018ff0 <rcl_get_system_time>:
 8018ff0:	4608      	mov	r0, r1
 8018ff2:	f7f7 bdf7 	b.w	8010be4 <rcutils_system_time_now>
 8018ff6:	bf00      	nop

08018ff8 <rcl_get_steady_time>:
 8018ff8:	4608      	mov	r0, r1
 8018ffa:	f7f7 be1d 	b.w	8010c38 <rcutils_steady_time_now>
 8018ffe:	bf00      	nop

08019000 <rcl_get_ros_time>:
 8019000:	7a03      	ldrb	r3, [r0, #8]
 8019002:	b510      	push	{r4, lr}
 8019004:	460c      	mov	r4, r1
 8019006:	b143      	cbz	r3, 801901a <rcl_get_ros_time+0x1a>
 8019008:	2105      	movs	r1, #5
 801900a:	f7f7 fb7b 	bl	8010704 <__atomic_load_8>
 801900e:	4602      	mov	r2, r0
 8019010:	460b      	mov	r3, r1
 8019012:	e9c4 2300 	strd	r2, r3, [r4]
 8019016:	2000      	movs	r0, #0
 8019018:	bd10      	pop	{r4, pc}
 801901a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801901e:	4608      	mov	r0, r1
 8019020:	f7f7 bde0 	b.w	8010be4 <rcutils_system_time_now>

08019024 <rcl_clock_valid>:
 8019024:	b138      	cbz	r0, 8019036 <rcl_clock_valid+0x12>
 8019026:	7803      	ldrb	r3, [r0, #0]
 8019028:	b123      	cbz	r3, 8019034 <rcl_clock_valid+0x10>
 801902a:	68c0      	ldr	r0, [r0, #12]
 801902c:	3800      	subs	r0, #0
 801902e:	bf18      	it	ne
 8019030:	2001      	movne	r0, #1
 8019032:	4770      	bx	lr
 8019034:	4618      	mov	r0, r3
 8019036:	4770      	bx	lr

08019038 <rcl_clock_init>:
 8019038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801903a:	4605      	mov	r5, r0
 801903c:	4610      	mov	r0, r2
 801903e:	4614      	mov	r4, r2
 8019040:	460e      	mov	r6, r1
 8019042:	f7f7 fb51 	bl	80106e8 <rcutils_allocator_is_valid>
 8019046:	b128      	cbz	r0, 8019054 <rcl_clock_init+0x1c>
 8019048:	2d03      	cmp	r5, #3
 801904a:	d803      	bhi.n	8019054 <rcl_clock_init+0x1c>
 801904c:	e8df f005 	tbb	[pc, r5]
 8019050:	044c291a 	.word	0x044c291a
 8019054:	200b      	movs	r0, #11
 8019056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019058:	2e00      	cmp	r6, #0
 801905a:	d0fb      	beq.n	8019054 <rcl_clock_init+0x1c>
 801905c:	2c00      	cmp	r4, #0
 801905e:	d0f9      	beq.n	8019054 <rcl_clock_init+0x1c>
 8019060:	2300      	movs	r3, #0
 8019062:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019066:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801910c <rcl_clock_init+0xd4>
 801906a:	6133      	str	r3, [r6, #16]
 801906c:	f106 0514 	add.w	r5, r6, #20
 8019070:	2703      	movs	r7, #3
 8019072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019076:	6823      	ldr	r3, [r4, #0]
 8019078:	602b      	str	r3, [r5, #0]
 801907a:	f8c6 c00c 	str.w	ip, [r6, #12]
 801907e:	7037      	strb	r7, [r6, #0]
 8019080:	2000      	movs	r0, #0
 8019082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019084:	2e00      	cmp	r6, #0
 8019086:	d0e5      	beq.n	8019054 <rcl_clock_init+0x1c>
 8019088:	2300      	movs	r3, #0
 801908a:	7033      	strb	r3, [r6, #0]
 801908c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019090:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8019094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019096:	f106 0514 	add.w	r5, r6, #20
 801909a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801909c:	6823      	ldr	r3, [r4, #0]
 801909e:	602b      	str	r3, [r5, #0]
 80190a0:	e7ee      	b.n	8019080 <rcl_clock_init+0x48>
 80190a2:	2e00      	cmp	r6, #0
 80190a4:	d0d6      	beq.n	8019054 <rcl_clock_init+0x1c>
 80190a6:	2c00      	cmp	r4, #0
 80190a8:	d0d4      	beq.n	8019054 <rcl_clock_init+0x1c>
 80190aa:	2700      	movs	r7, #0
 80190ac:	7037      	strb	r7, [r6, #0]
 80190ae:	46a4      	mov	ip, r4
 80190b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190b4:	f106 0514 	add.w	r5, r6, #20
 80190b8:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80190bc:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80190c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190c2:	f8dc 3000 	ldr.w	r3, [ip]
 80190c6:	602b      	str	r3, [r5, #0]
 80190c8:	6921      	ldr	r1, [r4, #16]
 80190ca:	6823      	ldr	r3, [r4, #0]
 80190cc:	2010      	movs	r0, #16
 80190ce:	4798      	blx	r3
 80190d0:	6130      	str	r0, [r6, #16]
 80190d2:	b1b8      	cbz	r0, 8019104 <rcl_clock_init+0xcc>
 80190d4:	2200      	movs	r2, #0
 80190d6:	2300      	movs	r3, #0
 80190d8:	e9c0 2300 	strd	r2, r3, [r0]
 80190dc:	4a0a      	ldr	r2, [pc, #40]	@ (8019108 <rcl_clock_init+0xd0>)
 80190de:	7207      	strb	r7, [r0, #8]
 80190e0:	2301      	movs	r3, #1
 80190e2:	60f2      	str	r2, [r6, #12]
 80190e4:	7033      	strb	r3, [r6, #0]
 80190e6:	e7cb      	b.n	8019080 <rcl_clock_init+0x48>
 80190e8:	2e00      	cmp	r6, #0
 80190ea:	d0b3      	beq.n	8019054 <rcl_clock_init+0x1c>
 80190ec:	2c00      	cmp	r4, #0
 80190ee:	d0b1      	beq.n	8019054 <rcl_clock_init+0x1c>
 80190f0:	2300      	movs	r3, #0
 80190f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80190f6:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8019110 <rcl_clock_init+0xd8>
 80190fa:	6133      	str	r3, [r6, #16]
 80190fc:	f106 0514 	add.w	r5, r6, #20
 8019100:	2702      	movs	r7, #2
 8019102:	e7b6      	b.n	8019072 <rcl_clock_init+0x3a>
 8019104:	200a      	movs	r0, #10
 8019106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019108:	08019001 	.word	0x08019001
 801910c:	08018ff9 	.word	0x08018ff9
 8019110:	08018ff1 	.word	0x08018ff1

08019114 <rcl_clock_fini>:
 8019114:	b358      	cbz	r0, 801916e <rcl_clock_fini+0x5a>
 8019116:	b538      	push	{r3, r4, r5, lr}
 8019118:	4604      	mov	r4, r0
 801911a:	3014      	adds	r0, #20
 801911c:	f7f7 fae4 	bl	80106e8 <rcutils_allocator_is_valid>
 8019120:	b198      	cbz	r0, 801914a <rcl_clock_fini+0x36>
 8019122:	7823      	ldrb	r3, [r4, #0]
 8019124:	2b02      	cmp	r3, #2
 8019126:	d005      	beq.n	8019134 <rcl_clock_fini+0x20>
 8019128:	2b03      	cmp	r3, #3
 801912a:	d003      	beq.n	8019134 <rcl_clock_fini+0x20>
 801912c:	2b01      	cmp	r3, #1
 801912e:	d00e      	beq.n	801914e <rcl_clock_fini+0x3a>
 8019130:	200b      	movs	r0, #11
 8019132:	bd38      	pop	{r3, r4, r5, pc}
 8019134:	68a3      	ldr	r3, [r4, #8]
 8019136:	b133      	cbz	r3, 8019146 <rcl_clock_fini+0x32>
 8019138:	2500      	movs	r5, #0
 801913a:	69a3      	ldr	r3, [r4, #24]
 801913c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801913e:	6860      	ldr	r0, [r4, #4]
 8019140:	60a5      	str	r5, [r4, #8]
 8019142:	4798      	blx	r3
 8019144:	6065      	str	r5, [r4, #4]
 8019146:	2000      	movs	r0, #0
 8019148:	bd38      	pop	{r3, r4, r5, pc}
 801914a:	2001      	movs	r0, #1
 801914c:	bd38      	pop	{r3, r4, r5, pc}
 801914e:	68a3      	ldr	r3, [r4, #8]
 8019150:	b133      	cbz	r3, 8019160 <rcl_clock_fini+0x4c>
 8019152:	2500      	movs	r5, #0
 8019154:	69a3      	ldr	r3, [r4, #24]
 8019156:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019158:	6860      	ldr	r0, [r4, #4]
 801915a:	60a5      	str	r5, [r4, #8]
 801915c:	4798      	blx	r3
 801915e:	6065      	str	r5, [r4, #4]
 8019160:	69a3      	ldr	r3, [r4, #24]
 8019162:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019164:	6920      	ldr	r0, [r4, #16]
 8019166:	4798      	blx	r3
 8019168:	2300      	movs	r3, #0
 801916a:	6123      	str	r3, [r4, #16]
 801916c:	e7eb      	b.n	8019146 <rcl_clock_fini+0x32>
 801916e:	200b      	movs	r0, #11
 8019170:	4770      	bx	lr
 8019172:	bf00      	nop

08019174 <rcl_clock_get_now>:
 8019174:	b140      	cbz	r0, 8019188 <rcl_clock_get_now+0x14>
 8019176:	b139      	cbz	r1, 8019188 <rcl_clock_get_now+0x14>
 8019178:	7803      	ldrb	r3, [r0, #0]
 801917a:	b11b      	cbz	r3, 8019184 <rcl_clock_get_now+0x10>
 801917c:	68c3      	ldr	r3, [r0, #12]
 801917e:	b10b      	cbz	r3, 8019184 <rcl_clock_get_now+0x10>
 8019180:	6900      	ldr	r0, [r0, #16]
 8019182:	4718      	bx	r3
 8019184:	2001      	movs	r0, #1
 8019186:	4770      	bx	lr
 8019188:	200b      	movs	r0, #11
 801918a:	4770      	bx	lr

0801918c <rcl_is_enabled_ros_time_override>:
 801918c:	b158      	cbz	r0, 80191a6 <rcl_is_enabled_ros_time_override+0x1a>
 801918e:	b151      	cbz	r1, 80191a6 <rcl_is_enabled_ros_time_override+0x1a>
 8019190:	7803      	ldrb	r3, [r0, #0]
 8019192:	2b01      	cmp	r3, #1
 8019194:	d105      	bne.n	80191a2 <rcl_is_enabled_ros_time_override+0x16>
 8019196:	6902      	ldr	r2, [r0, #16]
 8019198:	b11a      	cbz	r2, 80191a2 <rcl_is_enabled_ros_time_override+0x16>
 801919a:	7a13      	ldrb	r3, [r2, #8]
 801919c:	700b      	strb	r3, [r1, #0]
 801919e:	2000      	movs	r0, #0
 80191a0:	4770      	bx	lr
 80191a2:	2001      	movs	r0, #1
 80191a4:	4770      	bx	lr
 80191a6:	200b      	movs	r0, #11
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop

080191ac <rcl_clock_add_jump_callback>:
 80191ac:	b082      	sub	sp, #8
 80191ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b2:	a906      	add	r1, sp, #24
 80191b4:	e881 000c 	stmia.w	r1, {r2, r3}
 80191b8:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 80191bc:	b320      	cbz	r0, 8019208 <rcl_clock_add_jump_callback+0x5c>
 80191be:	4605      	mov	r5, r0
 80191c0:	3014      	adds	r0, #20
 80191c2:	f7f7 fa91 	bl	80106e8 <rcutils_allocator_is_valid>
 80191c6:	b1f8      	cbz	r0, 8019208 <rcl_clock_add_jump_callback+0x5c>
 80191c8:	b1f7      	cbz	r7, 8019208 <rcl_clock_add_jump_callback+0x5c>
 80191ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	db1b      	blt.n	8019208 <rcl_clock_add_jump_callback+0x5c>
 80191d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80191d4:	2a01      	cmp	r2, #1
 80191d6:	f173 0300 	sbcs.w	r3, r3, #0
 80191da:	da15      	bge.n	8019208 <rcl_clock_add_jump_callback+0x5c>
 80191dc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80191e0:	2c00      	cmp	r4, #0
 80191e2:	d042      	beq.n	801926a <rcl_clock_add_jump_callback+0xbe>
 80191e4:	4603      	mov	r3, r0
 80191e6:	2200      	movs	r2, #0
 80191e8:	e003      	b.n	80191f2 <rcl_clock_add_jump_callback+0x46>
 80191ea:	4294      	cmp	r4, r2
 80191ec:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80191f0:	d011      	beq.n	8019216 <rcl_clock_add_jump_callback+0x6a>
 80191f2:	6819      	ldr	r1, [r3, #0]
 80191f4:	42b9      	cmp	r1, r7
 80191f6:	f102 0201 	add.w	r2, r2, #1
 80191fa:	d1f6      	bne.n	80191ea <rcl_clock_add_jump_callback+0x3e>
 80191fc:	6a19      	ldr	r1, [r3, #32]
 80191fe:	42b1      	cmp	r1, r6
 8019200:	d1f3      	bne.n	80191ea <rcl_clock_add_jump_callback+0x3e>
 8019202:	f04f 0e01 	mov.w	lr, #1
 8019206:	e001      	b.n	801920c <rcl_clock_add_jump_callback+0x60>
 8019208:	f04f 0e0b 	mov.w	lr, #11
 801920c:	4670      	mov	r0, lr
 801920e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019212:	b002      	add	sp, #8
 8019214:	4770      	bx	lr
 8019216:	3401      	adds	r4, #1
 8019218:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801921c:	00e1      	lsls	r1, r4, #3
 801921e:	69eb      	ldr	r3, [r5, #28]
 8019220:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019222:	4798      	blx	r3
 8019224:	b1f0      	cbz	r0, 8019264 <rcl_clock_add_jump_callback+0xb8>
 8019226:	68ab      	ldr	r3, [r5, #8]
 8019228:	6068      	str	r0, [r5, #4]
 801922a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801922e:	f10d 0c18 	add.w	ip, sp, #24
 8019232:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8019236:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 801923a:	f103 0801 	add.w	r8, r3, #1
 801923e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019242:	f104 0708 	add.w	r7, r4, #8
 8019246:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019248:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801924c:	f04f 0e00 	mov.w	lr, #0
 8019250:	e887 0003 	stmia.w	r7, {r0, r1}
 8019254:	6226      	str	r6, [r4, #32]
 8019256:	4670      	mov	r0, lr
 8019258:	f8c5 8008 	str.w	r8, [r5, #8]
 801925c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019260:	b002      	add	sp, #8
 8019262:	4770      	bx	lr
 8019264:	f04f 0e0a 	mov.w	lr, #10
 8019268:	e7d0      	b.n	801920c <rcl_clock_add_jump_callback+0x60>
 801926a:	2128      	movs	r1, #40	@ 0x28
 801926c:	e7d7      	b.n	801921e <rcl_clock_add_jump_callback+0x72>
 801926e:	bf00      	nop

08019270 <rcl_clock_remove_jump_callback>:
 8019270:	2800      	cmp	r0, #0
 8019272:	d05a      	beq.n	801932a <rcl_clock_remove_jump_callback+0xba>
 8019274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019278:	4605      	mov	r5, r0
 801927a:	3014      	adds	r0, #20
 801927c:	460f      	mov	r7, r1
 801927e:	4692      	mov	sl, r2
 8019280:	f7f7 fa32 	bl	80106e8 <rcutils_allocator_is_valid>
 8019284:	2800      	cmp	r0, #0
 8019286:	d03f      	beq.n	8019308 <rcl_clock_remove_jump_callback+0x98>
 8019288:	2f00      	cmp	r7, #0
 801928a:	d03d      	beq.n	8019308 <rcl_clock_remove_jump_callback+0x98>
 801928c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8019290:	f1b8 0f00 	cmp.w	r8, #0
 8019294:	d00c      	beq.n	80192b0 <rcl_clock_remove_jump_callback+0x40>
 8019296:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801929a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801929e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80192a2:	464c      	mov	r4, r9
 80192a4:	6823      	ldr	r3, [r4, #0]
 80192a6:	42bb      	cmp	r3, r7
 80192a8:	d005      	beq.n	80192b6 <rcl_clock_remove_jump_callback+0x46>
 80192aa:	3428      	adds	r4, #40	@ 0x28
 80192ac:	42b4      	cmp	r4, r6
 80192ae:	d1f9      	bne.n	80192a4 <rcl_clock_remove_jump_callback+0x34>
 80192b0:	2001      	movs	r0, #1
 80192b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192b6:	6a23      	ldr	r3, [r4, #32]
 80192b8:	3428      	adds	r4, #40	@ 0x28
 80192ba:	42b4      	cmp	r4, r6
 80192bc:	d02c      	beq.n	8019318 <rcl_clock_remove_jump_callback+0xa8>
 80192be:	4553      	cmp	r3, sl
 80192c0:	d1f0      	bne.n	80192a4 <rcl_clock_remove_jump_callback+0x34>
 80192c2:	46a6      	mov	lr, r4
 80192c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80192c8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80192cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80192d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80192dc:	3428      	adds	r4, #40	@ 0x28
 80192de:	42a6      	cmp	r6, r4
 80192e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80192e4:	d1ed      	bne.n	80192c2 <rcl_clock_remove_jump_callback+0x52>
 80192e6:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80192ea:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80192ec:	60ac      	str	r4, [r5, #8]
 80192ee:	b174      	cbz	r4, 801930e <rcl_clock_remove_jump_callback+0x9e>
 80192f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80192f4:	00e1      	lsls	r1, r4, #3
 80192f6:	69eb      	ldr	r3, [r5, #28]
 80192f8:	4648      	mov	r0, r9
 80192fa:	4798      	blx	r3
 80192fc:	4604      	mov	r4, r0
 80192fe:	b1b0      	cbz	r0, 801932e <rcl_clock_remove_jump_callback+0xbe>
 8019300:	606c      	str	r4, [r5, #4]
 8019302:	2000      	movs	r0, #0
 8019304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019308:	200b      	movs	r0, #11
 801930a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801930e:	69ab      	ldr	r3, [r5, #24]
 8019310:	4611      	mov	r1, r2
 8019312:	4648      	mov	r0, r9
 8019314:	4798      	blx	r3
 8019316:	e7f3      	b.n	8019300 <rcl_clock_remove_jump_callback+0x90>
 8019318:	4553      	cmp	r3, sl
 801931a:	d1c9      	bne.n	80192b0 <rcl_clock_remove_jump_callback+0x40>
 801931c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8019320:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019322:	60ac      	str	r4, [r5, #8]
 8019324:	2c00      	cmp	r4, #0
 8019326:	d1e3      	bne.n	80192f0 <rcl_clock_remove_jump_callback+0x80>
 8019328:	e7f1      	b.n	801930e <rcl_clock_remove_jump_callback+0x9e>
 801932a:	200b      	movs	r0, #11
 801932c:	4770      	bx	lr
 801932e:	200a      	movs	r0, #10
 8019330:	e7eb      	b.n	801930a <rcl_clock_remove_jump_callback+0x9a>
 8019332:	bf00      	nop

08019334 <rcl_validate_enclave_name_with_size>:
 8019334:	2800      	cmp	r0, #0
 8019336:	d037      	beq.n	80193a8 <rcl_validate_enclave_name_with_size+0x74>
 8019338:	b570      	push	{r4, r5, r6, lr}
 801933a:	4614      	mov	r4, r2
 801933c:	b0c2      	sub	sp, #264	@ 0x108
 801933e:	b342      	cbz	r2, 8019392 <rcl_validate_enclave_name_with_size+0x5e>
 8019340:	461e      	mov	r6, r3
 8019342:	466a      	mov	r2, sp
 8019344:	ab01      	add	r3, sp, #4
 8019346:	460d      	mov	r5, r1
 8019348:	f7f7 fcf8 	bl	8010d3c <rmw_validate_namespace_with_size>
 801934c:	4684      	mov	ip, r0
 801934e:	bb28      	cbnz	r0, 801939c <rcl_validate_enclave_name_with_size+0x68>
 8019350:	9b00      	ldr	r3, [sp, #0]
 8019352:	b923      	cbnz	r3, 801935e <rcl_validate_enclave_name_with_size+0x2a>
 8019354:	2300      	movs	r3, #0
 8019356:	6023      	str	r3, [r4, #0]
 8019358:	4660      	mov	r0, ip
 801935a:	b042      	add	sp, #264	@ 0x108
 801935c:	bd70      	pop	{r4, r5, r6, pc}
 801935e:	2b07      	cmp	r3, #7
 8019360:	d00f      	beq.n	8019382 <rcl_validate_enclave_name_with_size+0x4e>
 8019362:	1e5a      	subs	r2, r3, #1
 8019364:	2a05      	cmp	r2, #5
 8019366:	d823      	bhi.n	80193b0 <rcl_validate_enclave_name_with_size+0x7c>
 8019368:	e8df f002 	tbb	[pc, r2]
 801936c:	03030303 	.word	0x03030303
 8019370:	0303      	.short	0x0303
 8019372:	6023      	str	r3, [r4, #0]
 8019374:	2e00      	cmp	r6, #0
 8019376:	d0ef      	beq.n	8019358 <rcl_validate_enclave_name_with_size+0x24>
 8019378:	9b01      	ldr	r3, [sp, #4]
 801937a:	6033      	str	r3, [r6, #0]
 801937c:	4660      	mov	r0, ip
 801937e:	b042      	add	sp, #264	@ 0x108
 8019380:	bd70      	pop	{r4, r5, r6, pc}
 8019382:	2dff      	cmp	r5, #255	@ 0xff
 8019384:	d9e6      	bls.n	8019354 <rcl_validate_enclave_name_with_size+0x20>
 8019386:	6023      	str	r3, [r4, #0]
 8019388:	2e00      	cmp	r6, #0
 801938a:	d0e5      	beq.n	8019358 <rcl_validate_enclave_name_with_size+0x24>
 801938c:	23fe      	movs	r3, #254	@ 0xfe
 801938e:	6033      	str	r3, [r6, #0]
 8019390:	e7e2      	b.n	8019358 <rcl_validate_enclave_name_with_size+0x24>
 8019392:	f04f 0c0b 	mov.w	ip, #11
 8019396:	4660      	mov	r0, ip
 8019398:	b042      	add	sp, #264	@ 0x108
 801939a:	bd70      	pop	{r4, r5, r6, pc}
 801939c:	f7ff f85e 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 80193a0:	4684      	mov	ip, r0
 80193a2:	4660      	mov	r0, ip
 80193a4:	b042      	add	sp, #264	@ 0x108
 80193a6:	bd70      	pop	{r4, r5, r6, pc}
 80193a8:	f04f 0c0b 	mov.w	ip, #11
 80193ac:	4660      	mov	r0, ip
 80193ae:	4770      	bx	lr
 80193b0:	4a04      	ldr	r2, [pc, #16]	@ (80193c4 <rcl_validate_enclave_name_with_size+0x90>)
 80193b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80193b6:	a802      	add	r0, sp, #8
 80193b8:	f7f7 fb88 	bl	8010acc <rcutils_snprintf>
 80193bc:	f04f 0c01 	mov.w	ip, #1
 80193c0:	e7ca      	b.n	8019358 <rcl_validate_enclave_name_with_size+0x24>
 80193c2:	bf00      	nop
 80193c4:	080210f0 	.word	0x080210f0

080193c8 <rcl_validate_enclave_name>:
 80193c8:	b168      	cbz	r0, 80193e6 <rcl_validate_enclave_name+0x1e>
 80193ca:	b570      	push	{r4, r5, r6, lr}
 80193cc:	460d      	mov	r5, r1
 80193ce:	4616      	mov	r6, r2
 80193d0:	4604      	mov	r4, r0
 80193d2:	f7e6 ff85 	bl	80002e0 <strlen>
 80193d6:	4633      	mov	r3, r6
 80193d8:	4601      	mov	r1, r0
 80193da:	462a      	mov	r2, r5
 80193dc:	4620      	mov	r0, r4
 80193de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193e2:	f7ff bfa7 	b.w	8019334 <rcl_validate_enclave_name_with_size>
 80193e6:	200b      	movs	r0, #11
 80193e8:	4770      	bx	lr
 80193ea:	bf00      	nop

080193ec <rcl_get_zero_initialized_wait_set>:
 80193ec:	b510      	push	{r4, lr}
 80193ee:	4c08      	ldr	r4, [pc, #32]	@ (8019410 <rcl_get_zero_initialized_wait_set+0x24>)
 80193f0:	4686      	mov	lr, r0
 80193f2:	4684      	mov	ip, r0
 80193f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80193f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80193fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80193fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019402:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019406:	6823      	ldr	r3, [r4, #0]
 8019408:	f8cc 3000 	str.w	r3, [ip]
 801940c:	4670      	mov	r0, lr
 801940e:	bd10      	pop	{r4, pc}
 8019410:	08021150 	.word	0x08021150

08019414 <rcl_wait_set_is_valid>:
 8019414:	b118      	cbz	r0, 801941e <rcl_wait_set_is_valid+0xa>
 8019416:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019418:	3800      	subs	r0, #0
 801941a:	bf18      	it	ne
 801941c:	2001      	movne	r0, #1
 801941e:	4770      	bx	lr

08019420 <rcl_wait_set_fini>:
 8019420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019424:	b083      	sub	sp, #12
 8019426:	2800      	cmp	r0, #0
 8019428:	f000 8098 	beq.w	801955c <rcl_wait_set_fini+0x13c>
 801942c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801942e:	4605      	mov	r5, r0
 8019430:	2e00      	cmp	r6, #0
 8019432:	f000 808f 	beq.w	8019554 <rcl_wait_set_fini+0x134>
 8019436:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8019438:	f002 fb62 	bl	801bb00 <rmw_destroy_wait_set>
 801943c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801943e:	1e06      	subs	r6, r0, #0
 8019440:	bf18      	it	ne
 8019442:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8019446:	2c00      	cmp	r4, #0
 8019448:	f000 8084 	beq.w	8019554 <rcl_wait_set_fini+0x134>
 801944c:	6828      	ldr	r0, [r5, #0]
 801944e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8019452:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019456:	2700      	movs	r7, #0
 8019458:	606f      	str	r7, [r5, #4]
 801945a:	6027      	str	r7, [r4, #0]
 801945c:	b118      	cbz	r0, 8019466 <rcl_wait_set_fini+0x46>
 801945e:	4649      	mov	r1, r9
 8019460:	47c0      	blx	r8
 8019462:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019464:	602f      	str	r7, [r5, #0]
 8019466:	68a0      	ldr	r0, [r4, #8]
 8019468:	b128      	cbz	r0, 8019476 <rcl_wait_set_fini+0x56>
 801946a:	4649      	mov	r1, r9
 801946c:	47c0      	blx	r8
 801946e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019470:	2300      	movs	r3, #0
 8019472:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8019476:	68a8      	ldr	r0, [r5, #8]
 8019478:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801947a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801947c:	f04f 0800 	mov.w	r8, #0
 8019480:	f8c5 800c 	str.w	r8, [r5, #12]
 8019484:	f8c4 800c 	str.w	r8, [r4, #12]
 8019488:	b128      	cbz	r0, 8019496 <rcl_wait_set_fini+0x76>
 801948a:	47b8      	blx	r7
 801948c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801948e:	f8c5 8008 	str.w	r8, [r5, #8]
 8019492:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8019494:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8019496:	6960      	ldr	r0, [r4, #20]
 8019498:	f04f 0800 	mov.w	r8, #0
 801949c:	f8c4 8010 	str.w	r8, [r4, #16]
 80194a0:	b128      	cbz	r0, 80194ae <rcl_wait_set_fini+0x8e>
 80194a2:	47b8      	blx	r7
 80194a4:	f8c4 8014 	str.w	r8, [r4, #20]
 80194a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80194aa:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80194ac:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80194ae:	6928      	ldr	r0, [r5, #16]
 80194b0:	f04f 0800 	mov.w	r8, #0
 80194b4:	f8c5 8014 	str.w	r8, [r5, #20]
 80194b8:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 80194bc:	b128      	cbz	r0, 80194ca <rcl_wait_set_fini+0xaa>
 80194be:	47b8      	blx	r7
 80194c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80194c2:	f8c5 8010 	str.w	r8, [r5, #16]
 80194c6:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80194c8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80194ca:	69a8      	ldr	r0, [r5, #24]
 80194cc:	f04f 0800 	mov.w	r8, #0
 80194d0:	f8c5 801c 	str.w	r8, [r5, #28]
 80194d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80194d8:	b128      	cbz	r0, 80194e6 <rcl_wait_set_fini+0xc6>
 80194da:	9101      	str	r1, [sp, #4]
 80194dc:	47b8      	blx	r7
 80194de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80194e0:	9901      	ldr	r1, [sp, #4]
 80194e2:	f8c5 8018 	str.w	r8, [r5, #24]
 80194e6:	6a20      	ldr	r0, [r4, #32]
 80194e8:	b120      	cbz	r0, 80194f4 <rcl_wait_set_fini+0xd4>
 80194ea:	47b8      	blx	r7
 80194ec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80194ee:	2300      	movs	r3, #0
 80194f0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80194f4:	6a28      	ldr	r0, [r5, #32]
 80194f6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 80194fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80194fe:	2700      	movs	r7, #0
 8019500:	626f      	str	r7, [r5, #36]	@ 0x24
 8019502:	6267      	str	r7, [r4, #36]	@ 0x24
 8019504:	b118      	cbz	r0, 801950e <rcl_wait_set_fini+0xee>
 8019506:	4649      	mov	r1, r9
 8019508:	47c0      	blx	r8
 801950a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801950c:	622f      	str	r7, [r5, #32]
 801950e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019510:	b128      	cbz	r0, 801951e <rcl_wait_set_fini+0xfe>
 8019512:	4649      	mov	r1, r9
 8019514:	47c0      	blx	r8
 8019516:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019518:	2300      	movs	r3, #0
 801951a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801951e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019520:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8019524:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019528:	2700      	movs	r7, #0
 801952a:	62ef      	str	r7, [r5, #44]	@ 0x2c
 801952c:	6327      	str	r7, [r4, #48]	@ 0x30
 801952e:	b118      	cbz	r0, 8019538 <rcl_wait_set_fini+0x118>
 8019530:	4649      	mov	r1, r9
 8019532:	47c0      	blx	r8
 8019534:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019536:	62af      	str	r7, [r5, #40]	@ 0x28
 8019538:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801953a:	b128      	cbz	r0, 8019548 <rcl_wait_set_fini+0x128>
 801953c:	4649      	mov	r1, r9
 801953e:	47c0      	blx	r8
 8019540:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019542:	2300      	movs	r3, #0
 8019544:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8019548:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801954a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801954c:	4620      	mov	r0, r4
 801954e:	4798      	blx	r3
 8019550:	2300      	movs	r3, #0
 8019552:	632b      	str	r3, [r5, #48]	@ 0x30
 8019554:	4630      	mov	r0, r6
 8019556:	b003      	add	sp, #12
 8019558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801955c:	260b      	movs	r6, #11
 801955e:	4630      	mov	r0, r6
 8019560:	b003      	add	sp, #12
 8019562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019566:	bf00      	nop

08019568 <rcl_wait_set_add_subscription>:
 8019568:	b318      	cbz	r0, 80195b2 <rcl_wait_set_add_subscription+0x4a>
 801956a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801956c:	b570      	push	{r4, r5, r6, lr}
 801956e:	4604      	mov	r4, r0
 8019570:	b30b      	cbz	r3, 80195b6 <rcl_wait_set_add_subscription+0x4e>
 8019572:	b319      	cbz	r1, 80195bc <rcl_wait_set_add_subscription+0x54>
 8019574:	681d      	ldr	r5, [r3, #0]
 8019576:	6840      	ldr	r0, [r0, #4]
 8019578:	4285      	cmp	r5, r0
 801957a:	d217      	bcs.n	80195ac <rcl_wait_set_add_subscription+0x44>
 801957c:	6820      	ldr	r0, [r4, #0]
 801957e:	1c6e      	adds	r6, r5, #1
 8019580:	601e      	str	r6, [r3, #0]
 8019582:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019586:	b102      	cbz	r2, 801958a <rcl_wait_set_add_subscription+0x22>
 8019588:	6015      	str	r5, [r2, #0]
 801958a:	4608      	mov	r0, r1
 801958c:	f7f5 fe9c 	bl	800f2c8 <rcl_subscription_get_rmw_handle>
 8019590:	b150      	cbz	r0, 80195a8 <rcl_wait_set_add_subscription+0x40>
 8019592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019594:	6842      	ldr	r2, [r0, #4]
 8019596:	689b      	ldr	r3, [r3, #8]
 8019598:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801959c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801959e:	6853      	ldr	r3, [r2, #4]
 80195a0:	3301      	adds	r3, #1
 80195a2:	2000      	movs	r0, #0
 80195a4:	6053      	str	r3, [r2, #4]
 80195a6:	bd70      	pop	{r4, r5, r6, pc}
 80195a8:	2001      	movs	r0, #1
 80195aa:	bd70      	pop	{r4, r5, r6, pc}
 80195ac:	f240 3086 	movw	r0, #902	@ 0x386
 80195b0:	bd70      	pop	{r4, r5, r6, pc}
 80195b2:	200b      	movs	r0, #11
 80195b4:	4770      	bx	lr
 80195b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80195ba:	bd70      	pop	{r4, r5, r6, pc}
 80195bc:	200b      	movs	r0, #11
 80195be:	bd70      	pop	{r4, r5, r6, pc}

080195c0 <rcl_wait_set_clear>:
 80195c0:	2800      	cmp	r0, #0
 80195c2:	d074      	beq.n	80196ae <rcl_wait_set_clear+0xee>
 80195c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80195c6:	b510      	push	{r4, lr}
 80195c8:	4604      	mov	r4, r0
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d071      	beq.n	80196b2 <rcl_wait_set_clear+0xf2>
 80195ce:	6800      	ldr	r0, [r0, #0]
 80195d0:	b138      	cbz	r0, 80195e2 <rcl_wait_set_clear+0x22>
 80195d2:	6862      	ldr	r2, [r4, #4]
 80195d4:	2100      	movs	r1, #0
 80195d6:	0092      	lsls	r2, r2, #2
 80195d8:	f004 fb82 	bl	801dce0 <memset>
 80195dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80195de:	2200      	movs	r2, #0
 80195e0:	601a      	str	r2, [r3, #0]
 80195e2:	68a0      	ldr	r0, [r4, #8]
 80195e4:	b138      	cbz	r0, 80195f6 <rcl_wait_set_clear+0x36>
 80195e6:	68e2      	ldr	r2, [r4, #12]
 80195e8:	2100      	movs	r1, #0
 80195ea:	0092      	lsls	r2, r2, #2
 80195ec:	f004 fb78 	bl	801dce0 <memset>
 80195f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80195f2:	2200      	movs	r2, #0
 80195f4:	60da      	str	r2, [r3, #12]
 80195f6:	69a0      	ldr	r0, [r4, #24]
 80195f8:	b138      	cbz	r0, 801960a <rcl_wait_set_clear+0x4a>
 80195fa:	69e2      	ldr	r2, [r4, #28]
 80195fc:	2100      	movs	r1, #0
 80195fe:	0092      	lsls	r2, r2, #2
 8019600:	f004 fb6e 	bl	801dce0 <memset>
 8019604:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019606:	2200      	movs	r2, #0
 8019608:	619a      	str	r2, [r3, #24]
 801960a:	6a20      	ldr	r0, [r4, #32]
 801960c:	b138      	cbz	r0, 801961e <rcl_wait_set_clear+0x5e>
 801960e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8019610:	2100      	movs	r1, #0
 8019612:	0092      	lsls	r2, r2, #2
 8019614:	f004 fb64 	bl	801dce0 <memset>
 8019618:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801961a:	2200      	movs	r2, #0
 801961c:	625a      	str	r2, [r3, #36]	@ 0x24
 801961e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019620:	b138      	cbz	r0, 8019632 <rcl_wait_set_clear+0x72>
 8019622:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019624:	2100      	movs	r1, #0
 8019626:	0092      	lsls	r2, r2, #2
 8019628:	f004 fb5a 	bl	801dce0 <memset>
 801962c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801962e:	2200      	movs	r2, #0
 8019630:	631a      	str	r2, [r3, #48]	@ 0x30
 8019632:	6920      	ldr	r0, [r4, #16]
 8019634:	b138      	cbz	r0, 8019646 <rcl_wait_set_clear+0x86>
 8019636:	6962      	ldr	r2, [r4, #20]
 8019638:	2100      	movs	r1, #0
 801963a:	0092      	lsls	r2, r2, #2
 801963c:	f004 fb50 	bl	801dce0 <memset>
 8019640:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019642:	2200      	movs	r2, #0
 8019644:	641a      	str	r2, [r3, #64]	@ 0x40
 8019646:	6898      	ldr	r0, [r3, #8]
 8019648:	b138      	cbz	r0, 801965a <rcl_wait_set_clear+0x9a>
 801964a:	685a      	ldr	r2, [r3, #4]
 801964c:	2100      	movs	r1, #0
 801964e:	0092      	lsls	r2, r2, #2
 8019650:	f004 fb46 	bl	801dce0 <memset>
 8019654:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019656:	2200      	movs	r2, #0
 8019658:	605a      	str	r2, [r3, #4]
 801965a:	6958      	ldr	r0, [r3, #20]
 801965c:	b138      	cbz	r0, 801966e <rcl_wait_set_clear+0xae>
 801965e:	691a      	ldr	r2, [r3, #16]
 8019660:	2100      	movs	r1, #0
 8019662:	0092      	lsls	r2, r2, #2
 8019664:	f004 fb3c 	bl	801dce0 <memset>
 8019668:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801966a:	2200      	movs	r2, #0
 801966c:	611a      	str	r2, [r3, #16]
 801966e:	6a18      	ldr	r0, [r3, #32]
 8019670:	b138      	cbz	r0, 8019682 <rcl_wait_set_clear+0xc2>
 8019672:	69da      	ldr	r2, [r3, #28]
 8019674:	2100      	movs	r1, #0
 8019676:	0092      	lsls	r2, r2, #2
 8019678:	f004 fb32 	bl	801dce0 <memset>
 801967c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801967e:	2200      	movs	r2, #0
 8019680:	61da      	str	r2, [r3, #28]
 8019682:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019684:	b138      	cbz	r0, 8019696 <rcl_wait_set_clear+0xd6>
 8019686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019688:	2100      	movs	r1, #0
 801968a:	0092      	lsls	r2, r2, #2
 801968c:	f004 fb28 	bl	801dce0 <memset>
 8019690:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019692:	2200      	movs	r2, #0
 8019694:	629a      	str	r2, [r3, #40]	@ 0x28
 8019696:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8019698:	b138      	cbz	r0, 80196aa <rcl_wait_set_clear+0xea>
 801969a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801969c:	2100      	movs	r1, #0
 801969e:	0092      	lsls	r2, r2, #2
 80196a0:	f004 fb1e 	bl	801dce0 <memset>
 80196a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80196a6:	2200      	movs	r2, #0
 80196a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80196aa:	2000      	movs	r0, #0
 80196ac:	bd10      	pop	{r4, pc}
 80196ae:	200b      	movs	r0, #11
 80196b0:	4770      	bx	lr
 80196b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80196b6:	bd10      	pop	{r4, pc}

080196b8 <rcl_wait_set_resize>:
 80196b8:	2800      	cmp	r0, #0
 80196ba:	f000 81a1 	beq.w	8019a00 <rcl_wait_set_resize+0x348>
 80196be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 80196c6:	b083      	sub	sp, #12
 80196c8:	4604      	mov	r4, r0
 80196ca:	f1ba 0f00 	cmp.w	sl, #0
 80196ce:	f000 8199 	beq.w	8019a04 <rcl_wait_set_resize+0x34c>
 80196d2:	f04f 0800 	mov.w	r8, #0
 80196d6:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 80196da:	461e      	mov	r6, r3
 80196dc:	460f      	mov	r7, r1
 80196de:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 80196e2:	4615      	mov	r5, r2
 80196e4:	f8c0 8004 	str.w	r8, [r0, #4]
 80196e8:	6800      	ldr	r0, [r0, #0]
 80196ea:	f8ca 8000 	str.w	r8, [sl]
 80196ee:	2900      	cmp	r1, #0
 80196f0:	f000 80cf 	beq.w	8019892 <rcl_wait_set_resize+0x1da>
 80196f4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80196f8:	464a      	mov	r2, r9
 80196fa:	4651      	mov	r1, sl
 80196fc:	9301      	str	r3, [sp, #4]
 80196fe:	4798      	blx	r3
 8019700:	9b01      	ldr	r3, [sp, #4]
 8019702:	6020      	str	r0, [r4, #0]
 8019704:	2800      	cmp	r0, #0
 8019706:	f000 8109 	beq.w	801991c <rcl_wait_set_resize+0x264>
 801970a:	4652      	mov	r2, sl
 801970c:	4641      	mov	r1, r8
 801970e:	9301      	str	r3, [sp, #4]
 8019710:	f004 fae6 	bl	801dce0 <memset>
 8019714:	6067      	str	r7, [r4, #4]
 8019716:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8019718:	9b01      	ldr	r3, [sp, #4]
 801971a:	68b8      	ldr	r0, [r7, #8]
 801971c:	f8c7 8004 	str.w	r8, [r7, #4]
 8019720:	464a      	mov	r2, r9
 8019722:	4651      	mov	r1, sl
 8019724:	4798      	blx	r3
 8019726:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019728:	60b8      	str	r0, [r7, #8]
 801972a:	689f      	ldr	r7, [r3, #8]
 801972c:	2f00      	cmp	r7, #0
 801972e:	f000 80f0 	beq.w	8019912 <rcl_wait_set_resize+0x25a>
 8019732:	4652      	mov	r2, sl
 8019734:	4641      	mov	r1, r8
 8019736:	4638      	mov	r0, r7
 8019738:	f004 fad2 	bl	801dce0 <memset>
 801973c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019740:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019744:	68a0      	ldr	r0, [r4, #8]
 8019746:	2700      	movs	r7, #0
 8019748:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 801974c:	60e7      	str	r7, [r4, #12]
 801974e:	f8ca 700c 	str.w	r7, [sl, #12]
 8019752:	2d00      	cmp	r5, #0
 8019754:	f040 80b0 	bne.w	80198b8 <rcl_wait_set_resize+0x200>
 8019758:	b130      	cbz	r0, 8019768 <rcl_wait_set_resize+0xb0>
 801975a:	4641      	mov	r1, r8
 801975c:	4790      	blx	r2
 801975e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019762:	60a5      	str	r5, [r4, #8]
 8019764:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019768:	f8da 0014 	ldr.w	r0, [sl, #20]
 801976c:	2700      	movs	r7, #0
 801976e:	19ad      	adds	r5, r5, r6
 8019770:	f8ca 7010 	str.w	r7, [sl, #16]
 8019774:	f040 80b8 	bne.w	80198e8 <rcl_wait_set_resize+0x230>
 8019778:	b148      	cbz	r0, 801978e <rcl_wait_set_resize+0xd6>
 801977a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 801977e:	4641      	mov	r1, r8
 8019780:	4798      	blx	r3
 8019782:	f8ca 5014 	str.w	r5, [sl, #20]
 8019786:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801978a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801978e:	6920      	ldr	r0, [r4, #16]
 8019790:	2500      	movs	r5, #0
 8019792:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019796:	6165      	str	r5, [r4, #20]
 8019798:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 801979c:	2e00      	cmp	r6, #0
 801979e:	f040 80c1 	bne.w	8019924 <rcl_wait_set_resize+0x26c>
 80197a2:	b140      	cbz	r0, 80197b6 <rcl_wait_set_resize+0xfe>
 80197a4:	4641      	mov	r1, r8
 80197a6:	47c8      	blx	r9
 80197a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80197ac:	6126      	str	r6, [r4, #16]
 80197ae:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80197b2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80197b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80197b8:	69a0      	ldr	r0, [r4, #24]
 80197ba:	2500      	movs	r5, #0
 80197bc:	61e5      	str	r5, [r4, #28]
 80197be:	f8ca 5018 	str.w	r5, [sl, #24]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f040 80c2 	bne.w	801994c <rcl_wait_set_resize+0x294>
 80197c8:	b128      	cbz	r0, 80197d6 <rcl_wait_set_resize+0x11e>
 80197ca:	4641      	mov	r1, r8
 80197cc:	47c8      	blx	r9
 80197ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80197d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80197d4:	61a3      	str	r3, [r4, #24]
 80197d6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80197da:	b130      	cbz	r0, 80197ea <rcl_wait_set_resize+0x132>
 80197dc:	4641      	mov	r1, r8
 80197de:	47c8      	blx	r9
 80197e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80197e4:	2300      	movs	r3, #0
 80197e6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80197ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80197ec:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80197f0:	6a20      	ldr	r0, [r4, #32]
 80197f2:	2500      	movs	r5, #0
 80197f4:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80197f8:	6265      	str	r5, [r4, #36]	@ 0x24
 80197fa:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 80197fe:	2b00      	cmp	r3, #0
 8019800:	f000 80c8 	beq.w	8019994 <rcl_wait_set_resize+0x2dc>
 8019804:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8019808:	4632      	mov	r2, r6
 801980a:	4649      	mov	r1, r9
 801980c:	47c0      	blx	r8
 801980e:	6220      	str	r0, [r4, #32]
 8019810:	2800      	cmp	r0, #0
 8019812:	f000 8083 	beq.w	801991c <rcl_wait_set_resize+0x264>
 8019816:	464a      	mov	r2, r9
 8019818:	4629      	mov	r1, r5
 801981a:	f004 fa61 	bl	801dce0 <memset>
 801981e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019824:	6263      	str	r3, [r4, #36]	@ 0x24
 8019826:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801982a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 801982e:	4632      	mov	r2, r6
 8019830:	4649      	mov	r1, r9
 8019832:	47c0      	blx	r8
 8019834:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019836:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 801983a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801983c:	2b00      	cmp	r3, #0
 801983e:	f000 80fb 	beq.w	8019a38 <rcl_wait_set_resize+0x380>
 8019842:	464a      	mov	r2, r9
 8019844:	4629      	mov	r1, r5
 8019846:	4618      	mov	r0, r3
 8019848:	f004 fa4a 	bl	801dce0 <memset>
 801984c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019852:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8019856:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019858:	2500      	movs	r5, #0
 801985a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 801985e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8019860:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8019864:	2b00      	cmp	r3, #0
 8019866:	f040 80a9 	bne.w	80199bc <rcl_wait_set_resize+0x304>
 801986a:	b128      	cbz	r0, 8019878 <rcl_wait_set_resize+0x1c0>
 801986c:	4631      	mov	r1, r6
 801986e:	47b8      	blx	r7
 8019870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019872:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019876:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019878:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801987c:	b128      	cbz	r0, 801988a <rcl_wait_set_resize+0x1d2>
 801987e:	4631      	mov	r1, r6
 8019880:	47b8      	blx	r7
 8019882:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019884:	2200      	movs	r2, #0
 8019886:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 801988a:	2000      	movs	r0, #0
 801988c:	b003      	add	sp, #12
 801988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019892:	b120      	cbz	r0, 801989e <rcl_wait_set_resize+0x1e6>
 8019894:	4649      	mov	r1, r9
 8019896:	47d8      	blx	fp
 8019898:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801989c:	6027      	str	r7, [r4, #0]
 801989e:	f8da 0008 	ldr.w	r0, [sl, #8]
 80198a2:	2800      	cmp	r0, #0
 80198a4:	f43f af4c 	beq.w	8019740 <rcl_wait_set_resize+0x88>
 80198a8:	4649      	mov	r1, r9
 80198aa:	47d8      	blx	fp
 80198ac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80198b0:	2300      	movs	r3, #0
 80198b2:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80198b6:	e743      	b.n	8019740 <rcl_wait_set_resize+0x88>
 80198b8:	4642      	mov	r2, r8
 80198ba:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80198be:	4641      	mov	r1, r8
 80198c0:	4798      	blx	r3
 80198c2:	60a0      	str	r0, [r4, #8]
 80198c4:	b350      	cbz	r0, 801991c <rcl_wait_set_resize+0x264>
 80198c6:	4642      	mov	r2, r8
 80198c8:	4639      	mov	r1, r7
 80198ca:	f004 fa09 	bl	801dce0 <memset>
 80198ce:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80198d2:	60e5      	str	r5, [r4, #12]
 80198d4:	2700      	movs	r7, #0
 80198d6:	19ad      	adds	r5, r5, r6
 80198d8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80198dc:	f8da 0014 	ldr.w	r0, [sl, #20]
 80198e0:	f8ca 7010 	str.w	r7, [sl, #16]
 80198e4:	f43f af48 	beq.w	8019778 <rcl_wait_set_resize+0xc0>
 80198e8:	00ad      	lsls	r5, r5, #2
 80198ea:	4642      	mov	r2, r8
 80198ec:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 80198f0:	4629      	mov	r1, r5
 80198f2:	4798      	blx	r3
 80198f4:	4680      	mov	r8, r0
 80198f6:	f8ca 0014 	str.w	r0, [sl, #20]
 80198fa:	2800      	cmp	r0, #0
 80198fc:	f000 8085 	beq.w	8019a0a <rcl_wait_set_resize+0x352>
 8019900:	462a      	mov	r2, r5
 8019902:	4639      	mov	r1, r7
 8019904:	f004 f9ec 	bl	801dce0 <memset>
 8019908:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801990c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019910:	e73d      	b.n	801978e <rcl_wait_set_resize+0xd6>
 8019912:	6820      	ldr	r0, [r4, #0]
 8019914:	4649      	mov	r1, r9
 8019916:	47d8      	blx	fp
 8019918:	e9c4 7700 	strd	r7, r7, [r4]
 801991c:	200a      	movs	r0, #10
 801991e:	b003      	add	sp, #12
 8019920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019924:	4642      	mov	r2, r8
 8019926:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801992a:	4641      	mov	r1, r8
 801992c:	47b8      	blx	r7
 801992e:	6120      	str	r0, [r4, #16]
 8019930:	2800      	cmp	r0, #0
 8019932:	d0f3      	beq.n	801991c <rcl_wait_set_resize+0x264>
 8019934:	4642      	mov	r2, r8
 8019936:	4629      	mov	r1, r5
 8019938:	f004 f9d2 	bl	801dce0 <memset>
 801993c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019940:	6166      	str	r6, [r4, #20]
 8019942:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019946:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801994a:	e734      	b.n	80197b6 <rcl_wait_set_resize+0xfe>
 801994c:	009e      	lsls	r6, r3, #2
 801994e:	4642      	mov	r2, r8
 8019950:	4631      	mov	r1, r6
 8019952:	47b8      	blx	r7
 8019954:	61a0      	str	r0, [r4, #24]
 8019956:	2800      	cmp	r0, #0
 8019958:	d0e0      	beq.n	801991c <rcl_wait_set_resize+0x264>
 801995a:	4632      	mov	r2, r6
 801995c:	4629      	mov	r1, r5
 801995e:	f004 f9bf 	bl	801dce0 <memset>
 8019962:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019968:	61e3      	str	r3, [r4, #28]
 801996a:	f8da 0020 	ldr.w	r0, [sl, #32]
 801996e:	f8ca 501c 	str.w	r5, [sl, #28]
 8019972:	4642      	mov	r2, r8
 8019974:	4631      	mov	r1, r6
 8019976:	47b8      	blx	r7
 8019978:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801997a:	f8ca 0020 	str.w	r0, [sl, #32]
 801997e:	6a1f      	ldr	r7, [r3, #32]
 8019980:	2f00      	cmp	r7, #0
 8019982:	d053      	beq.n	8019a2c <rcl_wait_set_resize+0x374>
 8019984:	4632      	mov	r2, r6
 8019986:	4629      	mov	r1, r5
 8019988:	4638      	mov	r0, r7
 801998a:	f004 f9a9 	bl	801dce0 <memset>
 801998e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019992:	e72a      	b.n	80197ea <rcl_wait_set_resize+0x132>
 8019994:	b128      	cbz	r0, 80199a2 <rcl_wait_set_resize+0x2ea>
 8019996:	4631      	mov	r1, r6
 8019998:	47b8      	blx	r7
 801999a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801999c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80199a0:	6223      	str	r3, [r4, #32]
 80199a2:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80199a6:	2800      	cmp	r0, #0
 80199a8:	f43f af52 	beq.w	8019850 <rcl_wait_set_resize+0x198>
 80199ac:	4631      	mov	r1, r6
 80199ae:	47b8      	blx	r7
 80199b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80199b4:	2300      	movs	r3, #0
 80199b6:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 80199ba:	e749      	b.n	8019850 <rcl_wait_set_resize+0x198>
 80199bc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80199c0:	4632      	mov	r2, r6
 80199c2:	4649      	mov	r1, r9
 80199c4:	47c0      	blx	r8
 80199c6:	62a0      	str	r0, [r4, #40]	@ 0x28
 80199c8:	2800      	cmp	r0, #0
 80199ca:	d0a7      	beq.n	801991c <rcl_wait_set_resize+0x264>
 80199cc:	464a      	mov	r2, r9
 80199ce:	4629      	mov	r1, r5
 80199d0:	f004 f986 	bl	801dce0 <memset>
 80199d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80199d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80199da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80199dc:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80199e0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 80199e4:	4632      	mov	r2, r6
 80199e6:	4649      	mov	r1, r9
 80199e8:	47c0      	blx	r8
 80199ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80199ec:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80199f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80199f2:	b34b      	cbz	r3, 8019a48 <rcl_wait_set_resize+0x390>
 80199f4:	464a      	mov	r2, r9
 80199f6:	4629      	mov	r1, r5
 80199f8:	4618      	mov	r0, r3
 80199fa:	f004 f971 	bl	801dce0 <memset>
 80199fe:	e744      	b.n	801988a <rcl_wait_set_resize+0x1d2>
 8019a00:	200b      	movs	r0, #11
 8019a02:	4770      	bx	lr
 8019a04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019a08:	e789      	b.n	801991e <rcl_wait_set_resize+0x266>
 8019a0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a0c:	68a0      	ldr	r0, [r4, #8]
 8019a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019a10:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019a12:	4790      	blx	r2
 8019a14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a16:	6920      	ldr	r0, [r4, #16]
 8019a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019a1a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019a1c:	f8c4 800c 	str.w	r8, [r4, #12]
 8019a20:	f8c4 8008 	str.w	r8, [r4, #8]
 8019a24:	4790      	blx	r2
 8019a26:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8019a2a:	e777      	b.n	801991c <rcl_wait_set_resize+0x264>
 8019a2c:	69a0      	ldr	r0, [r4, #24]
 8019a2e:	4641      	mov	r1, r8
 8019a30:	47c8      	blx	r9
 8019a32:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8019a36:	e771      	b.n	801991c <rcl_wait_set_resize+0x264>
 8019a38:	6a20      	ldr	r0, [r4, #32]
 8019a3a:	9301      	str	r3, [sp, #4]
 8019a3c:	4631      	mov	r1, r6
 8019a3e:	47b8      	blx	r7
 8019a40:	9b01      	ldr	r3, [sp, #4]
 8019a42:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8019a46:	e769      	b.n	801991c <rcl_wait_set_resize+0x264>
 8019a48:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019a4a:	9301      	str	r3, [sp, #4]
 8019a4c:	4631      	mov	r1, r6
 8019a4e:	47b8      	blx	r7
 8019a50:	9b01      	ldr	r3, [sp, #4]
 8019a52:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8019a56:	e761      	b.n	801991c <rcl_wait_set_resize+0x264>

08019a58 <rcl_wait_set_init>:
 8019a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a5c:	b084      	sub	sp, #16
 8019a5e:	4604      	mov	r4, r0
 8019a60:	a810      	add	r0, sp, #64	@ 0x40
 8019a62:	460d      	mov	r5, r1
 8019a64:	4690      	mov	r8, r2
 8019a66:	461f      	mov	r7, r3
 8019a68:	f7f6 fe3e 	bl	80106e8 <rcutils_allocator_is_valid>
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	d06c      	beq.n	8019b4a <rcl_wait_set_init+0xf2>
 8019a70:	2c00      	cmp	r4, #0
 8019a72:	d06a      	beq.n	8019b4a <rcl_wait_set_init+0xf2>
 8019a74:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8019a76:	b126      	cbz	r6, 8019a82 <rcl_wait_set_init+0x2a>
 8019a78:	2564      	movs	r5, #100	@ 0x64
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	b004      	add	sp, #16
 8019a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d060      	beq.n	8019b4a <rcl_wait_set_init+0xf2>
 8019a88:	4618      	mov	r0, r3
 8019a8a:	f7fe fd07 	bl	801849c <rcl_context_is_valid>
 8019a8e:	2800      	cmp	r0, #0
 8019a90:	d060      	beq.n	8019b54 <rcl_wait_set_init+0xfc>
 8019a92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019a94:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8019a96:	205c      	movs	r0, #92	@ 0x5c
 8019a98:	4798      	blx	r3
 8019a9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8019a9c:	2800      	cmp	r0, #0
 8019a9e:	d063      	beq.n	8019b68 <rcl_wait_set_init+0x110>
 8019aa0:	4631      	mov	r1, r6
 8019aa2:	225c      	movs	r2, #92	@ 0x5c
 8019aa4:	f004 f91c 	bl	801dce0 <memset>
 8019aa8:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8019aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019aae:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8019ab2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8019ab6:	eb03 0e02 	add.w	lr, r3, r2
 8019aba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019abc:	449e      	add	lr, r3
 8019abe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ac0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8019ac4:	f8d3 a000 	ldr.w	sl, [r3]
 8019ac8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019acc:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8019ad0:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8019ad4:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8019ad8:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8019adc:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8019ae0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8019ae4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019ae6:	44c6      	add	lr, r8
 8019ae8:	f8dc 3000 	ldr.w	r3, [ip]
 8019aec:	6033      	str	r3, [r6, #0]
 8019aee:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8019af2:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8019af6:	f001 fff9 	bl	801baec <rmw_create_wait_set>
 8019afa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019afc:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8019b00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019b02:	b348      	cbz	r0, 8019b58 <rcl_wait_set_init+0x100>
 8019b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b06:	9302      	str	r3, [sp, #8]
 8019b08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b0a:	9301      	str	r3, [sp, #4]
 8019b0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b0e:	9300      	str	r3, [sp, #0]
 8019b10:	4629      	mov	r1, r5
 8019b12:	463b      	mov	r3, r7
 8019b14:	4642      	mov	r2, r8
 8019b16:	4620      	mov	r0, r4
 8019b18:	f7ff fdce 	bl	80196b8 <rcl_wait_set_resize>
 8019b1c:	4605      	mov	r5, r0
 8019b1e:	2800      	cmp	r0, #0
 8019b20:	d0ab      	beq.n	8019a7a <rcl_wait_set_init+0x22>
 8019b22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019b24:	bb13      	cbnz	r3, 8019b6c <rcl_wait_set_init+0x114>
 8019b26:	2600      	movs	r6, #0
 8019b28:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8019b2c:	9600      	str	r6, [sp, #0]
 8019b2e:	4633      	mov	r3, r6
 8019b30:	4632      	mov	r2, r6
 8019b32:	4631      	mov	r1, r6
 8019b34:	4620      	mov	r0, r4
 8019b36:	f7ff fdbf 	bl	80196b8 <rcl_wait_set_resize>
 8019b3a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	d09c      	beq.n	8019a7a <rcl_wait_set_init+0x22>
 8019b40:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8019b42:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8019b44:	4798      	blx	r3
 8019b46:	6326      	str	r6, [r4, #48]	@ 0x30
 8019b48:	e797      	b.n	8019a7a <rcl_wait_set_init+0x22>
 8019b4a:	250b      	movs	r5, #11
 8019b4c:	4628      	mov	r0, r5
 8019b4e:	b004      	add	sp, #16
 8019b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b54:	2565      	movs	r5, #101	@ 0x65
 8019b56:	e790      	b.n	8019a7a <rcl_wait_set_init+0x22>
 8019b58:	2501      	movs	r5, #1
 8019b5a:	f001 ffd1 	bl	801bb00 <rmw_destroy_wait_set>
 8019b5e:	2800      	cmp	r0, #0
 8019b60:	bf18      	it	ne
 8019b62:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8019b66:	e7de      	b.n	8019b26 <rcl_wait_set_init+0xce>
 8019b68:	250a      	movs	r5, #10
 8019b6a:	e786      	b.n	8019a7a <rcl_wait_set_init+0x22>
 8019b6c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019b6e:	e7f4      	b.n	8019b5a <rcl_wait_set_init+0x102>

08019b70 <rcl_wait_set_add_guard_condition>:
 8019b70:	b318      	cbz	r0, 8019bba <rcl_wait_set_add_guard_condition+0x4a>
 8019b72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019b74:	b570      	push	{r4, r5, r6, lr}
 8019b76:	4604      	mov	r4, r0
 8019b78:	b30b      	cbz	r3, 8019bbe <rcl_wait_set_add_guard_condition+0x4e>
 8019b7a:	b319      	cbz	r1, 8019bc4 <rcl_wait_set_add_guard_condition+0x54>
 8019b7c:	68dd      	ldr	r5, [r3, #12]
 8019b7e:	68c0      	ldr	r0, [r0, #12]
 8019b80:	4285      	cmp	r5, r0
 8019b82:	d217      	bcs.n	8019bb4 <rcl_wait_set_add_guard_condition+0x44>
 8019b84:	68a0      	ldr	r0, [r4, #8]
 8019b86:	1c6e      	adds	r6, r5, #1
 8019b88:	60de      	str	r6, [r3, #12]
 8019b8a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019b8e:	b102      	cbz	r2, 8019b92 <rcl_wait_set_add_guard_condition+0x22>
 8019b90:	6015      	str	r5, [r2, #0]
 8019b92:	4608      	mov	r0, r1
 8019b94:	f7fe fe00 	bl	8018798 <rcl_guard_condition_get_rmw_handle>
 8019b98:	b150      	cbz	r0, 8019bb0 <rcl_wait_set_add_guard_condition+0x40>
 8019b9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019b9c:	6842      	ldr	r2, [r0, #4]
 8019b9e:	695b      	ldr	r3, [r3, #20]
 8019ba0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019ba4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019ba6:	6913      	ldr	r3, [r2, #16]
 8019ba8:	3301      	adds	r3, #1
 8019baa:	2000      	movs	r0, #0
 8019bac:	6113      	str	r3, [r2, #16]
 8019bae:	bd70      	pop	{r4, r5, r6, pc}
 8019bb0:	2001      	movs	r0, #1
 8019bb2:	bd70      	pop	{r4, r5, r6, pc}
 8019bb4:	f240 3086 	movw	r0, #902	@ 0x386
 8019bb8:	bd70      	pop	{r4, r5, r6, pc}
 8019bba:	200b      	movs	r0, #11
 8019bbc:	4770      	bx	lr
 8019bbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019bc2:	bd70      	pop	{r4, r5, r6, pc}
 8019bc4:	200b      	movs	r0, #11
 8019bc6:	bd70      	pop	{r4, r5, r6, pc}

08019bc8 <rcl_wait_set_add_timer>:
 8019bc8:	b328      	cbz	r0, 8019c16 <rcl_wait_set_add_timer+0x4e>
 8019bca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019bcc:	b570      	push	{r4, r5, r6, lr}
 8019bce:	4604      	mov	r4, r0
 8019bd0:	b31b      	cbz	r3, 8019c1a <rcl_wait_set_add_timer+0x52>
 8019bd2:	b329      	cbz	r1, 8019c20 <rcl_wait_set_add_timer+0x58>
 8019bd4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8019bd6:	6965      	ldr	r5, [r4, #20]
 8019bd8:	42a8      	cmp	r0, r5
 8019bda:	d219      	bcs.n	8019c10 <rcl_wait_set_add_timer+0x48>
 8019bdc:	6925      	ldr	r5, [r4, #16]
 8019bde:	1c46      	adds	r6, r0, #1
 8019be0:	641e      	str	r6, [r3, #64]	@ 0x40
 8019be2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8019be6:	b102      	cbz	r2, 8019bea <rcl_wait_set_add_timer+0x22>
 8019be8:	6010      	str	r0, [r2, #0]
 8019bea:	4608      	mov	r0, r1
 8019bec:	f7f5 fdf0 	bl	800f7d0 <rcl_timer_get_guard_condition>
 8019bf0:	b160      	cbz	r0, 8019c0c <rcl_wait_set_add_timer+0x44>
 8019bf2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019bf4:	68e3      	ldr	r3, [r4, #12]
 8019bf6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8019bf8:	3b01      	subs	r3, #1
 8019bfa:	441d      	add	r5, r3
 8019bfc:	f7fe fdcc 	bl	8018798 <rcl_guard_condition_get_rmw_handle>
 8019c00:	b180      	cbz	r0, 8019c24 <rcl_wait_set_add_timer+0x5c>
 8019c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019c04:	6842      	ldr	r2, [r0, #4]
 8019c06:	695b      	ldr	r3, [r3, #20]
 8019c08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019c0c:	2000      	movs	r0, #0
 8019c0e:	bd70      	pop	{r4, r5, r6, pc}
 8019c10:	f240 3086 	movw	r0, #902	@ 0x386
 8019c14:	bd70      	pop	{r4, r5, r6, pc}
 8019c16:	200b      	movs	r0, #11
 8019c18:	4770      	bx	lr
 8019c1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019c1e:	bd70      	pop	{r4, r5, r6, pc}
 8019c20:	200b      	movs	r0, #11
 8019c22:	bd70      	pop	{r4, r5, r6, pc}
 8019c24:	2001      	movs	r0, #1
 8019c26:	bd70      	pop	{r4, r5, r6, pc}

08019c28 <rcl_wait_set_add_client>:
 8019c28:	b318      	cbz	r0, 8019c72 <rcl_wait_set_add_client+0x4a>
 8019c2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019c2c:	b570      	push	{r4, r5, r6, lr}
 8019c2e:	4604      	mov	r4, r0
 8019c30:	b30b      	cbz	r3, 8019c76 <rcl_wait_set_add_client+0x4e>
 8019c32:	b319      	cbz	r1, 8019c7c <rcl_wait_set_add_client+0x54>
 8019c34:	699d      	ldr	r5, [r3, #24]
 8019c36:	69c0      	ldr	r0, [r0, #28]
 8019c38:	4285      	cmp	r5, r0
 8019c3a:	d217      	bcs.n	8019c6c <rcl_wait_set_add_client+0x44>
 8019c3c:	69a0      	ldr	r0, [r4, #24]
 8019c3e:	1c6e      	adds	r6, r5, #1
 8019c40:	619e      	str	r6, [r3, #24]
 8019c42:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019c46:	b102      	cbz	r2, 8019c4a <rcl_wait_set_add_client+0x22>
 8019c48:	6015      	str	r5, [r2, #0]
 8019c4a:	4608      	mov	r0, r1
 8019c4c:	f7fe fb38 	bl	80182c0 <rcl_client_get_rmw_handle>
 8019c50:	b150      	cbz	r0, 8019c68 <rcl_wait_set_add_client+0x40>
 8019c52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019c54:	6842      	ldr	r2, [r0, #4]
 8019c56:	6a1b      	ldr	r3, [r3, #32]
 8019c58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019c5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019c5e:	69d3      	ldr	r3, [r2, #28]
 8019c60:	3301      	adds	r3, #1
 8019c62:	2000      	movs	r0, #0
 8019c64:	61d3      	str	r3, [r2, #28]
 8019c66:	bd70      	pop	{r4, r5, r6, pc}
 8019c68:	2001      	movs	r0, #1
 8019c6a:	bd70      	pop	{r4, r5, r6, pc}
 8019c6c:	f240 3086 	movw	r0, #902	@ 0x386
 8019c70:	bd70      	pop	{r4, r5, r6, pc}
 8019c72:	200b      	movs	r0, #11
 8019c74:	4770      	bx	lr
 8019c76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019c7a:	bd70      	pop	{r4, r5, r6, pc}
 8019c7c:	200b      	movs	r0, #11
 8019c7e:	bd70      	pop	{r4, r5, r6, pc}

08019c80 <rcl_wait_set_add_service>:
 8019c80:	b318      	cbz	r0, 8019cca <rcl_wait_set_add_service+0x4a>
 8019c82:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019c84:	b570      	push	{r4, r5, r6, lr}
 8019c86:	4604      	mov	r4, r0
 8019c88:	b30b      	cbz	r3, 8019cce <rcl_wait_set_add_service+0x4e>
 8019c8a:	b319      	cbz	r1, 8019cd4 <rcl_wait_set_add_service+0x54>
 8019c8c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8019c8e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019c90:	4285      	cmp	r5, r0
 8019c92:	d217      	bcs.n	8019cc4 <rcl_wait_set_add_service+0x44>
 8019c94:	6a20      	ldr	r0, [r4, #32]
 8019c96:	1c6e      	adds	r6, r5, #1
 8019c98:	625e      	str	r6, [r3, #36]	@ 0x24
 8019c9a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019c9e:	b102      	cbz	r2, 8019ca2 <rcl_wait_set_add_service+0x22>
 8019ca0:	6015      	str	r5, [r2, #0]
 8019ca2:	4608      	mov	r0, r1
 8019ca4:	f7ff f88c 	bl	8018dc0 <rcl_service_get_rmw_handle>
 8019ca8:	b150      	cbz	r0, 8019cc0 <rcl_wait_set_add_service+0x40>
 8019caa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019cac:	6842      	ldr	r2, [r0, #4]
 8019cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cb0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019cb4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019cb6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8019cb8:	3301      	adds	r3, #1
 8019cba:	2000      	movs	r0, #0
 8019cbc:	6293      	str	r3, [r2, #40]	@ 0x28
 8019cbe:	bd70      	pop	{r4, r5, r6, pc}
 8019cc0:	2001      	movs	r0, #1
 8019cc2:	bd70      	pop	{r4, r5, r6, pc}
 8019cc4:	f240 3086 	movw	r0, #902	@ 0x386
 8019cc8:	bd70      	pop	{r4, r5, r6, pc}
 8019cca:	200b      	movs	r0, #11
 8019ccc:	4770      	bx	lr
 8019cce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019cd2:	bd70      	pop	{r4, r5, r6, pc}
 8019cd4:	200b      	movs	r0, #11
 8019cd6:	bd70      	pop	{r4, r5, r6, pc}

08019cd8 <rcl_wait>:
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	f000 81d4 	beq.w	801a086 <rcl_wait+0x3ae>
 8019cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce2:	ed2d 8b02 	vpush	{d8}
 8019ce6:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8019ce8:	b099      	sub	sp, #100	@ 0x64
 8019cea:	4604      	mov	r4, r0
 8019cec:	2d00      	cmp	r5, #0
 8019cee:	f000 8178 	beq.w	8019fe2 <rcl_wait+0x30a>
 8019cf2:	461f      	mov	r7, r3
 8019cf4:	6843      	ldr	r3, [r0, #4]
 8019cf6:	4690      	mov	r8, r2
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	f000 809b 	beq.w	8019e34 <rcl_wait+0x15c>
 8019cfe:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8019d00:	2e00      	cmp	r6, #0
 8019d02:	f000 80b2 	beq.w	8019e6a <rcl_wait+0x192>
 8019d06:	2100      	movs	r1, #0
 8019d08:	468c      	mov	ip, r1
 8019d0a:	460a      	mov	r2, r1
 8019d0c:	46a6      	mov	lr, r4
 8019d0e:	f8de 3010 	ldr.w	r3, [lr, #16]
 8019d12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019d16:	b173      	cbz	r3, 8019d36 <rcl_wait+0x5e>
 8019d18:	f8de 300c 	ldr.w	r3, [lr, #12]
 8019d1c:	6968      	ldr	r0, [r5, #20]
 8019d1e:	440b      	add	r3, r1
 8019d20:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8019d24:	b13c      	cbz	r4, 8019d36 <rcl_wait+0x5e>
 8019d26:	692b      	ldr	r3, [r5, #16]
 8019d28:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8019d2c:	3301      	adds	r3, #1
 8019d2e:	612b      	str	r3, [r5, #16]
 8019d30:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8019d34:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8019d36:	3101      	adds	r1, #1
 8019d38:	f14c 0c00 	adc.w	ip, ip, #0
 8019d3c:	42b1      	cmp	r1, r6
 8019d3e:	f17c 0300 	sbcs.w	r3, ip, #0
 8019d42:	d3e4      	bcc.n	8019d0e <rcl_wait+0x36>
 8019d44:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8019ff0 <rcl_wait+0x318>
 8019d48:	ea58 0307 	orrs.w	r3, r8, r7
 8019d4c:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8019d50:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8019d54:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8019d58:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8019d5c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8019d60:	4674      	mov	r4, lr
 8019d62:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8019d66:	f000 8094 	beq.w	8019e92 <rcl_wait+0x1ba>
 8019d6a:	2e00      	cmp	r6, #0
 8019d6c:	f000 8145 	beq.w	8019ffa <rcl_wait+0x322>
 8019d70:	2500      	movs	r5, #0
 8019d72:	46bb      	mov	fp, r7
 8019d74:	e02c      	b.n	8019dd0 <rcl_wait+0xf8>
 8019d76:	6923      	ldr	r3, [r4, #16]
 8019d78:	f853 0009 	ldr.w	r0, [r3, r9]
 8019d7c:	a908      	add	r1, sp, #32
 8019d7e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8019d82:	f7f5 fd03 	bl	800f78c <rcl_timer_get_next_call_time>
 8019d86:	f240 3321 	movw	r3, #801	@ 0x321
 8019d8a:	4298      	cmp	r0, r3
 8019d8c:	f000 80bb 	beq.w	8019f06 <rcl_wait+0x22e>
 8019d90:	2800      	cmp	r0, #0
 8019d92:	d165      	bne.n	8019e60 <rcl_wait+0x188>
 8019d94:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8019d98:	7830      	ldrb	r0, [r6, #0]
 8019d9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019d9c:	ab18      	add	r3, sp, #96	@ 0x60
 8019d9e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8019da2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8019da6:	9205      	str	r2, [sp, #20]
 8019da8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8019dac:	4297      	cmp	r7, r2
 8019dae:	9a05      	ldr	r2, [sp, #20]
 8019db0:	eb71 0202 	sbcs.w	r2, r1, r2
 8019db4:	da06      	bge.n	8019dc4 <rcl_wait+0xec>
 8019db6:	e943 7108 	strd	r7, r1, [r3, #-32]
 8019dba:	ab18      	add	r3, sp, #96	@ 0x60
 8019dbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019dc0:	f840 6c30 	str.w	r6, [r0, #-48]
 8019dc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019dc6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8019dc8:	3501      	adds	r5, #1
 8019dca:	42b5      	cmp	r5, r6
 8019dcc:	f080 8114 	bcs.w	8019ff8 <rcl_wait+0x320>
 8019dd0:	6923      	ldr	r3, [r4, #16]
 8019dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019dd6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8019dda:	2800      	cmp	r0, #0
 8019ddc:	d0f4      	beq.n	8019dc8 <rcl_wait+0xf0>
 8019dde:	a907      	add	r1, sp, #28
 8019de0:	f7f5 fc00 	bl	800f5e4 <rcl_timer_clock>
 8019de4:	4603      	mov	r3, r0
 8019de6:	2800      	cmp	r0, #0
 8019de8:	f040 8141 	bne.w	801a06e <rcl_wait+0x396>
 8019dec:	9807      	ldr	r0, [sp, #28]
 8019dee:	7802      	ldrb	r2, [r0, #0]
 8019df0:	2a01      	cmp	r2, #1
 8019df2:	d1c0      	bne.n	8019d76 <rcl_wait+0x9e>
 8019df4:	f10d 011b 	add.w	r1, sp, #27
 8019df8:	f88d 301b 	strb.w	r3, [sp, #27]
 8019dfc:	f7ff f9c6 	bl	801918c <rcl_is_enabled_ros_time_override>
 8019e00:	4602      	mov	r2, r0
 8019e02:	2800      	cmp	r0, #0
 8019e04:	f040 8133 	bne.w	801a06e <rcl_wait+0x396>
 8019e08:	6923      	ldr	r3, [r4, #16]
 8019e0a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8019e0e:	f853 0009 	ldr.w	r0, [r3, r9]
 8019e12:	2900      	cmp	r1, #0
 8019e14:	d0b0      	beq.n	8019d78 <rcl_wait+0xa0>
 8019e16:	ae08      	add	r6, sp, #32
 8019e18:	4631      	mov	r1, r6
 8019e1a:	f88d 2020 	strb.w	r2, [sp, #32]
 8019e1e:	f7f5 fc7b 	bl	800f718 <rcl_timer_is_ready>
 8019e22:	2800      	cmp	r0, #0
 8019e24:	f040 8123 	bne.w	801a06e <rcl_wait+0x396>
 8019e28:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d0c9      	beq.n	8019dc4 <rcl_wait+0xec>
 8019e30:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019e32:	e02f      	b.n	8019e94 <rcl_wait+0x1bc>
 8019e34:	68c3      	ldr	r3, [r0, #12]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	f47f af61 	bne.w	8019cfe <rcl_wait+0x26>
 8019e3c:	6943      	ldr	r3, [r0, #20]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	f47f af5d 	bne.w	8019cfe <rcl_wait+0x26>
 8019e44:	69c3      	ldr	r3, [r0, #28]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f47f af59 	bne.w	8019cfe <rcl_wait+0x26>
 8019e4c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	f47f af55 	bne.w	8019cfe <rcl_wait+0x26>
 8019e54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	f47f af51 	bne.w	8019cfe <rcl_wait+0x26>
 8019e5c:	f240 3085 	movw	r0, #901	@ 0x385
 8019e60:	b019      	add	sp, #100	@ 0x64
 8019e62:	ecbd 8b02 	vpop	{d8}
 8019e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e6a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019e72:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8019e76:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8019e7a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8019e7e:	ea58 0307 	orrs.w	r3, r8, r7
 8019e82:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8019e86:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8019e8a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8019e8e:	f040 80b4 	bne.w	8019ffa <rcl_wait+0x322>
 8019e92:	ae08      	add	r6, sp, #32
 8019e94:	2200      	movs	r2, #0
 8019e96:	2300      	movs	r3, #0
 8019e98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019e9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8019ea0:	9602      	str	r6, [sp, #8]
 8019ea2:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019ea4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8019ea8:	e9cd 3200 	strd	r3, r2, [sp]
 8019eac:	f105 0110 	add.w	r1, r5, #16
 8019eb0:	f105 031c 	add.w	r3, r5, #28
 8019eb4:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8019eb8:	1d28      	adds	r0, r5, #4
 8019eba:	f001 fc95 	bl	801b7e8 <rmw_wait>
 8019ebe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019ec2:	4680      	mov	r8, r0
 8019ec4:	b332      	cbz	r2, 8019f14 <rcl_wait+0x23c>
 8019ec6:	2500      	movs	r5, #0
 8019ec8:	462f      	mov	r7, r5
 8019eca:	462e      	mov	r6, r5
 8019ecc:	e007      	b.n	8019ede <rcl_wait+0x206>
 8019ece:	6922      	ldr	r2, [r4, #16]
 8019ed0:	f842 3009 	str.w	r3, [r2, r9]
 8019ed4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ed6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019ed8:	3501      	adds	r5, #1
 8019eda:	4295      	cmp	r5, r2
 8019edc:	d21b      	bcs.n	8019f16 <rcl_wait+0x23e>
 8019ede:	6920      	ldr	r0, [r4, #16]
 8019ee0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019ee4:	a907      	add	r1, sp, #28
 8019ee6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8019eea:	2800      	cmp	r0, #0
 8019eec:	d0f4      	beq.n	8019ed8 <rcl_wait+0x200>
 8019eee:	f88d 601c 	strb.w	r6, [sp, #28]
 8019ef2:	f7f5 fc11 	bl	800f718 <rcl_timer_is_ready>
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	d1b2      	bne.n	8019e60 <rcl_wait+0x188>
 8019efa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d0e5      	beq.n	8019ece <rcl_wait+0x1f6>
 8019f02:	461f      	mov	r7, r3
 8019f04:	e7e6      	b.n	8019ed4 <rcl_wait+0x1fc>
 8019f06:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019f08:	6923      	ldr	r3, [r4, #16]
 8019f0a:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	f843 2009 	str.w	r2, [r3, r9]
 8019f12:	e759      	b.n	8019dc8 <rcl_wait+0xf0>
 8019f14:	4617      	mov	r7, r2
 8019f16:	f038 0002 	bics.w	r0, r8, #2
 8019f1a:	f040 80a8 	bne.w	801a06e <rcl_wait+0x396>
 8019f1e:	6866      	ldr	r6, [r4, #4]
 8019f20:	4602      	mov	r2, r0
 8019f22:	b91e      	cbnz	r6, 8019f2c <rcl_wait+0x254>
 8019f24:	e00d      	b.n	8019f42 <rcl_wait+0x26a>
 8019f26:	3201      	adds	r2, #1
 8019f28:	4296      	cmp	r6, r2
 8019f2a:	d00a      	beq.n	8019f42 <rcl_wait+0x26a>
 8019f2c:	6899      	ldr	r1, [r3, #8]
 8019f2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019f32:	2900      	cmp	r1, #0
 8019f34:	d1f7      	bne.n	8019f26 <rcl_wait+0x24e>
 8019f36:	6825      	ldr	r5, [r4, #0]
 8019f38:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8019f3c:	3201      	adds	r2, #1
 8019f3e:	4296      	cmp	r6, r2
 8019f40:	d1f4      	bne.n	8019f2c <rcl_wait+0x254>
 8019f42:	68e6      	ldr	r6, [r4, #12]
 8019f44:	2200      	movs	r2, #0
 8019f46:	b91e      	cbnz	r6, 8019f50 <rcl_wait+0x278>
 8019f48:	e00d      	b.n	8019f66 <rcl_wait+0x28e>
 8019f4a:	3201      	adds	r2, #1
 8019f4c:	42b2      	cmp	r2, r6
 8019f4e:	d00a      	beq.n	8019f66 <rcl_wait+0x28e>
 8019f50:	6959      	ldr	r1, [r3, #20]
 8019f52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019f56:	2900      	cmp	r1, #0
 8019f58:	d1f7      	bne.n	8019f4a <rcl_wait+0x272>
 8019f5a:	68a5      	ldr	r5, [r4, #8]
 8019f5c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8019f60:	3201      	adds	r2, #1
 8019f62:	42b2      	cmp	r2, r6
 8019f64:	d1f4      	bne.n	8019f50 <rcl_wait+0x278>
 8019f66:	69e6      	ldr	r6, [r4, #28]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	b91e      	cbnz	r6, 8019f74 <rcl_wait+0x29c>
 8019f6c:	e00d      	b.n	8019f8a <rcl_wait+0x2b2>
 8019f6e:	3201      	adds	r2, #1
 8019f70:	4296      	cmp	r6, r2
 8019f72:	d00a      	beq.n	8019f8a <rcl_wait+0x2b2>
 8019f74:	6a19      	ldr	r1, [r3, #32]
 8019f76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019f7a:	2900      	cmp	r1, #0
 8019f7c:	d1f7      	bne.n	8019f6e <rcl_wait+0x296>
 8019f7e:	69a5      	ldr	r5, [r4, #24]
 8019f80:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8019f84:	3201      	adds	r2, #1
 8019f86:	4296      	cmp	r6, r2
 8019f88:	d1f4      	bne.n	8019f74 <rcl_wait+0x29c>
 8019f8a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	b91e      	cbnz	r6, 8019f98 <rcl_wait+0x2c0>
 8019f90:	e00d      	b.n	8019fae <rcl_wait+0x2d6>
 8019f92:	3201      	adds	r2, #1
 8019f94:	42b2      	cmp	r2, r6
 8019f96:	d00a      	beq.n	8019fae <rcl_wait+0x2d6>
 8019f98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8019f9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019f9e:	2900      	cmp	r1, #0
 8019fa0:	d1f7      	bne.n	8019f92 <rcl_wait+0x2ba>
 8019fa2:	6a25      	ldr	r5, [r4, #32]
 8019fa4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8019fa8:	3201      	adds	r2, #1
 8019faa:	42b2      	cmp	r2, r6
 8019fac:	d1f4      	bne.n	8019f98 <rcl_wait+0x2c0>
 8019fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	b91e      	cbnz	r6, 8019fbc <rcl_wait+0x2e4>
 8019fb4:	e00d      	b.n	8019fd2 <rcl_wait+0x2fa>
 8019fb6:	3201      	adds	r2, #1
 8019fb8:	42b2      	cmp	r2, r6
 8019fba:	d00a      	beq.n	8019fd2 <rcl_wait+0x2fa>
 8019fbc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8019fbe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019fc2:	2900      	cmp	r1, #0
 8019fc4:	d1f7      	bne.n	8019fb6 <rcl_wait+0x2de>
 8019fc6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8019fc8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8019fcc:	3201      	adds	r2, #1
 8019fce:	42b2      	cmp	r2, r6
 8019fd0:	d1f4      	bne.n	8019fbc <rcl_wait+0x2e4>
 8019fd2:	f1b8 0f02 	cmp.w	r8, #2
 8019fd6:	f47f af43 	bne.w	8019e60 <rcl_wait+0x188>
 8019fda:	f087 0701 	eor.w	r7, r7, #1
 8019fde:	0078      	lsls	r0, r7, #1
 8019fe0:	e73e      	b.n	8019e60 <rcl_wait+0x188>
 8019fe2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019fe6:	b019      	add	sp, #100	@ 0x64
 8019fe8:	ecbd 8b02 	vpop	{d8}
 8019fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff0:	ffffffff 	.word	0xffffffff
 8019ff4:	7fffffff 	.word	0x7fffffff
 8019ff8:	465f      	mov	r7, fp
 8019ffa:	f1b8 0f01 	cmp.w	r8, #1
 8019ffe:	f177 0300 	sbcs.w	r3, r7, #0
 801a002:	db3a      	blt.n	801a07a <rcl_wait+0x3a2>
 801a004:	2601      	movs	r6, #1
 801a006:	ad10      	add	r5, sp, #64	@ 0x40
 801a008:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 801a00c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801a010:	a908      	add	r1, sp, #32
 801a012:	b1a0      	cbz	r0, 801a03e <rcl_wait+0x366>
 801a014:	f7ff f8ae 	bl	8019174 <rcl_clock_get_now>
 801a018:	2800      	cmp	r0, #0
 801a01a:	f47f af21 	bne.w	8019e60 <rcl_wait+0x188>
 801a01e:	9a08      	ldr	r2, [sp, #32]
 801a020:	68ab      	ldr	r3, [r5, #8]
 801a022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a024:	1a9b      	subs	r3, r3, r2
 801a026:	68ea      	ldr	r2, [r5, #12]
 801a028:	eb62 0201 	sbc.w	r2, r2, r1
 801a02c:	4598      	cmp	r8, r3
 801a02e:	eb77 0102 	sbcs.w	r1, r7, r2
 801a032:	bfba      	itte	lt
 801a034:	4643      	movlt	r3, r8
 801a036:	463a      	movlt	r2, r7
 801a038:	2601      	movge	r6, #1
 801a03a:	4698      	mov	r8, r3
 801a03c:	4617      	mov	r7, r2
 801a03e:	3508      	adds	r5, #8
 801a040:	45a9      	cmp	r9, r5
 801a042:	d1e3      	bne.n	801a00c <rcl_wait+0x334>
 801a044:	2f00      	cmp	r7, #0
 801a046:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a048:	bfab      	itete	ge
 801a04a:	4640      	movge	r0, r8
 801a04c:	2000      	movlt	r0, #0
 801a04e:	4639      	movge	r1, r7
 801a050:	2100      	movlt	r1, #0
 801a052:	2e00      	cmp	r6, #0
 801a054:	f43f af24 	beq.w	8019ea0 <rcl_wait+0x1c8>
 801a058:	a30d      	add	r3, pc, #52	@ (adr r3, 801a090 <rcl_wait+0x3b8>)
 801a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a05e:	f7e6 fe03 	bl	8000c68 <__aeabi_ldivmod>
 801a062:	ae08      	add	r6, sp, #32
 801a064:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a068:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801a06c:	e718      	b.n	8019ea0 <rcl_wait+0x1c8>
 801a06e:	2001      	movs	r0, #1
 801a070:	b019      	add	sp, #100	@ 0x64
 801a072:	ecbd 8b02 	vpop	{d8}
 801a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a07a:	2600      	movs	r6, #0
 801a07c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801a080:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801a084:	e7bf      	b.n	801a006 <rcl_wait+0x32e>
 801a086:	200b      	movs	r0, #11
 801a088:	4770      	bx	lr
 801a08a:	bf00      	nop
 801a08c:	f3af 8000 	nop.w
 801a090:	3b9aca00 	.word	0x3b9aca00
 801a094:	00000000 	.word	0x00000000

0801a098 <rcl_action_take_goal_response>:
 801a098:	b3b0      	cbz	r0, 801a108 <rcl_action_take_goal_response+0x70>
 801a09a:	b570      	push	{r4, r5, r6, lr}
 801a09c:	4604      	mov	r4, r0
 801a09e:	6800      	ldr	r0, [r0, #0]
 801a0a0:	b368      	cbz	r0, 801a0fe <rcl_action_take_goal_response+0x66>
 801a0a2:	460d      	mov	r5, r1
 801a0a4:	4616      	mov	r6, r2
 801a0a6:	f7fe f9cf 	bl	8018448 <rcl_client_is_valid>
 801a0aa:	b330      	cbz	r0, 801a0fa <rcl_action_take_goal_response+0x62>
 801a0ac:	6820      	ldr	r0, [r4, #0]
 801a0ae:	3004      	adds	r0, #4
 801a0b0:	f7fe f9ca 	bl	8018448 <rcl_client_is_valid>
 801a0b4:	b308      	cbz	r0, 801a0fa <rcl_action_take_goal_response+0x62>
 801a0b6:	6820      	ldr	r0, [r4, #0]
 801a0b8:	3008      	adds	r0, #8
 801a0ba:	f7fe f9c5 	bl	8018448 <rcl_client_is_valid>
 801a0be:	b1e0      	cbz	r0, 801a0fa <rcl_action_take_goal_response+0x62>
 801a0c0:	6820      	ldr	r0, [r4, #0]
 801a0c2:	300c      	adds	r0, #12
 801a0c4:	f7f5 f906 	bl	800f2d4 <rcl_subscription_is_valid>
 801a0c8:	b1b8      	cbz	r0, 801a0fa <rcl_action_take_goal_response+0x62>
 801a0ca:	6820      	ldr	r0, [r4, #0]
 801a0cc:	3010      	adds	r0, #16
 801a0ce:	f7f5 f901 	bl	800f2d4 <rcl_subscription_is_valid>
 801a0d2:	b190      	cbz	r0, 801a0fa <rcl_action_take_goal_response+0x62>
 801a0d4:	b1b5      	cbz	r5, 801a104 <rcl_action_take_goal_response+0x6c>
 801a0d6:	b1ae      	cbz	r6, 801a104 <rcl_action_take_goal_response+0x6c>
 801a0d8:	6820      	ldr	r0, [r4, #0]
 801a0da:	4632      	mov	r2, r6
 801a0dc:	4629      	mov	r1, r5
 801a0de:	f7fe f947 	bl	8018370 <rcl_take_response>
 801a0e2:	b148      	cbz	r0, 801a0f8 <rcl_action_take_goal_response+0x60>
 801a0e4:	280a      	cmp	r0, #10
 801a0e6:	d007      	beq.n	801a0f8 <rcl_action_take_goal_response+0x60>
 801a0e8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a0ec:	f640 0337 	movw	r3, #2103	@ 0x837
 801a0f0:	4290      	cmp	r0, r2
 801a0f2:	bf0c      	ite	eq
 801a0f4:	4618      	moveq	r0, r3
 801a0f6:	2001      	movne	r0, #1
 801a0f8:	bd70      	pop	{r4, r5, r6, pc}
 801a0fa:	f7f6 fbd9 	bl	80108b0 <rcutils_reset_error>
 801a0fe:	f640 0036 	movw	r0, #2102	@ 0x836
 801a102:	bd70      	pop	{r4, r5, r6, pc}
 801a104:	200b      	movs	r0, #11
 801a106:	bd70      	pop	{r4, r5, r6, pc}
 801a108:	f640 0036 	movw	r0, #2102	@ 0x836
 801a10c:	4770      	bx	lr
 801a10e:	bf00      	nop

0801a110 <rcl_action_send_result_request>:
 801a110:	b378      	cbz	r0, 801a172 <rcl_action_send_result_request+0x62>
 801a112:	b570      	push	{r4, r5, r6, lr}
 801a114:	4604      	mov	r4, r0
 801a116:	6800      	ldr	r0, [r0, #0]
 801a118:	b330      	cbz	r0, 801a168 <rcl_action_send_result_request+0x58>
 801a11a:	460d      	mov	r5, r1
 801a11c:	4616      	mov	r6, r2
 801a11e:	f7fe f993 	bl	8018448 <rcl_client_is_valid>
 801a122:	b1f8      	cbz	r0, 801a164 <rcl_action_send_result_request+0x54>
 801a124:	6820      	ldr	r0, [r4, #0]
 801a126:	3004      	adds	r0, #4
 801a128:	f7fe f98e 	bl	8018448 <rcl_client_is_valid>
 801a12c:	b1d0      	cbz	r0, 801a164 <rcl_action_send_result_request+0x54>
 801a12e:	6820      	ldr	r0, [r4, #0]
 801a130:	3008      	adds	r0, #8
 801a132:	f7fe f989 	bl	8018448 <rcl_client_is_valid>
 801a136:	b1a8      	cbz	r0, 801a164 <rcl_action_send_result_request+0x54>
 801a138:	6820      	ldr	r0, [r4, #0]
 801a13a:	300c      	adds	r0, #12
 801a13c:	f7f5 f8ca 	bl	800f2d4 <rcl_subscription_is_valid>
 801a140:	b180      	cbz	r0, 801a164 <rcl_action_send_result_request+0x54>
 801a142:	6820      	ldr	r0, [r4, #0]
 801a144:	3010      	adds	r0, #16
 801a146:	f7f5 f8c5 	bl	800f2d4 <rcl_subscription_is_valid>
 801a14a:	b158      	cbz	r0, 801a164 <rcl_action_send_result_request+0x54>
 801a14c:	b17d      	cbz	r5, 801a16e <rcl_action_send_result_request+0x5e>
 801a14e:	b176      	cbz	r6, 801a16e <rcl_action_send_result_request+0x5e>
 801a150:	6820      	ldr	r0, [r4, #0]
 801a152:	4632      	mov	r2, r6
 801a154:	4629      	mov	r1, r5
 801a156:	3008      	adds	r0, #8
 801a158:	f7fe f8b8 	bl	80182cc <rcl_send_request>
 801a15c:	3800      	subs	r0, #0
 801a15e:	bf18      	it	ne
 801a160:	2001      	movne	r0, #1
 801a162:	bd70      	pop	{r4, r5, r6, pc}
 801a164:	f7f6 fba4 	bl	80108b0 <rcutils_reset_error>
 801a168:	f640 0036 	movw	r0, #2102	@ 0x836
 801a16c:	bd70      	pop	{r4, r5, r6, pc}
 801a16e:	200b      	movs	r0, #11
 801a170:	bd70      	pop	{r4, r5, r6, pc}
 801a172:	f640 0036 	movw	r0, #2102	@ 0x836
 801a176:	4770      	bx	lr

0801a178 <rcl_action_take_result_response>:
 801a178:	2800      	cmp	r0, #0
 801a17a:	d037      	beq.n	801a1ec <rcl_action_take_result_response+0x74>
 801a17c:	b570      	push	{r4, r5, r6, lr}
 801a17e:	4604      	mov	r4, r0
 801a180:	6800      	ldr	r0, [r0, #0]
 801a182:	b370      	cbz	r0, 801a1e2 <rcl_action_take_result_response+0x6a>
 801a184:	460d      	mov	r5, r1
 801a186:	4616      	mov	r6, r2
 801a188:	f7fe f95e 	bl	8018448 <rcl_client_is_valid>
 801a18c:	b338      	cbz	r0, 801a1de <rcl_action_take_result_response+0x66>
 801a18e:	6820      	ldr	r0, [r4, #0]
 801a190:	3004      	adds	r0, #4
 801a192:	f7fe f959 	bl	8018448 <rcl_client_is_valid>
 801a196:	b310      	cbz	r0, 801a1de <rcl_action_take_result_response+0x66>
 801a198:	6820      	ldr	r0, [r4, #0]
 801a19a:	3008      	adds	r0, #8
 801a19c:	f7fe f954 	bl	8018448 <rcl_client_is_valid>
 801a1a0:	b1e8      	cbz	r0, 801a1de <rcl_action_take_result_response+0x66>
 801a1a2:	6820      	ldr	r0, [r4, #0]
 801a1a4:	300c      	adds	r0, #12
 801a1a6:	f7f5 f895 	bl	800f2d4 <rcl_subscription_is_valid>
 801a1aa:	b1c0      	cbz	r0, 801a1de <rcl_action_take_result_response+0x66>
 801a1ac:	6820      	ldr	r0, [r4, #0]
 801a1ae:	3010      	adds	r0, #16
 801a1b0:	f7f5 f890 	bl	800f2d4 <rcl_subscription_is_valid>
 801a1b4:	b198      	cbz	r0, 801a1de <rcl_action_take_result_response+0x66>
 801a1b6:	b1bd      	cbz	r5, 801a1e8 <rcl_action_take_result_response+0x70>
 801a1b8:	b1b6      	cbz	r6, 801a1e8 <rcl_action_take_result_response+0x70>
 801a1ba:	6820      	ldr	r0, [r4, #0]
 801a1bc:	4632      	mov	r2, r6
 801a1be:	4629      	mov	r1, r5
 801a1c0:	3008      	adds	r0, #8
 801a1c2:	f7fe f8d5 	bl	8018370 <rcl_take_response>
 801a1c6:	b148      	cbz	r0, 801a1dc <rcl_action_take_result_response+0x64>
 801a1c8:	280a      	cmp	r0, #10
 801a1ca:	d007      	beq.n	801a1dc <rcl_action_take_result_response+0x64>
 801a1cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a1d0:	f640 0337 	movw	r3, #2103	@ 0x837
 801a1d4:	4290      	cmp	r0, r2
 801a1d6:	bf0c      	ite	eq
 801a1d8:	4618      	moveq	r0, r3
 801a1da:	2001      	movne	r0, #1
 801a1dc:	bd70      	pop	{r4, r5, r6, pc}
 801a1de:	f7f6 fb67 	bl	80108b0 <rcutils_reset_error>
 801a1e2:	f640 0036 	movw	r0, #2102	@ 0x836
 801a1e6:	bd70      	pop	{r4, r5, r6, pc}
 801a1e8:	200b      	movs	r0, #11
 801a1ea:	bd70      	pop	{r4, r5, r6, pc}
 801a1ec:	f640 0036 	movw	r0, #2102	@ 0x836
 801a1f0:	4770      	bx	lr
 801a1f2:	bf00      	nop

0801a1f4 <rcl_action_take_cancel_response>:
 801a1f4:	2800      	cmp	r0, #0
 801a1f6:	d037      	beq.n	801a268 <rcl_action_take_cancel_response+0x74>
 801a1f8:	b570      	push	{r4, r5, r6, lr}
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	6800      	ldr	r0, [r0, #0]
 801a1fe:	b370      	cbz	r0, 801a25e <rcl_action_take_cancel_response+0x6a>
 801a200:	460d      	mov	r5, r1
 801a202:	4616      	mov	r6, r2
 801a204:	f7fe f920 	bl	8018448 <rcl_client_is_valid>
 801a208:	b338      	cbz	r0, 801a25a <rcl_action_take_cancel_response+0x66>
 801a20a:	6820      	ldr	r0, [r4, #0]
 801a20c:	3004      	adds	r0, #4
 801a20e:	f7fe f91b 	bl	8018448 <rcl_client_is_valid>
 801a212:	b310      	cbz	r0, 801a25a <rcl_action_take_cancel_response+0x66>
 801a214:	6820      	ldr	r0, [r4, #0]
 801a216:	3008      	adds	r0, #8
 801a218:	f7fe f916 	bl	8018448 <rcl_client_is_valid>
 801a21c:	b1e8      	cbz	r0, 801a25a <rcl_action_take_cancel_response+0x66>
 801a21e:	6820      	ldr	r0, [r4, #0]
 801a220:	300c      	adds	r0, #12
 801a222:	f7f5 f857 	bl	800f2d4 <rcl_subscription_is_valid>
 801a226:	b1c0      	cbz	r0, 801a25a <rcl_action_take_cancel_response+0x66>
 801a228:	6820      	ldr	r0, [r4, #0]
 801a22a:	3010      	adds	r0, #16
 801a22c:	f7f5 f852 	bl	800f2d4 <rcl_subscription_is_valid>
 801a230:	b198      	cbz	r0, 801a25a <rcl_action_take_cancel_response+0x66>
 801a232:	b1bd      	cbz	r5, 801a264 <rcl_action_take_cancel_response+0x70>
 801a234:	b1b6      	cbz	r6, 801a264 <rcl_action_take_cancel_response+0x70>
 801a236:	6820      	ldr	r0, [r4, #0]
 801a238:	4632      	mov	r2, r6
 801a23a:	4629      	mov	r1, r5
 801a23c:	3004      	adds	r0, #4
 801a23e:	f7fe f897 	bl	8018370 <rcl_take_response>
 801a242:	b148      	cbz	r0, 801a258 <rcl_action_take_cancel_response+0x64>
 801a244:	280a      	cmp	r0, #10
 801a246:	d007      	beq.n	801a258 <rcl_action_take_cancel_response+0x64>
 801a248:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a24c:	f640 0337 	movw	r3, #2103	@ 0x837
 801a250:	4290      	cmp	r0, r2
 801a252:	bf0c      	ite	eq
 801a254:	4618      	moveq	r0, r3
 801a256:	2001      	movne	r0, #1
 801a258:	bd70      	pop	{r4, r5, r6, pc}
 801a25a:	f7f6 fb29 	bl	80108b0 <rcutils_reset_error>
 801a25e:	f640 0036 	movw	r0, #2102	@ 0x836
 801a262:	bd70      	pop	{r4, r5, r6, pc}
 801a264:	200b      	movs	r0, #11
 801a266:	bd70      	pop	{r4, r5, r6, pc}
 801a268:	f640 0036 	movw	r0, #2102	@ 0x836
 801a26c:	4770      	bx	lr
 801a26e:	bf00      	nop

0801a270 <rcl_action_take_feedback>:
 801a270:	2800      	cmp	r0, #0
 801a272:	d037      	beq.n	801a2e4 <rcl_action_take_feedback+0x74>
 801a274:	b530      	push	{r4, r5, lr}
 801a276:	4604      	mov	r4, r0
 801a278:	6800      	ldr	r0, [r0, #0]
 801a27a:	b08f      	sub	sp, #60	@ 0x3c
 801a27c:	b358      	cbz	r0, 801a2d6 <rcl_action_take_feedback+0x66>
 801a27e:	460d      	mov	r5, r1
 801a280:	f7fe f8e2 	bl	8018448 <rcl_client_is_valid>
 801a284:	b328      	cbz	r0, 801a2d2 <rcl_action_take_feedback+0x62>
 801a286:	6820      	ldr	r0, [r4, #0]
 801a288:	3004      	adds	r0, #4
 801a28a:	f7fe f8dd 	bl	8018448 <rcl_client_is_valid>
 801a28e:	b300      	cbz	r0, 801a2d2 <rcl_action_take_feedback+0x62>
 801a290:	6820      	ldr	r0, [r4, #0]
 801a292:	3008      	adds	r0, #8
 801a294:	f7fe f8d8 	bl	8018448 <rcl_client_is_valid>
 801a298:	b1d8      	cbz	r0, 801a2d2 <rcl_action_take_feedback+0x62>
 801a29a:	6820      	ldr	r0, [r4, #0]
 801a29c:	300c      	adds	r0, #12
 801a29e:	f7f5 f819 	bl	800f2d4 <rcl_subscription_is_valid>
 801a2a2:	b1b0      	cbz	r0, 801a2d2 <rcl_action_take_feedback+0x62>
 801a2a4:	6820      	ldr	r0, [r4, #0]
 801a2a6:	3010      	adds	r0, #16
 801a2a8:	f7f5 f814 	bl	800f2d4 <rcl_subscription_is_valid>
 801a2ac:	b188      	cbz	r0, 801a2d2 <rcl_action_take_feedback+0x62>
 801a2ae:	b1b5      	cbz	r5, 801a2de <rcl_action_take_feedback+0x6e>
 801a2b0:	6820      	ldr	r0, [r4, #0]
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	466a      	mov	r2, sp
 801a2b6:	4629      	mov	r1, r5
 801a2b8:	300c      	adds	r0, #12
 801a2ba:	f7f4 ffad 	bl	800f218 <rcl_take>
 801a2be:	b160      	cbz	r0, 801a2da <rcl_action_take_feedback+0x6a>
 801a2c0:	f240 1391 	movw	r3, #401	@ 0x191
 801a2c4:	4298      	cmp	r0, r3
 801a2c6:	d010      	beq.n	801a2ea <rcl_action_take_feedback+0x7a>
 801a2c8:	280a      	cmp	r0, #10
 801a2ca:	bf18      	it	ne
 801a2cc:	2001      	movne	r0, #1
 801a2ce:	b00f      	add	sp, #60	@ 0x3c
 801a2d0:	bd30      	pop	{r4, r5, pc}
 801a2d2:	f7f6 faed 	bl	80108b0 <rcutils_reset_error>
 801a2d6:	f640 0036 	movw	r0, #2102	@ 0x836
 801a2da:	b00f      	add	sp, #60	@ 0x3c
 801a2dc:	bd30      	pop	{r4, r5, pc}
 801a2de:	200b      	movs	r0, #11
 801a2e0:	b00f      	add	sp, #60	@ 0x3c
 801a2e2:	bd30      	pop	{r4, r5, pc}
 801a2e4:	f640 0036 	movw	r0, #2102	@ 0x836
 801a2e8:	4770      	bx	lr
 801a2ea:	f640 0037 	movw	r0, #2103	@ 0x837
 801a2ee:	e7f4      	b.n	801a2da <rcl_action_take_feedback+0x6a>

0801a2f0 <rcl_action_wait_set_add_action_client>:
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	d045      	beq.n	801a380 <rcl_action_wait_set_add_action_client+0x90>
 801a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2f6:	460c      	mov	r4, r1
 801a2f8:	2900      	cmp	r1, #0
 801a2fa:	d03e      	beq.n	801a37a <rcl_action_wait_set_add_action_client+0x8a>
 801a2fc:	4605      	mov	r5, r0
 801a2fe:	6808      	ldr	r0, [r1, #0]
 801a300:	2800      	cmp	r0, #0
 801a302:	d03a      	beq.n	801a37a <rcl_action_wait_set_add_action_client+0x8a>
 801a304:	4617      	mov	r7, r2
 801a306:	461e      	mov	r6, r3
 801a308:	f7fe f89e 	bl	8018448 <rcl_client_is_valid>
 801a30c:	b398      	cbz	r0, 801a376 <rcl_action_wait_set_add_action_client+0x86>
 801a30e:	6820      	ldr	r0, [r4, #0]
 801a310:	3004      	adds	r0, #4
 801a312:	f7fe f899 	bl	8018448 <rcl_client_is_valid>
 801a316:	b370      	cbz	r0, 801a376 <rcl_action_wait_set_add_action_client+0x86>
 801a318:	6820      	ldr	r0, [r4, #0]
 801a31a:	3008      	adds	r0, #8
 801a31c:	f7fe f894 	bl	8018448 <rcl_client_is_valid>
 801a320:	b348      	cbz	r0, 801a376 <rcl_action_wait_set_add_action_client+0x86>
 801a322:	6820      	ldr	r0, [r4, #0]
 801a324:	300c      	adds	r0, #12
 801a326:	f7f4 ffd5 	bl	800f2d4 <rcl_subscription_is_valid>
 801a32a:	b320      	cbz	r0, 801a376 <rcl_action_wait_set_add_action_client+0x86>
 801a32c:	6820      	ldr	r0, [r4, #0]
 801a32e:	3010      	adds	r0, #16
 801a330:	f7f4 ffd0 	bl	800f2d4 <rcl_subscription_is_valid>
 801a334:	b1f8      	cbz	r0, 801a376 <rcl_action_wait_set_add_action_client+0x86>
 801a336:	6821      	ldr	r1, [r4, #0]
 801a338:	4628      	mov	r0, r5
 801a33a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801a33e:	f7ff fc73 	bl	8019c28 <rcl_wait_set_add_client>
 801a342:	b9b8      	cbnz	r0, 801a374 <rcl_action_wait_set_add_action_client+0x84>
 801a344:	6821      	ldr	r1, [r4, #0]
 801a346:	4628      	mov	r0, r5
 801a348:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801a34c:	3104      	adds	r1, #4
 801a34e:	f7ff fc6b 	bl	8019c28 <rcl_wait_set_add_client>
 801a352:	b978      	cbnz	r0, 801a374 <rcl_action_wait_set_add_action_client+0x84>
 801a354:	6821      	ldr	r1, [r4, #0]
 801a356:	4628      	mov	r0, r5
 801a358:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801a35c:	3108      	adds	r1, #8
 801a35e:	f7ff fc63 	bl	8019c28 <rcl_wait_set_add_client>
 801a362:	b938      	cbnz	r0, 801a374 <rcl_action_wait_set_add_action_client+0x84>
 801a364:	6821      	ldr	r1, [r4, #0]
 801a366:	4628      	mov	r0, r5
 801a368:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801a36c:	310c      	adds	r1, #12
 801a36e:	f7ff f8fb 	bl	8019568 <rcl_wait_set_add_subscription>
 801a372:	b140      	cbz	r0, 801a386 <rcl_action_wait_set_add_action_client+0x96>
 801a374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a376:	f7f6 fa9b 	bl	80108b0 <rcutils_reset_error>
 801a37a:	f640 0036 	movw	r0, #2102	@ 0x836
 801a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a380:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a384:	4770      	bx	lr
 801a386:	6821      	ldr	r1, [r4, #0]
 801a388:	4628      	mov	r0, r5
 801a38a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801a38e:	3110      	adds	r1, #16
 801a390:	f7ff f8ea 	bl	8019568 <rcl_wait_set_add_subscription>
 801a394:	2800      	cmp	r0, #0
 801a396:	d1ed      	bne.n	801a374 <rcl_action_wait_set_add_action_client+0x84>
 801a398:	b11f      	cbz	r7, 801a3a2 <rcl_action_wait_set_add_action_client+0xb2>
 801a39a:	6823      	ldr	r3, [r4, #0]
 801a39c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801a3a0:	603b      	str	r3, [r7, #0]
 801a3a2:	2e00      	cmp	r6, #0
 801a3a4:	d0e6      	beq.n	801a374 <rcl_action_wait_set_add_action_client+0x84>
 801a3a6:	6823      	ldr	r3, [r4, #0]
 801a3a8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801a3ac:	6033      	str	r3, [r6, #0]
 801a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a3b0 <rcl_action_client_wait_set_get_entities_ready>:
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	f000 8089 	beq.w	801a4c8 <rcl_action_client_wait_set_get_entities_ready+0x118>
 801a3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ba:	460c      	mov	r4, r1
 801a3bc:	2900      	cmp	r1, #0
 801a3be:	d079      	beq.n	801a4b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801a3c0:	4605      	mov	r5, r0
 801a3c2:	6808      	ldr	r0, [r1, #0]
 801a3c4:	2800      	cmp	r0, #0
 801a3c6:	d075      	beq.n	801a4b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801a3c8:	4616      	mov	r6, r2
 801a3ca:	461f      	mov	r7, r3
 801a3cc:	f7fe f83c 	bl	8018448 <rcl_client_is_valid>
 801a3d0:	2800      	cmp	r0, #0
 801a3d2:	d06d      	beq.n	801a4b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a3d4:	6820      	ldr	r0, [r4, #0]
 801a3d6:	3004      	adds	r0, #4
 801a3d8:	f7fe f836 	bl	8018448 <rcl_client_is_valid>
 801a3dc:	2800      	cmp	r0, #0
 801a3de:	d067      	beq.n	801a4b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a3e0:	6820      	ldr	r0, [r4, #0]
 801a3e2:	3008      	adds	r0, #8
 801a3e4:	f7fe f830 	bl	8018448 <rcl_client_is_valid>
 801a3e8:	2800      	cmp	r0, #0
 801a3ea:	d061      	beq.n	801a4b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a3ec:	6820      	ldr	r0, [r4, #0]
 801a3ee:	300c      	adds	r0, #12
 801a3f0:	f7f4 ff70 	bl	800f2d4 <rcl_subscription_is_valid>
 801a3f4:	2800      	cmp	r0, #0
 801a3f6:	d05b      	beq.n	801a4b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a3f8:	6820      	ldr	r0, [r4, #0]
 801a3fa:	3010      	adds	r0, #16
 801a3fc:	f7f4 ff6a 	bl	800f2d4 <rcl_subscription_is_valid>
 801a400:	2800      	cmp	r0, #0
 801a402:	d055      	beq.n	801a4b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a404:	2e00      	cmp	r6, #0
 801a406:	d05c      	beq.n	801a4c2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a408:	2f00      	cmp	r7, #0
 801a40a:	d05a      	beq.n	801a4c2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a40c:	9b06      	ldr	r3, [sp, #24]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d057      	beq.n	801a4c2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a412:	9b07      	ldr	r3, [sp, #28]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d054      	beq.n	801a4c2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a418:	9b08      	ldr	r3, [sp, #32]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d051      	beq.n	801a4c2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a41e:	6823      	ldr	r3, [r4, #0]
 801a420:	686a      	ldr	r2, [r5, #4]
 801a422:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801a426:	428a      	cmp	r2, r1
 801a428:	d948      	bls.n	801a4bc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a42a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801a42e:	4282      	cmp	r2, r0
 801a430:	d944      	bls.n	801a4bc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a432:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801a436:	69ea      	ldr	r2, [r5, #28]
 801a438:	42a2      	cmp	r2, r4
 801a43a:	d93f      	bls.n	801a4bc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a43c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 801a440:	4562      	cmp	r2, ip
 801a442:	d93b      	bls.n	801a4bc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a444:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 801a448:	4572      	cmp	r2, lr
 801a44a:	d937      	bls.n	801a4bc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a44c:	69aa      	ldr	r2, [r5, #24]
 801a44e:	682d      	ldr	r5, [r5, #0]
 801a450:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801a454:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801a458:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801a45c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 801a460:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801a464:	f103 0c0c 	add.w	ip, r3, #12
 801a468:	eba5 050c 	sub.w	r5, r5, ip
 801a46c:	fab5 f585 	clz	r5, r5
 801a470:	096d      	lsrs	r5, r5, #5
 801a472:	7035      	strb	r5, [r6, #0]
 801a474:	f103 0510 	add.w	r5, r3, #16
 801a478:	1b64      	subs	r4, r4, r5
 801a47a:	fab4 f484 	clz	r4, r4
 801a47e:	0964      	lsrs	r4, r4, #5
 801a480:	703c      	strb	r4, [r7, #0]
 801a482:	eba3 0008 	sub.w	r0, r3, r8
 801a486:	1d1c      	adds	r4, r3, #4
 801a488:	3308      	adds	r3, #8
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	fab0 f080 	clz	r0, r0
 801a490:	9a06      	ldr	r2, [sp, #24]
 801a492:	0940      	lsrs	r0, r0, #5
 801a494:	1b09      	subs	r1, r1, r4
 801a496:	7010      	strb	r0, [r2, #0]
 801a498:	fab1 f181 	clz	r1, r1
 801a49c:	9a07      	ldr	r2, [sp, #28]
 801a49e:	0949      	lsrs	r1, r1, #5
 801a4a0:	7011      	strb	r1, [r2, #0]
 801a4a2:	fab3 f383 	clz	r3, r3
 801a4a6:	9a08      	ldr	r2, [sp, #32]
 801a4a8:	095b      	lsrs	r3, r3, #5
 801a4aa:	2000      	movs	r0, #0
 801a4ac:	7013      	strb	r3, [r2, #0]
 801a4ae:	e003      	b.n	801a4b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801a4b0:	f7f6 f9fe 	bl	80108b0 <rcutils_reset_error>
 801a4b4:	f640 0036 	movw	r0, #2102	@ 0x836
 801a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4bc:	2001      	movs	r0, #1
 801a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4c2:	200b      	movs	r0, #11
 801a4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a4cc:	4770      	bx	lr
 801a4ce:	bf00      	nop

0801a4d0 <rcl_action_take_goal_request>:
 801a4d0:	b3b0      	cbz	r0, 801a540 <rcl_action_take_goal_request+0x70>
 801a4d2:	b570      	push	{r4, r5, r6, lr}
 801a4d4:	4604      	mov	r4, r0
 801a4d6:	6800      	ldr	r0, [r0, #0]
 801a4d8:	b368      	cbz	r0, 801a536 <rcl_action_take_goal_request+0x66>
 801a4da:	460d      	mov	r5, r1
 801a4dc:	4616      	mov	r6, r2
 801a4de:	f7fe fcf5 	bl	8018ecc <rcl_service_is_valid>
 801a4e2:	b330      	cbz	r0, 801a532 <rcl_action_take_goal_request+0x62>
 801a4e4:	6820      	ldr	r0, [r4, #0]
 801a4e6:	3004      	adds	r0, #4
 801a4e8:	f7fe fcf0 	bl	8018ecc <rcl_service_is_valid>
 801a4ec:	b308      	cbz	r0, 801a532 <rcl_action_take_goal_request+0x62>
 801a4ee:	6820      	ldr	r0, [r4, #0]
 801a4f0:	3008      	adds	r0, #8
 801a4f2:	f7fe fceb 	bl	8018ecc <rcl_service_is_valid>
 801a4f6:	b1e0      	cbz	r0, 801a532 <rcl_action_take_goal_request+0x62>
 801a4f8:	6820      	ldr	r0, [r4, #0]
 801a4fa:	300c      	adds	r0, #12
 801a4fc:	f7f4 fd3a 	bl	800ef74 <rcl_publisher_is_valid>
 801a500:	b1b8      	cbz	r0, 801a532 <rcl_action_take_goal_request+0x62>
 801a502:	6820      	ldr	r0, [r4, #0]
 801a504:	3010      	adds	r0, #16
 801a506:	f7f4 fd35 	bl	800ef74 <rcl_publisher_is_valid>
 801a50a:	b190      	cbz	r0, 801a532 <rcl_action_take_goal_request+0x62>
 801a50c:	b1b5      	cbz	r5, 801a53c <rcl_action_take_goal_request+0x6c>
 801a50e:	b1ae      	cbz	r6, 801a53c <rcl_action_take_goal_request+0x6c>
 801a510:	6820      	ldr	r0, [r4, #0]
 801a512:	4632      	mov	r2, r6
 801a514:	4629      	mov	r1, r5
 801a516:	f7fe fc59 	bl	8018dcc <rcl_take_request>
 801a51a:	b148      	cbz	r0, 801a530 <rcl_action_take_goal_request+0x60>
 801a51c:	280a      	cmp	r0, #10
 801a51e:	d007      	beq.n	801a530 <rcl_action_take_goal_request+0x60>
 801a520:	f240 2259 	movw	r2, #601	@ 0x259
 801a524:	f640 0399 	movw	r3, #2201	@ 0x899
 801a528:	4290      	cmp	r0, r2
 801a52a:	bf0c      	ite	eq
 801a52c:	4618      	moveq	r0, r3
 801a52e:	2001      	movne	r0, #1
 801a530:	bd70      	pop	{r4, r5, r6, pc}
 801a532:	f7f6 f9bd 	bl	80108b0 <rcutils_reset_error>
 801a536:	f640 0098 	movw	r0, #2200	@ 0x898
 801a53a:	bd70      	pop	{r4, r5, r6, pc}
 801a53c:	200b      	movs	r0, #11
 801a53e:	bd70      	pop	{r4, r5, r6, pc}
 801a540:	f640 0098 	movw	r0, #2200	@ 0x898
 801a544:	4770      	bx	lr
 801a546:	bf00      	nop

0801a548 <rcl_action_send_goal_response>:
 801a548:	b378      	cbz	r0, 801a5aa <rcl_action_send_goal_response+0x62>
 801a54a:	b570      	push	{r4, r5, r6, lr}
 801a54c:	4604      	mov	r4, r0
 801a54e:	6800      	ldr	r0, [r0, #0]
 801a550:	b330      	cbz	r0, 801a5a0 <rcl_action_send_goal_response+0x58>
 801a552:	460d      	mov	r5, r1
 801a554:	4616      	mov	r6, r2
 801a556:	f7fe fcb9 	bl	8018ecc <rcl_service_is_valid>
 801a55a:	b1f8      	cbz	r0, 801a59c <rcl_action_send_goal_response+0x54>
 801a55c:	6820      	ldr	r0, [r4, #0]
 801a55e:	3004      	adds	r0, #4
 801a560:	f7fe fcb4 	bl	8018ecc <rcl_service_is_valid>
 801a564:	b1d0      	cbz	r0, 801a59c <rcl_action_send_goal_response+0x54>
 801a566:	6820      	ldr	r0, [r4, #0]
 801a568:	3008      	adds	r0, #8
 801a56a:	f7fe fcaf 	bl	8018ecc <rcl_service_is_valid>
 801a56e:	b1a8      	cbz	r0, 801a59c <rcl_action_send_goal_response+0x54>
 801a570:	6820      	ldr	r0, [r4, #0]
 801a572:	300c      	adds	r0, #12
 801a574:	f7f4 fcfe 	bl	800ef74 <rcl_publisher_is_valid>
 801a578:	b180      	cbz	r0, 801a59c <rcl_action_send_goal_response+0x54>
 801a57a:	6820      	ldr	r0, [r4, #0]
 801a57c:	3010      	adds	r0, #16
 801a57e:	f7f4 fcf9 	bl	800ef74 <rcl_publisher_is_valid>
 801a582:	b158      	cbz	r0, 801a59c <rcl_action_send_goal_response+0x54>
 801a584:	b17d      	cbz	r5, 801a5a6 <rcl_action_send_goal_response+0x5e>
 801a586:	b176      	cbz	r6, 801a5a6 <rcl_action_send_goal_response+0x5e>
 801a588:	6820      	ldr	r0, [r4, #0]
 801a58a:	4632      	mov	r2, r6
 801a58c:	4629      	mov	r1, r5
 801a58e:	f7fe fc6d 	bl	8018e6c <rcl_send_response>
 801a592:	b110      	cbz	r0, 801a59a <rcl_action_send_goal_response+0x52>
 801a594:	2802      	cmp	r0, #2
 801a596:	bf18      	it	ne
 801a598:	2001      	movne	r0, #1
 801a59a:	bd70      	pop	{r4, r5, r6, pc}
 801a59c:	f7f6 f988 	bl	80108b0 <rcutils_reset_error>
 801a5a0:	f640 0098 	movw	r0, #2200	@ 0x898
 801a5a4:	bd70      	pop	{r4, r5, r6, pc}
 801a5a6:	200b      	movs	r0, #11
 801a5a8:	bd70      	pop	{r4, r5, r6, pc}
 801a5aa:	f640 0098 	movw	r0, #2200	@ 0x898
 801a5ae:	4770      	bx	lr

0801a5b0 <rcl_action_take_result_request>:
 801a5b0:	2800      	cmp	r0, #0
 801a5b2:	d037      	beq.n	801a624 <rcl_action_take_result_request+0x74>
 801a5b4:	b570      	push	{r4, r5, r6, lr}
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	6800      	ldr	r0, [r0, #0]
 801a5ba:	b370      	cbz	r0, 801a61a <rcl_action_take_result_request+0x6a>
 801a5bc:	460d      	mov	r5, r1
 801a5be:	4616      	mov	r6, r2
 801a5c0:	f7fe fc84 	bl	8018ecc <rcl_service_is_valid>
 801a5c4:	b338      	cbz	r0, 801a616 <rcl_action_take_result_request+0x66>
 801a5c6:	6820      	ldr	r0, [r4, #0]
 801a5c8:	3004      	adds	r0, #4
 801a5ca:	f7fe fc7f 	bl	8018ecc <rcl_service_is_valid>
 801a5ce:	b310      	cbz	r0, 801a616 <rcl_action_take_result_request+0x66>
 801a5d0:	6820      	ldr	r0, [r4, #0]
 801a5d2:	3008      	adds	r0, #8
 801a5d4:	f7fe fc7a 	bl	8018ecc <rcl_service_is_valid>
 801a5d8:	b1e8      	cbz	r0, 801a616 <rcl_action_take_result_request+0x66>
 801a5da:	6820      	ldr	r0, [r4, #0]
 801a5dc:	300c      	adds	r0, #12
 801a5de:	f7f4 fcc9 	bl	800ef74 <rcl_publisher_is_valid>
 801a5e2:	b1c0      	cbz	r0, 801a616 <rcl_action_take_result_request+0x66>
 801a5e4:	6820      	ldr	r0, [r4, #0]
 801a5e6:	3010      	adds	r0, #16
 801a5e8:	f7f4 fcc4 	bl	800ef74 <rcl_publisher_is_valid>
 801a5ec:	b198      	cbz	r0, 801a616 <rcl_action_take_result_request+0x66>
 801a5ee:	b1bd      	cbz	r5, 801a620 <rcl_action_take_result_request+0x70>
 801a5f0:	b1b6      	cbz	r6, 801a620 <rcl_action_take_result_request+0x70>
 801a5f2:	6820      	ldr	r0, [r4, #0]
 801a5f4:	4632      	mov	r2, r6
 801a5f6:	4629      	mov	r1, r5
 801a5f8:	3008      	adds	r0, #8
 801a5fa:	f7fe fbe7 	bl	8018dcc <rcl_take_request>
 801a5fe:	b148      	cbz	r0, 801a614 <rcl_action_take_result_request+0x64>
 801a600:	280a      	cmp	r0, #10
 801a602:	d007      	beq.n	801a614 <rcl_action_take_result_request+0x64>
 801a604:	f240 2259 	movw	r2, #601	@ 0x259
 801a608:	f640 0399 	movw	r3, #2201	@ 0x899
 801a60c:	4290      	cmp	r0, r2
 801a60e:	bf0c      	ite	eq
 801a610:	4618      	moveq	r0, r3
 801a612:	2001      	movne	r0, #1
 801a614:	bd70      	pop	{r4, r5, r6, pc}
 801a616:	f7f6 f94b 	bl	80108b0 <rcutils_reset_error>
 801a61a:	f640 0098 	movw	r0, #2200	@ 0x898
 801a61e:	bd70      	pop	{r4, r5, r6, pc}
 801a620:	200b      	movs	r0, #11
 801a622:	bd70      	pop	{r4, r5, r6, pc}
 801a624:	f640 0098 	movw	r0, #2200	@ 0x898
 801a628:	4770      	bx	lr
 801a62a:	bf00      	nop

0801a62c <rcl_action_take_cancel_request>:
 801a62c:	2800      	cmp	r0, #0
 801a62e:	d037      	beq.n	801a6a0 <rcl_action_take_cancel_request+0x74>
 801a630:	b570      	push	{r4, r5, r6, lr}
 801a632:	4604      	mov	r4, r0
 801a634:	6800      	ldr	r0, [r0, #0]
 801a636:	b370      	cbz	r0, 801a696 <rcl_action_take_cancel_request+0x6a>
 801a638:	460d      	mov	r5, r1
 801a63a:	4616      	mov	r6, r2
 801a63c:	f7fe fc46 	bl	8018ecc <rcl_service_is_valid>
 801a640:	b338      	cbz	r0, 801a692 <rcl_action_take_cancel_request+0x66>
 801a642:	6820      	ldr	r0, [r4, #0]
 801a644:	3004      	adds	r0, #4
 801a646:	f7fe fc41 	bl	8018ecc <rcl_service_is_valid>
 801a64a:	b310      	cbz	r0, 801a692 <rcl_action_take_cancel_request+0x66>
 801a64c:	6820      	ldr	r0, [r4, #0]
 801a64e:	3008      	adds	r0, #8
 801a650:	f7fe fc3c 	bl	8018ecc <rcl_service_is_valid>
 801a654:	b1e8      	cbz	r0, 801a692 <rcl_action_take_cancel_request+0x66>
 801a656:	6820      	ldr	r0, [r4, #0]
 801a658:	300c      	adds	r0, #12
 801a65a:	f7f4 fc8b 	bl	800ef74 <rcl_publisher_is_valid>
 801a65e:	b1c0      	cbz	r0, 801a692 <rcl_action_take_cancel_request+0x66>
 801a660:	6820      	ldr	r0, [r4, #0]
 801a662:	3010      	adds	r0, #16
 801a664:	f7f4 fc86 	bl	800ef74 <rcl_publisher_is_valid>
 801a668:	b198      	cbz	r0, 801a692 <rcl_action_take_cancel_request+0x66>
 801a66a:	b1bd      	cbz	r5, 801a69c <rcl_action_take_cancel_request+0x70>
 801a66c:	b1b6      	cbz	r6, 801a69c <rcl_action_take_cancel_request+0x70>
 801a66e:	6820      	ldr	r0, [r4, #0]
 801a670:	4632      	mov	r2, r6
 801a672:	4629      	mov	r1, r5
 801a674:	3004      	adds	r0, #4
 801a676:	f7fe fba9 	bl	8018dcc <rcl_take_request>
 801a67a:	b148      	cbz	r0, 801a690 <rcl_action_take_cancel_request+0x64>
 801a67c:	280a      	cmp	r0, #10
 801a67e:	d007      	beq.n	801a690 <rcl_action_take_cancel_request+0x64>
 801a680:	f240 2259 	movw	r2, #601	@ 0x259
 801a684:	f640 0399 	movw	r3, #2201	@ 0x899
 801a688:	4290      	cmp	r0, r2
 801a68a:	bf0c      	ite	eq
 801a68c:	4618      	moveq	r0, r3
 801a68e:	2001      	movne	r0, #1
 801a690:	bd70      	pop	{r4, r5, r6, pc}
 801a692:	f7f6 f90d 	bl	80108b0 <rcutils_reset_error>
 801a696:	f640 0098 	movw	r0, #2200	@ 0x898
 801a69a:	bd70      	pop	{r4, r5, r6, pc}
 801a69c:	200b      	movs	r0, #11
 801a69e:	bd70      	pop	{r4, r5, r6, pc}
 801a6a0:	f640 0098 	movw	r0, #2200	@ 0x898
 801a6a4:	4770      	bx	lr
 801a6a6:	bf00      	nop

0801a6a8 <rcl_action_send_cancel_response>:
 801a6a8:	b380      	cbz	r0, 801a70c <rcl_action_send_cancel_response+0x64>
 801a6aa:	b570      	push	{r4, r5, r6, lr}
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	6800      	ldr	r0, [r0, #0]
 801a6b0:	b338      	cbz	r0, 801a702 <rcl_action_send_cancel_response+0x5a>
 801a6b2:	460d      	mov	r5, r1
 801a6b4:	4616      	mov	r6, r2
 801a6b6:	f7fe fc09 	bl	8018ecc <rcl_service_is_valid>
 801a6ba:	b300      	cbz	r0, 801a6fe <rcl_action_send_cancel_response+0x56>
 801a6bc:	6820      	ldr	r0, [r4, #0]
 801a6be:	3004      	adds	r0, #4
 801a6c0:	f7fe fc04 	bl	8018ecc <rcl_service_is_valid>
 801a6c4:	b1d8      	cbz	r0, 801a6fe <rcl_action_send_cancel_response+0x56>
 801a6c6:	6820      	ldr	r0, [r4, #0]
 801a6c8:	3008      	adds	r0, #8
 801a6ca:	f7fe fbff 	bl	8018ecc <rcl_service_is_valid>
 801a6ce:	b1b0      	cbz	r0, 801a6fe <rcl_action_send_cancel_response+0x56>
 801a6d0:	6820      	ldr	r0, [r4, #0]
 801a6d2:	300c      	adds	r0, #12
 801a6d4:	f7f4 fc4e 	bl	800ef74 <rcl_publisher_is_valid>
 801a6d8:	b188      	cbz	r0, 801a6fe <rcl_action_send_cancel_response+0x56>
 801a6da:	6820      	ldr	r0, [r4, #0]
 801a6dc:	3010      	adds	r0, #16
 801a6de:	f7f4 fc49 	bl	800ef74 <rcl_publisher_is_valid>
 801a6e2:	b160      	cbz	r0, 801a6fe <rcl_action_send_cancel_response+0x56>
 801a6e4:	b185      	cbz	r5, 801a708 <rcl_action_send_cancel_response+0x60>
 801a6e6:	b17e      	cbz	r6, 801a708 <rcl_action_send_cancel_response+0x60>
 801a6e8:	6820      	ldr	r0, [r4, #0]
 801a6ea:	4632      	mov	r2, r6
 801a6ec:	4629      	mov	r1, r5
 801a6ee:	3004      	adds	r0, #4
 801a6f0:	f7fe fbbc 	bl	8018e6c <rcl_send_response>
 801a6f4:	b110      	cbz	r0, 801a6fc <rcl_action_send_cancel_response+0x54>
 801a6f6:	2802      	cmp	r0, #2
 801a6f8:	bf18      	it	ne
 801a6fa:	2001      	movne	r0, #1
 801a6fc:	bd70      	pop	{r4, r5, r6, pc}
 801a6fe:	f7f6 f8d7 	bl	80108b0 <rcutils_reset_error>
 801a702:	f640 0098 	movw	r0, #2200	@ 0x898
 801a706:	bd70      	pop	{r4, r5, r6, pc}
 801a708:	200b      	movs	r0, #11
 801a70a:	bd70      	pop	{r4, r5, r6, pc}
 801a70c:	f640 0098 	movw	r0, #2200	@ 0x898
 801a710:	4770      	bx	lr
 801a712:	bf00      	nop

0801a714 <rcl_action_wait_set_add_action_server>:
 801a714:	2800      	cmp	r0, #0
 801a716:	d04d      	beq.n	801a7b4 <rcl_action_wait_set_add_action_server+0xa0>
 801a718:	b570      	push	{r4, r5, r6, lr}
 801a71a:	460c      	mov	r4, r1
 801a71c:	b159      	cbz	r1, 801a736 <rcl_action_wait_set_add_action_server+0x22>
 801a71e:	4605      	mov	r5, r0
 801a720:	6808      	ldr	r0, [r1, #0]
 801a722:	b140      	cbz	r0, 801a736 <rcl_action_wait_set_add_action_server+0x22>
 801a724:	4616      	mov	r6, r2
 801a726:	f7fe fbd1 	bl	8018ecc <rcl_service_is_valid>
 801a72a:	b120      	cbz	r0, 801a736 <rcl_action_wait_set_add_action_server+0x22>
 801a72c:	6820      	ldr	r0, [r4, #0]
 801a72e:	3004      	adds	r0, #4
 801a730:	f7fe fbcc 	bl	8018ecc <rcl_service_is_valid>
 801a734:	b910      	cbnz	r0, 801a73c <rcl_action_wait_set_add_action_server+0x28>
 801a736:	f640 0098 	movw	r0, #2200	@ 0x898
 801a73a:	bd70      	pop	{r4, r5, r6, pc}
 801a73c:	6820      	ldr	r0, [r4, #0]
 801a73e:	3008      	adds	r0, #8
 801a740:	f7fe fbc4 	bl	8018ecc <rcl_service_is_valid>
 801a744:	2800      	cmp	r0, #0
 801a746:	d0f6      	beq.n	801a736 <rcl_action_wait_set_add_action_server+0x22>
 801a748:	6820      	ldr	r0, [r4, #0]
 801a74a:	300c      	adds	r0, #12
 801a74c:	f7f4 fc2a 	bl	800efa4 <rcl_publisher_is_valid_except_context>
 801a750:	2800      	cmp	r0, #0
 801a752:	d0f0      	beq.n	801a736 <rcl_action_wait_set_add_action_server+0x22>
 801a754:	6820      	ldr	r0, [r4, #0]
 801a756:	3010      	adds	r0, #16
 801a758:	f7f4 fc24 	bl	800efa4 <rcl_publisher_is_valid_except_context>
 801a75c:	2800      	cmp	r0, #0
 801a75e:	d0ea      	beq.n	801a736 <rcl_action_wait_set_add_action_server+0x22>
 801a760:	6821      	ldr	r1, [r4, #0]
 801a762:	4628      	mov	r0, r5
 801a764:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801a768:	f7ff fa8a 	bl	8019c80 <rcl_wait_set_add_service>
 801a76c:	2800      	cmp	r0, #0
 801a76e:	d1e4      	bne.n	801a73a <rcl_action_wait_set_add_action_server+0x26>
 801a770:	6821      	ldr	r1, [r4, #0]
 801a772:	4628      	mov	r0, r5
 801a774:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801a778:	3104      	adds	r1, #4
 801a77a:	f7ff fa81 	bl	8019c80 <rcl_wait_set_add_service>
 801a77e:	2800      	cmp	r0, #0
 801a780:	d1db      	bne.n	801a73a <rcl_action_wait_set_add_action_server+0x26>
 801a782:	6821      	ldr	r1, [r4, #0]
 801a784:	4628      	mov	r0, r5
 801a786:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801a78a:	3108      	adds	r1, #8
 801a78c:	f7ff fa78 	bl	8019c80 <rcl_wait_set_add_service>
 801a790:	2800      	cmp	r0, #0
 801a792:	d1d2      	bne.n	801a73a <rcl_action_wait_set_add_action_server+0x26>
 801a794:	6821      	ldr	r1, [r4, #0]
 801a796:	4628      	mov	r0, r5
 801a798:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801a79c:	3114      	adds	r1, #20
 801a79e:	f7ff fa13 	bl	8019bc8 <rcl_wait_set_add_timer>
 801a7a2:	2800      	cmp	r0, #0
 801a7a4:	d1c9      	bne.n	801a73a <rcl_action_wait_set_add_action_server+0x26>
 801a7a6:	2e00      	cmp	r6, #0
 801a7a8:	d0c7      	beq.n	801a73a <rcl_action_wait_set_add_action_server+0x26>
 801a7aa:	6823      	ldr	r3, [r4, #0]
 801a7ac:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801a7b0:	6033      	str	r3, [r6, #0]
 801a7b2:	bd70      	pop	{r4, r5, r6, pc}
 801a7b4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a7b8:	4770      	bx	lr
 801a7ba:	bf00      	nop

0801a7bc <rcl_action_server_wait_set_get_entities_ready>:
 801a7bc:	2800      	cmp	r0, #0
 801a7be:	d05a      	beq.n	801a876 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	b161      	cbz	r1, 801a7e0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a7c6:	4605      	mov	r5, r0
 801a7c8:	6808      	ldr	r0, [r1, #0]
 801a7ca:	b148      	cbz	r0, 801a7e0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a7cc:	4616      	mov	r6, r2
 801a7ce:	461f      	mov	r7, r3
 801a7d0:	f7fe fb7c 	bl	8018ecc <rcl_service_is_valid>
 801a7d4:	b120      	cbz	r0, 801a7e0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a7d6:	6820      	ldr	r0, [r4, #0]
 801a7d8:	3004      	adds	r0, #4
 801a7da:	f7fe fb77 	bl	8018ecc <rcl_service_is_valid>
 801a7de:	b910      	cbnz	r0, 801a7e6 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801a7e0:	f640 0098 	movw	r0, #2200	@ 0x898
 801a7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7e6:	6820      	ldr	r0, [r4, #0]
 801a7e8:	3008      	adds	r0, #8
 801a7ea:	f7fe fb6f 	bl	8018ecc <rcl_service_is_valid>
 801a7ee:	2800      	cmp	r0, #0
 801a7f0:	d0f6      	beq.n	801a7e0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a7f2:	6820      	ldr	r0, [r4, #0]
 801a7f4:	300c      	adds	r0, #12
 801a7f6:	f7f4 fbd5 	bl	800efa4 <rcl_publisher_is_valid_except_context>
 801a7fa:	2800      	cmp	r0, #0
 801a7fc:	d0f0      	beq.n	801a7e0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a7fe:	6820      	ldr	r0, [r4, #0]
 801a800:	3010      	adds	r0, #16
 801a802:	f7f4 fbcf 	bl	800efa4 <rcl_publisher_is_valid_except_context>
 801a806:	2800      	cmp	r0, #0
 801a808:	d0ea      	beq.n	801a7e0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a80a:	b3be      	cbz	r6, 801a87c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a80c:	b3b7      	cbz	r7, 801a87c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a80e:	9b06      	ldr	r3, [sp, #24]
 801a810:	b3a3      	cbz	r3, 801a87c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a812:	9b07      	ldr	r3, [sp, #28]
 801a814:	b393      	cbz	r3, 801a87c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a816:	6821      	ldr	r1, [r4, #0]
 801a818:	692a      	ldr	r2, [r5, #16]
 801a81a:	6a2c      	ldr	r4, [r5, #32]
 801a81c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801a820:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801a824:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801a828:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801a82c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801a830:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a834:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a838:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801a83c:	1a64      	subs	r4, r4, r1
 801a83e:	fab4 f484 	clz	r4, r4
 801a842:	0964      	lsrs	r4, r4, #5
 801a844:	7034      	strb	r4, [r6, #0]
 801a846:	1d0c      	adds	r4, r1, #4
 801a848:	1b1b      	subs	r3, r3, r4
 801a84a:	fab3 f383 	clz	r3, r3
 801a84e:	095b      	lsrs	r3, r3, #5
 801a850:	f101 0408 	add.w	r4, r1, #8
 801a854:	703b      	strb	r3, [r7, #0]
 801a856:	f101 0314 	add.w	r3, r1, #20
 801a85a:	1b01      	subs	r1, r0, r4
 801a85c:	1ad3      	subs	r3, r2, r3
 801a85e:	fab1 f181 	clz	r1, r1
 801a862:	9a06      	ldr	r2, [sp, #24]
 801a864:	0949      	lsrs	r1, r1, #5
 801a866:	7011      	strb	r1, [r2, #0]
 801a868:	fab3 f383 	clz	r3, r3
 801a86c:	9a07      	ldr	r2, [sp, #28]
 801a86e:	095b      	lsrs	r3, r3, #5
 801a870:	2000      	movs	r0, #0
 801a872:	7013      	strb	r3, [r2, #0]
 801a874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a876:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a87a:	4770      	bx	lr
 801a87c:	200b      	movs	r0, #11
 801a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a880 <_execute_event_handler>:
 801a880:	2002      	movs	r0, #2
 801a882:	4770      	bx	lr

0801a884 <_cancel_goal_event_handler>:
 801a884:	2003      	movs	r0, #3
 801a886:	4770      	bx	lr

0801a888 <_succeed_event_handler>:
 801a888:	2004      	movs	r0, #4
 801a88a:	4770      	bx	lr

0801a88c <_abort_event_handler>:
 801a88c:	2006      	movs	r0, #6
 801a88e:	4770      	bx	lr

0801a890 <_canceled_event_handler>:
 801a890:	2005      	movs	r0, #5
 801a892:	4770      	bx	lr

0801a894 <rcl_action_transition_goal_state>:
 801a894:	fa5f fc80 	uxtb.w	ip, r0
 801a898:	f1bc 0f06 	cmp.w	ip, #6
 801a89c:	d80c      	bhi.n	801a8b8 <rcl_action_transition_goal_state+0x24>
 801a89e:	2904      	cmp	r1, #4
 801a8a0:	d80a      	bhi.n	801a8b8 <rcl_action_transition_goal_state+0x24>
 801a8a2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801a8a6:	b410      	push	{r4}
 801a8a8:	440b      	add	r3, r1
 801a8aa:	4c06      	ldr	r4, [pc, #24]	@ (801a8c4 <rcl_action_transition_goal_state+0x30>)
 801a8ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a8b0:	b123      	cbz	r3, 801a8bc <rcl_action_transition_goal_state+0x28>
 801a8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8b6:	4718      	bx	r3
 801a8b8:	2000      	movs	r0, #0
 801a8ba:	4770      	bx	lr
 801a8bc:	2000      	movs	r0, #0
 801a8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8c2:	4770      	bx	lr
 801a8c4:	08021184 	.word	0x08021184

0801a8c8 <rcl_action_get_zero_initialized_cancel_response>:
 801a8c8:	b510      	push	{r4, lr}
 801a8ca:	4c07      	ldr	r4, [pc, #28]	@ (801a8e8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801a8cc:	4686      	mov	lr, r0
 801a8ce:	4684      	mov	ip, r0
 801a8d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a8d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a8dc:	6823      	ldr	r3, [r4, #0]
 801a8de:	f8cc 3000 	str.w	r3, [ip]
 801a8e2:	4670      	mov	r0, lr
 801a8e4:	bd10      	pop	{r4, pc}
 801a8e6:	bf00      	nop
 801a8e8:	08021210 	.word	0x08021210

0801a8ec <rclc_action_send_result_request>:
 801a8ec:	b1d0      	cbz	r0, 801a924 <rclc_action_send_result_request+0x38>
 801a8ee:	b500      	push	{lr}
 801a8f0:	4684      	mov	ip, r0
 801a8f2:	b087      	sub	sp, #28
 801a8f4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801a8f8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801a8fc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801a900:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801a904:	f10d 0e08 	add.w	lr, sp, #8
 801a908:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a90c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a910:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801a914:	a902      	add	r1, sp, #8
 801a916:	3010      	adds	r0, #16
 801a918:	f7ff fbfa 	bl	801a110 <rcl_action_send_result_request>
 801a91c:	b920      	cbnz	r0, 801a928 <rclc_action_send_result_request+0x3c>
 801a91e:	b007      	add	sp, #28
 801a920:	f85d fb04 	ldr.w	pc, [sp], #4
 801a924:	200b      	movs	r0, #11
 801a926:	4770      	bx	lr
 801a928:	9001      	str	r0, [sp, #4]
 801a92a:	f7f5 ffc1 	bl	80108b0 <rcutils_reset_error>
 801a92e:	9801      	ldr	r0, [sp, #4]
 801a930:	b007      	add	sp, #28
 801a932:	f85d fb04 	ldr.w	pc, [sp], #4
 801a936:	bf00      	nop

0801a938 <rclc_action_take_goal_handle>:
 801a938:	4603      	mov	r3, r0
 801a93a:	b158      	cbz	r0, 801a954 <rclc_action_take_goal_handle+0x1c>
 801a93c:	6880      	ldr	r0, [r0, #8]
 801a93e:	b148      	cbz	r0, 801a954 <rclc_action_take_goal_handle+0x1c>
 801a940:	6801      	ldr	r1, [r0, #0]
 801a942:	6099      	str	r1, [r3, #8]
 801a944:	2200      	movs	r2, #0
 801a946:	7202      	strb	r2, [r0, #8]
 801a948:	68d9      	ldr	r1, [r3, #12]
 801a94a:	6001      	str	r1, [r0, #0]
 801a94c:	6202      	str	r2, [r0, #32]
 801a94e:	8482      	strh	r2, [r0, #36]	@ 0x24
 801a950:	60d8      	str	r0, [r3, #12]
 801a952:	4770      	bx	lr
 801a954:	4770      	bx	lr
 801a956:	bf00      	nop

0801a958 <rclc_action_remove_used_goal_handle>:
 801a958:	b180      	cbz	r0, 801a97c <rclc_action_remove_used_goal_handle+0x24>
 801a95a:	b179      	cbz	r1, 801a97c <rclc_action_remove_used_goal_handle+0x24>
 801a95c:	68c3      	ldr	r3, [r0, #12]
 801a95e:	4299      	cmp	r1, r3
 801a960:	d00d      	beq.n	801a97e <rclc_action_remove_used_goal_handle+0x26>
 801a962:	b12b      	cbz	r3, 801a970 <rclc_action_remove_used_goal_handle+0x18>
 801a964:	681a      	ldr	r2, [r3, #0]
 801a966:	4291      	cmp	r1, r2
 801a968:	d003      	beq.n	801a972 <rclc_action_remove_used_goal_handle+0x1a>
 801a96a:	4613      	mov	r3, r2
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d1f9      	bne.n	801a964 <rclc_action_remove_used_goal_handle+0xc>
 801a970:	4770      	bx	lr
 801a972:	680a      	ldr	r2, [r1, #0]
 801a974:	601a      	str	r2, [r3, #0]
 801a976:	6883      	ldr	r3, [r0, #8]
 801a978:	600b      	str	r3, [r1, #0]
 801a97a:	6081      	str	r1, [r0, #8]
 801a97c:	4770      	bx	lr
 801a97e:	680b      	ldr	r3, [r1, #0]
 801a980:	60c3      	str	r3, [r0, #12]
 801a982:	e7f8      	b.n	801a976 <rclc_action_remove_used_goal_handle+0x1e>

0801a984 <rclc_action_find_goal_handle_by_uuid>:
 801a984:	b538      	push	{r3, r4, r5, lr}
 801a986:	b180      	cbz	r0, 801a9aa <rclc_action_find_goal_handle_by_uuid+0x26>
 801a988:	460d      	mov	r5, r1
 801a98a:	b181      	cbz	r1, 801a9ae <rclc_action_find_goal_handle_by_uuid+0x2a>
 801a98c:	68c4      	ldr	r4, [r0, #12]
 801a98e:	b914      	cbnz	r4, 801a996 <rclc_action_find_goal_handle_by_uuid+0x12>
 801a990:	e009      	b.n	801a9a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a992:	6824      	ldr	r4, [r4, #0]
 801a994:	b13c      	cbz	r4, 801a9a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a996:	2210      	movs	r2, #16
 801a998:	4629      	mov	r1, r5
 801a99a:	f104 0009 	add.w	r0, r4, #9
 801a99e:	f003 f975 	bl	801dc8c <memcmp>
 801a9a2:	2800      	cmp	r0, #0
 801a9a4:	d1f5      	bne.n	801a992 <rclc_action_find_goal_handle_by_uuid+0xe>
 801a9a6:	4620      	mov	r0, r4
 801a9a8:	bd38      	pop	{r3, r4, r5, pc}
 801a9aa:	4604      	mov	r4, r0
 801a9ac:	e7fb      	b.n	801a9a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a9ae:	460c      	mov	r4, r1
 801a9b0:	e7f9      	b.n	801a9a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801a9b2:	bf00      	nop

0801a9b4 <rclc_action_find_first_handle_by_status>:
 801a9b4:	b140      	cbz	r0, 801a9c8 <rclc_action_find_first_handle_by_status+0x14>
 801a9b6:	68c0      	ldr	r0, [r0, #12]
 801a9b8:	b910      	cbnz	r0, 801a9c0 <rclc_action_find_first_handle_by_status+0xc>
 801a9ba:	e005      	b.n	801a9c8 <rclc_action_find_first_handle_by_status+0x14>
 801a9bc:	6800      	ldr	r0, [r0, #0]
 801a9be:	b118      	cbz	r0, 801a9c8 <rclc_action_find_first_handle_by_status+0x14>
 801a9c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801a9c4:	428b      	cmp	r3, r1
 801a9c6:	d1f9      	bne.n	801a9bc <rclc_action_find_first_handle_by_status+0x8>
 801a9c8:	4770      	bx	lr
 801a9ca:	bf00      	nop

0801a9cc <rclc_action_find_first_terminated_handle>:
 801a9cc:	b140      	cbz	r0, 801a9e0 <rclc_action_find_first_terminated_handle+0x14>
 801a9ce:	68c0      	ldr	r0, [r0, #12]
 801a9d0:	b910      	cbnz	r0, 801a9d8 <rclc_action_find_first_terminated_handle+0xc>
 801a9d2:	e005      	b.n	801a9e0 <rclc_action_find_first_terminated_handle+0x14>
 801a9d4:	6800      	ldr	r0, [r0, #0]
 801a9d6:	b118      	cbz	r0, 801a9e0 <rclc_action_find_first_terminated_handle+0x14>
 801a9d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801a9dc:	2b03      	cmp	r3, #3
 801a9de:	ddf9      	ble.n	801a9d4 <rclc_action_find_first_terminated_handle+0x8>
 801a9e0:	4770      	bx	lr
 801a9e2:	bf00      	nop

0801a9e4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801a9e4:	b170      	cbz	r0, 801aa04 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801a9e6:	68c0      	ldr	r0, [r0, #12]
 801a9e8:	b160      	cbz	r0, 801aa04 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801a9ea:	b410      	push	{r4}
 801a9ec:	e001      	b.n	801a9f2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801a9ee:	6800      	ldr	r0, [r0, #0]
 801a9f0:	b128      	cbz	r0, 801a9fe <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801a9f2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801a9f6:	4299      	cmp	r1, r3
 801a9f8:	bf08      	it	eq
 801a9fa:	4294      	cmpeq	r4, r2
 801a9fc:	d1f7      	bne.n	801a9ee <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801a9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa02:	4770      	bx	lr
 801aa04:	4770      	bx	lr
 801aa06:	bf00      	nop

0801aa08 <rclc_action_find_handle_by_result_request_sequence_number>:
 801aa08:	b170      	cbz	r0, 801aa28 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801aa0a:	68c0      	ldr	r0, [r0, #12]
 801aa0c:	b160      	cbz	r0, 801aa28 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801aa0e:	b410      	push	{r4}
 801aa10:	e001      	b.n	801aa16 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801aa12:	6800      	ldr	r0, [r0, #0]
 801aa14:	b128      	cbz	r0, 801aa22 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801aa16:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801aa1a:	4299      	cmp	r1, r3
 801aa1c:	bf08      	it	eq
 801aa1e:	4294      	cmpeq	r4, r2
 801aa20:	d1f7      	bne.n	801aa12 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801aa22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa26:	4770      	bx	lr
 801aa28:	4770      	bx	lr
 801aa2a:	bf00      	nop

0801aa2c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801aa2c:	b170      	cbz	r0, 801aa4c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801aa2e:	68c0      	ldr	r0, [r0, #12]
 801aa30:	b160      	cbz	r0, 801aa4c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801aa32:	b410      	push	{r4}
 801aa34:	e001      	b.n	801aa3a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801aa36:	6800      	ldr	r0, [r0, #0]
 801aa38:	b128      	cbz	r0, 801aa46 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801aa3a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801aa3e:	4299      	cmp	r1, r3
 801aa40:	bf08      	it	eq
 801aa42:	4294      	cmpeq	r4, r2
 801aa44:	d1f7      	bne.n	801aa36 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801aa46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa4a:	4770      	bx	lr
 801aa4c:	4770      	bx	lr
 801aa4e:	bf00      	nop

0801aa50 <rclc_action_find_first_handle_with_goal_response>:
 801aa50:	b140      	cbz	r0, 801aa64 <rclc_action_find_first_handle_with_goal_response+0x14>
 801aa52:	68c0      	ldr	r0, [r0, #12]
 801aa54:	b910      	cbnz	r0, 801aa5c <rclc_action_find_first_handle_with_goal_response+0xc>
 801aa56:	e005      	b.n	801aa64 <rclc_action_find_first_handle_with_goal_response+0x14>
 801aa58:	6800      	ldr	r0, [r0, #0]
 801aa5a:	b118      	cbz	r0, 801aa64 <rclc_action_find_first_handle_with_goal_response+0x14>
 801aa5c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d0f9      	beq.n	801aa58 <rclc_action_find_first_handle_with_goal_response+0x8>
 801aa64:	4770      	bx	lr
 801aa66:	bf00      	nop

0801aa68 <rclc_action_find_first_handle_with_result_response>:
 801aa68:	b140      	cbz	r0, 801aa7c <rclc_action_find_first_handle_with_result_response+0x14>
 801aa6a:	68c0      	ldr	r0, [r0, #12]
 801aa6c:	b910      	cbnz	r0, 801aa74 <rclc_action_find_first_handle_with_result_response+0xc>
 801aa6e:	e005      	b.n	801aa7c <rclc_action_find_first_handle_with_result_response+0x14>
 801aa70:	6800      	ldr	r0, [r0, #0]
 801aa72:	b118      	cbz	r0, 801aa7c <rclc_action_find_first_handle_with_result_response+0x14>
 801aa74:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d0f9      	beq.n	801aa70 <rclc_action_find_first_handle_with_result_response+0x8>
 801aa7c:	4770      	bx	lr
 801aa7e:	bf00      	nop

0801aa80 <rclc_action_server_response_goal_request>:
 801aa80:	b198      	cbz	r0, 801aaaa <rclc_action_server_response_goal_request+0x2a>
 801aa82:	b510      	push	{r4, lr}
 801aa84:	6844      	ldr	r4, [r0, #4]
 801aa86:	b086      	sub	sp, #24
 801aa88:	2200      	movs	r2, #0
 801aa8a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801aa8e:	460b      	mov	r3, r1
 801aa90:	9205      	str	r2, [sp, #20]
 801aa92:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801aa96:	aa03      	add	r2, sp, #12
 801aa98:	f104 0010 	add.w	r0, r4, #16
 801aa9c:	f88d 300c 	strb.w	r3, [sp, #12]
 801aaa0:	f7ff fd52 	bl	801a548 <rcl_action_send_goal_response>
 801aaa4:	b918      	cbnz	r0, 801aaae <rclc_action_server_response_goal_request+0x2e>
 801aaa6:	b006      	add	sp, #24
 801aaa8:	bd10      	pop	{r4, pc}
 801aaaa:	200b      	movs	r0, #11
 801aaac:	4770      	bx	lr
 801aaae:	9001      	str	r0, [sp, #4]
 801aab0:	f7f5 fefe 	bl	80108b0 <rcutils_reset_error>
 801aab4:	9801      	ldr	r0, [sp, #4]
 801aab6:	b006      	add	sp, #24
 801aab8:	bd10      	pop	{r4, pc}
 801aaba:	bf00      	nop
 801aabc:	0000      	movs	r0, r0
	...

0801aac0 <rclc_action_server_goal_cancel_accept>:
 801aac0:	b310      	cbz	r0, 801ab08 <rclc_action_server_goal_cancel_accept+0x48>
 801aac2:	b510      	push	{r4, lr}
 801aac4:	b090      	sub	sp, #64	@ 0x40
 801aac6:	4604      	mov	r4, r0
 801aac8:	a806      	add	r0, sp, #24
 801aaca:	f7ff fefd 	bl	801a8c8 <rcl_action_get_zero_initialized_cancel_response>
 801aace:	2300      	movs	r3, #0
 801aad0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801aad4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801aad8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801aadc:	f88d 3018 	strb.w	r3, [sp, #24]
 801aae0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801aae4:	f8cd d01c 	str.w	sp, [sp, #28]
 801aae8:	46ec      	mov	ip, sp
 801aaea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aaee:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801ab10 <rclc_action_server_goal_cancel_accept+0x50>
 801aaf2:	6860      	ldr	r0, [r4, #4]
 801aaf4:	aa06      	add	r2, sp, #24
 801aaf6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801aafa:	3010      	adds	r0, #16
 801aafc:	ed8d 7b08 	vstr	d7, [sp, #32]
 801ab00:	f7ff fdd2 	bl	801a6a8 <rcl_action_send_cancel_response>
 801ab04:	b010      	add	sp, #64	@ 0x40
 801ab06:	bd10      	pop	{r4, pc}
 801ab08:	200b      	movs	r0, #11
 801ab0a:	4770      	bx	lr
 801ab0c:	f3af 8000 	nop.w
 801ab10:	00000001 	.word	0x00000001
 801ab14:	00000001 	.word	0x00000001

0801ab18 <rclc_action_server_goal_cancel_reject>:
 801ab18:	b082      	sub	sp, #8
 801ab1a:	b530      	push	{r4, r5, lr}
 801ab1c:	b08b      	sub	sp, #44	@ 0x2c
 801ab1e:	ac0e      	add	r4, sp, #56	@ 0x38
 801ab20:	e884 000c 	stmia.w	r4, {r2, r3}
 801ab24:	b188      	cbz	r0, 801ab4a <rclc_action_server_goal_cancel_reject+0x32>
 801ab26:	4604      	mov	r4, r0
 801ab28:	a801      	add	r0, sp, #4
 801ab2a:	460d      	mov	r5, r1
 801ab2c:	f7ff fecc 	bl	801a8c8 <rcl_action_get_zero_initialized_cancel_response>
 801ab30:	aa01      	add	r2, sp, #4
 801ab32:	a90e      	add	r1, sp, #56	@ 0x38
 801ab34:	f104 0010 	add.w	r0, r4, #16
 801ab38:	f88d 5004 	strb.w	r5, [sp, #4]
 801ab3c:	f7ff fdb4 	bl	801a6a8 <rcl_action_send_cancel_response>
 801ab40:	b00b      	add	sp, #44	@ 0x2c
 801ab42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab46:	b002      	add	sp, #8
 801ab48:	4770      	bx	lr
 801ab4a:	200b      	movs	r0, #11
 801ab4c:	b00b      	add	sp, #44	@ 0x2c
 801ab4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab52:	b002      	add	sp, #8
 801ab54:	4770      	bx	lr
 801ab56:	bf00      	nop

0801ab58 <rcutils_is_directory>:
 801ab58:	2000      	movs	r0, #0
 801ab5a:	4770      	bx	lr

0801ab5c <rcutils_join_path>:
 801ab5c:	b082      	sub	sp, #8
 801ab5e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801ab62:	2000      	movs	r0, #0
 801ab64:	b002      	add	sp, #8
 801ab66:	4770      	bx	lr

0801ab68 <rcutils_to_native_path>:
 801ab68:	b084      	sub	sp, #16
 801ab6a:	a801      	add	r0, sp, #4
 801ab6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801ab70:	b004      	add	sp, #16
 801ab72:	2000      	movs	r0, #0
 801ab74:	4770      	bx	lr
 801ab76:	bf00      	nop

0801ab78 <rcutils_get_zero_initialized_string_array>:
 801ab78:	b570      	push	{r4, r5, r6, lr}
 801ab7a:	b086      	sub	sp, #24
 801ab7c:	4606      	mov	r6, r0
 801ab7e:	4668      	mov	r0, sp
 801ab80:	f7f5 fd78 	bl	8010674 <rcutils_get_zero_initialized_allocator>
 801ab84:	46ee      	mov	lr, sp
 801ab86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab8a:	4c09      	ldr	r4, [pc, #36]	@ (801abb0 <rcutils_get_zero_initialized_string_array+0x38>)
 801ab8c:	f104 0508 	add.w	r5, r4, #8
 801ab90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab92:	46a4      	mov	ip, r4
 801ab94:	f8de 3000 	ldr.w	r3, [lr]
 801ab98:	602b      	str	r3, [r5, #0]
 801ab9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ab9e:	4634      	mov	r4, r6
 801aba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aba2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801aba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801abaa:	4630      	mov	r0, r6
 801abac:	b006      	add	sp, #24
 801abae:	bd70      	pop	{r4, r5, r6, pc}
 801abb0:	20019f98 	.word	0x20019f98

0801abb4 <rcutils_string_array_init>:
 801abb4:	b1da      	cbz	r2, 801abee <rcutils_string_array_init+0x3a>
 801abb6:	b570      	push	{r4, r5, r6, lr}
 801abb8:	4605      	mov	r5, r0
 801abba:	b1d0      	cbz	r0, 801abf2 <rcutils_string_array_init+0x3e>
 801abbc:	460e      	mov	r6, r1
 801abbe:	4614      	mov	r4, r2
 801abc0:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801abc4:	6001      	str	r1, [r0, #0]
 801abc6:	2104      	movs	r1, #4
 801abc8:	4630      	mov	r0, r6
 801abca:	4798      	blx	r3
 801abcc:	6068      	str	r0, [r5, #4]
 801abce:	b150      	cbz	r0, 801abe6 <rcutils_string_array_init+0x32>
 801abd0:	46a4      	mov	ip, r4
 801abd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801abd6:	f105 0408 	add.w	r4, r5, #8
 801abda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abdc:	f8dc 3000 	ldr.w	r3, [ip]
 801abe0:	6023      	str	r3, [r4, #0]
 801abe2:	2000      	movs	r0, #0
 801abe4:	bd70      	pop	{r4, r5, r6, pc}
 801abe6:	2e00      	cmp	r6, #0
 801abe8:	d0f2      	beq.n	801abd0 <rcutils_string_array_init+0x1c>
 801abea:	200a      	movs	r0, #10
 801abec:	bd70      	pop	{r4, r5, r6, pc}
 801abee:	200b      	movs	r0, #11
 801abf0:	4770      	bx	lr
 801abf2:	200b      	movs	r0, #11
 801abf4:	bd70      	pop	{r4, r5, r6, pc}
 801abf6:	bf00      	nop

0801abf8 <rcutils_string_array_fini>:
 801abf8:	b310      	cbz	r0, 801ac40 <rcutils_string_array_fini+0x48>
 801abfa:	6843      	ldr	r3, [r0, #4]
 801abfc:	b570      	push	{r4, r5, r6, lr}
 801abfe:	4604      	mov	r4, r0
 801ac00:	b1d3      	cbz	r3, 801ac38 <rcutils_string_array_fini+0x40>
 801ac02:	3008      	adds	r0, #8
 801ac04:	f7f5 fd70 	bl	80106e8 <rcutils_allocator_is_valid>
 801ac08:	b1c0      	cbz	r0, 801ac3c <rcutils_string_array_fini+0x44>
 801ac0a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ac0e:	b16b      	cbz	r3, 801ac2c <rcutils_string_array_fini+0x34>
 801ac10:	2500      	movs	r5, #0
 801ac12:	462e      	mov	r6, r5
 801ac14:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ac18:	68e3      	ldr	r3, [r4, #12]
 801ac1a:	69a1      	ldr	r1, [r4, #24]
 801ac1c:	4798      	blx	r3
 801ac1e:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ac22:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801ac26:	3501      	adds	r5, #1
 801ac28:	42ab      	cmp	r3, r5
 801ac2a:	d8f3      	bhi.n	801ac14 <rcutils_string_array_fini+0x1c>
 801ac2c:	68e3      	ldr	r3, [r4, #12]
 801ac2e:	69a1      	ldr	r1, [r4, #24]
 801ac30:	4798      	blx	r3
 801ac32:	2300      	movs	r3, #0
 801ac34:	e9c4 3300 	strd	r3, r3, [r4]
 801ac38:	2000      	movs	r0, #0
 801ac3a:	bd70      	pop	{r4, r5, r6, pc}
 801ac3c:	200b      	movs	r0, #11
 801ac3e:	bd70      	pop	{r4, r5, r6, pc}
 801ac40:	200b      	movs	r0, #11
 801ac42:	4770      	bx	lr

0801ac44 <rcutils_get_zero_initialized_string_map>:
 801ac44:	4b01      	ldr	r3, [pc, #4]	@ (801ac4c <rcutils_get_zero_initialized_string_map+0x8>)
 801ac46:	2000      	movs	r0, #0
 801ac48:	6018      	str	r0, [r3, #0]
 801ac4a:	4770      	bx	lr
 801ac4c:	20019fb4 	.word	0x20019fb4

0801ac50 <rcutils_string_map_reserve>:
 801ac50:	2800      	cmp	r0, #0
 801ac52:	d04e      	beq.n	801acf2 <rcutils_string_map_reserve+0xa2>
 801ac54:	b530      	push	{r4, r5, lr}
 801ac56:	6803      	ldr	r3, [r0, #0]
 801ac58:	b087      	sub	sp, #28
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d043      	beq.n	801ace8 <rcutils_string_map_reserve+0x98>
 801ac60:	f103 0c0c 	add.w	ip, r3, #12
 801ac64:	460d      	mov	r5, r1
 801ac66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac6a:	f10d 0e04 	add.w	lr, sp, #4
 801ac6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ac72:	f8dc 3000 	ldr.w	r3, [ip]
 801ac76:	f8ce 3000 	str.w	r3, [lr]
 801ac7a:	a801      	add	r0, sp, #4
 801ac7c:	f7f5 fd34 	bl	80106e8 <rcutils_allocator_is_valid>
 801ac80:	b308      	cbz	r0, 801acc6 <rcutils_string_map_reserve+0x76>
 801ac82:	6823      	ldr	r3, [r4, #0]
 801ac84:	6899      	ldr	r1, [r3, #8]
 801ac86:	42a9      	cmp	r1, r5
 801ac88:	d829      	bhi.n	801acde <rcutils_string_map_reserve+0x8e>
 801ac8a:	685a      	ldr	r2, [r3, #4]
 801ac8c:	42aa      	cmp	r2, r5
 801ac8e:	d024      	beq.n	801acda <rcutils_string_map_reserve+0x8a>
 801ac90:	b1e5      	cbz	r5, 801accc <rcutils_string_map_reserve+0x7c>
 801ac92:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801ac96:	d22a      	bcs.n	801acee <rcutils_string_map_reserve+0x9e>
 801ac98:	6818      	ldr	r0, [r3, #0]
 801ac9a:	9a05      	ldr	r2, [sp, #20]
 801ac9c:	9b03      	ldr	r3, [sp, #12]
 801ac9e:	00e9      	lsls	r1, r5, #3
 801aca0:	4798      	blx	r3
 801aca2:	b320      	cbz	r0, 801acee <rcutils_string_map_reserve+0x9e>
 801aca4:	6824      	ldr	r4, [r4, #0]
 801aca6:	6861      	ldr	r1, [r4, #4]
 801aca8:	6020      	str	r0, [r4, #0]
 801acaa:	42a9      	cmp	r1, r5
 801acac:	d214      	bcs.n	801acd8 <rcutils_string_map_reserve+0x88>
 801acae:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801acb2:	1a69      	subs	r1, r5, r1
 801acb4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801acb8:	2200      	movs	r2, #0
 801acba:	e9c3 2200 	strd	r2, r2, [r3]
 801acbe:	3308      	adds	r3, #8
 801acc0:	428b      	cmp	r3, r1
 801acc2:	d1fa      	bne.n	801acba <rcutils_string_map_reserve+0x6a>
 801acc4:	e008      	b.n	801acd8 <rcutils_string_map_reserve+0x88>
 801acc6:	200b      	movs	r0, #11
 801acc8:	b007      	add	sp, #28
 801acca:	bd30      	pop	{r4, r5, pc}
 801accc:	9a02      	ldr	r2, [sp, #8]
 801acce:	9905      	ldr	r1, [sp, #20]
 801acd0:	6818      	ldr	r0, [r3, #0]
 801acd2:	4790      	blx	r2
 801acd4:	6824      	ldr	r4, [r4, #0]
 801acd6:	6025      	str	r5, [r4, #0]
 801acd8:	6065      	str	r5, [r4, #4]
 801acda:	2000      	movs	r0, #0
 801acdc:	e7f4      	b.n	801acc8 <rcutils_string_map_reserve+0x78>
 801acde:	4620      	mov	r0, r4
 801ace0:	f7ff ffb6 	bl	801ac50 <rcutils_string_map_reserve>
 801ace4:	b007      	add	sp, #28
 801ace6:	bd30      	pop	{r4, r5, pc}
 801ace8:	201f      	movs	r0, #31
 801acea:	b007      	add	sp, #28
 801acec:	bd30      	pop	{r4, r5, pc}
 801acee:	200a      	movs	r0, #10
 801acf0:	e7ea      	b.n	801acc8 <rcutils_string_map_reserve+0x78>
 801acf2:	200b      	movs	r0, #11
 801acf4:	4770      	bx	lr
 801acf6:	bf00      	nop

0801acf8 <rcutils_string_map_init>:
 801acf8:	b082      	sub	sp, #8
 801acfa:	b570      	push	{r4, r5, r6, lr}
 801acfc:	ac04      	add	r4, sp, #16
 801acfe:	e884 000c 	stmia.w	r4, {r2, r3}
 801ad02:	b378      	cbz	r0, 801ad64 <rcutils_string_map_init+0x6c>
 801ad04:	6806      	ldr	r6, [r0, #0]
 801ad06:	4604      	mov	r4, r0
 801ad08:	b12e      	cbz	r6, 801ad16 <rcutils_string_map_init+0x1e>
 801ad0a:	251e      	movs	r5, #30
 801ad0c:	4628      	mov	r0, r5
 801ad0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad12:	b002      	add	sp, #8
 801ad14:	4770      	bx	lr
 801ad16:	a804      	add	r0, sp, #16
 801ad18:	460d      	mov	r5, r1
 801ad1a:	f7f5 fce5 	bl	80106e8 <rcutils_allocator_is_valid>
 801ad1e:	b308      	cbz	r0, 801ad64 <rcutils_string_map_init+0x6c>
 801ad20:	9b04      	ldr	r3, [sp, #16]
 801ad22:	9908      	ldr	r1, [sp, #32]
 801ad24:	2020      	movs	r0, #32
 801ad26:	4798      	blx	r3
 801ad28:	6020      	str	r0, [r4, #0]
 801ad2a:	b308      	cbz	r0, 801ad70 <rcutils_string_map_init+0x78>
 801ad2c:	f10d 0e10 	add.w	lr, sp, #16
 801ad30:	e9c0 6600 	strd	r6, r6, [r0]
 801ad34:	6086      	str	r6, [r0, #8]
 801ad36:	f100 0c0c 	add.w	ip, r0, #12
 801ad3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad42:	f8de 3000 	ldr.w	r3, [lr]
 801ad46:	f8cc 3000 	str.w	r3, [ip]
 801ad4a:	4629      	mov	r1, r5
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	f7ff ff7f 	bl	801ac50 <rcutils_string_map_reserve>
 801ad52:	4605      	mov	r5, r0
 801ad54:	2800      	cmp	r0, #0
 801ad56:	d0d9      	beq.n	801ad0c <rcutils_string_map_init+0x14>
 801ad58:	9b05      	ldr	r3, [sp, #20]
 801ad5a:	9908      	ldr	r1, [sp, #32]
 801ad5c:	6820      	ldr	r0, [r4, #0]
 801ad5e:	4798      	blx	r3
 801ad60:	6026      	str	r6, [r4, #0]
 801ad62:	e7d3      	b.n	801ad0c <rcutils_string_map_init+0x14>
 801ad64:	250b      	movs	r5, #11
 801ad66:	4628      	mov	r0, r5
 801ad68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad6c:	b002      	add	sp, #8
 801ad6e:	4770      	bx	lr
 801ad70:	250a      	movs	r5, #10
 801ad72:	e7cb      	b.n	801ad0c <rcutils_string_map_init+0x14>

0801ad74 <rcutils_string_map_fini>:
 801ad74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad78:	b086      	sub	sp, #24
 801ad7a:	2800      	cmp	r0, #0
 801ad7c:	d04f      	beq.n	801ae1e <rcutils_string_map_fini+0xaa>
 801ad7e:	6805      	ldr	r5, [r0, #0]
 801ad80:	4606      	mov	r6, r0
 801ad82:	2d00      	cmp	r5, #0
 801ad84:	d046      	beq.n	801ae14 <rcutils_string_map_fini+0xa0>
 801ad86:	686b      	ldr	r3, [r5, #4]
 801ad88:	b353      	cbz	r3, 801ade0 <rcutils_string_map_fini+0x6c>
 801ad8a:	2400      	movs	r4, #0
 801ad8c:	682a      	ldr	r2, [r5, #0]
 801ad8e:	4627      	mov	r7, r4
 801ad90:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801ad94:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801ad98:	b1f8      	cbz	r0, 801adda <rcutils_string_map_fini+0x66>
 801ad9a:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 801ad9e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ada2:	4651      	mov	r1, sl
 801ada4:	47c8      	blx	r9
 801ada6:	682b      	ldr	r3, [r5, #0]
 801ada8:	eb03 0208 	add.w	r2, r3, r8
 801adac:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 801adb0:	6850      	ldr	r0, [r2, #4]
 801adb2:	4651      	mov	r1, sl
 801adb4:	47c8      	blx	r9
 801adb6:	682a      	ldr	r2, [r5, #0]
 801adb8:	68ab      	ldr	r3, [r5, #8]
 801adba:	4442      	add	r2, r8
 801adbc:	3b01      	subs	r3, #1
 801adbe:	6057      	str	r7, [r2, #4]
 801adc0:	60ab      	str	r3, [r5, #8]
 801adc2:	6835      	ldr	r5, [r6, #0]
 801adc4:	686b      	ldr	r3, [r5, #4]
 801adc6:	3401      	adds	r4, #1
 801adc8:	429c      	cmp	r4, r3
 801adca:	d209      	bcs.n	801ade0 <rcutils_string_map_fini+0x6c>
 801adcc:	682a      	ldr	r2, [r5, #0]
 801adce:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801add2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801add6:	2800      	cmp	r0, #0
 801add8:	d1df      	bne.n	801ad9a <rcutils_string_map_fini+0x26>
 801adda:	3401      	adds	r4, #1
 801addc:	42a3      	cmp	r3, r4
 801adde:	d8d7      	bhi.n	801ad90 <rcutils_string_map_fini+0x1c>
 801ade0:	2100      	movs	r1, #0
 801ade2:	4630      	mov	r0, r6
 801ade4:	f7ff ff34 	bl	801ac50 <rcutils_string_map_reserve>
 801ade8:	4604      	mov	r4, r0
 801adea:	b118      	cbz	r0, 801adf4 <rcutils_string_map_fini+0x80>
 801adec:	4620      	mov	r0, r4
 801adee:	b006      	add	sp, #24
 801adf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adf4:	6835      	ldr	r5, [r6, #0]
 801adf6:	350c      	adds	r5, #12
 801adf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adfa:	af01      	add	r7, sp, #4
 801adfc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801adfe:	682b      	ldr	r3, [r5, #0]
 801ae00:	603b      	str	r3, [r7, #0]
 801ae02:	a801      	add	r0, sp, #4
 801ae04:	f7f5 fc70 	bl	80106e8 <rcutils_allocator_is_valid>
 801ae08:	b148      	cbz	r0, 801ae1e <rcutils_string_map_fini+0xaa>
 801ae0a:	9b02      	ldr	r3, [sp, #8]
 801ae0c:	9905      	ldr	r1, [sp, #20]
 801ae0e:	6830      	ldr	r0, [r6, #0]
 801ae10:	4798      	blx	r3
 801ae12:	6034      	str	r4, [r6, #0]
 801ae14:	2400      	movs	r4, #0
 801ae16:	4620      	mov	r0, r4
 801ae18:	b006      	add	sp, #24
 801ae1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae1e:	240b      	movs	r4, #11
 801ae20:	4620      	mov	r0, r4
 801ae22:	b006      	add	sp, #24
 801ae24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801ae28 <rcutils_string_map_getn>:
 801ae28:	b338      	cbz	r0, 801ae7a <rcutils_string_map_getn+0x52>
 801ae2a:	6800      	ldr	r0, [r0, #0]
 801ae2c:	b328      	cbz	r0, 801ae7a <rcutils_string_map_getn+0x52>
 801ae2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae32:	460e      	mov	r6, r1
 801ae34:	b1c1      	cbz	r1, 801ae68 <rcutils_string_map_getn+0x40>
 801ae36:	e9d0 9800 	ldrd	r9, r8, [r0]
 801ae3a:	f1b8 0f00 	cmp.w	r8, #0
 801ae3e:	d013      	beq.n	801ae68 <rcutils_string_map_getn+0x40>
 801ae40:	4617      	mov	r7, r2
 801ae42:	2400      	movs	r4, #0
 801ae44:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801ae48:	4628      	mov	r0, r5
 801ae4a:	b155      	cbz	r5, 801ae62 <rcutils_string_map_getn+0x3a>
 801ae4c:	f7e5 fa48 	bl	80002e0 <strlen>
 801ae50:	42b8      	cmp	r0, r7
 801ae52:	4602      	mov	r2, r0
 801ae54:	4629      	mov	r1, r5
 801ae56:	bf38      	it	cc
 801ae58:	463a      	movcc	r2, r7
 801ae5a:	4630      	mov	r0, r6
 801ae5c:	f002 ff55 	bl	801dd0a <strncmp>
 801ae60:	b128      	cbz	r0, 801ae6e <rcutils_string_map_getn+0x46>
 801ae62:	3401      	adds	r4, #1
 801ae64:	45a0      	cmp	r8, r4
 801ae66:	d1ed      	bne.n	801ae44 <rcutils_string_map_getn+0x1c>
 801ae68:	2000      	movs	r0, #0
 801ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae6e:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801ae72:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801ae76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae7a:	4770      	bx	lr

0801ae7c <rmw_get_zero_initialized_discovery_options>:
 801ae7c:	b510      	push	{r4, lr}
 801ae7e:	2220      	movs	r2, #32
 801ae80:	4604      	mov	r4, r0
 801ae82:	2100      	movs	r1, #0
 801ae84:	f002 ff2c 	bl	801dce0 <memset>
 801ae88:	4620      	mov	r0, r4
 801ae8a:	bd10      	pop	{r4, pc}

0801ae8c <rmw_discovery_options_init>:
 801ae8c:	b328      	cbz	r0, 801aeda <rmw_discovery_options_init+0x4e>
 801ae8e:	b570      	push	{r4, r5, r6, lr}
 801ae90:	4604      	mov	r4, r0
 801ae92:	4610      	mov	r0, r2
 801ae94:	460e      	mov	r6, r1
 801ae96:	4615      	mov	r5, r2
 801ae98:	f7f5 fc26 	bl	80106e8 <rcutils_allocator_is_valid>
 801ae9c:	b1d8      	cbz	r0, 801aed6 <rmw_discovery_options_init+0x4a>
 801ae9e:	68a3      	ldr	r3, [r4, #8]
 801aea0:	b9cb      	cbnz	r3, 801aed6 <rmw_discovery_options_init+0x4a>
 801aea2:	6863      	ldr	r3, [r4, #4]
 801aea4:	b9bb      	cbnz	r3, 801aed6 <rmw_discovery_options_init+0x4a>
 801aea6:	7823      	ldrb	r3, [r4, #0]
 801aea8:	b90b      	cbnz	r3, 801aeae <rmw_discovery_options_init+0x22>
 801aeaa:	2302      	movs	r3, #2
 801aeac:	7023      	strb	r3, [r4, #0]
 801aeae:	b186      	cbz	r6, 801aed2 <rmw_discovery_options_init+0x46>
 801aeb0:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801aeb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801aeb8:	4630      	mov	r0, r6
 801aeba:	4798      	blx	r3
 801aebc:	6060      	str	r0, [r4, #4]
 801aebe:	b170      	cbz	r0, 801aede <rmw_discovery_options_init+0x52>
 801aec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aec2:	f104 0c0c 	add.w	ip, r4, #12
 801aec6:	60a6      	str	r6, [r4, #8]
 801aec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aecc:	682b      	ldr	r3, [r5, #0]
 801aece:	f8cc 3000 	str.w	r3, [ip]
 801aed2:	2000      	movs	r0, #0
 801aed4:	bd70      	pop	{r4, r5, r6, pc}
 801aed6:	200b      	movs	r0, #11
 801aed8:	bd70      	pop	{r4, r5, r6, pc}
 801aeda:	200b      	movs	r0, #11
 801aedc:	4770      	bx	lr
 801aede:	200a      	movs	r0, #10
 801aee0:	bd70      	pop	{r4, r5, r6, pc}
 801aee2:	bf00      	nop

0801aee4 <rmw_get_zero_initialized_context>:
 801aee4:	b530      	push	{r4, r5, lr}
 801aee6:	b097      	sub	sp, #92	@ 0x5c
 801aee8:	4604      	mov	r4, r0
 801aeea:	4668      	mov	r0, sp
 801aeec:	f7f5 fece 	bl	8010c8c <rmw_get_zero_initialized_init_options>
 801aef0:	2300      	movs	r3, #0
 801aef2:	2200      	movs	r2, #0
 801aef4:	e9c4 2300 	strd	r2, r3, [r4]
 801aef8:	2500      	movs	r5, #0
 801aefa:	4669      	mov	r1, sp
 801aefc:	2258      	movs	r2, #88	@ 0x58
 801aefe:	f104 0010 	add.w	r0, r4, #16
 801af02:	60a5      	str	r5, [r4, #8]
 801af04:	f003 f81d 	bl	801df42 <memcpy>
 801af08:	4620      	mov	r0, r4
 801af0a:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 801af0e:	b017      	add	sp, #92	@ 0x5c
 801af10:	bd30      	pop	{r4, r5, pc}
 801af12:	bf00      	nop

0801af14 <rmw_time_equal>:
 801af14:	b570      	push	{r4, r5, r6, lr}
 801af16:	b084      	sub	sp, #16
 801af18:	ac04      	add	r4, sp, #16
 801af1a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801af1e:	4925      	ldr	r1, [pc, #148]	@ (801afb4 <rmw_time_equal+0xa0>)
 801af20:	9c01      	ldr	r4, [sp, #4]
 801af22:	2202      	movs	r2, #2
 801af24:	4281      	cmp	r1, r0
 801af26:	41a2      	sbcs	r2, r4
 801af28:	d333      	bcc.n	801af92 <rmw_time_equal+0x7e>
 801af2a:	4603      	mov	r3, r0
 801af2c:	4822      	ldr	r0, [pc, #136]	@ (801afb8 <rmw_time_equal+0xa4>)
 801af2e:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 801af32:	fba3 3200 	umull	r3, r2, r3, r0
 801af36:	fb00 2204 	mla	r2, r0, r4, r2
 801af3a:	43de      	mvns	r6, r3
 801af3c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801af40:	1a84      	subs	r4, r0, r2
 801af42:	428e      	cmp	r6, r1
 801af44:	41ac      	sbcs	r4, r5
 801af46:	d332      	bcc.n	801afae <rmw_time_equal+0x9a>
 801af48:	eb11 0e03 	adds.w	lr, r1, r3
 801af4c:	eb42 0005 	adc.w	r0, r2, r5
 801af50:	9b08      	ldr	r3, [sp, #32]
 801af52:	4918      	ldr	r1, [pc, #96]	@ (801afb4 <rmw_time_equal+0xa0>)
 801af54:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801af56:	2202      	movs	r2, #2
 801af58:	4299      	cmp	r1, r3
 801af5a:	41aa      	sbcs	r2, r5
 801af5c:	d31e      	bcc.n	801af9c <rmw_time_equal+0x88>
 801af5e:	4c16      	ldr	r4, [pc, #88]	@ (801afb8 <rmw_time_equal+0xa4>)
 801af60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801af62:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801af64:	fba3 3104 	umull	r3, r1, r3, r4
 801af68:	fb04 1105 	mla	r1, r4, r5, r1
 801af6c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801af70:	43dd      	mvns	r5, r3
 801af72:	ebac 0401 	sub.w	r4, ip, r1
 801af76:	4295      	cmp	r5, r2
 801af78:	41b4      	sbcs	r4, r6
 801af7a:	d314      	bcc.n	801afa6 <rmw_time_equal+0x92>
 801af7c:	18d2      	adds	r2, r2, r3
 801af7e:	eb41 0306 	adc.w	r3, r1, r6
 801af82:	4283      	cmp	r3, r0
 801af84:	bf08      	it	eq
 801af86:	4572      	cmpeq	r2, lr
 801af88:	bf0c      	ite	eq
 801af8a:	2001      	moveq	r0, #1
 801af8c:	2000      	movne	r0, #0
 801af8e:	b004      	add	sp, #16
 801af90:	bd70      	pop	{r4, r5, r6, pc}
 801af92:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801af96:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801af9a:	e7d9      	b.n	801af50 <rmw_time_equal+0x3c>
 801af9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801afa0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801afa4:	e7ed      	b.n	801af82 <rmw_time_equal+0x6e>
 801afa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801afaa:	4663      	mov	r3, ip
 801afac:	e7e9      	b.n	801af82 <rmw_time_equal+0x6e>
 801afae:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801afb2:	e7cd      	b.n	801af50 <rmw_time_equal+0x3c>
 801afb4:	25c17d04 	.word	0x25c17d04
 801afb8:	3b9aca00 	.word	0x3b9aca00

0801afbc <rmw_time_total_nsec>:
 801afbc:	b430      	push	{r4, r5}
 801afbe:	b084      	sub	sp, #16
 801afc0:	ac04      	add	r4, sp, #16
 801afc2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801afc6:	4914      	ldr	r1, [pc, #80]	@ (801b018 <rmw_time_total_nsec+0x5c>)
 801afc8:	9c01      	ldr	r4, [sp, #4]
 801afca:	2202      	movs	r2, #2
 801afcc:	4281      	cmp	r1, r0
 801afce:	41a2      	sbcs	r2, r4
 801afd0:	d315      	bcc.n	801affe <rmw_time_total_nsec+0x42>
 801afd2:	4912      	ldr	r1, [pc, #72]	@ (801b01c <rmw_time_total_nsec+0x60>)
 801afd4:	4603      	mov	r3, r0
 801afd6:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 801afda:	fba3 3201 	umull	r3, r2, r3, r1
 801afde:	fb01 2204 	mla	r2, r1, r4, r2
 801afe2:	ea6f 0c03 	mvn.w	ip, r3
 801afe6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801afea:	1a8c      	subs	r4, r1, r2
 801afec:	4584      	cmp	ip, r0
 801afee:	41ac      	sbcs	r4, r5
 801aff0:	d30c      	bcc.n	801b00c <rmw_time_total_nsec+0x50>
 801aff2:	1818      	adds	r0, r3, r0
 801aff4:	eb42 0105 	adc.w	r1, r2, r5
 801aff8:	b004      	add	sp, #16
 801affa:	bc30      	pop	{r4, r5}
 801affc:	4770      	bx	lr
 801affe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b002:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b006:	b004      	add	sp, #16
 801b008:	bc30      	pop	{r4, r5}
 801b00a:	4770      	bx	lr
 801b00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b010:	b004      	add	sp, #16
 801b012:	bc30      	pop	{r4, r5}
 801b014:	4770      	bx	lr
 801b016:	bf00      	nop
 801b018:	25c17d04 	.word	0x25c17d04
 801b01c:	3b9aca00 	.word	0x3b9aca00

0801b020 <rmw_validate_full_topic_name>:
 801b020:	2800      	cmp	r0, #0
 801b022:	d049      	beq.n	801b0b8 <rmw_validate_full_topic_name+0x98>
 801b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b028:	460e      	mov	r6, r1
 801b02a:	2900      	cmp	r1, #0
 801b02c:	d056      	beq.n	801b0dc <rmw_validate_full_topic_name+0xbc>
 801b02e:	4615      	mov	r5, r2
 801b030:	4604      	mov	r4, r0
 801b032:	f7e5 f955 	bl	80002e0 <strlen>
 801b036:	b150      	cbz	r0, 801b04e <rmw_validate_full_topic_name+0x2e>
 801b038:	7823      	ldrb	r3, [r4, #0]
 801b03a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b03c:	d00c      	beq.n	801b058 <rmw_validate_full_topic_name+0x38>
 801b03e:	2302      	movs	r3, #2
 801b040:	6033      	str	r3, [r6, #0]
 801b042:	b10d      	cbz	r5, 801b048 <rmw_validate_full_topic_name+0x28>
 801b044:	2300      	movs	r3, #0
 801b046:	602b      	str	r3, [r5, #0]
 801b048:	2000      	movs	r0, #0
 801b04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b04e:	2301      	movs	r3, #1
 801b050:	6033      	str	r3, [r6, #0]
 801b052:	2d00      	cmp	r5, #0
 801b054:	d1f6      	bne.n	801b044 <rmw_validate_full_topic_name+0x24>
 801b056:	e7f7      	b.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b058:	1e47      	subs	r7, r0, #1
 801b05a:	5de3      	ldrb	r3, [r4, r7]
 801b05c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b05e:	d03f      	beq.n	801b0e0 <rmw_validate_full_topic_name+0xc0>
 801b060:	1e63      	subs	r3, r4, #1
 801b062:	4621      	mov	r1, r4
 801b064:	eb03 0e00 	add.w	lr, r3, r0
 801b068:	469c      	mov	ip, r3
 801b06a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801b06e:	2a5f      	cmp	r2, #95	@ 0x5f
 801b070:	d006      	beq.n	801b080 <rmw_validate_full_topic_name+0x60>
 801b072:	d823      	bhi.n	801b0bc <rmw_validate_full_topic_name+0x9c>
 801b074:	2a39      	cmp	r2, #57	@ 0x39
 801b076:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801b07a:	d82b      	bhi.n	801b0d4 <rmw_validate_full_topic_name+0xb4>
 801b07c:	2a2e      	cmp	r2, #46	@ 0x2e
 801b07e:	d920      	bls.n	801b0c2 <rmw_validate_full_topic_name+0xa2>
 801b080:	4573      	cmp	r3, lr
 801b082:	d1f1      	bne.n	801b068 <rmw_validate_full_topic_name+0x48>
 801b084:	4c21      	ldr	r4, [pc, #132]	@ (801b10c <rmw_validate_full_topic_name+0xec>)
 801b086:	2300      	movs	r3, #0
 801b088:	e003      	b.n	801b092 <rmw_validate_full_topic_name+0x72>
 801b08a:	4298      	cmp	r0, r3
 801b08c:	f101 0101 	add.w	r1, r1, #1
 801b090:	d02c      	beq.n	801b0ec <rmw_validate_full_topic_name+0xcc>
 801b092:	429f      	cmp	r7, r3
 801b094:	f103 0301 	add.w	r3, r3, #1
 801b098:	d0f7      	beq.n	801b08a <rmw_validate_full_topic_name+0x6a>
 801b09a:	780a      	ldrb	r2, [r1, #0]
 801b09c:	2a2f      	cmp	r2, #47	@ 0x2f
 801b09e:	d1f4      	bne.n	801b08a <rmw_validate_full_topic_name+0x6a>
 801b0a0:	784a      	ldrb	r2, [r1, #1]
 801b0a2:	2a2f      	cmp	r2, #47	@ 0x2f
 801b0a4:	d02d      	beq.n	801b102 <rmw_validate_full_topic_name+0xe2>
 801b0a6:	5ca2      	ldrb	r2, [r4, r2]
 801b0a8:	0752      	lsls	r2, r2, #29
 801b0aa:	d5ee      	bpl.n	801b08a <rmw_validate_full_topic_name+0x6a>
 801b0ac:	2206      	movs	r2, #6
 801b0ae:	6032      	str	r2, [r6, #0]
 801b0b0:	2d00      	cmp	r5, #0
 801b0b2:	d0c9      	beq.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0b4:	602b      	str	r3, [r5, #0]
 801b0b6:	e7c7      	b.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0b8:	200b      	movs	r0, #11
 801b0ba:	4770      	bx	lr
 801b0bc:	3a61      	subs	r2, #97	@ 0x61
 801b0be:	2a19      	cmp	r2, #25
 801b0c0:	d9de      	bls.n	801b080 <rmw_validate_full_topic_name+0x60>
 801b0c2:	2304      	movs	r3, #4
 801b0c4:	6033      	str	r3, [r6, #0]
 801b0c6:	2d00      	cmp	r5, #0
 801b0c8:	d0be      	beq.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0ca:	f1c4 0401 	rsb	r4, r4, #1
 801b0ce:	4464      	add	r4, ip
 801b0d0:	602c      	str	r4, [r5, #0]
 801b0d2:	e7b9      	b.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0d4:	f1b8 0f19 	cmp.w	r8, #25
 801b0d8:	d9d2      	bls.n	801b080 <rmw_validate_full_topic_name+0x60>
 801b0da:	e7f2      	b.n	801b0c2 <rmw_validate_full_topic_name+0xa2>
 801b0dc:	200b      	movs	r0, #11
 801b0de:	e7b4      	b.n	801b04a <rmw_validate_full_topic_name+0x2a>
 801b0e0:	2303      	movs	r3, #3
 801b0e2:	6033      	str	r3, [r6, #0]
 801b0e4:	2d00      	cmp	r5, #0
 801b0e6:	d0af      	beq.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0e8:	602f      	str	r7, [r5, #0]
 801b0ea:	e7ad      	b.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0ec:	28f7      	cmp	r0, #247	@ 0xf7
 801b0ee:	d802      	bhi.n	801b0f6 <rmw_validate_full_topic_name+0xd6>
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	6033      	str	r3, [r6, #0]
 801b0f4:	e7a8      	b.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0f6:	2307      	movs	r3, #7
 801b0f8:	6033      	str	r3, [r6, #0]
 801b0fa:	2d00      	cmp	r5, #0
 801b0fc:	d0a4      	beq.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b0fe:	23f6      	movs	r3, #246	@ 0xf6
 801b100:	e7d8      	b.n	801b0b4 <rmw_validate_full_topic_name+0x94>
 801b102:	2205      	movs	r2, #5
 801b104:	6032      	str	r2, [r6, #0]
 801b106:	2d00      	cmp	r5, #0
 801b108:	d1d4      	bne.n	801b0b4 <rmw_validate_full_topic_name+0x94>
 801b10a:	e79d      	b.n	801b048 <rmw_validate_full_topic_name+0x28>
 801b10c:	08021672 	.word	0x08021672

0801b110 <on_status>:
 801b110:	b082      	sub	sp, #8
 801b112:	b002      	add	sp, #8
 801b114:	4770      	bx	lr
 801b116:	bf00      	nop

0801b118 <on_topic>:
 801b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b11c:	4a22      	ldr	r2, [pc, #136]	@ (801b1a8 <on_topic+0x90>)
 801b11e:	b094      	sub	sp, #80	@ 0x50
 801b120:	6812      	ldr	r2, [r2, #0]
 801b122:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b124:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b128:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b12c:	b3c2      	cbz	r2, 801b1a0 <on_topic+0x88>
 801b12e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b132:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b136:	e001      	b.n	801b13c <on_topic+0x24>
 801b138:	6852      	ldr	r2, [r2, #4]
 801b13a:	b38a      	cbz	r2, 801b1a0 <on_topic+0x88>
 801b13c:	6894      	ldr	r4, [r2, #8]
 801b13e:	8aa3      	ldrh	r3, [r4, #20]
 801b140:	428b      	cmp	r3, r1
 801b142:	d1f9      	bne.n	801b138 <on_topic+0x20>
 801b144:	7da3      	ldrb	r3, [r4, #22]
 801b146:	4283      	cmp	r3, r0
 801b148:	d1f6      	bne.n	801b138 <on_topic+0x20>
 801b14a:	2248      	movs	r2, #72	@ 0x48
 801b14c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b150:	4668      	mov	r0, sp
 801b152:	f002 fef6 	bl	801df42 <memcpy>
 801b156:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b15a:	cb0c      	ldmia	r3, {r2, r3}
 801b15c:	4620      	mov	r0, r4
 801b15e:	f7f7 f807 	bl	8012170 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b162:	4607      	mov	r7, r0
 801b164:	b1e0      	cbz	r0, 801b1a0 <on_topic+0x88>
 801b166:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b16a:	4632      	mov	r2, r6
 801b16c:	4628      	mov	r0, r5
 801b16e:	f108 0110 	add.w	r1, r8, #16
 801b172:	f7f7 ffb9 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801b176:	b930      	cbnz	r0, 801b186 <on_topic+0x6e>
 801b178:	480c      	ldr	r0, [pc, #48]	@ (801b1ac <on_topic+0x94>)
 801b17a:	4639      	mov	r1, r7
 801b17c:	b014      	add	sp, #80	@ 0x50
 801b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b182:	f000 b8bd 	b.w	801b300 <put_memory>
 801b186:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b18a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b18e:	f7f6 fded 	bl	8011d6c <rmw_uros_epoch_nanos>
 801b192:	2305      	movs	r3, #5
 801b194:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b198:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b19c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b1a0:	b014      	add	sp, #80	@ 0x50
 801b1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1a6:	bf00      	nop
 801b1a8:	20017fe8 	.word	0x20017fe8
 801b1ac:	20017838 	.word	0x20017838

0801b1b0 <on_request>:
 801b1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1b4:	4823      	ldr	r0, [pc, #140]	@ (801b244 <on_request+0x94>)
 801b1b6:	b094      	sub	sp, #80	@ 0x50
 801b1b8:	6800      	ldr	r0, [r0, #0]
 801b1ba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b1bc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b1c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b1c2:	2800      	cmp	r0, #0
 801b1c4:	d03b      	beq.n	801b23e <on_request+0x8e>
 801b1c6:	461d      	mov	r5, r3
 801b1c8:	e001      	b.n	801b1ce <on_request+0x1e>
 801b1ca:	6840      	ldr	r0, [r0, #4]
 801b1cc:	b3b8      	cbz	r0, 801b23e <on_request+0x8e>
 801b1ce:	6884      	ldr	r4, [r0, #8]
 801b1d0:	8b21      	ldrh	r1, [r4, #24]
 801b1d2:	4291      	cmp	r1, r2
 801b1d4:	d1f9      	bne.n	801b1ca <on_request+0x1a>
 801b1d6:	2248      	movs	r2, #72	@ 0x48
 801b1d8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b1dc:	4668      	mov	r0, sp
 801b1de:	f002 feb0 	bl	801df42 <memcpy>
 801b1e2:	f104 0320 	add.w	r3, r4, #32
 801b1e6:	cb0c      	ldmia	r3, {r2, r3}
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	f7f6 ffc1 	bl	8012170 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b1ee:	4680      	mov	r8, r0
 801b1f0:	b328      	cbz	r0, 801b23e <on_request+0x8e>
 801b1f2:	4638      	mov	r0, r7
 801b1f4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b1f8:	4632      	mov	r2, r6
 801b1fa:	f107 0110 	add.w	r1, r7, #16
 801b1fe:	f7f7 ff73 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801b202:	b930      	cbnz	r0, 801b212 <on_request+0x62>
 801b204:	4810      	ldr	r0, [pc, #64]	@ (801b248 <on_request+0x98>)
 801b206:	4641      	mov	r1, r8
 801b208:	b014      	add	sp, #80	@ 0x50
 801b20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b20e:	f000 b877 	b.w	801b300 <put_memory>
 801b212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b214:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b218:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b21c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b220:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b224:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b228:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b22c:	f7f6 fd9e 	bl	8011d6c <rmw_uros_epoch_nanos>
 801b230:	2303      	movs	r3, #3
 801b232:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b236:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b23a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b23e:	b014      	add	sp, #80	@ 0x50
 801b240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b244:	20017ba0 	.word	0x20017ba0
 801b248:	20017838 	.word	0x20017838

0801b24c <on_reply>:
 801b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b250:	4821      	ldr	r0, [pc, #132]	@ (801b2d8 <on_reply+0x8c>)
 801b252:	b094      	sub	sp, #80	@ 0x50
 801b254:	6800      	ldr	r0, [r0, #0]
 801b256:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b258:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b25c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b25e:	b3b8      	cbz	r0, 801b2d0 <on_reply+0x84>
 801b260:	461d      	mov	r5, r3
 801b262:	e001      	b.n	801b268 <on_reply+0x1c>
 801b264:	6840      	ldr	r0, [r0, #4]
 801b266:	b398      	cbz	r0, 801b2d0 <on_reply+0x84>
 801b268:	6884      	ldr	r4, [r0, #8]
 801b26a:	8b21      	ldrh	r1, [r4, #24]
 801b26c:	4291      	cmp	r1, r2
 801b26e:	d1f9      	bne.n	801b264 <on_reply+0x18>
 801b270:	2248      	movs	r2, #72	@ 0x48
 801b272:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b276:	4668      	mov	r0, sp
 801b278:	f002 fe63 	bl	801df42 <memcpy>
 801b27c:	f104 0320 	add.w	r3, r4, #32
 801b280:	cb0c      	ldmia	r3, {r2, r3}
 801b282:	4620      	mov	r0, r4
 801b284:	f7f6 ff74 	bl	8012170 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b288:	4680      	mov	r8, r0
 801b28a:	b308      	cbz	r0, 801b2d0 <on_reply+0x84>
 801b28c:	4638      	mov	r0, r7
 801b28e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b292:	4632      	mov	r2, r6
 801b294:	f107 0110 	add.w	r1, r7, #16
 801b298:	f7f7 ff26 	bl	80130e8 <ucdr_deserialize_array_uint8_t>
 801b29c:	b930      	cbnz	r0, 801b2ac <on_reply+0x60>
 801b29e:	480f      	ldr	r0, [pc, #60]	@ (801b2dc <on_reply+0x90>)
 801b2a0:	4641      	mov	r1, r8
 801b2a2:	b014      	add	sp, #80	@ 0x50
 801b2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2a8:	f000 b82a 	b.w	801b300 <put_memory>
 801b2ac:	2200      	movs	r2, #0
 801b2ae:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b2b2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b2b6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b2ba:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b2be:	f7f6 fd55 	bl	8011d6c <rmw_uros_epoch_nanos>
 801b2c2:	2304      	movs	r3, #4
 801b2c4:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b2c8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b2cc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b2d0:	b014      	add	sp, #80	@ 0x50
 801b2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2d6:	bf00      	nop
 801b2d8:	20017ac8 	.word	0x20017ac8
 801b2dc:	20017838 	.word	0x20017838

0801b2e0 <get_memory>:
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	6840      	ldr	r0, [r0, #4]
 801b2e4:	b158      	cbz	r0, 801b2fe <get_memory+0x1e>
 801b2e6:	6842      	ldr	r2, [r0, #4]
 801b2e8:	605a      	str	r2, [r3, #4]
 801b2ea:	b10a      	cbz	r2, 801b2f0 <get_memory+0x10>
 801b2ec:	2100      	movs	r1, #0
 801b2ee:	6011      	str	r1, [r2, #0]
 801b2f0:	681a      	ldr	r2, [r3, #0]
 801b2f2:	6042      	str	r2, [r0, #4]
 801b2f4:	b102      	cbz	r2, 801b2f8 <get_memory+0x18>
 801b2f6:	6010      	str	r0, [r2, #0]
 801b2f8:	2200      	movs	r2, #0
 801b2fa:	6002      	str	r2, [r0, #0]
 801b2fc:	6018      	str	r0, [r3, #0]
 801b2fe:	4770      	bx	lr

0801b300 <put_memory>:
 801b300:	680b      	ldr	r3, [r1, #0]
 801b302:	b10b      	cbz	r3, 801b308 <put_memory+0x8>
 801b304:	684a      	ldr	r2, [r1, #4]
 801b306:	605a      	str	r2, [r3, #4]
 801b308:	684a      	ldr	r2, [r1, #4]
 801b30a:	b102      	cbz	r2, 801b30e <put_memory+0xe>
 801b30c:	6013      	str	r3, [r2, #0]
 801b30e:	6803      	ldr	r3, [r0, #0]
 801b310:	428b      	cmp	r3, r1
 801b312:	6843      	ldr	r3, [r0, #4]
 801b314:	bf08      	it	eq
 801b316:	6002      	streq	r2, [r0, #0]
 801b318:	604b      	str	r3, [r1, #4]
 801b31a:	b103      	cbz	r3, 801b31e <put_memory+0x1e>
 801b31c:	6019      	str	r1, [r3, #0]
 801b31e:	2300      	movs	r3, #0
 801b320:	600b      	str	r3, [r1, #0]
 801b322:	6041      	str	r1, [r0, #4]
 801b324:	4770      	bx	lr
 801b326:	bf00      	nop

0801b328 <rmw_destroy_client>:
 801b328:	b570      	push	{r4, r5, r6, lr}
 801b32a:	b128      	cbz	r0, 801b338 <rmw_destroy_client+0x10>
 801b32c:	4604      	mov	r4, r0
 801b32e:	6800      	ldr	r0, [r0, #0]
 801b330:	460d      	mov	r5, r1
 801b332:	f7f7 f8a1 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 801b336:	b910      	cbnz	r0, 801b33e <rmw_destroy_client+0x16>
 801b338:	2401      	movs	r4, #1
 801b33a:	4620      	mov	r0, r4
 801b33c:	bd70      	pop	{r4, r5, r6, pc}
 801b33e:	6863      	ldr	r3, [r4, #4]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d0f9      	beq.n	801b338 <rmw_destroy_client+0x10>
 801b344:	2d00      	cmp	r5, #0
 801b346:	d0f7      	beq.n	801b338 <rmw_destroy_client+0x10>
 801b348:	6828      	ldr	r0, [r5, #0]
 801b34a:	f7f7 f895 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 801b34e:	2800      	cmp	r0, #0
 801b350:	d0f2      	beq.n	801b338 <rmw_destroy_client+0x10>
 801b352:	686e      	ldr	r6, [r5, #4]
 801b354:	2e00      	cmp	r6, #0
 801b356:	d0ef      	beq.n	801b338 <rmw_destroy_client+0x10>
 801b358:	6864      	ldr	r4, [r4, #4]
 801b35a:	6932      	ldr	r2, [r6, #16]
 801b35c:	6920      	ldr	r0, [r4, #16]
 801b35e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b362:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b366:	6819      	ldr	r1, [r3, #0]
 801b368:	f7f9 fe10 	bl	8014f8c <uxr_buffer_cancel_data>
 801b36c:	4602      	mov	r2, r0
 801b36e:	6920      	ldr	r0, [r4, #16]
 801b370:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b374:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b378:	f7f6 fff8 	bl	801236c <run_xrce_session>
 801b37c:	6920      	ldr	r0, [r4, #16]
 801b37e:	6932      	ldr	r2, [r6, #16]
 801b380:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b388:	6819      	ldr	r1, [r3, #0]
 801b38a:	f7f9 faff 	bl	801498c <uxr_buffer_delete_entity>
 801b38e:	4602      	mov	r2, r0
 801b390:	6920      	ldr	r0, [r4, #16]
 801b392:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b396:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b39a:	f7f6 ffe7 	bl	801236c <run_xrce_session>
 801b39e:	f080 0401 	eor.w	r4, r0, #1
 801b3a2:	b2e4      	uxtb	r4, r4
 801b3a4:	4628      	mov	r0, r5
 801b3a6:	0064      	lsls	r4, r4, #1
 801b3a8:	f7f6 fec0 	bl	801212c <rmw_uxrce_fini_client_memory>
 801b3ac:	e7c5      	b.n	801b33a <rmw_destroy_client+0x12>
 801b3ae:	bf00      	nop

0801b3b0 <rmw_get_gid_for_client>:
 801b3b0:	b1a8      	cbz	r0, 801b3de <rmw_get_gid_for_client+0x2e>
 801b3b2:	b538      	push	{r3, r4, r5, lr}
 801b3b4:	460c      	mov	r4, r1
 801b3b6:	b1a1      	cbz	r1, 801b3e2 <rmw_get_gid_for_client+0x32>
 801b3b8:	4605      	mov	r5, r0
 801b3ba:	6800      	ldr	r0, [r0, #0]
 801b3bc:	b120      	cbz	r0, 801b3c8 <rmw_get_gid_for_client+0x18>
 801b3be:	4b0a      	ldr	r3, [pc, #40]	@ (801b3e8 <rmw_get_gid_for_client+0x38>)
 801b3c0:	6819      	ldr	r1, [r3, #0]
 801b3c2:	f7e4 ff2d 	bl	8000220 <strcmp>
 801b3c6:	b940      	cbnz	r0, 801b3da <rmw_get_gid_for_client+0x2a>
 801b3c8:	686b      	ldr	r3, [r5, #4]
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	6060      	str	r0, [r4, #4]
 801b3ce:	60a0      	str	r0, [r4, #8]
 801b3d0:	60e0      	str	r0, [r4, #12]
 801b3d2:	6120      	str	r0, [r4, #16]
 801b3d4:	691b      	ldr	r3, [r3, #16]
 801b3d6:	6063      	str	r3, [r4, #4]
 801b3d8:	bd38      	pop	{r3, r4, r5, pc}
 801b3da:	200c      	movs	r0, #12
 801b3dc:	bd38      	pop	{r3, r4, r5, pc}
 801b3de:	200b      	movs	r0, #11
 801b3e0:	4770      	bx	lr
 801b3e2:	200b      	movs	r0, #11
 801b3e4:	bd38      	pop	{r3, r4, r5, pc}
 801b3e6:	bf00      	nop
 801b3e8:	0802124c 	.word	0x0802124c

0801b3ec <rmw_get_implementation_identifier>:
 801b3ec:	4b01      	ldr	r3, [pc, #4]	@ (801b3f4 <rmw_get_implementation_identifier+0x8>)
 801b3ee:	6818      	ldr	r0, [r3, #0]
 801b3f0:	4770      	bx	lr
 801b3f2:	bf00      	nop
 801b3f4:	0802124c 	.word	0x0802124c

0801b3f8 <rmw_create_guard_condition>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	4605      	mov	r5, r0
 801b3fc:	4807      	ldr	r0, [pc, #28]	@ (801b41c <rmw_create_guard_condition+0x24>)
 801b3fe:	f7ff ff6f 	bl	801b2e0 <get_memory>
 801b402:	b148      	cbz	r0, 801b418 <rmw_create_guard_condition+0x20>
 801b404:	6884      	ldr	r4, [r0, #8]
 801b406:	2300      	movs	r3, #0
 801b408:	7423      	strb	r3, [r4, #16]
 801b40a:	61e5      	str	r5, [r4, #28]
 801b40c:	f7ff ffee 	bl	801b3ec <rmw_get_implementation_identifier>
 801b410:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b414:	f104 0014 	add.w	r0, r4, #20
 801b418:	bd38      	pop	{r3, r4, r5, pc}
 801b41a:	bf00      	nop
 801b41c:	20015610 	.word	0x20015610

0801b420 <rmw_destroy_guard_condition>:
 801b420:	b508      	push	{r3, lr}
 801b422:	4b08      	ldr	r3, [pc, #32]	@ (801b444 <rmw_destroy_guard_condition+0x24>)
 801b424:	6819      	ldr	r1, [r3, #0]
 801b426:	b911      	cbnz	r1, 801b42e <rmw_destroy_guard_condition+0xe>
 801b428:	e00a      	b.n	801b440 <rmw_destroy_guard_condition+0x20>
 801b42a:	6849      	ldr	r1, [r1, #4]
 801b42c:	b141      	cbz	r1, 801b440 <rmw_destroy_guard_condition+0x20>
 801b42e:	688b      	ldr	r3, [r1, #8]
 801b430:	3314      	adds	r3, #20
 801b432:	4298      	cmp	r0, r3
 801b434:	d1f9      	bne.n	801b42a <rmw_destroy_guard_condition+0xa>
 801b436:	4803      	ldr	r0, [pc, #12]	@ (801b444 <rmw_destroy_guard_condition+0x24>)
 801b438:	f7ff ff62 	bl	801b300 <put_memory>
 801b43c:	2000      	movs	r0, #0
 801b43e:	bd08      	pop	{r3, pc}
 801b440:	2001      	movs	r0, #1
 801b442:	bd08      	pop	{r3, pc}
 801b444:	20015610 	.word	0x20015610

0801b448 <create_topic>:
 801b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b44c:	4604      	mov	r4, r0
 801b44e:	b084      	sub	sp, #16
 801b450:	4824      	ldr	r0, [pc, #144]	@ (801b4e4 <create_topic+0x9c>)
 801b452:	460f      	mov	r7, r1
 801b454:	4616      	mov	r6, r2
 801b456:	f7ff ff43 	bl	801b2e0 <get_memory>
 801b45a:	2800      	cmp	r0, #0
 801b45c:	d03c      	beq.n	801b4d8 <create_topic+0x90>
 801b45e:	6923      	ldr	r3, [r4, #16]
 801b460:	6885      	ldr	r5, [r0, #8]
 801b462:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801b4ec <create_topic+0xa4>
 801b466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b46a:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801b46e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801b472:	1c42      	adds	r2, r0, #1
 801b474:	2102      	movs	r1, #2
 801b476:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801b47a:	f7f9 fd21 	bl	8014ec0 <uxr_object_id>
 801b47e:	223c      	movs	r2, #60	@ 0x3c
 801b480:	6128      	str	r0, [r5, #16]
 801b482:	4641      	mov	r1, r8
 801b484:	4638      	mov	r0, r7
 801b486:	f7f6 ffdd 	bl	8012444 <generate_topic_name>
 801b48a:	b310      	cbz	r0, 801b4d2 <create_topic+0x8a>
 801b48c:	4f16      	ldr	r7, [pc, #88]	@ (801b4e8 <create_topic+0xa0>)
 801b48e:	4630      	mov	r0, r6
 801b490:	2264      	movs	r2, #100	@ 0x64
 801b492:	4639      	mov	r1, r7
 801b494:	f7f6 ffa6 	bl	80123e4 <generate_type_name>
 801b498:	b1d8      	cbz	r0, 801b4d2 <create_topic+0x8a>
 801b49a:	6920      	ldr	r0, [r4, #16]
 801b49c:	2306      	movs	r3, #6
 801b49e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801b4a2:	f8cd 8000 	str.w	r8, [sp]
 801b4a6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801b4aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b4ae:	6811      	ldr	r1, [r2, #0]
 801b4b0:	6963      	ldr	r3, [r4, #20]
 801b4b2:	692a      	ldr	r2, [r5, #16]
 801b4b4:	f7f9 fae6 	bl	8014a84 <uxr_buffer_create_topic_bin>
 801b4b8:	4602      	mov	r2, r0
 801b4ba:	6920      	ldr	r0, [r4, #16]
 801b4bc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801b4c0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801b4c4:	f7f6 ff52 	bl	801236c <run_xrce_session>
 801b4c8:	b118      	cbz	r0, 801b4d2 <create_topic+0x8a>
 801b4ca:	4628      	mov	r0, r5
 801b4cc:	b004      	add	sp, #16
 801b4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	f7f6 fe40 	bl	8012158 <rmw_uxrce_fini_topic_memory>
 801b4d8:	2500      	movs	r5, #0
 801b4da:	4628      	mov	r0, r5
 801b4dc:	b004      	add	sp, #16
 801b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4e2:	bf00      	nop
 801b4e4:	200179ec 	.word	0x200179ec
 801b4e8:	20019fb8 	.word	0x20019fb8
 801b4ec:	2001a01c 	.word	0x2001a01c

0801b4f0 <destroy_topic>:
 801b4f0:	b538      	push	{r3, r4, r5, lr}
 801b4f2:	6984      	ldr	r4, [r0, #24]
 801b4f4:	b1d4      	cbz	r4, 801b52c <destroy_topic+0x3c>
 801b4f6:	4605      	mov	r5, r0
 801b4f8:	6920      	ldr	r0, [r4, #16]
 801b4fa:	692a      	ldr	r2, [r5, #16]
 801b4fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b500:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b504:	6819      	ldr	r1, [r3, #0]
 801b506:	f7f9 fa41 	bl	801498c <uxr_buffer_delete_entity>
 801b50a:	4602      	mov	r2, r0
 801b50c:	6920      	ldr	r0, [r4, #16]
 801b50e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b512:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b516:	f7f6 ff29 	bl	801236c <run_xrce_session>
 801b51a:	f080 0401 	eor.w	r4, r0, #1
 801b51e:	b2e4      	uxtb	r4, r4
 801b520:	4628      	mov	r0, r5
 801b522:	0064      	lsls	r4, r4, #1
 801b524:	f7f6 fe18 	bl	8012158 <rmw_uxrce_fini_topic_memory>
 801b528:	4620      	mov	r0, r4
 801b52a:	bd38      	pop	{r3, r4, r5, pc}
 801b52c:	2401      	movs	r4, #1
 801b52e:	4620      	mov	r0, r4
 801b530:	bd38      	pop	{r3, r4, r5, pc}
 801b532:	bf00      	nop

0801b534 <rmw_send_request>:
 801b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b538:	4604      	mov	r4, r0
 801b53a:	6800      	ldr	r0, [r0, #0]
 801b53c:	b08a      	sub	sp, #40	@ 0x28
 801b53e:	460e      	mov	r6, r1
 801b540:	4615      	mov	r5, r2
 801b542:	b128      	cbz	r0, 801b550 <rmw_send_request+0x1c>
 801b544:	4b1e      	ldr	r3, [pc, #120]	@ (801b5c0 <rmw_send_request+0x8c>)
 801b546:	6819      	ldr	r1, [r3, #0]
 801b548:	f7e4 fe6a 	bl	8000220 <strcmp>
 801b54c:	2800      	cmp	r0, #0
 801b54e:	d133      	bne.n	801b5b8 <rmw_send_request+0x84>
 801b550:	6864      	ldr	r4, [r4, #4]
 801b552:	6963      	ldr	r3, [r4, #20]
 801b554:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801b556:	689b      	ldr	r3, [r3, #8]
 801b558:	4798      	blx	r3
 801b55a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b55e:	4630      	mov	r0, r6
 801b560:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b564:	4798      	blx	r3
 801b566:	693b      	ldr	r3, [r7, #16]
 801b568:	9000      	str	r0, [sp, #0]
 801b56a:	6922      	ldr	r2, [r4, #16]
 801b56c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801b56e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801b572:	ab02      	add	r3, sp, #8
 801b574:	f7fb fd36 	bl	8016fe4 <uxr_prepare_output_stream>
 801b578:	2300      	movs	r3, #0
 801b57a:	6028      	str	r0, [r5, #0]
 801b57c:	606b      	str	r3, [r5, #4]
 801b57e:	b190      	cbz	r0, 801b5a6 <rmw_send_request+0x72>
 801b580:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b584:	a902      	add	r1, sp, #8
 801b586:	4630      	mov	r0, r6
 801b588:	4798      	blx	r3
 801b58a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801b58e:	6938      	ldr	r0, [r7, #16]
 801b590:	2b01      	cmp	r3, #1
 801b592:	d00c      	beq.n	801b5ae <rmw_send_request+0x7a>
 801b594:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801b596:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b59a:	f7fa fa8d 	bl	8015ab8 <uxr_run_session_until_confirm_delivery>
 801b59e:	2000      	movs	r0, #0
 801b5a0:	b00a      	add	sp, #40	@ 0x28
 801b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5a6:	2001      	movs	r0, #1
 801b5a8:	b00a      	add	sp, #40	@ 0x28
 801b5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b5b2:	f7f9 fee9 	bl	8015388 <uxr_flash_output_streams>
 801b5b6:	e7f2      	b.n	801b59e <rmw_send_request+0x6a>
 801b5b8:	200c      	movs	r0, #12
 801b5ba:	b00a      	add	sp, #40	@ 0x28
 801b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5c0:	0802124c 	.word	0x0802124c

0801b5c4 <rmw_take_request>:
 801b5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5c8:	4605      	mov	r5, r0
 801b5ca:	6800      	ldr	r0, [r0, #0]
 801b5cc:	b089      	sub	sp, #36	@ 0x24
 801b5ce:	460c      	mov	r4, r1
 801b5d0:	4690      	mov	r8, r2
 801b5d2:	461e      	mov	r6, r3
 801b5d4:	b128      	cbz	r0, 801b5e2 <rmw_take_request+0x1e>
 801b5d6:	4b28      	ldr	r3, [pc, #160]	@ (801b678 <rmw_take_request+0xb4>)
 801b5d8:	6819      	ldr	r1, [r3, #0]
 801b5da:	f7e4 fe21 	bl	8000220 <strcmp>
 801b5de:	2800      	cmp	r0, #0
 801b5e0:	d146      	bne.n	801b670 <rmw_take_request+0xac>
 801b5e2:	b10e      	cbz	r6, 801b5e8 <rmw_take_request+0x24>
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	7033      	strb	r3, [r6, #0]
 801b5e8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801b5ec:	f7f6 fe40 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 801b5f0:	4648      	mov	r0, r9
 801b5f2:	f7f6 fe15 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b5f6:	4607      	mov	r7, r0
 801b5f8:	b3b0      	cbz	r0, 801b668 <rmw_take_request+0xa4>
 801b5fa:	6885      	ldr	r5, [r0, #8]
 801b5fc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801b600:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801b604:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801b608:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801b60c:	7423      	strb	r3, [r4, #16]
 801b60e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801b612:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801b616:	74e2      	strb	r2, [r4, #19]
 801b618:	f8a4 3011 	strh.w	r3, [r4, #17]
 801b61c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801b620:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801b624:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801b628:	61e1      	str	r1, [r4, #28]
 801b62a:	6162      	str	r2, [r4, #20]
 801b62c:	61a3      	str	r3, [r4, #24]
 801b62e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801b632:	689b      	ldr	r3, [r3, #8]
 801b634:	4798      	blx	r3
 801b636:	6844      	ldr	r4, [r0, #4]
 801b638:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801b63c:	f105 0110 	add.w	r1, r5, #16
 801b640:	4668      	mov	r0, sp
 801b642:	f7f2 ff67 	bl	800e514 <ucdr_init_buffer>
 801b646:	68e3      	ldr	r3, [r4, #12]
 801b648:	4641      	mov	r1, r8
 801b64a:	4668      	mov	r0, sp
 801b64c:	4798      	blx	r3
 801b64e:	4639      	mov	r1, r7
 801b650:	4604      	mov	r4, r0
 801b652:	480a      	ldr	r0, [pc, #40]	@ (801b67c <rmw_take_request+0xb8>)
 801b654:	f7ff fe54 	bl	801b300 <put_memory>
 801b658:	b106      	cbz	r6, 801b65c <rmw_take_request+0x98>
 801b65a:	7034      	strb	r4, [r6, #0]
 801b65c:	f084 0001 	eor.w	r0, r4, #1
 801b660:	b2c0      	uxtb	r0, r0
 801b662:	b009      	add	sp, #36	@ 0x24
 801b664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b668:	2001      	movs	r0, #1
 801b66a:	b009      	add	sp, #36	@ 0x24
 801b66c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b670:	200c      	movs	r0, #12
 801b672:	b009      	add	sp, #36	@ 0x24
 801b674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b678:	0802124c 	.word	0x0802124c
 801b67c:	20017838 	.word	0x20017838

0801b680 <rmw_send_response>:
 801b680:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b682:	4605      	mov	r5, r0
 801b684:	6800      	ldr	r0, [r0, #0]
 801b686:	b091      	sub	sp, #68	@ 0x44
 801b688:	460c      	mov	r4, r1
 801b68a:	4616      	mov	r6, r2
 801b68c:	b128      	cbz	r0, 801b69a <rmw_send_response+0x1a>
 801b68e:	4b28      	ldr	r3, [pc, #160]	@ (801b730 <rmw_send_response+0xb0>)
 801b690:	6819      	ldr	r1, [r3, #0]
 801b692:	f7e4 fdc5 	bl	8000220 <strcmp>
 801b696:	2800      	cmp	r0, #0
 801b698:	d141      	bne.n	801b71e <rmw_send_response+0x9e>
 801b69a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801b69e:	9306      	str	r3, [sp, #24]
 801b6a0:	4623      	mov	r3, r4
 801b6a2:	9207      	str	r2, [sp, #28]
 801b6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6a8:	686d      	ldr	r5, [r5, #4]
 801b6aa:	789b      	ldrb	r3, [r3, #2]
 801b6ac:	68a1      	ldr	r1, [r4, #8]
 801b6ae:	f88d 2017 	strb.w	r2, [sp, #23]
 801b6b2:	f88d 3016 	strb.w	r3, [sp, #22]
 801b6b6:	68e2      	ldr	r2, [r4, #12]
 801b6b8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801b6bc:	6860      	ldr	r0, [r4, #4]
 801b6be:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b6c2:	ab02      	add	r3, sp, #8
 801b6c4:	c307      	stmia	r3!, {r0, r1, r2}
 801b6c6:	696b      	ldr	r3, [r5, #20]
 801b6c8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801b6ca:	68db      	ldr	r3, [r3, #12]
 801b6cc:	4798      	blx	r3
 801b6ce:	6844      	ldr	r4, [r0, #4]
 801b6d0:	4630      	mov	r0, r6
 801b6d2:	6923      	ldr	r3, [r4, #16]
 801b6d4:	4798      	blx	r3
 801b6d6:	f100 0318 	add.w	r3, r0, #24
 801b6da:	6938      	ldr	r0, [r7, #16]
 801b6dc:	9300      	str	r3, [sp, #0]
 801b6de:	692a      	ldr	r2, [r5, #16]
 801b6e0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801b6e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b6e6:	ab08      	add	r3, sp, #32
 801b6e8:	f7fb fc7c 	bl	8016fe4 <uxr_prepare_output_stream>
 801b6ec:	b910      	cbnz	r0, 801b6f4 <rmw_send_response+0x74>
 801b6ee:	2001      	movs	r0, #1
 801b6f0:	b011      	add	sp, #68	@ 0x44
 801b6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6f4:	a902      	add	r1, sp, #8
 801b6f6:	a808      	add	r0, sp, #32
 801b6f8:	f7fc fd92 	bl	8018220 <uxr_serialize_SampleIdentity>
 801b6fc:	68a3      	ldr	r3, [r4, #8]
 801b6fe:	a908      	add	r1, sp, #32
 801b700:	4630      	mov	r0, r6
 801b702:	4798      	blx	r3
 801b704:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801b708:	6938      	ldr	r0, [r7, #16]
 801b70a:	2b01      	cmp	r3, #1
 801b70c:	d00a      	beq.n	801b724 <rmw_send_response+0xa4>
 801b70e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801b710:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b714:	f7fa f9d0 	bl	8015ab8 <uxr_run_session_until_confirm_delivery>
 801b718:	2000      	movs	r0, #0
 801b71a:	b011      	add	sp, #68	@ 0x44
 801b71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b71e:	200c      	movs	r0, #12
 801b720:	b011      	add	sp, #68	@ 0x44
 801b722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b724:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b728:	f7f9 fe2e 	bl	8015388 <uxr_flash_output_streams>
 801b72c:	e7f4      	b.n	801b718 <rmw_send_response+0x98>
 801b72e:	bf00      	nop
 801b730:	0802124c 	.word	0x0802124c

0801b734 <rmw_take_response>:
 801b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b738:	4604      	mov	r4, r0
 801b73a:	6800      	ldr	r0, [r0, #0]
 801b73c:	b088      	sub	sp, #32
 801b73e:	4688      	mov	r8, r1
 801b740:	4617      	mov	r7, r2
 801b742:	461d      	mov	r5, r3
 801b744:	b120      	cbz	r0, 801b750 <rmw_take_response+0x1c>
 801b746:	4b1e      	ldr	r3, [pc, #120]	@ (801b7c0 <rmw_take_response+0x8c>)
 801b748:	6819      	ldr	r1, [r3, #0]
 801b74a:	f7e4 fd69 	bl	8000220 <strcmp>
 801b74e:	bb78      	cbnz	r0, 801b7b0 <rmw_take_response+0x7c>
 801b750:	b10d      	cbz	r5, 801b756 <rmw_take_response+0x22>
 801b752:	2300      	movs	r3, #0
 801b754:	702b      	strb	r3, [r5, #0]
 801b756:	6864      	ldr	r4, [r4, #4]
 801b758:	f7f6 fd8a 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 801b75c:	4620      	mov	r0, r4
 801b75e:	f7f6 fd5f 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b762:	4606      	mov	r6, r0
 801b764:	b340      	cbz	r0, 801b7b8 <rmw_take_response+0x84>
 801b766:	6963      	ldr	r3, [r4, #20]
 801b768:	6884      	ldr	r4, [r0, #8]
 801b76a:	68db      	ldr	r3, [r3, #12]
 801b76c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801b770:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801b774:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801b778:	4798      	blx	r3
 801b77a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b77e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801b782:	f104 0110 	add.w	r1, r4, #16
 801b786:	4668      	mov	r0, sp
 801b788:	f7f2 fec4 	bl	800e514 <ucdr_init_buffer>
 801b78c:	4639      	mov	r1, r7
 801b78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b792:	4668      	mov	r0, sp
 801b794:	4798      	blx	r3
 801b796:	4631      	mov	r1, r6
 801b798:	4604      	mov	r4, r0
 801b79a:	480a      	ldr	r0, [pc, #40]	@ (801b7c4 <rmw_take_response+0x90>)
 801b79c:	f7ff fdb0 	bl	801b300 <put_memory>
 801b7a0:	b105      	cbz	r5, 801b7a4 <rmw_take_response+0x70>
 801b7a2:	702c      	strb	r4, [r5, #0]
 801b7a4:	f084 0001 	eor.w	r0, r4, #1
 801b7a8:	b2c0      	uxtb	r0, r0
 801b7aa:	b008      	add	sp, #32
 801b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7b0:	200c      	movs	r0, #12
 801b7b2:	b008      	add	sp, #32
 801b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7b8:	2001      	movs	r0, #1
 801b7ba:	b008      	add	sp, #32
 801b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7c0:	0802124c 	.word	0x0802124c
 801b7c4:	20017838 	.word	0x20017838

0801b7c8 <rmw_trigger_guard_condition>:
 801b7c8:	b160      	cbz	r0, 801b7e4 <rmw_trigger_guard_condition+0x1c>
 801b7ca:	b510      	push	{r4, lr}
 801b7cc:	4604      	mov	r4, r0
 801b7ce:	6800      	ldr	r0, [r0, #0]
 801b7d0:	f7f6 fe52 	bl	8012478 <is_uxrce_rmw_identifier_valid>
 801b7d4:	b908      	cbnz	r0, 801b7da <rmw_trigger_guard_condition+0x12>
 801b7d6:	2001      	movs	r0, #1
 801b7d8:	bd10      	pop	{r4, pc}
 801b7da:	6863      	ldr	r3, [r4, #4]
 801b7dc:	2201      	movs	r2, #1
 801b7de:	741a      	strb	r2, [r3, #16]
 801b7e0:	2000      	movs	r0, #0
 801b7e2:	bd10      	pop	{r4, pc}
 801b7e4:	2001      	movs	r0, #1
 801b7e6:	4770      	bx	lr

0801b7e8 <rmw_wait>:
 801b7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7ec:	b089      	sub	sp, #36	@ 0x24
 801b7ee:	4607      	mov	r7, r0
 801b7f0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b7f2:	460e      	mov	r6, r1
 801b7f4:	4698      	mov	r8, r3
 801b7f6:	4691      	mov	r9, r2
 801b7f8:	2a00      	cmp	r2, #0
 801b7fa:	f000 811e 	beq.w	801ba3a <rmw_wait+0x252>
 801b7fe:	2c00      	cmp	r4, #0
 801b800:	f000 80ef 	beq.w	801b9e2 <rmw_wait+0x1fa>
 801b804:	4bb5      	ldr	r3, [pc, #724]	@ (801badc <rmw_wait+0x2f4>)
 801b806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b808:	ad04      	add	r5, sp, #16
 801b80a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801b80e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b812:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b816:	f7ff fb7d 	bl	801af14 <rmw_time_equal>
 801b81a:	2800      	cmp	r0, #0
 801b81c:	f000 811b 	beq.w	801ba56 <rmw_wait+0x26e>
 801b820:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b824:	f7f6 fd24 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 801b828:	4bad      	ldr	r3, [pc, #692]	@ (801bae0 <rmw_wait+0x2f8>)
 801b82a:	681c      	ldr	r4, [r3, #0]
 801b82c:	b14c      	cbz	r4, 801b842 <rmw_wait+0x5a>
 801b82e:	4623      	mov	r3, r4
 801b830:	2100      	movs	r1, #0
 801b832:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801b836:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b83a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d1f7      	bne.n	801b832 <rmw_wait+0x4a>
 801b842:	f1b9 0f00 	cmp.w	r9, #0
 801b846:	d011      	beq.n	801b86c <rmw_wait+0x84>
 801b848:	f8d9 1000 	ldr.w	r1, [r9]
 801b84c:	b171      	cbz	r1, 801b86c <rmw_wait+0x84>
 801b84e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801b852:	2300      	movs	r3, #0
 801b854:	2001      	movs	r0, #1
 801b856:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b85a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801b85c:	6912      	ldr	r2, [r2, #16]
 801b85e:	3301      	adds	r3, #1
 801b860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b864:	4299      	cmp	r1, r3
 801b866:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b86a:	d1f4      	bne.n	801b856 <rmw_wait+0x6e>
 801b86c:	f1b8 0f00 	cmp.w	r8, #0
 801b870:	f000 8109 	beq.w	801ba86 <rmw_wait+0x29e>
 801b874:	f8d8 1000 	ldr.w	r1, [r8]
 801b878:	2900      	cmp	r1, #0
 801b87a:	f000 8116 	beq.w	801baaa <rmw_wait+0x2c2>
 801b87e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801b882:	2300      	movs	r3, #0
 801b884:	2001      	movs	r0, #1
 801b886:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b88a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801b88c:	6912      	ldr	r2, [r2, #16]
 801b88e:	3301      	adds	r3, #1
 801b890:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b894:	4299      	cmp	r1, r3
 801b896:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b89a:	d1f4      	bne.n	801b886 <rmw_wait+0x9e>
 801b89c:	2f00      	cmp	r7, #0
 801b89e:	f000 8114 	beq.w	801baca <rmw_wait+0x2e2>
 801b8a2:	6839      	ldr	r1, [r7, #0]
 801b8a4:	b171      	cbz	r1, 801b8c4 <rmw_wait+0xdc>
 801b8a6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	2001      	movs	r0, #1
 801b8ae:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b8b2:	6a12      	ldr	r2, [r2, #32]
 801b8b4:	6912      	ldr	r2, [r2, #16]
 801b8b6:	3301      	adds	r3, #1
 801b8b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b8bc:	4299      	cmp	r1, r3
 801b8be:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b8c2:	d1f4      	bne.n	801b8ae <rmw_wait+0xc6>
 801b8c4:	b344      	cbz	r4, 801b918 <rmw_wait+0x130>
 801b8c6:	4622      	mov	r2, r4
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801b8ce:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801b8d2:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801b8d6:	440b      	add	r3, r1
 801b8d8:	b2db      	uxtb	r3, r3
 801b8da:	2a00      	cmp	r2, #0
 801b8dc:	d1f5      	bne.n	801b8ca <rmw_wait+0xe2>
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d075      	beq.n	801b9ce <rmw_wait+0x1e6>
 801b8e2:	1c6a      	adds	r2, r5, #1
 801b8e4:	d00d      	beq.n	801b902 <rmw_wait+0x11a>
 801b8e6:	ee07 5a90 	vmov	s15, r5
 801b8ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b8ee:	ee07 3a90 	vmov	s15, r3
 801b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b8fa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801b8fe:	ee17 5a90 	vmov	r5, s15
 801b902:	68a0      	ldr	r0, [r4, #8]
 801b904:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801b908:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	f040 808a 	bne.w	801ba26 <rmw_wait+0x23e>
 801b912:	6864      	ldr	r4, [r4, #4]
 801b914:	2c00      	cmp	r4, #0
 801b916:	d1f4      	bne.n	801b902 <rmw_wait+0x11a>
 801b918:	f1b9 0f00 	cmp.w	r9, #0
 801b91c:	f000 80c3 	beq.w	801baa6 <rmw_wait+0x2be>
 801b920:	f8d9 5000 	ldr.w	r5, [r9]
 801b924:	b185      	cbz	r5, 801b948 <rmw_wait+0x160>
 801b926:	2400      	movs	r4, #0
 801b928:	4625      	mov	r5, r4
 801b92a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b92e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b932:	f7f6 fc75 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b936:	2800      	cmp	r0, #0
 801b938:	d06d      	beq.n	801ba16 <rmw_wait+0x22e>
 801b93a:	f8d9 3000 	ldr.w	r3, [r9]
 801b93e:	3401      	adds	r4, #1
 801b940:	42a3      	cmp	r3, r4
 801b942:	f04f 0501 	mov.w	r5, #1
 801b946:	d8f0      	bhi.n	801b92a <rmw_wait+0x142>
 801b948:	f1b8 0f00 	cmp.w	r8, #0
 801b94c:	d012      	beq.n	801b974 <rmw_wait+0x18c>
 801b94e:	f8d8 1000 	ldr.w	r1, [r8]
 801b952:	2400      	movs	r4, #0
 801b954:	b171      	cbz	r1, 801b974 <rmw_wait+0x18c>
 801b956:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b95a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b95e:	f7f6 fc5f 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b962:	2800      	cmp	r0, #0
 801b964:	d047      	beq.n	801b9f6 <rmw_wait+0x20e>
 801b966:	f8d8 3000 	ldr.w	r3, [r8]
 801b96a:	3401      	adds	r4, #1
 801b96c:	42a3      	cmp	r3, r4
 801b96e:	f04f 0501 	mov.w	r5, #1
 801b972:	d8f0      	bhi.n	801b956 <rmw_wait+0x16e>
 801b974:	b17f      	cbz	r7, 801b996 <rmw_wait+0x1ae>
 801b976:	683b      	ldr	r3, [r7, #0]
 801b978:	2400      	movs	r4, #0
 801b97a:	b163      	cbz	r3, 801b996 <rmw_wait+0x1ae>
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b982:	f7f6 fc4d 	bl	8012220 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b986:	2800      	cmp	r0, #0
 801b988:	d03d      	beq.n	801ba06 <rmw_wait+0x21e>
 801b98a:	683b      	ldr	r3, [r7, #0]
 801b98c:	3401      	adds	r4, #1
 801b98e:	42a3      	cmp	r3, r4
 801b990:	f04f 0501 	mov.w	r5, #1
 801b994:	d8f2      	bhi.n	801b97c <rmw_wait+0x194>
 801b996:	b1a6      	cbz	r6, 801b9c2 <rmw_wait+0x1da>
 801b998:	6834      	ldr	r4, [r6, #0]
 801b99a:	b194      	cbz	r4, 801b9c2 <rmw_wait+0x1da>
 801b99c:	2300      	movs	r3, #0
 801b99e:	461f      	mov	r7, r3
 801b9a0:	e004      	b.n	801b9ac <rmw_wait+0x1c4>
 801b9a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801b9a6:	3301      	adds	r3, #1
 801b9a8:	429c      	cmp	r4, r3
 801b9aa:	d00a      	beq.n	801b9c2 <rmw_wait+0x1da>
 801b9ac:	6870      	ldr	r0, [r6, #4]
 801b9ae:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801b9b2:	7c0a      	ldrb	r2, [r1, #16]
 801b9b4:	2a00      	cmp	r2, #0
 801b9b6:	d0f4      	beq.n	801b9a2 <rmw_wait+0x1ba>
 801b9b8:	3301      	adds	r3, #1
 801b9ba:	429c      	cmp	r4, r3
 801b9bc:	740f      	strb	r7, [r1, #16]
 801b9be:	4615      	mov	r5, r2
 801b9c0:	d1f4      	bne.n	801b9ac <rmw_wait+0x1c4>
 801b9c2:	f085 0001 	eor.w	r0, r5, #1
 801b9c6:	0040      	lsls	r0, r0, #1
 801b9c8:	b009      	add	sp, #36	@ 0x24
 801b9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9ce:	68a0      	ldr	r0, [r4, #8]
 801b9d0:	2100      	movs	r1, #0
 801b9d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b9d6:	f7fa f835 	bl	8015a44 <uxr_run_session_timeout>
 801b9da:	6864      	ldr	r4, [r4, #4]
 801b9dc:	2c00      	cmp	r4, #0
 801b9de:	d1f6      	bne.n	801b9ce <rmw_wait+0x1e6>
 801b9e0:	e79a      	b.n	801b918 <rmw_wait+0x130>
 801b9e2:	f7f6 fc45 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 801b9e6:	4b3e      	ldr	r3, [pc, #248]	@ (801bae0 <rmw_wait+0x2f8>)
 801b9e8:	681c      	ldr	r4, [r3, #0]
 801b9ea:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b9ee:	2c00      	cmp	r4, #0
 801b9f0:	f47f af1d 	bne.w	801b82e <rmw_wait+0x46>
 801b9f4:	e728      	b.n	801b848 <rmw_wait+0x60>
 801b9f6:	e9d8 3200 	ldrd	r3, r2, [r8]
 801b9fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801b9fe:	3401      	adds	r4, #1
 801ba00:	429c      	cmp	r4, r3
 801ba02:	d3a8      	bcc.n	801b956 <rmw_wait+0x16e>
 801ba04:	e7b6      	b.n	801b974 <rmw_wait+0x18c>
 801ba06:	e9d7 3200 	ldrd	r3, r2, [r7]
 801ba0a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ba0e:	3401      	adds	r4, #1
 801ba10:	42a3      	cmp	r3, r4
 801ba12:	d8b3      	bhi.n	801b97c <rmw_wait+0x194>
 801ba14:	e7bf      	b.n	801b996 <rmw_wait+0x1ae>
 801ba16:	e9d9 3200 	ldrd	r3, r2, [r9]
 801ba1a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ba1e:	3401      	adds	r4, #1
 801ba20:	42a3      	cmp	r3, r4
 801ba22:	d882      	bhi.n	801b92a <rmw_wait+0x142>
 801ba24:	e790      	b.n	801b948 <rmw_wait+0x160>
 801ba26:	4629      	mov	r1, r5
 801ba28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ba2c:	f7fa f824 	bl	8015a78 <uxr_run_session_until_data>
 801ba30:	6864      	ldr	r4, [r4, #4]
 801ba32:	2c00      	cmp	r4, #0
 801ba34:	f47f af65 	bne.w	801b902 <rmw_wait+0x11a>
 801ba38:	e76e      	b.n	801b918 <rmw_wait+0x130>
 801ba3a:	b1f3      	cbz	r3, 801ba7a <rmw_wait+0x292>
 801ba3c:	2c00      	cmp	r4, #0
 801ba3e:	f47f aee1 	bne.w	801b804 <rmw_wait+0x1c>
 801ba42:	f7f6 fc15 	bl	8012270 <rmw_uxrce_clean_expired_static_input_buffer>
 801ba46:	4b26      	ldr	r3, [pc, #152]	@ (801bae0 <rmw_wait+0x2f8>)
 801ba48:	681c      	ldr	r4, [r3, #0]
 801ba4a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ba4e:	2c00      	cmp	r4, #0
 801ba50:	f47f aeed 	bne.w	801b82e <rmw_wait+0x46>
 801ba54:	e70a      	b.n	801b86c <rmw_wait+0x84>
 801ba56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ba5a:	f7ff faaf 	bl	801afbc <rmw_time_total_nsec>
 801ba5e:	4a21      	ldr	r2, [pc, #132]	@ (801bae4 <rmw_wait+0x2fc>)
 801ba60:	2300      	movs	r3, #0
 801ba62:	f7e5 f951 	bl	8000d08 <__aeabi_uldivmod>
 801ba66:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801ba6a:	f171 0100 	sbcs.w	r1, r1, #0
 801ba6e:	4605      	mov	r5, r0
 801ba70:	f6ff aed8 	blt.w	801b824 <rmw_wait+0x3c>
 801ba74:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801ba78:	e6d4      	b.n	801b824 <rmw_wait+0x3c>
 801ba7a:	2800      	cmp	r0, #0
 801ba7c:	d1de      	bne.n	801ba3c <rmw_wait+0x254>
 801ba7e:	2900      	cmp	r1, #0
 801ba80:	d1dc      	bne.n	801ba3c <rmw_wait+0x254>
 801ba82:	4608      	mov	r0, r1
 801ba84:	e7a0      	b.n	801b9c8 <rmw_wait+0x1e0>
 801ba86:	2f00      	cmp	r7, #0
 801ba88:	f47f af0b 	bne.w	801b8a2 <rmw_wait+0xba>
 801ba8c:	2c00      	cmp	r4, #0
 801ba8e:	f47f af1a 	bne.w	801b8c6 <rmw_wait+0xde>
 801ba92:	f1b9 0f00 	cmp.w	r9, #0
 801ba96:	d027      	beq.n	801bae8 <rmw_wait+0x300>
 801ba98:	f8d9 3000 	ldr.w	r3, [r9]
 801ba9c:	4625      	mov	r5, r4
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	f47f af41 	bne.w	801b926 <rmw_wait+0x13e>
 801baa4:	e777      	b.n	801b996 <rmw_wait+0x1ae>
 801baa6:	464d      	mov	r5, r9
 801baa8:	e74e      	b.n	801b948 <rmw_wait+0x160>
 801baaa:	2f00      	cmp	r7, #0
 801baac:	f47f aef9 	bne.w	801b8a2 <rmw_wait+0xba>
 801bab0:	2c00      	cmp	r4, #0
 801bab2:	f47f af08 	bne.w	801b8c6 <rmw_wait+0xde>
 801bab6:	f1b9 0f00 	cmp.w	r9, #0
 801baba:	d015      	beq.n	801bae8 <rmw_wait+0x300>
 801babc:	f8d9 3000 	ldr.w	r3, [r9]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	f47f af30 	bne.w	801b926 <rmw_wait+0x13e>
 801bac6:	2500      	movs	r5, #0
 801bac8:	e743      	b.n	801b952 <rmw_wait+0x16a>
 801baca:	2c00      	cmp	r4, #0
 801bacc:	f47f aefb 	bne.w	801b8c6 <rmw_wait+0xde>
 801bad0:	f1b9 0f00 	cmp.w	r9, #0
 801bad4:	f47f af24 	bne.w	801b920 <rmw_wait+0x138>
 801bad8:	e7f5      	b.n	801bac6 <rmw_wait+0x2de>
 801bada:	bf00      	nop
 801badc:	080200d0 	.word	0x080200d0
 801bae0:	20019ed8 	.word	0x20019ed8
 801bae4:	000f4240 	.word	0x000f4240
 801bae8:	464d      	mov	r5, r9
 801baea:	e754      	b.n	801b996 <rmw_wait+0x1ae>

0801baec <rmw_create_wait_set>:
 801baec:	b508      	push	{r3, lr}
 801baee:	4803      	ldr	r0, [pc, #12]	@ (801bafc <rmw_create_wait_set+0x10>)
 801baf0:	f7ff fbf6 	bl	801b2e0 <get_memory>
 801baf4:	b108      	cbz	r0, 801bafa <rmw_create_wait_set+0xe>
 801baf6:	6880      	ldr	r0, [r0, #8]
 801baf8:	3010      	adds	r0, #16
 801bafa:	bd08      	pop	{r3, pc}
 801bafc:	20015690 	.word	0x20015690

0801bb00 <rmw_destroy_wait_set>:
 801bb00:	b508      	push	{r3, lr}
 801bb02:	4b08      	ldr	r3, [pc, #32]	@ (801bb24 <rmw_destroy_wait_set+0x24>)
 801bb04:	6819      	ldr	r1, [r3, #0]
 801bb06:	b911      	cbnz	r1, 801bb0e <rmw_destroy_wait_set+0xe>
 801bb08:	e00a      	b.n	801bb20 <rmw_destroy_wait_set+0x20>
 801bb0a:	6849      	ldr	r1, [r1, #4]
 801bb0c:	b141      	cbz	r1, 801bb20 <rmw_destroy_wait_set+0x20>
 801bb0e:	688b      	ldr	r3, [r1, #8]
 801bb10:	3310      	adds	r3, #16
 801bb12:	4298      	cmp	r0, r3
 801bb14:	d1f9      	bne.n	801bb0a <rmw_destroy_wait_set+0xa>
 801bb16:	4803      	ldr	r0, [pc, #12]	@ (801bb24 <rmw_destroy_wait_set+0x24>)
 801bb18:	f7ff fbf2 	bl	801b300 <put_memory>
 801bb1c:	2000      	movs	r0, #0
 801bb1e:	bd08      	pop	{r3, pc}
 801bb20:	2001      	movs	r0, #1
 801bb22:	bd08      	pop	{r3, pc}
 801bb24:	20015690 	.word	0x20015690

0801bb28 <sensor_msgs__msg__Imu__get_type_hash>:
 801bb28:	4800      	ldr	r0, [pc, #0]	@ (801bb2c <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 801bb2a:	4770      	bx	lr
 801bb2c:	20000d18 	.word	0x20000d18

0801bb30 <sensor_msgs__msg__Imu__get_type_description>:
 801bb30:	b570      	push	{r4, r5, r6, lr}
 801bb32:	4e15      	ldr	r6, [pc, #84]	@ (801bb88 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 801bb34:	7835      	ldrb	r5, [r6, #0]
 801bb36:	b10d      	cbz	r5, 801bb3c <sensor_msgs__msg__Imu__get_type_description+0xc>
 801bb38:	4814      	ldr	r0, [pc, #80]	@ (801bb8c <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801bb3a:	bd70      	pop	{r4, r5, r6, pc}
 801bb3c:	4628      	mov	r0, r5
 801bb3e:	f7f6 fff9 	bl	8012b34 <builtin_interfaces__msg__Time__get_type_description>
 801bb42:	300c      	adds	r0, #12
 801bb44:	c807      	ldmia	r0, {r0, r1, r2}
 801bb46:	4c12      	ldr	r4, [pc, #72]	@ (801bb90 <sensor_msgs__msg__Imu__get_type_description+0x60>)
 801bb48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bb4c:	4628      	mov	r0, r5
 801bb4e:	f000 f955 	bl	801bdfc <geometry_msgs__msg__Quaternion__get_type_description>
 801bb52:	300c      	adds	r0, #12
 801bb54:	c807      	ldmia	r0, {r0, r1, r2}
 801bb56:	f104 0318 	add.w	r3, r4, #24
 801bb5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb5e:	4628      	mov	r0, r5
 801bb60:	f000 f994 	bl	801be8c <geometry_msgs__msg__Vector3__get_type_description>
 801bb64:	300c      	adds	r0, #12
 801bb66:	c807      	ldmia	r0, {r0, r1, r2}
 801bb68:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801bb6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb70:	4628      	mov	r0, r5
 801bb72:	f000 f8c9 	bl	801bd08 <std_msgs__msg__Header__get_type_description>
 801bb76:	300c      	adds	r0, #12
 801bb78:	c807      	ldmia	r0, {r0, r1, r2}
 801bb7a:	3448      	adds	r4, #72	@ 0x48
 801bb7c:	2301      	movs	r3, #1
 801bb7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bb82:	7033      	strb	r3, [r6, #0]
 801bb84:	4801      	ldr	r0, [pc, #4]	@ (801bb8c <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801bb86:	bd70      	pop	{r4, r5, r6, pc}
 801bb88:	2001a10d 	.word	0x2001a10d
 801bb8c:	08021280 	.word	0x08021280
 801bb90:	20001208 	.word	0x20001208

0801bb94 <sensor_msgs__msg__Imu__get_type_description_sources>:
 801bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb96:	4d26      	ldr	r5, [pc, #152]	@ (801bc30 <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 801bb98:	782f      	ldrb	r7, [r5, #0]
 801bb9a:	b10f      	cbz	r7, 801bba0 <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 801bb9c:	4825      	ldr	r0, [pc, #148]	@ (801bc34 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801bb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bba0:	4e25      	ldr	r6, [pc, #148]	@ (801bc38 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801bba2:	4c26      	ldr	r4, [pc, #152]	@ (801bc3c <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 801bba4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bba8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bbaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bbac:	6833      	ldr	r3, [r6, #0]
 801bbae:	4626      	mov	r6, r4
 801bbb0:	4638      	mov	r0, r7
 801bbb2:	f846 3b04 	str.w	r3, [r6], #4
 801bbb6:	f7f6 ffc9 	bl	8012b4c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801bbba:	4684      	mov	ip, r0
 801bbbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbc0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bbc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bbc8:	4638      	mov	r0, r7
 801bbca:	f8dc 3000 	ldr.w	r3, [ip]
 801bbce:	6033      	str	r3, [r6, #0]
 801bbd0:	f000 f920 	bl	801be14 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801bbd4:	4684      	mov	ip, r0
 801bbd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbda:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 801bbde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bbe0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbe4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bbe6:	4638      	mov	r0, r7
 801bbe8:	f8dc 3000 	ldr.w	r3, [ip]
 801bbec:	6033      	str	r3, [r6, #0]
 801bbee:	f000 f959 	bl	801bea4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801bbf2:	4684      	mov	ip, r0
 801bbf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bbf8:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801bbfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bbfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bc02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bc04:	4638      	mov	r0, r7
 801bc06:	f8dc 3000 	ldr.w	r3, [ip]
 801bc0a:	6033      	str	r3, [r6, #0]
 801bc0c:	f000 f894 	bl	801bd38 <std_msgs__msg__Header__get_individual_type_description_source>
 801bc10:	2301      	movs	r3, #1
 801bc12:	4684      	mov	ip, r0
 801bc14:	702b      	strb	r3, [r5, #0]
 801bc16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bc1a:	3470      	adds	r4, #112	@ 0x70
 801bc1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bc1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bc22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bc24:	f8dc 3000 	ldr.w	r3, [ip]
 801bc28:	4802      	ldr	r0, [pc, #8]	@ (801bc34 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801bc2a:	6023      	str	r3, [r4, #0]
 801bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc2e:	bf00      	nop
 801bc30:	2001a10c 	.word	0x2001a10c
 801bc34:	08021250 	.word	0x08021250
 801bc38:	0802125c 	.word	0x0802125c
 801bc3c:	2001a058 	.word	0x2001a058

0801bc40 <sensor_msgs__msg__Imu__init>:
 801bc40:	b3d8      	cbz	r0, 801bcba <sensor_msgs__msg__Imu__init+0x7a>
 801bc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc44:	4604      	mov	r4, r0
 801bc46:	f000 f8a3 	bl	801bd90 <std_msgs__msg__Header__init>
 801bc4a:	b190      	cbz	r0, 801bc72 <sensor_msgs__msg__Imu__init+0x32>
 801bc4c:	f104 0518 	add.w	r5, r4, #24
 801bc50:	4628      	mov	r0, r5
 801bc52:	f000 f901 	bl	801be58 <geometry_msgs__msg__Quaternion__init>
 801bc56:	b358      	cbz	r0, 801bcb0 <sensor_msgs__msg__Imu__init+0x70>
 801bc58:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f000 f941 	bl	801bee4 <geometry_msgs__msg__Vector3__init>
 801bc62:	b1b8      	cbz	r0, 801bc94 <sensor_msgs__msg__Imu__init+0x54>
 801bc64:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 801bc68:	4638      	mov	r0, r7
 801bc6a:	f000 f93b 	bl	801bee4 <geometry_msgs__msg__Vector3__init>
 801bc6e:	b330      	cbz	r0, 801bcbe <sensor_msgs__msg__Imu__init+0x7e>
 801bc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc72:	4620      	mov	r0, r4
 801bc74:	f000 f8ac 	bl	801bdd0 <std_msgs__msg__Header__fini>
 801bc78:	f104 0018 	add.w	r0, r4, #24
 801bc7c:	f000 f900 	bl	801be80 <geometry_msgs__msg__Quaternion__fini>
 801bc80:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801bc84:	f000 f932 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bc88:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801bc8c:	f000 f92e 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bc90:	2000      	movs	r0, #0
 801bc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc94:	4620      	mov	r0, r4
 801bc96:	f000 f89b 	bl	801bdd0 <std_msgs__msg__Header__fini>
 801bc9a:	4628      	mov	r0, r5
 801bc9c:	f000 f8f0 	bl	801be80 <geometry_msgs__msg__Quaternion__fini>
 801bca0:	4630      	mov	r0, r6
 801bca2:	f000 f923 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bca6:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801bcaa:	f000 f91f 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bcae:	e7ef      	b.n	801bc90 <sensor_msgs__msg__Imu__init+0x50>
 801bcb0:	4620      	mov	r0, r4
 801bcb2:	f000 f88d 	bl	801bdd0 <std_msgs__msg__Header__fini>
 801bcb6:	4628      	mov	r0, r5
 801bcb8:	e7e0      	b.n	801bc7c <sensor_msgs__msg__Imu__init+0x3c>
 801bcba:	2000      	movs	r0, #0
 801bcbc:	4770      	bx	lr
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	f000 f886 	bl	801bdd0 <std_msgs__msg__Header__fini>
 801bcc4:	4628      	mov	r0, r5
 801bcc6:	f000 f8db 	bl	801be80 <geometry_msgs__msg__Quaternion__fini>
 801bcca:	4630      	mov	r0, r6
 801bccc:	f000 f90e 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bcd0:	4638      	mov	r0, r7
 801bcd2:	f000 f90b 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bcd6:	e7db      	b.n	801bc90 <sensor_msgs__msg__Imu__init+0x50>

0801bcd8 <sensor_msgs__msg__Imu__fini>:
 801bcd8:	b188      	cbz	r0, 801bcfe <sensor_msgs__msg__Imu__fini+0x26>
 801bcda:	b510      	push	{r4, lr}
 801bcdc:	4604      	mov	r4, r0
 801bcde:	f000 f877 	bl	801bdd0 <std_msgs__msg__Header__fini>
 801bce2:	f104 0018 	add.w	r0, r4, #24
 801bce6:	f000 f8cb 	bl	801be80 <geometry_msgs__msg__Quaternion__fini>
 801bcea:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801bcee:	f000 f8fd 	bl	801beec <geometry_msgs__msg__Vector3__fini>
 801bcf2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801bcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcfa:	f000 b8f7 	b.w	801beec <geometry_msgs__msg__Vector3__fini>
 801bcfe:	4770      	bx	lr

0801bd00 <std_msgs__msg__Header__get_type_hash>:
 801bd00:	4800      	ldr	r0, [pc, #0]	@ (801bd04 <std_msgs__msg__Header__get_type_hash+0x4>)
 801bd02:	4770      	bx	lr
 801bd04:	20001568 	.word	0x20001568

0801bd08 <std_msgs__msg__Header__get_type_description>:
 801bd08:	b510      	push	{r4, lr}
 801bd0a:	4c08      	ldr	r4, [pc, #32]	@ (801bd2c <std_msgs__msg__Header__get_type_description+0x24>)
 801bd0c:	7820      	ldrb	r0, [r4, #0]
 801bd0e:	b108      	cbz	r0, 801bd14 <std_msgs__msg__Header__get_type_description+0xc>
 801bd10:	4807      	ldr	r0, [pc, #28]	@ (801bd30 <std_msgs__msg__Header__get_type_description+0x28>)
 801bd12:	bd10      	pop	{r4, pc}
 801bd14:	f7f6 ff0e 	bl	8012b34 <builtin_interfaces__msg__Time__get_type_description>
 801bd18:	300c      	adds	r0, #12
 801bd1a:	c807      	ldmia	r0, {r0, r1, r2}
 801bd1c:	4b05      	ldr	r3, [pc, #20]	@ (801bd34 <std_msgs__msg__Header__get_type_description+0x2c>)
 801bd1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bd22:	2301      	movs	r3, #1
 801bd24:	4802      	ldr	r0, [pc, #8]	@ (801bd30 <std_msgs__msg__Header__get_type_description+0x28>)
 801bd26:	7023      	strb	r3, [r4, #0]
 801bd28:	bd10      	pop	{r4, pc}
 801bd2a:	bf00      	nop
 801bd2c:	2001a159 	.word	0x2001a159
 801bd30:	080212d4 	.word	0x080212d4
 801bd34:	200016e0 	.word	0x200016e0

0801bd38 <std_msgs__msg__Header__get_individual_type_description_source>:
 801bd38:	4800      	ldr	r0, [pc, #0]	@ (801bd3c <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 801bd3a:	4770      	bx	lr
 801bd3c:	080212b0 	.word	0x080212b0

0801bd40 <std_msgs__msg__Header__get_type_description_sources>:
 801bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd42:	4e0f      	ldr	r6, [pc, #60]	@ (801bd80 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801bd44:	7837      	ldrb	r7, [r6, #0]
 801bd46:	b10f      	cbz	r7, 801bd4c <std_msgs__msg__Header__get_type_description_sources+0xc>
 801bd48:	480e      	ldr	r0, [pc, #56]	@ (801bd84 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd4c:	4d0e      	ldr	r5, [pc, #56]	@ (801bd88 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 801bd4e:	4c0f      	ldr	r4, [pc, #60]	@ (801bd8c <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 801bd50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd58:	682b      	ldr	r3, [r5, #0]
 801bd5a:	f844 3b04 	str.w	r3, [r4], #4
 801bd5e:	4638      	mov	r0, r7
 801bd60:	f7f6 fef4 	bl	8012b4c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801bd64:	2301      	movs	r3, #1
 801bd66:	4684      	mov	ip, r0
 801bd68:	7033      	strb	r3, [r6, #0]
 801bd6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd76:	f8dc 3000 	ldr.w	r3, [ip]
 801bd7a:	4802      	ldr	r0, [pc, #8]	@ (801bd84 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801bd7c:	6023      	str	r3, [r4, #0]
 801bd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd80:	2001a158 	.word	0x2001a158
 801bd84:	080212a4 	.word	0x080212a4
 801bd88:	080212b0 	.word	0x080212b0
 801bd8c:	2001a110 	.word	0x2001a110

0801bd90 <std_msgs__msg__Header__init>:
 801bd90:	b1d8      	cbz	r0, 801bdca <std_msgs__msg__Header__init+0x3a>
 801bd92:	b538      	push	{r3, r4, r5, lr}
 801bd94:	4604      	mov	r4, r0
 801bd96:	f000 f827 	bl	801bde8 <builtin_interfaces__msg__Time__init>
 801bd9a:	b130      	cbz	r0, 801bdaa <std_msgs__msg__Header__init+0x1a>
 801bd9c:	f104 0508 	add.w	r5, r4, #8
 801bda0:	4628      	mov	r0, r5
 801bda2:	f001 f9f3 	bl	801d18c <rosidl_runtime_c__String__init>
 801bda6:	b148      	cbz	r0, 801bdbc <std_msgs__msg__Header__init+0x2c>
 801bda8:	bd38      	pop	{r3, r4, r5, pc}
 801bdaa:	4620      	mov	r0, r4
 801bdac:	f000 f820 	bl	801bdf0 <builtin_interfaces__msg__Time__fini>
 801bdb0:	f104 0008 	add.w	r0, r4, #8
 801bdb4:	f001 fa04 	bl	801d1c0 <rosidl_runtime_c__String__fini>
 801bdb8:	2000      	movs	r0, #0
 801bdba:	bd38      	pop	{r3, r4, r5, pc}
 801bdbc:	4620      	mov	r0, r4
 801bdbe:	f000 f817 	bl	801bdf0 <builtin_interfaces__msg__Time__fini>
 801bdc2:	4628      	mov	r0, r5
 801bdc4:	f001 f9fc 	bl	801d1c0 <rosidl_runtime_c__String__fini>
 801bdc8:	e7f6      	b.n	801bdb8 <std_msgs__msg__Header__init+0x28>
 801bdca:	2000      	movs	r0, #0
 801bdcc:	4770      	bx	lr
 801bdce:	bf00      	nop

0801bdd0 <std_msgs__msg__Header__fini>:
 801bdd0:	b148      	cbz	r0, 801bde6 <std_msgs__msg__Header__fini+0x16>
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	4604      	mov	r4, r0
 801bdd6:	f000 f80b 	bl	801bdf0 <builtin_interfaces__msg__Time__fini>
 801bdda:	f104 0008 	add.w	r0, r4, #8
 801bdde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bde2:	f001 b9ed 	b.w	801d1c0 <rosidl_runtime_c__String__fini>
 801bde6:	4770      	bx	lr

0801bde8 <builtin_interfaces__msg__Time__init>:
 801bde8:	3800      	subs	r0, #0
 801bdea:	bf18      	it	ne
 801bdec:	2001      	movne	r0, #1
 801bdee:	4770      	bx	lr

0801bdf0 <builtin_interfaces__msg__Time__fini>:
 801bdf0:	4770      	bx	lr
 801bdf2:	bf00      	nop

0801bdf4 <geometry_msgs__msg__Quaternion__get_type_hash>:
 801bdf4:	4800      	ldr	r0, [pc, #0]	@ (801bdf8 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801bdf6:	4770      	bx	lr
 801bdf8:	200017c4 	.word	0x200017c4

0801bdfc <geometry_msgs__msg__Quaternion__get_type_description>:
 801bdfc:	4b03      	ldr	r3, [pc, #12]	@ (801be0c <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801bdfe:	781a      	ldrb	r2, [r3, #0]
 801be00:	b90a      	cbnz	r2, 801be06 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801be02:	2201      	movs	r2, #1
 801be04:	701a      	strb	r2, [r3, #0]
 801be06:	4802      	ldr	r0, [pc, #8]	@ (801be10 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 801be08:	4770      	bx	lr
 801be0a:	bf00      	nop
 801be0c:	2001a181 	.word	0x2001a181
 801be10:	08021328 	.word	0x08021328

0801be14 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 801be14:	4800      	ldr	r0, [pc, #0]	@ (801be18 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 801be16:	4770      	bx	lr
 801be18:	08021304 	.word	0x08021304

0801be1c <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 801be1c:	4b09      	ldr	r3, [pc, #36]	@ (801be44 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801be1e:	781a      	ldrb	r2, [r3, #0]
 801be20:	b96a      	cbnz	r2, 801be3e <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801be22:	b430      	push	{r4, r5}
 801be24:	4d08      	ldr	r5, [pc, #32]	@ (801be48 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 801be26:	4c09      	ldr	r4, [pc, #36]	@ (801be4c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 801be28:	2201      	movs	r2, #1
 801be2a:	701a      	strb	r2, [r3, #0]
 801be2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be34:	682b      	ldr	r3, [r5, #0]
 801be36:	4806      	ldr	r0, [pc, #24]	@ (801be50 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801be38:	6023      	str	r3, [r4, #0]
 801be3a:	bc30      	pop	{r4, r5}
 801be3c:	4770      	bx	lr
 801be3e:	4804      	ldr	r0, [pc, #16]	@ (801be50 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801be40:	4770      	bx	lr
 801be42:	bf00      	nop
 801be44:	2001a180 	.word	0x2001a180
 801be48:	08021304 	.word	0x08021304
 801be4c:	2001a15c 	.word	0x2001a15c
 801be50:	080212f8 	.word	0x080212f8
 801be54:	00000000 	.word	0x00000000

0801be58 <geometry_msgs__msg__Quaternion__init>:
 801be58:	b160      	cbz	r0, 801be74 <geometry_msgs__msg__Quaternion__init+0x1c>
 801be5a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801be78 <geometry_msgs__msg__Quaternion__init+0x20>
 801be5e:	2200      	movs	r2, #0
 801be60:	2300      	movs	r3, #0
 801be62:	e9c0 2300 	strd	r2, r3, [r0]
 801be66:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801be6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801be6e:	ed80 7b06 	vstr	d7, [r0, #24]
 801be72:	2001      	movs	r0, #1
 801be74:	4770      	bx	lr
 801be76:	bf00      	nop
 801be78:	00000000 	.word	0x00000000
 801be7c:	3ff00000 	.word	0x3ff00000

0801be80 <geometry_msgs__msg__Quaternion__fini>:
 801be80:	4770      	bx	lr
 801be82:	bf00      	nop

0801be84 <geometry_msgs__msg__Vector3__get_type_hash>:
 801be84:	4800      	ldr	r0, [pc, #0]	@ (801be88 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 801be86:	4770      	bx	lr
 801be88:	200019c0 	.word	0x200019c0

0801be8c <geometry_msgs__msg__Vector3__get_type_description>:
 801be8c:	4b03      	ldr	r3, [pc, #12]	@ (801be9c <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 801be8e:	781a      	ldrb	r2, [r3, #0]
 801be90:	b90a      	cbnz	r2, 801be96 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 801be92:	2201      	movs	r2, #1
 801be94:	701a      	strb	r2, [r3, #0]
 801be96:	4802      	ldr	r0, [pc, #8]	@ (801bea0 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 801be98:	4770      	bx	lr
 801be9a:	bf00      	nop
 801be9c:	2001a1a9 	.word	0x2001a1a9
 801bea0:	0802137c 	.word	0x0802137c

0801bea4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 801bea4:	4800      	ldr	r0, [pc, #0]	@ (801bea8 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 801bea6:	4770      	bx	lr
 801bea8:	08021358 	.word	0x08021358

0801beac <geometry_msgs__msg__Vector3__get_type_description_sources>:
 801beac:	4b09      	ldr	r3, [pc, #36]	@ (801bed4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 801beae:	781a      	ldrb	r2, [r3, #0]
 801beb0:	b96a      	cbnz	r2, 801bece <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 801beb2:	b430      	push	{r4, r5}
 801beb4:	4d08      	ldr	r5, [pc, #32]	@ (801bed8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 801beb6:	4c09      	ldr	r4, [pc, #36]	@ (801bedc <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 801beb8:	2201      	movs	r2, #1
 801beba:	701a      	strb	r2, [r3, #0]
 801bebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bec4:	682b      	ldr	r3, [r5, #0]
 801bec6:	4806      	ldr	r0, [pc, #24]	@ (801bee0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 801bec8:	6023      	str	r3, [r4, #0]
 801beca:	bc30      	pop	{r4, r5}
 801becc:	4770      	bx	lr
 801bece:	4804      	ldr	r0, [pc, #16]	@ (801bee0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 801bed0:	4770      	bx	lr
 801bed2:	bf00      	nop
 801bed4:	2001a1a8 	.word	0x2001a1a8
 801bed8:	08021358 	.word	0x08021358
 801bedc:	2001a184 	.word	0x2001a184
 801bee0:	0802134c 	.word	0x0802134c

0801bee4 <geometry_msgs__msg__Vector3__init>:
 801bee4:	3800      	subs	r0, #0
 801bee6:	bf18      	it	ne
 801bee8:	2001      	movne	r0, #1
 801beea:	4770      	bx	lr

0801beec <geometry_msgs__msg__Vector3__fini>:
 801beec:	4770      	bx	lr
 801beee:	bf00      	nop

0801bef0 <ucdr_serialize_string>:
 801bef0:	b538      	push	{r3, r4, r5, lr}
 801bef2:	4605      	mov	r5, r0
 801bef4:	4608      	mov	r0, r1
 801bef6:	460c      	mov	r4, r1
 801bef8:	f7e4 f9f2 	bl	80002e0 <strlen>
 801befc:	4621      	mov	r1, r4
 801befe:	1c42      	adds	r2, r0, #1
 801bf00:	4628      	mov	r0, r5
 801bf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf06:	f7f2 bb75 	b.w	800e5f4 <ucdr_serialize_sequence_char>
 801bf0a:	bf00      	nop

0801bf0c <ucdr_deserialize_string>:
 801bf0c:	b500      	push	{lr}
 801bf0e:	b083      	sub	sp, #12
 801bf10:	ab01      	add	r3, sp, #4
 801bf12:	f7f2 fb81 	bl	800e618 <ucdr_deserialize_sequence_char>
 801bf16:	b003      	add	sp, #12
 801bf18:	f85d fb04 	ldr.w	pc, [sp], #4

0801bf1c <uxr_init_input_best_effort_stream>:
 801bf1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bf20:	8003      	strh	r3, [r0, #0]
 801bf22:	4770      	bx	lr

0801bf24 <uxr_reset_input_best_effort_stream>:
 801bf24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bf28:	8003      	strh	r3, [r0, #0]
 801bf2a:	4770      	bx	lr

0801bf2c <uxr_receive_best_effort_message>:
 801bf2c:	b538      	push	{r3, r4, r5, lr}
 801bf2e:	4604      	mov	r4, r0
 801bf30:	8800      	ldrh	r0, [r0, #0]
 801bf32:	460d      	mov	r5, r1
 801bf34:	f000 fd28 	bl	801c988 <uxr_seq_num_cmp>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801bf40:	bfb8      	it	lt
 801bf42:	8025      	strhlt	r5, [r4, #0]
 801bf44:	bd38      	pop	{r3, r4, r5, pc}
 801bf46:	bf00      	nop

0801bf48 <on_full_input_buffer>:
 801bf48:	b570      	push	{r4, r5, r6, lr}
 801bf4a:	4605      	mov	r5, r0
 801bf4c:	460c      	mov	r4, r1
 801bf4e:	682b      	ldr	r3, [r5, #0]
 801bf50:	6809      	ldr	r1, [r1, #0]
 801bf52:	8920      	ldrh	r0, [r4, #8]
 801bf54:	6862      	ldr	r2, [r4, #4]
 801bf56:	fbb2 f2f0 	udiv	r2, r2, r0
 801bf5a:	1a5b      	subs	r3, r3, r1
 801bf5c:	fbb3 f3f2 	udiv	r3, r3, r2
 801bf60:	3301      	adds	r3, #1
 801bf62:	b29b      	uxth	r3, r3
 801bf64:	fbb3 f6f0 	udiv	r6, r3, r0
 801bf68:	fb00 3316 	mls	r3, r0, r6, r3
 801bf6c:	b29b      	uxth	r3, r3
 801bf6e:	fb02 f303 	mul.w	r3, r2, r3
 801bf72:	1d18      	adds	r0, r3, #4
 801bf74:	4408      	add	r0, r1
 801bf76:	7d26      	ldrb	r6, [r4, #20]
 801bf78:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801bf7c:	b116      	cbz	r6, 801bf84 <on_full_input_buffer+0x3c>
 801bf7e:	2600      	movs	r6, #0
 801bf80:	f840 6c04 	str.w	r6, [r0, #-4]
 801bf84:	2a03      	cmp	r2, #3
 801bf86:	d801      	bhi.n	801bf8c <on_full_input_buffer+0x44>
 801bf88:	2001      	movs	r0, #1
 801bf8a:	bd70      	pop	{r4, r5, r6, pc}
 801bf8c:	3308      	adds	r3, #8
 801bf8e:	4419      	add	r1, r3
 801bf90:	4628      	mov	r0, r5
 801bf92:	692b      	ldr	r3, [r5, #16]
 801bf94:	3a04      	subs	r2, #4
 801bf96:	f7f2 fab5 	bl	800e504 <ucdr_init_buffer_origin>
 801bf9a:	4628      	mov	r0, r5
 801bf9c:	4902      	ldr	r1, [pc, #8]	@ (801bfa8 <on_full_input_buffer+0x60>)
 801bf9e:	4622      	mov	r2, r4
 801bfa0:	f7f2 fa8c 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801bfa4:	2000      	movs	r0, #0
 801bfa6:	bd70      	pop	{r4, r5, r6, pc}
 801bfa8:	0801bf49 	.word	0x0801bf49

0801bfac <uxr_init_input_reliable_stream>:
 801bfac:	b500      	push	{lr}
 801bfae:	e9c0 1200 	strd	r1, r2, [r0]
 801bfb2:	f04f 0e00 	mov.w	lr, #0
 801bfb6:	9a01      	ldr	r2, [sp, #4]
 801bfb8:	8103      	strh	r3, [r0, #8]
 801bfba:	6102      	str	r2, [r0, #16]
 801bfbc:	f880 e014 	strb.w	lr, [r0, #20]
 801bfc0:	b1d3      	cbz	r3, 801bff8 <uxr_init_input_reliable_stream+0x4c>
 801bfc2:	f8c1 e000 	str.w	lr, [r1]
 801bfc6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801bfca:	f1bc 0f01 	cmp.w	ip, #1
 801bfce:	d913      	bls.n	801bff8 <uxr_init_input_reliable_stream+0x4c>
 801bfd0:	2301      	movs	r3, #1
 801bfd2:	fbb3 f1fc 	udiv	r1, r3, ip
 801bfd6:	fb0c 3111 	mls	r1, ip, r1, r3
 801bfda:	b289      	uxth	r1, r1
 801bfdc:	6842      	ldr	r2, [r0, #4]
 801bfde:	fbb2 f2fc 	udiv	r2, r2, ip
 801bfe2:	fb01 f202 	mul.w	r2, r1, r2
 801bfe6:	6801      	ldr	r1, [r0, #0]
 801bfe8:	f841 e002 	str.w	lr, [r1, r2]
 801bfec:	3301      	adds	r3, #1
 801bfee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801bff2:	b29b      	uxth	r3, r3
 801bff4:	459c      	cmp	ip, r3
 801bff6:	d8ec      	bhi.n	801bfd2 <uxr_init_input_reliable_stream+0x26>
 801bff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bffc:	60c3      	str	r3, [r0, #12]
 801bffe:	f85d fb04 	ldr.w	pc, [sp], #4
 801c002:	bf00      	nop

0801c004 <uxr_reset_input_reliable_stream>:
 801c004:	8901      	ldrh	r1, [r0, #8]
 801c006:	b1e9      	cbz	r1, 801c044 <uxr_reset_input_reliable_stream+0x40>
 801c008:	f04f 0c00 	mov.w	ip, #0
 801c00c:	b500      	push	{lr}
 801c00e:	4663      	mov	r3, ip
 801c010:	46e6      	mov	lr, ip
 801c012:	fbb3 f2f1 	udiv	r2, r3, r1
 801c016:	fb01 3312 	mls	r3, r1, r2, r3
 801c01a:	b29b      	uxth	r3, r3
 801c01c:	6842      	ldr	r2, [r0, #4]
 801c01e:	fbb2 f2f1 	udiv	r2, r2, r1
 801c022:	fb03 f202 	mul.w	r2, r3, r2
 801c026:	6803      	ldr	r3, [r0, #0]
 801c028:	f843 e002 	str.w	lr, [r3, r2]
 801c02c:	f10c 0c01 	add.w	ip, ip, #1
 801c030:	8901      	ldrh	r1, [r0, #8]
 801c032:	fa1f f38c 	uxth.w	r3, ip
 801c036:	4299      	cmp	r1, r3
 801c038:	d8eb      	bhi.n	801c012 <uxr_reset_input_reliable_stream+0xe>
 801c03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c03e:	60c3      	str	r3, [r0, #12]
 801c040:	f85d fb04 	ldr.w	pc, [sp], #4
 801c044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c048:	60c3      	str	r3, [r0, #12]
 801c04a:	4770      	bx	lr

0801c04c <uxr_receive_reliable_message>:
 801c04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c050:	4604      	mov	r4, r0
 801c052:	460d      	mov	r5, r1
 801c054:	8901      	ldrh	r1, [r0, #8]
 801c056:	8980      	ldrh	r0, [r0, #12]
 801c058:	4690      	mov	r8, r2
 801c05a:	461f      	mov	r7, r3
 801c05c:	f000 fc8c 	bl	801c978 <uxr_seq_num_add>
 801c060:	4629      	mov	r1, r5
 801c062:	4606      	mov	r6, r0
 801c064:	89a0      	ldrh	r0, [r4, #12]
 801c066:	f000 fc8f 	bl	801c988 <uxr_seq_num_cmp>
 801c06a:	2800      	cmp	r0, #0
 801c06c:	db0a      	blt.n	801c084 <uxr_receive_reliable_message+0x38>
 801c06e:	2600      	movs	r6, #0
 801c070:	89e0      	ldrh	r0, [r4, #14]
 801c072:	4629      	mov	r1, r5
 801c074:	f000 fc88 	bl	801c988 <uxr_seq_num_cmp>
 801c078:	2800      	cmp	r0, #0
 801c07a:	bfb8      	it	lt
 801c07c:	81e5      	strhlt	r5, [r4, #14]
 801c07e:	4630      	mov	r0, r6
 801c080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c084:	4630      	mov	r0, r6
 801c086:	4629      	mov	r1, r5
 801c088:	f000 fc7e 	bl	801c988 <uxr_seq_num_cmp>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	dbee      	blt.n	801c06e <uxr_receive_reliable_message+0x22>
 801c090:	6923      	ldr	r3, [r4, #16]
 801c092:	4640      	mov	r0, r8
 801c094:	4798      	blx	r3
 801c096:	2101      	movs	r1, #1
 801c098:	4606      	mov	r6, r0
 801c09a:	89a0      	ldrh	r0, [r4, #12]
 801c09c:	f000 fc6c 	bl	801c978 <uxr_seq_num_add>
 801c0a0:	b90e      	cbnz	r6, 801c0a6 <uxr_receive_reliable_message+0x5a>
 801c0a2:	4285      	cmp	r5, r0
 801c0a4:	d046      	beq.n	801c134 <uxr_receive_reliable_message+0xe8>
 801c0a6:	8921      	ldrh	r1, [r4, #8]
 801c0a8:	fbb5 f2f1 	udiv	r2, r5, r1
 801c0ac:	fb01 5212 	mls	r2, r1, r2, r5
 801c0b0:	b292      	uxth	r2, r2
 801c0b2:	6863      	ldr	r3, [r4, #4]
 801c0b4:	6820      	ldr	r0, [r4, #0]
 801c0b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801c0ba:	fb02 f303 	mul.w	r3, r2, r3
 801c0be:	3304      	adds	r3, #4
 801c0c0:	4418      	add	r0, r3
 801c0c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d1d1      	bne.n	801c06e <uxr_receive_reliable_message+0x22>
 801c0ca:	4641      	mov	r1, r8
 801c0cc:	463a      	mov	r2, r7
 801c0ce:	f001 ff38 	bl	801df42 <memcpy>
 801c0d2:	8921      	ldrh	r1, [r4, #8]
 801c0d4:	fbb5 f2f1 	udiv	r2, r5, r1
 801c0d8:	fb01 5212 	mls	r2, r1, r2, r5
 801c0dc:	b292      	uxth	r2, r2
 801c0de:	6863      	ldr	r3, [r4, #4]
 801c0e0:	fbb3 f3f1 	udiv	r3, r3, r1
 801c0e4:	fb02 f303 	mul.w	r3, r2, r3
 801c0e8:	6822      	ldr	r2, [r4, #0]
 801c0ea:	50d7      	str	r7, [r2, r3]
 801c0ec:	9a06      	ldr	r2, [sp, #24]
 801c0ee:	2301      	movs	r3, #1
 801c0f0:	7013      	strb	r3, [r2, #0]
 801c0f2:	2e00      	cmp	r6, #0
 801c0f4:	d0bb      	beq.n	801c06e <uxr_receive_reliable_message+0x22>
 801c0f6:	89a6      	ldrh	r6, [r4, #12]
 801c0f8:	2101      	movs	r1, #1
 801c0fa:	4630      	mov	r0, r6
 801c0fc:	f000 fc3c 	bl	801c978 <uxr_seq_num_add>
 801c100:	8921      	ldrh	r1, [r4, #8]
 801c102:	fbb0 f2f1 	udiv	r2, r0, r1
 801c106:	fb01 0212 	mls	r2, r1, r2, r0
 801c10a:	b292      	uxth	r2, r2
 801c10c:	6863      	ldr	r3, [r4, #4]
 801c10e:	fbb3 f3f1 	udiv	r3, r3, r1
 801c112:	4606      	mov	r6, r0
 801c114:	fb02 f303 	mul.w	r3, r2, r3
 801c118:	6820      	ldr	r0, [r4, #0]
 801c11a:	3304      	adds	r3, #4
 801c11c:	4418      	add	r0, r3
 801c11e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d0a3      	beq.n	801c06e <uxr_receive_reliable_message+0x22>
 801c126:	6923      	ldr	r3, [r4, #16]
 801c128:	4798      	blx	r3
 801c12a:	2802      	cmp	r0, #2
 801c12c:	d005      	beq.n	801c13a <uxr_receive_reliable_message+0xee>
 801c12e:	2801      	cmp	r0, #1
 801c130:	d0e2      	beq.n	801c0f8 <uxr_receive_reliable_message+0xac>
 801c132:	e79c      	b.n	801c06e <uxr_receive_reliable_message+0x22>
 801c134:	9b06      	ldr	r3, [sp, #24]
 801c136:	81a5      	strh	r5, [r4, #12]
 801c138:	701e      	strb	r6, [r3, #0]
 801c13a:	2601      	movs	r6, #1
 801c13c:	e798      	b.n	801c070 <uxr_receive_reliable_message+0x24>
 801c13e:	bf00      	nop

0801c140 <uxr_next_input_reliable_buffer_available>:
 801c140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c144:	4604      	mov	r4, r0
 801c146:	460f      	mov	r7, r1
 801c148:	8980      	ldrh	r0, [r0, #12]
 801c14a:	2101      	movs	r1, #1
 801c14c:	4690      	mov	r8, r2
 801c14e:	f000 fc13 	bl	801c978 <uxr_seq_num_add>
 801c152:	8921      	ldrh	r1, [r4, #8]
 801c154:	fbb0 f2f1 	udiv	r2, r0, r1
 801c158:	fb01 0212 	mls	r2, r1, r2, r0
 801c15c:	b292      	uxth	r2, r2
 801c15e:	6863      	ldr	r3, [r4, #4]
 801c160:	6826      	ldr	r6, [r4, #0]
 801c162:	fbb3 f3f1 	udiv	r3, r3, r1
 801c166:	fb02 f303 	mul.w	r3, r2, r3
 801c16a:	3304      	adds	r3, #4
 801c16c:	441e      	add	r6, r3
 801c16e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c172:	f1b9 0f00 	cmp.w	r9, #0
 801c176:	d023      	beq.n	801c1c0 <uxr_next_input_reliable_buffer_available+0x80>
 801c178:	6923      	ldr	r3, [r4, #16]
 801c17a:	4605      	mov	r5, r0
 801c17c:	4630      	mov	r0, r6
 801c17e:	4798      	blx	r3
 801c180:	4682      	mov	sl, r0
 801c182:	b300      	cbz	r0, 801c1c6 <uxr_next_input_reliable_buffer_available+0x86>
 801c184:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c188:	2101      	movs	r1, #1
 801c18a:	4650      	mov	r0, sl
 801c18c:	f000 fbf4 	bl	801c978 <uxr_seq_num_add>
 801c190:	8921      	ldrh	r1, [r4, #8]
 801c192:	fbb0 f2f1 	udiv	r2, r0, r1
 801c196:	4682      	mov	sl, r0
 801c198:	fb01 0212 	mls	r2, r1, r2, r0
 801c19c:	e9d4 0300 	ldrd	r0, r3, [r4]
 801c1a0:	b292      	uxth	r2, r2
 801c1a2:	fbb3 f3f1 	udiv	r3, r3, r1
 801c1a6:	fb02 f303 	mul.w	r3, r2, r3
 801c1aa:	3304      	adds	r3, #4
 801c1ac:	4418      	add	r0, r3
 801c1ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c1b2:	b12b      	cbz	r3, 801c1c0 <uxr_next_input_reliable_buffer_available+0x80>
 801c1b4:	6923      	ldr	r3, [r4, #16]
 801c1b6:	4798      	blx	r3
 801c1b8:	2802      	cmp	r0, #2
 801c1ba:	d01b      	beq.n	801c1f4 <uxr_next_input_reliable_buffer_available+0xb4>
 801c1bc:	2801      	cmp	r0, #1
 801c1be:	d0e3      	beq.n	801c188 <uxr_next_input_reliable_buffer_available+0x48>
 801c1c0:	2000      	movs	r0, #0
 801c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1c6:	464a      	mov	r2, r9
 801c1c8:	4631      	mov	r1, r6
 801c1ca:	4638      	mov	r0, r7
 801c1cc:	f7f2 f9a2 	bl	800e514 <ucdr_init_buffer>
 801c1d0:	8921      	ldrh	r1, [r4, #8]
 801c1d2:	fbb5 f2f1 	udiv	r2, r5, r1
 801c1d6:	fb01 5212 	mls	r2, r1, r2, r5
 801c1da:	b292      	uxth	r2, r2
 801c1dc:	6863      	ldr	r3, [r4, #4]
 801c1de:	fbb3 f3f1 	udiv	r3, r3, r1
 801c1e2:	fb02 f303 	mul.w	r3, r2, r3
 801c1e6:	6822      	ldr	r2, [r4, #0]
 801c1e8:	f842 a003 	str.w	sl, [r2, r3]
 801c1ec:	81a5      	strh	r5, [r4, #12]
 801c1ee:	2001      	movs	r0, #1
 801c1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1f4:	eb06 0108 	add.w	r1, r6, r8
 801c1f8:	8926      	ldrh	r6, [r4, #8]
 801c1fa:	fbb5 f0f6 	udiv	r0, r5, r6
 801c1fe:	fb06 5010 	mls	r0, r6, r0, r5
 801c202:	b280      	uxth	r0, r0
 801c204:	6863      	ldr	r3, [r4, #4]
 801c206:	fbb3 f3f6 	udiv	r3, r3, r6
 801c20a:	fb00 f303 	mul.w	r3, r0, r3
 801c20e:	6820      	ldr	r0, [r4, #0]
 801c210:	2500      	movs	r5, #0
 801c212:	50c5      	str	r5, [r0, r3]
 801c214:	eba9 0208 	sub.w	r2, r9, r8
 801c218:	4638      	mov	r0, r7
 801c21a:	f7f2 f97b 	bl	800e514 <ucdr_init_buffer>
 801c21e:	4903      	ldr	r1, [pc, #12]	@ (801c22c <uxr_next_input_reliable_buffer_available+0xec>)
 801c220:	4622      	mov	r2, r4
 801c222:	4638      	mov	r0, r7
 801c224:	f7f2 f94a 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801c228:	4655      	mov	r5, sl
 801c22a:	e7df      	b.n	801c1ec <uxr_next_input_reliable_buffer_available+0xac>
 801c22c:	0801bf49 	.word	0x0801bf49

0801c230 <uxr_process_heartbeat>:
 801c230:	b538      	push	{r3, r4, r5, lr}
 801c232:	4611      	mov	r1, r2
 801c234:	4604      	mov	r4, r0
 801c236:	89c0      	ldrh	r0, [r0, #14]
 801c238:	4615      	mov	r5, r2
 801c23a:	f000 fba5 	bl	801c988 <uxr_seq_num_cmp>
 801c23e:	2800      	cmp	r0, #0
 801c240:	bfb8      	it	lt
 801c242:	81e5      	strhlt	r5, [r4, #14]
 801c244:	bd38      	pop	{r3, r4, r5, pc}
 801c246:	bf00      	nop

0801c248 <uxr_compute_acknack>:
 801c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c24c:	8903      	ldrh	r3, [r0, #8]
 801c24e:	8985      	ldrh	r5, [r0, #12]
 801c250:	4604      	mov	r4, r0
 801c252:	460e      	mov	r6, r1
 801c254:	2b00      	cmp	r3, #0
 801c256:	d048      	beq.n	801c2ea <uxr_compute_acknack+0xa2>
 801c258:	4628      	mov	r0, r5
 801c25a:	2701      	movs	r7, #1
 801c25c:	e003      	b.n	801c266 <uxr_compute_acknack+0x1e>
 801c25e:	4567      	cmp	r7, ip
 801c260:	d243      	bcs.n	801c2ea <uxr_compute_acknack+0xa2>
 801c262:	89a0      	ldrh	r0, [r4, #12]
 801c264:	3701      	adds	r7, #1
 801c266:	b2b9      	uxth	r1, r7
 801c268:	f000 fb86 	bl	801c978 <uxr_seq_num_add>
 801c26c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c270:	fbb0 f2fc 	udiv	r2, r0, ip
 801c274:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c278:	fb0c 0212 	mls	r2, ip, r2, r0
 801c27c:	b292      	uxth	r2, r2
 801c27e:	fbb3 f3fc 	udiv	r3, r3, ip
 801c282:	fb02 f303 	mul.w	r3, r2, r3
 801c286:	58cb      	ldr	r3, [r1, r3]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d1e8      	bne.n	801c25e <uxr_compute_acknack+0x16>
 801c28c:	8030      	strh	r0, [r6, #0]
 801c28e:	2101      	movs	r1, #1
 801c290:	89e5      	ldrh	r5, [r4, #14]
 801c292:	f000 fb75 	bl	801c980 <uxr_seq_num_sub>
 801c296:	4601      	mov	r1, r0
 801c298:	4628      	mov	r0, r5
 801c29a:	f000 fb71 	bl	801c980 <uxr_seq_num_sub>
 801c29e:	4605      	mov	r5, r0
 801c2a0:	4607      	mov	r7, r0
 801c2a2:	b1f8      	cbz	r0, 801c2e4 <uxr_compute_acknack+0x9c>
 801c2a4:	f04f 0900 	mov.w	r9, #0
 801c2a8:	464d      	mov	r5, r9
 801c2aa:	f04f 0801 	mov.w	r8, #1
 801c2ae:	fa1f f189 	uxth.w	r1, r9
 801c2b2:	8830      	ldrh	r0, [r6, #0]
 801c2b4:	f000 fb60 	bl	801c978 <uxr_seq_num_add>
 801c2b8:	8921      	ldrh	r1, [r4, #8]
 801c2ba:	fbb0 f3f1 	udiv	r3, r0, r1
 801c2be:	fb03 0011 	mls	r0, r3, r1, r0
 801c2c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c2c6:	b280      	uxth	r0, r0
 801c2c8:	fbb3 f3f1 	udiv	r3, r3, r1
 801c2cc:	fb00 f303 	mul.w	r3, r0, r3
 801c2d0:	fa08 f109 	lsl.w	r1, r8, r9
 801c2d4:	58d3      	ldr	r3, [r2, r3]
 801c2d6:	f109 0901 	add.w	r9, r9, #1
 801c2da:	b90b      	cbnz	r3, 801c2e0 <uxr_compute_acknack+0x98>
 801c2dc:	4329      	orrs	r1, r5
 801c2de:	b28d      	uxth	r5, r1
 801c2e0:	454f      	cmp	r7, r9
 801c2e2:	d1e4      	bne.n	801c2ae <uxr_compute_acknack+0x66>
 801c2e4:	4628      	mov	r0, r5
 801c2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2ea:	4628      	mov	r0, r5
 801c2ec:	e7ce      	b.n	801c28c <uxr_compute_acknack+0x44>
 801c2ee:	bf00      	nop

0801c2f0 <uxr_init_output_best_effort_stream>:
 801c2f0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c2f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c2f8:	6001      	str	r1, [r0, #0]
 801c2fa:	7303      	strb	r3, [r0, #12]
 801c2fc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c300:	4770      	bx	lr
 801c302:	bf00      	nop

0801c304 <uxr_reset_output_best_effort_stream>:
 801c304:	7b02      	ldrb	r2, [r0, #12]
 801c306:	6042      	str	r2, [r0, #4]
 801c308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c30c:	81c3      	strh	r3, [r0, #14]
 801c30e:	4770      	bx	lr

0801c310 <uxr_prepare_best_effort_buffer_to_write>:
 801c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c312:	4604      	mov	r4, r0
 801c314:	b083      	sub	sp, #12
 801c316:	6840      	ldr	r0, [r0, #4]
 801c318:	460d      	mov	r5, r1
 801c31a:	4616      	mov	r6, r2
 801c31c:	f7fa fda0 	bl	8016e60 <uxr_submessage_padding>
 801c320:	6863      	ldr	r3, [r4, #4]
 801c322:	4418      	add	r0, r3
 801c324:	68a3      	ldr	r3, [r4, #8]
 801c326:	1942      	adds	r2, r0, r5
 801c328:	4293      	cmp	r3, r2
 801c32a:	bf2c      	ite	cs
 801c32c:	2701      	movcs	r7, #1
 801c32e:	2700      	movcc	r7, #0
 801c330:	d202      	bcs.n	801c338 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c332:	4638      	mov	r0, r7
 801c334:	b003      	add	sp, #12
 801c336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c338:	9000      	str	r0, [sp, #0]
 801c33a:	6821      	ldr	r1, [r4, #0]
 801c33c:	4630      	mov	r0, r6
 801c33e:	2300      	movs	r3, #0
 801c340:	f7f2 f8d6 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801c344:	6863      	ldr	r3, [r4, #4]
 801c346:	4638      	mov	r0, r7
 801c348:	442b      	add	r3, r5
 801c34a:	6063      	str	r3, [r4, #4]
 801c34c:	b003      	add	sp, #12
 801c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c350 <uxr_prepare_best_effort_buffer_to_send>:
 801c350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c354:	4604      	mov	r4, r0
 801c356:	461d      	mov	r5, r3
 801c358:	6840      	ldr	r0, [r0, #4]
 801c35a:	7b23      	ldrb	r3, [r4, #12]
 801c35c:	4298      	cmp	r0, r3
 801c35e:	bf8c      	ite	hi
 801c360:	2601      	movhi	r6, #1
 801c362:	2600      	movls	r6, #0
 801c364:	d802      	bhi.n	801c36c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c366:	4630      	mov	r0, r6
 801c368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c36c:	4688      	mov	r8, r1
 801c36e:	89e0      	ldrh	r0, [r4, #14]
 801c370:	2101      	movs	r1, #1
 801c372:	4617      	mov	r7, r2
 801c374:	f000 fb00 	bl	801c978 <uxr_seq_num_add>
 801c378:	6823      	ldr	r3, [r4, #0]
 801c37a:	81e0      	strh	r0, [r4, #14]
 801c37c:	8028      	strh	r0, [r5, #0]
 801c37e:	f8c8 3000 	str.w	r3, [r8]
 801c382:	6863      	ldr	r3, [r4, #4]
 801c384:	603b      	str	r3, [r7, #0]
 801c386:	7b23      	ldrb	r3, [r4, #12]
 801c388:	6063      	str	r3, [r4, #4]
 801c38a:	4630      	mov	r0, r6
 801c38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c390 <on_full_output_buffer>:
 801c390:	b538      	push	{r3, r4, r5, lr}
 801c392:	460c      	mov	r4, r1
 801c394:	6803      	ldr	r3, [r0, #0]
 801c396:	6809      	ldr	r1, [r1, #0]
 801c398:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c39c:	6862      	ldr	r2, [r4, #4]
 801c39e:	fbb2 f2fc 	udiv	r2, r2, ip
 801c3a2:	1a5b      	subs	r3, r3, r1
 801c3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 801c3a8:	3301      	adds	r3, #1
 801c3aa:	b29b      	uxth	r3, r3
 801c3ac:	fbb3 fefc 	udiv	lr, r3, ip
 801c3b0:	fb0c 331e 	mls	r3, ip, lr, r3
 801c3b4:	b29b      	uxth	r3, r3
 801c3b6:	fb02 f303 	mul.w	r3, r2, r3
 801c3ba:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801c3be:	58ca      	ldr	r2, [r1, r3]
 801c3c0:	4463      	add	r3, ip
 801c3c2:	eba2 020c 	sub.w	r2, r2, ip
 801c3c6:	3308      	adds	r3, #8
 801c3c8:	4605      	mov	r5, r0
 801c3ca:	4419      	add	r1, r3
 801c3cc:	3a04      	subs	r2, #4
 801c3ce:	6903      	ldr	r3, [r0, #16]
 801c3d0:	f7f2 f898 	bl	800e504 <ucdr_init_buffer_origin>
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	4903      	ldr	r1, [pc, #12]	@ (801c3e4 <on_full_output_buffer+0x54>)
 801c3d8:	4622      	mov	r2, r4
 801c3da:	f7f2 f86f 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801c3de:	2000      	movs	r0, #0
 801c3e0:	bd38      	pop	{r3, r4, r5, pc}
 801c3e2:	bf00      	nop
 801c3e4:	0801c391 	.word	0x0801c391

0801c3e8 <uxr_init_output_reliable_stream>:
 801c3e8:	b410      	push	{r4}
 801c3ea:	f89d c004 	ldrb.w	ip, [sp, #4]
 801c3ee:	8103      	strh	r3, [r0, #8]
 801c3f0:	e9c0 1200 	strd	r1, r2, [r0]
 801c3f4:	f880 c00c 	strb.w	ip, [r0, #12]
 801c3f8:	b1d3      	cbz	r3, 801c430 <uxr_init_output_reliable_stream+0x48>
 801c3fa:	f8c1 c000 	str.w	ip, [r1]
 801c3fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c402:	f1bc 0f01 	cmp.w	ip, #1
 801c406:	d913      	bls.n	801c430 <uxr_init_output_reliable_stream+0x48>
 801c408:	2301      	movs	r3, #1
 801c40a:	fbb3 f1fc 	udiv	r1, r3, ip
 801c40e:	fb0c 3111 	mls	r1, ip, r1, r3
 801c412:	b289      	uxth	r1, r1
 801c414:	6842      	ldr	r2, [r0, #4]
 801c416:	6804      	ldr	r4, [r0, #0]
 801c418:	fbb2 f2fc 	udiv	r2, r2, ip
 801c41c:	fb01 f202 	mul.w	r2, r1, r2
 801c420:	7b01      	ldrb	r1, [r0, #12]
 801c422:	50a1      	str	r1, [r4, r2]
 801c424:	3301      	adds	r3, #1
 801c426:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	459c      	cmp	ip, r3
 801c42e:	d8ec      	bhi.n	801c40a <uxr_init_output_reliable_stream+0x22>
 801c430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c434:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c438:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c43c:	4905      	ldr	r1, [pc, #20]	@ (801c454 <uxr_init_output_reliable_stream+0x6c>)
 801c43e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c442:	f8c0 100e 	str.w	r1, [r0, #14]
 801c446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c44a:	2300      	movs	r3, #0
 801c44c:	8242      	strh	r2, [r0, #18]
 801c44e:	8403      	strh	r3, [r0, #32]
 801c450:	4770      	bx	lr
 801c452:	bf00      	nop
 801c454:	ffff0000 	.word	0xffff0000

0801c458 <uxr_reset_output_reliable_stream>:
 801c458:	8901      	ldrh	r1, [r0, #8]
 801c45a:	b1b1      	cbz	r1, 801c48a <uxr_reset_output_reliable_stream+0x32>
 801c45c:	f04f 0c00 	mov.w	ip, #0
 801c460:	4663      	mov	r3, ip
 801c462:	fbb3 f2f1 	udiv	r2, r3, r1
 801c466:	fb01 3312 	mls	r3, r1, r2, r3
 801c46a:	b29b      	uxth	r3, r3
 801c46c:	6842      	ldr	r2, [r0, #4]
 801c46e:	fbb2 f2f1 	udiv	r2, r2, r1
 801c472:	6801      	ldr	r1, [r0, #0]
 801c474:	fb03 f202 	mul.w	r2, r3, r2
 801c478:	7b03      	ldrb	r3, [r0, #12]
 801c47a:	508b      	str	r3, [r1, r2]
 801c47c:	f10c 0c01 	add.w	ip, ip, #1
 801c480:	8901      	ldrh	r1, [r0, #8]
 801c482:	fa1f f38c 	uxth.w	r3, ip
 801c486:	4299      	cmp	r1, r3
 801c488:	d8eb      	bhi.n	801c462 <uxr_reset_output_reliable_stream+0xa>
 801c48a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c48e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c492:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c496:	4904      	ldr	r1, [pc, #16]	@ (801c4a8 <uxr_reset_output_reliable_stream+0x50>)
 801c498:	f8c0 100e 	str.w	r1, [r0, #14]
 801c49c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	8242      	strh	r2, [r0, #18]
 801c4a4:	8403      	strh	r3, [r0, #32]
 801c4a6:	4770      	bx	lr
 801c4a8:	ffff0000 	.word	0xffff0000

0801c4ac <uxr_prepare_reliable_buffer_to_write>:
 801c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4b0:	4604      	mov	r4, r0
 801c4b2:	b091      	sub	sp, #68	@ 0x44
 801c4b4:	8900      	ldrh	r0, [r0, #8]
 801c4b6:	89e7      	ldrh	r7, [r4, #14]
 801c4b8:	6823      	ldr	r3, [r4, #0]
 801c4ba:	9204      	str	r2, [sp, #16]
 801c4bc:	fbb7 f2f0 	udiv	r2, r7, r0
 801c4c0:	fb00 7212 	mls	r2, r0, r2, r7
 801c4c4:	b292      	uxth	r2, r2
 801c4c6:	6865      	ldr	r5, [r4, #4]
 801c4c8:	fbb5 f5f0 	udiv	r5, r5, r0
 801c4cc:	fb05 3202 	mla	r2, r5, r2, r3
 801c4d0:	3204      	adds	r2, #4
 801c4d2:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801c4d6:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801c4da:	9203      	str	r2, [sp, #12]
 801c4dc:	4688      	mov	r8, r1
 801c4de:	f1a5 0904 	sub.w	r9, r5, #4
 801c4e2:	2800      	cmp	r0, #0
 801c4e4:	f000 8143 	beq.w	801c76e <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801c4e8:	2100      	movs	r1, #0
 801c4ea:	460e      	mov	r6, r1
 801c4ec:	b28a      	uxth	r2, r1
 801c4ee:	fbb2 fcf0 	udiv	ip, r2, r0
 801c4f2:	fb00 221c 	mls	r2, r0, ip, r2
 801c4f6:	b292      	uxth	r2, r2
 801c4f8:	fb05 f202 	mul.w	r2, r5, r2
 801c4fc:	3101      	adds	r1, #1
 801c4fe:	589a      	ldr	r2, [r3, r2]
 801c500:	455a      	cmp	r2, fp
 801c502:	bf04      	itt	eq
 801c504:	3601      	addeq	r6, #1
 801c506:	b2b6      	uxtheq	r6, r6
 801c508:	4281      	cmp	r1, r0
 801c50a:	d1ef      	bne.n	801c4ec <uxr_prepare_reliable_buffer_to_write+0x40>
 801c50c:	4650      	mov	r0, sl
 801c50e:	2104      	movs	r1, #4
 801c510:	9605      	str	r6, [sp, #20]
 801c512:	f7f2 f803 	bl	800e51c <ucdr_alignment>
 801c516:	4482      	add	sl, r0
 801c518:	eb0a 0208 	add.w	r2, sl, r8
 801c51c:	454a      	cmp	r2, r9
 801c51e:	f240 80ca 	bls.w	801c6b6 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801c522:	7b22      	ldrb	r2, [r4, #12]
 801c524:	4442      	add	r2, r8
 801c526:	454a      	cmp	r2, r9
 801c528:	f240 80b2 	bls.w	801c690 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801c52c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801c530:	32fc      	adds	r2, #252	@ 0xfc
 801c532:	fa1f f389 	uxth.w	r3, r9
 801c536:	441a      	add	r2, r3
 801c538:	b292      	uxth	r2, r2
 801c53a:	fb06 fb02 	mul.w	fp, r6, r2
 801c53e:	45c3      	cmp	fp, r8
 801c540:	9205      	str	r2, [sp, #20]
 801c542:	9206      	str	r2, [sp, #24]
 801c544:	f0c0 80b3 	bcc.w	801c6ae <uxr_prepare_reliable_buffer_to_write+0x202>
 801c548:	f10a 0204 	add.w	r2, sl, #4
 801c54c:	454a      	cmp	r2, r9
 801c54e:	f080 80db 	bcs.w	801c708 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801c552:	f1a3 0b04 	sub.w	fp, r3, #4
 801c556:	ebab 0b0a 	sub.w	fp, fp, sl
 801c55a:	9b05      	ldr	r3, [sp, #20]
 801c55c:	fa1f fb8b 	uxth.w	fp, fp
 801c560:	eba8 080b 	sub.w	r8, r8, fp
 801c564:	fbb8 fcf3 	udiv	ip, r8, r3
 801c568:	fb03 831c 	mls	r3, r3, ip, r8
 801c56c:	fa1f fc8c 	uxth.w	ip, ip
 801c570:	2b00      	cmp	r3, #0
 801c572:	f040 80c1 	bne.w	801c6f8 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801c576:	45b4      	cmp	ip, r6
 801c578:	f200 8099 	bhi.w	801c6ae <uxr_prepare_reliable_buffer_to_write+0x202>
 801c57c:	f10d 0820 	add.w	r8, sp, #32
 801c580:	f1bc 0f00 	cmp.w	ip, #0
 801c584:	d040      	beq.n	801c608 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801c586:	f8cd a01c 	str.w	sl, [sp, #28]
 801c58a:	2600      	movs	r6, #0
 801c58c:	f8dd a014 	ldr.w	sl, [sp, #20]
 801c590:	9505      	str	r5, [sp, #20]
 801c592:	f10d 0820 	add.w	r8, sp, #32
 801c596:	4665      	mov	r5, ip
 801c598:	e000      	b.n	801c59c <uxr_prepare_reliable_buffer_to_write+0xf0>
 801c59a:	46d3      	mov	fp, sl
 801c59c:	8921      	ldrh	r1, [r4, #8]
 801c59e:	fbb7 f2f1 	udiv	r2, r7, r1
 801c5a2:	fb01 7212 	mls	r2, r1, r2, r7
 801c5a6:	b292      	uxth	r2, r2
 801c5a8:	6863      	ldr	r3, [r4, #4]
 801c5aa:	fbb3 f3f1 	udiv	r3, r3, r1
 801c5ae:	6821      	ldr	r1, [r4, #0]
 801c5b0:	fb02 f303 	mul.w	r3, r2, r3
 801c5b4:	3304      	adds	r3, #4
 801c5b6:	4419      	add	r1, r3
 801c5b8:	4640      	mov	r0, r8
 801c5ba:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801c5be:	9200      	str	r2, [sp, #0]
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	464a      	mov	r2, r9
 801c5c4:	f7f1 ff94 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801c5c8:	465a      	mov	r2, fp
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	210d      	movs	r1, #13
 801c5ce:	4640      	mov	r0, r8
 801c5d0:	f7fa fc06 	bl	8016de0 <uxr_buffer_submessage_header>
 801c5d4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c5d8:	fbb7 f2fc 	udiv	r2, r7, ip
 801c5dc:	fb0c 7212 	mls	r2, ip, r2, r7
 801c5e0:	b292      	uxth	r2, r2
 801c5e2:	6863      	ldr	r3, [r4, #4]
 801c5e4:	fbb3 f3fc 	udiv	r3, r3, ip
 801c5e8:	fb02 f303 	mul.w	r3, r2, r3
 801c5ec:	6822      	ldr	r2, [r4, #0]
 801c5ee:	4638      	mov	r0, r7
 801c5f0:	f842 9003 	str.w	r9, [r2, r3]
 801c5f4:	2101      	movs	r1, #1
 801c5f6:	f000 f9bf 	bl	801c978 <uxr_seq_num_add>
 801c5fa:	3601      	adds	r6, #1
 801c5fc:	42ae      	cmp	r6, r5
 801c5fe:	4607      	mov	r7, r0
 801c600:	d1cb      	bne.n	801c59a <uxr_prepare_reliable_buffer_to_write+0xee>
 801c602:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c606:	9d05      	ldr	r5, [sp, #20]
 801c608:	8920      	ldrh	r0, [r4, #8]
 801c60a:	fbb7 f1f0 	udiv	r1, r7, r0
 801c60e:	fb00 7111 	mls	r1, r0, r1, r7
 801c612:	b289      	uxth	r1, r1
 801c614:	6863      	ldr	r3, [r4, #4]
 801c616:	fbb3 f3f0 	udiv	r3, r3, r0
 801c61a:	fb01 f303 	mul.w	r3, r1, r3
 801c61e:	6821      	ldr	r1, [r4, #0]
 801c620:	3304      	adds	r3, #4
 801c622:	4419      	add	r1, r3
 801c624:	464a      	mov	r2, r9
 801c626:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801c62a:	9000      	str	r0, [sp, #0]
 801c62c:	2300      	movs	r3, #0
 801c62e:	4640      	mov	r0, r8
 801c630:	f7f1 ff5e 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801c634:	4640      	mov	r0, r8
 801c636:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c63a:	2302      	movs	r3, #2
 801c63c:	fa1f f288 	uxth.w	r2, r8
 801c640:	210d      	movs	r1, #13
 801c642:	f7fa fbcd 	bl	8016de0 <uxr_buffer_submessage_header>
 801c646:	8926      	ldrh	r6, [r4, #8]
 801c648:	9b03      	ldr	r3, [sp, #12]
 801c64a:	7b20      	ldrb	r0, [r4, #12]
 801c64c:	f1a5 0208 	sub.w	r2, r5, #8
 801c650:	f10a 0104 	add.w	r1, sl, #4
 801c654:	fbb7 f5f6 	udiv	r5, r7, r6
 801c658:	fb06 7515 	mls	r5, r6, r5, r7
 801c65c:	440b      	add	r3, r1
 801c65e:	b2ad      	uxth	r5, r5
 801c660:	4619      	mov	r1, r3
 801c662:	3004      	adds	r0, #4
 801c664:	6863      	ldr	r3, [r4, #4]
 801c666:	fbb3 f3f6 	udiv	r3, r3, r6
 801c66a:	fb05 f303 	mul.w	r3, r5, r3
 801c66e:	6825      	ldr	r5, [r4, #0]
 801c670:	4440      	add	r0, r8
 801c672:	50e8      	str	r0, [r5, r3]
 801c674:	9d04      	ldr	r5, [sp, #16]
 801c676:	eba2 020a 	sub.w	r2, r2, sl
 801c67a:	4628      	mov	r0, r5
 801c67c:	f7f1 ff4a 	bl	800e514 <ucdr_init_buffer>
 801c680:	493c      	ldr	r1, [pc, #240]	@ (801c774 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801c682:	4622      	mov	r2, r4
 801c684:	4628      	mov	r0, r5
 801c686:	f7f1 ff19 	bl	800e4bc <ucdr_set_on_full_buffer_callback>
 801c68a:	81e7      	strh	r7, [r4, #14]
 801c68c:	2001      	movs	r0, #1
 801c68e:	e00f      	b.n	801c6b0 <uxr_prepare_reliable_buffer_to_write+0x204>
 801c690:	2101      	movs	r1, #1
 801c692:	89e0      	ldrh	r0, [r4, #14]
 801c694:	f000 f970 	bl	801c978 <uxr_seq_num_add>
 801c698:	8921      	ldrh	r1, [r4, #8]
 801c69a:	4605      	mov	r5, r0
 801c69c:	8a60      	ldrh	r0, [r4, #18]
 801c69e:	f000 f96b 	bl	801c978 <uxr_seq_num_add>
 801c6a2:	4601      	mov	r1, r0
 801c6a4:	4628      	mov	r0, r5
 801c6a6:	f000 f96f 	bl	801c988 <uxr_seq_num_cmp>
 801c6aa:	2800      	cmp	r0, #0
 801c6ac:	dd45      	ble.n	801c73a <uxr_prepare_reliable_buffer_to_write+0x28e>
 801c6ae:	2000      	movs	r0, #0
 801c6b0:	b011      	add	sp, #68	@ 0x44
 801c6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6b6:	8921      	ldrh	r1, [r4, #8]
 801c6b8:	8a60      	ldrh	r0, [r4, #18]
 801c6ba:	9205      	str	r2, [sp, #20]
 801c6bc:	f000 f95c 	bl	801c978 <uxr_seq_num_add>
 801c6c0:	4601      	mov	r1, r0
 801c6c2:	4638      	mov	r0, r7
 801c6c4:	f000 f960 	bl	801c988 <uxr_seq_num_cmp>
 801c6c8:	2800      	cmp	r0, #0
 801c6ca:	9a05      	ldr	r2, [sp, #20]
 801c6cc:	dcef      	bgt.n	801c6ae <uxr_prepare_reliable_buffer_to_write+0x202>
 801c6ce:	8926      	ldrh	r6, [r4, #8]
 801c6d0:	fbb7 f5f6 	udiv	r5, r7, r6
 801c6d4:	fb06 7515 	mls	r5, r6, r5, r7
 801c6d8:	b2ad      	uxth	r5, r5
 801c6da:	6863      	ldr	r3, [r4, #4]
 801c6dc:	6824      	ldr	r4, [r4, #0]
 801c6de:	fbb3 f3f6 	udiv	r3, r3, r6
 801c6e2:	fb05 f303 	mul.w	r3, r5, r3
 801c6e6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801c6ea:	50e2      	str	r2, [r4, r3]
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	f8cd a000 	str.w	sl, [sp]
 801c6f2:	f7f1 fefd 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801c6f6:	e7c9      	b.n	801c68c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801c6f8:	f10c 0c01 	add.w	ip, ip, #1
 801c6fc:	fa1f fc8c 	uxth.w	ip, ip
 801c700:	45b4      	cmp	ip, r6
 801c702:	9306      	str	r3, [sp, #24]
 801c704:	d8d3      	bhi.n	801c6ae <uxr_prepare_reliable_buffer_to_write+0x202>
 801c706:	e739      	b.n	801c57c <uxr_prepare_reliable_buffer_to_write+0xd0>
 801c708:	4638      	mov	r0, r7
 801c70a:	2101      	movs	r1, #1
 801c70c:	9307      	str	r3, [sp, #28]
 801c70e:	f000 f933 	bl	801c978 <uxr_seq_num_add>
 801c712:	8921      	ldrh	r1, [r4, #8]
 801c714:	6862      	ldr	r2, [r4, #4]
 801c716:	4607      	mov	r7, r0
 801c718:	fbb0 f0f1 	udiv	r0, r0, r1
 801c71c:	fb01 7010 	mls	r0, r1, r0, r7
 801c720:	b280      	uxth	r0, r0
 801c722:	fbb2 f1f1 	udiv	r1, r2, r1
 801c726:	6822      	ldr	r2, [r4, #0]
 801c728:	fb00 f101 	mul.w	r1, r0, r1
 801c72c:	3104      	adds	r1, #4
 801c72e:	1853      	adds	r3, r2, r1
 801c730:	9303      	str	r3, [sp, #12]
 801c732:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801c736:	9b07      	ldr	r3, [sp, #28]
 801c738:	e70b      	b.n	801c552 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801c73a:	8921      	ldrh	r1, [r4, #8]
 801c73c:	fbb5 f2f1 	udiv	r2, r5, r1
 801c740:	fb01 5212 	mls	r2, r1, r2, r5
 801c744:	b292      	uxth	r2, r2
 801c746:	6863      	ldr	r3, [r4, #4]
 801c748:	fbb3 f3f1 	udiv	r3, r3, r1
 801c74c:	6821      	ldr	r1, [r4, #0]
 801c74e:	9804      	ldr	r0, [sp, #16]
 801c750:	fb02 f303 	mul.w	r3, r2, r3
 801c754:	3304      	adds	r3, #4
 801c756:	7b22      	ldrb	r2, [r4, #12]
 801c758:	4419      	add	r1, r3
 801c75a:	4442      	add	r2, r8
 801c75c:	f841 2c04 	str.w	r2, [r1, #-4]
 801c760:	7b23      	ldrb	r3, [r4, #12]
 801c762:	9300      	str	r3, [sp, #0]
 801c764:	2300      	movs	r3, #0
 801c766:	f7f1 fec3 	bl	800e4f0 <ucdr_init_buffer_origin_offset>
 801c76a:	81e5      	strh	r5, [r4, #14]
 801c76c:	e78e      	b.n	801c68c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801c76e:	4606      	mov	r6, r0
 801c770:	e6cc      	b.n	801c50c <uxr_prepare_reliable_buffer_to_write+0x60>
 801c772:	bf00      	nop
 801c774:	0801c391 	.word	0x0801c391

0801c778 <uxr_prepare_next_reliable_buffer_to_send>:
 801c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c77a:	4604      	mov	r4, r0
 801c77c:	460f      	mov	r7, r1
 801c77e:	8a00      	ldrh	r0, [r0, #16]
 801c780:	2101      	movs	r1, #1
 801c782:	4615      	mov	r5, r2
 801c784:	461e      	mov	r6, r3
 801c786:	f000 f8f7 	bl	801c978 <uxr_seq_num_add>
 801c78a:	8030      	strh	r0, [r6, #0]
 801c78c:	8922      	ldrh	r2, [r4, #8]
 801c78e:	fbb0 f3f2 	udiv	r3, r0, r2
 801c792:	fb02 0c13 	mls	ip, r2, r3, r0
 801c796:	fa1f fc8c 	uxth.w	ip, ip
 801c79a:	6863      	ldr	r3, [r4, #4]
 801c79c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c7a0:	fb0c fc03 	mul.w	ip, ip, r3
 801c7a4:	6823      	ldr	r3, [r4, #0]
 801c7a6:	89e1      	ldrh	r1, [r4, #14]
 801c7a8:	f10c 0c04 	add.w	ip, ip, #4
 801c7ac:	4463      	add	r3, ip
 801c7ae:	603b      	str	r3, [r7, #0]
 801c7b0:	6823      	ldr	r3, [r4, #0]
 801c7b2:	4463      	add	r3, ip
 801c7b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c7b8:	602b      	str	r3, [r5, #0]
 801c7ba:	f000 f8e5 	bl	801c988 <uxr_seq_num_cmp>
 801c7be:	2800      	cmp	r0, #0
 801c7c0:	dd01      	ble.n	801c7c6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801c7c2:	2000      	movs	r0, #0
 801c7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7c6:	7b23      	ldrb	r3, [r4, #12]
 801c7c8:	682a      	ldr	r2, [r5, #0]
 801c7ca:	429a      	cmp	r2, r3
 801c7cc:	d9f9      	bls.n	801c7c2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c7ce:	8a61      	ldrh	r1, [r4, #18]
 801c7d0:	8a20      	ldrh	r0, [r4, #16]
 801c7d2:	f000 f8d5 	bl	801c980 <uxr_seq_num_sub>
 801c7d6:	8923      	ldrh	r3, [r4, #8]
 801c7d8:	4283      	cmp	r3, r0
 801c7da:	d0f2      	beq.n	801c7c2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c7dc:	8830      	ldrh	r0, [r6, #0]
 801c7de:	89e3      	ldrh	r3, [r4, #14]
 801c7e0:	8220      	strh	r0, [r4, #16]
 801c7e2:	4298      	cmp	r0, r3
 801c7e4:	d001      	beq.n	801c7ea <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801c7e6:	2001      	movs	r0, #1
 801c7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7ea:	2101      	movs	r1, #1
 801c7ec:	f000 f8c4 	bl	801c978 <uxr_seq_num_add>
 801c7f0:	81e0      	strh	r0, [r4, #14]
 801c7f2:	e7f8      	b.n	801c7e6 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801c7f4 <uxr_update_output_stream_heartbeat_timestamp>:
 801c7f4:	b570      	push	{r4, r5, r6, lr}
 801c7f6:	8a01      	ldrh	r1, [r0, #16]
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	8a40      	ldrh	r0, [r0, #18]
 801c7fc:	4615      	mov	r5, r2
 801c7fe:	461e      	mov	r6, r3
 801c800:	f000 f8c2 	bl	801c988 <uxr_seq_num_cmp>
 801c804:	2800      	cmp	r0, #0
 801c806:	db07      	blt.n	801c818 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801c808:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c80c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801c810:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c814:	2000      	movs	r0, #0
 801c816:	bd70      	pop	{r4, r5, r6, pc}
 801c818:	f894 3020 	ldrb.w	r3, [r4, #32]
 801c81c:	b953      	cbnz	r3, 801c834 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801c81e:	2301      	movs	r3, #1
 801c820:	f884 3020 	strb.w	r3, [r4, #32]
 801c824:	3564      	adds	r5, #100	@ 0x64
 801c826:	f04f 0000 	mov.w	r0, #0
 801c82a:	f146 0600 	adc.w	r6, r6, #0
 801c82e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c832:	bd70      	pop	{r4, r5, r6, pc}
 801c834:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801c838:	428d      	cmp	r5, r1
 801c83a:	eb76 0202 	sbcs.w	r2, r6, r2
 801c83e:	dbf1      	blt.n	801c824 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801c840:	3301      	adds	r3, #1
 801c842:	3564      	adds	r5, #100	@ 0x64
 801c844:	f884 3020 	strb.w	r3, [r4, #32]
 801c848:	f04f 0001 	mov.w	r0, #1
 801c84c:	f146 0600 	adc.w	r6, r6, #0
 801c850:	e7ed      	b.n	801c82e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801c852:	bf00      	nop

0801c854 <uxr_begin_output_nack_buffer_it>:
 801c854:	8a40      	ldrh	r0, [r0, #18]
 801c856:	4770      	bx	lr

0801c858 <uxr_next_reliable_nack_buffer_to_send>:
 801c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c85c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801c860:	f1b8 0f00 	cmp.w	r8, #0
 801c864:	d104      	bne.n	801c870 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801c866:	f04f 0800 	mov.w	r8, #0
 801c86a:	4640      	mov	r0, r8
 801c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c870:	4604      	mov	r4, r0
 801c872:	460e      	mov	r6, r1
 801c874:	8818      	ldrh	r0, [r3, #0]
 801c876:	4617      	mov	r7, r2
 801c878:	461d      	mov	r5, r3
 801c87a:	e019      	b.n	801c8b0 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801c87c:	8921      	ldrh	r1, [r4, #8]
 801c87e:	8828      	ldrh	r0, [r5, #0]
 801c880:	fbb0 fcf1 	udiv	ip, r0, r1
 801c884:	e9d4 3200 	ldrd	r3, r2, [r4]
 801c888:	fb01 0c1c 	mls	ip, r1, ip, r0
 801c88c:	fa1f fc8c 	uxth.w	ip, ip
 801c890:	fbb2 f2f1 	udiv	r2, r2, r1
 801c894:	fb02 fc0c 	mul.w	ip, r2, ip
 801c898:	f10c 0c04 	add.w	ip, ip, #4
 801c89c:	4463      	add	r3, ip
 801c89e:	6033      	str	r3, [r6, #0]
 801c8a0:	6823      	ldr	r3, [r4, #0]
 801c8a2:	4463      	add	r3, ip
 801c8a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c8a8:	603b      	str	r3, [r7, #0]
 801c8aa:	7b22      	ldrb	r2, [r4, #12]
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d1dc      	bne.n	801c86a <uxr_next_reliable_nack_buffer_to_send+0x12>
 801c8b0:	2101      	movs	r1, #1
 801c8b2:	f000 f861 	bl	801c978 <uxr_seq_num_add>
 801c8b6:	8028      	strh	r0, [r5, #0]
 801c8b8:	8a21      	ldrh	r1, [r4, #16]
 801c8ba:	f000 f865 	bl	801c988 <uxr_seq_num_cmp>
 801c8be:	2800      	cmp	r0, #0
 801c8c0:	dddc      	ble.n	801c87c <uxr_next_reliable_nack_buffer_to_send+0x24>
 801c8c2:	2300      	movs	r3, #0
 801c8c4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801c8c8:	e7cd      	b.n	801c866 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801c8ca:	bf00      	nop

0801c8cc <uxr_process_acknack>:
 801c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8ce:	4604      	mov	r4, r0
 801c8d0:	460e      	mov	r6, r1
 801c8d2:	4610      	mov	r0, r2
 801c8d4:	2101      	movs	r1, #1
 801c8d6:	f000 f853 	bl	801c980 <uxr_seq_num_sub>
 801c8da:	8a61      	ldrh	r1, [r4, #18]
 801c8dc:	f000 f850 	bl	801c980 <uxr_seq_num_sub>
 801c8e0:	b1c0      	cbz	r0, 801c914 <uxr_process_acknack+0x48>
 801c8e2:	4605      	mov	r5, r0
 801c8e4:	2700      	movs	r7, #0
 801c8e6:	2101      	movs	r1, #1
 801c8e8:	8a60      	ldrh	r0, [r4, #18]
 801c8ea:	f000 f845 	bl	801c978 <uxr_seq_num_add>
 801c8ee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c8f2:	fbb0 f1fc 	udiv	r1, r0, ip
 801c8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c8fa:	fb0c 0111 	mls	r1, ip, r1, r0
 801c8fe:	b289      	uxth	r1, r1
 801c900:	3701      	adds	r7, #1
 801c902:	fbb3 f3fc 	udiv	r3, r3, ip
 801c906:	fb01 f303 	mul.w	r3, r1, r3
 801c90a:	42bd      	cmp	r5, r7
 801c90c:	7b21      	ldrb	r1, [r4, #12]
 801c90e:	8260      	strh	r0, [r4, #18]
 801c910:	50d1      	str	r1, [r2, r3]
 801c912:	d1e8      	bne.n	801c8e6 <uxr_process_acknack+0x1a>
 801c914:	3e00      	subs	r6, #0
 801c916:	f04f 0300 	mov.w	r3, #0
 801c91a:	bf18      	it	ne
 801c91c:	2601      	movne	r6, #1
 801c91e:	f884 3020 	strb.w	r3, [r4, #32]
 801c922:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801c926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c928 <uxr_is_output_up_to_date>:
 801c928:	8a01      	ldrh	r1, [r0, #16]
 801c92a:	8a40      	ldrh	r0, [r0, #18]
 801c92c:	b508      	push	{r3, lr}
 801c92e:	f000 f82b 	bl	801c988 <uxr_seq_num_cmp>
 801c932:	fab0 f080 	clz	r0, r0
 801c936:	0940      	lsrs	r0, r0, #5
 801c938:	bd08      	pop	{r3, pc}
 801c93a:	bf00      	nop

0801c93c <get_available_free_slots>:
 801c93c:	8901      	ldrh	r1, [r0, #8]
 801c93e:	b1c1      	cbz	r1, 801c972 <get_available_free_slots+0x36>
 801c940:	b530      	push	{r4, r5, lr}
 801c942:	2200      	movs	r2, #0
 801c944:	6843      	ldr	r3, [r0, #4]
 801c946:	6805      	ldr	r5, [r0, #0]
 801c948:	7b04      	ldrb	r4, [r0, #12]
 801c94a:	fbb3 fef1 	udiv	lr, r3, r1
 801c94e:	4610      	mov	r0, r2
 801c950:	b293      	uxth	r3, r2
 801c952:	fbb3 fcf1 	udiv	ip, r3, r1
 801c956:	fb01 331c 	mls	r3, r1, ip, r3
 801c95a:	b29b      	uxth	r3, r3
 801c95c:	fb0e f303 	mul.w	r3, lr, r3
 801c960:	3201      	adds	r2, #1
 801c962:	58eb      	ldr	r3, [r5, r3]
 801c964:	429c      	cmp	r4, r3
 801c966:	bf04      	itt	eq
 801c968:	3001      	addeq	r0, #1
 801c96a:	b280      	uxtheq	r0, r0
 801c96c:	4291      	cmp	r1, r2
 801c96e:	d1ef      	bne.n	801c950 <get_available_free_slots+0x14>
 801c970:	bd30      	pop	{r4, r5, pc}
 801c972:	4608      	mov	r0, r1
 801c974:	4770      	bx	lr
 801c976:	bf00      	nop

0801c978 <uxr_seq_num_add>:
 801c978:	4408      	add	r0, r1
 801c97a:	b280      	uxth	r0, r0
 801c97c:	4770      	bx	lr
 801c97e:	bf00      	nop

0801c980 <uxr_seq_num_sub>:
 801c980:	1a40      	subs	r0, r0, r1
 801c982:	b280      	uxth	r0, r0
 801c984:	4770      	bx	lr
 801c986:	bf00      	nop

0801c988 <uxr_seq_num_cmp>:
 801c988:	4288      	cmp	r0, r1
 801c98a:	d010      	beq.n	801c9ae <uxr_seq_num_cmp+0x26>
 801c98c:	d207      	bcs.n	801c99e <uxr_seq_num_cmp+0x16>
 801c98e:	1a09      	subs	r1, r1, r0
 801c990:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801c994:	bfb4      	ite	lt
 801c996:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801c99a:	2001      	movge	r0, #1
 801c99c:	4770      	bx	lr
 801c99e:	1a41      	subs	r1, r0, r1
 801c9a0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801c9a4:	bfcc      	ite	gt
 801c9a6:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801c9aa:	2001      	movle	r0, #1
 801c9ac:	4770      	bx	lr
 801c9ae:	2000      	movs	r0, #0
 801c9b0:	4770      	bx	lr
 801c9b2:	bf00      	nop

0801c9b4 <rcl_get_automatic_discovery_range>:
 801c9b4:	b530      	push	{r4, r5, lr}
 801c9b6:	b083      	sub	sp, #12
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	9301      	str	r3, [sp, #4]
 801c9bc:	b1c0      	cbz	r0, 801c9f0 <rcl_get_automatic_discovery_range+0x3c>
 801c9be:	4604      	mov	r4, r0
 801c9c0:	a901      	add	r1, sp, #4
 801c9c2:	4818      	ldr	r0, [pc, #96]	@ (801ca24 <rcl_get_automatic_discovery_range+0x70>)
 801c9c4:	f7f3 ff44 	bl	8010850 <rcutils_get_env>
 801c9c8:	b110      	cbz	r0, 801c9d0 <rcl_get_automatic_discovery_range+0x1c>
 801c9ca:	2001      	movs	r0, #1
 801c9cc:	b003      	add	sp, #12
 801c9ce:	bd30      	pop	{r4, r5, pc}
 801c9d0:	9d01      	ldr	r5, [sp, #4]
 801c9d2:	782b      	ldrb	r3, [r5, #0]
 801c9d4:	b923      	cbnz	r3, 801c9e0 <rcl_get_automatic_discovery_range+0x2c>
 801c9d6:	2303      	movs	r3, #3
 801c9d8:	7023      	strb	r3, [r4, #0]
 801c9da:	2000      	movs	r0, #0
 801c9dc:	b003      	add	sp, #12
 801c9de:	bd30      	pop	{r4, r5, pc}
 801c9e0:	4911      	ldr	r1, [pc, #68]	@ (801ca28 <rcl_get_automatic_discovery_range+0x74>)
 801c9e2:	4628      	mov	r0, r5
 801c9e4:	f7e3 fc1c 	bl	8000220 <strcmp>
 801c9e8:	b928      	cbnz	r0, 801c9f6 <rcl_get_automatic_discovery_range+0x42>
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	7023      	strb	r3, [r4, #0]
 801c9ee:	e7f4      	b.n	801c9da <rcl_get_automatic_discovery_range+0x26>
 801c9f0:	200b      	movs	r0, #11
 801c9f2:	b003      	add	sp, #12
 801c9f4:	bd30      	pop	{r4, r5, pc}
 801c9f6:	490d      	ldr	r1, [pc, #52]	@ (801ca2c <rcl_get_automatic_discovery_range+0x78>)
 801c9f8:	4628      	mov	r0, r5
 801c9fa:	f7e3 fc11 	bl	8000220 <strcmp>
 801c9fe:	b168      	cbz	r0, 801ca1c <rcl_get_automatic_discovery_range+0x68>
 801ca00:	490b      	ldr	r1, [pc, #44]	@ (801ca30 <rcl_get_automatic_discovery_range+0x7c>)
 801ca02:	4628      	mov	r0, r5
 801ca04:	f7e3 fc0c 	bl	8000220 <strcmp>
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d0e4      	beq.n	801c9d6 <rcl_get_automatic_discovery_range+0x22>
 801ca0c:	4909      	ldr	r1, [pc, #36]	@ (801ca34 <rcl_get_automatic_discovery_range+0x80>)
 801ca0e:	4628      	mov	r0, r5
 801ca10:	f7e3 fc06 	bl	8000220 <strcmp>
 801ca14:	b910      	cbnz	r0, 801ca1c <rcl_get_automatic_discovery_range+0x68>
 801ca16:	2304      	movs	r3, #4
 801ca18:	7023      	strb	r3, [r4, #0]
 801ca1a:	e7de      	b.n	801c9da <rcl_get_automatic_discovery_range+0x26>
 801ca1c:	2302      	movs	r3, #2
 801ca1e:	7023      	strb	r3, [r4, #0]
 801ca20:	e7db      	b.n	801c9da <rcl_get_automatic_discovery_range+0x26>
 801ca22:	bf00      	nop
 801ca24:	080213a0 	.word	0x080213a0
 801ca28:	080213c0 	.word	0x080213c0
 801ca2c:	080213c4 	.word	0x080213c4
 801ca30:	080213d0 	.word	0x080213d0
 801ca34:	080213d8 	.word	0x080213d8

0801ca38 <rcl_automatic_discovery_range_to_string>:
 801ca38:	2804      	cmp	r0, #4
 801ca3a:	bf9a      	itte	ls
 801ca3c:	4b02      	ldrls	r3, [pc, #8]	@ (801ca48 <rcl_automatic_discovery_range_to_string+0x10>)
 801ca3e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801ca42:	2000      	movhi	r0, #0
 801ca44:	4770      	bx	lr
 801ca46:	bf00      	nop
 801ca48:	080214c8 	.word	0x080214c8

0801ca4c <rcl_get_discovery_static_peers>:
 801ca4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca50:	b08c      	sub	sp, #48	@ 0x30
 801ca52:	2300      	movs	r3, #0
 801ca54:	9304      	str	r3, [sp, #16]
 801ca56:	2800      	cmp	r0, #0
 801ca58:	d04e      	beq.n	801caf8 <rcl_get_discovery_static_peers+0xac>
 801ca5a:	460d      	mov	r5, r1
 801ca5c:	2900      	cmp	r1, #0
 801ca5e:	d04b      	beq.n	801caf8 <rcl_get_discovery_static_peers+0xac>
 801ca60:	4604      	mov	r4, r0
 801ca62:	a904      	add	r1, sp, #16
 801ca64:	482d      	ldr	r0, [pc, #180]	@ (801cb1c <rcl_get_discovery_static_peers+0xd0>)
 801ca66:	f7f3 fef3 	bl	8010850 <rcutils_get_env>
 801ca6a:	b118      	cbz	r0, 801ca74 <rcl_get_discovery_static_peers+0x28>
 801ca6c:	2001      	movs	r0, #1
 801ca6e:	b00c      	add	sp, #48	@ 0x30
 801ca70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca74:	9b04      	ldr	r3, [sp, #16]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d0f8      	beq.n	801ca6c <rcl_get_discovery_static_peers+0x20>
 801ca7a:	af05      	add	r7, sp, #20
 801ca7c:	4638      	mov	r0, r7
 801ca7e:	f7fe f87b 	bl	801ab78 <rcutils_get_zero_initialized_string_array>
 801ca82:	f105 0308 	add.w	r3, r5, #8
 801ca86:	9703      	str	r7, [sp, #12]
 801ca88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ca8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ca90:	9804      	ldr	r0, [sp, #16]
 801ca92:	e895 000c 	ldmia.w	r5, {r2, r3}
 801ca96:	213b      	movs	r1, #59	@ 0x3b
 801ca98:	f000 fac6 	bl	801d028 <rcutils_split>
 801ca9c:	2800      	cmp	r0, #0
 801ca9e:	d1e5      	bne.n	801ca6c <rcl_get_discovery_static_peers+0x20>
 801caa0:	9905      	ldr	r1, [sp, #20]
 801caa2:	462a      	mov	r2, r5
 801caa4:	4620      	mov	r0, r4
 801caa6:	f7fe f9f1 	bl	801ae8c <rmw_discovery_options_init>
 801caaa:	4606      	mov	r6, r0
 801caac:	bb90      	cbnz	r0, 801cb14 <rcl_get_discovery_static_peers+0xc8>
 801caae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801cab2:	f1b9 0f00 	cmp.w	r9, #0
 801cab6:	d026      	beq.n	801cb06 <rcl_get_discovery_static_peers+0xba>
 801cab8:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cabc:	4680      	mov	r8, r0
 801cabe:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801cac2:	4628      	mov	r0, r5
 801cac4:	f7e3 fc0c 	bl	80002e0 <strlen>
 801cac8:	28ff      	cmp	r0, #255	@ 0xff
 801caca:	4629      	mov	r1, r5
 801cacc:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801cad0:	d816      	bhi.n	801cb00 <rcl_get_discovery_static_peers+0xb4>
 801cad2:	6860      	ldr	r0, [r4, #4]
 801cad4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cad8:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801cadc:	f001 f927 	bl	801dd2e <strncpy>
 801cae0:	6863      	ldr	r3, [r4, #4]
 801cae2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801cae6:	3601      	adds	r6, #1
 801cae8:	442b      	add	r3, r5
 801caea:	454e      	cmp	r6, r9
 801caec:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801caf0:	d209      	bcs.n	801cb06 <rcl_get_discovery_static_peers+0xba>
 801caf2:	f8dd a018 	ldr.w	sl, [sp, #24]
 801caf6:	e7e2      	b.n	801cabe <rcl_get_discovery_static_peers+0x72>
 801caf8:	200b      	movs	r0, #11
 801cafa:	b00c      	add	sp, #48	@ 0x30
 801cafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb00:	3601      	adds	r6, #1
 801cb02:	454e      	cmp	r6, r9
 801cb04:	d3db      	bcc.n	801cabe <rcl_get_discovery_static_peers+0x72>
 801cb06:	4638      	mov	r0, r7
 801cb08:	f7fe f876 	bl	801abf8 <rcutils_string_array_fini>
 801cb0c:	3800      	subs	r0, #0
 801cb0e:	bf18      	it	ne
 801cb10:	2001      	movne	r0, #1
 801cb12:	e7ac      	b.n	801ca6e <rcl_get_discovery_static_peers+0x22>
 801cb14:	f7fb fca2 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 801cb18:	e7a9      	b.n	801ca6e <rcl_get_discovery_static_peers+0x22>
 801cb1a:	bf00      	nop
 801cb1c:	080213e8 	.word	0x080213e8

0801cb20 <rcl_get_default_domain_id>:
 801cb20:	b530      	push	{r4, r5, lr}
 801cb22:	b083      	sub	sp, #12
 801cb24:	2300      	movs	r3, #0
 801cb26:	9300      	str	r3, [sp, #0]
 801cb28:	b1f0      	cbz	r0, 801cb68 <rcl_get_default_domain_id+0x48>
 801cb2a:	4604      	mov	r4, r0
 801cb2c:	4669      	mov	r1, sp
 801cb2e:	4812      	ldr	r0, [pc, #72]	@ (801cb78 <rcl_get_default_domain_id+0x58>)
 801cb30:	f7f3 fe8e 	bl	8010850 <rcutils_get_env>
 801cb34:	4602      	mov	r2, r0
 801cb36:	b108      	cbz	r0, 801cb3c <rcl_get_default_domain_id+0x1c>
 801cb38:	2001      	movs	r0, #1
 801cb3a:	e004      	b.n	801cb46 <rcl_get_default_domain_id+0x26>
 801cb3c:	9800      	ldr	r0, [sp, #0]
 801cb3e:	b108      	cbz	r0, 801cb44 <rcl_get_default_domain_id+0x24>
 801cb40:	7803      	ldrb	r3, [r0, #0]
 801cb42:	b913      	cbnz	r3, 801cb4a <rcl_get_default_domain_id+0x2a>
 801cb44:	2000      	movs	r0, #0
 801cb46:	b003      	add	sp, #12
 801cb48:	bd30      	pop	{r4, r5, pc}
 801cb4a:	a901      	add	r1, sp, #4
 801cb4c:	9201      	str	r2, [sp, #4]
 801cb4e:	f000 fdc3 	bl	801d6d8 <strtoul>
 801cb52:	4605      	mov	r5, r0
 801cb54:	b158      	cbz	r0, 801cb6e <rcl_get_default_domain_id+0x4e>
 801cb56:	1c43      	adds	r3, r0, #1
 801cb58:	d104      	bne.n	801cb64 <rcl_get_default_domain_id+0x44>
 801cb5a:	f001 f9bd 	bl	801ded8 <__errno>
 801cb5e:	6803      	ldr	r3, [r0, #0]
 801cb60:	2b22      	cmp	r3, #34	@ 0x22
 801cb62:	d0e9      	beq.n	801cb38 <rcl_get_default_domain_id+0x18>
 801cb64:	6025      	str	r5, [r4, #0]
 801cb66:	e7ed      	b.n	801cb44 <rcl_get_default_domain_id+0x24>
 801cb68:	200b      	movs	r0, #11
 801cb6a:	b003      	add	sp, #12
 801cb6c:	bd30      	pop	{r4, r5, pc}
 801cb6e:	9b01      	ldr	r3, [sp, #4]
 801cb70:	781b      	ldrb	r3, [r3, #0]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d0f6      	beq.n	801cb64 <rcl_get_default_domain_id+0x44>
 801cb76:	e7df      	b.n	801cb38 <rcl_get_default_domain_id+0x18>
 801cb78:	080214dc 	.word	0x080214dc

0801cb7c <rcl_expand_topic_name>:
 801cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb80:	b08b      	sub	sp, #44	@ 0x2c
 801cb82:	9306      	str	r3, [sp, #24]
 801cb84:	2800      	cmp	r0, #0
 801cb86:	f000 80ad 	beq.w	801cce4 <rcl_expand_topic_name+0x168>
 801cb8a:	460e      	mov	r6, r1
 801cb8c:	2900      	cmp	r1, #0
 801cb8e:	f000 80a9 	beq.w	801cce4 <rcl_expand_topic_name+0x168>
 801cb92:	4617      	mov	r7, r2
 801cb94:	2a00      	cmp	r2, #0
 801cb96:	f000 80a5 	beq.w	801cce4 <rcl_expand_topic_name+0x168>
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	f000 80a2 	beq.w	801cce4 <rcl_expand_topic_name+0x168>
 801cba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	f000 809e 	beq.w	801cce4 <rcl_expand_topic_name+0x168>
 801cba8:	2200      	movs	r2, #0
 801cbaa:	a909      	add	r1, sp, #36	@ 0x24
 801cbac:	4680      	mov	r8, r0
 801cbae:	f000 f949 	bl	801ce44 <rcl_validate_topic_name>
 801cbb2:	4605      	mov	r5, r0
 801cbb4:	2800      	cmp	r0, #0
 801cbb6:	f040 8096 	bne.w	801cce6 <rcl_expand_topic_name+0x16a>
 801cbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	f040 809a 	bne.w	801ccf6 <rcl_expand_topic_name+0x17a>
 801cbc2:	4602      	mov	r2, r0
 801cbc4:	a909      	add	r1, sp, #36	@ 0x24
 801cbc6:	4630      	mov	r0, r6
 801cbc8:	f7f4 f916 	bl	8010df8 <rmw_validate_node_name>
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	f040 808e 	bne.w	801ccee <rcl_expand_topic_name+0x172>
 801cbd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cbd4:	2a00      	cmp	r2, #0
 801cbd6:	f040 8093 	bne.w	801cd00 <rcl_expand_topic_name+0x184>
 801cbda:	a909      	add	r1, sp, #36	@ 0x24
 801cbdc:	4638      	mov	r0, r7
 801cbde:	f7f4 f8ed 	bl	8010dbc <rmw_validate_namespace>
 801cbe2:	2800      	cmp	r0, #0
 801cbe4:	f040 8083 	bne.w	801ccee <rcl_expand_topic_name+0x172>
 801cbe8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801cbea:	2d00      	cmp	r5, #0
 801cbec:	f040 80f4 	bne.w	801cdd8 <rcl_expand_topic_name+0x25c>
 801cbf0:	217b      	movs	r1, #123	@ 0x7b
 801cbf2:	4640      	mov	r0, r8
 801cbf4:	f001 f87c 	bl	801dcf0 <strchr>
 801cbf8:	f898 3000 	ldrb.w	r3, [r8]
 801cbfc:	2b2f      	cmp	r3, #47	@ 0x2f
 801cbfe:	4604      	mov	r4, r0
 801cc00:	f000 809f 	beq.w	801cd42 <rcl_expand_topic_name+0x1c6>
 801cc04:	2b7e      	cmp	r3, #126	@ 0x7e
 801cc06:	f040 80e9 	bne.w	801cddc <rcl_expand_topic_name+0x260>
 801cc0a:	4638      	mov	r0, r7
 801cc0c:	f7e3 fb68 	bl	80002e0 <strlen>
 801cc10:	4a82      	ldr	r2, [pc, #520]	@ (801ce1c <rcl_expand_topic_name+0x2a0>)
 801cc12:	4b83      	ldr	r3, [pc, #524]	@ (801ce20 <rcl_expand_topic_name+0x2a4>)
 801cc14:	2801      	cmp	r0, #1
 801cc16:	bf08      	it	eq
 801cc18:	4613      	moveq	r3, r2
 801cc1a:	9302      	str	r3, [sp, #8]
 801cc1c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cc1e:	9300      	str	r3, [sp, #0]
 801cc20:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801cc24:	f108 0301 	add.w	r3, r8, #1
 801cc28:	9305      	str	r3, [sp, #20]
 801cc2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801cc2e:	9301      	str	r3, [sp, #4]
 801cc30:	ab14      	add	r3, sp, #80	@ 0x50
 801cc32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cc34:	f7f3 fe58 	bl	80108e8 <rcutils_format_string_limit>
 801cc38:	4682      	mov	sl, r0
 801cc3a:	2800      	cmp	r0, #0
 801cc3c:	f000 80d1 	beq.w	801cde2 <rcl_expand_topic_name+0x266>
 801cc40:	2c00      	cmp	r4, #0
 801cc42:	f000 8085 	beq.w	801cd50 <rcl_expand_topic_name+0x1d4>
 801cc46:	217b      	movs	r1, #123	@ 0x7b
 801cc48:	f001 f852 	bl	801dcf0 <strchr>
 801cc4c:	46d1      	mov	r9, sl
 801cc4e:	4604      	mov	r4, r0
 801cc50:	9507      	str	r5, [sp, #28]
 801cc52:	464d      	mov	r5, r9
 801cc54:	2c00      	cmp	r4, #0
 801cc56:	f000 80a0 	beq.w	801cd9a <rcl_expand_topic_name+0x21e>
 801cc5a:	217d      	movs	r1, #125	@ 0x7d
 801cc5c:	4628      	mov	r0, r5
 801cc5e:	f001 f847 	bl	801dcf0 <strchr>
 801cc62:	eba0 0904 	sub.w	r9, r0, r4
 801cc66:	f109 0b01 	add.w	fp, r9, #1
 801cc6a:	486e      	ldr	r0, [pc, #440]	@ (801ce24 <rcl_expand_topic_name+0x2a8>)
 801cc6c:	465a      	mov	r2, fp
 801cc6e:	4621      	mov	r1, r4
 801cc70:	f001 f84b 	bl	801dd0a <strncmp>
 801cc74:	2800      	cmp	r0, #0
 801cc76:	d069      	beq.n	801cd4c <rcl_expand_topic_name+0x1d0>
 801cc78:	486b      	ldr	r0, [pc, #428]	@ (801ce28 <rcl_expand_topic_name+0x2ac>)
 801cc7a:	465a      	mov	r2, fp
 801cc7c:	4621      	mov	r1, r4
 801cc7e:	f001 f844 	bl	801dd0a <strncmp>
 801cc82:	b130      	cbz	r0, 801cc92 <rcl_expand_topic_name+0x116>
 801cc84:	4869      	ldr	r0, [pc, #420]	@ (801ce2c <rcl_expand_topic_name+0x2b0>)
 801cc86:	465a      	mov	r2, fp
 801cc88:	4621      	mov	r1, r4
 801cc8a:	f001 f83e 	bl	801dd0a <strncmp>
 801cc8e:	2800      	cmp	r0, #0
 801cc90:	d138      	bne.n	801cd04 <rcl_expand_topic_name+0x188>
 801cc92:	46b9      	mov	r9, r7
 801cc94:	ab16      	add	r3, sp, #88	@ 0x58
 801cc96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cc9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801cc9e:	ab14      	add	r3, sp, #80	@ 0x50
 801cca0:	4620      	mov	r0, r4
 801cca2:	cb0c      	ldmia	r3, {r2, r3}
 801cca4:	4659      	mov	r1, fp
 801cca6:	f7f3 ff73 	bl	8010b90 <rcutils_strndup>
 801ccaa:	4604      	mov	r4, r0
 801ccac:	2800      	cmp	r0, #0
 801ccae:	f000 809d 	beq.w	801cdec <rcl_expand_topic_name+0x270>
 801ccb2:	464a      	mov	r2, r9
 801ccb4:	4628      	mov	r0, r5
 801ccb6:	ab14      	add	r3, sp, #80	@ 0x50
 801ccb8:	4621      	mov	r1, r4
 801ccba:	f7f3 fe4f 	bl	801095c <rcutils_repl_str>
 801ccbe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ccc0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ccc2:	4605      	mov	r5, r0
 801ccc4:	4620      	mov	r0, r4
 801ccc6:	4798      	blx	r3
 801ccc8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ccca:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cccc:	4650      	mov	r0, sl
 801ccce:	4798      	blx	r3
 801ccd0:	2d00      	cmp	r5, #0
 801ccd2:	f000 8086 	beq.w	801cde2 <rcl_expand_topic_name+0x266>
 801ccd6:	217b      	movs	r1, #123	@ 0x7b
 801ccd8:	4628      	mov	r0, r5
 801ccda:	f001 f809 	bl	801dcf0 <strchr>
 801ccde:	46aa      	mov	sl, r5
 801cce0:	4604      	mov	r4, r0
 801cce2:	e7b7      	b.n	801cc54 <rcl_expand_topic_name+0xd8>
 801cce4:	250b      	movs	r5, #11
 801cce6:	4628      	mov	r0, r5
 801cce8:	b00b      	add	sp, #44	@ 0x2c
 801ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccee:	f7fb fbb5 	bl	801845c <rcl_convert_rmw_ret_to_rcl_ret>
 801ccf2:	4605      	mov	r5, r0
 801ccf4:	e7f7      	b.n	801cce6 <rcl_expand_topic_name+0x16a>
 801ccf6:	2567      	movs	r5, #103	@ 0x67
 801ccf8:	4628      	mov	r0, r5
 801ccfa:	b00b      	add	sp, #44	@ 0x2c
 801ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd00:	25c9      	movs	r5, #201	@ 0xc9
 801cd02:	e7f0      	b.n	801cce6 <rcl_expand_topic_name+0x16a>
 801cd04:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801cd08:	9806      	ldr	r0, [sp, #24]
 801cd0a:	1c61      	adds	r1, r4, #1
 801cd0c:	f7fe f88c 	bl	801ae28 <rcutils_string_map_getn>
 801cd10:	4681      	mov	r9, r0
 801cd12:	2800      	cmp	r0, #0
 801cd14:	d1be      	bne.n	801cc94 <rcl_expand_topic_name+0x118>
 801cd16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cd18:	ab16      	add	r3, sp, #88	@ 0x58
 801cd1a:	6010      	str	r0, [r2, #0]
 801cd1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cd20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801cd24:	ab14      	add	r3, sp, #80	@ 0x50
 801cd26:	cb0c      	ldmia	r3, {r2, r3}
 801cd28:	4659      	mov	r1, fp
 801cd2a:	4620      	mov	r0, r4
 801cd2c:	f7f3 ff30 	bl	8010b90 <rcutils_strndup>
 801cd30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cd34:	4798      	blx	r3
 801cd36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd38:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cd3a:	4650      	mov	r0, sl
 801cd3c:	4798      	blx	r3
 801cd3e:	2569      	movs	r5, #105	@ 0x69
 801cd40:	e7d1      	b.n	801cce6 <rcl_expand_topic_name+0x16a>
 801cd42:	2800      	cmp	r0, #0
 801cd44:	d059      	beq.n	801cdfa <rcl_expand_topic_name+0x27e>
 801cd46:	46c1      	mov	r9, r8
 801cd48:	46aa      	mov	sl, r5
 801cd4a:	e781      	b.n	801cc50 <rcl_expand_topic_name+0xd4>
 801cd4c:	46b1      	mov	r9, r6
 801cd4e:	e7a1      	b.n	801cc94 <rcl_expand_topic_name+0x118>
 801cd50:	f89a 3000 	ldrb.w	r3, [sl]
 801cd54:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd56:	d01c      	beq.n	801cd92 <rcl_expand_topic_name+0x216>
 801cd58:	4638      	mov	r0, r7
 801cd5a:	f7e3 fac1 	bl	80002e0 <strlen>
 801cd5e:	4a34      	ldr	r2, [pc, #208]	@ (801ce30 <rcl_expand_topic_name+0x2b4>)
 801cd60:	4b34      	ldr	r3, [pc, #208]	@ (801ce34 <rcl_expand_topic_name+0x2b8>)
 801cd62:	f8cd a010 	str.w	sl, [sp, #16]
 801cd66:	2801      	cmp	r0, #1
 801cd68:	bf18      	it	ne
 801cd6a:	4613      	movne	r3, r2
 801cd6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801cd70:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801cd74:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cd76:	9703      	str	r7, [sp, #12]
 801cd78:	9200      	str	r2, [sp, #0]
 801cd7a:	ab14      	add	r3, sp, #80	@ 0x50
 801cd7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cd7e:	f7f3 fdb3 	bl	80108e8 <rcutils_format_string_limit>
 801cd82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd84:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cd86:	4604      	mov	r4, r0
 801cd88:	4650      	mov	r0, sl
 801cd8a:	4798      	blx	r3
 801cd8c:	46a2      	mov	sl, r4
 801cd8e:	4653      	mov	r3, sl
 801cd90:	b33b      	cbz	r3, 801cde2 <rcl_expand_topic_name+0x266>
 801cd92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cd94:	f8c3 a000 	str.w	sl, [r3]
 801cd98:	e7a5      	b.n	801cce6 <rcl_expand_topic_name+0x16a>
 801cd9a:	4653      	mov	r3, sl
 801cd9c:	9d07      	ldr	r5, [sp, #28]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d1d6      	bne.n	801cd50 <rcl_expand_topic_name+0x1d4>
 801cda2:	f898 3000 	ldrb.w	r3, [r8]
 801cda6:	2b2f      	cmp	r3, #47	@ 0x2f
 801cda8:	d0f3      	beq.n	801cd92 <rcl_expand_topic_name+0x216>
 801cdaa:	4638      	mov	r0, r7
 801cdac:	f7e3 fa98 	bl	80002e0 <strlen>
 801cdb0:	4a1f      	ldr	r2, [pc, #124]	@ (801ce30 <rcl_expand_topic_name+0x2b4>)
 801cdb2:	4b20      	ldr	r3, [pc, #128]	@ (801ce34 <rcl_expand_topic_name+0x2b8>)
 801cdb4:	f8cd 8010 	str.w	r8, [sp, #16]
 801cdb8:	2801      	cmp	r0, #1
 801cdba:	bf18      	it	ne
 801cdbc:	4613      	movne	r3, r2
 801cdbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801cdc2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801cdc6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cdc8:	9703      	str	r7, [sp, #12]
 801cdca:	9200      	str	r2, [sp, #0]
 801cdcc:	ab14      	add	r3, sp, #80	@ 0x50
 801cdce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cdd0:	f7f3 fd8a 	bl	80108e8 <rcutils_format_string_limit>
 801cdd4:	4682      	mov	sl, r0
 801cdd6:	e7da      	b.n	801cd8e <rcl_expand_topic_name+0x212>
 801cdd8:	25ca      	movs	r5, #202	@ 0xca
 801cdda:	e784      	b.n	801cce6 <rcl_expand_topic_name+0x16a>
 801cddc:	2800      	cmp	r0, #0
 801cdde:	d1b2      	bne.n	801cd46 <rcl_expand_topic_name+0x1ca>
 801cde0:	e7e3      	b.n	801cdaa <rcl_expand_topic_name+0x22e>
 801cde2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cde4:	2300      	movs	r3, #0
 801cde6:	6013      	str	r3, [r2, #0]
 801cde8:	250a      	movs	r5, #10
 801cdea:	e77c      	b.n	801cce6 <rcl_expand_topic_name+0x16a>
 801cdec:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801cdf0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cdf2:	6014      	str	r4, [r2, #0]
 801cdf4:	4650      	mov	r0, sl
 801cdf6:	4798      	blx	r3
 801cdf8:	e7f6      	b.n	801cde8 <rcl_expand_topic_name+0x26c>
 801cdfa:	ab17      	add	r3, sp, #92	@ 0x5c
 801cdfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ce00:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ce04:	ab14      	add	r3, sp, #80	@ 0x50
 801ce06:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ce08:	4640      	mov	r0, r8
 801ce0a:	f7f3 fe8b 	bl	8010b24 <rcutils_strdup>
 801ce0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ce10:	6018      	str	r0, [r3, #0]
 801ce12:	2800      	cmp	r0, #0
 801ce14:	f47f af67 	bne.w	801cce6 <rcl_expand_topic_name+0x16a>
 801ce18:	e7e6      	b.n	801cde8 <rcl_expand_topic_name+0x26c>
 801ce1a:	bf00      	nop
 801ce1c:	08020a74 	.word	0x08020a74
 801ce20:	080214ec 	.word	0x080214ec
 801ce24:	080214f4 	.word	0x080214f4
 801ce28:	080214fc 	.word	0x080214fc
 801ce2c:	08021504 	.word	0x08021504
 801ce30:	080204ec 	.word	0x080204ec
 801ce34:	080204e4 	.word	0x080204e4

0801ce38 <rcl_get_default_topic_name_substitutions>:
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	bf0c      	ite	eq
 801ce3c:	200b      	moveq	r0, #11
 801ce3e:	2000      	movne	r0, #0
 801ce40:	4770      	bx	lr
 801ce42:	bf00      	nop

0801ce44 <rcl_validate_topic_name>:
 801ce44:	2800      	cmp	r0, #0
 801ce46:	d06b      	beq.n	801cf20 <rcl_validate_topic_name+0xdc>
 801ce48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce4c:	460d      	mov	r5, r1
 801ce4e:	2900      	cmp	r1, #0
 801ce50:	d06d      	beq.n	801cf2e <rcl_validate_topic_name+0xea>
 801ce52:	4616      	mov	r6, r2
 801ce54:	4604      	mov	r4, r0
 801ce56:	f7e3 fa43 	bl	80002e0 <strlen>
 801ce5a:	b190      	cbz	r0, 801ce82 <rcl_validate_topic_name+0x3e>
 801ce5c:	7821      	ldrb	r1, [r4, #0]
 801ce5e:	4a71      	ldr	r2, [pc, #452]	@ (801d024 <rcl_validate_topic_name+0x1e0>)
 801ce60:	5c53      	ldrb	r3, [r2, r1]
 801ce62:	f013 0304 	ands.w	r3, r3, #4
 801ce66:	d15d      	bne.n	801cf24 <rcl_validate_topic_name+0xe0>
 801ce68:	1e47      	subs	r7, r0, #1
 801ce6a:	f814 c007 	ldrb.w	ip, [r4, r7]
 801ce6e:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801ce72:	d10d      	bne.n	801ce90 <rcl_validate_topic_name+0x4c>
 801ce74:	2302      	movs	r3, #2
 801ce76:	602b      	str	r3, [r5, #0]
 801ce78:	b146      	cbz	r6, 801ce8c <rcl_validate_topic_name+0x48>
 801ce7a:	6037      	str	r7, [r6, #0]
 801ce7c:	2000      	movs	r0, #0
 801ce7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce82:	2301      	movs	r3, #1
 801ce84:	602b      	str	r3, [r5, #0]
 801ce86:	b10e      	cbz	r6, 801ce8c <rcl_validate_topic_name+0x48>
 801ce88:	2300      	movs	r3, #0
 801ce8a:	6033      	str	r3, [r6, #0]
 801ce8c:	2000      	movs	r0, #0
 801ce8e:	e7f6      	b.n	801ce7e <rcl_validate_topic_name+0x3a>
 801ce90:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801ce94:	469a      	mov	sl, r3
 801ce96:	469e      	mov	lr, r3
 801ce98:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801ce9c:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801cea0:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801cea4:	d85b      	bhi.n	801cf5e <rcl_validate_topic_name+0x11a>
 801cea6:	e8df f00c 	tbb	[pc, ip]
 801ceaa:	4463      	.short	0x4463
 801ceac:	44444444 	.word	0x44444444
 801ceb0:	44444444 	.word	0x44444444
 801ceb4:	5a5a5a44 	.word	0x5a5a5a44
 801ceb8:	5a5a5a5a 	.word	0x5a5a5a5a
 801cebc:	44444444 	.word	0x44444444
 801cec0:	44444444 	.word	0x44444444
 801cec4:	44444444 	.word	0x44444444
 801cec8:	44444444 	.word	0x44444444
 801cecc:	44444444 	.word	0x44444444
 801ced0:	44444444 	.word	0x44444444
 801ced4:	5a5a4444 	.word	0x5a5a4444
 801ced8:	5a2e5a5a 	.word	0x5a2e5a5a
 801cedc:	44444444 	.word	0x44444444
 801cee0:	44444444 	.word	0x44444444
 801cee4:	44444444 	.word	0x44444444
 801cee8:	44444444 	.word	0x44444444
 801ceec:	44444444 	.word	0x44444444
 801cef0:	44444444 	.word	0x44444444
 801cef4:	5a284444 	.word	0x5a284444
 801cef8:	6b73      	.short	0x6b73
 801cefa:	f1ba 0f00 	cmp.w	sl, #0
 801cefe:	d13a      	bne.n	801cf76 <rcl_validate_topic_name+0x132>
 801cf00:	4673      	mov	r3, lr
 801cf02:	f04f 0a01 	mov.w	sl, #1
 801cf06:	f10e 0e01 	add.w	lr, lr, #1
 801cf0a:	4570      	cmp	r0, lr
 801cf0c:	d1c4      	bne.n	801ce98 <rcl_validate_topic_name+0x54>
 801cf0e:	f1ba 0f00 	cmp.w	sl, #0
 801cf12:	d048      	beq.n	801cfa6 <rcl_validate_topic_name+0x162>
 801cf14:	2205      	movs	r2, #5
 801cf16:	602a      	str	r2, [r5, #0]
 801cf18:	2e00      	cmp	r6, #0
 801cf1a:	d0b7      	beq.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf1c:	6033      	str	r3, [r6, #0]
 801cf1e:	e7b5      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf20:	200b      	movs	r0, #11
 801cf22:	4770      	bx	lr
 801cf24:	2304      	movs	r3, #4
 801cf26:	602b      	str	r3, [r5, #0]
 801cf28:	2e00      	cmp	r6, #0
 801cf2a:	d1ad      	bne.n	801ce88 <rcl_validate_topic_name+0x44>
 801cf2c:	e7ae      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf2e:	200b      	movs	r0, #11
 801cf30:	e7a5      	b.n	801ce7e <rcl_validate_topic_name+0x3a>
 801cf32:	f812 c009 	ldrb.w	ip, [r2, r9]
 801cf36:	f01c 0f04 	tst.w	ip, #4
 801cf3a:	d0e4      	beq.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cf3c:	f1ba 0f00 	cmp.w	sl, #0
 801cf40:	d0e1      	beq.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cf42:	f1be 0f00 	cmp.w	lr, #0
 801cf46:	d0de      	beq.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cf48:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801cf4c:	4563      	cmp	r3, ip
 801cf4e:	d1da      	bne.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cf50:	2309      	movs	r3, #9
 801cf52:	602b      	str	r3, [r5, #0]
 801cf54:	2e00      	cmp	r6, #0
 801cf56:	d099      	beq.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf58:	f8c6 e000 	str.w	lr, [r6]
 801cf5c:	e796      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf5e:	f1ba 0f00 	cmp.w	sl, #0
 801cf62:	bf0c      	ite	eq
 801cf64:	2303      	moveq	r3, #3
 801cf66:	2308      	movne	r3, #8
 801cf68:	602b      	str	r3, [r5, #0]
 801cf6a:	2e00      	cmp	r6, #0
 801cf6c:	d1f4      	bne.n	801cf58 <rcl_validate_topic_name+0x114>
 801cf6e:	e78d      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf70:	f1ba 0f00 	cmp.w	sl, #0
 801cf74:	d0c7      	beq.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cf76:	2308      	movs	r3, #8
 801cf78:	602b      	str	r3, [r5, #0]
 801cf7a:	2e00      	cmp	r6, #0
 801cf7c:	d1ec      	bne.n	801cf58 <rcl_validate_topic_name+0x114>
 801cf7e:	e785      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf80:	f1be 0f00 	cmp.w	lr, #0
 801cf84:	d0bf      	beq.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cf86:	2306      	movs	r3, #6
 801cf88:	602b      	str	r3, [r5, #0]
 801cf8a:	2e00      	cmp	r6, #0
 801cf8c:	d1e4      	bne.n	801cf58 <rcl_validate_topic_name+0x114>
 801cf8e:	e77d      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cf90:	f1ba 0f00 	cmp.w	sl, #0
 801cf94:	d104      	bne.n	801cfa0 <rcl_validate_topic_name+0x15c>
 801cf96:	2305      	movs	r3, #5
 801cf98:	602b      	str	r3, [r5, #0]
 801cf9a:	2e00      	cmp	r6, #0
 801cf9c:	d1dc      	bne.n	801cf58 <rcl_validate_topic_name+0x114>
 801cf9e:	e775      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cfa0:	f04f 0a00 	mov.w	sl, #0
 801cfa4:	e7af      	b.n	801cf06 <rcl_validate_topic_name+0xc2>
 801cfa6:	297e      	cmp	r1, #126	@ 0x7e
 801cfa8:	d01d      	beq.n	801cfe6 <rcl_validate_topic_name+0x1a2>
 801cfaa:	2101      	movs	r1, #1
 801cfac:	e006      	b.n	801cfbc <rcl_validate_topic_name+0x178>
 801cfae:	458e      	cmp	lr, r1
 801cfb0:	f104 0401 	add.w	r4, r4, #1
 801cfb4:	f101 0301 	add.w	r3, r1, #1
 801cfb8:	d912      	bls.n	801cfe0 <rcl_validate_topic_name+0x19c>
 801cfba:	4619      	mov	r1, r3
 801cfbc:	4557      	cmp	r7, sl
 801cfbe:	f10a 0a01 	add.w	sl, sl, #1
 801cfc2:	d0f4      	beq.n	801cfae <rcl_validate_topic_name+0x16a>
 801cfc4:	7823      	ldrb	r3, [r4, #0]
 801cfc6:	2b2f      	cmp	r3, #47	@ 0x2f
 801cfc8:	d1f1      	bne.n	801cfae <rcl_validate_topic_name+0x16a>
 801cfca:	7863      	ldrb	r3, [r4, #1]
 801cfcc:	5cd3      	ldrb	r3, [r2, r3]
 801cfce:	075b      	lsls	r3, r3, #29
 801cfd0:	d5ed      	bpl.n	801cfae <rcl_validate_topic_name+0x16a>
 801cfd2:	2304      	movs	r3, #4
 801cfd4:	602b      	str	r3, [r5, #0]
 801cfd6:	2e00      	cmp	r6, #0
 801cfd8:	f43f af58 	beq.w	801ce8c <rcl_validate_topic_name+0x48>
 801cfdc:	6031      	str	r1, [r6, #0]
 801cfde:	e755      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	602b      	str	r3, [r5, #0]
 801cfe4:	e752      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801cfe6:	4653      	mov	r3, sl
 801cfe8:	2101      	movs	r1, #1
 801cfea:	e00a      	b.n	801d002 <rcl_validate_topic_name+0x1be>
 801cfec:	2b01      	cmp	r3, #1
 801cfee:	d012      	beq.n	801d016 <rcl_validate_topic_name+0x1d2>
 801cff0:	458e      	cmp	lr, r1
 801cff2:	f103 0301 	add.w	r3, r3, #1
 801cff6:	f104 0401 	add.w	r4, r4, #1
 801cffa:	f101 0001 	add.w	r0, r1, #1
 801cffe:	d9ef      	bls.n	801cfe0 <rcl_validate_topic_name+0x19c>
 801d000:	4601      	mov	r1, r0
 801d002:	429f      	cmp	r7, r3
 801d004:	d0f4      	beq.n	801cff0 <rcl_validate_topic_name+0x1ac>
 801d006:	7820      	ldrb	r0, [r4, #0]
 801d008:	282f      	cmp	r0, #47	@ 0x2f
 801d00a:	d1ef      	bne.n	801cfec <rcl_validate_topic_name+0x1a8>
 801d00c:	7860      	ldrb	r0, [r4, #1]
 801d00e:	5c10      	ldrb	r0, [r2, r0]
 801d010:	0740      	lsls	r0, r0, #29
 801d012:	d5ed      	bpl.n	801cff0 <rcl_validate_topic_name+0x1ac>
 801d014:	e7dd      	b.n	801cfd2 <rcl_validate_topic_name+0x18e>
 801d016:	2207      	movs	r2, #7
 801d018:	602a      	str	r2, [r5, #0]
 801d01a:	2e00      	cmp	r6, #0
 801d01c:	f47f af7e 	bne.w	801cf1c <rcl_validate_topic_name+0xd8>
 801d020:	e734      	b.n	801ce8c <rcl_validate_topic_name+0x48>
 801d022:	bf00      	nop
 801d024:	08021672 	.word	0x08021672

0801d028 <rcutils_split>:
 801d028:	b082      	sub	sp, #8
 801d02a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d02e:	b08b      	sub	sp, #44	@ 0x2c
 801d030:	ac14      	add	r4, sp, #80	@ 0x50
 801d032:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801d034:	e884 000c 	stmia.w	r4, {r2, r3}
 801d038:	2f00      	cmp	r7, #0
 801d03a:	f000 809f 	beq.w	801d17c <rcutils_split+0x154>
 801d03e:	4606      	mov	r6, r0
 801d040:	2800      	cmp	r0, #0
 801d042:	d071      	beq.n	801d128 <rcutils_split+0x100>
 801d044:	7804      	ldrb	r4, [r0, #0]
 801d046:	2c00      	cmp	r4, #0
 801d048:	d06e      	beq.n	801d128 <rcutils_split+0x100>
 801d04a:	460d      	mov	r5, r1
 801d04c:	f7e3 f948 	bl	80002e0 <strlen>
 801d050:	1833      	adds	r3, r6, r0
 801d052:	1b64      	subs	r4, r4, r5
 801d054:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d058:	4680      	mov	r8, r0
 801d05a:	fab4 f484 	clz	r4, r4
 801d05e:	0964      	lsrs	r4, r4, #5
 801d060:	42ab      	cmp	r3, r5
 801d062:	bf08      	it	eq
 801d064:	f1a8 0801 	subeq.w	r8, r8, #1
 801d068:	4544      	cmp	r4, r8
 801d06a:	d278      	bcs.n	801d15e <rcutils_split+0x136>
 801d06c:	1933      	adds	r3, r6, r4
 801d06e:	eb06 0008 	add.w	r0, r6, r8
 801d072:	2101      	movs	r1, #1
 801d074:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d078:	42aa      	cmp	r2, r5
 801d07a:	bf08      	it	eq
 801d07c:	3101      	addeq	r1, #1
 801d07e:	4283      	cmp	r3, r0
 801d080:	d1f8      	bne.n	801d074 <rcutils_split+0x4c>
 801d082:	aa14      	add	r2, sp, #80	@ 0x50
 801d084:	4638      	mov	r0, r7
 801d086:	f7fd fd95 	bl	801abb4 <rcutils_string_array_init>
 801d08a:	4681      	mov	r9, r0
 801d08c:	2800      	cmp	r0, #0
 801d08e:	d159      	bne.n	801d144 <rcutils_split+0x11c>
 801d090:	687a      	ldr	r2, [r7, #4]
 801d092:	46a2      	mov	sl, r4
 801d094:	e002      	b.n	801d09c <rcutils_split+0x74>
 801d096:	3401      	adds	r4, #1
 801d098:	4544      	cmp	r4, r8
 801d09a:	d222      	bcs.n	801d0e2 <rcutils_split+0xba>
 801d09c:	5d33      	ldrb	r3, [r6, r4]
 801d09e:	42ab      	cmp	r3, r5
 801d0a0:	d1f9      	bne.n	801d096 <rcutils_split+0x6e>
 801d0a2:	4554      	cmp	r4, sl
 801d0a4:	eba4 0b0a 	sub.w	fp, r4, sl
 801d0a8:	d037      	beq.n	801d11a <rcutils_split+0xf2>
 801d0aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d0ac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d0ae:	9201      	str	r2, [sp, #4]
 801d0b0:	f10b 0002 	add.w	r0, fp, #2
 801d0b4:	4798      	blx	r3
 801d0b6:	9a01      	ldr	r2, [sp, #4]
 801d0b8:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801d0bc:	687a      	ldr	r2, [r7, #4]
 801d0be:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801d0c2:	eb06 030a 	add.w	r3, r6, sl
 801d0c6:	f10b 0101 	add.w	r1, fp, #1
 801d0ca:	2800      	cmp	r0, #0
 801d0cc:	d038      	beq.n	801d140 <rcutils_split+0x118>
 801d0ce:	4a2e      	ldr	r2, [pc, #184]	@ (801d188 <rcutils_split+0x160>)
 801d0d0:	f000 fc98 	bl	801da04 <sniprintf>
 801d0d4:	687a      	ldr	r2, [r7, #4]
 801d0d6:	f109 0901 	add.w	r9, r9, #1
 801d0da:	3401      	adds	r4, #1
 801d0dc:	4544      	cmp	r4, r8
 801d0de:	46a2      	mov	sl, r4
 801d0e0:	d3dc      	bcc.n	801d09c <rcutils_split+0x74>
 801d0e2:	4554      	cmp	r4, sl
 801d0e4:	d043      	beq.n	801d16e <rcutils_split+0x146>
 801d0e6:	eba4 040a 	sub.w	r4, r4, sl
 801d0ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d0ec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d0ee:	9201      	str	r2, [sp, #4]
 801d0f0:	1ca0      	adds	r0, r4, #2
 801d0f2:	4798      	blx	r3
 801d0f4:	9a01      	ldr	r2, [sp, #4]
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801d0fc:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801d100:	b300      	cbz	r0, 801d144 <rcutils_split+0x11c>
 801d102:	4a21      	ldr	r2, [pc, #132]	@ (801d188 <rcutils_split+0x160>)
 801d104:	eb06 030a 	add.w	r3, r6, sl
 801d108:	1c61      	adds	r1, r4, #1
 801d10a:	f000 fc7b 	bl	801da04 <sniprintf>
 801d10e:	2000      	movs	r0, #0
 801d110:	b00b      	add	sp, #44	@ 0x2c
 801d112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d116:	b002      	add	sp, #8
 801d118:	4770      	bx	lr
 801d11a:	683b      	ldr	r3, [r7, #0]
 801d11c:	3b01      	subs	r3, #1
 801d11e:	2100      	movs	r1, #0
 801d120:	603b      	str	r3, [r7, #0]
 801d122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d126:	e7d8      	b.n	801d0da <rcutils_split+0xb2>
 801d128:	a802      	add	r0, sp, #8
 801d12a:	ac02      	add	r4, sp, #8
 801d12c:	f7fd fd24 	bl	801ab78 <rcutils_get_zero_initialized_string_array>
 801d130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d132:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d134:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d138:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801d13c:	2000      	movs	r0, #0
 801d13e:	e7e7      	b.n	801d110 <rcutils_split+0xe8>
 801d140:	f8c7 9000 	str.w	r9, [r7]
 801d144:	4638      	mov	r0, r7
 801d146:	f7fd fd57 	bl	801abf8 <rcutils_string_array_fini>
 801d14a:	b928      	cbnz	r0, 801d158 <rcutils_split+0x130>
 801d14c:	200a      	movs	r0, #10
 801d14e:	b00b      	add	sp, #44	@ 0x2c
 801d150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d154:	b002      	add	sp, #8
 801d156:	4770      	bx	lr
 801d158:	f7f3 fbaa 	bl	80108b0 <rcutils_reset_error>
 801d15c:	e7f6      	b.n	801d14c <rcutils_split+0x124>
 801d15e:	aa14      	add	r2, sp, #80	@ 0x50
 801d160:	2101      	movs	r1, #1
 801d162:	4638      	mov	r0, r7
 801d164:	f7fd fd26 	bl	801abb4 <rcutils_string_array_init>
 801d168:	2800      	cmp	r0, #0
 801d16a:	d1eb      	bne.n	801d144 <rcutils_split+0x11c>
 801d16c:	687a      	ldr	r2, [r7, #4]
 801d16e:	683b      	ldr	r3, [r7, #0]
 801d170:	3b01      	subs	r3, #1
 801d172:	2100      	movs	r1, #0
 801d174:	603b      	str	r3, [r7, #0]
 801d176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d17a:	e7df      	b.n	801d13c <rcutils_split+0x114>
 801d17c:	200b      	movs	r0, #11
 801d17e:	b00b      	add	sp, #44	@ 0x2c
 801d180:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d184:	b002      	add	sp, #8
 801d186:	4770      	bx	lr
 801d188:	08020a78 	.word	0x08020a78

0801d18c <rosidl_runtime_c__String__init>:
 801d18c:	b1b0      	cbz	r0, 801d1bc <rosidl_runtime_c__String__init+0x30>
 801d18e:	b510      	push	{r4, lr}
 801d190:	b086      	sub	sp, #24
 801d192:	4604      	mov	r4, r0
 801d194:	a801      	add	r0, sp, #4
 801d196:	f7f3 fa7b 	bl	8010690 <rcutils_get_default_allocator>
 801d19a:	9b01      	ldr	r3, [sp, #4]
 801d19c:	9905      	ldr	r1, [sp, #20]
 801d19e:	2001      	movs	r0, #1
 801d1a0:	4798      	blx	r3
 801d1a2:	6020      	str	r0, [r4, #0]
 801d1a4:	b138      	cbz	r0, 801d1b6 <rosidl_runtime_c__String__init+0x2a>
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	7002      	strb	r2, [r0, #0]
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801d1b2:	b006      	add	sp, #24
 801d1b4:	bd10      	pop	{r4, pc}
 801d1b6:	2000      	movs	r0, #0
 801d1b8:	b006      	add	sp, #24
 801d1ba:	bd10      	pop	{r4, pc}
 801d1bc:	2000      	movs	r0, #0
 801d1be:	4770      	bx	lr

0801d1c0 <rosidl_runtime_c__String__fini>:
 801d1c0:	b320      	cbz	r0, 801d20c <rosidl_runtime_c__String__fini+0x4c>
 801d1c2:	b510      	push	{r4, lr}
 801d1c4:	6803      	ldr	r3, [r0, #0]
 801d1c6:	b086      	sub	sp, #24
 801d1c8:	4604      	mov	r4, r0
 801d1ca:	b173      	cbz	r3, 801d1ea <rosidl_runtime_c__String__fini+0x2a>
 801d1cc:	6883      	ldr	r3, [r0, #8]
 801d1ce:	b1f3      	cbz	r3, 801d20e <rosidl_runtime_c__String__fini+0x4e>
 801d1d0:	a801      	add	r0, sp, #4
 801d1d2:	f7f3 fa5d 	bl	8010690 <rcutils_get_default_allocator>
 801d1d6:	9b02      	ldr	r3, [sp, #8]
 801d1d8:	9905      	ldr	r1, [sp, #20]
 801d1da:	6820      	ldr	r0, [r4, #0]
 801d1dc:	4798      	blx	r3
 801d1de:	2300      	movs	r3, #0
 801d1e0:	e9c4 3300 	strd	r3, r3, [r4]
 801d1e4:	60a3      	str	r3, [r4, #8]
 801d1e6:	b006      	add	sp, #24
 801d1e8:	bd10      	pop	{r4, pc}
 801d1ea:	6843      	ldr	r3, [r0, #4]
 801d1ec:	b9db      	cbnz	r3, 801d226 <rosidl_runtime_c__String__fini+0x66>
 801d1ee:	6883      	ldr	r3, [r0, #8]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d0f8      	beq.n	801d1e6 <rosidl_runtime_c__String__fini+0x26>
 801d1f4:	4b12      	ldr	r3, [pc, #72]	@ (801d240 <rosidl_runtime_c__String__fini+0x80>)
 801d1f6:	4813      	ldr	r0, [pc, #76]	@ (801d244 <rosidl_runtime_c__String__fini+0x84>)
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	2251      	movs	r2, #81	@ 0x51
 801d1fc:	68db      	ldr	r3, [r3, #12]
 801d1fe:	2101      	movs	r1, #1
 801d200:	f000 fb82 	bl	801d908 <fwrite>
 801d204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d208:	f000 f83e 	bl	801d288 <exit>
 801d20c:	4770      	bx	lr
 801d20e:	4b0c      	ldr	r3, [pc, #48]	@ (801d240 <rosidl_runtime_c__String__fini+0x80>)
 801d210:	480d      	ldr	r0, [pc, #52]	@ (801d248 <rosidl_runtime_c__String__fini+0x88>)
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	224c      	movs	r2, #76	@ 0x4c
 801d216:	68db      	ldr	r3, [r3, #12]
 801d218:	2101      	movs	r1, #1
 801d21a:	f000 fb75 	bl	801d908 <fwrite>
 801d21e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d222:	f000 f831 	bl	801d288 <exit>
 801d226:	4b06      	ldr	r3, [pc, #24]	@ (801d240 <rosidl_runtime_c__String__fini+0x80>)
 801d228:	4808      	ldr	r0, [pc, #32]	@ (801d24c <rosidl_runtime_c__String__fini+0x8c>)
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	224e      	movs	r2, #78	@ 0x4e
 801d22e:	68db      	ldr	r3, [r3, #12]
 801d230:	2101      	movs	r1, #1
 801d232:	f000 fb69 	bl	801d908 <fwrite>
 801d236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d23a:	f000 f825 	bl	801d288 <exit>
 801d23e:	bf00      	nop
 801d240:	20001bf4 	.word	0x20001bf4
 801d244:	080215b0 	.word	0x080215b0
 801d248:	08021510 	.word	0x08021510
 801d24c:	08021560 	.word	0x08021560

0801d250 <calloc>:
 801d250:	4b02      	ldr	r3, [pc, #8]	@ (801d25c <calloc+0xc>)
 801d252:	460a      	mov	r2, r1
 801d254:	4601      	mov	r1, r0
 801d256:	6818      	ldr	r0, [r3, #0]
 801d258:	f000 b802 	b.w	801d260 <_calloc_r>
 801d25c:	20001bf4 	.word	0x20001bf4

0801d260 <_calloc_r>:
 801d260:	b570      	push	{r4, r5, r6, lr}
 801d262:	fba1 5402 	umull	r5, r4, r1, r2
 801d266:	b93c      	cbnz	r4, 801d278 <_calloc_r+0x18>
 801d268:	4629      	mov	r1, r5
 801d26a:	f000 f899 	bl	801d3a0 <_malloc_r>
 801d26e:	4606      	mov	r6, r0
 801d270:	b928      	cbnz	r0, 801d27e <_calloc_r+0x1e>
 801d272:	2600      	movs	r6, #0
 801d274:	4630      	mov	r0, r6
 801d276:	bd70      	pop	{r4, r5, r6, pc}
 801d278:	220c      	movs	r2, #12
 801d27a:	6002      	str	r2, [r0, #0]
 801d27c:	e7f9      	b.n	801d272 <_calloc_r+0x12>
 801d27e:	462a      	mov	r2, r5
 801d280:	4621      	mov	r1, r4
 801d282:	f000 fd2d 	bl	801dce0 <memset>
 801d286:	e7f5      	b.n	801d274 <_calloc_r+0x14>

0801d288 <exit>:
 801d288:	b508      	push	{r3, lr}
 801d28a:	4b06      	ldr	r3, [pc, #24]	@ (801d2a4 <exit+0x1c>)
 801d28c:	4604      	mov	r4, r0
 801d28e:	b113      	cbz	r3, 801d296 <exit+0xe>
 801d290:	2100      	movs	r1, #0
 801d292:	f3af 8000 	nop.w
 801d296:	4b04      	ldr	r3, [pc, #16]	@ (801d2a8 <exit+0x20>)
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	b103      	cbz	r3, 801d29e <exit+0x16>
 801d29c:	4798      	blx	r3
 801d29e:	4620      	mov	r0, r4
 801d2a0:	f7e6 f9a0 	bl	80035e4 <_exit>
 801d2a4:	00000000 	.word	0x00000000
 801d2a8:	2001a2ec 	.word	0x2001a2ec

0801d2ac <getenv>:
 801d2ac:	b507      	push	{r0, r1, r2, lr}
 801d2ae:	4b04      	ldr	r3, [pc, #16]	@ (801d2c0 <getenv+0x14>)
 801d2b0:	4601      	mov	r1, r0
 801d2b2:	aa01      	add	r2, sp, #4
 801d2b4:	6818      	ldr	r0, [r3, #0]
 801d2b6:	f000 f805 	bl	801d2c4 <_findenv_r>
 801d2ba:	b003      	add	sp, #12
 801d2bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2c0:	20001bf4 	.word	0x20001bf4

0801d2c4 <_findenv_r>:
 801d2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2c8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d338 <_findenv_r+0x74>
 801d2cc:	4606      	mov	r6, r0
 801d2ce:	4689      	mov	r9, r1
 801d2d0:	4617      	mov	r7, r2
 801d2d2:	f000 fe63 	bl	801df9c <__env_lock>
 801d2d6:	f8da 4000 	ldr.w	r4, [sl]
 801d2da:	b134      	cbz	r4, 801d2ea <_findenv_r+0x26>
 801d2dc:	464b      	mov	r3, r9
 801d2de:	4698      	mov	r8, r3
 801d2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d2e4:	b13a      	cbz	r2, 801d2f6 <_findenv_r+0x32>
 801d2e6:	2a3d      	cmp	r2, #61	@ 0x3d
 801d2e8:	d1f9      	bne.n	801d2de <_findenv_r+0x1a>
 801d2ea:	4630      	mov	r0, r6
 801d2ec:	f000 fe5c 	bl	801dfa8 <__env_unlock>
 801d2f0:	2000      	movs	r0, #0
 801d2f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2f6:	eba8 0809 	sub.w	r8, r8, r9
 801d2fa:	46a3      	mov	fp, r4
 801d2fc:	f854 0b04 	ldr.w	r0, [r4], #4
 801d300:	2800      	cmp	r0, #0
 801d302:	d0f2      	beq.n	801d2ea <_findenv_r+0x26>
 801d304:	4642      	mov	r2, r8
 801d306:	4649      	mov	r1, r9
 801d308:	f000 fcff 	bl	801dd0a <strncmp>
 801d30c:	2800      	cmp	r0, #0
 801d30e:	d1f4      	bne.n	801d2fa <_findenv_r+0x36>
 801d310:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d314:	eb03 0508 	add.w	r5, r3, r8
 801d318:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d31c:	2b3d      	cmp	r3, #61	@ 0x3d
 801d31e:	d1ec      	bne.n	801d2fa <_findenv_r+0x36>
 801d320:	f8da 3000 	ldr.w	r3, [sl]
 801d324:	ebab 0303 	sub.w	r3, fp, r3
 801d328:	109b      	asrs	r3, r3, #2
 801d32a:	4630      	mov	r0, r6
 801d32c:	603b      	str	r3, [r7, #0]
 801d32e:	f000 fe3b 	bl	801dfa8 <__env_unlock>
 801d332:	1c68      	adds	r0, r5, #1
 801d334:	e7dd      	b.n	801d2f2 <_findenv_r+0x2e>
 801d336:	bf00      	nop
 801d338:	20000018 	.word	0x20000018

0801d33c <malloc>:
 801d33c:	4b02      	ldr	r3, [pc, #8]	@ (801d348 <malloc+0xc>)
 801d33e:	4601      	mov	r1, r0
 801d340:	6818      	ldr	r0, [r3, #0]
 801d342:	f000 b82d 	b.w	801d3a0 <_malloc_r>
 801d346:	bf00      	nop
 801d348:	20001bf4 	.word	0x20001bf4

0801d34c <free>:
 801d34c:	4b02      	ldr	r3, [pc, #8]	@ (801d358 <free+0xc>)
 801d34e:	4601      	mov	r1, r0
 801d350:	6818      	ldr	r0, [r3, #0]
 801d352:	f000 be2f 	b.w	801dfb4 <_free_r>
 801d356:	bf00      	nop
 801d358:	20001bf4 	.word	0x20001bf4

0801d35c <sbrk_aligned>:
 801d35c:	b570      	push	{r4, r5, r6, lr}
 801d35e:	4e0f      	ldr	r6, [pc, #60]	@ (801d39c <sbrk_aligned+0x40>)
 801d360:	460c      	mov	r4, r1
 801d362:	6831      	ldr	r1, [r6, #0]
 801d364:	4605      	mov	r5, r0
 801d366:	b911      	cbnz	r1, 801d36e <sbrk_aligned+0x12>
 801d368:	f000 fd94 	bl	801de94 <_sbrk_r>
 801d36c:	6030      	str	r0, [r6, #0]
 801d36e:	4621      	mov	r1, r4
 801d370:	4628      	mov	r0, r5
 801d372:	f000 fd8f 	bl	801de94 <_sbrk_r>
 801d376:	1c43      	adds	r3, r0, #1
 801d378:	d103      	bne.n	801d382 <sbrk_aligned+0x26>
 801d37a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d37e:	4620      	mov	r0, r4
 801d380:	bd70      	pop	{r4, r5, r6, pc}
 801d382:	1cc4      	adds	r4, r0, #3
 801d384:	f024 0403 	bic.w	r4, r4, #3
 801d388:	42a0      	cmp	r0, r4
 801d38a:	d0f8      	beq.n	801d37e <sbrk_aligned+0x22>
 801d38c:	1a21      	subs	r1, r4, r0
 801d38e:	4628      	mov	r0, r5
 801d390:	f000 fd80 	bl	801de94 <_sbrk_r>
 801d394:	3001      	adds	r0, #1
 801d396:	d1f2      	bne.n	801d37e <sbrk_aligned+0x22>
 801d398:	e7ef      	b.n	801d37a <sbrk_aligned+0x1e>
 801d39a:	bf00      	nop
 801d39c:	2001a1ac 	.word	0x2001a1ac

0801d3a0 <_malloc_r>:
 801d3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3a4:	1ccd      	adds	r5, r1, #3
 801d3a6:	f025 0503 	bic.w	r5, r5, #3
 801d3aa:	3508      	adds	r5, #8
 801d3ac:	2d0c      	cmp	r5, #12
 801d3ae:	bf38      	it	cc
 801d3b0:	250c      	movcc	r5, #12
 801d3b2:	2d00      	cmp	r5, #0
 801d3b4:	4606      	mov	r6, r0
 801d3b6:	db01      	blt.n	801d3bc <_malloc_r+0x1c>
 801d3b8:	42a9      	cmp	r1, r5
 801d3ba:	d904      	bls.n	801d3c6 <_malloc_r+0x26>
 801d3bc:	230c      	movs	r3, #12
 801d3be:	6033      	str	r3, [r6, #0]
 801d3c0:	2000      	movs	r0, #0
 801d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d49c <_malloc_r+0xfc>
 801d3ca:	f000 f869 	bl	801d4a0 <__malloc_lock>
 801d3ce:	f8d8 3000 	ldr.w	r3, [r8]
 801d3d2:	461c      	mov	r4, r3
 801d3d4:	bb44      	cbnz	r4, 801d428 <_malloc_r+0x88>
 801d3d6:	4629      	mov	r1, r5
 801d3d8:	4630      	mov	r0, r6
 801d3da:	f7ff ffbf 	bl	801d35c <sbrk_aligned>
 801d3de:	1c43      	adds	r3, r0, #1
 801d3e0:	4604      	mov	r4, r0
 801d3e2:	d158      	bne.n	801d496 <_malloc_r+0xf6>
 801d3e4:	f8d8 4000 	ldr.w	r4, [r8]
 801d3e8:	4627      	mov	r7, r4
 801d3ea:	2f00      	cmp	r7, #0
 801d3ec:	d143      	bne.n	801d476 <_malloc_r+0xd6>
 801d3ee:	2c00      	cmp	r4, #0
 801d3f0:	d04b      	beq.n	801d48a <_malloc_r+0xea>
 801d3f2:	6823      	ldr	r3, [r4, #0]
 801d3f4:	4639      	mov	r1, r7
 801d3f6:	4630      	mov	r0, r6
 801d3f8:	eb04 0903 	add.w	r9, r4, r3
 801d3fc:	f000 fd4a 	bl	801de94 <_sbrk_r>
 801d400:	4581      	cmp	r9, r0
 801d402:	d142      	bne.n	801d48a <_malloc_r+0xea>
 801d404:	6821      	ldr	r1, [r4, #0]
 801d406:	1a6d      	subs	r5, r5, r1
 801d408:	4629      	mov	r1, r5
 801d40a:	4630      	mov	r0, r6
 801d40c:	f7ff ffa6 	bl	801d35c <sbrk_aligned>
 801d410:	3001      	adds	r0, #1
 801d412:	d03a      	beq.n	801d48a <_malloc_r+0xea>
 801d414:	6823      	ldr	r3, [r4, #0]
 801d416:	442b      	add	r3, r5
 801d418:	6023      	str	r3, [r4, #0]
 801d41a:	f8d8 3000 	ldr.w	r3, [r8]
 801d41e:	685a      	ldr	r2, [r3, #4]
 801d420:	bb62      	cbnz	r2, 801d47c <_malloc_r+0xdc>
 801d422:	f8c8 7000 	str.w	r7, [r8]
 801d426:	e00f      	b.n	801d448 <_malloc_r+0xa8>
 801d428:	6822      	ldr	r2, [r4, #0]
 801d42a:	1b52      	subs	r2, r2, r5
 801d42c:	d420      	bmi.n	801d470 <_malloc_r+0xd0>
 801d42e:	2a0b      	cmp	r2, #11
 801d430:	d917      	bls.n	801d462 <_malloc_r+0xc2>
 801d432:	1961      	adds	r1, r4, r5
 801d434:	42a3      	cmp	r3, r4
 801d436:	6025      	str	r5, [r4, #0]
 801d438:	bf18      	it	ne
 801d43a:	6059      	strne	r1, [r3, #4]
 801d43c:	6863      	ldr	r3, [r4, #4]
 801d43e:	bf08      	it	eq
 801d440:	f8c8 1000 	streq.w	r1, [r8]
 801d444:	5162      	str	r2, [r4, r5]
 801d446:	604b      	str	r3, [r1, #4]
 801d448:	4630      	mov	r0, r6
 801d44a:	f000 f82f 	bl	801d4ac <__malloc_unlock>
 801d44e:	f104 000b 	add.w	r0, r4, #11
 801d452:	1d23      	adds	r3, r4, #4
 801d454:	f020 0007 	bic.w	r0, r0, #7
 801d458:	1ac2      	subs	r2, r0, r3
 801d45a:	bf1c      	itt	ne
 801d45c:	1a1b      	subne	r3, r3, r0
 801d45e:	50a3      	strne	r3, [r4, r2]
 801d460:	e7af      	b.n	801d3c2 <_malloc_r+0x22>
 801d462:	6862      	ldr	r2, [r4, #4]
 801d464:	42a3      	cmp	r3, r4
 801d466:	bf0c      	ite	eq
 801d468:	f8c8 2000 	streq.w	r2, [r8]
 801d46c:	605a      	strne	r2, [r3, #4]
 801d46e:	e7eb      	b.n	801d448 <_malloc_r+0xa8>
 801d470:	4623      	mov	r3, r4
 801d472:	6864      	ldr	r4, [r4, #4]
 801d474:	e7ae      	b.n	801d3d4 <_malloc_r+0x34>
 801d476:	463c      	mov	r4, r7
 801d478:	687f      	ldr	r7, [r7, #4]
 801d47a:	e7b6      	b.n	801d3ea <_malloc_r+0x4a>
 801d47c:	461a      	mov	r2, r3
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	42a3      	cmp	r3, r4
 801d482:	d1fb      	bne.n	801d47c <_malloc_r+0xdc>
 801d484:	2300      	movs	r3, #0
 801d486:	6053      	str	r3, [r2, #4]
 801d488:	e7de      	b.n	801d448 <_malloc_r+0xa8>
 801d48a:	230c      	movs	r3, #12
 801d48c:	6033      	str	r3, [r6, #0]
 801d48e:	4630      	mov	r0, r6
 801d490:	f000 f80c 	bl	801d4ac <__malloc_unlock>
 801d494:	e794      	b.n	801d3c0 <_malloc_r+0x20>
 801d496:	6005      	str	r5, [r0, #0]
 801d498:	e7d6      	b.n	801d448 <_malloc_r+0xa8>
 801d49a:	bf00      	nop
 801d49c:	2001a1b0 	.word	0x2001a1b0

0801d4a0 <__malloc_lock>:
 801d4a0:	4801      	ldr	r0, [pc, #4]	@ (801d4a8 <__malloc_lock+0x8>)
 801d4a2:	f000 bd44 	b.w	801df2e <__retarget_lock_acquire_recursive>
 801d4a6:	bf00      	nop
 801d4a8:	2001a2f5 	.word	0x2001a2f5

0801d4ac <__malloc_unlock>:
 801d4ac:	4801      	ldr	r0, [pc, #4]	@ (801d4b4 <__malloc_unlock+0x8>)
 801d4ae:	f000 bd3f 	b.w	801df30 <__retarget_lock_release_recursive>
 801d4b2:	bf00      	nop
 801d4b4:	2001a2f5 	.word	0x2001a2f5

0801d4b8 <srand>:
 801d4b8:	b538      	push	{r3, r4, r5, lr}
 801d4ba:	4b10      	ldr	r3, [pc, #64]	@ (801d4fc <srand+0x44>)
 801d4bc:	681d      	ldr	r5, [r3, #0]
 801d4be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d4c0:	4604      	mov	r4, r0
 801d4c2:	b9b3      	cbnz	r3, 801d4f2 <srand+0x3a>
 801d4c4:	2018      	movs	r0, #24
 801d4c6:	f7ff ff39 	bl	801d33c <malloc>
 801d4ca:	4602      	mov	r2, r0
 801d4cc:	6328      	str	r0, [r5, #48]	@ 0x30
 801d4ce:	b920      	cbnz	r0, 801d4da <srand+0x22>
 801d4d0:	4b0b      	ldr	r3, [pc, #44]	@ (801d500 <srand+0x48>)
 801d4d2:	480c      	ldr	r0, [pc, #48]	@ (801d504 <srand+0x4c>)
 801d4d4:	2146      	movs	r1, #70	@ 0x46
 801d4d6:	f000 fd43 	bl	801df60 <__assert_func>
 801d4da:	490b      	ldr	r1, [pc, #44]	@ (801d508 <srand+0x50>)
 801d4dc:	4b0b      	ldr	r3, [pc, #44]	@ (801d50c <srand+0x54>)
 801d4de:	e9c0 1300 	strd	r1, r3, [r0]
 801d4e2:	4b0b      	ldr	r3, [pc, #44]	@ (801d510 <srand+0x58>)
 801d4e4:	6083      	str	r3, [r0, #8]
 801d4e6:	230b      	movs	r3, #11
 801d4e8:	8183      	strh	r3, [r0, #12]
 801d4ea:	2100      	movs	r1, #0
 801d4ec:	2001      	movs	r0, #1
 801d4ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d4f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	611c      	str	r4, [r3, #16]
 801d4f8:	615a      	str	r2, [r3, #20]
 801d4fa:	bd38      	pop	{r3, r4, r5, pc}
 801d4fc:	20001bf4 	.word	0x20001bf4
 801d500:	08021602 	.word	0x08021602
 801d504:	08021619 	.word	0x08021619
 801d508:	abcd330e 	.word	0xabcd330e
 801d50c:	e66d1234 	.word	0xe66d1234
 801d510:	0005deec 	.word	0x0005deec

0801d514 <rand>:
 801d514:	4b16      	ldr	r3, [pc, #88]	@ (801d570 <rand+0x5c>)
 801d516:	b510      	push	{r4, lr}
 801d518:	681c      	ldr	r4, [r3, #0]
 801d51a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d51c:	b9b3      	cbnz	r3, 801d54c <rand+0x38>
 801d51e:	2018      	movs	r0, #24
 801d520:	f7ff ff0c 	bl	801d33c <malloc>
 801d524:	4602      	mov	r2, r0
 801d526:	6320      	str	r0, [r4, #48]	@ 0x30
 801d528:	b920      	cbnz	r0, 801d534 <rand+0x20>
 801d52a:	4b12      	ldr	r3, [pc, #72]	@ (801d574 <rand+0x60>)
 801d52c:	4812      	ldr	r0, [pc, #72]	@ (801d578 <rand+0x64>)
 801d52e:	2152      	movs	r1, #82	@ 0x52
 801d530:	f000 fd16 	bl	801df60 <__assert_func>
 801d534:	4911      	ldr	r1, [pc, #68]	@ (801d57c <rand+0x68>)
 801d536:	4b12      	ldr	r3, [pc, #72]	@ (801d580 <rand+0x6c>)
 801d538:	e9c0 1300 	strd	r1, r3, [r0]
 801d53c:	4b11      	ldr	r3, [pc, #68]	@ (801d584 <rand+0x70>)
 801d53e:	6083      	str	r3, [r0, #8]
 801d540:	230b      	movs	r3, #11
 801d542:	8183      	strh	r3, [r0, #12]
 801d544:	2100      	movs	r1, #0
 801d546:	2001      	movs	r0, #1
 801d548:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d54c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d54e:	480e      	ldr	r0, [pc, #56]	@ (801d588 <rand+0x74>)
 801d550:	690b      	ldr	r3, [r1, #16]
 801d552:	694c      	ldr	r4, [r1, #20]
 801d554:	4a0d      	ldr	r2, [pc, #52]	@ (801d58c <rand+0x78>)
 801d556:	4358      	muls	r0, r3
 801d558:	fb02 0004 	mla	r0, r2, r4, r0
 801d55c:	fba3 3202 	umull	r3, r2, r3, r2
 801d560:	3301      	adds	r3, #1
 801d562:	eb40 0002 	adc.w	r0, r0, r2
 801d566:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d56a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d56e:	bd10      	pop	{r4, pc}
 801d570:	20001bf4 	.word	0x20001bf4
 801d574:	08021602 	.word	0x08021602
 801d578:	08021619 	.word	0x08021619
 801d57c:	abcd330e 	.word	0xabcd330e
 801d580:	e66d1234 	.word	0xe66d1234
 801d584:	0005deec 	.word	0x0005deec
 801d588:	5851f42d 	.word	0x5851f42d
 801d58c:	4c957f2d 	.word	0x4c957f2d

0801d590 <realloc>:
 801d590:	4b02      	ldr	r3, [pc, #8]	@ (801d59c <realloc+0xc>)
 801d592:	460a      	mov	r2, r1
 801d594:	4601      	mov	r1, r0
 801d596:	6818      	ldr	r0, [r3, #0]
 801d598:	f000 b802 	b.w	801d5a0 <_realloc_r>
 801d59c:	20001bf4 	.word	0x20001bf4

0801d5a0 <_realloc_r>:
 801d5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a4:	4680      	mov	r8, r0
 801d5a6:	4615      	mov	r5, r2
 801d5a8:	460c      	mov	r4, r1
 801d5aa:	b921      	cbnz	r1, 801d5b6 <_realloc_r+0x16>
 801d5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b0:	4611      	mov	r1, r2
 801d5b2:	f7ff bef5 	b.w	801d3a0 <_malloc_r>
 801d5b6:	b92a      	cbnz	r2, 801d5c4 <_realloc_r+0x24>
 801d5b8:	f000 fcfc 	bl	801dfb4 <_free_r>
 801d5bc:	2400      	movs	r4, #0
 801d5be:	4620      	mov	r0, r4
 801d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5c4:	f000 fd40 	bl	801e048 <_malloc_usable_size_r>
 801d5c8:	4285      	cmp	r5, r0
 801d5ca:	4606      	mov	r6, r0
 801d5cc:	d802      	bhi.n	801d5d4 <_realloc_r+0x34>
 801d5ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d5d2:	d8f4      	bhi.n	801d5be <_realloc_r+0x1e>
 801d5d4:	4629      	mov	r1, r5
 801d5d6:	4640      	mov	r0, r8
 801d5d8:	f7ff fee2 	bl	801d3a0 <_malloc_r>
 801d5dc:	4607      	mov	r7, r0
 801d5de:	2800      	cmp	r0, #0
 801d5e0:	d0ec      	beq.n	801d5bc <_realloc_r+0x1c>
 801d5e2:	42b5      	cmp	r5, r6
 801d5e4:	462a      	mov	r2, r5
 801d5e6:	4621      	mov	r1, r4
 801d5e8:	bf28      	it	cs
 801d5ea:	4632      	movcs	r2, r6
 801d5ec:	f000 fca9 	bl	801df42 <memcpy>
 801d5f0:	4621      	mov	r1, r4
 801d5f2:	4640      	mov	r0, r8
 801d5f4:	f000 fcde 	bl	801dfb4 <_free_r>
 801d5f8:	463c      	mov	r4, r7
 801d5fa:	e7e0      	b.n	801d5be <_realloc_r+0x1e>

0801d5fc <_strtoul_l.constprop.0>:
 801d5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d600:	4e34      	ldr	r6, [pc, #208]	@ (801d6d4 <_strtoul_l.constprop.0+0xd8>)
 801d602:	4686      	mov	lr, r0
 801d604:	460d      	mov	r5, r1
 801d606:	4628      	mov	r0, r5
 801d608:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d60c:	5d37      	ldrb	r7, [r6, r4]
 801d60e:	f017 0708 	ands.w	r7, r7, #8
 801d612:	d1f8      	bne.n	801d606 <_strtoul_l.constprop.0+0xa>
 801d614:	2c2d      	cmp	r4, #45	@ 0x2d
 801d616:	d12f      	bne.n	801d678 <_strtoul_l.constprop.0+0x7c>
 801d618:	782c      	ldrb	r4, [r5, #0]
 801d61a:	2701      	movs	r7, #1
 801d61c:	1c85      	adds	r5, r0, #2
 801d61e:	f033 0010 	bics.w	r0, r3, #16
 801d622:	d109      	bne.n	801d638 <_strtoul_l.constprop.0+0x3c>
 801d624:	2c30      	cmp	r4, #48	@ 0x30
 801d626:	d12c      	bne.n	801d682 <_strtoul_l.constprop.0+0x86>
 801d628:	7828      	ldrb	r0, [r5, #0]
 801d62a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d62e:	2858      	cmp	r0, #88	@ 0x58
 801d630:	d127      	bne.n	801d682 <_strtoul_l.constprop.0+0x86>
 801d632:	786c      	ldrb	r4, [r5, #1]
 801d634:	2310      	movs	r3, #16
 801d636:	3502      	adds	r5, #2
 801d638:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d63c:	2600      	movs	r6, #0
 801d63e:	fbb8 f8f3 	udiv	r8, r8, r3
 801d642:	fb03 f908 	mul.w	r9, r3, r8
 801d646:	ea6f 0909 	mvn.w	r9, r9
 801d64a:	4630      	mov	r0, r6
 801d64c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d650:	f1bc 0f09 	cmp.w	ip, #9
 801d654:	d81c      	bhi.n	801d690 <_strtoul_l.constprop.0+0x94>
 801d656:	4664      	mov	r4, ip
 801d658:	42a3      	cmp	r3, r4
 801d65a:	dd2a      	ble.n	801d6b2 <_strtoul_l.constprop.0+0xb6>
 801d65c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d660:	d007      	beq.n	801d672 <_strtoul_l.constprop.0+0x76>
 801d662:	4580      	cmp	r8, r0
 801d664:	d322      	bcc.n	801d6ac <_strtoul_l.constprop.0+0xb0>
 801d666:	d101      	bne.n	801d66c <_strtoul_l.constprop.0+0x70>
 801d668:	45a1      	cmp	r9, r4
 801d66a:	db1f      	blt.n	801d6ac <_strtoul_l.constprop.0+0xb0>
 801d66c:	fb00 4003 	mla	r0, r0, r3, r4
 801d670:	2601      	movs	r6, #1
 801d672:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d676:	e7e9      	b.n	801d64c <_strtoul_l.constprop.0+0x50>
 801d678:	2c2b      	cmp	r4, #43	@ 0x2b
 801d67a:	bf04      	itt	eq
 801d67c:	782c      	ldrbeq	r4, [r5, #0]
 801d67e:	1c85      	addeq	r5, r0, #2
 801d680:	e7cd      	b.n	801d61e <_strtoul_l.constprop.0+0x22>
 801d682:	2b00      	cmp	r3, #0
 801d684:	d1d8      	bne.n	801d638 <_strtoul_l.constprop.0+0x3c>
 801d686:	2c30      	cmp	r4, #48	@ 0x30
 801d688:	bf0c      	ite	eq
 801d68a:	2308      	moveq	r3, #8
 801d68c:	230a      	movne	r3, #10
 801d68e:	e7d3      	b.n	801d638 <_strtoul_l.constprop.0+0x3c>
 801d690:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d694:	f1bc 0f19 	cmp.w	ip, #25
 801d698:	d801      	bhi.n	801d69e <_strtoul_l.constprop.0+0xa2>
 801d69a:	3c37      	subs	r4, #55	@ 0x37
 801d69c:	e7dc      	b.n	801d658 <_strtoul_l.constprop.0+0x5c>
 801d69e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d6a2:	f1bc 0f19 	cmp.w	ip, #25
 801d6a6:	d804      	bhi.n	801d6b2 <_strtoul_l.constprop.0+0xb6>
 801d6a8:	3c57      	subs	r4, #87	@ 0x57
 801d6aa:	e7d5      	b.n	801d658 <_strtoul_l.constprop.0+0x5c>
 801d6ac:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d6b0:	e7df      	b.n	801d672 <_strtoul_l.constprop.0+0x76>
 801d6b2:	1c73      	adds	r3, r6, #1
 801d6b4:	d106      	bne.n	801d6c4 <_strtoul_l.constprop.0+0xc8>
 801d6b6:	2322      	movs	r3, #34	@ 0x22
 801d6b8:	f8ce 3000 	str.w	r3, [lr]
 801d6bc:	4630      	mov	r0, r6
 801d6be:	b932      	cbnz	r2, 801d6ce <_strtoul_l.constprop.0+0xd2>
 801d6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c4:	b107      	cbz	r7, 801d6c8 <_strtoul_l.constprop.0+0xcc>
 801d6c6:	4240      	negs	r0, r0
 801d6c8:	2a00      	cmp	r2, #0
 801d6ca:	d0f9      	beq.n	801d6c0 <_strtoul_l.constprop.0+0xc4>
 801d6cc:	b106      	cbz	r6, 801d6d0 <_strtoul_l.constprop.0+0xd4>
 801d6ce:	1e69      	subs	r1, r5, #1
 801d6d0:	6011      	str	r1, [r2, #0]
 801d6d2:	e7f5      	b.n	801d6c0 <_strtoul_l.constprop.0+0xc4>
 801d6d4:	08021672 	.word	0x08021672

0801d6d8 <strtoul>:
 801d6d8:	4613      	mov	r3, r2
 801d6da:	460a      	mov	r2, r1
 801d6dc:	4601      	mov	r1, r0
 801d6de:	4802      	ldr	r0, [pc, #8]	@ (801d6e8 <strtoul+0x10>)
 801d6e0:	6800      	ldr	r0, [r0, #0]
 801d6e2:	f7ff bf8b 	b.w	801d5fc <_strtoul_l.constprop.0>
 801d6e6:	bf00      	nop
 801d6e8:	20001bf4 	.word	0x20001bf4

0801d6ec <std>:
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	b510      	push	{r4, lr}
 801d6f0:	4604      	mov	r4, r0
 801d6f2:	e9c0 3300 	strd	r3, r3, [r0]
 801d6f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d6fa:	6083      	str	r3, [r0, #8]
 801d6fc:	8181      	strh	r1, [r0, #12]
 801d6fe:	6643      	str	r3, [r0, #100]	@ 0x64
 801d700:	81c2      	strh	r2, [r0, #14]
 801d702:	6183      	str	r3, [r0, #24]
 801d704:	4619      	mov	r1, r3
 801d706:	2208      	movs	r2, #8
 801d708:	305c      	adds	r0, #92	@ 0x5c
 801d70a:	f000 fae9 	bl	801dce0 <memset>
 801d70e:	4b0d      	ldr	r3, [pc, #52]	@ (801d744 <std+0x58>)
 801d710:	6263      	str	r3, [r4, #36]	@ 0x24
 801d712:	4b0d      	ldr	r3, [pc, #52]	@ (801d748 <std+0x5c>)
 801d714:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d716:	4b0d      	ldr	r3, [pc, #52]	@ (801d74c <std+0x60>)
 801d718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d71a:	4b0d      	ldr	r3, [pc, #52]	@ (801d750 <std+0x64>)
 801d71c:	6323      	str	r3, [r4, #48]	@ 0x30
 801d71e:	4b0d      	ldr	r3, [pc, #52]	@ (801d754 <std+0x68>)
 801d720:	6224      	str	r4, [r4, #32]
 801d722:	429c      	cmp	r4, r3
 801d724:	d006      	beq.n	801d734 <std+0x48>
 801d726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d72a:	4294      	cmp	r4, r2
 801d72c:	d002      	beq.n	801d734 <std+0x48>
 801d72e:	33d0      	adds	r3, #208	@ 0xd0
 801d730:	429c      	cmp	r4, r3
 801d732:	d105      	bne.n	801d740 <std+0x54>
 801d734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d73c:	f000 bbf6 	b.w	801df2c <__retarget_lock_init_recursive>
 801d740:	bd10      	pop	{r4, pc}
 801d742:	bf00      	nop
 801d744:	0801da6d 	.word	0x0801da6d
 801d748:	0801da8f 	.word	0x0801da8f
 801d74c:	0801dac7 	.word	0x0801dac7
 801d750:	0801daeb 	.word	0x0801daeb
 801d754:	2001a1b4 	.word	0x2001a1b4

0801d758 <stdio_exit_handler>:
 801d758:	4a02      	ldr	r2, [pc, #8]	@ (801d764 <stdio_exit_handler+0xc>)
 801d75a:	4903      	ldr	r1, [pc, #12]	@ (801d768 <stdio_exit_handler+0x10>)
 801d75c:	4803      	ldr	r0, [pc, #12]	@ (801d76c <stdio_exit_handler+0x14>)
 801d75e:	f000 b869 	b.w	801d834 <_fwalk_sglue>
 801d762:	bf00      	nop
 801d764:	20001be8 	.word	0x20001be8
 801d768:	0801e9b1 	.word	0x0801e9b1
 801d76c:	20001bf8 	.word	0x20001bf8

0801d770 <cleanup_stdio>:
 801d770:	6841      	ldr	r1, [r0, #4]
 801d772:	4b0c      	ldr	r3, [pc, #48]	@ (801d7a4 <cleanup_stdio+0x34>)
 801d774:	4299      	cmp	r1, r3
 801d776:	b510      	push	{r4, lr}
 801d778:	4604      	mov	r4, r0
 801d77a:	d001      	beq.n	801d780 <cleanup_stdio+0x10>
 801d77c:	f001 f918 	bl	801e9b0 <_fflush_r>
 801d780:	68a1      	ldr	r1, [r4, #8]
 801d782:	4b09      	ldr	r3, [pc, #36]	@ (801d7a8 <cleanup_stdio+0x38>)
 801d784:	4299      	cmp	r1, r3
 801d786:	d002      	beq.n	801d78e <cleanup_stdio+0x1e>
 801d788:	4620      	mov	r0, r4
 801d78a:	f001 f911 	bl	801e9b0 <_fflush_r>
 801d78e:	68e1      	ldr	r1, [r4, #12]
 801d790:	4b06      	ldr	r3, [pc, #24]	@ (801d7ac <cleanup_stdio+0x3c>)
 801d792:	4299      	cmp	r1, r3
 801d794:	d004      	beq.n	801d7a0 <cleanup_stdio+0x30>
 801d796:	4620      	mov	r0, r4
 801d798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d79c:	f001 b908 	b.w	801e9b0 <_fflush_r>
 801d7a0:	bd10      	pop	{r4, pc}
 801d7a2:	bf00      	nop
 801d7a4:	2001a1b4 	.word	0x2001a1b4
 801d7a8:	2001a21c 	.word	0x2001a21c
 801d7ac:	2001a284 	.word	0x2001a284

0801d7b0 <global_stdio_init.part.0>:
 801d7b0:	b510      	push	{r4, lr}
 801d7b2:	4b0b      	ldr	r3, [pc, #44]	@ (801d7e0 <global_stdio_init.part.0+0x30>)
 801d7b4:	4c0b      	ldr	r4, [pc, #44]	@ (801d7e4 <global_stdio_init.part.0+0x34>)
 801d7b6:	4a0c      	ldr	r2, [pc, #48]	@ (801d7e8 <global_stdio_init.part.0+0x38>)
 801d7b8:	601a      	str	r2, [r3, #0]
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	2200      	movs	r2, #0
 801d7be:	2104      	movs	r1, #4
 801d7c0:	f7ff ff94 	bl	801d6ec <std>
 801d7c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d7c8:	2201      	movs	r2, #1
 801d7ca:	2109      	movs	r1, #9
 801d7cc:	f7ff ff8e 	bl	801d6ec <std>
 801d7d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d7d4:	2202      	movs	r2, #2
 801d7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7da:	2112      	movs	r1, #18
 801d7dc:	f7ff bf86 	b.w	801d6ec <std>
 801d7e0:	2001a2ec 	.word	0x2001a2ec
 801d7e4:	2001a1b4 	.word	0x2001a1b4
 801d7e8:	0801d759 	.word	0x0801d759

0801d7ec <__sfp_lock_acquire>:
 801d7ec:	4801      	ldr	r0, [pc, #4]	@ (801d7f4 <__sfp_lock_acquire+0x8>)
 801d7ee:	f000 bb9e 	b.w	801df2e <__retarget_lock_acquire_recursive>
 801d7f2:	bf00      	nop
 801d7f4:	2001a2f6 	.word	0x2001a2f6

0801d7f8 <__sfp_lock_release>:
 801d7f8:	4801      	ldr	r0, [pc, #4]	@ (801d800 <__sfp_lock_release+0x8>)
 801d7fa:	f000 bb99 	b.w	801df30 <__retarget_lock_release_recursive>
 801d7fe:	bf00      	nop
 801d800:	2001a2f6 	.word	0x2001a2f6

0801d804 <__sinit>:
 801d804:	b510      	push	{r4, lr}
 801d806:	4604      	mov	r4, r0
 801d808:	f7ff fff0 	bl	801d7ec <__sfp_lock_acquire>
 801d80c:	6a23      	ldr	r3, [r4, #32]
 801d80e:	b11b      	cbz	r3, 801d818 <__sinit+0x14>
 801d810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d814:	f7ff bff0 	b.w	801d7f8 <__sfp_lock_release>
 801d818:	4b04      	ldr	r3, [pc, #16]	@ (801d82c <__sinit+0x28>)
 801d81a:	6223      	str	r3, [r4, #32]
 801d81c:	4b04      	ldr	r3, [pc, #16]	@ (801d830 <__sinit+0x2c>)
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d1f5      	bne.n	801d810 <__sinit+0xc>
 801d824:	f7ff ffc4 	bl	801d7b0 <global_stdio_init.part.0>
 801d828:	e7f2      	b.n	801d810 <__sinit+0xc>
 801d82a:	bf00      	nop
 801d82c:	0801d771 	.word	0x0801d771
 801d830:	2001a2ec 	.word	0x2001a2ec

0801d834 <_fwalk_sglue>:
 801d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d838:	4607      	mov	r7, r0
 801d83a:	4688      	mov	r8, r1
 801d83c:	4614      	mov	r4, r2
 801d83e:	2600      	movs	r6, #0
 801d840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d844:	f1b9 0901 	subs.w	r9, r9, #1
 801d848:	d505      	bpl.n	801d856 <_fwalk_sglue+0x22>
 801d84a:	6824      	ldr	r4, [r4, #0]
 801d84c:	2c00      	cmp	r4, #0
 801d84e:	d1f7      	bne.n	801d840 <_fwalk_sglue+0xc>
 801d850:	4630      	mov	r0, r6
 801d852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d856:	89ab      	ldrh	r3, [r5, #12]
 801d858:	2b01      	cmp	r3, #1
 801d85a:	d907      	bls.n	801d86c <_fwalk_sglue+0x38>
 801d85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d860:	3301      	adds	r3, #1
 801d862:	d003      	beq.n	801d86c <_fwalk_sglue+0x38>
 801d864:	4629      	mov	r1, r5
 801d866:	4638      	mov	r0, r7
 801d868:	47c0      	blx	r8
 801d86a:	4306      	orrs	r6, r0
 801d86c:	3568      	adds	r5, #104	@ 0x68
 801d86e:	e7e9      	b.n	801d844 <_fwalk_sglue+0x10>

0801d870 <_fwrite_r>:
 801d870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d874:	9c08      	ldr	r4, [sp, #32]
 801d876:	468a      	mov	sl, r1
 801d878:	4690      	mov	r8, r2
 801d87a:	fb02 f903 	mul.w	r9, r2, r3
 801d87e:	4606      	mov	r6, r0
 801d880:	b118      	cbz	r0, 801d88a <_fwrite_r+0x1a>
 801d882:	6a03      	ldr	r3, [r0, #32]
 801d884:	b90b      	cbnz	r3, 801d88a <_fwrite_r+0x1a>
 801d886:	f7ff ffbd 	bl	801d804 <__sinit>
 801d88a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d88c:	07dd      	lsls	r5, r3, #31
 801d88e:	d405      	bmi.n	801d89c <_fwrite_r+0x2c>
 801d890:	89a3      	ldrh	r3, [r4, #12]
 801d892:	0598      	lsls	r0, r3, #22
 801d894:	d402      	bmi.n	801d89c <_fwrite_r+0x2c>
 801d896:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d898:	f000 fb49 	bl	801df2e <__retarget_lock_acquire_recursive>
 801d89c:	89a3      	ldrh	r3, [r4, #12]
 801d89e:	0719      	lsls	r1, r3, #28
 801d8a0:	d516      	bpl.n	801d8d0 <_fwrite_r+0x60>
 801d8a2:	6923      	ldr	r3, [r4, #16]
 801d8a4:	b1a3      	cbz	r3, 801d8d0 <_fwrite_r+0x60>
 801d8a6:	2500      	movs	r5, #0
 801d8a8:	454d      	cmp	r5, r9
 801d8aa:	d01f      	beq.n	801d8ec <_fwrite_r+0x7c>
 801d8ac:	68a7      	ldr	r7, [r4, #8]
 801d8ae:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d8b2:	3f01      	subs	r7, #1
 801d8b4:	2f00      	cmp	r7, #0
 801d8b6:	60a7      	str	r7, [r4, #8]
 801d8b8:	da04      	bge.n	801d8c4 <_fwrite_r+0x54>
 801d8ba:	69a3      	ldr	r3, [r4, #24]
 801d8bc:	429f      	cmp	r7, r3
 801d8be:	db0f      	blt.n	801d8e0 <_fwrite_r+0x70>
 801d8c0:	290a      	cmp	r1, #10
 801d8c2:	d00d      	beq.n	801d8e0 <_fwrite_r+0x70>
 801d8c4:	6823      	ldr	r3, [r4, #0]
 801d8c6:	1c5a      	adds	r2, r3, #1
 801d8c8:	6022      	str	r2, [r4, #0]
 801d8ca:	7019      	strb	r1, [r3, #0]
 801d8cc:	3501      	adds	r5, #1
 801d8ce:	e7eb      	b.n	801d8a8 <_fwrite_r+0x38>
 801d8d0:	4621      	mov	r1, r4
 801d8d2:	4630      	mov	r0, r6
 801d8d4:	f000 f984 	bl	801dbe0 <__swsetup_r>
 801d8d8:	2800      	cmp	r0, #0
 801d8da:	d0e4      	beq.n	801d8a6 <_fwrite_r+0x36>
 801d8dc:	2500      	movs	r5, #0
 801d8de:	e005      	b.n	801d8ec <_fwrite_r+0x7c>
 801d8e0:	4622      	mov	r2, r4
 801d8e2:	4630      	mov	r0, r6
 801d8e4:	f000 f93e 	bl	801db64 <__swbuf_r>
 801d8e8:	3001      	adds	r0, #1
 801d8ea:	d1ef      	bne.n	801d8cc <_fwrite_r+0x5c>
 801d8ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d8ee:	07da      	lsls	r2, r3, #31
 801d8f0:	d405      	bmi.n	801d8fe <_fwrite_r+0x8e>
 801d8f2:	89a3      	ldrh	r3, [r4, #12]
 801d8f4:	059b      	lsls	r3, r3, #22
 801d8f6:	d402      	bmi.n	801d8fe <_fwrite_r+0x8e>
 801d8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d8fa:	f000 fb19 	bl	801df30 <__retarget_lock_release_recursive>
 801d8fe:	fbb5 f0f8 	udiv	r0, r5, r8
 801d902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d908 <fwrite>:
 801d908:	b507      	push	{r0, r1, r2, lr}
 801d90a:	9300      	str	r3, [sp, #0]
 801d90c:	4613      	mov	r3, r2
 801d90e:	460a      	mov	r2, r1
 801d910:	4601      	mov	r1, r0
 801d912:	4803      	ldr	r0, [pc, #12]	@ (801d920 <fwrite+0x18>)
 801d914:	6800      	ldr	r0, [r0, #0]
 801d916:	f7ff ffab 	bl	801d870 <_fwrite_r>
 801d91a:	b003      	add	sp, #12
 801d91c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d920:	20001bf4 	.word	0x20001bf4

0801d924 <iprintf>:
 801d924:	b40f      	push	{r0, r1, r2, r3}
 801d926:	b507      	push	{r0, r1, r2, lr}
 801d928:	4906      	ldr	r1, [pc, #24]	@ (801d944 <iprintf+0x20>)
 801d92a:	ab04      	add	r3, sp, #16
 801d92c:	6808      	ldr	r0, [r1, #0]
 801d92e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d932:	6881      	ldr	r1, [r0, #8]
 801d934:	9301      	str	r3, [sp, #4]
 801d936:	f000 fd11 	bl	801e35c <_vfiprintf_r>
 801d93a:	b003      	add	sp, #12
 801d93c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d940:	b004      	add	sp, #16
 801d942:	4770      	bx	lr
 801d944:	20001bf4 	.word	0x20001bf4

0801d948 <_puts_r>:
 801d948:	6a03      	ldr	r3, [r0, #32]
 801d94a:	b570      	push	{r4, r5, r6, lr}
 801d94c:	6884      	ldr	r4, [r0, #8]
 801d94e:	4605      	mov	r5, r0
 801d950:	460e      	mov	r6, r1
 801d952:	b90b      	cbnz	r3, 801d958 <_puts_r+0x10>
 801d954:	f7ff ff56 	bl	801d804 <__sinit>
 801d958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d95a:	07db      	lsls	r3, r3, #31
 801d95c:	d405      	bmi.n	801d96a <_puts_r+0x22>
 801d95e:	89a3      	ldrh	r3, [r4, #12]
 801d960:	0598      	lsls	r0, r3, #22
 801d962:	d402      	bmi.n	801d96a <_puts_r+0x22>
 801d964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d966:	f000 fae2 	bl	801df2e <__retarget_lock_acquire_recursive>
 801d96a:	89a3      	ldrh	r3, [r4, #12]
 801d96c:	0719      	lsls	r1, r3, #28
 801d96e:	d502      	bpl.n	801d976 <_puts_r+0x2e>
 801d970:	6923      	ldr	r3, [r4, #16]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d135      	bne.n	801d9e2 <_puts_r+0x9a>
 801d976:	4621      	mov	r1, r4
 801d978:	4628      	mov	r0, r5
 801d97a:	f000 f931 	bl	801dbe0 <__swsetup_r>
 801d97e:	b380      	cbz	r0, 801d9e2 <_puts_r+0x9a>
 801d980:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801d984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d986:	07da      	lsls	r2, r3, #31
 801d988:	d405      	bmi.n	801d996 <_puts_r+0x4e>
 801d98a:	89a3      	ldrh	r3, [r4, #12]
 801d98c:	059b      	lsls	r3, r3, #22
 801d98e:	d402      	bmi.n	801d996 <_puts_r+0x4e>
 801d990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d992:	f000 facd 	bl	801df30 <__retarget_lock_release_recursive>
 801d996:	4628      	mov	r0, r5
 801d998:	bd70      	pop	{r4, r5, r6, pc}
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	da04      	bge.n	801d9a8 <_puts_r+0x60>
 801d99e:	69a2      	ldr	r2, [r4, #24]
 801d9a0:	429a      	cmp	r2, r3
 801d9a2:	dc17      	bgt.n	801d9d4 <_puts_r+0x8c>
 801d9a4:	290a      	cmp	r1, #10
 801d9a6:	d015      	beq.n	801d9d4 <_puts_r+0x8c>
 801d9a8:	6823      	ldr	r3, [r4, #0]
 801d9aa:	1c5a      	adds	r2, r3, #1
 801d9ac:	6022      	str	r2, [r4, #0]
 801d9ae:	7019      	strb	r1, [r3, #0]
 801d9b0:	68a3      	ldr	r3, [r4, #8]
 801d9b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d9b6:	3b01      	subs	r3, #1
 801d9b8:	60a3      	str	r3, [r4, #8]
 801d9ba:	2900      	cmp	r1, #0
 801d9bc:	d1ed      	bne.n	801d99a <_puts_r+0x52>
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	da11      	bge.n	801d9e6 <_puts_r+0x9e>
 801d9c2:	4622      	mov	r2, r4
 801d9c4:	210a      	movs	r1, #10
 801d9c6:	4628      	mov	r0, r5
 801d9c8:	f000 f8cc 	bl	801db64 <__swbuf_r>
 801d9cc:	3001      	adds	r0, #1
 801d9ce:	d0d7      	beq.n	801d980 <_puts_r+0x38>
 801d9d0:	250a      	movs	r5, #10
 801d9d2:	e7d7      	b.n	801d984 <_puts_r+0x3c>
 801d9d4:	4622      	mov	r2, r4
 801d9d6:	4628      	mov	r0, r5
 801d9d8:	f000 f8c4 	bl	801db64 <__swbuf_r>
 801d9dc:	3001      	adds	r0, #1
 801d9de:	d1e7      	bne.n	801d9b0 <_puts_r+0x68>
 801d9e0:	e7ce      	b.n	801d980 <_puts_r+0x38>
 801d9e2:	3e01      	subs	r6, #1
 801d9e4:	e7e4      	b.n	801d9b0 <_puts_r+0x68>
 801d9e6:	6823      	ldr	r3, [r4, #0]
 801d9e8:	1c5a      	adds	r2, r3, #1
 801d9ea:	6022      	str	r2, [r4, #0]
 801d9ec:	220a      	movs	r2, #10
 801d9ee:	701a      	strb	r2, [r3, #0]
 801d9f0:	e7ee      	b.n	801d9d0 <_puts_r+0x88>
	...

0801d9f4 <puts>:
 801d9f4:	4b02      	ldr	r3, [pc, #8]	@ (801da00 <puts+0xc>)
 801d9f6:	4601      	mov	r1, r0
 801d9f8:	6818      	ldr	r0, [r3, #0]
 801d9fa:	f7ff bfa5 	b.w	801d948 <_puts_r>
 801d9fe:	bf00      	nop
 801da00:	20001bf4 	.word	0x20001bf4

0801da04 <sniprintf>:
 801da04:	b40c      	push	{r2, r3}
 801da06:	b530      	push	{r4, r5, lr}
 801da08:	4b17      	ldr	r3, [pc, #92]	@ (801da68 <sniprintf+0x64>)
 801da0a:	1e0c      	subs	r4, r1, #0
 801da0c:	681d      	ldr	r5, [r3, #0]
 801da0e:	b09d      	sub	sp, #116	@ 0x74
 801da10:	da08      	bge.n	801da24 <sniprintf+0x20>
 801da12:	238b      	movs	r3, #139	@ 0x8b
 801da14:	602b      	str	r3, [r5, #0]
 801da16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da1a:	b01d      	add	sp, #116	@ 0x74
 801da1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da20:	b002      	add	sp, #8
 801da22:	4770      	bx	lr
 801da24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801da28:	f8ad 3014 	strh.w	r3, [sp, #20]
 801da2c:	bf14      	ite	ne
 801da2e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801da32:	4623      	moveq	r3, r4
 801da34:	9304      	str	r3, [sp, #16]
 801da36:	9307      	str	r3, [sp, #28]
 801da38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801da3c:	9002      	str	r0, [sp, #8]
 801da3e:	9006      	str	r0, [sp, #24]
 801da40:	f8ad 3016 	strh.w	r3, [sp, #22]
 801da44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801da46:	ab21      	add	r3, sp, #132	@ 0x84
 801da48:	a902      	add	r1, sp, #8
 801da4a:	4628      	mov	r0, r5
 801da4c:	9301      	str	r3, [sp, #4]
 801da4e:	f000 fb5f 	bl	801e110 <_svfiprintf_r>
 801da52:	1c43      	adds	r3, r0, #1
 801da54:	bfbc      	itt	lt
 801da56:	238b      	movlt	r3, #139	@ 0x8b
 801da58:	602b      	strlt	r3, [r5, #0]
 801da5a:	2c00      	cmp	r4, #0
 801da5c:	d0dd      	beq.n	801da1a <sniprintf+0x16>
 801da5e:	9b02      	ldr	r3, [sp, #8]
 801da60:	2200      	movs	r2, #0
 801da62:	701a      	strb	r2, [r3, #0]
 801da64:	e7d9      	b.n	801da1a <sniprintf+0x16>
 801da66:	bf00      	nop
 801da68:	20001bf4 	.word	0x20001bf4

0801da6c <__sread>:
 801da6c:	b510      	push	{r4, lr}
 801da6e:	460c      	mov	r4, r1
 801da70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da74:	f000 f9fc 	bl	801de70 <_read_r>
 801da78:	2800      	cmp	r0, #0
 801da7a:	bfab      	itete	ge
 801da7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801da7e:	89a3      	ldrhlt	r3, [r4, #12]
 801da80:	181b      	addge	r3, r3, r0
 801da82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801da86:	bfac      	ite	ge
 801da88:	6563      	strge	r3, [r4, #84]	@ 0x54
 801da8a:	81a3      	strhlt	r3, [r4, #12]
 801da8c:	bd10      	pop	{r4, pc}

0801da8e <__swrite>:
 801da8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da92:	461f      	mov	r7, r3
 801da94:	898b      	ldrh	r3, [r1, #12]
 801da96:	05db      	lsls	r3, r3, #23
 801da98:	4605      	mov	r5, r0
 801da9a:	460c      	mov	r4, r1
 801da9c:	4616      	mov	r6, r2
 801da9e:	d505      	bpl.n	801daac <__swrite+0x1e>
 801daa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801daa4:	2302      	movs	r3, #2
 801daa6:	2200      	movs	r2, #0
 801daa8:	f000 f9d0 	bl	801de4c <_lseek_r>
 801daac:	89a3      	ldrh	r3, [r4, #12]
 801daae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dab6:	81a3      	strh	r3, [r4, #12]
 801dab8:	4632      	mov	r2, r6
 801daba:	463b      	mov	r3, r7
 801dabc:	4628      	mov	r0, r5
 801dabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dac2:	f000 b9f7 	b.w	801deb4 <_write_r>

0801dac6 <__sseek>:
 801dac6:	b510      	push	{r4, lr}
 801dac8:	460c      	mov	r4, r1
 801daca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dace:	f000 f9bd 	bl	801de4c <_lseek_r>
 801dad2:	1c43      	adds	r3, r0, #1
 801dad4:	89a3      	ldrh	r3, [r4, #12]
 801dad6:	bf15      	itete	ne
 801dad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801dada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801dade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801dae2:	81a3      	strheq	r3, [r4, #12]
 801dae4:	bf18      	it	ne
 801dae6:	81a3      	strhne	r3, [r4, #12]
 801dae8:	bd10      	pop	{r4, pc}

0801daea <__sclose>:
 801daea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801daee:	f000 b947 	b.w	801dd80 <_close_r>

0801daf2 <_vsniprintf_r>:
 801daf2:	b530      	push	{r4, r5, lr}
 801daf4:	4614      	mov	r4, r2
 801daf6:	2c00      	cmp	r4, #0
 801daf8:	b09b      	sub	sp, #108	@ 0x6c
 801dafa:	4605      	mov	r5, r0
 801dafc:	461a      	mov	r2, r3
 801dafe:	da05      	bge.n	801db0c <_vsniprintf_r+0x1a>
 801db00:	238b      	movs	r3, #139	@ 0x8b
 801db02:	6003      	str	r3, [r0, #0]
 801db04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801db08:	b01b      	add	sp, #108	@ 0x6c
 801db0a:	bd30      	pop	{r4, r5, pc}
 801db0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801db10:	f8ad 300c 	strh.w	r3, [sp, #12]
 801db14:	bf14      	ite	ne
 801db16:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801db1a:	4623      	moveq	r3, r4
 801db1c:	9302      	str	r3, [sp, #8]
 801db1e:	9305      	str	r3, [sp, #20]
 801db20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801db24:	9100      	str	r1, [sp, #0]
 801db26:	9104      	str	r1, [sp, #16]
 801db28:	f8ad 300e 	strh.w	r3, [sp, #14]
 801db2c:	4669      	mov	r1, sp
 801db2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801db30:	f000 faee 	bl	801e110 <_svfiprintf_r>
 801db34:	1c43      	adds	r3, r0, #1
 801db36:	bfbc      	itt	lt
 801db38:	238b      	movlt	r3, #139	@ 0x8b
 801db3a:	602b      	strlt	r3, [r5, #0]
 801db3c:	2c00      	cmp	r4, #0
 801db3e:	d0e3      	beq.n	801db08 <_vsniprintf_r+0x16>
 801db40:	9b00      	ldr	r3, [sp, #0]
 801db42:	2200      	movs	r2, #0
 801db44:	701a      	strb	r2, [r3, #0]
 801db46:	e7df      	b.n	801db08 <_vsniprintf_r+0x16>

0801db48 <vsniprintf>:
 801db48:	b507      	push	{r0, r1, r2, lr}
 801db4a:	9300      	str	r3, [sp, #0]
 801db4c:	4613      	mov	r3, r2
 801db4e:	460a      	mov	r2, r1
 801db50:	4601      	mov	r1, r0
 801db52:	4803      	ldr	r0, [pc, #12]	@ (801db60 <vsniprintf+0x18>)
 801db54:	6800      	ldr	r0, [r0, #0]
 801db56:	f7ff ffcc 	bl	801daf2 <_vsniprintf_r>
 801db5a:	b003      	add	sp, #12
 801db5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801db60:	20001bf4 	.word	0x20001bf4

0801db64 <__swbuf_r>:
 801db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db66:	460e      	mov	r6, r1
 801db68:	4614      	mov	r4, r2
 801db6a:	4605      	mov	r5, r0
 801db6c:	b118      	cbz	r0, 801db76 <__swbuf_r+0x12>
 801db6e:	6a03      	ldr	r3, [r0, #32]
 801db70:	b90b      	cbnz	r3, 801db76 <__swbuf_r+0x12>
 801db72:	f7ff fe47 	bl	801d804 <__sinit>
 801db76:	69a3      	ldr	r3, [r4, #24]
 801db78:	60a3      	str	r3, [r4, #8]
 801db7a:	89a3      	ldrh	r3, [r4, #12]
 801db7c:	071a      	lsls	r2, r3, #28
 801db7e:	d501      	bpl.n	801db84 <__swbuf_r+0x20>
 801db80:	6923      	ldr	r3, [r4, #16]
 801db82:	b943      	cbnz	r3, 801db96 <__swbuf_r+0x32>
 801db84:	4621      	mov	r1, r4
 801db86:	4628      	mov	r0, r5
 801db88:	f000 f82a 	bl	801dbe0 <__swsetup_r>
 801db8c:	b118      	cbz	r0, 801db96 <__swbuf_r+0x32>
 801db8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801db92:	4638      	mov	r0, r7
 801db94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db96:	6823      	ldr	r3, [r4, #0]
 801db98:	6922      	ldr	r2, [r4, #16]
 801db9a:	1a98      	subs	r0, r3, r2
 801db9c:	6963      	ldr	r3, [r4, #20]
 801db9e:	b2f6      	uxtb	r6, r6
 801dba0:	4283      	cmp	r3, r0
 801dba2:	4637      	mov	r7, r6
 801dba4:	dc05      	bgt.n	801dbb2 <__swbuf_r+0x4e>
 801dba6:	4621      	mov	r1, r4
 801dba8:	4628      	mov	r0, r5
 801dbaa:	f000 ff01 	bl	801e9b0 <_fflush_r>
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	d1ed      	bne.n	801db8e <__swbuf_r+0x2a>
 801dbb2:	68a3      	ldr	r3, [r4, #8]
 801dbb4:	3b01      	subs	r3, #1
 801dbb6:	60a3      	str	r3, [r4, #8]
 801dbb8:	6823      	ldr	r3, [r4, #0]
 801dbba:	1c5a      	adds	r2, r3, #1
 801dbbc:	6022      	str	r2, [r4, #0]
 801dbbe:	701e      	strb	r6, [r3, #0]
 801dbc0:	6962      	ldr	r2, [r4, #20]
 801dbc2:	1c43      	adds	r3, r0, #1
 801dbc4:	429a      	cmp	r2, r3
 801dbc6:	d004      	beq.n	801dbd2 <__swbuf_r+0x6e>
 801dbc8:	89a3      	ldrh	r3, [r4, #12]
 801dbca:	07db      	lsls	r3, r3, #31
 801dbcc:	d5e1      	bpl.n	801db92 <__swbuf_r+0x2e>
 801dbce:	2e0a      	cmp	r6, #10
 801dbd0:	d1df      	bne.n	801db92 <__swbuf_r+0x2e>
 801dbd2:	4621      	mov	r1, r4
 801dbd4:	4628      	mov	r0, r5
 801dbd6:	f000 feeb 	bl	801e9b0 <_fflush_r>
 801dbda:	2800      	cmp	r0, #0
 801dbdc:	d0d9      	beq.n	801db92 <__swbuf_r+0x2e>
 801dbde:	e7d6      	b.n	801db8e <__swbuf_r+0x2a>

0801dbe0 <__swsetup_r>:
 801dbe0:	b538      	push	{r3, r4, r5, lr}
 801dbe2:	4b29      	ldr	r3, [pc, #164]	@ (801dc88 <__swsetup_r+0xa8>)
 801dbe4:	4605      	mov	r5, r0
 801dbe6:	6818      	ldr	r0, [r3, #0]
 801dbe8:	460c      	mov	r4, r1
 801dbea:	b118      	cbz	r0, 801dbf4 <__swsetup_r+0x14>
 801dbec:	6a03      	ldr	r3, [r0, #32]
 801dbee:	b90b      	cbnz	r3, 801dbf4 <__swsetup_r+0x14>
 801dbf0:	f7ff fe08 	bl	801d804 <__sinit>
 801dbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbf8:	0719      	lsls	r1, r3, #28
 801dbfa:	d422      	bmi.n	801dc42 <__swsetup_r+0x62>
 801dbfc:	06da      	lsls	r2, r3, #27
 801dbfe:	d407      	bmi.n	801dc10 <__swsetup_r+0x30>
 801dc00:	2209      	movs	r2, #9
 801dc02:	602a      	str	r2, [r5, #0]
 801dc04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc08:	81a3      	strh	r3, [r4, #12]
 801dc0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc0e:	e033      	b.n	801dc78 <__swsetup_r+0x98>
 801dc10:	0758      	lsls	r0, r3, #29
 801dc12:	d512      	bpl.n	801dc3a <__swsetup_r+0x5a>
 801dc14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dc16:	b141      	cbz	r1, 801dc2a <__swsetup_r+0x4a>
 801dc18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dc1c:	4299      	cmp	r1, r3
 801dc1e:	d002      	beq.n	801dc26 <__swsetup_r+0x46>
 801dc20:	4628      	mov	r0, r5
 801dc22:	f000 f9c7 	bl	801dfb4 <_free_r>
 801dc26:	2300      	movs	r3, #0
 801dc28:	6363      	str	r3, [r4, #52]	@ 0x34
 801dc2a:	89a3      	ldrh	r3, [r4, #12]
 801dc2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dc30:	81a3      	strh	r3, [r4, #12]
 801dc32:	2300      	movs	r3, #0
 801dc34:	6063      	str	r3, [r4, #4]
 801dc36:	6923      	ldr	r3, [r4, #16]
 801dc38:	6023      	str	r3, [r4, #0]
 801dc3a:	89a3      	ldrh	r3, [r4, #12]
 801dc3c:	f043 0308 	orr.w	r3, r3, #8
 801dc40:	81a3      	strh	r3, [r4, #12]
 801dc42:	6923      	ldr	r3, [r4, #16]
 801dc44:	b94b      	cbnz	r3, 801dc5a <__swsetup_r+0x7a>
 801dc46:	89a3      	ldrh	r3, [r4, #12]
 801dc48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dc4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dc50:	d003      	beq.n	801dc5a <__swsetup_r+0x7a>
 801dc52:	4621      	mov	r1, r4
 801dc54:	4628      	mov	r0, r5
 801dc56:	f000 ff0b 	bl	801ea70 <__smakebuf_r>
 801dc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc5e:	f013 0201 	ands.w	r2, r3, #1
 801dc62:	d00a      	beq.n	801dc7a <__swsetup_r+0x9a>
 801dc64:	2200      	movs	r2, #0
 801dc66:	60a2      	str	r2, [r4, #8]
 801dc68:	6962      	ldr	r2, [r4, #20]
 801dc6a:	4252      	negs	r2, r2
 801dc6c:	61a2      	str	r2, [r4, #24]
 801dc6e:	6922      	ldr	r2, [r4, #16]
 801dc70:	b942      	cbnz	r2, 801dc84 <__swsetup_r+0xa4>
 801dc72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dc76:	d1c5      	bne.n	801dc04 <__swsetup_r+0x24>
 801dc78:	bd38      	pop	{r3, r4, r5, pc}
 801dc7a:	0799      	lsls	r1, r3, #30
 801dc7c:	bf58      	it	pl
 801dc7e:	6962      	ldrpl	r2, [r4, #20]
 801dc80:	60a2      	str	r2, [r4, #8]
 801dc82:	e7f4      	b.n	801dc6e <__swsetup_r+0x8e>
 801dc84:	2000      	movs	r0, #0
 801dc86:	e7f7      	b.n	801dc78 <__swsetup_r+0x98>
 801dc88:	20001bf4 	.word	0x20001bf4

0801dc8c <memcmp>:
 801dc8c:	b510      	push	{r4, lr}
 801dc8e:	3901      	subs	r1, #1
 801dc90:	4402      	add	r2, r0
 801dc92:	4290      	cmp	r0, r2
 801dc94:	d101      	bne.n	801dc9a <memcmp+0xe>
 801dc96:	2000      	movs	r0, #0
 801dc98:	e005      	b.n	801dca6 <memcmp+0x1a>
 801dc9a:	7803      	ldrb	r3, [r0, #0]
 801dc9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dca0:	42a3      	cmp	r3, r4
 801dca2:	d001      	beq.n	801dca8 <memcmp+0x1c>
 801dca4:	1b18      	subs	r0, r3, r4
 801dca6:	bd10      	pop	{r4, pc}
 801dca8:	3001      	adds	r0, #1
 801dcaa:	e7f2      	b.n	801dc92 <memcmp+0x6>

0801dcac <memmove>:
 801dcac:	4288      	cmp	r0, r1
 801dcae:	b510      	push	{r4, lr}
 801dcb0:	eb01 0402 	add.w	r4, r1, r2
 801dcb4:	d902      	bls.n	801dcbc <memmove+0x10>
 801dcb6:	4284      	cmp	r4, r0
 801dcb8:	4623      	mov	r3, r4
 801dcba:	d807      	bhi.n	801dccc <memmove+0x20>
 801dcbc:	1e43      	subs	r3, r0, #1
 801dcbe:	42a1      	cmp	r1, r4
 801dcc0:	d008      	beq.n	801dcd4 <memmove+0x28>
 801dcc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dcc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dcca:	e7f8      	b.n	801dcbe <memmove+0x12>
 801dccc:	4402      	add	r2, r0
 801dcce:	4601      	mov	r1, r0
 801dcd0:	428a      	cmp	r2, r1
 801dcd2:	d100      	bne.n	801dcd6 <memmove+0x2a>
 801dcd4:	bd10      	pop	{r4, pc}
 801dcd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dcda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dcde:	e7f7      	b.n	801dcd0 <memmove+0x24>

0801dce0 <memset>:
 801dce0:	4402      	add	r2, r0
 801dce2:	4603      	mov	r3, r0
 801dce4:	4293      	cmp	r3, r2
 801dce6:	d100      	bne.n	801dcea <memset+0xa>
 801dce8:	4770      	bx	lr
 801dcea:	f803 1b01 	strb.w	r1, [r3], #1
 801dcee:	e7f9      	b.n	801dce4 <memset+0x4>

0801dcf0 <strchr>:
 801dcf0:	b2c9      	uxtb	r1, r1
 801dcf2:	4603      	mov	r3, r0
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcfa:	b112      	cbz	r2, 801dd02 <strchr+0x12>
 801dcfc:	428a      	cmp	r2, r1
 801dcfe:	d1f9      	bne.n	801dcf4 <strchr+0x4>
 801dd00:	4770      	bx	lr
 801dd02:	2900      	cmp	r1, #0
 801dd04:	bf18      	it	ne
 801dd06:	2000      	movne	r0, #0
 801dd08:	4770      	bx	lr

0801dd0a <strncmp>:
 801dd0a:	b510      	push	{r4, lr}
 801dd0c:	b16a      	cbz	r2, 801dd2a <strncmp+0x20>
 801dd0e:	3901      	subs	r1, #1
 801dd10:	1884      	adds	r4, r0, r2
 801dd12:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801dd1a:	429a      	cmp	r2, r3
 801dd1c:	d103      	bne.n	801dd26 <strncmp+0x1c>
 801dd1e:	42a0      	cmp	r0, r4
 801dd20:	d001      	beq.n	801dd26 <strncmp+0x1c>
 801dd22:	2a00      	cmp	r2, #0
 801dd24:	d1f5      	bne.n	801dd12 <strncmp+0x8>
 801dd26:	1ad0      	subs	r0, r2, r3
 801dd28:	bd10      	pop	{r4, pc}
 801dd2a:	4610      	mov	r0, r2
 801dd2c:	e7fc      	b.n	801dd28 <strncmp+0x1e>

0801dd2e <strncpy>:
 801dd2e:	b510      	push	{r4, lr}
 801dd30:	3901      	subs	r1, #1
 801dd32:	4603      	mov	r3, r0
 801dd34:	b132      	cbz	r2, 801dd44 <strncpy+0x16>
 801dd36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dd3a:	f803 4b01 	strb.w	r4, [r3], #1
 801dd3e:	3a01      	subs	r2, #1
 801dd40:	2c00      	cmp	r4, #0
 801dd42:	d1f7      	bne.n	801dd34 <strncpy+0x6>
 801dd44:	441a      	add	r2, r3
 801dd46:	2100      	movs	r1, #0
 801dd48:	4293      	cmp	r3, r2
 801dd4a:	d100      	bne.n	801dd4e <strncpy+0x20>
 801dd4c:	bd10      	pop	{r4, pc}
 801dd4e:	f803 1b01 	strb.w	r1, [r3], #1
 801dd52:	e7f9      	b.n	801dd48 <strncpy+0x1a>

0801dd54 <strstr>:
 801dd54:	780a      	ldrb	r2, [r1, #0]
 801dd56:	b570      	push	{r4, r5, r6, lr}
 801dd58:	b96a      	cbnz	r2, 801dd76 <strstr+0x22>
 801dd5a:	bd70      	pop	{r4, r5, r6, pc}
 801dd5c:	429a      	cmp	r2, r3
 801dd5e:	d109      	bne.n	801dd74 <strstr+0x20>
 801dd60:	460c      	mov	r4, r1
 801dd62:	4605      	mov	r5, r0
 801dd64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d0f6      	beq.n	801dd5a <strstr+0x6>
 801dd6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801dd70:	429e      	cmp	r6, r3
 801dd72:	d0f7      	beq.n	801dd64 <strstr+0x10>
 801dd74:	3001      	adds	r0, #1
 801dd76:	7803      	ldrb	r3, [r0, #0]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d1ef      	bne.n	801dd5c <strstr+0x8>
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	e7ec      	b.n	801dd5a <strstr+0x6>

0801dd80 <_close_r>:
 801dd80:	b538      	push	{r3, r4, r5, lr}
 801dd82:	4d06      	ldr	r5, [pc, #24]	@ (801dd9c <_close_r+0x1c>)
 801dd84:	2300      	movs	r3, #0
 801dd86:	4604      	mov	r4, r0
 801dd88:	4608      	mov	r0, r1
 801dd8a:	602b      	str	r3, [r5, #0]
 801dd8c:	f7e5 fc52 	bl	8003634 <_close>
 801dd90:	1c43      	adds	r3, r0, #1
 801dd92:	d102      	bne.n	801dd9a <_close_r+0x1a>
 801dd94:	682b      	ldr	r3, [r5, #0]
 801dd96:	b103      	cbz	r3, 801dd9a <_close_r+0x1a>
 801dd98:	6023      	str	r3, [r4, #0]
 801dd9a:	bd38      	pop	{r3, r4, r5, pc}
 801dd9c:	2001a2f0 	.word	0x2001a2f0

0801dda0 <_reclaim_reent>:
 801dda0:	4b29      	ldr	r3, [pc, #164]	@ (801de48 <_reclaim_reent+0xa8>)
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	4283      	cmp	r3, r0
 801dda6:	b570      	push	{r4, r5, r6, lr}
 801dda8:	4604      	mov	r4, r0
 801ddaa:	d04b      	beq.n	801de44 <_reclaim_reent+0xa4>
 801ddac:	69c3      	ldr	r3, [r0, #28]
 801ddae:	b1ab      	cbz	r3, 801dddc <_reclaim_reent+0x3c>
 801ddb0:	68db      	ldr	r3, [r3, #12]
 801ddb2:	b16b      	cbz	r3, 801ddd0 <_reclaim_reent+0x30>
 801ddb4:	2500      	movs	r5, #0
 801ddb6:	69e3      	ldr	r3, [r4, #28]
 801ddb8:	68db      	ldr	r3, [r3, #12]
 801ddba:	5959      	ldr	r1, [r3, r5]
 801ddbc:	2900      	cmp	r1, #0
 801ddbe:	d13b      	bne.n	801de38 <_reclaim_reent+0x98>
 801ddc0:	3504      	adds	r5, #4
 801ddc2:	2d80      	cmp	r5, #128	@ 0x80
 801ddc4:	d1f7      	bne.n	801ddb6 <_reclaim_reent+0x16>
 801ddc6:	69e3      	ldr	r3, [r4, #28]
 801ddc8:	4620      	mov	r0, r4
 801ddca:	68d9      	ldr	r1, [r3, #12]
 801ddcc:	f000 f8f2 	bl	801dfb4 <_free_r>
 801ddd0:	69e3      	ldr	r3, [r4, #28]
 801ddd2:	6819      	ldr	r1, [r3, #0]
 801ddd4:	b111      	cbz	r1, 801dddc <_reclaim_reent+0x3c>
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	f000 f8ec 	bl	801dfb4 <_free_r>
 801dddc:	6961      	ldr	r1, [r4, #20]
 801ddde:	b111      	cbz	r1, 801dde6 <_reclaim_reent+0x46>
 801dde0:	4620      	mov	r0, r4
 801dde2:	f000 f8e7 	bl	801dfb4 <_free_r>
 801dde6:	69e1      	ldr	r1, [r4, #28]
 801dde8:	b111      	cbz	r1, 801ddf0 <_reclaim_reent+0x50>
 801ddea:	4620      	mov	r0, r4
 801ddec:	f000 f8e2 	bl	801dfb4 <_free_r>
 801ddf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ddf2:	b111      	cbz	r1, 801ddfa <_reclaim_reent+0x5a>
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f000 f8dd 	bl	801dfb4 <_free_r>
 801ddfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ddfc:	b111      	cbz	r1, 801de04 <_reclaim_reent+0x64>
 801ddfe:	4620      	mov	r0, r4
 801de00:	f000 f8d8 	bl	801dfb4 <_free_r>
 801de04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801de06:	b111      	cbz	r1, 801de0e <_reclaim_reent+0x6e>
 801de08:	4620      	mov	r0, r4
 801de0a:	f000 f8d3 	bl	801dfb4 <_free_r>
 801de0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801de10:	b111      	cbz	r1, 801de18 <_reclaim_reent+0x78>
 801de12:	4620      	mov	r0, r4
 801de14:	f000 f8ce 	bl	801dfb4 <_free_r>
 801de18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801de1a:	b111      	cbz	r1, 801de22 <_reclaim_reent+0x82>
 801de1c:	4620      	mov	r0, r4
 801de1e:	f000 f8c9 	bl	801dfb4 <_free_r>
 801de22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801de24:	b111      	cbz	r1, 801de2c <_reclaim_reent+0x8c>
 801de26:	4620      	mov	r0, r4
 801de28:	f000 f8c4 	bl	801dfb4 <_free_r>
 801de2c:	6a23      	ldr	r3, [r4, #32]
 801de2e:	b14b      	cbz	r3, 801de44 <_reclaim_reent+0xa4>
 801de30:	4620      	mov	r0, r4
 801de32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de36:	4718      	bx	r3
 801de38:	680e      	ldr	r6, [r1, #0]
 801de3a:	4620      	mov	r0, r4
 801de3c:	f000 f8ba 	bl	801dfb4 <_free_r>
 801de40:	4631      	mov	r1, r6
 801de42:	e7bb      	b.n	801ddbc <_reclaim_reent+0x1c>
 801de44:	bd70      	pop	{r4, r5, r6, pc}
 801de46:	bf00      	nop
 801de48:	20001bf4 	.word	0x20001bf4

0801de4c <_lseek_r>:
 801de4c:	b538      	push	{r3, r4, r5, lr}
 801de4e:	4d07      	ldr	r5, [pc, #28]	@ (801de6c <_lseek_r+0x20>)
 801de50:	4604      	mov	r4, r0
 801de52:	4608      	mov	r0, r1
 801de54:	4611      	mov	r1, r2
 801de56:	2200      	movs	r2, #0
 801de58:	602a      	str	r2, [r5, #0]
 801de5a:	461a      	mov	r2, r3
 801de5c:	f7e5 fc11 	bl	8003682 <_lseek>
 801de60:	1c43      	adds	r3, r0, #1
 801de62:	d102      	bne.n	801de6a <_lseek_r+0x1e>
 801de64:	682b      	ldr	r3, [r5, #0]
 801de66:	b103      	cbz	r3, 801de6a <_lseek_r+0x1e>
 801de68:	6023      	str	r3, [r4, #0]
 801de6a:	bd38      	pop	{r3, r4, r5, pc}
 801de6c:	2001a2f0 	.word	0x2001a2f0

0801de70 <_read_r>:
 801de70:	b538      	push	{r3, r4, r5, lr}
 801de72:	4d07      	ldr	r5, [pc, #28]	@ (801de90 <_read_r+0x20>)
 801de74:	4604      	mov	r4, r0
 801de76:	4608      	mov	r0, r1
 801de78:	4611      	mov	r1, r2
 801de7a:	2200      	movs	r2, #0
 801de7c:	602a      	str	r2, [r5, #0]
 801de7e:	461a      	mov	r2, r3
 801de80:	f7e5 fbbb 	bl	80035fa <_read>
 801de84:	1c43      	adds	r3, r0, #1
 801de86:	d102      	bne.n	801de8e <_read_r+0x1e>
 801de88:	682b      	ldr	r3, [r5, #0]
 801de8a:	b103      	cbz	r3, 801de8e <_read_r+0x1e>
 801de8c:	6023      	str	r3, [r4, #0]
 801de8e:	bd38      	pop	{r3, r4, r5, pc}
 801de90:	2001a2f0 	.word	0x2001a2f0

0801de94 <_sbrk_r>:
 801de94:	b538      	push	{r3, r4, r5, lr}
 801de96:	4d06      	ldr	r5, [pc, #24]	@ (801deb0 <_sbrk_r+0x1c>)
 801de98:	2300      	movs	r3, #0
 801de9a:	4604      	mov	r4, r0
 801de9c:	4608      	mov	r0, r1
 801de9e:	602b      	str	r3, [r5, #0]
 801dea0:	f7e5 fbfc 	bl	800369c <_sbrk>
 801dea4:	1c43      	adds	r3, r0, #1
 801dea6:	d102      	bne.n	801deae <_sbrk_r+0x1a>
 801dea8:	682b      	ldr	r3, [r5, #0]
 801deaa:	b103      	cbz	r3, 801deae <_sbrk_r+0x1a>
 801deac:	6023      	str	r3, [r4, #0]
 801deae:	bd38      	pop	{r3, r4, r5, pc}
 801deb0:	2001a2f0 	.word	0x2001a2f0

0801deb4 <_write_r>:
 801deb4:	b538      	push	{r3, r4, r5, lr}
 801deb6:	4d07      	ldr	r5, [pc, #28]	@ (801ded4 <_write_r+0x20>)
 801deb8:	4604      	mov	r4, r0
 801deba:	4608      	mov	r0, r1
 801debc:	4611      	mov	r1, r2
 801debe:	2200      	movs	r2, #0
 801dec0:	602a      	str	r2, [r5, #0]
 801dec2:	461a      	mov	r2, r3
 801dec4:	f7e4 f8ac 	bl	8002020 <_write>
 801dec8:	1c43      	adds	r3, r0, #1
 801deca:	d102      	bne.n	801ded2 <_write_r+0x1e>
 801decc:	682b      	ldr	r3, [r5, #0]
 801dece:	b103      	cbz	r3, 801ded2 <_write_r+0x1e>
 801ded0:	6023      	str	r3, [r4, #0]
 801ded2:	bd38      	pop	{r3, r4, r5, pc}
 801ded4:	2001a2f0 	.word	0x2001a2f0

0801ded8 <__errno>:
 801ded8:	4b01      	ldr	r3, [pc, #4]	@ (801dee0 <__errno+0x8>)
 801deda:	6818      	ldr	r0, [r3, #0]
 801dedc:	4770      	bx	lr
 801dede:	bf00      	nop
 801dee0:	20001bf4 	.word	0x20001bf4

0801dee4 <__libc_init_array>:
 801dee4:	b570      	push	{r4, r5, r6, lr}
 801dee6:	4d0d      	ldr	r5, [pc, #52]	@ (801df1c <__libc_init_array+0x38>)
 801dee8:	4c0d      	ldr	r4, [pc, #52]	@ (801df20 <__libc_init_array+0x3c>)
 801deea:	1b64      	subs	r4, r4, r5
 801deec:	10a4      	asrs	r4, r4, #2
 801deee:	2600      	movs	r6, #0
 801def0:	42a6      	cmp	r6, r4
 801def2:	d109      	bne.n	801df08 <__libc_init_array+0x24>
 801def4:	4d0b      	ldr	r5, [pc, #44]	@ (801df24 <__libc_init_array+0x40>)
 801def6:	4c0c      	ldr	r4, [pc, #48]	@ (801df28 <__libc_init_array+0x44>)
 801def8:	f001 ff8a 	bl	801fe10 <_init>
 801defc:	1b64      	subs	r4, r4, r5
 801defe:	10a4      	asrs	r4, r4, #2
 801df00:	2600      	movs	r6, #0
 801df02:	42a6      	cmp	r6, r4
 801df04:	d105      	bne.n	801df12 <__libc_init_array+0x2e>
 801df06:	bd70      	pop	{r4, r5, r6, pc}
 801df08:	f855 3b04 	ldr.w	r3, [r5], #4
 801df0c:	4798      	blx	r3
 801df0e:	3601      	adds	r6, #1
 801df10:	e7ee      	b.n	801def0 <__libc_init_array+0xc>
 801df12:	f855 3b04 	ldr.w	r3, [r5], #4
 801df16:	4798      	blx	r3
 801df18:	3601      	adds	r6, #1
 801df1a:	e7f2      	b.n	801df02 <__libc_init_array+0x1e>
 801df1c:	08021860 	.word	0x08021860
 801df20:	08021860 	.word	0x08021860
 801df24:	08021860 	.word	0x08021860
 801df28:	0802186c 	.word	0x0802186c

0801df2c <__retarget_lock_init_recursive>:
 801df2c:	4770      	bx	lr

0801df2e <__retarget_lock_acquire_recursive>:
 801df2e:	4770      	bx	lr

0801df30 <__retarget_lock_release_recursive>:
 801df30:	4770      	bx	lr

0801df32 <strcpy>:
 801df32:	4603      	mov	r3, r0
 801df34:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df38:	f803 2b01 	strb.w	r2, [r3], #1
 801df3c:	2a00      	cmp	r2, #0
 801df3e:	d1f9      	bne.n	801df34 <strcpy+0x2>
 801df40:	4770      	bx	lr

0801df42 <memcpy>:
 801df42:	440a      	add	r2, r1
 801df44:	4291      	cmp	r1, r2
 801df46:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801df4a:	d100      	bne.n	801df4e <memcpy+0xc>
 801df4c:	4770      	bx	lr
 801df4e:	b510      	push	{r4, lr}
 801df50:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df54:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df58:	4291      	cmp	r1, r2
 801df5a:	d1f9      	bne.n	801df50 <memcpy+0xe>
 801df5c:	bd10      	pop	{r4, pc}
	...

0801df60 <__assert_func>:
 801df60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df62:	4614      	mov	r4, r2
 801df64:	461a      	mov	r2, r3
 801df66:	4b09      	ldr	r3, [pc, #36]	@ (801df8c <__assert_func+0x2c>)
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	4605      	mov	r5, r0
 801df6c:	68d8      	ldr	r0, [r3, #12]
 801df6e:	b954      	cbnz	r4, 801df86 <__assert_func+0x26>
 801df70:	4b07      	ldr	r3, [pc, #28]	@ (801df90 <__assert_func+0x30>)
 801df72:	461c      	mov	r4, r3
 801df74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801df78:	9100      	str	r1, [sp, #0]
 801df7a:	462b      	mov	r3, r5
 801df7c:	4905      	ldr	r1, [pc, #20]	@ (801df94 <__assert_func+0x34>)
 801df7e:	f000 fd3f 	bl	801ea00 <fiprintf>
 801df82:	f000 fdd3 	bl	801eb2c <abort>
 801df86:	4b04      	ldr	r3, [pc, #16]	@ (801df98 <__assert_func+0x38>)
 801df88:	e7f4      	b.n	801df74 <__assert_func+0x14>
 801df8a:	bf00      	nop
 801df8c:	20001bf4 	.word	0x20001bf4
 801df90:	080217ad 	.word	0x080217ad
 801df94:	0802177f 	.word	0x0802177f
 801df98:	08021772 	.word	0x08021772

0801df9c <__env_lock>:
 801df9c:	4801      	ldr	r0, [pc, #4]	@ (801dfa4 <__env_lock+0x8>)
 801df9e:	f7ff bfc6 	b.w	801df2e <__retarget_lock_acquire_recursive>
 801dfa2:	bf00      	nop
 801dfa4:	2001a2f4 	.word	0x2001a2f4

0801dfa8 <__env_unlock>:
 801dfa8:	4801      	ldr	r0, [pc, #4]	@ (801dfb0 <__env_unlock+0x8>)
 801dfaa:	f7ff bfc1 	b.w	801df30 <__retarget_lock_release_recursive>
 801dfae:	bf00      	nop
 801dfb0:	2001a2f4 	.word	0x2001a2f4

0801dfb4 <_free_r>:
 801dfb4:	b538      	push	{r3, r4, r5, lr}
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	2900      	cmp	r1, #0
 801dfba:	d041      	beq.n	801e040 <_free_r+0x8c>
 801dfbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfc0:	1f0c      	subs	r4, r1, #4
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	bfb8      	it	lt
 801dfc6:	18e4      	addlt	r4, r4, r3
 801dfc8:	f7ff fa6a 	bl	801d4a0 <__malloc_lock>
 801dfcc:	4a1d      	ldr	r2, [pc, #116]	@ (801e044 <_free_r+0x90>)
 801dfce:	6813      	ldr	r3, [r2, #0]
 801dfd0:	b933      	cbnz	r3, 801dfe0 <_free_r+0x2c>
 801dfd2:	6063      	str	r3, [r4, #4]
 801dfd4:	6014      	str	r4, [r2, #0]
 801dfd6:	4628      	mov	r0, r5
 801dfd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dfdc:	f7ff ba66 	b.w	801d4ac <__malloc_unlock>
 801dfe0:	42a3      	cmp	r3, r4
 801dfe2:	d908      	bls.n	801dff6 <_free_r+0x42>
 801dfe4:	6820      	ldr	r0, [r4, #0]
 801dfe6:	1821      	adds	r1, r4, r0
 801dfe8:	428b      	cmp	r3, r1
 801dfea:	bf01      	itttt	eq
 801dfec:	6819      	ldreq	r1, [r3, #0]
 801dfee:	685b      	ldreq	r3, [r3, #4]
 801dff0:	1809      	addeq	r1, r1, r0
 801dff2:	6021      	streq	r1, [r4, #0]
 801dff4:	e7ed      	b.n	801dfd2 <_free_r+0x1e>
 801dff6:	461a      	mov	r2, r3
 801dff8:	685b      	ldr	r3, [r3, #4]
 801dffa:	b10b      	cbz	r3, 801e000 <_free_r+0x4c>
 801dffc:	42a3      	cmp	r3, r4
 801dffe:	d9fa      	bls.n	801dff6 <_free_r+0x42>
 801e000:	6811      	ldr	r1, [r2, #0]
 801e002:	1850      	adds	r0, r2, r1
 801e004:	42a0      	cmp	r0, r4
 801e006:	d10b      	bne.n	801e020 <_free_r+0x6c>
 801e008:	6820      	ldr	r0, [r4, #0]
 801e00a:	4401      	add	r1, r0
 801e00c:	1850      	adds	r0, r2, r1
 801e00e:	4283      	cmp	r3, r0
 801e010:	6011      	str	r1, [r2, #0]
 801e012:	d1e0      	bne.n	801dfd6 <_free_r+0x22>
 801e014:	6818      	ldr	r0, [r3, #0]
 801e016:	685b      	ldr	r3, [r3, #4]
 801e018:	6053      	str	r3, [r2, #4]
 801e01a:	4408      	add	r0, r1
 801e01c:	6010      	str	r0, [r2, #0]
 801e01e:	e7da      	b.n	801dfd6 <_free_r+0x22>
 801e020:	d902      	bls.n	801e028 <_free_r+0x74>
 801e022:	230c      	movs	r3, #12
 801e024:	602b      	str	r3, [r5, #0]
 801e026:	e7d6      	b.n	801dfd6 <_free_r+0x22>
 801e028:	6820      	ldr	r0, [r4, #0]
 801e02a:	1821      	adds	r1, r4, r0
 801e02c:	428b      	cmp	r3, r1
 801e02e:	bf04      	itt	eq
 801e030:	6819      	ldreq	r1, [r3, #0]
 801e032:	685b      	ldreq	r3, [r3, #4]
 801e034:	6063      	str	r3, [r4, #4]
 801e036:	bf04      	itt	eq
 801e038:	1809      	addeq	r1, r1, r0
 801e03a:	6021      	streq	r1, [r4, #0]
 801e03c:	6054      	str	r4, [r2, #4]
 801e03e:	e7ca      	b.n	801dfd6 <_free_r+0x22>
 801e040:	bd38      	pop	{r3, r4, r5, pc}
 801e042:	bf00      	nop
 801e044:	2001a1b0 	.word	0x2001a1b0

0801e048 <_malloc_usable_size_r>:
 801e048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e04c:	1f18      	subs	r0, r3, #4
 801e04e:	2b00      	cmp	r3, #0
 801e050:	bfbc      	itt	lt
 801e052:	580b      	ldrlt	r3, [r1, r0]
 801e054:	18c0      	addlt	r0, r0, r3
 801e056:	4770      	bx	lr

0801e058 <__ssputs_r>:
 801e058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e05c:	688e      	ldr	r6, [r1, #8]
 801e05e:	461f      	mov	r7, r3
 801e060:	42be      	cmp	r6, r7
 801e062:	680b      	ldr	r3, [r1, #0]
 801e064:	4682      	mov	sl, r0
 801e066:	460c      	mov	r4, r1
 801e068:	4690      	mov	r8, r2
 801e06a:	d82d      	bhi.n	801e0c8 <__ssputs_r+0x70>
 801e06c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e074:	d026      	beq.n	801e0c4 <__ssputs_r+0x6c>
 801e076:	6965      	ldr	r5, [r4, #20]
 801e078:	6909      	ldr	r1, [r1, #16]
 801e07a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e07e:	eba3 0901 	sub.w	r9, r3, r1
 801e082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e086:	1c7b      	adds	r3, r7, #1
 801e088:	444b      	add	r3, r9
 801e08a:	106d      	asrs	r5, r5, #1
 801e08c:	429d      	cmp	r5, r3
 801e08e:	bf38      	it	cc
 801e090:	461d      	movcc	r5, r3
 801e092:	0553      	lsls	r3, r2, #21
 801e094:	d527      	bpl.n	801e0e6 <__ssputs_r+0x8e>
 801e096:	4629      	mov	r1, r5
 801e098:	f7ff f982 	bl	801d3a0 <_malloc_r>
 801e09c:	4606      	mov	r6, r0
 801e09e:	b360      	cbz	r0, 801e0fa <__ssputs_r+0xa2>
 801e0a0:	6921      	ldr	r1, [r4, #16]
 801e0a2:	464a      	mov	r2, r9
 801e0a4:	f7ff ff4d 	bl	801df42 <memcpy>
 801e0a8:	89a3      	ldrh	r3, [r4, #12]
 801e0aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e0b2:	81a3      	strh	r3, [r4, #12]
 801e0b4:	6126      	str	r6, [r4, #16]
 801e0b6:	6165      	str	r5, [r4, #20]
 801e0b8:	444e      	add	r6, r9
 801e0ba:	eba5 0509 	sub.w	r5, r5, r9
 801e0be:	6026      	str	r6, [r4, #0]
 801e0c0:	60a5      	str	r5, [r4, #8]
 801e0c2:	463e      	mov	r6, r7
 801e0c4:	42be      	cmp	r6, r7
 801e0c6:	d900      	bls.n	801e0ca <__ssputs_r+0x72>
 801e0c8:	463e      	mov	r6, r7
 801e0ca:	6820      	ldr	r0, [r4, #0]
 801e0cc:	4632      	mov	r2, r6
 801e0ce:	4641      	mov	r1, r8
 801e0d0:	f7ff fdec 	bl	801dcac <memmove>
 801e0d4:	68a3      	ldr	r3, [r4, #8]
 801e0d6:	1b9b      	subs	r3, r3, r6
 801e0d8:	60a3      	str	r3, [r4, #8]
 801e0da:	6823      	ldr	r3, [r4, #0]
 801e0dc:	4433      	add	r3, r6
 801e0de:	6023      	str	r3, [r4, #0]
 801e0e0:	2000      	movs	r0, #0
 801e0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0e6:	462a      	mov	r2, r5
 801e0e8:	f7ff fa5a 	bl	801d5a0 <_realloc_r>
 801e0ec:	4606      	mov	r6, r0
 801e0ee:	2800      	cmp	r0, #0
 801e0f0:	d1e0      	bne.n	801e0b4 <__ssputs_r+0x5c>
 801e0f2:	6921      	ldr	r1, [r4, #16]
 801e0f4:	4650      	mov	r0, sl
 801e0f6:	f7ff ff5d 	bl	801dfb4 <_free_r>
 801e0fa:	230c      	movs	r3, #12
 801e0fc:	f8ca 3000 	str.w	r3, [sl]
 801e100:	89a3      	ldrh	r3, [r4, #12]
 801e102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e106:	81a3      	strh	r3, [r4, #12]
 801e108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e10c:	e7e9      	b.n	801e0e2 <__ssputs_r+0x8a>
	...

0801e110 <_svfiprintf_r>:
 801e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e114:	4698      	mov	r8, r3
 801e116:	898b      	ldrh	r3, [r1, #12]
 801e118:	061b      	lsls	r3, r3, #24
 801e11a:	b09d      	sub	sp, #116	@ 0x74
 801e11c:	4607      	mov	r7, r0
 801e11e:	460d      	mov	r5, r1
 801e120:	4614      	mov	r4, r2
 801e122:	d510      	bpl.n	801e146 <_svfiprintf_r+0x36>
 801e124:	690b      	ldr	r3, [r1, #16]
 801e126:	b973      	cbnz	r3, 801e146 <_svfiprintf_r+0x36>
 801e128:	2140      	movs	r1, #64	@ 0x40
 801e12a:	f7ff f939 	bl	801d3a0 <_malloc_r>
 801e12e:	6028      	str	r0, [r5, #0]
 801e130:	6128      	str	r0, [r5, #16]
 801e132:	b930      	cbnz	r0, 801e142 <_svfiprintf_r+0x32>
 801e134:	230c      	movs	r3, #12
 801e136:	603b      	str	r3, [r7, #0]
 801e138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e13c:	b01d      	add	sp, #116	@ 0x74
 801e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e142:	2340      	movs	r3, #64	@ 0x40
 801e144:	616b      	str	r3, [r5, #20]
 801e146:	2300      	movs	r3, #0
 801e148:	9309      	str	r3, [sp, #36]	@ 0x24
 801e14a:	2320      	movs	r3, #32
 801e14c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e150:	f8cd 800c 	str.w	r8, [sp, #12]
 801e154:	2330      	movs	r3, #48	@ 0x30
 801e156:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e2f4 <_svfiprintf_r+0x1e4>
 801e15a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e15e:	f04f 0901 	mov.w	r9, #1
 801e162:	4623      	mov	r3, r4
 801e164:	469a      	mov	sl, r3
 801e166:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e16a:	b10a      	cbz	r2, 801e170 <_svfiprintf_r+0x60>
 801e16c:	2a25      	cmp	r2, #37	@ 0x25
 801e16e:	d1f9      	bne.n	801e164 <_svfiprintf_r+0x54>
 801e170:	ebba 0b04 	subs.w	fp, sl, r4
 801e174:	d00b      	beq.n	801e18e <_svfiprintf_r+0x7e>
 801e176:	465b      	mov	r3, fp
 801e178:	4622      	mov	r2, r4
 801e17a:	4629      	mov	r1, r5
 801e17c:	4638      	mov	r0, r7
 801e17e:	f7ff ff6b 	bl	801e058 <__ssputs_r>
 801e182:	3001      	adds	r0, #1
 801e184:	f000 80a7 	beq.w	801e2d6 <_svfiprintf_r+0x1c6>
 801e188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e18a:	445a      	add	r2, fp
 801e18c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e18e:	f89a 3000 	ldrb.w	r3, [sl]
 801e192:	2b00      	cmp	r3, #0
 801e194:	f000 809f 	beq.w	801e2d6 <_svfiprintf_r+0x1c6>
 801e198:	2300      	movs	r3, #0
 801e19a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e19e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e1a2:	f10a 0a01 	add.w	sl, sl, #1
 801e1a6:	9304      	str	r3, [sp, #16]
 801e1a8:	9307      	str	r3, [sp, #28]
 801e1aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e1ae:	931a      	str	r3, [sp, #104]	@ 0x68
 801e1b0:	4654      	mov	r4, sl
 801e1b2:	2205      	movs	r2, #5
 801e1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1b8:	484e      	ldr	r0, [pc, #312]	@ (801e2f4 <_svfiprintf_r+0x1e4>)
 801e1ba:	f7e2 f841 	bl	8000240 <memchr>
 801e1be:	9a04      	ldr	r2, [sp, #16]
 801e1c0:	b9d8      	cbnz	r0, 801e1fa <_svfiprintf_r+0xea>
 801e1c2:	06d0      	lsls	r0, r2, #27
 801e1c4:	bf44      	itt	mi
 801e1c6:	2320      	movmi	r3, #32
 801e1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1cc:	0711      	lsls	r1, r2, #28
 801e1ce:	bf44      	itt	mi
 801e1d0:	232b      	movmi	r3, #43	@ 0x2b
 801e1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1d6:	f89a 3000 	ldrb.w	r3, [sl]
 801e1da:	2b2a      	cmp	r3, #42	@ 0x2a
 801e1dc:	d015      	beq.n	801e20a <_svfiprintf_r+0xfa>
 801e1de:	9a07      	ldr	r2, [sp, #28]
 801e1e0:	4654      	mov	r4, sl
 801e1e2:	2000      	movs	r0, #0
 801e1e4:	f04f 0c0a 	mov.w	ip, #10
 801e1e8:	4621      	mov	r1, r4
 801e1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e1ee:	3b30      	subs	r3, #48	@ 0x30
 801e1f0:	2b09      	cmp	r3, #9
 801e1f2:	d94b      	bls.n	801e28c <_svfiprintf_r+0x17c>
 801e1f4:	b1b0      	cbz	r0, 801e224 <_svfiprintf_r+0x114>
 801e1f6:	9207      	str	r2, [sp, #28]
 801e1f8:	e014      	b.n	801e224 <_svfiprintf_r+0x114>
 801e1fa:	eba0 0308 	sub.w	r3, r0, r8
 801e1fe:	fa09 f303 	lsl.w	r3, r9, r3
 801e202:	4313      	orrs	r3, r2
 801e204:	9304      	str	r3, [sp, #16]
 801e206:	46a2      	mov	sl, r4
 801e208:	e7d2      	b.n	801e1b0 <_svfiprintf_r+0xa0>
 801e20a:	9b03      	ldr	r3, [sp, #12]
 801e20c:	1d19      	adds	r1, r3, #4
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	9103      	str	r1, [sp, #12]
 801e212:	2b00      	cmp	r3, #0
 801e214:	bfbb      	ittet	lt
 801e216:	425b      	neglt	r3, r3
 801e218:	f042 0202 	orrlt.w	r2, r2, #2
 801e21c:	9307      	strge	r3, [sp, #28]
 801e21e:	9307      	strlt	r3, [sp, #28]
 801e220:	bfb8      	it	lt
 801e222:	9204      	strlt	r2, [sp, #16]
 801e224:	7823      	ldrb	r3, [r4, #0]
 801e226:	2b2e      	cmp	r3, #46	@ 0x2e
 801e228:	d10a      	bne.n	801e240 <_svfiprintf_r+0x130>
 801e22a:	7863      	ldrb	r3, [r4, #1]
 801e22c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e22e:	d132      	bne.n	801e296 <_svfiprintf_r+0x186>
 801e230:	9b03      	ldr	r3, [sp, #12]
 801e232:	1d1a      	adds	r2, r3, #4
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	9203      	str	r2, [sp, #12]
 801e238:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e23c:	3402      	adds	r4, #2
 801e23e:	9305      	str	r3, [sp, #20]
 801e240:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e304 <_svfiprintf_r+0x1f4>
 801e244:	7821      	ldrb	r1, [r4, #0]
 801e246:	2203      	movs	r2, #3
 801e248:	4650      	mov	r0, sl
 801e24a:	f7e1 fff9 	bl	8000240 <memchr>
 801e24e:	b138      	cbz	r0, 801e260 <_svfiprintf_r+0x150>
 801e250:	9b04      	ldr	r3, [sp, #16]
 801e252:	eba0 000a 	sub.w	r0, r0, sl
 801e256:	2240      	movs	r2, #64	@ 0x40
 801e258:	4082      	lsls	r2, r0
 801e25a:	4313      	orrs	r3, r2
 801e25c:	3401      	adds	r4, #1
 801e25e:	9304      	str	r3, [sp, #16]
 801e260:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e264:	4824      	ldr	r0, [pc, #144]	@ (801e2f8 <_svfiprintf_r+0x1e8>)
 801e266:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e26a:	2206      	movs	r2, #6
 801e26c:	f7e1 ffe8 	bl	8000240 <memchr>
 801e270:	2800      	cmp	r0, #0
 801e272:	d036      	beq.n	801e2e2 <_svfiprintf_r+0x1d2>
 801e274:	4b21      	ldr	r3, [pc, #132]	@ (801e2fc <_svfiprintf_r+0x1ec>)
 801e276:	bb1b      	cbnz	r3, 801e2c0 <_svfiprintf_r+0x1b0>
 801e278:	9b03      	ldr	r3, [sp, #12]
 801e27a:	3307      	adds	r3, #7
 801e27c:	f023 0307 	bic.w	r3, r3, #7
 801e280:	3308      	adds	r3, #8
 801e282:	9303      	str	r3, [sp, #12]
 801e284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e286:	4433      	add	r3, r6
 801e288:	9309      	str	r3, [sp, #36]	@ 0x24
 801e28a:	e76a      	b.n	801e162 <_svfiprintf_r+0x52>
 801e28c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e290:	460c      	mov	r4, r1
 801e292:	2001      	movs	r0, #1
 801e294:	e7a8      	b.n	801e1e8 <_svfiprintf_r+0xd8>
 801e296:	2300      	movs	r3, #0
 801e298:	3401      	adds	r4, #1
 801e29a:	9305      	str	r3, [sp, #20]
 801e29c:	4619      	mov	r1, r3
 801e29e:	f04f 0c0a 	mov.w	ip, #10
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e2a8:	3a30      	subs	r2, #48	@ 0x30
 801e2aa:	2a09      	cmp	r2, #9
 801e2ac:	d903      	bls.n	801e2b6 <_svfiprintf_r+0x1a6>
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d0c6      	beq.n	801e240 <_svfiprintf_r+0x130>
 801e2b2:	9105      	str	r1, [sp, #20]
 801e2b4:	e7c4      	b.n	801e240 <_svfiprintf_r+0x130>
 801e2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e2ba:	4604      	mov	r4, r0
 801e2bc:	2301      	movs	r3, #1
 801e2be:	e7f0      	b.n	801e2a2 <_svfiprintf_r+0x192>
 801e2c0:	ab03      	add	r3, sp, #12
 801e2c2:	9300      	str	r3, [sp, #0]
 801e2c4:	462a      	mov	r2, r5
 801e2c6:	4b0e      	ldr	r3, [pc, #56]	@ (801e300 <_svfiprintf_r+0x1f0>)
 801e2c8:	a904      	add	r1, sp, #16
 801e2ca:	4638      	mov	r0, r7
 801e2cc:	f3af 8000 	nop.w
 801e2d0:	1c42      	adds	r2, r0, #1
 801e2d2:	4606      	mov	r6, r0
 801e2d4:	d1d6      	bne.n	801e284 <_svfiprintf_r+0x174>
 801e2d6:	89ab      	ldrh	r3, [r5, #12]
 801e2d8:	065b      	lsls	r3, r3, #25
 801e2da:	f53f af2d 	bmi.w	801e138 <_svfiprintf_r+0x28>
 801e2de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e2e0:	e72c      	b.n	801e13c <_svfiprintf_r+0x2c>
 801e2e2:	ab03      	add	r3, sp, #12
 801e2e4:	9300      	str	r3, [sp, #0]
 801e2e6:	462a      	mov	r2, r5
 801e2e8:	4b05      	ldr	r3, [pc, #20]	@ (801e300 <_svfiprintf_r+0x1f0>)
 801e2ea:	a904      	add	r1, sp, #16
 801e2ec:	4638      	mov	r0, r7
 801e2ee:	f000 f9bb 	bl	801e668 <_printf_i>
 801e2f2:	e7ed      	b.n	801e2d0 <_svfiprintf_r+0x1c0>
 801e2f4:	080217ae 	.word	0x080217ae
 801e2f8:	080217b8 	.word	0x080217b8
 801e2fc:	00000000 	.word	0x00000000
 801e300:	0801e059 	.word	0x0801e059
 801e304:	080217b4 	.word	0x080217b4

0801e308 <__sfputc_r>:
 801e308:	6893      	ldr	r3, [r2, #8]
 801e30a:	3b01      	subs	r3, #1
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	b410      	push	{r4}
 801e310:	6093      	str	r3, [r2, #8]
 801e312:	da08      	bge.n	801e326 <__sfputc_r+0x1e>
 801e314:	6994      	ldr	r4, [r2, #24]
 801e316:	42a3      	cmp	r3, r4
 801e318:	db01      	blt.n	801e31e <__sfputc_r+0x16>
 801e31a:	290a      	cmp	r1, #10
 801e31c:	d103      	bne.n	801e326 <__sfputc_r+0x1e>
 801e31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e322:	f7ff bc1f 	b.w	801db64 <__swbuf_r>
 801e326:	6813      	ldr	r3, [r2, #0]
 801e328:	1c58      	adds	r0, r3, #1
 801e32a:	6010      	str	r0, [r2, #0]
 801e32c:	7019      	strb	r1, [r3, #0]
 801e32e:	4608      	mov	r0, r1
 801e330:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e334:	4770      	bx	lr

0801e336 <__sfputs_r>:
 801e336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e338:	4606      	mov	r6, r0
 801e33a:	460f      	mov	r7, r1
 801e33c:	4614      	mov	r4, r2
 801e33e:	18d5      	adds	r5, r2, r3
 801e340:	42ac      	cmp	r4, r5
 801e342:	d101      	bne.n	801e348 <__sfputs_r+0x12>
 801e344:	2000      	movs	r0, #0
 801e346:	e007      	b.n	801e358 <__sfputs_r+0x22>
 801e348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e34c:	463a      	mov	r2, r7
 801e34e:	4630      	mov	r0, r6
 801e350:	f7ff ffda 	bl	801e308 <__sfputc_r>
 801e354:	1c43      	adds	r3, r0, #1
 801e356:	d1f3      	bne.n	801e340 <__sfputs_r+0xa>
 801e358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e35c <_vfiprintf_r>:
 801e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e360:	460d      	mov	r5, r1
 801e362:	b09d      	sub	sp, #116	@ 0x74
 801e364:	4614      	mov	r4, r2
 801e366:	4698      	mov	r8, r3
 801e368:	4606      	mov	r6, r0
 801e36a:	b118      	cbz	r0, 801e374 <_vfiprintf_r+0x18>
 801e36c:	6a03      	ldr	r3, [r0, #32]
 801e36e:	b90b      	cbnz	r3, 801e374 <_vfiprintf_r+0x18>
 801e370:	f7ff fa48 	bl	801d804 <__sinit>
 801e374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e376:	07d9      	lsls	r1, r3, #31
 801e378:	d405      	bmi.n	801e386 <_vfiprintf_r+0x2a>
 801e37a:	89ab      	ldrh	r3, [r5, #12]
 801e37c:	059a      	lsls	r2, r3, #22
 801e37e:	d402      	bmi.n	801e386 <_vfiprintf_r+0x2a>
 801e380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e382:	f7ff fdd4 	bl	801df2e <__retarget_lock_acquire_recursive>
 801e386:	89ab      	ldrh	r3, [r5, #12]
 801e388:	071b      	lsls	r3, r3, #28
 801e38a:	d501      	bpl.n	801e390 <_vfiprintf_r+0x34>
 801e38c:	692b      	ldr	r3, [r5, #16]
 801e38e:	b99b      	cbnz	r3, 801e3b8 <_vfiprintf_r+0x5c>
 801e390:	4629      	mov	r1, r5
 801e392:	4630      	mov	r0, r6
 801e394:	f7ff fc24 	bl	801dbe0 <__swsetup_r>
 801e398:	b170      	cbz	r0, 801e3b8 <_vfiprintf_r+0x5c>
 801e39a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e39c:	07dc      	lsls	r4, r3, #31
 801e39e:	d504      	bpl.n	801e3aa <_vfiprintf_r+0x4e>
 801e3a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3a4:	b01d      	add	sp, #116	@ 0x74
 801e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3aa:	89ab      	ldrh	r3, [r5, #12]
 801e3ac:	0598      	lsls	r0, r3, #22
 801e3ae:	d4f7      	bmi.n	801e3a0 <_vfiprintf_r+0x44>
 801e3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e3b2:	f7ff fdbd 	bl	801df30 <__retarget_lock_release_recursive>
 801e3b6:	e7f3      	b.n	801e3a0 <_vfiprintf_r+0x44>
 801e3b8:	2300      	movs	r3, #0
 801e3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3bc:	2320      	movs	r3, #32
 801e3be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3c6:	2330      	movs	r3, #48	@ 0x30
 801e3c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e578 <_vfiprintf_r+0x21c>
 801e3cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e3d0:	f04f 0901 	mov.w	r9, #1
 801e3d4:	4623      	mov	r3, r4
 801e3d6:	469a      	mov	sl, r3
 801e3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3dc:	b10a      	cbz	r2, 801e3e2 <_vfiprintf_r+0x86>
 801e3de:	2a25      	cmp	r2, #37	@ 0x25
 801e3e0:	d1f9      	bne.n	801e3d6 <_vfiprintf_r+0x7a>
 801e3e2:	ebba 0b04 	subs.w	fp, sl, r4
 801e3e6:	d00b      	beq.n	801e400 <_vfiprintf_r+0xa4>
 801e3e8:	465b      	mov	r3, fp
 801e3ea:	4622      	mov	r2, r4
 801e3ec:	4629      	mov	r1, r5
 801e3ee:	4630      	mov	r0, r6
 801e3f0:	f7ff ffa1 	bl	801e336 <__sfputs_r>
 801e3f4:	3001      	adds	r0, #1
 801e3f6:	f000 80a7 	beq.w	801e548 <_vfiprintf_r+0x1ec>
 801e3fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3fc:	445a      	add	r2, fp
 801e3fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801e400:	f89a 3000 	ldrb.w	r3, [sl]
 801e404:	2b00      	cmp	r3, #0
 801e406:	f000 809f 	beq.w	801e548 <_vfiprintf_r+0x1ec>
 801e40a:	2300      	movs	r3, #0
 801e40c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e414:	f10a 0a01 	add.w	sl, sl, #1
 801e418:	9304      	str	r3, [sp, #16]
 801e41a:	9307      	str	r3, [sp, #28]
 801e41c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e420:	931a      	str	r3, [sp, #104]	@ 0x68
 801e422:	4654      	mov	r4, sl
 801e424:	2205      	movs	r2, #5
 801e426:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e42a:	4853      	ldr	r0, [pc, #332]	@ (801e578 <_vfiprintf_r+0x21c>)
 801e42c:	f7e1 ff08 	bl	8000240 <memchr>
 801e430:	9a04      	ldr	r2, [sp, #16]
 801e432:	b9d8      	cbnz	r0, 801e46c <_vfiprintf_r+0x110>
 801e434:	06d1      	lsls	r1, r2, #27
 801e436:	bf44      	itt	mi
 801e438:	2320      	movmi	r3, #32
 801e43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e43e:	0713      	lsls	r3, r2, #28
 801e440:	bf44      	itt	mi
 801e442:	232b      	movmi	r3, #43	@ 0x2b
 801e444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e448:	f89a 3000 	ldrb.w	r3, [sl]
 801e44c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e44e:	d015      	beq.n	801e47c <_vfiprintf_r+0x120>
 801e450:	9a07      	ldr	r2, [sp, #28]
 801e452:	4654      	mov	r4, sl
 801e454:	2000      	movs	r0, #0
 801e456:	f04f 0c0a 	mov.w	ip, #10
 801e45a:	4621      	mov	r1, r4
 801e45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e460:	3b30      	subs	r3, #48	@ 0x30
 801e462:	2b09      	cmp	r3, #9
 801e464:	d94b      	bls.n	801e4fe <_vfiprintf_r+0x1a2>
 801e466:	b1b0      	cbz	r0, 801e496 <_vfiprintf_r+0x13a>
 801e468:	9207      	str	r2, [sp, #28]
 801e46a:	e014      	b.n	801e496 <_vfiprintf_r+0x13a>
 801e46c:	eba0 0308 	sub.w	r3, r0, r8
 801e470:	fa09 f303 	lsl.w	r3, r9, r3
 801e474:	4313      	orrs	r3, r2
 801e476:	9304      	str	r3, [sp, #16]
 801e478:	46a2      	mov	sl, r4
 801e47a:	e7d2      	b.n	801e422 <_vfiprintf_r+0xc6>
 801e47c:	9b03      	ldr	r3, [sp, #12]
 801e47e:	1d19      	adds	r1, r3, #4
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	9103      	str	r1, [sp, #12]
 801e484:	2b00      	cmp	r3, #0
 801e486:	bfbb      	ittet	lt
 801e488:	425b      	neglt	r3, r3
 801e48a:	f042 0202 	orrlt.w	r2, r2, #2
 801e48e:	9307      	strge	r3, [sp, #28]
 801e490:	9307      	strlt	r3, [sp, #28]
 801e492:	bfb8      	it	lt
 801e494:	9204      	strlt	r2, [sp, #16]
 801e496:	7823      	ldrb	r3, [r4, #0]
 801e498:	2b2e      	cmp	r3, #46	@ 0x2e
 801e49a:	d10a      	bne.n	801e4b2 <_vfiprintf_r+0x156>
 801e49c:	7863      	ldrb	r3, [r4, #1]
 801e49e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e4a0:	d132      	bne.n	801e508 <_vfiprintf_r+0x1ac>
 801e4a2:	9b03      	ldr	r3, [sp, #12]
 801e4a4:	1d1a      	adds	r2, r3, #4
 801e4a6:	681b      	ldr	r3, [r3, #0]
 801e4a8:	9203      	str	r2, [sp, #12]
 801e4aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e4ae:	3402      	adds	r4, #2
 801e4b0:	9305      	str	r3, [sp, #20]
 801e4b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e588 <_vfiprintf_r+0x22c>
 801e4b6:	7821      	ldrb	r1, [r4, #0]
 801e4b8:	2203      	movs	r2, #3
 801e4ba:	4650      	mov	r0, sl
 801e4bc:	f7e1 fec0 	bl	8000240 <memchr>
 801e4c0:	b138      	cbz	r0, 801e4d2 <_vfiprintf_r+0x176>
 801e4c2:	9b04      	ldr	r3, [sp, #16]
 801e4c4:	eba0 000a 	sub.w	r0, r0, sl
 801e4c8:	2240      	movs	r2, #64	@ 0x40
 801e4ca:	4082      	lsls	r2, r0
 801e4cc:	4313      	orrs	r3, r2
 801e4ce:	3401      	adds	r4, #1
 801e4d0:	9304      	str	r3, [sp, #16]
 801e4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4d6:	4829      	ldr	r0, [pc, #164]	@ (801e57c <_vfiprintf_r+0x220>)
 801e4d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e4dc:	2206      	movs	r2, #6
 801e4de:	f7e1 feaf 	bl	8000240 <memchr>
 801e4e2:	2800      	cmp	r0, #0
 801e4e4:	d03f      	beq.n	801e566 <_vfiprintf_r+0x20a>
 801e4e6:	4b26      	ldr	r3, [pc, #152]	@ (801e580 <_vfiprintf_r+0x224>)
 801e4e8:	bb1b      	cbnz	r3, 801e532 <_vfiprintf_r+0x1d6>
 801e4ea:	9b03      	ldr	r3, [sp, #12]
 801e4ec:	3307      	adds	r3, #7
 801e4ee:	f023 0307 	bic.w	r3, r3, #7
 801e4f2:	3308      	adds	r3, #8
 801e4f4:	9303      	str	r3, [sp, #12]
 801e4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4f8:	443b      	add	r3, r7
 801e4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4fc:	e76a      	b.n	801e3d4 <_vfiprintf_r+0x78>
 801e4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 801e502:	460c      	mov	r4, r1
 801e504:	2001      	movs	r0, #1
 801e506:	e7a8      	b.n	801e45a <_vfiprintf_r+0xfe>
 801e508:	2300      	movs	r3, #0
 801e50a:	3401      	adds	r4, #1
 801e50c:	9305      	str	r3, [sp, #20]
 801e50e:	4619      	mov	r1, r3
 801e510:	f04f 0c0a 	mov.w	ip, #10
 801e514:	4620      	mov	r0, r4
 801e516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e51a:	3a30      	subs	r2, #48	@ 0x30
 801e51c:	2a09      	cmp	r2, #9
 801e51e:	d903      	bls.n	801e528 <_vfiprintf_r+0x1cc>
 801e520:	2b00      	cmp	r3, #0
 801e522:	d0c6      	beq.n	801e4b2 <_vfiprintf_r+0x156>
 801e524:	9105      	str	r1, [sp, #20]
 801e526:	e7c4      	b.n	801e4b2 <_vfiprintf_r+0x156>
 801e528:	fb0c 2101 	mla	r1, ip, r1, r2
 801e52c:	4604      	mov	r4, r0
 801e52e:	2301      	movs	r3, #1
 801e530:	e7f0      	b.n	801e514 <_vfiprintf_r+0x1b8>
 801e532:	ab03      	add	r3, sp, #12
 801e534:	9300      	str	r3, [sp, #0]
 801e536:	462a      	mov	r2, r5
 801e538:	4b12      	ldr	r3, [pc, #72]	@ (801e584 <_vfiprintf_r+0x228>)
 801e53a:	a904      	add	r1, sp, #16
 801e53c:	4630      	mov	r0, r6
 801e53e:	f3af 8000 	nop.w
 801e542:	4607      	mov	r7, r0
 801e544:	1c78      	adds	r0, r7, #1
 801e546:	d1d6      	bne.n	801e4f6 <_vfiprintf_r+0x19a>
 801e548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e54a:	07d9      	lsls	r1, r3, #31
 801e54c:	d405      	bmi.n	801e55a <_vfiprintf_r+0x1fe>
 801e54e:	89ab      	ldrh	r3, [r5, #12]
 801e550:	059a      	lsls	r2, r3, #22
 801e552:	d402      	bmi.n	801e55a <_vfiprintf_r+0x1fe>
 801e554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e556:	f7ff fceb 	bl	801df30 <__retarget_lock_release_recursive>
 801e55a:	89ab      	ldrh	r3, [r5, #12]
 801e55c:	065b      	lsls	r3, r3, #25
 801e55e:	f53f af1f 	bmi.w	801e3a0 <_vfiprintf_r+0x44>
 801e562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e564:	e71e      	b.n	801e3a4 <_vfiprintf_r+0x48>
 801e566:	ab03      	add	r3, sp, #12
 801e568:	9300      	str	r3, [sp, #0]
 801e56a:	462a      	mov	r2, r5
 801e56c:	4b05      	ldr	r3, [pc, #20]	@ (801e584 <_vfiprintf_r+0x228>)
 801e56e:	a904      	add	r1, sp, #16
 801e570:	4630      	mov	r0, r6
 801e572:	f000 f879 	bl	801e668 <_printf_i>
 801e576:	e7e4      	b.n	801e542 <_vfiprintf_r+0x1e6>
 801e578:	080217ae 	.word	0x080217ae
 801e57c:	080217b8 	.word	0x080217b8
 801e580:	00000000 	.word	0x00000000
 801e584:	0801e337 	.word	0x0801e337
 801e588:	080217b4 	.word	0x080217b4

0801e58c <_printf_common>:
 801e58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e590:	4616      	mov	r6, r2
 801e592:	4698      	mov	r8, r3
 801e594:	688a      	ldr	r2, [r1, #8]
 801e596:	690b      	ldr	r3, [r1, #16]
 801e598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e59c:	4293      	cmp	r3, r2
 801e59e:	bfb8      	it	lt
 801e5a0:	4613      	movlt	r3, r2
 801e5a2:	6033      	str	r3, [r6, #0]
 801e5a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e5a8:	4607      	mov	r7, r0
 801e5aa:	460c      	mov	r4, r1
 801e5ac:	b10a      	cbz	r2, 801e5b2 <_printf_common+0x26>
 801e5ae:	3301      	adds	r3, #1
 801e5b0:	6033      	str	r3, [r6, #0]
 801e5b2:	6823      	ldr	r3, [r4, #0]
 801e5b4:	0699      	lsls	r1, r3, #26
 801e5b6:	bf42      	ittt	mi
 801e5b8:	6833      	ldrmi	r3, [r6, #0]
 801e5ba:	3302      	addmi	r3, #2
 801e5bc:	6033      	strmi	r3, [r6, #0]
 801e5be:	6825      	ldr	r5, [r4, #0]
 801e5c0:	f015 0506 	ands.w	r5, r5, #6
 801e5c4:	d106      	bne.n	801e5d4 <_printf_common+0x48>
 801e5c6:	f104 0a19 	add.w	sl, r4, #25
 801e5ca:	68e3      	ldr	r3, [r4, #12]
 801e5cc:	6832      	ldr	r2, [r6, #0]
 801e5ce:	1a9b      	subs	r3, r3, r2
 801e5d0:	42ab      	cmp	r3, r5
 801e5d2:	dc26      	bgt.n	801e622 <_printf_common+0x96>
 801e5d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e5d8:	6822      	ldr	r2, [r4, #0]
 801e5da:	3b00      	subs	r3, #0
 801e5dc:	bf18      	it	ne
 801e5de:	2301      	movne	r3, #1
 801e5e0:	0692      	lsls	r2, r2, #26
 801e5e2:	d42b      	bmi.n	801e63c <_printf_common+0xb0>
 801e5e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e5e8:	4641      	mov	r1, r8
 801e5ea:	4638      	mov	r0, r7
 801e5ec:	47c8      	blx	r9
 801e5ee:	3001      	adds	r0, #1
 801e5f0:	d01e      	beq.n	801e630 <_printf_common+0xa4>
 801e5f2:	6823      	ldr	r3, [r4, #0]
 801e5f4:	6922      	ldr	r2, [r4, #16]
 801e5f6:	f003 0306 	and.w	r3, r3, #6
 801e5fa:	2b04      	cmp	r3, #4
 801e5fc:	bf02      	ittt	eq
 801e5fe:	68e5      	ldreq	r5, [r4, #12]
 801e600:	6833      	ldreq	r3, [r6, #0]
 801e602:	1aed      	subeq	r5, r5, r3
 801e604:	68a3      	ldr	r3, [r4, #8]
 801e606:	bf0c      	ite	eq
 801e608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e60c:	2500      	movne	r5, #0
 801e60e:	4293      	cmp	r3, r2
 801e610:	bfc4      	itt	gt
 801e612:	1a9b      	subgt	r3, r3, r2
 801e614:	18ed      	addgt	r5, r5, r3
 801e616:	2600      	movs	r6, #0
 801e618:	341a      	adds	r4, #26
 801e61a:	42b5      	cmp	r5, r6
 801e61c:	d11a      	bne.n	801e654 <_printf_common+0xc8>
 801e61e:	2000      	movs	r0, #0
 801e620:	e008      	b.n	801e634 <_printf_common+0xa8>
 801e622:	2301      	movs	r3, #1
 801e624:	4652      	mov	r2, sl
 801e626:	4641      	mov	r1, r8
 801e628:	4638      	mov	r0, r7
 801e62a:	47c8      	blx	r9
 801e62c:	3001      	adds	r0, #1
 801e62e:	d103      	bne.n	801e638 <_printf_common+0xac>
 801e630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e638:	3501      	adds	r5, #1
 801e63a:	e7c6      	b.n	801e5ca <_printf_common+0x3e>
 801e63c:	18e1      	adds	r1, r4, r3
 801e63e:	1c5a      	adds	r2, r3, #1
 801e640:	2030      	movs	r0, #48	@ 0x30
 801e642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e646:	4422      	add	r2, r4
 801e648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e64c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e650:	3302      	adds	r3, #2
 801e652:	e7c7      	b.n	801e5e4 <_printf_common+0x58>
 801e654:	2301      	movs	r3, #1
 801e656:	4622      	mov	r2, r4
 801e658:	4641      	mov	r1, r8
 801e65a:	4638      	mov	r0, r7
 801e65c:	47c8      	blx	r9
 801e65e:	3001      	adds	r0, #1
 801e660:	d0e6      	beq.n	801e630 <_printf_common+0xa4>
 801e662:	3601      	adds	r6, #1
 801e664:	e7d9      	b.n	801e61a <_printf_common+0x8e>
	...

0801e668 <_printf_i>:
 801e668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e66c:	7e0f      	ldrb	r7, [r1, #24]
 801e66e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e670:	2f78      	cmp	r7, #120	@ 0x78
 801e672:	4691      	mov	r9, r2
 801e674:	4680      	mov	r8, r0
 801e676:	460c      	mov	r4, r1
 801e678:	469a      	mov	sl, r3
 801e67a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e67e:	d807      	bhi.n	801e690 <_printf_i+0x28>
 801e680:	2f62      	cmp	r7, #98	@ 0x62
 801e682:	d80a      	bhi.n	801e69a <_printf_i+0x32>
 801e684:	2f00      	cmp	r7, #0
 801e686:	f000 80d2 	beq.w	801e82e <_printf_i+0x1c6>
 801e68a:	2f58      	cmp	r7, #88	@ 0x58
 801e68c:	f000 80b9 	beq.w	801e802 <_printf_i+0x19a>
 801e690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e698:	e03a      	b.n	801e710 <_printf_i+0xa8>
 801e69a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e69e:	2b15      	cmp	r3, #21
 801e6a0:	d8f6      	bhi.n	801e690 <_printf_i+0x28>
 801e6a2:	a101      	add	r1, pc, #4	@ (adr r1, 801e6a8 <_printf_i+0x40>)
 801e6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e6a8:	0801e701 	.word	0x0801e701
 801e6ac:	0801e715 	.word	0x0801e715
 801e6b0:	0801e691 	.word	0x0801e691
 801e6b4:	0801e691 	.word	0x0801e691
 801e6b8:	0801e691 	.word	0x0801e691
 801e6bc:	0801e691 	.word	0x0801e691
 801e6c0:	0801e715 	.word	0x0801e715
 801e6c4:	0801e691 	.word	0x0801e691
 801e6c8:	0801e691 	.word	0x0801e691
 801e6cc:	0801e691 	.word	0x0801e691
 801e6d0:	0801e691 	.word	0x0801e691
 801e6d4:	0801e815 	.word	0x0801e815
 801e6d8:	0801e73f 	.word	0x0801e73f
 801e6dc:	0801e7cf 	.word	0x0801e7cf
 801e6e0:	0801e691 	.word	0x0801e691
 801e6e4:	0801e691 	.word	0x0801e691
 801e6e8:	0801e837 	.word	0x0801e837
 801e6ec:	0801e691 	.word	0x0801e691
 801e6f0:	0801e73f 	.word	0x0801e73f
 801e6f4:	0801e691 	.word	0x0801e691
 801e6f8:	0801e691 	.word	0x0801e691
 801e6fc:	0801e7d7 	.word	0x0801e7d7
 801e700:	6833      	ldr	r3, [r6, #0]
 801e702:	1d1a      	adds	r2, r3, #4
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	6032      	str	r2, [r6, #0]
 801e708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e70c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e710:	2301      	movs	r3, #1
 801e712:	e09d      	b.n	801e850 <_printf_i+0x1e8>
 801e714:	6833      	ldr	r3, [r6, #0]
 801e716:	6820      	ldr	r0, [r4, #0]
 801e718:	1d19      	adds	r1, r3, #4
 801e71a:	6031      	str	r1, [r6, #0]
 801e71c:	0606      	lsls	r6, r0, #24
 801e71e:	d501      	bpl.n	801e724 <_printf_i+0xbc>
 801e720:	681d      	ldr	r5, [r3, #0]
 801e722:	e003      	b.n	801e72c <_printf_i+0xc4>
 801e724:	0645      	lsls	r5, r0, #25
 801e726:	d5fb      	bpl.n	801e720 <_printf_i+0xb8>
 801e728:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e72c:	2d00      	cmp	r5, #0
 801e72e:	da03      	bge.n	801e738 <_printf_i+0xd0>
 801e730:	232d      	movs	r3, #45	@ 0x2d
 801e732:	426d      	negs	r5, r5
 801e734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e738:	4859      	ldr	r0, [pc, #356]	@ (801e8a0 <_printf_i+0x238>)
 801e73a:	230a      	movs	r3, #10
 801e73c:	e011      	b.n	801e762 <_printf_i+0xfa>
 801e73e:	6821      	ldr	r1, [r4, #0]
 801e740:	6833      	ldr	r3, [r6, #0]
 801e742:	0608      	lsls	r0, r1, #24
 801e744:	f853 5b04 	ldr.w	r5, [r3], #4
 801e748:	d402      	bmi.n	801e750 <_printf_i+0xe8>
 801e74a:	0649      	lsls	r1, r1, #25
 801e74c:	bf48      	it	mi
 801e74e:	b2ad      	uxthmi	r5, r5
 801e750:	2f6f      	cmp	r7, #111	@ 0x6f
 801e752:	4853      	ldr	r0, [pc, #332]	@ (801e8a0 <_printf_i+0x238>)
 801e754:	6033      	str	r3, [r6, #0]
 801e756:	bf14      	ite	ne
 801e758:	230a      	movne	r3, #10
 801e75a:	2308      	moveq	r3, #8
 801e75c:	2100      	movs	r1, #0
 801e75e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e762:	6866      	ldr	r6, [r4, #4]
 801e764:	60a6      	str	r6, [r4, #8]
 801e766:	2e00      	cmp	r6, #0
 801e768:	bfa2      	ittt	ge
 801e76a:	6821      	ldrge	r1, [r4, #0]
 801e76c:	f021 0104 	bicge.w	r1, r1, #4
 801e770:	6021      	strge	r1, [r4, #0]
 801e772:	b90d      	cbnz	r5, 801e778 <_printf_i+0x110>
 801e774:	2e00      	cmp	r6, #0
 801e776:	d04b      	beq.n	801e810 <_printf_i+0x1a8>
 801e778:	4616      	mov	r6, r2
 801e77a:	fbb5 f1f3 	udiv	r1, r5, r3
 801e77e:	fb03 5711 	mls	r7, r3, r1, r5
 801e782:	5dc7      	ldrb	r7, [r0, r7]
 801e784:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e788:	462f      	mov	r7, r5
 801e78a:	42bb      	cmp	r3, r7
 801e78c:	460d      	mov	r5, r1
 801e78e:	d9f4      	bls.n	801e77a <_printf_i+0x112>
 801e790:	2b08      	cmp	r3, #8
 801e792:	d10b      	bne.n	801e7ac <_printf_i+0x144>
 801e794:	6823      	ldr	r3, [r4, #0]
 801e796:	07df      	lsls	r7, r3, #31
 801e798:	d508      	bpl.n	801e7ac <_printf_i+0x144>
 801e79a:	6923      	ldr	r3, [r4, #16]
 801e79c:	6861      	ldr	r1, [r4, #4]
 801e79e:	4299      	cmp	r1, r3
 801e7a0:	bfde      	ittt	le
 801e7a2:	2330      	movle	r3, #48	@ 0x30
 801e7a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e7a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e7ac:	1b92      	subs	r2, r2, r6
 801e7ae:	6122      	str	r2, [r4, #16]
 801e7b0:	f8cd a000 	str.w	sl, [sp]
 801e7b4:	464b      	mov	r3, r9
 801e7b6:	aa03      	add	r2, sp, #12
 801e7b8:	4621      	mov	r1, r4
 801e7ba:	4640      	mov	r0, r8
 801e7bc:	f7ff fee6 	bl	801e58c <_printf_common>
 801e7c0:	3001      	adds	r0, #1
 801e7c2:	d14a      	bne.n	801e85a <_printf_i+0x1f2>
 801e7c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e7c8:	b004      	add	sp, #16
 801e7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7ce:	6823      	ldr	r3, [r4, #0]
 801e7d0:	f043 0320 	orr.w	r3, r3, #32
 801e7d4:	6023      	str	r3, [r4, #0]
 801e7d6:	4833      	ldr	r0, [pc, #204]	@ (801e8a4 <_printf_i+0x23c>)
 801e7d8:	2778      	movs	r7, #120	@ 0x78
 801e7da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e7de:	6823      	ldr	r3, [r4, #0]
 801e7e0:	6831      	ldr	r1, [r6, #0]
 801e7e2:	061f      	lsls	r7, r3, #24
 801e7e4:	f851 5b04 	ldr.w	r5, [r1], #4
 801e7e8:	d402      	bmi.n	801e7f0 <_printf_i+0x188>
 801e7ea:	065f      	lsls	r7, r3, #25
 801e7ec:	bf48      	it	mi
 801e7ee:	b2ad      	uxthmi	r5, r5
 801e7f0:	6031      	str	r1, [r6, #0]
 801e7f2:	07d9      	lsls	r1, r3, #31
 801e7f4:	bf44      	itt	mi
 801e7f6:	f043 0320 	orrmi.w	r3, r3, #32
 801e7fa:	6023      	strmi	r3, [r4, #0]
 801e7fc:	b11d      	cbz	r5, 801e806 <_printf_i+0x19e>
 801e7fe:	2310      	movs	r3, #16
 801e800:	e7ac      	b.n	801e75c <_printf_i+0xf4>
 801e802:	4827      	ldr	r0, [pc, #156]	@ (801e8a0 <_printf_i+0x238>)
 801e804:	e7e9      	b.n	801e7da <_printf_i+0x172>
 801e806:	6823      	ldr	r3, [r4, #0]
 801e808:	f023 0320 	bic.w	r3, r3, #32
 801e80c:	6023      	str	r3, [r4, #0]
 801e80e:	e7f6      	b.n	801e7fe <_printf_i+0x196>
 801e810:	4616      	mov	r6, r2
 801e812:	e7bd      	b.n	801e790 <_printf_i+0x128>
 801e814:	6833      	ldr	r3, [r6, #0]
 801e816:	6825      	ldr	r5, [r4, #0]
 801e818:	6961      	ldr	r1, [r4, #20]
 801e81a:	1d18      	adds	r0, r3, #4
 801e81c:	6030      	str	r0, [r6, #0]
 801e81e:	062e      	lsls	r6, r5, #24
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	d501      	bpl.n	801e828 <_printf_i+0x1c0>
 801e824:	6019      	str	r1, [r3, #0]
 801e826:	e002      	b.n	801e82e <_printf_i+0x1c6>
 801e828:	0668      	lsls	r0, r5, #25
 801e82a:	d5fb      	bpl.n	801e824 <_printf_i+0x1bc>
 801e82c:	8019      	strh	r1, [r3, #0]
 801e82e:	2300      	movs	r3, #0
 801e830:	6123      	str	r3, [r4, #16]
 801e832:	4616      	mov	r6, r2
 801e834:	e7bc      	b.n	801e7b0 <_printf_i+0x148>
 801e836:	6833      	ldr	r3, [r6, #0]
 801e838:	1d1a      	adds	r2, r3, #4
 801e83a:	6032      	str	r2, [r6, #0]
 801e83c:	681e      	ldr	r6, [r3, #0]
 801e83e:	6862      	ldr	r2, [r4, #4]
 801e840:	2100      	movs	r1, #0
 801e842:	4630      	mov	r0, r6
 801e844:	f7e1 fcfc 	bl	8000240 <memchr>
 801e848:	b108      	cbz	r0, 801e84e <_printf_i+0x1e6>
 801e84a:	1b80      	subs	r0, r0, r6
 801e84c:	6060      	str	r0, [r4, #4]
 801e84e:	6863      	ldr	r3, [r4, #4]
 801e850:	6123      	str	r3, [r4, #16]
 801e852:	2300      	movs	r3, #0
 801e854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e858:	e7aa      	b.n	801e7b0 <_printf_i+0x148>
 801e85a:	6923      	ldr	r3, [r4, #16]
 801e85c:	4632      	mov	r2, r6
 801e85e:	4649      	mov	r1, r9
 801e860:	4640      	mov	r0, r8
 801e862:	47d0      	blx	sl
 801e864:	3001      	adds	r0, #1
 801e866:	d0ad      	beq.n	801e7c4 <_printf_i+0x15c>
 801e868:	6823      	ldr	r3, [r4, #0]
 801e86a:	079b      	lsls	r3, r3, #30
 801e86c:	d413      	bmi.n	801e896 <_printf_i+0x22e>
 801e86e:	68e0      	ldr	r0, [r4, #12]
 801e870:	9b03      	ldr	r3, [sp, #12]
 801e872:	4298      	cmp	r0, r3
 801e874:	bfb8      	it	lt
 801e876:	4618      	movlt	r0, r3
 801e878:	e7a6      	b.n	801e7c8 <_printf_i+0x160>
 801e87a:	2301      	movs	r3, #1
 801e87c:	4632      	mov	r2, r6
 801e87e:	4649      	mov	r1, r9
 801e880:	4640      	mov	r0, r8
 801e882:	47d0      	blx	sl
 801e884:	3001      	adds	r0, #1
 801e886:	d09d      	beq.n	801e7c4 <_printf_i+0x15c>
 801e888:	3501      	adds	r5, #1
 801e88a:	68e3      	ldr	r3, [r4, #12]
 801e88c:	9903      	ldr	r1, [sp, #12]
 801e88e:	1a5b      	subs	r3, r3, r1
 801e890:	42ab      	cmp	r3, r5
 801e892:	dcf2      	bgt.n	801e87a <_printf_i+0x212>
 801e894:	e7eb      	b.n	801e86e <_printf_i+0x206>
 801e896:	2500      	movs	r5, #0
 801e898:	f104 0619 	add.w	r6, r4, #25
 801e89c:	e7f5      	b.n	801e88a <_printf_i+0x222>
 801e89e:	bf00      	nop
 801e8a0:	080217bf 	.word	0x080217bf
 801e8a4:	080217d0 	.word	0x080217d0

0801e8a8 <__sflush_r>:
 801e8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8b0:	0716      	lsls	r6, r2, #28
 801e8b2:	4605      	mov	r5, r0
 801e8b4:	460c      	mov	r4, r1
 801e8b6:	d454      	bmi.n	801e962 <__sflush_r+0xba>
 801e8b8:	684b      	ldr	r3, [r1, #4]
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	dc02      	bgt.n	801e8c4 <__sflush_r+0x1c>
 801e8be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	dd48      	ble.n	801e956 <__sflush_r+0xae>
 801e8c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e8c6:	2e00      	cmp	r6, #0
 801e8c8:	d045      	beq.n	801e956 <__sflush_r+0xae>
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e8d0:	682f      	ldr	r7, [r5, #0]
 801e8d2:	6a21      	ldr	r1, [r4, #32]
 801e8d4:	602b      	str	r3, [r5, #0]
 801e8d6:	d030      	beq.n	801e93a <__sflush_r+0x92>
 801e8d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e8da:	89a3      	ldrh	r3, [r4, #12]
 801e8dc:	0759      	lsls	r1, r3, #29
 801e8de:	d505      	bpl.n	801e8ec <__sflush_r+0x44>
 801e8e0:	6863      	ldr	r3, [r4, #4]
 801e8e2:	1ad2      	subs	r2, r2, r3
 801e8e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e8e6:	b10b      	cbz	r3, 801e8ec <__sflush_r+0x44>
 801e8e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e8ea:	1ad2      	subs	r2, r2, r3
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e8f0:	6a21      	ldr	r1, [r4, #32]
 801e8f2:	4628      	mov	r0, r5
 801e8f4:	47b0      	blx	r6
 801e8f6:	1c43      	adds	r3, r0, #1
 801e8f8:	89a3      	ldrh	r3, [r4, #12]
 801e8fa:	d106      	bne.n	801e90a <__sflush_r+0x62>
 801e8fc:	6829      	ldr	r1, [r5, #0]
 801e8fe:	291d      	cmp	r1, #29
 801e900:	d82b      	bhi.n	801e95a <__sflush_r+0xb2>
 801e902:	4a2a      	ldr	r2, [pc, #168]	@ (801e9ac <__sflush_r+0x104>)
 801e904:	410a      	asrs	r2, r1
 801e906:	07d6      	lsls	r6, r2, #31
 801e908:	d427      	bmi.n	801e95a <__sflush_r+0xb2>
 801e90a:	2200      	movs	r2, #0
 801e90c:	6062      	str	r2, [r4, #4]
 801e90e:	04d9      	lsls	r1, r3, #19
 801e910:	6922      	ldr	r2, [r4, #16]
 801e912:	6022      	str	r2, [r4, #0]
 801e914:	d504      	bpl.n	801e920 <__sflush_r+0x78>
 801e916:	1c42      	adds	r2, r0, #1
 801e918:	d101      	bne.n	801e91e <__sflush_r+0x76>
 801e91a:	682b      	ldr	r3, [r5, #0]
 801e91c:	b903      	cbnz	r3, 801e920 <__sflush_r+0x78>
 801e91e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e922:	602f      	str	r7, [r5, #0]
 801e924:	b1b9      	cbz	r1, 801e956 <__sflush_r+0xae>
 801e926:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e92a:	4299      	cmp	r1, r3
 801e92c:	d002      	beq.n	801e934 <__sflush_r+0x8c>
 801e92e:	4628      	mov	r0, r5
 801e930:	f7ff fb40 	bl	801dfb4 <_free_r>
 801e934:	2300      	movs	r3, #0
 801e936:	6363      	str	r3, [r4, #52]	@ 0x34
 801e938:	e00d      	b.n	801e956 <__sflush_r+0xae>
 801e93a:	2301      	movs	r3, #1
 801e93c:	4628      	mov	r0, r5
 801e93e:	47b0      	blx	r6
 801e940:	4602      	mov	r2, r0
 801e942:	1c50      	adds	r0, r2, #1
 801e944:	d1c9      	bne.n	801e8da <__sflush_r+0x32>
 801e946:	682b      	ldr	r3, [r5, #0]
 801e948:	2b00      	cmp	r3, #0
 801e94a:	d0c6      	beq.n	801e8da <__sflush_r+0x32>
 801e94c:	2b1d      	cmp	r3, #29
 801e94e:	d001      	beq.n	801e954 <__sflush_r+0xac>
 801e950:	2b16      	cmp	r3, #22
 801e952:	d11e      	bne.n	801e992 <__sflush_r+0xea>
 801e954:	602f      	str	r7, [r5, #0]
 801e956:	2000      	movs	r0, #0
 801e958:	e022      	b.n	801e9a0 <__sflush_r+0xf8>
 801e95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e95e:	b21b      	sxth	r3, r3
 801e960:	e01b      	b.n	801e99a <__sflush_r+0xf2>
 801e962:	690f      	ldr	r7, [r1, #16]
 801e964:	2f00      	cmp	r7, #0
 801e966:	d0f6      	beq.n	801e956 <__sflush_r+0xae>
 801e968:	0793      	lsls	r3, r2, #30
 801e96a:	680e      	ldr	r6, [r1, #0]
 801e96c:	bf08      	it	eq
 801e96e:	694b      	ldreq	r3, [r1, #20]
 801e970:	600f      	str	r7, [r1, #0]
 801e972:	bf18      	it	ne
 801e974:	2300      	movne	r3, #0
 801e976:	eba6 0807 	sub.w	r8, r6, r7
 801e97a:	608b      	str	r3, [r1, #8]
 801e97c:	f1b8 0f00 	cmp.w	r8, #0
 801e980:	dde9      	ble.n	801e956 <__sflush_r+0xae>
 801e982:	6a21      	ldr	r1, [r4, #32]
 801e984:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e986:	4643      	mov	r3, r8
 801e988:	463a      	mov	r2, r7
 801e98a:	4628      	mov	r0, r5
 801e98c:	47b0      	blx	r6
 801e98e:	2800      	cmp	r0, #0
 801e990:	dc08      	bgt.n	801e9a4 <__sflush_r+0xfc>
 801e992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e99a:	81a3      	strh	r3, [r4, #12]
 801e99c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9a4:	4407      	add	r7, r0
 801e9a6:	eba8 0800 	sub.w	r8, r8, r0
 801e9aa:	e7e7      	b.n	801e97c <__sflush_r+0xd4>
 801e9ac:	dfbffffe 	.word	0xdfbffffe

0801e9b0 <_fflush_r>:
 801e9b0:	b538      	push	{r3, r4, r5, lr}
 801e9b2:	690b      	ldr	r3, [r1, #16]
 801e9b4:	4605      	mov	r5, r0
 801e9b6:	460c      	mov	r4, r1
 801e9b8:	b913      	cbnz	r3, 801e9c0 <_fflush_r+0x10>
 801e9ba:	2500      	movs	r5, #0
 801e9bc:	4628      	mov	r0, r5
 801e9be:	bd38      	pop	{r3, r4, r5, pc}
 801e9c0:	b118      	cbz	r0, 801e9ca <_fflush_r+0x1a>
 801e9c2:	6a03      	ldr	r3, [r0, #32]
 801e9c4:	b90b      	cbnz	r3, 801e9ca <_fflush_r+0x1a>
 801e9c6:	f7fe ff1d 	bl	801d804 <__sinit>
 801e9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d0f3      	beq.n	801e9ba <_fflush_r+0xa>
 801e9d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e9d4:	07d0      	lsls	r0, r2, #31
 801e9d6:	d404      	bmi.n	801e9e2 <_fflush_r+0x32>
 801e9d8:	0599      	lsls	r1, r3, #22
 801e9da:	d402      	bmi.n	801e9e2 <_fflush_r+0x32>
 801e9dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9de:	f7ff faa6 	bl	801df2e <__retarget_lock_acquire_recursive>
 801e9e2:	4628      	mov	r0, r5
 801e9e4:	4621      	mov	r1, r4
 801e9e6:	f7ff ff5f 	bl	801e8a8 <__sflush_r>
 801e9ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9ec:	07da      	lsls	r2, r3, #31
 801e9ee:	4605      	mov	r5, r0
 801e9f0:	d4e4      	bmi.n	801e9bc <_fflush_r+0xc>
 801e9f2:	89a3      	ldrh	r3, [r4, #12]
 801e9f4:	059b      	lsls	r3, r3, #22
 801e9f6:	d4e1      	bmi.n	801e9bc <_fflush_r+0xc>
 801e9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9fa:	f7ff fa99 	bl	801df30 <__retarget_lock_release_recursive>
 801e9fe:	e7dd      	b.n	801e9bc <_fflush_r+0xc>

0801ea00 <fiprintf>:
 801ea00:	b40e      	push	{r1, r2, r3}
 801ea02:	b503      	push	{r0, r1, lr}
 801ea04:	4601      	mov	r1, r0
 801ea06:	ab03      	add	r3, sp, #12
 801ea08:	4805      	ldr	r0, [pc, #20]	@ (801ea20 <fiprintf+0x20>)
 801ea0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea0e:	6800      	ldr	r0, [r0, #0]
 801ea10:	9301      	str	r3, [sp, #4]
 801ea12:	f7ff fca3 	bl	801e35c <_vfiprintf_r>
 801ea16:	b002      	add	sp, #8
 801ea18:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea1c:	b003      	add	sp, #12
 801ea1e:	4770      	bx	lr
 801ea20:	20001bf4 	.word	0x20001bf4

0801ea24 <__swhatbuf_r>:
 801ea24:	b570      	push	{r4, r5, r6, lr}
 801ea26:	460c      	mov	r4, r1
 801ea28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea2c:	2900      	cmp	r1, #0
 801ea2e:	b096      	sub	sp, #88	@ 0x58
 801ea30:	4615      	mov	r5, r2
 801ea32:	461e      	mov	r6, r3
 801ea34:	da0d      	bge.n	801ea52 <__swhatbuf_r+0x2e>
 801ea36:	89a3      	ldrh	r3, [r4, #12]
 801ea38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ea3c:	f04f 0100 	mov.w	r1, #0
 801ea40:	bf14      	ite	ne
 801ea42:	2340      	movne	r3, #64	@ 0x40
 801ea44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ea48:	2000      	movs	r0, #0
 801ea4a:	6031      	str	r1, [r6, #0]
 801ea4c:	602b      	str	r3, [r5, #0]
 801ea4e:	b016      	add	sp, #88	@ 0x58
 801ea50:	bd70      	pop	{r4, r5, r6, pc}
 801ea52:	466a      	mov	r2, sp
 801ea54:	f000 f848 	bl	801eae8 <_fstat_r>
 801ea58:	2800      	cmp	r0, #0
 801ea5a:	dbec      	blt.n	801ea36 <__swhatbuf_r+0x12>
 801ea5c:	9901      	ldr	r1, [sp, #4]
 801ea5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ea62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ea66:	4259      	negs	r1, r3
 801ea68:	4159      	adcs	r1, r3
 801ea6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ea6e:	e7eb      	b.n	801ea48 <__swhatbuf_r+0x24>

0801ea70 <__smakebuf_r>:
 801ea70:	898b      	ldrh	r3, [r1, #12]
 801ea72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea74:	079d      	lsls	r5, r3, #30
 801ea76:	4606      	mov	r6, r0
 801ea78:	460c      	mov	r4, r1
 801ea7a:	d507      	bpl.n	801ea8c <__smakebuf_r+0x1c>
 801ea7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ea80:	6023      	str	r3, [r4, #0]
 801ea82:	6123      	str	r3, [r4, #16]
 801ea84:	2301      	movs	r3, #1
 801ea86:	6163      	str	r3, [r4, #20]
 801ea88:	b003      	add	sp, #12
 801ea8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea8c:	ab01      	add	r3, sp, #4
 801ea8e:	466a      	mov	r2, sp
 801ea90:	f7ff ffc8 	bl	801ea24 <__swhatbuf_r>
 801ea94:	9f00      	ldr	r7, [sp, #0]
 801ea96:	4605      	mov	r5, r0
 801ea98:	4639      	mov	r1, r7
 801ea9a:	4630      	mov	r0, r6
 801ea9c:	f7fe fc80 	bl	801d3a0 <_malloc_r>
 801eaa0:	b948      	cbnz	r0, 801eab6 <__smakebuf_r+0x46>
 801eaa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eaa6:	059a      	lsls	r2, r3, #22
 801eaa8:	d4ee      	bmi.n	801ea88 <__smakebuf_r+0x18>
 801eaaa:	f023 0303 	bic.w	r3, r3, #3
 801eaae:	f043 0302 	orr.w	r3, r3, #2
 801eab2:	81a3      	strh	r3, [r4, #12]
 801eab4:	e7e2      	b.n	801ea7c <__smakebuf_r+0xc>
 801eab6:	89a3      	ldrh	r3, [r4, #12]
 801eab8:	6020      	str	r0, [r4, #0]
 801eaba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eabe:	81a3      	strh	r3, [r4, #12]
 801eac0:	9b01      	ldr	r3, [sp, #4]
 801eac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eac6:	b15b      	cbz	r3, 801eae0 <__smakebuf_r+0x70>
 801eac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eacc:	4630      	mov	r0, r6
 801eace:	f000 f81d 	bl	801eb0c <_isatty_r>
 801ead2:	b128      	cbz	r0, 801eae0 <__smakebuf_r+0x70>
 801ead4:	89a3      	ldrh	r3, [r4, #12]
 801ead6:	f023 0303 	bic.w	r3, r3, #3
 801eada:	f043 0301 	orr.w	r3, r3, #1
 801eade:	81a3      	strh	r3, [r4, #12]
 801eae0:	89a3      	ldrh	r3, [r4, #12]
 801eae2:	431d      	orrs	r5, r3
 801eae4:	81a5      	strh	r5, [r4, #12]
 801eae6:	e7cf      	b.n	801ea88 <__smakebuf_r+0x18>

0801eae8 <_fstat_r>:
 801eae8:	b538      	push	{r3, r4, r5, lr}
 801eaea:	4d07      	ldr	r5, [pc, #28]	@ (801eb08 <_fstat_r+0x20>)
 801eaec:	2300      	movs	r3, #0
 801eaee:	4604      	mov	r4, r0
 801eaf0:	4608      	mov	r0, r1
 801eaf2:	4611      	mov	r1, r2
 801eaf4:	602b      	str	r3, [r5, #0]
 801eaf6:	f7e4 fda9 	bl	800364c <_fstat>
 801eafa:	1c43      	adds	r3, r0, #1
 801eafc:	d102      	bne.n	801eb04 <_fstat_r+0x1c>
 801eafe:	682b      	ldr	r3, [r5, #0]
 801eb00:	b103      	cbz	r3, 801eb04 <_fstat_r+0x1c>
 801eb02:	6023      	str	r3, [r4, #0]
 801eb04:	bd38      	pop	{r3, r4, r5, pc}
 801eb06:	bf00      	nop
 801eb08:	2001a2f0 	.word	0x2001a2f0

0801eb0c <_isatty_r>:
 801eb0c:	b538      	push	{r3, r4, r5, lr}
 801eb0e:	4d06      	ldr	r5, [pc, #24]	@ (801eb28 <_isatty_r+0x1c>)
 801eb10:	2300      	movs	r3, #0
 801eb12:	4604      	mov	r4, r0
 801eb14:	4608      	mov	r0, r1
 801eb16:	602b      	str	r3, [r5, #0]
 801eb18:	f7e4 fda8 	bl	800366c <_isatty>
 801eb1c:	1c43      	adds	r3, r0, #1
 801eb1e:	d102      	bne.n	801eb26 <_isatty_r+0x1a>
 801eb20:	682b      	ldr	r3, [r5, #0]
 801eb22:	b103      	cbz	r3, 801eb26 <_isatty_r+0x1a>
 801eb24:	6023      	str	r3, [r4, #0]
 801eb26:	bd38      	pop	{r3, r4, r5, pc}
 801eb28:	2001a2f0 	.word	0x2001a2f0

0801eb2c <abort>:
 801eb2c:	b508      	push	{r3, lr}
 801eb2e:	2006      	movs	r0, #6
 801eb30:	f000 f82c 	bl	801eb8c <raise>
 801eb34:	2001      	movs	r0, #1
 801eb36:	f7e4 fd55 	bl	80035e4 <_exit>

0801eb3a <_raise_r>:
 801eb3a:	291f      	cmp	r1, #31
 801eb3c:	b538      	push	{r3, r4, r5, lr}
 801eb3e:	4605      	mov	r5, r0
 801eb40:	460c      	mov	r4, r1
 801eb42:	d904      	bls.n	801eb4e <_raise_r+0x14>
 801eb44:	2316      	movs	r3, #22
 801eb46:	6003      	str	r3, [r0, #0]
 801eb48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eb4c:	bd38      	pop	{r3, r4, r5, pc}
 801eb4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801eb50:	b112      	cbz	r2, 801eb58 <_raise_r+0x1e>
 801eb52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eb56:	b94b      	cbnz	r3, 801eb6c <_raise_r+0x32>
 801eb58:	4628      	mov	r0, r5
 801eb5a:	f000 f831 	bl	801ebc0 <_getpid_r>
 801eb5e:	4622      	mov	r2, r4
 801eb60:	4601      	mov	r1, r0
 801eb62:	4628      	mov	r0, r5
 801eb64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb68:	f000 b818 	b.w	801eb9c <_kill_r>
 801eb6c:	2b01      	cmp	r3, #1
 801eb6e:	d00a      	beq.n	801eb86 <_raise_r+0x4c>
 801eb70:	1c59      	adds	r1, r3, #1
 801eb72:	d103      	bne.n	801eb7c <_raise_r+0x42>
 801eb74:	2316      	movs	r3, #22
 801eb76:	6003      	str	r3, [r0, #0]
 801eb78:	2001      	movs	r0, #1
 801eb7a:	e7e7      	b.n	801eb4c <_raise_r+0x12>
 801eb7c:	2100      	movs	r1, #0
 801eb7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801eb82:	4620      	mov	r0, r4
 801eb84:	4798      	blx	r3
 801eb86:	2000      	movs	r0, #0
 801eb88:	e7e0      	b.n	801eb4c <_raise_r+0x12>
	...

0801eb8c <raise>:
 801eb8c:	4b02      	ldr	r3, [pc, #8]	@ (801eb98 <raise+0xc>)
 801eb8e:	4601      	mov	r1, r0
 801eb90:	6818      	ldr	r0, [r3, #0]
 801eb92:	f7ff bfd2 	b.w	801eb3a <_raise_r>
 801eb96:	bf00      	nop
 801eb98:	20001bf4 	.word	0x20001bf4

0801eb9c <_kill_r>:
 801eb9c:	b538      	push	{r3, r4, r5, lr}
 801eb9e:	4d07      	ldr	r5, [pc, #28]	@ (801ebbc <_kill_r+0x20>)
 801eba0:	2300      	movs	r3, #0
 801eba2:	4604      	mov	r4, r0
 801eba4:	4608      	mov	r0, r1
 801eba6:	4611      	mov	r1, r2
 801eba8:	602b      	str	r3, [r5, #0]
 801ebaa:	f7e4 fd0b 	bl	80035c4 <_kill>
 801ebae:	1c43      	adds	r3, r0, #1
 801ebb0:	d102      	bne.n	801ebb8 <_kill_r+0x1c>
 801ebb2:	682b      	ldr	r3, [r5, #0]
 801ebb4:	b103      	cbz	r3, 801ebb8 <_kill_r+0x1c>
 801ebb6:	6023      	str	r3, [r4, #0]
 801ebb8:	bd38      	pop	{r3, r4, r5, pc}
 801ebba:	bf00      	nop
 801ebbc:	2001a2f0 	.word	0x2001a2f0

0801ebc0 <_getpid_r>:
 801ebc0:	f7e4 bcf8 	b.w	80035b4 <_getpid>

0801ebc4 <pow>:
 801ebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebc6:	ed2d 8b02 	vpush	{d8}
 801ebca:	eeb0 8a40 	vmov.f32	s16, s0
 801ebce:	eef0 8a60 	vmov.f32	s17, s1
 801ebd2:	ec55 4b11 	vmov	r4, r5, d1
 801ebd6:	f000 fb1b 	bl	801f210 <__ieee754_pow>
 801ebda:	4622      	mov	r2, r4
 801ebdc:	462b      	mov	r3, r5
 801ebde:	4620      	mov	r0, r4
 801ebe0:	4629      	mov	r1, r5
 801ebe2:	ec57 6b10 	vmov	r6, r7, d0
 801ebe6:	f7e1 ffd9 	bl	8000b9c <__aeabi_dcmpun>
 801ebea:	2800      	cmp	r0, #0
 801ebec:	d13b      	bne.n	801ec66 <pow+0xa2>
 801ebee:	ec51 0b18 	vmov	r0, r1, d8
 801ebf2:	2200      	movs	r2, #0
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	f7e1 ff9f 	bl	8000b38 <__aeabi_dcmpeq>
 801ebfa:	b1b8      	cbz	r0, 801ec2c <pow+0x68>
 801ebfc:	2200      	movs	r2, #0
 801ebfe:	2300      	movs	r3, #0
 801ec00:	4620      	mov	r0, r4
 801ec02:	4629      	mov	r1, r5
 801ec04:	f7e1 ff98 	bl	8000b38 <__aeabi_dcmpeq>
 801ec08:	2800      	cmp	r0, #0
 801ec0a:	d146      	bne.n	801ec9a <pow+0xd6>
 801ec0c:	ec45 4b10 	vmov	d0, r4, r5
 801ec10:	f000 fa16 	bl	801f040 <finite>
 801ec14:	b338      	cbz	r0, 801ec66 <pow+0xa2>
 801ec16:	2200      	movs	r2, #0
 801ec18:	2300      	movs	r3, #0
 801ec1a:	4620      	mov	r0, r4
 801ec1c:	4629      	mov	r1, r5
 801ec1e:	f7e1 ff95 	bl	8000b4c <__aeabi_dcmplt>
 801ec22:	b300      	cbz	r0, 801ec66 <pow+0xa2>
 801ec24:	f7ff f958 	bl	801ded8 <__errno>
 801ec28:	2322      	movs	r3, #34	@ 0x22
 801ec2a:	e01b      	b.n	801ec64 <pow+0xa0>
 801ec2c:	ec47 6b10 	vmov	d0, r6, r7
 801ec30:	f000 fa06 	bl	801f040 <finite>
 801ec34:	b9e0      	cbnz	r0, 801ec70 <pow+0xac>
 801ec36:	eeb0 0a48 	vmov.f32	s0, s16
 801ec3a:	eef0 0a68 	vmov.f32	s1, s17
 801ec3e:	f000 f9ff 	bl	801f040 <finite>
 801ec42:	b1a8      	cbz	r0, 801ec70 <pow+0xac>
 801ec44:	ec45 4b10 	vmov	d0, r4, r5
 801ec48:	f000 f9fa 	bl	801f040 <finite>
 801ec4c:	b180      	cbz	r0, 801ec70 <pow+0xac>
 801ec4e:	4632      	mov	r2, r6
 801ec50:	463b      	mov	r3, r7
 801ec52:	4630      	mov	r0, r6
 801ec54:	4639      	mov	r1, r7
 801ec56:	f7e1 ffa1 	bl	8000b9c <__aeabi_dcmpun>
 801ec5a:	2800      	cmp	r0, #0
 801ec5c:	d0e2      	beq.n	801ec24 <pow+0x60>
 801ec5e:	f7ff f93b 	bl	801ded8 <__errno>
 801ec62:	2321      	movs	r3, #33	@ 0x21
 801ec64:	6003      	str	r3, [r0, #0]
 801ec66:	ecbd 8b02 	vpop	{d8}
 801ec6a:	ec47 6b10 	vmov	d0, r6, r7
 801ec6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec70:	2200      	movs	r2, #0
 801ec72:	2300      	movs	r3, #0
 801ec74:	4630      	mov	r0, r6
 801ec76:	4639      	mov	r1, r7
 801ec78:	f7e1 ff5e 	bl	8000b38 <__aeabi_dcmpeq>
 801ec7c:	2800      	cmp	r0, #0
 801ec7e:	d0f2      	beq.n	801ec66 <pow+0xa2>
 801ec80:	eeb0 0a48 	vmov.f32	s0, s16
 801ec84:	eef0 0a68 	vmov.f32	s1, s17
 801ec88:	f000 f9da 	bl	801f040 <finite>
 801ec8c:	2800      	cmp	r0, #0
 801ec8e:	d0ea      	beq.n	801ec66 <pow+0xa2>
 801ec90:	ec45 4b10 	vmov	d0, r4, r5
 801ec94:	f000 f9d4 	bl	801f040 <finite>
 801ec98:	e7c3      	b.n	801ec22 <pow+0x5e>
 801ec9a:	4f01      	ldr	r7, [pc, #4]	@ (801eca0 <pow+0xdc>)
 801ec9c:	2600      	movs	r6, #0
 801ec9e:	e7e2      	b.n	801ec66 <pow+0xa2>
 801eca0:	3ff00000 	.word	0x3ff00000

0801eca4 <sqrt>:
 801eca4:	b538      	push	{r3, r4, r5, lr}
 801eca6:	ed2d 8b02 	vpush	{d8}
 801ecaa:	ec55 4b10 	vmov	r4, r5, d0
 801ecae:	f000 f9d3 	bl	801f058 <__ieee754_sqrt>
 801ecb2:	4622      	mov	r2, r4
 801ecb4:	462b      	mov	r3, r5
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	4629      	mov	r1, r5
 801ecba:	eeb0 8a40 	vmov.f32	s16, s0
 801ecbe:	eef0 8a60 	vmov.f32	s17, s1
 801ecc2:	f7e1 ff6b 	bl	8000b9c <__aeabi_dcmpun>
 801ecc6:	b990      	cbnz	r0, 801ecee <sqrt+0x4a>
 801ecc8:	2200      	movs	r2, #0
 801ecca:	2300      	movs	r3, #0
 801eccc:	4620      	mov	r0, r4
 801ecce:	4629      	mov	r1, r5
 801ecd0:	f7e1 ff3c 	bl	8000b4c <__aeabi_dcmplt>
 801ecd4:	b158      	cbz	r0, 801ecee <sqrt+0x4a>
 801ecd6:	f7ff f8ff 	bl	801ded8 <__errno>
 801ecda:	2321      	movs	r3, #33	@ 0x21
 801ecdc:	6003      	str	r3, [r0, #0]
 801ecde:	2200      	movs	r2, #0
 801ece0:	2300      	movs	r3, #0
 801ece2:	4610      	mov	r0, r2
 801ece4:	4619      	mov	r1, r3
 801ece6:	f7e1 fde9 	bl	80008bc <__aeabi_ddiv>
 801ecea:	ec41 0b18 	vmov	d8, r0, r1
 801ecee:	eeb0 0a48 	vmov.f32	s0, s16
 801ecf2:	eef0 0a68 	vmov.f32	s1, s17
 801ecf6:	ecbd 8b02 	vpop	{d8}
 801ecfa:	bd38      	pop	{r3, r4, r5, pc}
 801ecfc:	0000      	movs	r0, r0
	...

0801ed00 <atan>:
 801ed00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed04:	ec55 4b10 	vmov	r4, r5, d0
 801ed08:	4bbf      	ldr	r3, [pc, #764]	@ (801f008 <atan+0x308>)
 801ed0a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801ed0e:	429e      	cmp	r6, r3
 801ed10:	46ab      	mov	fp, r5
 801ed12:	d918      	bls.n	801ed46 <atan+0x46>
 801ed14:	4bbd      	ldr	r3, [pc, #756]	@ (801f00c <atan+0x30c>)
 801ed16:	429e      	cmp	r6, r3
 801ed18:	d801      	bhi.n	801ed1e <atan+0x1e>
 801ed1a:	d109      	bne.n	801ed30 <atan+0x30>
 801ed1c:	b144      	cbz	r4, 801ed30 <atan+0x30>
 801ed1e:	4622      	mov	r2, r4
 801ed20:	462b      	mov	r3, r5
 801ed22:	4620      	mov	r0, r4
 801ed24:	4629      	mov	r1, r5
 801ed26:	f7e1 fae9 	bl	80002fc <__adddf3>
 801ed2a:	4604      	mov	r4, r0
 801ed2c:	460d      	mov	r5, r1
 801ed2e:	e006      	b.n	801ed3e <atan+0x3e>
 801ed30:	f1bb 0f00 	cmp.w	fp, #0
 801ed34:	f340 812b 	ble.w	801ef8e <atan+0x28e>
 801ed38:	a597      	add	r5, pc, #604	@ (adr r5, 801ef98 <atan+0x298>)
 801ed3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ed3e:	ec45 4b10 	vmov	d0, r4, r5
 801ed42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed46:	4bb2      	ldr	r3, [pc, #712]	@ (801f010 <atan+0x310>)
 801ed48:	429e      	cmp	r6, r3
 801ed4a:	d813      	bhi.n	801ed74 <atan+0x74>
 801ed4c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801ed50:	429e      	cmp	r6, r3
 801ed52:	d80c      	bhi.n	801ed6e <atan+0x6e>
 801ed54:	a392      	add	r3, pc, #584	@ (adr r3, 801efa0 <atan+0x2a0>)
 801ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	4629      	mov	r1, r5
 801ed5e:	f7e1 facd 	bl	80002fc <__adddf3>
 801ed62:	4bac      	ldr	r3, [pc, #688]	@ (801f014 <atan+0x314>)
 801ed64:	2200      	movs	r2, #0
 801ed66:	f7e1 ff0f 	bl	8000b88 <__aeabi_dcmpgt>
 801ed6a:	2800      	cmp	r0, #0
 801ed6c:	d1e7      	bne.n	801ed3e <atan+0x3e>
 801ed6e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ed72:	e029      	b.n	801edc8 <atan+0xc8>
 801ed74:	f000 f95c 	bl	801f030 <fabs>
 801ed78:	4ba7      	ldr	r3, [pc, #668]	@ (801f018 <atan+0x318>)
 801ed7a:	429e      	cmp	r6, r3
 801ed7c:	ec55 4b10 	vmov	r4, r5, d0
 801ed80:	f200 80bc 	bhi.w	801eefc <atan+0x1fc>
 801ed84:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ed88:	429e      	cmp	r6, r3
 801ed8a:	f200 809e 	bhi.w	801eeca <atan+0x1ca>
 801ed8e:	4622      	mov	r2, r4
 801ed90:	462b      	mov	r3, r5
 801ed92:	4620      	mov	r0, r4
 801ed94:	4629      	mov	r1, r5
 801ed96:	f7e1 fab1 	bl	80002fc <__adddf3>
 801ed9a:	4b9e      	ldr	r3, [pc, #632]	@ (801f014 <atan+0x314>)
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	f7e1 faab 	bl	80002f8 <__aeabi_dsub>
 801eda2:	2200      	movs	r2, #0
 801eda4:	4606      	mov	r6, r0
 801eda6:	460f      	mov	r7, r1
 801eda8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801edac:	4620      	mov	r0, r4
 801edae:	4629      	mov	r1, r5
 801edb0:	f7e1 faa4 	bl	80002fc <__adddf3>
 801edb4:	4602      	mov	r2, r0
 801edb6:	460b      	mov	r3, r1
 801edb8:	4630      	mov	r0, r6
 801edba:	4639      	mov	r1, r7
 801edbc:	f7e1 fd7e 	bl	80008bc <__aeabi_ddiv>
 801edc0:	f04f 0a00 	mov.w	sl, #0
 801edc4:	4604      	mov	r4, r0
 801edc6:	460d      	mov	r5, r1
 801edc8:	4622      	mov	r2, r4
 801edca:	462b      	mov	r3, r5
 801edcc:	4620      	mov	r0, r4
 801edce:	4629      	mov	r1, r5
 801edd0:	f7e1 fc4a 	bl	8000668 <__aeabi_dmul>
 801edd4:	4602      	mov	r2, r0
 801edd6:	460b      	mov	r3, r1
 801edd8:	4680      	mov	r8, r0
 801edda:	4689      	mov	r9, r1
 801eddc:	f7e1 fc44 	bl	8000668 <__aeabi_dmul>
 801ede0:	a371      	add	r3, pc, #452	@ (adr r3, 801efa8 <atan+0x2a8>)
 801ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ede6:	4606      	mov	r6, r0
 801ede8:	460f      	mov	r7, r1
 801edea:	f7e1 fc3d 	bl	8000668 <__aeabi_dmul>
 801edee:	a370      	add	r3, pc, #448	@ (adr r3, 801efb0 <atan+0x2b0>)
 801edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf4:	f7e1 fa82 	bl	80002fc <__adddf3>
 801edf8:	4632      	mov	r2, r6
 801edfa:	463b      	mov	r3, r7
 801edfc:	f7e1 fc34 	bl	8000668 <__aeabi_dmul>
 801ee00:	a36d      	add	r3, pc, #436	@ (adr r3, 801efb8 <atan+0x2b8>)
 801ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee06:	f7e1 fa79 	bl	80002fc <__adddf3>
 801ee0a:	4632      	mov	r2, r6
 801ee0c:	463b      	mov	r3, r7
 801ee0e:	f7e1 fc2b 	bl	8000668 <__aeabi_dmul>
 801ee12:	a36b      	add	r3, pc, #428	@ (adr r3, 801efc0 <atan+0x2c0>)
 801ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee18:	f7e1 fa70 	bl	80002fc <__adddf3>
 801ee1c:	4632      	mov	r2, r6
 801ee1e:	463b      	mov	r3, r7
 801ee20:	f7e1 fc22 	bl	8000668 <__aeabi_dmul>
 801ee24:	a368      	add	r3, pc, #416	@ (adr r3, 801efc8 <atan+0x2c8>)
 801ee26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee2a:	f7e1 fa67 	bl	80002fc <__adddf3>
 801ee2e:	4632      	mov	r2, r6
 801ee30:	463b      	mov	r3, r7
 801ee32:	f7e1 fc19 	bl	8000668 <__aeabi_dmul>
 801ee36:	a366      	add	r3, pc, #408	@ (adr r3, 801efd0 <atan+0x2d0>)
 801ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3c:	f7e1 fa5e 	bl	80002fc <__adddf3>
 801ee40:	4642      	mov	r2, r8
 801ee42:	464b      	mov	r3, r9
 801ee44:	f7e1 fc10 	bl	8000668 <__aeabi_dmul>
 801ee48:	a363      	add	r3, pc, #396	@ (adr r3, 801efd8 <atan+0x2d8>)
 801ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee4e:	4680      	mov	r8, r0
 801ee50:	4689      	mov	r9, r1
 801ee52:	4630      	mov	r0, r6
 801ee54:	4639      	mov	r1, r7
 801ee56:	f7e1 fc07 	bl	8000668 <__aeabi_dmul>
 801ee5a:	a361      	add	r3, pc, #388	@ (adr r3, 801efe0 <atan+0x2e0>)
 801ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee60:	f7e1 fa4a 	bl	80002f8 <__aeabi_dsub>
 801ee64:	4632      	mov	r2, r6
 801ee66:	463b      	mov	r3, r7
 801ee68:	f7e1 fbfe 	bl	8000668 <__aeabi_dmul>
 801ee6c:	a35e      	add	r3, pc, #376	@ (adr r3, 801efe8 <atan+0x2e8>)
 801ee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee72:	f7e1 fa41 	bl	80002f8 <__aeabi_dsub>
 801ee76:	4632      	mov	r2, r6
 801ee78:	463b      	mov	r3, r7
 801ee7a:	f7e1 fbf5 	bl	8000668 <__aeabi_dmul>
 801ee7e:	a35c      	add	r3, pc, #368	@ (adr r3, 801eff0 <atan+0x2f0>)
 801ee80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee84:	f7e1 fa38 	bl	80002f8 <__aeabi_dsub>
 801ee88:	4632      	mov	r2, r6
 801ee8a:	463b      	mov	r3, r7
 801ee8c:	f7e1 fbec 	bl	8000668 <__aeabi_dmul>
 801ee90:	a359      	add	r3, pc, #356	@ (adr r3, 801eff8 <atan+0x2f8>)
 801ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee96:	f7e1 fa2f 	bl	80002f8 <__aeabi_dsub>
 801ee9a:	4632      	mov	r2, r6
 801ee9c:	463b      	mov	r3, r7
 801ee9e:	f7e1 fbe3 	bl	8000668 <__aeabi_dmul>
 801eea2:	4602      	mov	r2, r0
 801eea4:	460b      	mov	r3, r1
 801eea6:	4640      	mov	r0, r8
 801eea8:	4649      	mov	r1, r9
 801eeaa:	f7e1 fa27 	bl	80002fc <__adddf3>
 801eeae:	4622      	mov	r2, r4
 801eeb0:	462b      	mov	r3, r5
 801eeb2:	f7e1 fbd9 	bl	8000668 <__aeabi_dmul>
 801eeb6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801eeba:	4602      	mov	r2, r0
 801eebc:	460b      	mov	r3, r1
 801eebe:	d148      	bne.n	801ef52 <atan+0x252>
 801eec0:	4620      	mov	r0, r4
 801eec2:	4629      	mov	r1, r5
 801eec4:	f7e1 fa18 	bl	80002f8 <__aeabi_dsub>
 801eec8:	e72f      	b.n	801ed2a <atan+0x2a>
 801eeca:	4b52      	ldr	r3, [pc, #328]	@ (801f014 <atan+0x314>)
 801eecc:	2200      	movs	r2, #0
 801eece:	4620      	mov	r0, r4
 801eed0:	4629      	mov	r1, r5
 801eed2:	f7e1 fa11 	bl	80002f8 <__aeabi_dsub>
 801eed6:	4b4f      	ldr	r3, [pc, #316]	@ (801f014 <atan+0x314>)
 801eed8:	4606      	mov	r6, r0
 801eeda:	460f      	mov	r7, r1
 801eedc:	2200      	movs	r2, #0
 801eede:	4620      	mov	r0, r4
 801eee0:	4629      	mov	r1, r5
 801eee2:	f7e1 fa0b 	bl	80002fc <__adddf3>
 801eee6:	4602      	mov	r2, r0
 801eee8:	460b      	mov	r3, r1
 801eeea:	4630      	mov	r0, r6
 801eeec:	4639      	mov	r1, r7
 801eeee:	f7e1 fce5 	bl	80008bc <__aeabi_ddiv>
 801eef2:	f04f 0a01 	mov.w	sl, #1
 801eef6:	4604      	mov	r4, r0
 801eef8:	460d      	mov	r5, r1
 801eefa:	e765      	b.n	801edc8 <atan+0xc8>
 801eefc:	4b47      	ldr	r3, [pc, #284]	@ (801f01c <atan+0x31c>)
 801eefe:	429e      	cmp	r6, r3
 801ef00:	d21c      	bcs.n	801ef3c <atan+0x23c>
 801ef02:	4b47      	ldr	r3, [pc, #284]	@ (801f020 <atan+0x320>)
 801ef04:	2200      	movs	r2, #0
 801ef06:	4620      	mov	r0, r4
 801ef08:	4629      	mov	r1, r5
 801ef0a:	f7e1 f9f5 	bl	80002f8 <__aeabi_dsub>
 801ef0e:	4b44      	ldr	r3, [pc, #272]	@ (801f020 <atan+0x320>)
 801ef10:	4606      	mov	r6, r0
 801ef12:	460f      	mov	r7, r1
 801ef14:	2200      	movs	r2, #0
 801ef16:	4620      	mov	r0, r4
 801ef18:	4629      	mov	r1, r5
 801ef1a:	f7e1 fba5 	bl	8000668 <__aeabi_dmul>
 801ef1e:	4b3d      	ldr	r3, [pc, #244]	@ (801f014 <atan+0x314>)
 801ef20:	2200      	movs	r2, #0
 801ef22:	f7e1 f9eb 	bl	80002fc <__adddf3>
 801ef26:	4602      	mov	r2, r0
 801ef28:	460b      	mov	r3, r1
 801ef2a:	4630      	mov	r0, r6
 801ef2c:	4639      	mov	r1, r7
 801ef2e:	f7e1 fcc5 	bl	80008bc <__aeabi_ddiv>
 801ef32:	f04f 0a02 	mov.w	sl, #2
 801ef36:	4604      	mov	r4, r0
 801ef38:	460d      	mov	r5, r1
 801ef3a:	e745      	b.n	801edc8 <atan+0xc8>
 801ef3c:	4622      	mov	r2, r4
 801ef3e:	462b      	mov	r3, r5
 801ef40:	4938      	ldr	r1, [pc, #224]	@ (801f024 <atan+0x324>)
 801ef42:	2000      	movs	r0, #0
 801ef44:	f7e1 fcba 	bl	80008bc <__aeabi_ddiv>
 801ef48:	f04f 0a03 	mov.w	sl, #3
 801ef4c:	4604      	mov	r4, r0
 801ef4e:	460d      	mov	r5, r1
 801ef50:	e73a      	b.n	801edc8 <atan+0xc8>
 801ef52:	4b35      	ldr	r3, [pc, #212]	@ (801f028 <atan+0x328>)
 801ef54:	4e35      	ldr	r6, [pc, #212]	@ (801f02c <atan+0x32c>)
 801ef56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef5e:	f7e1 f9cb 	bl	80002f8 <__aeabi_dsub>
 801ef62:	4622      	mov	r2, r4
 801ef64:	462b      	mov	r3, r5
 801ef66:	f7e1 f9c7 	bl	80002f8 <__aeabi_dsub>
 801ef6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801ef6e:	4602      	mov	r2, r0
 801ef70:	460b      	mov	r3, r1
 801ef72:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ef76:	f7e1 f9bf 	bl	80002f8 <__aeabi_dsub>
 801ef7a:	f1bb 0f00 	cmp.w	fp, #0
 801ef7e:	4604      	mov	r4, r0
 801ef80:	460d      	mov	r5, r1
 801ef82:	f6bf aedc 	bge.w	801ed3e <atan+0x3e>
 801ef86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ef8a:	461d      	mov	r5, r3
 801ef8c:	e6d7      	b.n	801ed3e <atan+0x3e>
 801ef8e:	a51c      	add	r5, pc, #112	@ (adr r5, 801f000 <atan+0x300>)
 801ef90:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ef94:	e6d3      	b.n	801ed3e <atan+0x3e>
 801ef96:	bf00      	nop
 801ef98:	54442d18 	.word	0x54442d18
 801ef9c:	3ff921fb 	.word	0x3ff921fb
 801efa0:	8800759c 	.word	0x8800759c
 801efa4:	7e37e43c 	.word	0x7e37e43c
 801efa8:	e322da11 	.word	0xe322da11
 801efac:	3f90ad3a 	.word	0x3f90ad3a
 801efb0:	24760deb 	.word	0x24760deb
 801efb4:	3fa97b4b 	.word	0x3fa97b4b
 801efb8:	a0d03d51 	.word	0xa0d03d51
 801efbc:	3fb10d66 	.word	0x3fb10d66
 801efc0:	c54c206e 	.word	0xc54c206e
 801efc4:	3fb745cd 	.word	0x3fb745cd
 801efc8:	920083ff 	.word	0x920083ff
 801efcc:	3fc24924 	.word	0x3fc24924
 801efd0:	5555550d 	.word	0x5555550d
 801efd4:	3fd55555 	.word	0x3fd55555
 801efd8:	2c6a6c2f 	.word	0x2c6a6c2f
 801efdc:	bfa2b444 	.word	0xbfa2b444
 801efe0:	52defd9a 	.word	0x52defd9a
 801efe4:	3fadde2d 	.word	0x3fadde2d
 801efe8:	af749a6d 	.word	0xaf749a6d
 801efec:	3fb3b0f2 	.word	0x3fb3b0f2
 801eff0:	fe231671 	.word	0xfe231671
 801eff4:	3fbc71c6 	.word	0x3fbc71c6
 801eff8:	9998ebc4 	.word	0x9998ebc4
 801effc:	3fc99999 	.word	0x3fc99999
 801f000:	54442d18 	.word	0x54442d18
 801f004:	bff921fb 	.word	0xbff921fb
 801f008:	440fffff 	.word	0x440fffff
 801f00c:	7ff00000 	.word	0x7ff00000
 801f010:	3fdbffff 	.word	0x3fdbffff
 801f014:	3ff00000 	.word	0x3ff00000
 801f018:	3ff2ffff 	.word	0x3ff2ffff
 801f01c:	40038000 	.word	0x40038000
 801f020:	3ff80000 	.word	0x3ff80000
 801f024:	bff00000 	.word	0xbff00000
 801f028:	080217e8 	.word	0x080217e8
 801f02c:	08021808 	.word	0x08021808

0801f030 <fabs>:
 801f030:	ec51 0b10 	vmov	r0, r1, d0
 801f034:	4602      	mov	r2, r0
 801f036:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f03a:	ec43 2b10 	vmov	d0, r2, r3
 801f03e:	4770      	bx	lr

0801f040 <finite>:
 801f040:	b082      	sub	sp, #8
 801f042:	ed8d 0b00 	vstr	d0, [sp]
 801f046:	9801      	ldr	r0, [sp, #4]
 801f048:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801f04c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801f050:	0fc0      	lsrs	r0, r0, #31
 801f052:	b002      	add	sp, #8
 801f054:	4770      	bx	lr
	...

0801f058 <__ieee754_sqrt>:
 801f058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f05c:	4a68      	ldr	r2, [pc, #416]	@ (801f200 <__ieee754_sqrt+0x1a8>)
 801f05e:	ec55 4b10 	vmov	r4, r5, d0
 801f062:	43aa      	bics	r2, r5
 801f064:	462b      	mov	r3, r5
 801f066:	4621      	mov	r1, r4
 801f068:	d110      	bne.n	801f08c <__ieee754_sqrt+0x34>
 801f06a:	4622      	mov	r2, r4
 801f06c:	4620      	mov	r0, r4
 801f06e:	4629      	mov	r1, r5
 801f070:	f7e1 fafa 	bl	8000668 <__aeabi_dmul>
 801f074:	4602      	mov	r2, r0
 801f076:	460b      	mov	r3, r1
 801f078:	4620      	mov	r0, r4
 801f07a:	4629      	mov	r1, r5
 801f07c:	f7e1 f93e 	bl	80002fc <__adddf3>
 801f080:	4604      	mov	r4, r0
 801f082:	460d      	mov	r5, r1
 801f084:	ec45 4b10 	vmov	d0, r4, r5
 801f088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f08c:	2d00      	cmp	r5, #0
 801f08e:	dc0e      	bgt.n	801f0ae <__ieee754_sqrt+0x56>
 801f090:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f094:	4322      	orrs	r2, r4
 801f096:	d0f5      	beq.n	801f084 <__ieee754_sqrt+0x2c>
 801f098:	b19d      	cbz	r5, 801f0c2 <__ieee754_sqrt+0x6a>
 801f09a:	4622      	mov	r2, r4
 801f09c:	4620      	mov	r0, r4
 801f09e:	4629      	mov	r1, r5
 801f0a0:	f7e1 f92a 	bl	80002f8 <__aeabi_dsub>
 801f0a4:	4602      	mov	r2, r0
 801f0a6:	460b      	mov	r3, r1
 801f0a8:	f7e1 fc08 	bl	80008bc <__aeabi_ddiv>
 801f0ac:	e7e8      	b.n	801f080 <__ieee754_sqrt+0x28>
 801f0ae:	152a      	asrs	r2, r5, #20
 801f0b0:	d115      	bne.n	801f0de <__ieee754_sqrt+0x86>
 801f0b2:	2000      	movs	r0, #0
 801f0b4:	e009      	b.n	801f0ca <__ieee754_sqrt+0x72>
 801f0b6:	0acb      	lsrs	r3, r1, #11
 801f0b8:	3a15      	subs	r2, #21
 801f0ba:	0549      	lsls	r1, r1, #21
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d0fa      	beq.n	801f0b6 <__ieee754_sqrt+0x5e>
 801f0c0:	e7f7      	b.n	801f0b2 <__ieee754_sqrt+0x5a>
 801f0c2:	462a      	mov	r2, r5
 801f0c4:	e7fa      	b.n	801f0bc <__ieee754_sqrt+0x64>
 801f0c6:	005b      	lsls	r3, r3, #1
 801f0c8:	3001      	adds	r0, #1
 801f0ca:	02dc      	lsls	r4, r3, #11
 801f0cc:	d5fb      	bpl.n	801f0c6 <__ieee754_sqrt+0x6e>
 801f0ce:	1e44      	subs	r4, r0, #1
 801f0d0:	1b12      	subs	r2, r2, r4
 801f0d2:	f1c0 0420 	rsb	r4, r0, #32
 801f0d6:	fa21 f404 	lsr.w	r4, r1, r4
 801f0da:	4323      	orrs	r3, r4
 801f0dc:	4081      	lsls	r1, r0
 801f0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f0e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f0e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f0ea:	07d2      	lsls	r2, r2, #31
 801f0ec:	bf5c      	itt	pl
 801f0ee:	005b      	lslpl	r3, r3, #1
 801f0f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f0f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f0f8:	bf58      	it	pl
 801f0fa:	0049      	lslpl	r1, r1, #1
 801f0fc:	2600      	movs	r6, #0
 801f0fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f102:	106d      	asrs	r5, r5, #1
 801f104:	0049      	lsls	r1, r1, #1
 801f106:	2016      	movs	r0, #22
 801f108:	4632      	mov	r2, r6
 801f10a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f10e:	1917      	adds	r7, r2, r4
 801f110:	429f      	cmp	r7, r3
 801f112:	bfde      	ittt	le
 801f114:	193a      	addle	r2, r7, r4
 801f116:	1bdb      	suble	r3, r3, r7
 801f118:	1936      	addle	r6, r6, r4
 801f11a:	0fcf      	lsrs	r7, r1, #31
 801f11c:	3801      	subs	r0, #1
 801f11e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f122:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f126:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f12a:	d1f0      	bne.n	801f10e <__ieee754_sqrt+0xb6>
 801f12c:	4604      	mov	r4, r0
 801f12e:	2720      	movs	r7, #32
 801f130:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f134:	429a      	cmp	r2, r3
 801f136:	eb00 0e0c 	add.w	lr, r0, ip
 801f13a:	db02      	blt.n	801f142 <__ieee754_sqrt+0xea>
 801f13c:	d113      	bne.n	801f166 <__ieee754_sqrt+0x10e>
 801f13e:	458e      	cmp	lr, r1
 801f140:	d811      	bhi.n	801f166 <__ieee754_sqrt+0x10e>
 801f142:	f1be 0f00 	cmp.w	lr, #0
 801f146:	eb0e 000c 	add.w	r0, lr, ip
 801f14a:	da42      	bge.n	801f1d2 <__ieee754_sqrt+0x17a>
 801f14c:	2800      	cmp	r0, #0
 801f14e:	db40      	blt.n	801f1d2 <__ieee754_sqrt+0x17a>
 801f150:	f102 0801 	add.w	r8, r2, #1
 801f154:	1a9b      	subs	r3, r3, r2
 801f156:	458e      	cmp	lr, r1
 801f158:	bf88      	it	hi
 801f15a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801f15e:	eba1 010e 	sub.w	r1, r1, lr
 801f162:	4464      	add	r4, ip
 801f164:	4642      	mov	r2, r8
 801f166:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f16a:	3f01      	subs	r7, #1
 801f16c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f170:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f174:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f178:	d1dc      	bne.n	801f134 <__ieee754_sqrt+0xdc>
 801f17a:	4319      	orrs	r1, r3
 801f17c:	d01b      	beq.n	801f1b6 <__ieee754_sqrt+0x15e>
 801f17e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f204 <__ieee754_sqrt+0x1ac>
 801f182:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f208 <__ieee754_sqrt+0x1b0>
 801f186:	e9da 0100 	ldrd	r0, r1, [sl]
 801f18a:	e9db 2300 	ldrd	r2, r3, [fp]
 801f18e:	f7e1 f8b3 	bl	80002f8 <__aeabi_dsub>
 801f192:	e9da 8900 	ldrd	r8, r9, [sl]
 801f196:	4602      	mov	r2, r0
 801f198:	460b      	mov	r3, r1
 801f19a:	4640      	mov	r0, r8
 801f19c:	4649      	mov	r1, r9
 801f19e:	f7e1 fcdf 	bl	8000b60 <__aeabi_dcmple>
 801f1a2:	b140      	cbz	r0, 801f1b6 <__ieee754_sqrt+0x15e>
 801f1a4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801f1a8:	e9da 0100 	ldrd	r0, r1, [sl]
 801f1ac:	e9db 2300 	ldrd	r2, r3, [fp]
 801f1b0:	d111      	bne.n	801f1d6 <__ieee754_sqrt+0x17e>
 801f1b2:	3601      	adds	r6, #1
 801f1b4:	463c      	mov	r4, r7
 801f1b6:	1072      	asrs	r2, r6, #1
 801f1b8:	0863      	lsrs	r3, r4, #1
 801f1ba:	07f1      	lsls	r1, r6, #31
 801f1bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f1c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f1c4:	bf48      	it	mi
 801f1c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f1ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f1ce:	4618      	mov	r0, r3
 801f1d0:	e756      	b.n	801f080 <__ieee754_sqrt+0x28>
 801f1d2:	4690      	mov	r8, r2
 801f1d4:	e7be      	b.n	801f154 <__ieee754_sqrt+0xfc>
 801f1d6:	f7e1 f891 	bl	80002fc <__adddf3>
 801f1da:	e9da 8900 	ldrd	r8, r9, [sl]
 801f1de:	4602      	mov	r2, r0
 801f1e0:	460b      	mov	r3, r1
 801f1e2:	4640      	mov	r0, r8
 801f1e4:	4649      	mov	r1, r9
 801f1e6:	f7e1 fcb1 	bl	8000b4c <__aeabi_dcmplt>
 801f1ea:	b120      	cbz	r0, 801f1f6 <__ieee754_sqrt+0x19e>
 801f1ec:	1ca0      	adds	r0, r4, #2
 801f1ee:	bf08      	it	eq
 801f1f0:	3601      	addeq	r6, #1
 801f1f2:	3402      	adds	r4, #2
 801f1f4:	e7df      	b.n	801f1b6 <__ieee754_sqrt+0x15e>
 801f1f6:	1c63      	adds	r3, r4, #1
 801f1f8:	f023 0401 	bic.w	r4, r3, #1
 801f1fc:	e7db      	b.n	801f1b6 <__ieee754_sqrt+0x15e>
 801f1fe:	bf00      	nop
 801f200:	7ff00000 	.word	0x7ff00000
 801f204:	20001c50 	.word	0x20001c50
 801f208:	20001c48 	.word	0x20001c48
 801f20c:	00000000 	.word	0x00000000

0801f210 <__ieee754_pow>:
 801f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f214:	b091      	sub	sp, #68	@ 0x44
 801f216:	ed8d 1b00 	vstr	d1, [sp]
 801f21a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801f21e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801f222:	ea5a 0001 	orrs.w	r0, sl, r1
 801f226:	ec57 6b10 	vmov	r6, r7, d0
 801f22a:	d113      	bne.n	801f254 <__ieee754_pow+0x44>
 801f22c:	19b3      	adds	r3, r6, r6
 801f22e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801f232:	4152      	adcs	r2, r2
 801f234:	4298      	cmp	r0, r3
 801f236:	4b98      	ldr	r3, [pc, #608]	@ (801f498 <__ieee754_pow+0x288>)
 801f238:	4193      	sbcs	r3, r2
 801f23a:	f080 84ea 	bcs.w	801fc12 <__ieee754_pow+0xa02>
 801f23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f242:	4630      	mov	r0, r6
 801f244:	4639      	mov	r1, r7
 801f246:	f7e1 f859 	bl	80002fc <__adddf3>
 801f24a:	ec41 0b10 	vmov	d0, r0, r1
 801f24e:	b011      	add	sp, #68	@ 0x44
 801f250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f254:	4a91      	ldr	r2, [pc, #580]	@ (801f49c <__ieee754_pow+0x28c>)
 801f256:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801f25a:	4590      	cmp	r8, r2
 801f25c:	463d      	mov	r5, r7
 801f25e:	4633      	mov	r3, r6
 801f260:	d806      	bhi.n	801f270 <__ieee754_pow+0x60>
 801f262:	d101      	bne.n	801f268 <__ieee754_pow+0x58>
 801f264:	2e00      	cmp	r6, #0
 801f266:	d1ea      	bne.n	801f23e <__ieee754_pow+0x2e>
 801f268:	4592      	cmp	sl, r2
 801f26a:	d801      	bhi.n	801f270 <__ieee754_pow+0x60>
 801f26c:	d10e      	bne.n	801f28c <__ieee754_pow+0x7c>
 801f26e:	b169      	cbz	r1, 801f28c <__ieee754_pow+0x7c>
 801f270:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801f274:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801f278:	431d      	orrs	r5, r3
 801f27a:	d1e0      	bne.n	801f23e <__ieee754_pow+0x2e>
 801f27c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f280:	18db      	adds	r3, r3, r3
 801f282:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801f286:	4152      	adcs	r2, r2
 801f288:	429d      	cmp	r5, r3
 801f28a:	e7d4      	b.n	801f236 <__ieee754_pow+0x26>
 801f28c:	2d00      	cmp	r5, #0
 801f28e:	46c3      	mov	fp, r8
 801f290:	da3a      	bge.n	801f308 <__ieee754_pow+0xf8>
 801f292:	4a83      	ldr	r2, [pc, #524]	@ (801f4a0 <__ieee754_pow+0x290>)
 801f294:	4592      	cmp	sl, r2
 801f296:	d84d      	bhi.n	801f334 <__ieee754_pow+0x124>
 801f298:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801f29c:	4592      	cmp	sl, r2
 801f29e:	f240 84c7 	bls.w	801fc30 <__ieee754_pow+0xa20>
 801f2a2:	ea4f 522a 	mov.w	r2, sl, asr #20
 801f2a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801f2aa:	2a14      	cmp	r2, #20
 801f2ac:	dd0f      	ble.n	801f2ce <__ieee754_pow+0xbe>
 801f2ae:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801f2b2:	fa21 f402 	lsr.w	r4, r1, r2
 801f2b6:	fa04 f202 	lsl.w	r2, r4, r2
 801f2ba:	428a      	cmp	r2, r1
 801f2bc:	f040 84b8 	bne.w	801fc30 <__ieee754_pow+0xa20>
 801f2c0:	f004 0401 	and.w	r4, r4, #1
 801f2c4:	f1c4 0402 	rsb	r4, r4, #2
 801f2c8:	2900      	cmp	r1, #0
 801f2ca:	d158      	bne.n	801f37e <__ieee754_pow+0x16e>
 801f2cc:	e00e      	b.n	801f2ec <__ieee754_pow+0xdc>
 801f2ce:	2900      	cmp	r1, #0
 801f2d0:	d154      	bne.n	801f37c <__ieee754_pow+0x16c>
 801f2d2:	f1c2 0214 	rsb	r2, r2, #20
 801f2d6:	fa4a f402 	asr.w	r4, sl, r2
 801f2da:	fa04 f202 	lsl.w	r2, r4, r2
 801f2de:	4552      	cmp	r2, sl
 801f2e0:	f040 84a3 	bne.w	801fc2a <__ieee754_pow+0xa1a>
 801f2e4:	f004 0401 	and.w	r4, r4, #1
 801f2e8:	f1c4 0402 	rsb	r4, r4, #2
 801f2ec:	4a6d      	ldr	r2, [pc, #436]	@ (801f4a4 <__ieee754_pow+0x294>)
 801f2ee:	4592      	cmp	sl, r2
 801f2f0:	d12e      	bne.n	801f350 <__ieee754_pow+0x140>
 801f2f2:	f1b9 0f00 	cmp.w	r9, #0
 801f2f6:	f280 8494 	bge.w	801fc22 <__ieee754_pow+0xa12>
 801f2fa:	496a      	ldr	r1, [pc, #424]	@ (801f4a4 <__ieee754_pow+0x294>)
 801f2fc:	4632      	mov	r2, r6
 801f2fe:	463b      	mov	r3, r7
 801f300:	2000      	movs	r0, #0
 801f302:	f7e1 fadb 	bl	80008bc <__aeabi_ddiv>
 801f306:	e7a0      	b.n	801f24a <__ieee754_pow+0x3a>
 801f308:	2400      	movs	r4, #0
 801f30a:	bbc1      	cbnz	r1, 801f37e <__ieee754_pow+0x16e>
 801f30c:	4a63      	ldr	r2, [pc, #396]	@ (801f49c <__ieee754_pow+0x28c>)
 801f30e:	4592      	cmp	sl, r2
 801f310:	d1ec      	bne.n	801f2ec <__ieee754_pow+0xdc>
 801f312:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801f316:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801f31a:	431a      	orrs	r2, r3
 801f31c:	f000 8479 	beq.w	801fc12 <__ieee754_pow+0xa02>
 801f320:	4b61      	ldr	r3, [pc, #388]	@ (801f4a8 <__ieee754_pow+0x298>)
 801f322:	4598      	cmp	r8, r3
 801f324:	d908      	bls.n	801f338 <__ieee754_pow+0x128>
 801f326:	f1b9 0f00 	cmp.w	r9, #0
 801f32a:	f2c0 8476 	blt.w	801fc1a <__ieee754_pow+0xa0a>
 801f32e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f332:	e78a      	b.n	801f24a <__ieee754_pow+0x3a>
 801f334:	2402      	movs	r4, #2
 801f336:	e7e8      	b.n	801f30a <__ieee754_pow+0xfa>
 801f338:	f1b9 0f00 	cmp.w	r9, #0
 801f33c:	f04f 0000 	mov.w	r0, #0
 801f340:	f04f 0100 	mov.w	r1, #0
 801f344:	da81      	bge.n	801f24a <__ieee754_pow+0x3a>
 801f346:	e9dd 0300 	ldrd	r0, r3, [sp]
 801f34a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f34e:	e77c      	b.n	801f24a <__ieee754_pow+0x3a>
 801f350:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801f354:	d106      	bne.n	801f364 <__ieee754_pow+0x154>
 801f356:	4632      	mov	r2, r6
 801f358:	463b      	mov	r3, r7
 801f35a:	4630      	mov	r0, r6
 801f35c:	4639      	mov	r1, r7
 801f35e:	f7e1 f983 	bl	8000668 <__aeabi_dmul>
 801f362:	e772      	b.n	801f24a <__ieee754_pow+0x3a>
 801f364:	4a51      	ldr	r2, [pc, #324]	@ (801f4ac <__ieee754_pow+0x29c>)
 801f366:	4591      	cmp	r9, r2
 801f368:	d109      	bne.n	801f37e <__ieee754_pow+0x16e>
 801f36a:	2d00      	cmp	r5, #0
 801f36c:	db07      	blt.n	801f37e <__ieee754_pow+0x16e>
 801f36e:	ec47 6b10 	vmov	d0, r6, r7
 801f372:	b011      	add	sp, #68	@ 0x44
 801f374:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f378:	f7ff be6e 	b.w	801f058 <__ieee754_sqrt>
 801f37c:	2400      	movs	r4, #0
 801f37e:	ec47 6b10 	vmov	d0, r6, r7
 801f382:	9302      	str	r3, [sp, #8]
 801f384:	f7ff fe54 	bl	801f030 <fabs>
 801f388:	9b02      	ldr	r3, [sp, #8]
 801f38a:	ec51 0b10 	vmov	r0, r1, d0
 801f38e:	bb53      	cbnz	r3, 801f3e6 <__ieee754_pow+0x1d6>
 801f390:	4b44      	ldr	r3, [pc, #272]	@ (801f4a4 <__ieee754_pow+0x294>)
 801f392:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801f396:	429a      	cmp	r2, r3
 801f398:	d002      	beq.n	801f3a0 <__ieee754_pow+0x190>
 801f39a:	f1b8 0f00 	cmp.w	r8, #0
 801f39e:	d122      	bne.n	801f3e6 <__ieee754_pow+0x1d6>
 801f3a0:	f1b9 0f00 	cmp.w	r9, #0
 801f3a4:	da05      	bge.n	801f3b2 <__ieee754_pow+0x1a2>
 801f3a6:	4602      	mov	r2, r0
 801f3a8:	460b      	mov	r3, r1
 801f3aa:	2000      	movs	r0, #0
 801f3ac:	493d      	ldr	r1, [pc, #244]	@ (801f4a4 <__ieee754_pow+0x294>)
 801f3ae:	f7e1 fa85 	bl	80008bc <__aeabi_ddiv>
 801f3b2:	2d00      	cmp	r5, #0
 801f3b4:	f6bf af49 	bge.w	801f24a <__ieee754_pow+0x3a>
 801f3b8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801f3bc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801f3c0:	ea58 0804 	orrs.w	r8, r8, r4
 801f3c4:	d108      	bne.n	801f3d8 <__ieee754_pow+0x1c8>
 801f3c6:	4602      	mov	r2, r0
 801f3c8:	460b      	mov	r3, r1
 801f3ca:	4610      	mov	r0, r2
 801f3cc:	4619      	mov	r1, r3
 801f3ce:	f7e0 ff93 	bl	80002f8 <__aeabi_dsub>
 801f3d2:	4602      	mov	r2, r0
 801f3d4:	460b      	mov	r3, r1
 801f3d6:	e794      	b.n	801f302 <__ieee754_pow+0xf2>
 801f3d8:	2c01      	cmp	r4, #1
 801f3da:	f47f af36 	bne.w	801f24a <__ieee754_pow+0x3a>
 801f3de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f3e2:	4619      	mov	r1, r3
 801f3e4:	e731      	b.n	801f24a <__ieee754_pow+0x3a>
 801f3e6:	0feb      	lsrs	r3, r5, #31
 801f3e8:	3b01      	subs	r3, #1
 801f3ea:	ea53 0204 	orrs.w	r2, r3, r4
 801f3ee:	d102      	bne.n	801f3f6 <__ieee754_pow+0x1e6>
 801f3f0:	4632      	mov	r2, r6
 801f3f2:	463b      	mov	r3, r7
 801f3f4:	e7e9      	b.n	801f3ca <__ieee754_pow+0x1ba>
 801f3f6:	3c01      	subs	r4, #1
 801f3f8:	431c      	orrs	r4, r3
 801f3fa:	d016      	beq.n	801f42a <__ieee754_pow+0x21a>
 801f3fc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801f488 <__ieee754_pow+0x278>
 801f400:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801f404:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f408:	f240 8112 	bls.w	801f630 <__ieee754_pow+0x420>
 801f40c:	4b28      	ldr	r3, [pc, #160]	@ (801f4b0 <__ieee754_pow+0x2a0>)
 801f40e:	459a      	cmp	sl, r3
 801f410:	4b25      	ldr	r3, [pc, #148]	@ (801f4a8 <__ieee754_pow+0x298>)
 801f412:	d916      	bls.n	801f442 <__ieee754_pow+0x232>
 801f414:	4598      	cmp	r8, r3
 801f416:	d80b      	bhi.n	801f430 <__ieee754_pow+0x220>
 801f418:	f1b9 0f00 	cmp.w	r9, #0
 801f41c:	da0b      	bge.n	801f436 <__ieee754_pow+0x226>
 801f41e:	2000      	movs	r0, #0
 801f420:	b011      	add	sp, #68	@ 0x44
 801f422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f426:	f000 bceb 	b.w	801fe00 <__math_oflow>
 801f42a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801f490 <__ieee754_pow+0x280>
 801f42e:	e7e7      	b.n	801f400 <__ieee754_pow+0x1f0>
 801f430:	f1b9 0f00 	cmp.w	r9, #0
 801f434:	dcf3      	bgt.n	801f41e <__ieee754_pow+0x20e>
 801f436:	2000      	movs	r0, #0
 801f438:	b011      	add	sp, #68	@ 0x44
 801f43a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f43e:	f000 bcd7 	b.w	801fdf0 <__math_uflow>
 801f442:	4598      	cmp	r8, r3
 801f444:	d20c      	bcs.n	801f460 <__ieee754_pow+0x250>
 801f446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f44a:	2200      	movs	r2, #0
 801f44c:	2300      	movs	r3, #0
 801f44e:	f7e1 fb7d 	bl	8000b4c <__aeabi_dcmplt>
 801f452:	3800      	subs	r0, #0
 801f454:	bf18      	it	ne
 801f456:	2001      	movne	r0, #1
 801f458:	f1b9 0f00 	cmp.w	r9, #0
 801f45c:	daec      	bge.n	801f438 <__ieee754_pow+0x228>
 801f45e:	e7df      	b.n	801f420 <__ieee754_pow+0x210>
 801f460:	4b10      	ldr	r3, [pc, #64]	@ (801f4a4 <__ieee754_pow+0x294>)
 801f462:	4598      	cmp	r8, r3
 801f464:	f04f 0200 	mov.w	r2, #0
 801f468:	d924      	bls.n	801f4b4 <__ieee754_pow+0x2a4>
 801f46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f46e:	2300      	movs	r3, #0
 801f470:	f7e1 fb6c 	bl	8000b4c <__aeabi_dcmplt>
 801f474:	3800      	subs	r0, #0
 801f476:	bf18      	it	ne
 801f478:	2001      	movne	r0, #1
 801f47a:	f1b9 0f00 	cmp.w	r9, #0
 801f47e:	dccf      	bgt.n	801f420 <__ieee754_pow+0x210>
 801f480:	e7da      	b.n	801f438 <__ieee754_pow+0x228>
 801f482:	bf00      	nop
 801f484:	f3af 8000 	nop.w
 801f488:	00000000 	.word	0x00000000
 801f48c:	3ff00000 	.word	0x3ff00000
 801f490:	00000000 	.word	0x00000000
 801f494:	bff00000 	.word	0xbff00000
 801f498:	fff00000 	.word	0xfff00000
 801f49c:	7ff00000 	.word	0x7ff00000
 801f4a0:	433fffff 	.word	0x433fffff
 801f4a4:	3ff00000 	.word	0x3ff00000
 801f4a8:	3fefffff 	.word	0x3fefffff
 801f4ac:	3fe00000 	.word	0x3fe00000
 801f4b0:	43f00000 	.word	0x43f00000
 801f4b4:	4b5a      	ldr	r3, [pc, #360]	@ (801f620 <__ieee754_pow+0x410>)
 801f4b6:	f7e0 ff1f 	bl	80002f8 <__aeabi_dsub>
 801f4ba:	a351      	add	r3, pc, #324	@ (adr r3, 801f600 <__ieee754_pow+0x3f0>)
 801f4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4c0:	4604      	mov	r4, r0
 801f4c2:	460d      	mov	r5, r1
 801f4c4:	f7e1 f8d0 	bl	8000668 <__aeabi_dmul>
 801f4c8:	a34f      	add	r3, pc, #316	@ (adr r3, 801f608 <__ieee754_pow+0x3f8>)
 801f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4ce:	4606      	mov	r6, r0
 801f4d0:	460f      	mov	r7, r1
 801f4d2:	4620      	mov	r0, r4
 801f4d4:	4629      	mov	r1, r5
 801f4d6:	f7e1 f8c7 	bl	8000668 <__aeabi_dmul>
 801f4da:	4b52      	ldr	r3, [pc, #328]	@ (801f624 <__ieee754_pow+0x414>)
 801f4dc:	4682      	mov	sl, r0
 801f4de:	468b      	mov	fp, r1
 801f4e0:	2200      	movs	r2, #0
 801f4e2:	4620      	mov	r0, r4
 801f4e4:	4629      	mov	r1, r5
 801f4e6:	f7e1 f8bf 	bl	8000668 <__aeabi_dmul>
 801f4ea:	4602      	mov	r2, r0
 801f4ec:	460b      	mov	r3, r1
 801f4ee:	a148      	add	r1, pc, #288	@ (adr r1, 801f610 <__ieee754_pow+0x400>)
 801f4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4f4:	f7e0 ff00 	bl	80002f8 <__aeabi_dsub>
 801f4f8:	4622      	mov	r2, r4
 801f4fa:	462b      	mov	r3, r5
 801f4fc:	f7e1 f8b4 	bl	8000668 <__aeabi_dmul>
 801f500:	4602      	mov	r2, r0
 801f502:	460b      	mov	r3, r1
 801f504:	2000      	movs	r0, #0
 801f506:	4948      	ldr	r1, [pc, #288]	@ (801f628 <__ieee754_pow+0x418>)
 801f508:	f7e0 fef6 	bl	80002f8 <__aeabi_dsub>
 801f50c:	4622      	mov	r2, r4
 801f50e:	4680      	mov	r8, r0
 801f510:	4689      	mov	r9, r1
 801f512:	462b      	mov	r3, r5
 801f514:	4620      	mov	r0, r4
 801f516:	4629      	mov	r1, r5
 801f518:	f7e1 f8a6 	bl	8000668 <__aeabi_dmul>
 801f51c:	4602      	mov	r2, r0
 801f51e:	460b      	mov	r3, r1
 801f520:	4640      	mov	r0, r8
 801f522:	4649      	mov	r1, r9
 801f524:	f7e1 f8a0 	bl	8000668 <__aeabi_dmul>
 801f528:	a33b      	add	r3, pc, #236	@ (adr r3, 801f618 <__ieee754_pow+0x408>)
 801f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f52e:	f7e1 f89b 	bl	8000668 <__aeabi_dmul>
 801f532:	4602      	mov	r2, r0
 801f534:	460b      	mov	r3, r1
 801f536:	4650      	mov	r0, sl
 801f538:	4659      	mov	r1, fp
 801f53a:	f7e0 fedd 	bl	80002f8 <__aeabi_dsub>
 801f53e:	4602      	mov	r2, r0
 801f540:	460b      	mov	r3, r1
 801f542:	4680      	mov	r8, r0
 801f544:	4689      	mov	r9, r1
 801f546:	4630      	mov	r0, r6
 801f548:	4639      	mov	r1, r7
 801f54a:	f7e0 fed7 	bl	80002fc <__adddf3>
 801f54e:	2400      	movs	r4, #0
 801f550:	4632      	mov	r2, r6
 801f552:	463b      	mov	r3, r7
 801f554:	4620      	mov	r0, r4
 801f556:	460d      	mov	r5, r1
 801f558:	f7e0 fece 	bl	80002f8 <__aeabi_dsub>
 801f55c:	4602      	mov	r2, r0
 801f55e:	460b      	mov	r3, r1
 801f560:	4640      	mov	r0, r8
 801f562:	4649      	mov	r1, r9
 801f564:	f7e0 fec8 	bl	80002f8 <__aeabi_dsub>
 801f568:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f56c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f570:	2300      	movs	r3, #0
 801f572:	9304      	str	r3, [sp, #16]
 801f574:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f578:	4606      	mov	r6, r0
 801f57a:	460f      	mov	r7, r1
 801f57c:	4652      	mov	r2, sl
 801f57e:	465b      	mov	r3, fp
 801f580:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f584:	f7e0 feb8 	bl	80002f8 <__aeabi_dsub>
 801f588:	4622      	mov	r2, r4
 801f58a:	462b      	mov	r3, r5
 801f58c:	f7e1 f86c 	bl	8000668 <__aeabi_dmul>
 801f590:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f594:	4680      	mov	r8, r0
 801f596:	4689      	mov	r9, r1
 801f598:	4630      	mov	r0, r6
 801f59a:	4639      	mov	r1, r7
 801f59c:	f7e1 f864 	bl	8000668 <__aeabi_dmul>
 801f5a0:	4602      	mov	r2, r0
 801f5a2:	460b      	mov	r3, r1
 801f5a4:	4640      	mov	r0, r8
 801f5a6:	4649      	mov	r1, r9
 801f5a8:	f7e0 fea8 	bl	80002fc <__adddf3>
 801f5ac:	4652      	mov	r2, sl
 801f5ae:	465b      	mov	r3, fp
 801f5b0:	4606      	mov	r6, r0
 801f5b2:	460f      	mov	r7, r1
 801f5b4:	4620      	mov	r0, r4
 801f5b6:	4629      	mov	r1, r5
 801f5b8:	f7e1 f856 	bl	8000668 <__aeabi_dmul>
 801f5bc:	460b      	mov	r3, r1
 801f5be:	4602      	mov	r2, r0
 801f5c0:	4680      	mov	r8, r0
 801f5c2:	4689      	mov	r9, r1
 801f5c4:	4630      	mov	r0, r6
 801f5c6:	4639      	mov	r1, r7
 801f5c8:	f7e0 fe98 	bl	80002fc <__adddf3>
 801f5cc:	4b17      	ldr	r3, [pc, #92]	@ (801f62c <__ieee754_pow+0x41c>)
 801f5ce:	4299      	cmp	r1, r3
 801f5d0:	4604      	mov	r4, r0
 801f5d2:	460d      	mov	r5, r1
 801f5d4:	468a      	mov	sl, r1
 801f5d6:	468b      	mov	fp, r1
 801f5d8:	f340 82ef 	ble.w	801fbba <__ieee754_pow+0x9aa>
 801f5dc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801f5e0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801f5e4:	4303      	orrs	r3, r0
 801f5e6:	f000 81e8 	beq.w	801f9ba <__ieee754_pow+0x7aa>
 801f5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5ee:	2200      	movs	r2, #0
 801f5f0:	2300      	movs	r3, #0
 801f5f2:	f7e1 faab 	bl	8000b4c <__aeabi_dcmplt>
 801f5f6:	3800      	subs	r0, #0
 801f5f8:	bf18      	it	ne
 801f5fa:	2001      	movne	r0, #1
 801f5fc:	e710      	b.n	801f420 <__ieee754_pow+0x210>
 801f5fe:	bf00      	nop
 801f600:	60000000 	.word	0x60000000
 801f604:	3ff71547 	.word	0x3ff71547
 801f608:	f85ddf44 	.word	0xf85ddf44
 801f60c:	3e54ae0b 	.word	0x3e54ae0b
 801f610:	55555555 	.word	0x55555555
 801f614:	3fd55555 	.word	0x3fd55555
 801f618:	652b82fe 	.word	0x652b82fe
 801f61c:	3ff71547 	.word	0x3ff71547
 801f620:	3ff00000 	.word	0x3ff00000
 801f624:	3fd00000 	.word	0x3fd00000
 801f628:	3fe00000 	.word	0x3fe00000
 801f62c:	408fffff 	.word	0x408fffff
 801f630:	4bd5      	ldr	r3, [pc, #852]	@ (801f988 <__ieee754_pow+0x778>)
 801f632:	402b      	ands	r3, r5
 801f634:	2200      	movs	r2, #0
 801f636:	b92b      	cbnz	r3, 801f644 <__ieee754_pow+0x434>
 801f638:	4bd4      	ldr	r3, [pc, #848]	@ (801f98c <__ieee754_pow+0x77c>)
 801f63a:	f7e1 f815 	bl	8000668 <__aeabi_dmul>
 801f63e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801f642:	468b      	mov	fp, r1
 801f644:	ea4f 532b 	mov.w	r3, fp, asr #20
 801f648:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801f64c:	4413      	add	r3, r2
 801f64e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f650:	4bcf      	ldr	r3, [pc, #828]	@ (801f990 <__ieee754_pow+0x780>)
 801f652:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801f656:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801f65a:	459b      	cmp	fp, r3
 801f65c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f660:	dd08      	ble.n	801f674 <__ieee754_pow+0x464>
 801f662:	4bcc      	ldr	r3, [pc, #816]	@ (801f994 <__ieee754_pow+0x784>)
 801f664:	459b      	cmp	fp, r3
 801f666:	f340 81a5 	ble.w	801f9b4 <__ieee754_pow+0x7a4>
 801f66a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f66c:	3301      	adds	r3, #1
 801f66e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f670:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801f674:	f04f 0a00 	mov.w	sl, #0
 801f678:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801f67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f67e:	4bc6      	ldr	r3, [pc, #792]	@ (801f998 <__ieee754_pow+0x788>)
 801f680:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f684:	ed93 7b00 	vldr	d7, [r3]
 801f688:	4629      	mov	r1, r5
 801f68a:	ec53 2b17 	vmov	r2, r3, d7
 801f68e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f692:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f696:	f7e0 fe2f 	bl	80002f8 <__aeabi_dsub>
 801f69a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f69e:	4606      	mov	r6, r0
 801f6a0:	460f      	mov	r7, r1
 801f6a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f6a6:	f7e0 fe29 	bl	80002fc <__adddf3>
 801f6aa:	4602      	mov	r2, r0
 801f6ac:	460b      	mov	r3, r1
 801f6ae:	2000      	movs	r0, #0
 801f6b0:	49ba      	ldr	r1, [pc, #744]	@ (801f99c <__ieee754_pow+0x78c>)
 801f6b2:	f7e1 f903 	bl	80008bc <__aeabi_ddiv>
 801f6b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801f6ba:	4602      	mov	r2, r0
 801f6bc:	460b      	mov	r3, r1
 801f6be:	4630      	mov	r0, r6
 801f6c0:	4639      	mov	r1, r7
 801f6c2:	f7e0 ffd1 	bl	8000668 <__aeabi_dmul>
 801f6c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f6ca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801f6ce:	106d      	asrs	r5, r5, #1
 801f6d0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801f6d4:	f04f 0b00 	mov.w	fp, #0
 801f6d8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801f6dc:	4661      	mov	r1, ip
 801f6de:	2200      	movs	r2, #0
 801f6e0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801f6e4:	4658      	mov	r0, fp
 801f6e6:	46e1      	mov	r9, ip
 801f6e8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801f6ec:	4614      	mov	r4, r2
 801f6ee:	461d      	mov	r5, r3
 801f6f0:	f7e0 ffba 	bl	8000668 <__aeabi_dmul>
 801f6f4:	4602      	mov	r2, r0
 801f6f6:	460b      	mov	r3, r1
 801f6f8:	4630      	mov	r0, r6
 801f6fa:	4639      	mov	r1, r7
 801f6fc:	f7e0 fdfc 	bl	80002f8 <__aeabi_dsub>
 801f700:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f704:	4606      	mov	r6, r0
 801f706:	460f      	mov	r7, r1
 801f708:	4620      	mov	r0, r4
 801f70a:	4629      	mov	r1, r5
 801f70c:	f7e0 fdf4 	bl	80002f8 <__aeabi_dsub>
 801f710:	4602      	mov	r2, r0
 801f712:	460b      	mov	r3, r1
 801f714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f718:	f7e0 fdee 	bl	80002f8 <__aeabi_dsub>
 801f71c:	465a      	mov	r2, fp
 801f71e:	464b      	mov	r3, r9
 801f720:	f7e0 ffa2 	bl	8000668 <__aeabi_dmul>
 801f724:	4602      	mov	r2, r0
 801f726:	460b      	mov	r3, r1
 801f728:	4630      	mov	r0, r6
 801f72a:	4639      	mov	r1, r7
 801f72c:	f7e0 fde4 	bl	80002f8 <__aeabi_dsub>
 801f730:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801f734:	f7e0 ff98 	bl	8000668 <__aeabi_dmul>
 801f738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f73c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f740:	4610      	mov	r0, r2
 801f742:	4619      	mov	r1, r3
 801f744:	f7e0 ff90 	bl	8000668 <__aeabi_dmul>
 801f748:	a37d      	add	r3, pc, #500	@ (adr r3, 801f940 <__ieee754_pow+0x730>)
 801f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74e:	4604      	mov	r4, r0
 801f750:	460d      	mov	r5, r1
 801f752:	f7e0 ff89 	bl	8000668 <__aeabi_dmul>
 801f756:	a37c      	add	r3, pc, #496	@ (adr r3, 801f948 <__ieee754_pow+0x738>)
 801f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f75c:	f7e0 fdce 	bl	80002fc <__adddf3>
 801f760:	4622      	mov	r2, r4
 801f762:	462b      	mov	r3, r5
 801f764:	f7e0 ff80 	bl	8000668 <__aeabi_dmul>
 801f768:	a379      	add	r3, pc, #484	@ (adr r3, 801f950 <__ieee754_pow+0x740>)
 801f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f76e:	f7e0 fdc5 	bl	80002fc <__adddf3>
 801f772:	4622      	mov	r2, r4
 801f774:	462b      	mov	r3, r5
 801f776:	f7e0 ff77 	bl	8000668 <__aeabi_dmul>
 801f77a:	a377      	add	r3, pc, #476	@ (adr r3, 801f958 <__ieee754_pow+0x748>)
 801f77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f780:	f7e0 fdbc 	bl	80002fc <__adddf3>
 801f784:	4622      	mov	r2, r4
 801f786:	462b      	mov	r3, r5
 801f788:	f7e0 ff6e 	bl	8000668 <__aeabi_dmul>
 801f78c:	a374      	add	r3, pc, #464	@ (adr r3, 801f960 <__ieee754_pow+0x750>)
 801f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f792:	f7e0 fdb3 	bl	80002fc <__adddf3>
 801f796:	4622      	mov	r2, r4
 801f798:	462b      	mov	r3, r5
 801f79a:	f7e0 ff65 	bl	8000668 <__aeabi_dmul>
 801f79e:	a372      	add	r3, pc, #456	@ (adr r3, 801f968 <__ieee754_pow+0x758>)
 801f7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7a4:	f7e0 fdaa 	bl	80002fc <__adddf3>
 801f7a8:	4622      	mov	r2, r4
 801f7aa:	4606      	mov	r6, r0
 801f7ac:	460f      	mov	r7, r1
 801f7ae:	462b      	mov	r3, r5
 801f7b0:	4620      	mov	r0, r4
 801f7b2:	4629      	mov	r1, r5
 801f7b4:	f7e0 ff58 	bl	8000668 <__aeabi_dmul>
 801f7b8:	4602      	mov	r2, r0
 801f7ba:	460b      	mov	r3, r1
 801f7bc:	4630      	mov	r0, r6
 801f7be:	4639      	mov	r1, r7
 801f7c0:	f7e0 ff52 	bl	8000668 <__aeabi_dmul>
 801f7c4:	465a      	mov	r2, fp
 801f7c6:	4604      	mov	r4, r0
 801f7c8:	460d      	mov	r5, r1
 801f7ca:	464b      	mov	r3, r9
 801f7cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f7d0:	f7e0 fd94 	bl	80002fc <__adddf3>
 801f7d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f7d8:	f7e0 ff46 	bl	8000668 <__aeabi_dmul>
 801f7dc:	4622      	mov	r2, r4
 801f7de:	462b      	mov	r3, r5
 801f7e0:	f7e0 fd8c 	bl	80002fc <__adddf3>
 801f7e4:	465a      	mov	r2, fp
 801f7e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f7ea:	464b      	mov	r3, r9
 801f7ec:	4658      	mov	r0, fp
 801f7ee:	4649      	mov	r1, r9
 801f7f0:	f7e0 ff3a 	bl	8000668 <__aeabi_dmul>
 801f7f4:	4b6a      	ldr	r3, [pc, #424]	@ (801f9a0 <__ieee754_pow+0x790>)
 801f7f6:	2200      	movs	r2, #0
 801f7f8:	4606      	mov	r6, r0
 801f7fa:	460f      	mov	r7, r1
 801f7fc:	f7e0 fd7e 	bl	80002fc <__adddf3>
 801f800:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f804:	f7e0 fd7a 	bl	80002fc <__adddf3>
 801f808:	46d8      	mov	r8, fp
 801f80a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801f80e:	460d      	mov	r5, r1
 801f810:	465a      	mov	r2, fp
 801f812:	460b      	mov	r3, r1
 801f814:	4640      	mov	r0, r8
 801f816:	4649      	mov	r1, r9
 801f818:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801f81c:	f7e0 ff24 	bl	8000668 <__aeabi_dmul>
 801f820:	465c      	mov	r4, fp
 801f822:	4680      	mov	r8, r0
 801f824:	4689      	mov	r9, r1
 801f826:	4b5e      	ldr	r3, [pc, #376]	@ (801f9a0 <__ieee754_pow+0x790>)
 801f828:	2200      	movs	r2, #0
 801f82a:	4620      	mov	r0, r4
 801f82c:	4629      	mov	r1, r5
 801f82e:	f7e0 fd63 	bl	80002f8 <__aeabi_dsub>
 801f832:	4632      	mov	r2, r6
 801f834:	463b      	mov	r3, r7
 801f836:	f7e0 fd5f 	bl	80002f8 <__aeabi_dsub>
 801f83a:	4602      	mov	r2, r0
 801f83c:	460b      	mov	r3, r1
 801f83e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f842:	f7e0 fd59 	bl	80002f8 <__aeabi_dsub>
 801f846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f84a:	f7e0 ff0d 	bl	8000668 <__aeabi_dmul>
 801f84e:	4622      	mov	r2, r4
 801f850:	4606      	mov	r6, r0
 801f852:	460f      	mov	r7, r1
 801f854:	462b      	mov	r3, r5
 801f856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f85a:	f7e0 ff05 	bl	8000668 <__aeabi_dmul>
 801f85e:	4602      	mov	r2, r0
 801f860:	460b      	mov	r3, r1
 801f862:	4630      	mov	r0, r6
 801f864:	4639      	mov	r1, r7
 801f866:	f7e0 fd49 	bl	80002fc <__adddf3>
 801f86a:	4606      	mov	r6, r0
 801f86c:	460f      	mov	r7, r1
 801f86e:	4602      	mov	r2, r0
 801f870:	460b      	mov	r3, r1
 801f872:	4640      	mov	r0, r8
 801f874:	4649      	mov	r1, r9
 801f876:	f7e0 fd41 	bl	80002fc <__adddf3>
 801f87a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801f87e:	a33c      	add	r3, pc, #240	@ (adr r3, 801f970 <__ieee754_pow+0x760>)
 801f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f884:	4658      	mov	r0, fp
 801f886:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801f88a:	460d      	mov	r5, r1
 801f88c:	f7e0 feec 	bl	8000668 <__aeabi_dmul>
 801f890:	465c      	mov	r4, fp
 801f892:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f896:	4642      	mov	r2, r8
 801f898:	464b      	mov	r3, r9
 801f89a:	4620      	mov	r0, r4
 801f89c:	4629      	mov	r1, r5
 801f89e:	f7e0 fd2b 	bl	80002f8 <__aeabi_dsub>
 801f8a2:	4602      	mov	r2, r0
 801f8a4:	460b      	mov	r3, r1
 801f8a6:	4630      	mov	r0, r6
 801f8a8:	4639      	mov	r1, r7
 801f8aa:	f7e0 fd25 	bl	80002f8 <__aeabi_dsub>
 801f8ae:	a332      	add	r3, pc, #200	@ (adr r3, 801f978 <__ieee754_pow+0x768>)
 801f8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8b4:	f7e0 fed8 	bl	8000668 <__aeabi_dmul>
 801f8b8:	a331      	add	r3, pc, #196	@ (adr r3, 801f980 <__ieee754_pow+0x770>)
 801f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8be:	4606      	mov	r6, r0
 801f8c0:	460f      	mov	r7, r1
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	4629      	mov	r1, r5
 801f8c6:	f7e0 fecf 	bl	8000668 <__aeabi_dmul>
 801f8ca:	4602      	mov	r2, r0
 801f8cc:	460b      	mov	r3, r1
 801f8ce:	4630      	mov	r0, r6
 801f8d0:	4639      	mov	r1, r7
 801f8d2:	f7e0 fd13 	bl	80002fc <__adddf3>
 801f8d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f8d8:	4b32      	ldr	r3, [pc, #200]	@ (801f9a4 <__ieee754_pow+0x794>)
 801f8da:	4413      	add	r3, r2
 801f8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8e0:	f7e0 fd0c 	bl	80002fc <__adddf3>
 801f8e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f8e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f8ea:	f7e0 fe53 	bl	8000594 <__aeabi_i2d>
 801f8ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f8f0:	4b2d      	ldr	r3, [pc, #180]	@ (801f9a8 <__ieee754_pow+0x798>)
 801f8f2:	4413      	add	r3, r2
 801f8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f8f8:	4606      	mov	r6, r0
 801f8fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f8fe:	460f      	mov	r7, r1
 801f900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f904:	f7e0 fcfa 	bl	80002fc <__adddf3>
 801f908:	4642      	mov	r2, r8
 801f90a:	464b      	mov	r3, r9
 801f90c:	f7e0 fcf6 	bl	80002fc <__adddf3>
 801f910:	4632      	mov	r2, r6
 801f912:	463b      	mov	r3, r7
 801f914:	f7e0 fcf2 	bl	80002fc <__adddf3>
 801f918:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801f91c:	4632      	mov	r2, r6
 801f91e:	463b      	mov	r3, r7
 801f920:	4658      	mov	r0, fp
 801f922:	460d      	mov	r5, r1
 801f924:	f7e0 fce8 	bl	80002f8 <__aeabi_dsub>
 801f928:	4642      	mov	r2, r8
 801f92a:	464b      	mov	r3, r9
 801f92c:	f7e0 fce4 	bl	80002f8 <__aeabi_dsub>
 801f930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f934:	f7e0 fce0 	bl	80002f8 <__aeabi_dsub>
 801f938:	465c      	mov	r4, fp
 801f93a:	4602      	mov	r2, r0
 801f93c:	e036      	b.n	801f9ac <__ieee754_pow+0x79c>
 801f93e:	bf00      	nop
 801f940:	4a454eef 	.word	0x4a454eef
 801f944:	3fca7e28 	.word	0x3fca7e28
 801f948:	93c9db65 	.word	0x93c9db65
 801f94c:	3fcd864a 	.word	0x3fcd864a
 801f950:	a91d4101 	.word	0xa91d4101
 801f954:	3fd17460 	.word	0x3fd17460
 801f958:	518f264d 	.word	0x518f264d
 801f95c:	3fd55555 	.word	0x3fd55555
 801f960:	db6fabff 	.word	0xdb6fabff
 801f964:	3fdb6db6 	.word	0x3fdb6db6
 801f968:	33333303 	.word	0x33333303
 801f96c:	3fe33333 	.word	0x3fe33333
 801f970:	e0000000 	.word	0xe0000000
 801f974:	3feec709 	.word	0x3feec709
 801f978:	dc3a03fd 	.word	0xdc3a03fd
 801f97c:	3feec709 	.word	0x3feec709
 801f980:	145b01f5 	.word	0x145b01f5
 801f984:	be3e2fe0 	.word	0xbe3e2fe0
 801f988:	7ff00000 	.word	0x7ff00000
 801f98c:	43400000 	.word	0x43400000
 801f990:	0003988e 	.word	0x0003988e
 801f994:	000bb679 	.word	0x000bb679
 801f998:	08021848 	.word	0x08021848
 801f99c:	3ff00000 	.word	0x3ff00000
 801f9a0:	40080000 	.word	0x40080000
 801f9a4:	08021828 	.word	0x08021828
 801f9a8:	08021838 	.word	0x08021838
 801f9ac:	460b      	mov	r3, r1
 801f9ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f9b2:	e5d7      	b.n	801f564 <__ieee754_pow+0x354>
 801f9b4:	f04f 0a01 	mov.w	sl, #1
 801f9b8:	e65e      	b.n	801f678 <__ieee754_pow+0x468>
 801f9ba:	a3b4      	add	r3, pc, #720	@ (adr r3, 801fc8c <__ieee754_pow+0xa7c>)
 801f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9c0:	4630      	mov	r0, r6
 801f9c2:	4639      	mov	r1, r7
 801f9c4:	f7e0 fc9a 	bl	80002fc <__adddf3>
 801f9c8:	4642      	mov	r2, r8
 801f9ca:	e9cd 0100 	strd	r0, r1, [sp]
 801f9ce:	464b      	mov	r3, r9
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	4629      	mov	r1, r5
 801f9d4:	f7e0 fc90 	bl	80002f8 <__aeabi_dsub>
 801f9d8:	4602      	mov	r2, r0
 801f9da:	460b      	mov	r3, r1
 801f9dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f9e0:	f7e1 f8d2 	bl	8000b88 <__aeabi_dcmpgt>
 801f9e4:	2800      	cmp	r0, #0
 801f9e6:	f47f ae00 	bne.w	801f5ea <__ieee754_pow+0x3da>
 801f9ea:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801f9ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801f9f2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801f9f6:	fa43 fa0a 	asr.w	sl, r3, sl
 801f9fa:	44da      	add	sl, fp
 801f9fc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801fa00:	489d      	ldr	r0, [pc, #628]	@ (801fc78 <__ieee754_pow+0xa68>)
 801fa02:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801fa06:	4108      	asrs	r0, r1
 801fa08:	ea00 030a 	and.w	r3, r0, sl
 801fa0c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801fa10:	f1c1 0114 	rsb	r1, r1, #20
 801fa14:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801fa18:	fa4a fa01 	asr.w	sl, sl, r1
 801fa1c:	f1bb 0f00 	cmp.w	fp, #0
 801fa20:	4640      	mov	r0, r8
 801fa22:	4649      	mov	r1, r9
 801fa24:	f04f 0200 	mov.w	r2, #0
 801fa28:	bfb8      	it	lt
 801fa2a:	f1ca 0a00 	rsblt	sl, sl, #0
 801fa2e:	f7e0 fc63 	bl	80002f8 <__aeabi_dsub>
 801fa32:	4680      	mov	r8, r0
 801fa34:	4689      	mov	r9, r1
 801fa36:	4632      	mov	r2, r6
 801fa38:	463b      	mov	r3, r7
 801fa3a:	4640      	mov	r0, r8
 801fa3c:	4649      	mov	r1, r9
 801fa3e:	f7e0 fc5d 	bl	80002fc <__adddf3>
 801fa42:	2400      	movs	r4, #0
 801fa44:	a37c      	add	r3, pc, #496	@ (adr r3, 801fc38 <__ieee754_pow+0xa28>)
 801fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa4a:	4620      	mov	r0, r4
 801fa4c:	460d      	mov	r5, r1
 801fa4e:	f7e0 fe0b 	bl	8000668 <__aeabi_dmul>
 801fa52:	4642      	mov	r2, r8
 801fa54:	e9cd 0100 	strd	r0, r1, [sp]
 801fa58:	464b      	mov	r3, r9
 801fa5a:	4620      	mov	r0, r4
 801fa5c:	4629      	mov	r1, r5
 801fa5e:	f7e0 fc4b 	bl	80002f8 <__aeabi_dsub>
 801fa62:	4602      	mov	r2, r0
 801fa64:	460b      	mov	r3, r1
 801fa66:	4630      	mov	r0, r6
 801fa68:	4639      	mov	r1, r7
 801fa6a:	f7e0 fc45 	bl	80002f8 <__aeabi_dsub>
 801fa6e:	a374      	add	r3, pc, #464	@ (adr r3, 801fc40 <__ieee754_pow+0xa30>)
 801fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa74:	f7e0 fdf8 	bl	8000668 <__aeabi_dmul>
 801fa78:	a373      	add	r3, pc, #460	@ (adr r3, 801fc48 <__ieee754_pow+0xa38>)
 801fa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa7e:	4680      	mov	r8, r0
 801fa80:	4689      	mov	r9, r1
 801fa82:	4620      	mov	r0, r4
 801fa84:	4629      	mov	r1, r5
 801fa86:	f7e0 fdef 	bl	8000668 <__aeabi_dmul>
 801fa8a:	4602      	mov	r2, r0
 801fa8c:	460b      	mov	r3, r1
 801fa8e:	4640      	mov	r0, r8
 801fa90:	4649      	mov	r1, r9
 801fa92:	f7e0 fc33 	bl	80002fc <__adddf3>
 801fa96:	4604      	mov	r4, r0
 801fa98:	460d      	mov	r5, r1
 801fa9a:	4602      	mov	r2, r0
 801fa9c:	460b      	mov	r3, r1
 801fa9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801faa2:	f7e0 fc2b 	bl	80002fc <__adddf3>
 801faa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801faaa:	4680      	mov	r8, r0
 801faac:	4689      	mov	r9, r1
 801faae:	f7e0 fc23 	bl	80002f8 <__aeabi_dsub>
 801fab2:	4602      	mov	r2, r0
 801fab4:	460b      	mov	r3, r1
 801fab6:	4620      	mov	r0, r4
 801fab8:	4629      	mov	r1, r5
 801faba:	f7e0 fc1d 	bl	80002f8 <__aeabi_dsub>
 801fabe:	4642      	mov	r2, r8
 801fac0:	4606      	mov	r6, r0
 801fac2:	460f      	mov	r7, r1
 801fac4:	464b      	mov	r3, r9
 801fac6:	4640      	mov	r0, r8
 801fac8:	4649      	mov	r1, r9
 801faca:	f7e0 fdcd 	bl	8000668 <__aeabi_dmul>
 801face:	a360      	add	r3, pc, #384	@ (adr r3, 801fc50 <__ieee754_pow+0xa40>)
 801fad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fad4:	4604      	mov	r4, r0
 801fad6:	460d      	mov	r5, r1
 801fad8:	f7e0 fdc6 	bl	8000668 <__aeabi_dmul>
 801fadc:	a35e      	add	r3, pc, #376	@ (adr r3, 801fc58 <__ieee754_pow+0xa48>)
 801fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fae2:	f7e0 fc09 	bl	80002f8 <__aeabi_dsub>
 801fae6:	4622      	mov	r2, r4
 801fae8:	462b      	mov	r3, r5
 801faea:	f7e0 fdbd 	bl	8000668 <__aeabi_dmul>
 801faee:	a35c      	add	r3, pc, #368	@ (adr r3, 801fc60 <__ieee754_pow+0xa50>)
 801faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faf4:	f7e0 fc02 	bl	80002fc <__adddf3>
 801faf8:	4622      	mov	r2, r4
 801fafa:	462b      	mov	r3, r5
 801fafc:	f7e0 fdb4 	bl	8000668 <__aeabi_dmul>
 801fb00:	a359      	add	r3, pc, #356	@ (adr r3, 801fc68 <__ieee754_pow+0xa58>)
 801fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb06:	f7e0 fbf7 	bl	80002f8 <__aeabi_dsub>
 801fb0a:	4622      	mov	r2, r4
 801fb0c:	462b      	mov	r3, r5
 801fb0e:	f7e0 fdab 	bl	8000668 <__aeabi_dmul>
 801fb12:	a357      	add	r3, pc, #348	@ (adr r3, 801fc70 <__ieee754_pow+0xa60>)
 801fb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb18:	f7e0 fbf0 	bl	80002fc <__adddf3>
 801fb1c:	4622      	mov	r2, r4
 801fb1e:	462b      	mov	r3, r5
 801fb20:	f7e0 fda2 	bl	8000668 <__aeabi_dmul>
 801fb24:	4602      	mov	r2, r0
 801fb26:	460b      	mov	r3, r1
 801fb28:	4640      	mov	r0, r8
 801fb2a:	4649      	mov	r1, r9
 801fb2c:	f7e0 fbe4 	bl	80002f8 <__aeabi_dsub>
 801fb30:	4604      	mov	r4, r0
 801fb32:	460d      	mov	r5, r1
 801fb34:	4602      	mov	r2, r0
 801fb36:	460b      	mov	r3, r1
 801fb38:	4640      	mov	r0, r8
 801fb3a:	4649      	mov	r1, r9
 801fb3c:	f7e0 fd94 	bl	8000668 <__aeabi_dmul>
 801fb40:	2200      	movs	r2, #0
 801fb42:	e9cd 0100 	strd	r0, r1, [sp]
 801fb46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801fb4a:	4620      	mov	r0, r4
 801fb4c:	4629      	mov	r1, r5
 801fb4e:	f7e0 fbd3 	bl	80002f8 <__aeabi_dsub>
 801fb52:	4602      	mov	r2, r0
 801fb54:	460b      	mov	r3, r1
 801fb56:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fb5a:	f7e0 feaf 	bl	80008bc <__aeabi_ddiv>
 801fb5e:	4632      	mov	r2, r6
 801fb60:	4604      	mov	r4, r0
 801fb62:	460d      	mov	r5, r1
 801fb64:	463b      	mov	r3, r7
 801fb66:	4640      	mov	r0, r8
 801fb68:	4649      	mov	r1, r9
 801fb6a:	f7e0 fd7d 	bl	8000668 <__aeabi_dmul>
 801fb6e:	4632      	mov	r2, r6
 801fb70:	463b      	mov	r3, r7
 801fb72:	f7e0 fbc3 	bl	80002fc <__adddf3>
 801fb76:	4602      	mov	r2, r0
 801fb78:	460b      	mov	r3, r1
 801fb7a:	4620      	mov	r0, r4
 801fb7c:	4629      	mov	r1, r5
 801fb7e:	f7e0 fbbb 	bl	80002f8 <__aeabi_dsub>
 801fb82:	4642      	mov	r2, r8
 801fb84:	464b      	mov	r3, r9
 801fb86:	f7e0 fbb7 	bl	80002f8 <__aeabi_dsub>
 801fb8a:	460b      	mov	r3, r1
 801fb8c:	4602      	mov	r2, r0
 801fb8e:	493b      	ldr	r1, [pc, #236]	@ (801fc7c <__ieee754_pow+0xa6c>)
 801fb90:	2000      	movs	r0, #0
 801fb92:	f7e0 fbb1 	bl	80002f8 <__aeabi_dsub>
 801fb96:	ec41 0b10 	vmov	d0, r0, r1
 801fb9a:	ee10 3a90 	vmov	r3, s1
 801fb9e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801fba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fba6:	da30      	bge.n	801fc0a <__ieee754_pow+0x9fa>
 801fba8:	4650      	mov	r0, sl
 801fbaa:	f000 f875 	bl	801fc98 <scalbn>
 801fbae:	ec51 0b10 	vmov	r0, r1, d0
 801fbb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fbb6:	f7ff bbd2 	b.w	801f35e <__ieee754_pow+0x14e>
 801fbba:	4c31      	ldr	r4, [pc, #196]	@ (801fc80 <__ieee754_pow+0xa70>)
 801fbbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801fbc0:	42a3      	cmp	r3, r4
 801fbc2:	d91a      	bls.n	801fbfa <__ieee754_pow+0x9ea>
 801fbc4:	4b2f      	ldr	r3, [pc, #188]	@ (801fc84 <__ieee754_pow+0xa74>)
 801fbc6:	440b      	add	r3, r1
 801fbc8:	4303      	orrs	r3, r0
 801fbca:	d009      	beq.n	801fbe0 <__ieee754_pow+0x9d0>
 801fbcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fbd0:	2200      	movs	r2, #0
 801fbd2:	2300      	movs	r3, #0
 801fbd4:	f7e0 ffba 	bl	8000b4c <__aeabi_dcmplt>
 801fbd8:	3800      	subs	r0, #0
 801fbda:	bf18      	it	ne
 801fbdc:	2001      	movne	r0, #1
 801fbde:	e42b      	b.n	801f438 <__ieee754_pow+0x228>
 801fbe0:	4642      	mov	r2, r8
 801fbe2:	464b      	mov	r3, r9
 801fbe4:	f7e0 fb88 	bl	80002f8 <__aeabi_dsub>
 801fbe8:	4632      	mov	r2, r6
 801fbea:	463b      	mov	r3, r7
 801fbec:	f7e0 ffc2 	bl	8000b74 <__aeabi_dcmpge>
 801fbf0:	2800      	cmp	r0, #0
 801fbf2:	d1eb      	bne.n	801fbcc <__ieee754_pow+0x9bc>
 801fbf4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801fc94 <__ieee754_pow+0xa84>
 801fbf8:	e6f7      	b.n	801f9ea <__ieee754_pow+0x7da>
 801fbfa:	469a      	mov	sl, r3
 801fbfc:	4b22      	ldr	r3, [pc, #136]	@ (801fc88 <__ieee754_pow+0xa78>)
 801fbfe:	459a      	cmp	sl, r3
 801fc00:	f63f aef3 	bhi.w	801f9ea <__ieee754_pow+0x7da>
 801fc04:	f8dd a010 	ldr.w	sl, [sp, #16]
 801fc08:	e715      	b.n	801fa36 <__ieee754_pow+0x826>
 801fc0a:	ec51 0b10 	vmov	r0, r1, d0
 801fc0e:	4619      	mov	r1, r3
 801fc10:	e7cf      	b.n	801fbb2 <__ieee754_pow+0x9a2>
 801fc12:	491a      	ldr	r1, [pc, #104]	@ (801fc7c <__ieee754_pow+0xa6c>)
 801fc14:	2000      	movs	r0, #0
 801fc16:	f7ff bb18 	b.w	801f24a <__ieee754_pow+0x3a>
 801fc1a:	2000      	movs	r0, #0
 801fc1c:	2100      	movs	r1, #0
 801fc1e:	f7ff bb14 	b.w	801f24a <__ieee754_pow+0x3a>
 801fc22:	4630      	mov	r0, r6
 801fc24:	4639      	mov	r1, r7
 801fc26:	f7ff bb10 	b.w	801f24a <__ieee754_pow+0x3a>
 801fc2a:	460c      	mov	r4, r1
 801fc2c:	f7ff bb5e 	b.w	801f2ec <__ieee754_pow+0xdc>
 801fc30:	2400      	movs	r4, #0
 801fc32:	f7ff bb49 	b.w	801f2c8 <__ieee754_pow+0xb8>
 801fc36:	bf00      	nop
 801fc38:	00000000 	.word	0x00000000
 801fc3c:	3fe62e43 	.word	0x3fe62e43
 801fc40:	fefa39ef 	.word	0xfefa39ef
 801fc44:	3fe62e42 	.word	0x3fe62e42
 801fc48:	0ca86c39 	.word	0x0ca86c39
 801fc4c:	be205c61 	.word	0xbe205c61
 801fc50:	72bea4d0 	.word	0x72bea4d0
 801fc54:	3e663769 	.word	0x3e663769
 801fc58:	c5d26bf1 	.word	0xc5d26bf1
 801fc5c:	3ebbbd41 	.word	0x3ebbbd41
 801fc60:	af25de2c 	.word	0xaf25de2c
 801fc64:	3f11566a 	.word	0x3f11566a
 801fc68:	16bebd93 	.word	0x16bebd93
 801fc6c:	3f66c16c 	.word	0x3f66c16c
 801fc70:	5555553e 	.word	0x5555553e
 801fc74:	3fc55555 	.word	0x3fc55555
 801fc78:	fff00000 	.word	0xfff00000
 801fc7c:	3ff00000 	.word	0x3ff00000
 801fc80:	4090cbff 	.word	0x4090cbff
 801fc84:	3f6f3400 	.word	0x3f6f3400
 801fc88:	3fe00000 	.word	0x3fe00000
 801fc8c:	652b82fe 	.word	0x652b82fe
 801fc90:	3c971547 	.word	0x3c971547
 801fc94:	4090cc00 	.word	0x4090cc00

0801fc98 <scalbn>:
 801fc98:	b570      	push	{r4, r5, r6, lr}
 801fc9a:	ec55 4b10 	vmov	r4, r5, d0
 801fc9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fca2:	4606      	mov	r6, r0
 801fca4:	462b      	mov	r3, r5
 801fca6:	b991      	cbnz	r1, 801fcce <scalbn+0x36>
 801fca8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fcac:	4323      	orrs	r3, r4
 801fcae:	d03d      	beq.n	801fd2c <scalbn+0x94>
 801fcb0:	4b35      	ldr	r3, [pc, #212]	@ (801fd88 <scalbn+0xf0>)
 801fcb2:	4620      	mov	r0, r4
 801fcb4:	4629      	mov	r1, r5
 801fcb6:	2200      	movs	r2, #0
 801fcb8:	f7e0 fcd6 	bl	8000668 <__aeabi_dmul>
 801fcbc:	4b33      	ldr	r3, [pc, #204]	@ (801fd8c <scalbn+0xf4>)
 801fcbe:	429e      	cmp	r6, r3
 801fcc0:	4604      	mov	r4, r0
 801fcc2:	460d      	mov	r5, r1
 801fcc4:	da0f      	bge.n	801fce6 <scalbn+0x4e>
 801fcc6:	a328      	add	r3, pc, #160	@ (adr r3, 801fd68 <scalbn+0xd0>)
 801fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fccc:	e01e      	b.n	801fd0c <scalbn+0x74>
 801fcce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801fcd2:	4291      	cmp	r1, r2
 801fcd4:	d10b      	bne.n	801fcee <scalbn+0x56>
 801fcd6:	4622      	mov	r2, r4
 801fcd8:	4620      	mov	r0, r4
 801fcda:	4629      	mov	r1, r5
 801fcdc:	f7e0 fb0e 	bl	80002fc <__adddf3>
 801fce0:	4604      	mov	r4, r0
 801fce2:	460d      	mov	r5, r1
 801fce4:	e022      	b.n	801fd2c <scalbn+0x94>
 801fce6:	460b      	mov	r3, r1
 801fce8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fcec:	3936      	subs	r1, #54	@ 0x36
 801fcee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801fcf2:	4296      	cmp	r6, r2
 801fcf4:	dd0d      	ble.n	801fd12 <scalbn+0x7a>
 801fcf6:	2d00      	cmp	r5, #0
 801fcf8:	a11d      	add	r1, pc, #116	@ (adr r1, 801fd70 <scalbn+0xd8>)
 801fcfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fcfe:	da02      	bge.n	801fd06 <scalbn+0x6e>
 801fd00:	a11d      	add	r1, pc, #116	@ (adr r1, 801fd78 <scalbn+0xe0>)
 801fd02:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd06:	a31a      	add	r3, pc, #104	@ (adr r3, 801fd70 <scalbn+0xd8>)
 801fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd0c:	f7e0 fcac 	bl	8000668 <__aeabi_dmul>
 801fd10:	e7e6      	b.n	801fce0 <scalbn+0x48>
 801fd12:	1872      	adds	r2, r6, r1
 801fd14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fd18:	428a      	cmp	r2, r1
 801fd1a:	dcec      	bgt.n	801fcf6 <scalbn+0x5e>
 801fd1c:	2a00      	cmp	r2, #0
 801fd1e:	dd08      	ble.n	801fd32 <scalbn+0x9a>
 801fd20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fd24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fd28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fd2c:	ec45 4b10 	vmov	d0, r4, r5
 801fd30:	bd70      	pop	{r4, r5, r6, pc}
 801fd32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fd36:	da08      	bge.n	801fd4a <scalbn+0xb2>
 801fd38:	2d00      	cmp	r5, #0
 801fd3a:	a10b      	add	r1, pc, #44	@ (adr r1, 801fd68 <scalbn+0xd0>)
 801fd3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd40:	dac1      	bge.n	801fcc6 <scalbn+0x2e>
 801fd42:	a10f      	add	r1, pc, #60	@ (adr r1, 801fd80 <scalbn+0xe8>)
 801fd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd48:	e7bd      	b.n	801fcc6 <scalbn+0x2e>
 801fd4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fd4e:	3236      	adds	r2, #54	@ 0x36
 801fd50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fd54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fd58:	4620      	mov	r0, r4
 801fd5a:	4b0d      	ldr	r3, [pc, #52]	@ (801fd90 <scalbn+0xf8>)
 801fd5c:	4629      	mov	r1, r5
 801fd5e:	2200      	movs	r2, #0
 801fd60:	e7d4      	b.n	801fd0c <scalbn+0x74>
 801fd62:	bf00      	nop
 801fd64:	f3af 8000 	nop.w
 801fd68:	c2f8f359 	.word	0xc2f8f359
 801fd6c:	01a56e1f 	.word	0x01a56e1f
 801fd70:	8800759c 	.word	0x8800759c
 801fd74:	7e37e43c 	.word	0x7e37e43c
 801fd78:	8800759c 	.word	0x8800759c
 801fd7c:	fe37e43c 	.word	0xfe37e43c
 801fd80:	c2f8f359 	.word	0xc2f8f359
 801fd84:	81a56e1f 	.word	0x81a56e1f
 801fd88:	43500000 	.word	0x43500000
 801fd8c:	ffff3cb0 	.word	0xffff3cb0
 801fd90:	3c900000 	.word	0x3c900000

0801fd94 <with_errno>:
 801fd94:	b510      	push	{r4, lr}
 801fd96:	ed2d 8b02 	vpush	{d8}
 801fd9a:	eeb0 8a40 	vmov.f32	s16, s0
 801fd9e:	eef0 8a60 	vmov.f32	s17, s1
 801fda2:	4604      	mov	r4, r0
 801fda4:	f7fe f898 	bl	801ded8 <__errno>
 801fda8:	eeb0 0a48 	vmov.f32	s0, s16
 801fdac:	eef0 0a68 	vmov.f32	s1, s17
 801fdb0:	ecbd 8b02 	vpop	{d8}
 801fdb4:	6004      	str	r4, [r0, #0]
 801fdb6:	bd10      	pop	{r4, pc}

0801fdb8 <xflow>:
 801fdb8:	4603      	mov	r3, r0
 801fdba:	b507      	push	{r0, r1, r2, lr}
 801fdbc:	ec51 0b10 	vmov	r0, r1, d0
 801fdc0:	b183      	cbz	r3, 801fde4 <xflow+0x2c>
 801fdc2:	4602      	mov	r2, r0
 801fdc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fdc8:	e9cd 2300 	strd	r2, r3, [sp]
 801fdcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fdd0:	f7e0 fc4a 	bl	8000668 <__aeabi_dmul>
 801fdd4:	ec41 0b10 	vmov	d0, r0, r1
 801fdd8:	2022      	movs	r0, #34	@ 0x22
 801fdda:	b003      	add	sp, #12
 801fddc:	f85d eb04 	ldr.w	lr, [sp], #4
 801fde0:	f7ff bfd8 	b.w	801fd94 <with_errno>
 801fde4:	4602      	mov	r2, r0
 801fde6:	460b      	mov	r3, r1
 801fde8:	e7ee      	b.n	801fdc8 <xflow+0x10>
 801fdea:	0000      	movs	r0, r0
 801fdec:	0000      	movs	r0, r0
	...

0801fdf0 <__math_uflow>:
 801fdf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801fdf8 <__math_uflow+0x8>
 801fdf4:	f7ff bfe0 	b.w	801fdb8 <xflow>
 801fdf8:	00000000 	.word	0x00000000
 801fdfc:	10000000 	.word	0x10000000

0801fe00 <__math_oflow>:
 801fe00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801fe08 <__math_oflow+0x8>
 801fe04:	f7ff bfd8 	b.w	801fdb8 <xflow>
 801fe08:	00000000 	.word	0x00000000
 801fe0c:	70000000 	.word	0x70000000

0801fe10 <_init>:
 801fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe12:	bf00      	nop
 801fe14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe16:	bc08      	pop	{r3}
 801fe18:	469e      	mov	lr, r3
 801fe1a:	4770      	bx	lr

0801fe1c <_fini>:
 801fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe1e:	bf00      	nop
 801fe20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fe22:	bc08      	pop	{r3}
 801fe24:	469e      	mov	lr, r3
 801fe26:	4770      	bx	lr
