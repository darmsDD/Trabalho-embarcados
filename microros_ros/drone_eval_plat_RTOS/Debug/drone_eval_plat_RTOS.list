
drone_eval_plat_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000200b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08020298  08020298  00021298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d80  08021d80  00024c58  2**0
                  CONTENTS
  4 .ARM          00000008  08021d80  08021d80  00022d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d88  08021d88  00024c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08021d88  08021d88  00022d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021d94  08021d94  00022d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001c58  20000000  08021d98  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001dcd0  20001c58  080239f0  00024c58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001f928  080239f0  00025928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024c58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf0c  00000000  00000000  00024c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005df6  00000000  00000000  00050b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00056990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018d4  00000000  00000000  000589b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f77c  00000000  00000000  0005a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e734  00000000  00000000  00089a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bf22  00000000  00000000  000b813c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001d405e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000996c  00000000  00000000  001d40c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001dda34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001c58 	.word	0x20001c58
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020280 	.word	0x08020280

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001c5c 	.word	0x20001c5c
 800021c:	08020280 	.word	0x08020280

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <CalculateAccAngle>:
#include "CalculateAngle.h"

Struct_Angle Angle;

void CalculateAccAngle(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 8000ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  Angle->acc_roll  = atan(-MPU6050->acc_x / sqrt(pow(MPU6050->acc_y,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	edd3 7a04 	vldr	s15, [r3, #16]
 800100a:	eef1 7a67 	vneg.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fad0 	bl	80005b8 <__aeabi_f2d>
 8001018:	4604      	mov	r4, r0
 800101a:	460d      	mov	r5, r1
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fac9 	bl	80005b8 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001188 <CalculateAccAngle+0x190>
 800102e:	ec43 2b10 	vmov	d0, r2, r3
 8001032:	f01d ffff 	bl	801f034 <pow>
 8001036:	ec59 8b10 	vmov	r8, r9, d0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff faba 	bl	80005b8 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001188 <CalculateAccAngle+0x190>
 800104c:	ec43 2b10 	vmov	d0, r2, r3
 8001050:	f01d fff0 	bl	801f034 <pow>
 8001054:	ec53 2b10 	vmov	r2, r3, d0
 8001058:	4640      	mov	r0, r8
 800105a:	4649      	mov	r1, r9
 800105c:	f7ff f94e 	bl	80002fc <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	ec43 2b17 	vmov	d7, r2, r3
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	f01e f850 	bl	801f114 <sqrt>
 8001074:	ec53 2b10 	vmov	r2, r3, d0
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff fc1e 	bl	80008bc <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	ec43 2b17 	vmov	d7, r2, r3
 8001088:	eeb0 0a47 	vmov.f32	s0, s14
 800108c:	eef0 0a67 	vmov.f32	s1, s15
 8001090:	f01e f86e 	bl	801f170 <atan>
 8001094:	ec51 0b10 	vmov	r0, r1, d0
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <CalculateAccAngle+0x1a0>)
 800109e:	f7ff fae3 	bl	8000668 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	a339      	add	r3, pc, #228	@ (adr r3, 8001190 <CalculateAccAngle+0x198>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fc04 	bl	80008bc <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd84 	bl	8000bc8 <__aeabi_d2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
  Angle->acc_pitch = atan(MPU6050->acc_y / sqrt(pow(MPU6050->acc_x,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa74 	bl	80005b8 <__aeabi_f2d>
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa6d 	bl	80005b8 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001188 <CalculateAccAngle+0x190>
 80010e6:	ec43 2b10 	vmov	d0, r2, r3
 80010ea:	f01d ffa3 	bl	801f034 <pow>
 80010ee:	ec59 8b10 	vmov	r8, r9, d0
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa5e 	bl	80005b8 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001188 <CalculateAccAngle+0x190>
 8001104:	ec43 2b10 	vmov	d0, r2, r3
 8001108:	f01d ff94 	bl	801f034 <pow>
 800110c:	ec53 2b10 	vmov	r2, r3, d0
 8001110:	4640      	mov	r0, r8
 8001112:	4649      	mov	r1, r9
 8001114:	f7ff f8f2 	bl	80002fc <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	ec43 2b17 	vmov	d7, r2, r3
 8001120:	eeb0 0a47 	vmov.f32	s0, s14
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	f01d fff4 	bl	801f114 <sqrt>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fbc2 	bl	80008bc <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b17 	vmov	d7, r2, r3
 8001140:	eeb0 0a47 	vmov.f32	s0, s14
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	f01e f812 	bl	801f170 <atan>
 800114c:	ec51 0b10 	vmov	r0, r1, d0
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <CalculateAccAngle+0x1a0>)
 8001156:	f7ff fa87 	bl	8000668 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	a30b      	add	r3, pc, #44	@ (adr r3, 8001190 <CalculateAccAngle+0x198>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fba8 	bl	80008bc <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd28 	bl	8000bc8 <__aeabi_d2f>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]
  //  Angle->acc_yaw = atan(sqrt(pow(MPU6050->acc_x, 2) + pow(MPU6050->acc_y, 2)) / MPU6050->acc_z) * RADIAN_TO_DEGREE;
  //Can't use Angle->acc_yaw there is no reliability. It's based on my personal experimental view.
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001188:	00000000 	.word	0x00000000
 800118c:	40000000 	.word	0x40000000
 8001190:	00000000 	.word	0x00000000
 8001194:	400921fb 	.word	0x400921fb
 8001198:	40668000 	.word	0x40668000

0800119c <CalculateCompliFilter>:
  Angle->gyro_pitch += MPU6050->gyro_x * dt;
  Angle->gyro_yaw   += MPU6050->gyro_z * dt;
}

void CalculateCompliFilter(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  CalculateAccAngle(Angle, MPU6050); //Prepare Acc Angle before using Complimentary Filter.
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff25 	bl	8000ff8 <CalculateAccAngle>

  static float alpha = 0.96f;
  Angle->ComFilt_roll  = alpha*(MPU6050->gyro_y * dt + Angle->ComFilt_roll) + (1-alpha) * Angle->acc_roll;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <CalculateCompliFilter+0xc8>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <CalculateCompliFilter+0xcc>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <CalculateCompliFilter+0xcc>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a06 	vstr	s15, [r3, #24]
  Angle->ComFilt_pitch = alpha*(MPU6050->gyro_x * dt + Angle->ComFilt_pitch) + (1-alpha) * Angle->acc_pitch;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <CalculateCompliFilter+0xc8>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a07 	vldr	s15, [r3, #28]
 800120a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <CalculateCompliFilter+0xcc>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <CalculateCompliFilter+0xcc>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001222:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 7a01 	vldr	s15, [r3, #4]
 800122c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edc3 7a07 	vstr	s15, [r3, #28]
  Angle->ComFilt_yaw   = Angle->ComFilt_yaw + MPU6050->gyro_z * dt;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <CalculateCompliFilter+0xc8>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29a      	uxth	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2301      	movs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	21d0      	movs	r1, #208	@ 0xd0
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MPU6050_Writebyte+0x34>)
 8001292:	f003 fe43 	bl	8004f1c <HAL_I2C_Mem_Write>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000f5ec 	.word	0x2000f5ec

080012a4 <MPU6050_Readbyte>:
{
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af04      	add	r7, sp, #16
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	21d0      	movs	r1, #208	@ 0xd0
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MPU6050_Readbyte+0x30>)
 80012c6:	f003 ff3d 	bl	8005144 <HAL_I2C_Mem_Read>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000f5ec 	.word	0x2000f5ec

080012d8 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
 80012de:	4603      	mov	r3, r0
 80012e0:	603a      	str	r2, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	460b      	mov	r3, r1
 80012e6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2101      	movs	r1, #1
 80012f2:	9102      	str	r1, [sp, #8]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	21d0      	movs	r1, #208	@ 0xd0
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <MPU6050_Readbytes+0x34>)
 8001300:	f003 ff20 	bl	8005144 <HAL_I2C_Mem_Read>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000f5ec 	.word	0x2000f5ec

08001310 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  osDelay(50);
 8001316:	2032      	movs	r0, #50	@ 0x32
 8001318:	f009 f8c9 	bl	800a4ae <osDelay>
  uint8_t who_am_i = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	707b      	strb	r3, [r7, #1]
  printf("Checking MPU6050...\n");
 8001320:	4843      	ldr	r0, [pc, #268]	@ (8001430 <MPU6050_Initialization+0x120>)
 8001322:	f01c fd9f 	bl	801de64 <puts>

  MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8001326:	1c7b      	adds	r3, r7, #1
 8001328:	4619      	mov	r1, r3
 800132a:	2075      	movs	r0, #117	@ 0x75
 800132c:	f7ff ffba 	bl	80012a4 <MPU6050_Readbyte>
  if(who_am_i == 0x68)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b68      	cmp	r3, #104	@ 0x68
 8001334:	d105      	bne.n	8001342 <MPU6050_Initialization+0x32>
  {
    printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8001336:	787b      	ldrb	r3, [r7, #1]
 8001338:	4619      	mov	r1, r3
 800133a:	483e      	ldr	r0, [pc, #248]	@ (8001434 <MPU6050_Initialization+0x124>)
 800133c:	f01c fd2a 	bl	801dd94 <iprintf>
 8001340:	e00f      	b.n	8001362 <MPU6050_Initialization+0x52>
  }
  else
  {
    printf("ERROR!\n");
 8001342:	483d      	ldr	r0, [pc, #244]	@ (8001438 <MPU6050_Initialization+0x128>)
 8001344:	f01c fd8e 	bl	801de64 <puts>
    printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	4619      	mov	r1, r3
 800134c:	483b      	ldr	r0, [pc, #236]	@ (800143c <MPU6050_Initialization+0x12c>)
 800134e:	f01c fd21 	bl	801dd94 <iprintf>
    while(1)
    {
      printf("who am i error. Can not recognize mpu6050\n");
 8001352:	483b      	ldr	r0, [pc, #236]	@ (8001440 <MPU6050_Initialization+0x130>)
 8001354:	f01c fd86 	bl	801de64 <puts>
      osDelay(100);
 8001358:	2064      	movs	r0, #100	@ 0x64
 800135a:	f009 f8a8 	bl	800a4ae <osDelay>
      printf("who am i error. Can not recognize mpu6050\n");
 800135e:	bf00      	nop
 8001360:	e7f7      	b.n	8001352 <MPU6050_Initialization+0x42>
    }
  }

  //Reset the whole module before initialization
  MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	206b      	movs	r0, #107	@ 0x6b
 8001366:	f7ff ff81 	bl	800126c <MPU6050_Writebyte>
  osDelay(100);
 800136a:	2064      	movs	r0, #100	@ 0x64
 800136c:	f009 f89f 	bl	800a4ae <osDelay>

  //Power Management setting
  /* Default is sleep mode
   * necessary to wake up MPU6050*/
  MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8001370:	2100      	movs	r1, #0
 8001372:	206b      	movs	r0, #107	@ 0x6b
 8001374:	f7ff ff7a 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001378:	2032      	movs	r0, #50	@ 0x32
 800137a:	f009 f898 	bl	800a4ae <osDelay>

  //Sample rate divider
  /*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
  //  MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
  MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 800137e:	2127      	movs	r1, #39	@ 0x27
 8001380:	2019      	movs	r0, #25
 8001382:	f7ff ff73 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001386:	2032      	movs	r0, #50	@ 0x32
 8001388:	f009 f891 	bl	800a4ae <osDelay>

  //FSYNC and DLPF setting
  /*DLPF is set to 0*/
  MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 800138c:	2100      	movs	r1, #0
 800138e:	201a      	movs	r0, #26
 8001390:	f7ff ff6c 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001394:	2032      	movs	r0, #50	@ 0x32
 8001396:	f009 f88a 	bl	800a4ae <osDelay>
  /*FS_SEL  Full Scale Range
    0     +-250 degree/s
    1   +-500 degree/s
    2   +-1000 degree/s
    3   +-2000 degree/s */
  uint8_t FS_SCALE_GYRO = 0x0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
  MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	201b      	movs	r0, #27
 80013a8:	f7ff ff60 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 80013ac:	2032      	movs	r0, #50	@ 0x32
 80013ae:	f009 f87e 	bl	800a4ae <osDelay>
  /*FS_SEL  Full Scale Range
    0     +-2g
    1   +-4g
    2   +-8g
    3   +-16g */
  uint8_t FS_SCALE_ACC = 0x0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	71bb      	strb	r3, [r7, #6]
  MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	201c      	movs	r0, #28
 80013c0:	f7ff ff54 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 80013c4:	2032      	movs	r0, #50	@ 0x32
 80013c6:	f009 f872 	bl	800a4ae <osDelay>

  MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f887 	bl	80014e4 <MPU6050_Get_LSB_Sensitivity>
//  printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);

  //Interrupt PIN setting
  uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 80013d6:	2300      	movs	r3, #0
 80013d8:	717b      	strb	r3, [r7, #5]
  uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 80013da:	2300      	movs	r3, #0
 80013dc:	713b      	strb	r3, [r7, #4]
  uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 80013de:	2301      	movs	r3, #1
 80013e0:	70fb      	strb	r3, [r7, #3]
  MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	01db      	lsls	r3, r3, #7
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	2037      	movs	r0, #55	@ 0x37
 8001402:	f7ff ff33 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001406:	2032      	movs	r0, #50	@ 0x32
 8001408:	f009 f851 	bl	800a4ae <osDelay>

  //Interrupt enable setting
  uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 800140c:	2301      	movs	r3, #1
 800140e:	70bb      	strb	r3, [r7, #2]
  MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	4619      	mov	r1, r3
 8001414:	2038      	movs	r0, #56	@ 0x38
 8001416:	f7ff ff29 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f009 f847 	bl	800a4ae <osDelay>

  printf("MPU6050 setting is finished\n");
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MPU6050_Initialization+0x134>)
 8001422:	f01c fd1f 	bl	801de64 <puts>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	08020298 	.word	0x08020298
 8001434:	080202ac 	.word	0x080202ac
 8001438:	080202cc 	.word	0x080202cc
 800143c:	080202d4 	.word	0x080202d4
 8001440:	08020300 	.word	0x08020300
 8001444:	0802032c 	.word	0x0802032c

08001448 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint8_t data[14];
  MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	461a      	mov	r2, r3
 8001456:	210e      	movs	r1, #14
 8001458:	203b      	movs	r0, #59	@ 0x3b
 800145a:	f7ff ff3d 	bl	80012d8 <MPU6050_Readbytes>

  mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 800145e:	7a3b      	ldrb	r3, [r7, #8]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7a7b      	ldrb	r3, [r7, #9]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	801a      	strh	r2, [r3, #0]
  mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001470:	7abb      	ldrb	r3, [r7, #10]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	805a      	strh	r2, [r3, #2]
  mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	809a      	strh	r2, [r3, #4]

  mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	80da      	strh	r2, [r3, #6]

  mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 80014a6:	7c3b      	ldrb	r3, [r7, #16]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	811a      	strh	r2, [r3, #8]
  mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 80014b8:	7cbb      	ldrb	r3, [r7, #18]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	815a      	strh	r2, [r3, #10]
  mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80014ca:	7d3b      	ldrb	r3, [r7, #20]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	819a      	strh	r2, [r3, #12]
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  switch(FS_SCALE_GYRO)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d81a      	bhi.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001519 	.word	0x08001519
 8001508:	08001521 	.word	0x08001521
 800150c:	08001529 	.word	0x08001529
  {
  case 0:
    LSB_Sensitivity_GYRO = 131.f;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8001514:	601a      	str	r2, [r3, #0]
    break;
 8001516:	e00b      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 1:
    LSB_Sensitivity_GYRO = 65.5f;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 800151c:	601a      	str	r2, [r3, #0]
    break;
 800151e:	e007      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 2:
    LSB_Sensitivity_GYRO = 32.8f;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8001524:	601a      	str	r2, [r3, #0]
    break;
 8001526:	e003      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 3:
    LSB_Sensitivity_GYRO = 16.4f;
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <MPU6050_Get_LSB_Sensitivity+0xac>)
 800152c:	601a      	str	r2, [r3, #0]
    break;
 800152e:	bf00      	nop
  }
  switch(FS_SCALE_ACC)
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d81e      	bhi.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <MPU6050_Get_LSB_Sensitivity+0x58>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001557 	.word	0x08001557
 8001544:	08001561 	.word	0x08001561
 8001548:	0800156b 	.word	0x0800156b
  {
  case 0:
    LSB_Sensitivity_ACC = 16384.f;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800154e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001552:	601a      	str	r2, [r3, #0]
    break;
 8001554:	e00e      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 1:
    LSB_Sensitivity_ACC = 8192.f;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001558:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800155c:	601a      	str	r2, [r3, #0]
    break;
 800155e:	e009      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 2:
    LSB_Sensitivity_ACC = 4096.f;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001562:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001566:	601a      	str	r2, [r3, #0]
    break;
 8001568:	e004      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 3:
    LSB_Sensitivity_ACC = 2048.f;
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800156c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001570:	601a      	str	r2, [r3, #0]
    break;
 8001572:	bf00      	nop
  }
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20001cc8 	.word	0x20001cc8
 8001584:	43030000 	.word	0x43030000
 8001588:	42830000 	.word	0x42830000
 800158c:	42033333 	.word	0x42033333
 8001590:	41833333 	.word	0x41833333
 8001594:	20001cc4 	.word	0x20001cc4

08001598 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  //printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
  mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a04 	vstr	s15, [r3, #16]
  mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a05 	vstr	s15, [r3, #20]
  mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a06 	vstr	s15, [r3, #24]

  mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80016a4 <MPU6050_DataConvert+0x10c>
 800160c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001610:	ee16 0a90 	vmov	r0, s13
 8001614:	f7fe ffd0 	bl	80005b8 <__aeabi_f2d>
 8001618:	a31f      	add	r3, pc, #124	@ (adr r3, 8001698 <MPU6050_DataConvert+0x100>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fe6d 	bl	80002fc <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff facd 	bl	8000bc8 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	61da      	str	r2, [r3, #28]

  mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001644:	ed93 7a00 	vldr	s14, [r3]
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edc3 7a08 	vstr	s15, [r3, #32]
  mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	0a3d70a4 	.word	0x0a3d70a4
 800169c:	404243d7 	.word	0x404243d7
 80016a0:	20001cc4 	.word	0x20001cc4
 80016a4:	43aa0000 	.word	0x43aa0000
 80016a8:	20001cc8 	.word	0x20001cc8

080016ac <MPU6050_ProcessData>:
   */
  return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  MPU6050_Get6AxisRawData(mpu6050);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fec7 	bl	8001448 <MPU6050_Get6AxisRawData>
  MPU6050_DataConvert(mpu6050);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff6c 	bl	8001598 <MPU6050_DataConvert>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of IMUshouldUpdate */
  IMUshouldUpdateHandle = osSemaphoreNew(1, 1, &IMUshouldUpdate_attributes);
 80016cc:	4a45      	ldr	r2, [pc, #276]	@ (80017e4 <MX_FREERTOS_Init+0x11c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2001      	movs	r0, #1
 80016d2:	f008 ffee 	bl	800a6b2 <osSemaphoreNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a43      	ldr	r2, [pc, #268]	@ (80017e8 <MX_FREERTOS_Init+0x120>)
 80016da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  HAL_TIM_Base_Start(&htim1);
 80016dc:	4843      	ldr	r0, [pc, #268]	@ (80017ec <MX_FREERTOS_Init+0x124>)
 80016de:	f005 fa5f 	bl	8006ba0 <HAL_TIM_Base_Start>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printfQueue */
  printfQueueHandle = osMessageQueueNew (128, sizeof(xPrintfMessage), &printfQueue_attributes);
 80016e2:	4a43      	ldr	r2, [pc, #268]	@ (80017f0 <MX_FREERTOS_Init+0x128>)
 80016e4:	2124      	movs	r1, #36	@ 0x24
 80016e6:	2080      	movs	r0, #128	@ 0x80
 80016e8:	f009 f8be 	bl	800a868 <osMessageQueueNew>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a41      	ldr	r2, [pc, #260]	@ (80017f4 <MX_FREERTOS_Init+0x12c>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* creation of yawMotorNewAngle */
  yawMotorNewAngleHandle = osMessageQueueNew (16, sizeof(float), &yawMotorNewAngle_attributes);
 80016f2:	4a41      	ldr	r2, [pc, #260]	@ (80017f8 <MX_FREERTOS_Init+0x130>)
 80016f4:	2104      	movs	r1, #4
 80016f6:	2010      	movs	r0, #16
 80016f8:	f009 f8b6 	bl	800a868 <osMessageQueueNew>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <MX_FREERTOS_Init+0x134>)
 8001700:	6013      	str	r3, [r2, #0]

  /* creation of rollMotorNewAngle */
  rollMotorNewAngleHandle = osMessageQueueNew (16, sizeof(float), &rollMotorNewAngle_attributes);
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <MX_FREERTOS_Init+0x138>)
 8001704:	2104      	movs	r1, #4
 8001706:	2010      	movs	r0, #16
 8001708:	f009 f8ae 	bl	800a868 <osMessageQueueNew>
 800170c:	4603      	mov	r3, r0
 800170e:	4a3d      	ldr	r2, [pc, #244]	@ (8001804 <MX_FREERTOS_Init+0x13c>)
 8001710:	6013      	str	r3, [r2, #0]

  /* creation of IMUdata */
  IMUdataHandle = osMessageQueueNew (4, sizeof(xIMUData), &IMUdata_attributes);
 8001712:	4a3d      	ldr	r2, [pc, #244]	@ (8001808 <MX_FREERTOS_Init+0x140>)
 8001714:	210c      	movs	r1, #12
 8001716:	2004      	movs	r0, #4
 8001718:	f009 f8a6 	bl	800a868 <osMessageQueueNew>
 800171c:	4603      	mov	r3, r0
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <MX_FREERTOS_Init+0x144>)
 8001720:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(defaultTaskFunc, NULL, &defaultTask_attributes);
 8001722:	4a3b      	ldr	r2, [pc, #236]	@ (8001810 <MX_FREERTOS_Init+0x148>)
 8001724:	2100      	movs	r1, #0
 8001726:	483b      	ldr	r0, [pc, #236]	@ (8001814 <MX_FREERTOS_Init+0x14c>)
 8001728:	f008 fd60 	bl	800a1ec <osThreadNew>
 800172c:	4603      	mov	r3, r0
 800172e:	4a3a      	ldr	r2, [pc, #232]	@ (8001818 <MX_FREERTOS_Init+0x150>)
 8001730:	6013      	str	r3, [r2, #0]

  /* creation of BT_uart */
  BT_uartHandle = osThreadNew(BT_uart_func, NULL, &BT_uart_attributes);
 8001732:	4a3a      	ldr	r2, [pc, #232]	@ (800181c <MX_FREERTOS_Init+0x154>)
 8001734:	2100      	movs	r1, #0
 8001736:	483a      	ldr	r0, [pc, #232]	@ (8001820 <MX_FREERTOS_Init+0x158>)
 8001738:	f008 fd58 	bl	800a1ec <osThreadNew>
 800173c:	4603      	mov	r3, r0
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <MX_FREERTOS_Init+0x15c>)
 8001740:	6013      	str	r3, [r2, #0]

  /* creation of printGateKeeper */
  printGateKeeperHandle = osThreadNew(printGateKeeperFunc, NULL, &printGateKeeper_attributes);
 8001742:	4a39      	ldr	r2, [pc, #228]	@ (8001828 <MX_FREERTOS_Init+0x160>)
 8001744:	2100      	movs	r1, #0
 8001746:	4839      	ldr	r0, [pc, #228]	@ (800182c <MX_FREERTOS_Init+0x164>)
 8001748:	f008 fd50 	bl	800a1ec <osThreadNew>
 800174c:	4603      	mov	r3, r0
 800174e:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <MX_FREERTOS_Init+0x168>)
 8001750:	6013      	str	r3, [r2, #0]

  /* creation of writeSetpoint */
  writeSetpointHandle = osThreadNew(writeSetpointFunc, NULL, &writeSetpoint_attributes);
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <MX_FREERTOS_Init+0x16c>)
 8001754:	2100      	movs	r1, #0
 8001756:	4838      	ldr	r0, [pc, #224]	@ (8001838 <MX_FREERTOS_Init+0x170>)
 8001758:	f008 fd48 	bl	800a1ec <osThreadNew>
 800175c:	4603      	mov	r3, r0
 800175e:	4a37      	ldr	r2, [pc, #220]	@ (800183c <MX_FREERTOS_Init+0x174>)
 8001760:	6013      	str	r3, [r2, #0]

  /* creation of readFromHost */
  readFromHostHandle = osThreadNew(readFromHostFunc, NULL, &readFromHost_attributes);
 8001762:	4a37      	ldr	r2, [pc, #220]	@ (8001840 <MX_FREERTOS_Init+0x178>)
 8001764:	2100      	movs	r1, #0
 8001766:	4837      	ldr	r0, [pc, #220]	@ (8001844 <MX_FREERTOS_Init+0x17c>)
 8001768:	f008 fd40 	bl	800a1ec <osThreadNew>
 800176c:	4603      	mov	r3, r0
 800176e:	4a36      	ldr	r2, [pc, #216]	@ (8001848 <MX_FREERTOS_Init+0x180>)
 8001770:	6013      	str	r3, [r2, #0]

  /* creation of readFromIMU */
  readFromIMUHandle = osThreadNew(readFromIMUFunc, NULL, &readFromIMU_attributes);
 8001772:	4a36      	ldr	r2, [pc, #216]	@ (800184c <MX_FREERTOS_Init+0x184>)
 8001774:	2100      	movs	r1, #0
 8001776:	4836      	ldr	r0, [pc, #216]	@ (8001850 <MX_FREERTOS_Init+0x188>)
 8001778:	f008 fd38 	bl	800a1ec <osThreadNew>
 800177c:	4603      	mov	r3, r0
 800177e:	4a35      	ldr	r2, [pc, #212]	@ (8001854 <MX_FREERTOS_Init+0x18c>)
 8001780:	6013      	str	r3, [r2, #0]

  /* creation of updateControl */
  updateControlHandle = osThreadNew(updateControlFunc, NULL, &updateControl_attributes);
 8001782:	4a35      	ldr	r2, [pc, #212]	@ (8001858 <MX_FREERTOS_Init+0x190>)
 8001784:	2100      	movs	r1, #0
 8001786:	4835      	ldr	r0, [pc, #212]	@ (800185c <MX_FREERTOS_Init+0x194>)
 8001788:	f008 fd30 	bl	800a1ec <osThreadNew>
 800178c:	4603      	mov	r3, r0
 800178e:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <MX_FREERTOS_Init+0x198>)
 8001790:	6013      	str	r3, [r2, #0]

  /* creation of convertSetpoint */
  convertSetpointHandle = osThreadNew(convertSetpointToStepsFunc, NULL, &convertSetpoint_attributes);
 8001792:	4a34      	ldr	r2, [pc, #208]	@ (8001864 <MX_FREERTOS_Init+0x19c>)
 8001794:	2100      	movs	r1, #0
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <MX_FREERTOS_Init+0x1a0>)
 8001798:	f008 fd28 	bl	800a1ec <osThreadNew>
 800179c:	4603      	mov	r3, r0
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <MX_FREERTOS_Init+0x1a4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* creation of sendToHost */
  sendToHostHandle = osThreadNew(sendToHostFunc, NULL, &sendToHost_attributes);
 80017a2:	4a33      	ldr	r2, [pc, #204]	@ (8001870 <MX_FREERTOS_Init+0x1a8>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4833      	ldr	r0, [pc, #204]	@ (8001874 <MX_FREERTOS_Init+0x1ac>)
 80017a8:	f008 fd20 	bl	800a1ec <osThreadNew>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <MX_FREERTOS_Init+0x1b0>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* creation of moveYawMotor */
  moveYawMotorHandle = osThreadNew(moveYawMotorFunc, NULL, &moveYawMotor_attributes);
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <MX_FREERTOS_Init+0x1b4>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4832      	ldr	r0, [pc, #200]	@ (8001880 <MX_FREERTOS_Init+0x1b8>)
 80017b8:	f008 fd18 	bl	800a1ec <osThreadNew>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a31      	ldr	r2, [pc, #196]	@ (8001884 <MX_FREERTOS_Init+0x1bc>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* creation of moveRollMotor */
  moveRollMotorHandle = osThreadNew(moveRollMotorFunc, NULL, &moveRollMotor_attributes);
 80017c2:	4a31      	ldr	r2, [pc, #196]	@ (8001888 <MX_FREERTOS_Init+0x1c0>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4831      	ldr	r0, [pc, #196]	@ (800188c <MX_FREERTOS_Init+0x1c4>)
 80017c8:	f008 fd10 	bl	800a1ec <osThreadNew>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <MX_FREERTOS_Init+0x1c8>)
 80017d0:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of hostImuEvent */
  hostImuEventHandle = osEventFlagsNew(&hostImuEvent_attributes);
 80017d2:	4830      	ldr	r0, [pc, #192]	@ (8001894 <MX_FREERTOS_Init+0x1cc>)
 80017d4:	f008 fe86 	bl	800a4e4 <osEventFlagsNew>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a2f      	ldr	r2, [pc, #188]	@ (8001898 <MX_FREERTOS_Init+0x1d0>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	080207f4 	.word	0x080207f4
 80017e8:	20004dc4 	.word	0x20004dc4
 80017ec:	2000f908 	.word	0x2000f908
 80017f0:	08020794 	.word	0x08020794
 80017f4:	20004db4 	.word	0x20004db4
 80017f8:	080207ac 	.word	0x080207ac
 80017fc:	20004db8 	.word	0x20004db8
 8001800:	080207c4 	.word	0x080207c4
 8001804:	20004dbc 	.word	0x20004dbc
 8001808:	080207dc 	.word	0x080207dc
 800180c:	20004dc0 	.word	0x20004dc0
 8001810:	08020608 	.word	0x08020608
 8001814:	0800189d 	.word	0x0800189d
 8001818:	20001e00 	.word	0x20001e00
 800181c:	0802062c 	.word	0x0802062c
 8001820:	080018ed 	.word	0x080018ed
 8001824:	20004d8c 	.word	0x20004d8c
 8001828:	08020650 	.word	0x08020650
 800182c:	08001ab5 	.word	0x08001ab5
 8001830:	20004d90 	.word	0x20004d90
 8001834:	08020674 	.word	0x08020674
 8001838:	08001b01 	.word	0x08001b01
 800183c:	20004d94 	.word	0x20004d94
 8001840:	08020698 	.word	0x08020698
 8001844:	08001b9d 	.word	0x08001b9d
 8001848:	20004d98 	.word	0x20004d98
 800184c:	080206bc 	.word	0x080206bc
 8001850:	08001c69 	.word	0x08001c69
 8001854:	20004d9c 	.word	0x20004d9c
 8001858:	080206e0 	.word	0x080206e0
 800185c:	08001ca9 	.word	0x08001ca9
 8001860:	20004da0 	.word	0x20004da0
 8001864:	08020704 	.word	0x08020704
 8001868:	08001f0d 	.word	0x08001f0d
 800186c:	20004da4 	.word	0x20004da4
 8001870:	08020728 	.word	0x08020728
 8001874:	08002089 	.word	0x08002089
 8001878:	20004da8 	.word	0x20004da8
 800187c:	0802074c 	.word	0x0802074c
 8001880:	080020b9 	.word	0x080020b9
 8001884:	20004dac 	.word	0x20004dac
 8001888:	08020770 	.word	0x08020770
 800188c:	08002135 	.word	0x08002135
 8001890:	20004db0 	.word	0x20004db0
 8001894:	08020804 	.word	0x08020804
 8001898:	20004dc8 	.word	0x20004dc8

0800189c <defaultTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTaskFunc */
void defaultTaskFunc(void *argument)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTaskFunc */

  for(int i = 0; i < 60; i++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e005      	b.n	80018b6 <defaultTaskFunc+0x1a>
    printf("\r\n");
 80018aa:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <defaultTaskFunc+0x44>)
 80018ac:	f01c fada 	bl	801de64 <puts>
  for(int i = 0; i < 60; i++){
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80018ba:	ddf6      	ble.n	80018aa <defaultTaskFunc+0xe>
  }

  printf("@@@@@@@@@@@@@@@@@@@@@@@@@\r\n");
 80018bc:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <defaultTaskFunc+0x48>)
 80018be:	f01c fad1 	bl	801de64 <puts>
  printf("Booting...\r\n");
 80018c2:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <defaultTaskFunc+0x4c>)
 80018c4:	f01c face 	bl	801de64 <puts>
  printf("@@@@@@@@@@@@@@@@@@@@@@@@@\r\n");
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <defaultTaskFunc+0x48>)
 80018ca:	f01c facb 	bl	801de64 <puts>
  /* Infinite loop */
  for(;;)
  {
	//uint32_t valor_flag = osThreadFlagsSet(readFromHostHandle, 0x01);
	//osEventFlagsSet(hostImuEventHandle,0x01);
    vMyMicroros();
 80018ce:	f001 fc9f 	bl	8003210 <vMyMicroros>
    osDelay(1000);
 80018d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d6:	f008 fdea 	bl	800a4ae <osDelay>
    vMyMicroros();
 80018da:	bf00      	nop
 80018dc:	e7f7      	b.n	80018ce <defaultTaskFunc+0x32>
 80018de:	bf00      	nop
 80018e0:	08020440 	.word	0x08020440
 80018e4:	08020444 	.word	0x08020444
 80018e8:	08020460 	.word	0x08020460

080018ec <BT_uart_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BT_uart_func */
void BT_uart_func(void *argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BT_uart_func */

  /* Infinite loop */
  printf("bluetooth IS on\r\n");
 80018f4:	4864      	ldr	r0, [pc, #400]	@ (8001a88 <BT_uart_func+0x19c>)
 80018f6:	f01c fab5 	bl	801de64 <puts>
  for(;;)
  {
    HAL_UART_Receive_IT(&huart5, &ucUartInputChar, 1);
 80018fa:	2201      	movs	r2, #1
 80018fc:	4963      	ldr	r1, [pc, #396]	@ (8001a8c <BT_uart_func+0x1a0>)
 80018fe:	4864      	ldr	r0, [pc, #400]	@ (8001a90 <BT_uart_func+0x1a4>)
 8001900:	f005 ffce 	bl	80078a0 <HAL_UART_Receive_IT>

    // If buffer size differs from printed amount, print until they match
    while ( usLastPrintedIndex != usBufferIndex ){
 8001904:	e0b4      	b.n	8001a70 <BT_uart_func+0x184>

      printf("bluetooth int: ");
 8001906:	4863      	ldr	r0, [pc, #396]	@ (8001a94 <BT_uart_func+0x1a8>)
 8001908:	f01c fa44 	bl	801dd94 <iprintf>
      if ( ucUartInputBuffer[usLastPrintedIndex] == '0'){
 800190c:	4b62      	ldr	r3, [pc, #392]	@ (8001a98 <BT_uart_func+0x1ac>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b62      	ldr	r3, [pc, #392]	@ (8001a9c <BT_uart_func+0x1b0>)
 8001914:	5c9b      	ldrb	r3, [r3, r2]
 8001916:	2b30      	cmp	r3, #48	@ 0x30
 8001918:	d103      	bne.n	8001922 <BT_uart_func+0x36>
        printf("KEY_RELEASED\r\n");
 800191a:	4861      	ldr	r0, [pc, #388]	@ (8001aa0 <BT_uart_func+0x1b4>)
 800191c:	f01c faa2 	bl	801de64 <puts>
 8001920:	e099      	b.n	8001a56 <BT_uart_func+0x16a>
        // HAL_UART_Transmit(&huart4, "1", 1, 100);
      }else{
        printf((char *) &( ucUartInputBuffer[usLastPrintedIndex] ));
 8001922:	4b5d      	ldr	r3, [pc, #372]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b5c      	ldr	r3, [pc, #368]	@ (8001a9c <BT_uart_func+0x1b0>)
 800192a:	4413      	add	r3, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f01c fa31 	bl	801dd94 <iprintf>
        printf("\r\n");
 8001932:	485c      	ldr	r0, [pc, #368]	@ (8001aa4 <BT_uart_func+0x1b8>)
 8001934:	f01c fa96 	bl	801de64 <puts>
        if ( ucUartInputBuffer[usLastPrintedIndex] == 'v'){
 8001938:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <BT_uart_func+0x1ac>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <BT_uart_func+0x1b0>)
 8001940:	5c9b      	ldrb	r3, [r3, r2]
 8001942:	2b76      	cmp	r3, #118	@ 0x76
 8001944:	d110      	bne.n	8001968 <BT_uart_func+0x7c>
          xJoystickDataIncoming.fYaw += 15;
 8001946:	4b58      	ldr	r3, [pc, #352]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001954:	4b54      	ldr	r3, [pc, #336]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
          osThreadFlagsSet(writeSetpointHandle, 0x1);
 800195a:	4b54      	ldr	r3, [pc, #336]	@ (8001aac <BT_uart_func+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f008 fcd5 	bl	800a310 <osThreadFlagsSet>
 8001966:	e076      	b.n	8001a56 <BT_uart_func+0x16a>
        }
        else if ( ucUartInputBuffer[usLastPrintedIndex] == 'b'){
 8001968:	4b4b      	ldr	r3, [pc, #300]	@ (8001a98 <BT_uart_func+0x1ac>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <BT_uart_func+0x1b0>)
 8001970:	5c9b      	ldrb	r3, [r3, r2]
 8001972:	2b62      	cmp	r3, #98	@ 0x62
 8001974:	d110      	bne.n	8001998 <BT_uart_func+0xac>
          xJoystickDataIncoming.fYaw += -15;
 8001976:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001984:	4b48      	ldr	r3, [pc, #288]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
          osThreadFlagsSet(writeSetpointHandle, 0x1);
 800198a:	4b48      	ldr	r3, [pc, #288]	@ (8001aac <BT_uart_func+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	4618      	mov	r0, r3
 8001992:	f008 fcbd 	bl	800a310 <osThreadFlagsSet>
 8001996:	e05e      	b.n	8001a56 <BT_uart_func+0x16a>
        }
        else if ( ucUartInputBuffer[usLastPrintedIndex] == 'w'){
 8001998:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <BT_uart_func+0x1ac>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <BT_uart_func+0x1b0>)
 80019a0:	5c9b      	ldrb	r3, [r3, r2]
 80019a2:	2b77      	cmp	r3, #119	@ 0x77
 80019a4:	d110      	bne.n	80019c8 <BT_uart_func+0xdc>
          xJoystickDataIncoming.fPitch += 15;
 80019a6:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <BT_uart_func+0x1bc>)
 80019a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ac:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80019b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019b4:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa8 <BT_uart_func+0x1bc>)
 80019b6:	edc3 7a02 	vstr	s15, [r3, #8]
          osThreadFlagsSet(writeSetpointHandle, 0x1);
 80019ba:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <BT_uart_func+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f008 fca5 	bl	800a310 <osThreadFlagsSet>
 80019c6:	e046      	b.n	8001a56 <BT_uart_func+0x16a>
        }
        else if ( ucUartInputBuffer[usLastPrintedIndex] == 's'){
 80019c8:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <BT_uart_func+0x1ac>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <BT_uart_func+0x1b0>)
 80019d0:	5c9b      	ldrb	r3, [r3, r2]
 80019d2:	2b73      	cmp	r3, #115	@ 0x73
 80019d4:	d110      	bne.n	80019f8 <BT_uart_func+0x10c>
          xJoystickDataIncoming.fPitch += -15;
 80019d6:	4b34      	ldr	r3, [pc, #208]	@ (8001aa8 <BT_uart_func+0x1bc>)
 80019d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019dc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80019e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019e4:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <BT_uart_func+0x1bc>)
 80019e6:	edc3 7a02 	vstr	s15, [r3, #8]
          osThreadFlagsSet(writeSetpointHandle, 0x1);
 80019ea:	4b30      	ldr	r3, [pc, #192]	@ (8001aac <BT_uart_func+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 fc8d 	bl	800a310 <osThreadFlagsSet>
 80019f6:	e02e      	b.n	8001a56 <BT_uart_func+0x16a>
        }
        else if ( ucUartInputBuffer[usLastPrintedIndex] == 'a'){
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <BT_uart_func+0x1ac>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <BT_uart_func+0x1b0>)
 8001a00:	5c9b      	ldrb	r3, [r3, r2]
 8001a02:	2b61      	cmp	r3, #97	@ 0x61
 8001a04:	d110      	bne.n	8001a28 <BT_uart_func+0x13c>
          xJoystickDataIncoming.fRoll += 15;
 8001a06:	4b28      	ldr	r3, [pc, #160]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001a16:	edc3 7a01 	vstr	s15, [r3, #4]
          osThreadFlagsSet(writeSetpointHandle, 0x1);
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <BT_uart_func+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 fc75 	bl	800a310 <osThreadFlagsSet>
 8001a26:	e016      	b.n	8001a56 <BT_uart_func+0x16a>
        }
        else if ( ucUartInputBuffer[usLastPrintedIndex] == 'd'){
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <BT_uart_func+0x1b0>)
 8001a30:	5c9b      	ldrb	r3, [r3, r2]
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d10f      	bne.n	8001a56 <BT_uart_func+0x16a>
          xJoystickDataIncoming.fRoll += -15;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a3c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001a40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <BT_uart_func+0x1bc>)
 8001a46:	edc3 7a01 	vstr	s15, [r3, #4]
          osThreadFlagsSet(writeSetpointHandle, 0x1);
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <BT_uart_func+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f008 fc5d 	bl	800a310 <osThreadFlagsSet>
        }
      }
      usLastPrintedIndex++;
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001a60:	801a      	strh	r2, [r3, #0]


      if (usLastPrintedIndex >  UART_BUFFER_SIZE - 1)
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2bff      	cmp	r3, #255	@ 0xff
 8001a68:	d902      	bls.n	8001a70 <BT_uart_func+0x184>
        usLastPrintedIndex = 0;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
    while ( usLastPrintedIndex != usBufferIndex ){
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <BT_uart_func+0x1ac>)
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <BT_uart_func+0x1c4>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f47f af44 	bne.w	8001906 <BT_uart_func+0x1a>
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001a7e:	2004      	movs	r0, #4
 8001a80:	f008 fd15 	bl	800a4ae <osDelay>
    HAL_UART_Receive_IT(&huart5, &ucUartInputChar, 1);
 8001a84:	e739      	b.n	80018fa <BT_uart_func+0xe>
 8001a86:	bf00      	nop
 8001a88:	0802046c 	.word	0x0802046c
 8001a8c:	20001cf8 	.word	0x20001cf8
 8001a90:	2000fa7c 	.word	0x2000fa7c
 8001a94:	08020480 	.word	0x08020480
 8001a98:	20001dfc 	.word	0x20001dfc
 8001a9c:	20001cfc 	.word	0x20001cfc
 8001aa0:	08020490 	.word	0x08020490
 8001aa4:	08020440 	.word	0x08020440
 8001aa8:	20001cec 	.word	0x20001cec
 8001aac:	20004d94 	.word	0x20004d94
 8001ab0:	20001cfa 	.word	0x20001cfa

08001ab4 <printGateKeeperFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printGateKeeperFunc */
void printGateKeeperFunc(void *argument)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	@ 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  xPrintfMessage xIncommingMessage;
  /* Infinite loop */
  for(;;)
  {

    if (osMessageQueueGet(printfQueueHandle, &xIncommingMessage, 0x0, 10) == osOK){
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <printGateKeeperFunc+0x44>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f107 010c 	add.w	r1, r7, #12
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f008 ffa2 	bl	800aa10 <osMessageQueueGet>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <printGateKeeperFunc+0x3a>
    	if(HAL_UART_Transmit(&huart3,(uint8_t *)xIncommingMessage.pMessageBuffer, xIncommingMessage.iMessageLen, 100) != HAL_OK){
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	1d19      	adds	r1, r3, #4
 8001adc:	2364      	movs	r3, #100	@ 0x64
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <printGateKeeperFunc+0x48>)
 8001ae0:	f005 fe50 	bl	8007784 <HAL_UART_Transmit>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <printGateKeeperFunc+0x3a>
      //if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)xIncommingMessage.pMessageBuffer, xIncommingMessage.iMessageLen, 100) != HAL_OK){
        Error_Handler();
 8001aea:	f001 f949 	bl	8002d80 <Error_Handler>
      }
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001aee:	2004      	movs	r0, #4
 8001af0:	f008 fcdd 	bl	800a4ae <osDelay>
    if (osMessageQueueGet(printfQueueHandle, &xIncommingMessage, 0x0, 10) == osOK){
 8001af4:	e7e2      	b.n	8001abc <printGateKeeperFunc+0x8>
 8001af6:	bf00      	nop
 8001af8:	20004db4 	.word	0x20004db4
 8001afc:	2000fb10 	.word	0x2000fb10

08001b00 <writeSetpointFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_writeSetpointFunc */
void writeSetpointFunc(void *argument)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN writeSetpointFunc */
  uint32_t uiThreadFlagsReturn = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    // wait for writeSetpointFunc task flag to be different from 0
    uiThreadFlagsReturn = osThreadFlagsWait(0b11, osFlagsWaitAny, 1000);
 8001b0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b10:	2100      	movs	r1, #0
 8001b12:	2003      	movs	r0, #3
 8001b14:	f008 fc4a 	bl	800a3ac <osThreadFlagsWait>
 8001b18:	60f8      	str	r0, [r7, #12]
    // if return is 0x1, read data from joystick
    // if return is 0x10, read data from host
    // else we loop and wait for the flag to be set
    if (uiThreadFlagsReturn == 0x1){
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d118      	bne.n	8001b52 <writeSetpointFunc+0x52>
      // read data from joystick
      xSetpointData.iDataFromJoystick = 1;
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	60da      	str	r2, [r3, #12]
      xSetpointData.fYaw = xJoystickDataIncoming.fYaw;
 8001b26:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <writeSetpointFunc+0x88>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b2c:	6013      	str	r3, [r2, #0]
      xSetpointData.fRoll = xJoystickDataIncoming.fRoll;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <writeSetpointFunc+0x88>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b34:	6053      	str	r3, [r2, #4]
      xSetpointData.fPitch = xJoystickDataIncoming.fPitch;
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <writeSetpointFunc+0x88>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b3c:	6093      	str	r3, [r2, #8]
      printf("setpoint upd joy\r\n");
 8001b3e:	4813      	ldr	r0, [pc, #76]	@ (8001b8c <writeSetpointFunc+0x8c>)
 8001b40:	f01c f990 	bl	801de64 <puts>
      osThreadFlagsSet(convertSetpointHandle, 0x1);
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <writeSetpointFunc+0x90>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f008 fbe0 	bl	800a310 <osThreadFlagsSet>
 8001b50:	e014      	b.n	8001b7c <writeSetpointFunc+0x7c>
      
    }
    else if (uiThreadFlagsReturn == 0b10){
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d111      	bne.n	8001b7c <writeSetpointFunc+0x7c>
      // read data from host

      xSetpointData.iDataFromJoystick = 0;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
      xSetpointData.fYaw = xHostData.fYaw;
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <writeSetpointFunc+0x94>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b64:	6013      	str	r3, [r2, #0]
      xSetpointData.fRoll = xHostData.fRoll;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <writeSetpointFunc+0x94>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b6c:	6053      	str	r3, [r2, #4]
      xSetpointData.fPitch = xHostData.fPitch;      
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <writeSetpointFunc+0x94>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <writeSetpointFunc+0x84>)
 8001b74:	6093      	str	r3, [r2, #8]
      printf("setpoint upd ros\r\n");
 8001b76:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <writeSetpointFunc+0x98>)
 8001b78:	f01c f974 	bl	801de64 <puts>
      //osThreadFlagsSet(convertSetpointHandle, 0x1);
    }

    osDelay(4);
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f008 fc96 	bl	800a4ae <osDelay>
    uiThreadFlagsReturn = osThreadFlagsWait(0b11, osFlagsWaitAny, 1000);
 8001b82:	e7c3      	b.n	8001b0c <writeSetpointFunc+0xc>
 8001b84:	20001ccc 	.word	0x20001ccc
 8001b88:	20001cec 	.word	0x20001cec
 8001b8c:	080204a0 	.word	0x080204a0
 8001b90:	20004da4 	.word	0x20004da4
 8001b94:	20001cdc 	.word	0x20001cdc
 8001b98:	080204b4 	.word	0x080204b4

08001b9c <readFromHostFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readFromHostFunc */
void readFromHostFunc(void *argument)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readFromHostFunc */
    // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
	xSetpoint angles = {0,0,0,0};
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
	int i=0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Infinite loop */
  for(;;)
  {
    // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
	osEventFlagsWait(hostImuEventHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <readFromHostFunc+0xc0>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	f008 fd11 	bl	800a5e8 <osEventFlagsWait>
	xHostData.fYaw = angles.fYaw;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	4a25      	ldr	r2, [pc, #148]	@ (8001c60 <readFromHostFunc+0xc4>)
 8001bca:	6013      	str	r3, [r2, #0]
	xHostData.fRoll = angles.fRoll;
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	4a24      	ldr	r2, [pc, #144]	@ (8001c60 <readFromHostFunc+0xc4>)
 8001bd0:	6053      	str	r3, [r2, #4]
	xHostData.fPitch = angles.fPitch;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <readFromHostFunc+0xc4>)
 8001bd6:	6093      	str	r3, [r2, #8]
	xHostData.iDataFromJoystick = 0x10;
 8001bd8:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <readFromHostFunc+0xc4>)
 8001bda:	2210      	movs	r2, #16
 8001bdc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8001bde:	2120      	movs	r1, #32
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be4:	f003 f8c2 	bl	8004d6c <HAL_GPIO_TogglePin>
	float a_velocity[] = {0+i,10+i,100+i,500+i};
 8001be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	edc7 7a03 	vstr	s15, [r7, #12]
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	330a      	adds	r3, #10
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	edc7 7a04 	vstr	s15, [r7, #16]
 8001c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c08:	3364      	adds	r3, #100	@ 0x64
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c18:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	edc7 7a06 	vstr	s15, [r7, #24]
	vSetActuatorMsg(a_velocity);
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fa13 	bl	8003058 <vSetActuatorMsg>
	//vSendActuatorMsg();
	//osThreadFlagsSet(writeSetpointHandle,0b10);
	osDelay(DEFAULT_OSDELAY_LOOP);
 8001c32:	2004      	movs	r0, #4
 8001c34:	f008 fc3b 	bl	800a4ae <osDelay>
	i++;
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	i%=100;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c40:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <readFromHostFunc+0xc8>)
 8001c42:	fb82 1203 	smull	r1, r2, r2, r3
 8001c46:	1151      	asrs	r1, r2, #5
 8001c48:	17da      	asrs	r2, r3, #31
 8001c4a:	1a8a      	subs	r2, r1, r2
 8001c4c:	2164      	movs	r1, #100	@ 0x64
 8001c4e:	fb01 f202 	mul.w	r2, r1, r2
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  {
 8001c56:	bf00      	nop
 8001c58:	e7ad      	b.n	8001bb6 <readFromHostFunc+0x1a>
 8001c5a:	bf00      	nop
 8001c5c:	20004dc8 	.word	0x20004dc8
 8001c60:	20001cdc 	.word	0x20001cdc
 8001c64:	51eb851f 	.word	0x51eb851f

08001c68 <readFromIMUFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readFromIMUFunc */
void readFromIMUFunc(void *argument)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readFromIMUFunc */
  
  MPU6050_Initialization();
 8001c70:	f7ff fb4e 	bl	8001310 <MPU6050_Initialization>
  /* Infinite loop */
  for(;;)
  {
    // IMUshouldUpdate semaphore is set to 1 when the IMU has new data
    if (osSemaphoreAcquire(IMUshouldUpdateHandle, 0) == osOK){
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <readFromIMUFunc+0x34>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f008 fda2 	bl	800a7c4 <osSemaphoreAcquire>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <readFromIMUFunc+0x2c>
      MPU6050_ProcessData(&MPU6050);
 8001c86:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <readFromIMUFunc+0x38>)
 8001c88:	f7ff fd10 	bl	80016ac <MPU6050_ProcessData>
      CalculateCompliFilter(&Angle, &MPU6050);
 8001c8c:	4904      	ldr	r1, [pc, #16]	@ (8001ca0 <readFromIMUFunc+0x38>)
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <readFromIMUFunc+0x3c>)
 8001c90:	f7ff fa84 	bl	800119c <CalculateCompliFilter>
      // printf("%f, %f, %f\r\n", Angle.ComFilt_roll,Angle.ComFilt_pitch,Angle.ComFilt_yaw);
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001c94:	2004      	movs	r0, #4
 8001c96:	f008 fc0a 	bl	800a4ae <osDelay>
    if (osSemaphoreAcquire(IMUshouldUpdateHandle, 0) == osOK){
 8001c9a:	e7eb      	b.n	8001c74 <readFromIMUFunc+0xc>
 8001c9c:	20004dc4 	.word	0x20004dc4
 8001ca0:	20001c98 	.word	0x20001c98
 8001ca4:	20001c74 	.word	0x20001c74

08001ca8 <updateControlFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlFunc */
void updateControlFunc(void *argument)
{
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b09e      	sub	sp, #120	@ 0x78
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateControlFunc */
  xIMUData xIMUDataIncoming = {0, 0, 0};
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	677b      	str	r3, [r7, #116]	@ 0x74
  float xError[] = {0, 0, 0};
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  xIMUData xIMUDataPrevious = {0, 0, 0};
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  xIMUData xIMUDataErrorAccumulated = {0, 0, 0};
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	653b      	str	r3, [r7, #80]	@ 0x50
  float fMotorSpeedsDiff[4] = {0, 0, 0, 0};
 8001cf8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]

  // we need a matrix to map the error to the motor speeds
  float fStateToMotorSpeedMatrix[4][3] = {
 8001d06:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef0 <updateControlFunc+0x248>)
 8001d08:	f107 0408 	add.w	r4, r7, #8
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Infinite loop */
  for(;;)
  {

    if (osMessageQueueGet(IMUdataHandle, &xIMUDataIncoming, 0x0, 100) == osOK){
 8001d1e:	4b75      	ldr	r3, [pc, #468]	@ (8001ef4 <updateControlFunc+0x24c>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001d26:	2364      	movs	r3, #100	@ 0x64
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f008 fe71 	bl	800aa10 <osMessageQueueGet>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 80d9 	bne.w	8001ee8 <updateControlFunc+0x240>
      xError[0] = xSetpointData.fYaw - xIMUDataIncoming.fYaw;
 8001d36:	4b70      	ldr	r3, [pc, #448]	@ (8001ef8 <updateControlFunc+0x250>)
 8001d38:	ed93 7a00 	vldr	s14, [r3]
 8001d3c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      xError[1] = xSetpointData.fRoll - xIMUDataIncoming.fRoll;
 8001d48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <updateControlFunc+0x250>)
 8001d4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
      xError[2] = xSetpointData.fPitch - xIMUDataIncoming.fPitch;
 8001d5a:	4b67      	ldr	r3, [pc, #412]	@ (8001ef8 <updateControlFunc+0x250>)
 8001d5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d60:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

      xIMUDataErrorAccumulated.fYaw += xError[0];
 8001d6c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001d70:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      xIMUDataErrorAccumulated.fRoll += xError[1];
 8001d7c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d80:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d88:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
      xIMUDataErrorAccumulated.fPitch += xError[2];
 8001d8c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d90:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

      MATRIX_MULTIPLICATION(fMotorSpeedsDiff, fStateToMotorSpeedMatrix, xError);
 8001d9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001da0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001dac:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001dbc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8001dcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dd0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd8:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ddc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001dec:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001dfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e00:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e08:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001e0c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e18:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e1c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8001e2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001e30:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001e3c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001e4c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      fMotorSpeeds[0] = fMotorSpeeds[0] + fMotorSpeedsDiff[0];
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <updateControlFunc+0x254>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <updateControlFunc+0x254>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
      fMotorSpeeds[1] = fMotorSpeeds[1] + fMotorSpeedsDiff[1];
 8001e70:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <updateControlFunc+0x254>)
 8001e72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e76:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <updateControlFunc+0x254>)
 8001e80:	edc3 7a01 	vstr	s15, [r3, #4]
      fMotorSpeeds[2] = fMotorSpeeds[2] + fMotorSpeedsDiff[2];
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <updateControlFunc+0x254>)
 8001e86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e8a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <updateControlFunc+0x254>)
 8001e94:	edc3 7a02 	vstr	s15, [r3, #8]
      fMotorSpeeds[3] = fMotorSpeeds[3] + fMotorSpeedsDiff[3];
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <updateControlFunc+0x254>)
 8001e9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e9e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <updateControlFunc+0x254>)
 8001ea8:	edc3 7a03 	vstr	s15, [r3, #12]

      // we need to update the real motor angles that will move the IMU
      osMessageQueuePut(yawMotorNewAngleHandle, & xIMUDataIncoming.fYaw, 0, 1);
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <updateControlFunc+0x258>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f008 fd4a 	bl	800a950 <osMessageQueuePut>
      osMessageQueuePut(rollMotorNewAngleHandle, & xIMUDataIncoming.fRoll, 0, 1);
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <updateControlFunc+0x25c>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ec4:	1d19      	adds	r1, r3, #4
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f008 fd41 	bl	800a950 <osMessageQueuePut>

      // we need to update the motor speeds to micro
      osThreadFlagsSet(sendToHostHandle, 0x1);
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <updateControlFunc+0x260>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f008 fa1b 	bl	800a310 <osThreadFlagsSet>

      xIMUDataPrevious = xIMUDataIncoming;
 8001eda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ede:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001ee2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ee4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//    	osThreadFlagsSet(sendToHostHandle, 0x1);
//    	i++;
//    	i%=100;
//    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001ee8:	2004      	movs	r0, #4
 8001eea:	f008 fae0 	bl	800a4ae <osDelay>
    if (osMessageQueueGet(IMUdataHandle, &xIMUDataIncoming, 0x0, 100) == osOK){
 8001eee:	e716      	b.n	8001d1e <updateControlFunc+0x76>
 8001ef0:	080204c8 	.word	0x080204c8
 8001ef4:	20004dc0 	.word	0x20004dc0
 8001ef8:	20001ccc 	.word	0x20001ccc
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20004db8 	.word	0x20004db8
 8001f04:	20004dbc 	.word	0x20004dbc
 8001f08:	20004da8 	.word	0x20004da8

08001f0c <convertSetpointToStepsFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_convertSetpointToStepsFunc */
void convertSetpointToStepsFunc(void *argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	@ 0x30
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN convertSetpointToStepsFunc */
  // we know that  25 steps equals 45 degrees of the motor
  // a full rotation is 45 degrees * 8 = 360 degrees
  // but the gear diameter ratio is 1.6cm at motor to 8cm at IMU
  float fGearDiameterRatio = 8/1.6;
 8001f14:	4b53      	ldr	r3, [pc, #332]	@ (8002064 <convertSetpointToStepsFunc+0x158>)
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float fMotorStepsToIMUFullRotation = 25 * fGearDiameterRatio / 45;
 8001f18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f1c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f24:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8002068 <convertSetpointToStepsFunc+0x15c>
 8001f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  xIMUData xIMUDataPrevious = {0, 0, 0};
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  float fNewAngleYaw = 0;
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  float fNewAngleRoll = 0;
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  int iDiffYaw = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  int iDiffRoll = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
    //osDelay(1 << 30);
    // wait thread flag to be set to 1
    if (osThreadFlagsWait(0x1, 0x1, 1000) == 0x1){
 8001f56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f008 fa25 	bl	800a3ac <osThreadFlagsWait>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d179      	bne.n	800205c <convertSetpointToStepsFunc+0x150>
      printf("setpoint conv called\r\n");
 8001f68:	4840      	ldr	r0, [pc, #256]	@ (800206c <convertSetpointToStepsFunc+0x160>)
 8001f6a:	f01b ff7b 	bl	801de64 <puts>
      // amount of steps to move the motor is the difference between the new angle and the previous angle
      // divided by the amount of steps to move the IMU a full rotation
      // we add to rollMotorNewAngleHandle and yawMotorNewAngleHandle
      fNewAngleYaw = (xSetpointData.fYaw - xIMUDataPrevious.fYaw) * fMotorStepsToIMUFullRotation;
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	edc7 7a04 	vstr	s15, [r7, #16]
      fNewAngleRoll = (xSetpointData.fRoll - xIMUDataPrevious.fRoll) * fMotorStepsToIMUFullRotation;
 8001f88:	4b39      	ldr	r3, [pc, #228]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 8001f8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f96:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	edc7 7a03 	vstr	s15, [r7, #12]
      
      iDiffYaw = (int) (xSetpointData.fYaw - xIMUDataPrevious.fYaw);
 8001fa2:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb4:	ee17 3a90 	vmov	r3, s15
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      iDiffRoll = (int) (xSetpointData.fRoll - xIMUDataPrevious.fRoll);
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 8001fbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fcc:	ee17 3a90 	vmov	r3, s15
 8001fd0:	623b      	str	r3, [r7, #32]
      printf("the diff from data and dataprev is");
 8001fd2:	4828      	ldr	r0, [pc, #160]	@ (8002074 <convertSetpointToStepsFunc+0x168>)
 8001fd4:	f01b fede 	bl	801dd94 <iprintf>
      printf("%d %d\r\n", iDiffYaw, iDiffRoll);
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fdc:	4826      	ldr	r0, [pc, #152]	@ (8002078 <convertSetpointToStepsFunc+0x16c>)
 8001fde:	f01b fed9 	bl	801dd94 <iprintf>
      
      iDiffYaw = iDiffYaw * fMotorStepsToIMUFullRotation;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff8:	ee17 3a90 	vmov	r3, s15
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
      iDiffRoll = iDiffRoll * fMotorStepsToIMUFullRotation;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	623b      	str	r3, [r7, #32]
      printf("the amount of steps is");
 800201a:	4818      	ldr	r0, [pc, #96]	@ (800207c <convertSetpointToStepsFunc+0x170>)
 800201c:	f01b feba 	bl	801dd94 <iprintf>
      printf("%d %d\r\n", iDiffYaw, iDiffRoll);
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002024:	4814      	ldr	r0, [pc, #80]	@ (8002078 <convertSetpointToStepsFunc+0x16c>)
 8002026:	f01b feb5 	bl	801dd94 <iprintf>
      // iNewAngleRoll = (int) fNewAngleRoll;

      // printf("- new angle yaw : %d\r\n", iNewAngleYaw);
      // printf("- new angle roll: %d\r\n", iNewAngleRoll);

      osMessageQueuePut(yawMotorNewAngleHandle, & fNewAngleYaw, 0, 100);
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <convertSetpointToStepsFunc+0x174>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f107 0110 	add.w	r1, r7, #16
 8002032:	2364      	movs	r3, #100	@ 0x64
 8002034:	2200      	movs	r2, #0
 8002036:	f008 fc8b 	bl	800a950 <osMessageQueuePut>
      osMessageQueuePut(rollMotorNewAngleHandle, & fNewAngleRoll, 0, 100);
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <convertSetpointToStepsFunc+0x178>)
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	f107 010c 	add.w	r1, r7, #12
 8002042:	2364      	movs	r3, #100	@ 0x64
 8002044:	2200      	movs	r2, #0
 8002046:	f008 fc83 	bl	800a950 <osMessageQueuePut>

      xIMUDataPrevious.fYaw = xSetpointData.fYaw;
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	617b      	str	r3, [r7, #20]
      xIMUDataPrevious.fRoll = xSetpointData.fRoll;
 8002050:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	61bb      	str	r3, [r7, #24]
      xIMUDataPrevious.fPitch = xSetpointData.fPitch;
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <convertSetpointToStepsFunc+0x164>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61fb      	str	r3, [r7, #28]
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 800205c:	2004      	movs	r0, #4
 800205e:	f008 fa26 	bl	800a4ae <osDelay>
    if (osThreadFlagsWait(0x1, 0x1, 1000) == 0x1){
 8002062:	e778      	b.n	8001f56 <convertSetpointToStepsFunc+0x4a>
 8002064:	40a00000 	.word	0x40a00000
 8002068:	42340000 	.word	0x42340000
 800206c:	080204f8 	.word	0x080204f8
 8002070:	20001ccc 	.word	0x20001ccc
 8002074:	08020510 	.word	0x08020510
 8002078:	08020534 	.word	0x08020534
 800207c:	0802053c 	.word	0x0802053c
 8002080:	20004db8 	.word	0x20004db8
 8002084:	20004dbc 	.word	0x20004dbc

08002088 <sendToHostFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendToHostFunc */
void sendToHostFunc(void *argument)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
/* Infinite loop */
  for(;;)
  {
    // if thread flag is set to 1, send data to host
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8002090:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002094:	2111      	movs	r1, #17
 8002096:	2001      	movs	r0, #1
 8002098:	f008 f988 	bl	800a3ac <osThreadFlagsWait>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <sendToHostFunc+0x24>
      // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
      vSetActuatorMsg(fMotorSpeeds);
 80020a2:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <sendToHostFunc+0x2c>)
 80020a4:	f000 ffd8 	bl	8003058 <vSetActuatorMsg>
    	vSendActuatorMsg();
 80020a8:	f001 f88c 	bl	80031c4 <vSendActuatorMsg>
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 80020ac:	2004      	movs	r0, #4
 80020ae:	f008 f9fe 	bl	800a4ae <osDelay>
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 80020b2:	e7ed      	b.n	8002090 <sendToHostFunc+0x8>
 80020b4:	20000008 	.word	0x20000008

080020b8 <moveYawMotorFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveYawMotorFunc */
void moveYawMotorFunc(void *argument)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af02      	add	r7, sp, #8
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveYawMotorFunc */
  float fNewSteps;
  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(yawMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 80020c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <moveYawMotorFunc+0x78>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f107 010c 	add.w	r1, r7, #12
 80020c8:	2364      	movs	r3, #100	@ 0x64
 80020ca:	2200      	movs	r2, #0
 80020cc:	f008 fca0 	bl	800aa10 <osMessageQueueGet>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d127      	bne.n	8002126 <moveYawMotorFunc+0x6e>
      step(ABS(fNewSteps), fNewSteps>0?1:0, STEP_MOTOR_MICRODELAY, M2_pin2_GPIO_Port, M2_pin2_Pin);
 80020d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d506      	bpl.n	80020f2 <moveYawMotorFunc+0x3a>
 80020e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e8:	eef1 7a67 	vneg.f32	s15, s15
 80020ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80020f0:	e003      	b.n	80020fa <moveYawMotorFunc+0x42>
 80020f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80020fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80020fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	bfcc      	ite	gt
 8002108:	2301      	movgt	r3, #1
 800210a:	2300      	movle	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800211a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800211e:	ee17 0a10 	vmov	r0, s14
 8002122:	f000 f8c3 	bl	80022ac <step>
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8002126:	2004      	movs	r0, #4
 8002128:	f008 f9c1 	bl	800a4ae <osDelay>
    if (osMessageQueueGet(yawMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 800212c:	e7c8      	b.n	80020c0 <moveYawMotorFunc+0x8>
 800212e:	bf00      	nop
 8002130:	20004db8 	.word	0x20004db8

08002134 <moveRollMotorFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveRollMotorFunc */
void moveRollMotorFunc(void *argument)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	6078      	str	r0, [r7, #4]
  float fNewSteps;
  /* Infinite loop */
  for(;;)
  {
    //osDelay(1 << 30);
    if (osMessageQueueGet(rollMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <moveRollMotorFunc+0x74>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	f107 010c 	add.w	r1, r7, #12
 8002144:	2364      	movs	r3, #100	@ 0x64
 8002146:	2200      	movs	r2, #0
 8002148:	f008 fc62 	bl	800aa10 <osMessageQueueGet>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d125      	bne.n	800219e <moveRollMotorFunc+0x6a>
      // printf("roll motor new angle: %f\r\n", fNewSteps);
      step(ABS(fNewSteps), fNewSteps>0?1:0, STEP_MOTOR_MICRODELAY, M1_pin2_GPIO_Port, M1_pin2_Pin);
 8002152:	edd7 7a03 	vldr	s15, [r7, #12]
 8002156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	d506      	bpl.n	800216e <moveRollMotorFunc+0x3a>
 8002160:	edd7 7a03 	vldr	s15, [r7, #12]
 8002164:	eef1 7a67 	vneg.f32	s15, s15
 8002168:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800216c:	e003      	b.n	8002176 <moveRollMotorFunc+0x42>
 800216e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002172:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002176:	edd7 7a03 	vldr	s15, [r7, #12]
 800217a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	bfcc      	ite	gt
 8002184:	2301      	movgt	r3, #1
 8002186:	2300      	movle	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2320      	movs	r3, #32
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <moveRollMotorFunc+0x78>)
 8002192:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002196:	ee17 0a10 	vmov	r0, s14
 800219a:	f000 f887 	bl	80022ac <step>
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 800219e:	2004      	movs	r0, #4
 80021a0:	f008 f985 	bl	800a4ae <osDelay>
    if (osMessageQueueGet(rollMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 80021a4:	e7ca      	b.n	800213c <moveRollMotorFunc+0x8>
 80021a6:	bf00      	nop
 80021a8:	20004dbc 	.word	0x20004dbc
 80021ac:	48000400 	.word	0x48000400

080021b0 <HAL_UART_RxCpltCallback>:
//                      The specific uart that              //
//                      triggered the interrupt.            //
// Output params:       n/a                                 //
// *****************************************************    //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if (huart == &huart5){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_UART_RxCpltCallback+0x40>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_UART_RxCpltCallback+0x34>
    ucUartInputBuffer[usBufferIndex++] = ucUartInputChar;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <HAL_UART_RxCpltCallback+0x44>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	b291      	uxth	r1, r2
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_UART_RxCpltCallback+0x44>)
 80021ca:	8011      	strh	r1, [r2, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_UART_RxCpltCallback+0x48>)
 80021d0:	7819      	ldrb	r1, [r3, #0]
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_UART_RxCpltCallback+0x4c>)
 80021d4:	5499      	strb	r1, [r3, r2]
    if(usBufferIndex > UART_BUFFER_SIZE - 1)
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_UART_RxCpltCallback+0x44>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	2bff      	cmp	r3, #255	@ 0xff
 80021dc:	d902      	bls.n	80021e4 <HAL_UART_RxCpltCallback+0x34>
      usBufferIndex = 0;
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_UART_RxCpltCallback+0x44>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	801a      	strh	r2, [r3, #0]
  }
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	2000fa7c 	.word	0x2000fa7c
 80021f4:	20001cfa 	.word	0x20001cfa
 80021f8:	20001cf8 	.word	0x20001cf8
 80021fc:	20001cfc 	.word	0x20001cfc

08002200 <vSendUARTstepCommand>:
//                      GPIO_Pin                            //
//                      The GPIO pin of the motor.          //
// Output params:       n/a                                 //
// *********************************************************//
void vSendUARTstepCommand(int iSteps, uint8_t direction, uint16_t delay, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	72fb      	strb	r3, [r7, #11]
 800220e:	4613      	mov	r3, r2
 8002210:	813b      	strh	r3, [r7, #8]
  // The aux MCU uart is uart4, handler &huart4
  // motorTx = PC10 = CN7 pin 1
  // motorRx = PC11 = CN7 pin 2
  char cCommand = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	75bb      	strb	r3, [r7, #22]
  char steps = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
  printf("Sending command to motor\r\n");
 800221a:	4821      	ldr	r0, [pc, #132]	@ (80022a0 <vSendUARTstepCommand+0xa0>)
 800221c:	f01b fe22 	bl	801de64 <puts>
  // printf("Steps: %d, Direction: %d, Delay: %d, GPIOx: %d, GPIO_Pin: %d\r\n", iSteps, direction, delay, GPIOx, GPIO_Pin);

  if (iSteps == 0)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d035      	beq.n	8002292 <vSendUARTstepCommand+0x92>
    return;

  if (GPIOx == M1_pin2_GPIO_Port)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1e      	ldr	r2, [pc, #120]	@ (80022a4 <vSendUARTstepCommand+0xa4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d102      	bne.n	8002234 <vSendUARTstepCommand+0x34>
    cCommand = 0b10000000;
 800222e:	2380      	movs	r3, #128	@ 0x80
 8002230:	75bb      	strb	r3, [r7, #22]
 8002232:	e005      	b.n	8002240 <vSendUARTstepCommand+0x40>
  else if (GPIOx == M2_pin2_GPIO_Port)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800223a:	d12c      	bne.n	8002296 <vSendUARTstepCommand+0x96>
    cCommand = 0b00000000;
 800223c:	2300      	movs	r3, #0
 800223e:	75bb      	strb	r3, [r7, #22]
  else
    return;
  
  cCommand = cCommand | (direction * 0b01000000);
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b25a      	sxtb	r2, r3
 8002248:	7dbb      	ldrb	r3, [r7, #22]
 800224a:	b25b      	sxtb	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	b25b      	sxtb	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	75bb      	strb	r3, [r7, #22]

  while( iSteps > 0){
 8002254:	e019      	b.n	800228a <vSendUARTstepCommand+0x8a>
    steps = iSteps > 32 ? 32 : iSteps;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b20      	cmp	r3, #32
 800225a:	bfa8      	it	ge
 800225c:	2320      	movge	r3, #32
 800225e:	75fb      	strb	r3, [r7, #23]
    iSteps = iSteps - steps;
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	60fb      	str	r3, [r7, #12]

    cCommand = cCommand | steps;
 8002268:	7dba      	ldrb	r2, [r7, #22]
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	4313      	orrs	r3, r2
 800226e:	b2db      	uxtb	r3, r3
 8002270:	75bb      	strb	r3, [r7, #22]
    HAL_UART_Transmit(&huart4, (uint8_t *) &cCommand, 1, 1);
 8002272:	f107 0116 	add.w	r1, r7, #22
 8002276:	2301      	movs	r3, #1
 8002278:	2201      	movs	r2, #1
 800227a:	480b      	ldr	r0, [pc, #44]	@ (80022a8 <vSendUARTstepCommand+0xa8>)
 800227c:	f005 fa82 	bl	8007784 <HAL_UART_Transmit>
    // clear steps from cCommand, cCommand should keep the 1st and 2nd MSB, rest is zero
    // the mask should be 0b11000000 = 0xC0
    cCommand = cCommand & 0xC0;
 8002280:	7dbb      	ldrb	r3, [r7, #22]
 8002282:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002286:	b2db      	uxtb	r3, r3
 8002288:	75bb      	strb	r3, [r7, #22]
  while( iSteps > 0){
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	dce2      	bgt.n	8002256 <vSendUARTstepCommand+0x56>
 8002290:	e002      	b.n	8002298 <vSendUARTstepCommand+0x98>
    return;
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <vSendUARTstepCommand+0x98>
    return;
 8002296:	bf00      	nop
  }
}
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	08020554 	.word	0x08020554
 80022a4:	48000400 	.word	0x48000400
 80022a8:	2000f9e8 	.word	0x2000f9e8

080022ac <step>:
//                      GPIO_Pin                            //
//                      The GPIO pin of the motor.          //
// Output params:       n/a                                 //
// *********************************************************//
void step(int steps, uint8_t direction, uint16_t delay, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	72fb      	strb	r3, [r7, #11]
 80022ba:	4613      	mov	r3, r2
 80022bc:	813b      	strh	r3, [r7, #8]
  // printf("step called need to move %d steps in direction %d with delay %d\r\n", steps, direction, delay);
  return vSendUARTstepCommand(steps, direction, delay, GPIOx, GPIO_Pin);
 80022be:	893a      	ldrh	r2, [r7, #8]
 80022c0:	7af9      	ldrb	r1, [r7, #11]
 80022c2:	8b3b      	ldrh	r3, [r7, #24]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff99 	bl	8002200 <vSendUARTstepCommand>
  //   HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
  //   microDelay(delay);
  //   HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
  //   microDelay(delay);
  // }
}
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_write>:
//                      The length of the message.          //
// Output params:       len                                 //
//                      The length of the message.          //
// *********************************************************//
int _write(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	@ 0x40
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  xPrintfMessage xIncommingMessage;
  int original_len = len;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int batch_len = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  // if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr, len,100) != HAL_OK){
  //         Error_Handler();
  // }

if (len <= MAX_MESSAGE_LEN-1){
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b1f      	cmp	r3, #31
 80022ec:	dc42      	bgt.n	8002374 <_write+0xa0>
  batch_len = MIN(len, MAX_MESSAGE_LEN-1); //+1 to '\0'
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b1f      	cmp	r3, #31
 80022f2:	bfa8      	it	ge
 80022f4:	231f      	movge	r3, #31
 80022f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  xIncommingMessage.iMessageLen = batch_len;
 80022f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fa:	617b      	str	r3, [r7, #20]
  strncpy(xIncommingMessage.pMessageBuffer, ptr, batch_len);
 80022fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	3304      	adds	r3, #4
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f01b ff49 	bl	801e19e <strncpy>
  xIncommingMessage.pMessageBuffer[batch_len] = '\0';
 800230c:	f107 0218 	add.w	r2, r7, #24
 8002310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002312:	4413      	add	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
  osMessageQueuePut(printfQueueHandle, &xIncommingMessage, 0x0, 100);
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <_write+0xe8>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	f107 0114 	add.w	r1, r7, #20
 8002320:	2364      	movs	r3, #100	@ 0x64
 8002322:	2200      	movs	r2, #0
 8002324:	f008 fb14 	bl	800a950 <osMessageQueuePut>
 8002328:	e042      	b.n	80023b0 <_write+0xdc>
  }else{
    while (len > MAX_MESSAGE_LEN-1){
      batch_len = MIN(len, MAX_MESSAGE_LEN-1); //+1 to '\0'
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b1f      	cmp	r3, #31
 800232e:	bfa8      	it	ge
 8002330:	231f      	movge	r3, #31
 8002332:	63bb      	str	r3, [r7, #56]	@ 0x38
      xIncommingMessage.iMessageLen = batch_len;
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	617b      	str	r3, [r7, #20]
      strncpy(xIncommingMessage.pMessageBuffer, ptr, batch_len);
 8002338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	3304      	adds	r3, #4
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f01b ff2b 	bl	801e19e <strncpy>
      xIncommingMessage.pMessageBuffer[batch_len] = '\0';
 8002348:	f107 0218 	add.w	r2, r7, #24
 800234c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234e:	4413      	add	r3, r2
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
      osMessageQueuePut(printfQueueHandle, &xIncommingMessage, 0x0, 100);
 8002354:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <_write+0xe8>)
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	f107 0114 	add.w	r1, r7, #20
 800235c:	2364      	movs	r3, #100	@ 0x64
 800235e:	2200      	movs	r2, #0
 8002360:	f008 faf6 	bl	800a950 <osMessageQueuePut>
      ptr += batch_len;
 8002364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
      len -= batch_len;
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	607b      	str	r3, [r7, #4]
    while (len > MAX_MESSAGE_LEN-1){
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b1f      	cmp	r3, #31
 8002378:	dcd7      	bgt.n	800232a <_write+0x56>
    }
    if (len > 0){
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	dd17      	ble.n	80023b0 <_write+0xdc>
      xIncommingMessage.iMessageLen = len;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	617b      	str	r3, [r7, #20]
      strncpy(xIncommingMessage.pMessageBuffer, ptr, len);
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	3304      	adds	r3, #4
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f01b ff05 	bl	801e19e <strncpy>
      xIncommingMessage.pMessageBuffer[len] = '\0';
 8002394:	f107 0218 	add.w	r2, r7, #24
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
      osMessageQueuePut(printfQueueHandle, &xIncommingMessage, 0x0, 100);
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <_write+0xe8>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	f107 0114 	add.w	r1, r7, #20
 80023a8:	2364      	movs	r3, #100	@ 0x64
 80023aa:	2200      	movs	r2, #0
 80023ac:	f008 fad0 	bl	800a950 <osMessageQueuePut>
    }
  }
  return original_len;
 80023b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3740      	adds	r7, #64	@ 0x40
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20004db4 	.word	0x20004db4

080023c0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80023cc:	f00a f85c 	bl	800c488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <pvPortMallocMicroROS+0x17c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80023d8:	f000 f986 	bl	80026e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023dc:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <pvPortMallocMicroROS+0x180>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 8090 	bne.w	800250a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01e      	beq.n	800242e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80023f0:	2208      	movs	r2, #8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f023 0307 	bic.w	r3, r3, #7
 8002408:	3308      	adds	r3, #8
 800240a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d06a      	beq.n	800250a <pvPortMallocMicroROS+0x14a>
 8002434:	4b43      	ldr	r3, [pc, #268]	@ (8002544 <pvPortMallocMicroROS+0x184>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d865      	bhi.n	800250a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800243e:	4b42      	ldr	r3, [pc, #264]	@ (8002548 <pvPortMallocMicroROS+0x188>)
 8002440:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <pvPortMallocMicroROS+0x188>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002448:	e004      	b.n	8002454 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d903      	bls.n	8002466 <pvPortMallocMicroROS+0xa6>
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f1      	bne.n	800244a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002466:	4b35      	ldr	r3, [pc, #212]	@ (800253c <pvPortMallocMicroROS+0x17c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246c:	429a      	cmp	r2, r3
 800246e:	d04c      	beq.n	800250a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2208      	movs	r2, #8
 8002476:	4413      	add	r3, r2
 8002478:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	1ad2      	subs	r2, r2, r3
 800248a:	2308      	movs	r3, #8
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	429a      	cmp	r2, r3
 8002490:	d920      	bls.n	80024d4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	613b      	str	r3, [r7, #16]
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1ad2      	subs	r2, r2, r3
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024ce:	69b8      	ldr	r0, [r7, #24]
 80024d0:	f000 f96c 	bl	80027ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <pvPortMallocMicroROS+0x184>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	4a19      	ldr	r2, [pc, #100]	@ (8002544 <pvPortMallocMicroROS+0x184>)
 80024e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <pvPortMallocMicroROS+0x184>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <pvPortMallocMicroROS+0x18c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d203      	bcs.n	80024f6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <pvPortMallocMicroROS+0x184>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a16      	ldr	r2, [pc, #88]	@ (800254c <pvPortMallocMicroROS+0x18c>)
 80024f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <pvPortMallocMicroROS+0x180>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	431a      	orrs	r2, r3
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800250a:	f009 ffcb 	bl	800c4a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	60fb      	str	r3, [r7, #12]
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002530:	69fb      	ldr	r3, [r7, #28]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3728      	adds	r7, #40	@ 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000edd4 	.word	0x2000edd4
 8002540:	2000ede0 	.word	0x2000ede0
 8002544:	2000edd8 	.word	0x2000edd8
 8002548:	2000edcc 	.word	0x2000edcc
 800254c:	2000eddc 	.word	0x2000eddc

08002550 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d04a      	beq.n	80025f8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002562:	2308      	movs	r3, #8
 8002564:	425b      	negs	r3, r3
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <vPortFreeMicroROS+0xb0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <vPortFreeMicroROS+0x46>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	60fb      	str	r3, [r7, #12]
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	e7fd      	b.n	8002592 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <vPortFreeMicroROS+0x66>
	__asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	60bb      	str	r3, [r7, #8]
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	e7fd      	b.n	80025b2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <vPortFreeMicroROS+0xb0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d019      	beq.n	80025f8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d115      	bne.n	80025f8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <vPortFreeMicroROS+0xb0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80025dc:	f009 ff54 	bl	800c488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <vPortFreeMicroROS+0xb4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a06      	ldr	r2, [pc, #24]	@ (8002604 <vPortFreeMicroROS+0xb4>)
 80025ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025ee:	6938      	ldr	r0, [r7, #16]
 80025f0:	f000 f8dc 	bl	80027ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80025f4:	f009 ff56 	bl	800c4a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000ede0 	.word	0x2000ede0
 8002604:	2000edd8 	.word	0x2000edd8

08002608 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002614:	2308      	movs	r3, #8
 8002616:	425b      	negs	r3, r3
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4413      	add	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <getBlockSize+0x38>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	43db      	mvns	r3, r3
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

	return count;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	4618      	mov	r0, r3
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000ede0 	.word	0x2000ede0

08002644 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800264e:	f009 ff1b 	bl	800c488 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f7ff feb4 	bl	80023c0 <pvPortMallocMicroROS>
 8002658:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d017      	beq.n	8002690 <pvPortReallocMicroROS+0x4c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d014      	beq.n	8002690 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffce 	bl	8002608 <getBlockSize>
 800266c:	4603      	mov	r3, r0
 800266e:	2208      	movs	r2, #8
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d201      	bcs.n	8002680 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68b8      	ldr	r0, [r7, #8]
 8002686:	f01b fe94 	bl	801e3b2 <memcpy>

		vPortFreeMicroROS(pv);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff60 	bl	8002550 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002690:	f009 ff08 	bl	800c4a4 <xTaskResumeAll>

	return newmem;
 8002694:	68bb      	ldr	r3, [r7, #8]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80026a8:	f009 feee 	bl	800c488 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff fe82 	bl	80023c0 <pvPortMallocMicroROS>
 80026bc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80026c2:	e004      	b.n	80026ce <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	613a      	str	r2, [r7, #16]
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	617a      	str	r2, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f5      	bne.n	80026c4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80026d8:	f009 fee4 	bl	800c4a4 <xTaskResumeAll>
  	return mem;
 80026dc:	68fb      	ldr	r3, [r7, #12]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026ee:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80026f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <prvHeapInit+0xac>)
 80026f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3307      	adds	r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0307 	bic.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <prvHeapInit+0xac>)
 8002718:	4413      	add	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002720:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <prvHeapInit+0xb0>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <prvHeapInit+0xb0>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002734:	2208      	movs	r2, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a15      	ldr	r2, [pc, #84]	@ (800279c <prvHeapInit+0xb4>)
 8002748:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <prvHeapInit+0xb4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <prvHeapInit+0xb4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	1ad2      	subs	r2, r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <prvHeapInit+0xb4>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <prvHeapInit+0xb8>)
 8002776:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a09      	ldr	r2, [pc, #36]	@ (80027a4 <prvHeapInit+0xbc>)
 800277e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002780:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <prvHeapInit+0xc0>)
 8002782:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	20004dcc 	.word	0x20004dcc
 8002798:	2000edcc 	.word	0x2000edcc
 800279c:	2000edd4 	.word	0x2000edd4
 80027a0:	2000eddc 	.word	0x2000eddc
 80027a4:	2000edd8 	.word	0x2000edd8
 80027a8:	2000ede0 	.word	0x2000ede0

080027ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <prvInsertBlockIntoFreeList+0xac>)
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e002      	b.n	80027c0 <prvInsertBlockIntoFreeList+0x14>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d8f7      	bhi.n	80027ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4413      	add	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d108      	bne.n	80027ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	441a      	add	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	441a      	add	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d118      	bne.n	8002834 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <prvInsertBlockIntoFreeList+0xb0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d00d      	beq.n	800282a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	441a      	add	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e008      	b.n	800283c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800282a:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <prvInsertBlockIntoFreeList+0xb0>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e003      	b.n	800283c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d002      	beq.n	800284a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000edcc 	.word	0x2000edcc
 800285c:	2000edd4 	.word	0x2000edd4

08002860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286a:	4a15      	ldr	r2, [pc, #84]	@ (80028c0 <MX_DMA_Init+0x60>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6493      	str	r3, [r2, #72]	@ 0x48
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <MX_DMA_Init+0x60>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6493      	str	r3, [r2, #72]	@ 0x48
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <MX_DMA_Init+0x60>)
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2105      	movs	r1, #5
 800289a:	200b      	movs	r0, #11
 800289c:	f001 fd66 	bl	800436c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028a0:	200b      	movs	r0, #11
 80028a2:	f001 fd7d 	bl	80043a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2105      	movs	r1, #5
 80028aa:	200c      	movs	r0, #12
 80028ac:	f001 fd5e 	bl	800436c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028b0:	200c      	movs	r0, #12
 80028b2:	f001 fd75 	bl	80043a0 <HAL_NVIC_EnableIRQ>

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80028d2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80028d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028d8:	4904      	ldr	r1, [pc, #16]	@ (80028ec <cubemx_transport_open+0x28>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f005 f8ac 	bl	8007a38 <HAL_UART_Receive_DMA>
    return true;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000ede4 	.word	0x2000ede4

080028f0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80028fe:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f005 f8e5 	bl	8007ad0 <HAL_UART_DMAStop>
    return true;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002924:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292c:	2b20      	cmp	r3, #32
 800292e:	d11b      	bne.n	8002968 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	6978      	ldr	r0, [r7, #20]
 800293a:	f004 fffd 	bl	8007938 <HAL_UART_Transmit_DMA>
 800293e:	4603      	mov	r3, r0
 8002940:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002942:	e002      	b.n	800294a <cubemx_transport_write+0x3a>
            osDelay(1);
 8002944:	2001      	movs	r0, #1
 8002946:	f007 fdb2 	bl	800a4ae <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <cubemx_transport_write+0x4a>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	2b20      	cmp	r3, #32
 8002958:	d1f4      	bne.n	8002944 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <cubemx_transport_write+0x54>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	e002      	b.n	800296a <cubemx_transport_write+0x5a>
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002968:	2300      	movs	r3, #0
    }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002988:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298e:	b672      	cpsid	i
}
 8002990:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <cubemx_transport_read+0x9c>)
 80029a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029a4:	b662      	cpsie	i
}
 80029a6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f007 fd7d 	bl	800a4ae <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80029b4:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <cubemx_transport_read+0xa0>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <cubemx_transport_read+0x9c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d103      	bne.n	80029c8 <cubemx_transport_read+0x54>
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dbe2      	blt.n	800298e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80029cc:	e011      	b.n	80029f2 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <cubemx_transport_read+0xa0>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	440b      	add	r3, r1
 80029d8:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <cubemx_transport_read+0xa4>)
 80029da:	5c8a      	ldrb	r2, [r1, r2]
 80029dc:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <cubemx_transport_read+0xa0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <cubemx_transport_read+0xa0>)
 80029ea:	6013      	str	r3, [r2, #0]
        wrote++;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	3301      	adds	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80029f2:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <cubemx_transport_read+0xa0>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <cubemx_transport_read+0x9c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d003      	beq.n	8002a06 <cubemx_transport_read+0x92>
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d3e3      	bcc.n	80029ce <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002a06:	69bb      	ldr	r3, [r7, #24]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000f5e8 	.word	0x2000f5e8
 8002a14:	2000f5e4 	.word	0x2000f5e4
 8002a18:	2000ede4 	.word	0x2000ede4

08002a1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a32:	4b46      	ldr	r3, [pc, #280]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	4a45      	ldr	r2, [pc, #276]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3e:	4b43      	ldr	r3, [pc, #268]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a4a:	4b40      	ldr	r3, [pc, #256]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a50:	f043 0320 	orr.w	r3, r3, #32
 8002a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a56:	4b3d      	ldr	r3, [pc, #244]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	4b3a      	ldr	r3, [pc, #232]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	4a39      	ldr	r2, [pc, #228]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6e:	4b37      	ldr	r3, [pc, #220]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4a33      	ldr	r2, [pc, #204]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4a2d      	ldr	r2, [pc, #180]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b4c <MX_GPIO_Init+0x130>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|M2_pin2_Pin, GPIO_PIN_RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab4:	f002 f942 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_pin1_Pin|M1_pin1_Pin|M1_pin2_Pin, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2138      	movs	r1, #56	@ 0x38
 8002abc:	4824      	ldr	r0, [pc, #144]	@ (8002b50 <MX_GPIO_Init+0x134>)
 8002abe:	f002 f93d 	bl	8004d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	481e      	ldr	r0, [pc, #120]	@ (8002b54 <MX_GPIO_Init+0x138>)
 8002ada:	f001 ffad 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|M2_pin2_Pin;
 8002ade:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afa:	f001 ff9d 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	480f      	ldr	r0, [pc, #60]	@ (8002b50 <MX_GPIO_Init+0x134>)
 8002b14:	f001 ff90 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M2_pin1_Pin|M1_pin1_Pin|M1_pin2_Pin;
 8002b18:	2338      	movs	r3, #56	@ 0x38
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4808      	ldr	r0, [pc, #32]	@ (8002b50 <MX_GPIO_Init+0x134>)
 8002b30:	f001 ff82 	bl	8004a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2105      	movs	r1, #5
 8002b38:	2028      	movs	r0, #40	@ 0x28
 8002b3a:	f001 fc17 	bl	800436c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b3e:	2028      	movs	r0, #40	@ 0x28
 8002b40:	f001 fc2e 	bl	80043a0 <HAL_NVIC_EnableIRQ>

}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	@ 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	48000400 	.word	0x48000400
 8002b54:	48000800 	.word	0x48000800

08002b58 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <MX_I2C2_Init+0x78>)
 8002b60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10903294;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b64:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd4 <MX_I2C2_Init+0x7c>)
 8002b66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b74:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b86:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b92:	480e      	ldr	r0, [pc, #56]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002b94:	f002 f927 	bl	8004de6 <HAL_I2C_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002b9e:	f000 f8ef 	bl	8002d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4809      	ldr	r0, [pc, #36]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002ba6:	f002 fea9 	bl	80058fc <HAL_I2CEx_ConfigAnalogFilter>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002bb0:	f000 f8e6 	bl	8002d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <MX_I2C2_Init+0x74>)
 8002bb8:	f002 feeb 	bl	8005992 <HAL_I2CEx_ConfigDigitalFilter>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bc2:	f000 f8dd 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000f5ec 	.word	0x2000f5ec
 8002bd0:	40005800 	.word	0x40005800
 8002bd4:	10903294 	.word	0x10903294

08002bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b09e      	sub	sp, #120	@ 0x78
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	2254      	movs	r2, #84	@ 0x54
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f01b faa9 	bl	801e150 <memset>
  if(i2cHandle->Instance==I2C2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	@ (8002c80 <HAL_I2C_MspInit+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d137      	bne.n	8002c78 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd1d 	bl	8006654 <HAL_RCCEx_PeriphCLKConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c20:	f000 f8ae 	bl	8002d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <HAL_I2C_MspInit+0xac>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c28:	4a16      	ldr	r2, [pc, #88]	@ (8002c84 <HAL_I2C_MspInit+0xac>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <HAL_I2C_MspInit+0xac>)
 8002c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c5c:	f001 feec 	bl	8004a38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c60:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_I2C_MspInit+0xac>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	4a07      	ldr	r2, [pc, #28]	@ (8002c84 <HAL_I2C_MspInit+0xac>)
 8002c66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_I2C_MspInit+0xac>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3778      	adds	r7, #120	@ 0x78
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40005800 	.word	0x40005800
 8002c84:	40021000 	.word	0x40021000

08002c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c8c:	f001 fa7f 	bl	800418e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c90:	f000 f818 	bl	8002cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c94:	f7ff fec2 	bl	8002a1c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c98:	f7ff fde2 	bl	8002860 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002c9c:	f000 ff62 	bl	8003b64 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 8002ca0:	f7ff ff5a 	bl	8002b58 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8002ca4:	f001 f840 	bl	8003d28 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002ca8:	f000 fee8 	bl	8003a7c <MX_TIM1_Init>
  MX_UART5_Init();
 8002cac:	f000 fff0 	bl	8003c90 <MX_UART5_Init>
  MX_UART4_Init();
 8002cb0:	f000 ffa2 	bl	8003bf8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cb4:	f007 fa50 	bl	800a158 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002cb8:	f7fe fd06 	bl	80016c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002cbc:	f007 fa70 	bl	800a1a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <main+0x38>

08002cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b094      	sub	sp, #80	@ 0x50
 8002cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cca:	f107 0318 	add.w	r3, r7, #24
 8002cce:	2238      	movs	r2, #56	@ 0x38
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f01b fa3c 	bl	801e150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f002 fea0 	bl	8005a2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cf6:	2340      	movs	r3, #64	@ 0x40
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002d02:	2304      	movs	r3, #4
 8002d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002d06:	2355      	movs	r3, #85	@ 0x55
 8002d08:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d12:	2302      	movs	r3, #2
 8002d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d16:	f107 0318 	add.w	r3, r7, #24
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 ff3a 	bl	8005b94 <HAL_RCC_OscConfig>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d26:	f000 f82b 	bl	8002d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2104      	movs	r1, #4
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 fa38 	bl	80061b8 <HAL_RCC_ClockConfig>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002d4e:	f000 f817 	bl	8002d80 <Error_Handler>
  }
}
 8002d52:	bf00      	nop
 8002d54:	3750      	adds	r7, #80	@ 0x50
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d6e:	f001 fa27 	bl	80041c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40001000 	.word	0x40001000

08002d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d84:	b672      	cpsid	i
}
 8002d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <Error_Handler+0x8>

08002d8c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <microros_allocate+0x3c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <microros_allocate+0x3c>)
 8002da4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <microros_allocate+0x40>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <microros_allocate+0x40>)
 8002db4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fb02 	bl	80023c0 <pvPortMallocMicroROS>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000f640 	.word	0x2000f640
 8002dcc:	2000f644 	.word	0x2000f644

08002dd0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00c      	beq.n	8002dfa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fc11 	bl	8002608 <getBlockSize>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a06      	ldr	r2, [pc, #24]	@ (8002e04 <microros_deallocate+0x34>)
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <microros_deallocate+0x34>)
 8002df2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fbab 	bl	8002550 <vPortFreeMicroROS>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000f644 	.word	0x2000f644

08002e08 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e14:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <microros_reallocate+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <microros_reallocate+0x64>)
 8002e22:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e24:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <microros_reallocate+0x68>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b0f      	ldr	r3, [pc, #60]	@ (8002e70 <microros_reallocate+0x68>)
 8002e32:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002e3a:	68b8      	ldr	r0, [r7, #8]
 8002e3c:	f7ff fac0 	bl	80023c0 <pvPortMallocMicroROS>
 8002e40:	4603      	mov	r3, r0
 8002e42:	e00e      	b.n	8002e62 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff fbdf 	bl	8002608 <getBlockSize>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <microros_reallocate+0x68>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <microros_reallocate+0x68>)
 8002e56:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff fbf2 	bl	8002644 <pvPortReallocMicroROS>
 8002e60:	4603      	mov	r3, r0
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000f640 	.word	0x2000f640
 8002e70:	2000f644 	.word	0x2000f644

08002e74 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	4a0c      	ldr	r2, [pc, #48]	@ (8002ebc <microros_zero_allocate+0x48>)
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <microros_zero_allocate+0x48>)
 8002e92:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <microros_zero_allocate+0x4c>)
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <microros_zero_allocate+0x4c>)
 8002ea6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fbf7 	bl	800269e <pvPortCallocMicroROS>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000f640 	.word	0x2000f640
 8002ec0:	2000f644 	.word	0x2000f644
 8002ec4:	00000000 	.word	0x00000000

08002ec8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ede:	a320      	add	r3, pc, #128	@ (adr r3, 8002f60 <UTILS_NanosecondsToTimespec+0x98>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fec0 	bl	8000c68 <__aeabi_ldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002f60 <UTILS_NanosecondsToTimespec+0x98>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd feb4 	bl	8000c68 <__aeabi_ldivmod>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da20      	bge.n	8002f4e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a11      	ldr	r2, [pc, #68]	@ (8002f58 <UTILS_NanosecondsToTimespec+0x90>)
 8002f12:	fb82 1203 	smull	r1, r2, r2, r3
 8002f16:	1712      	asrs	r2, r2, #28
 8002f18:	17db      	asrs	r3, r3, #31
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	17c8      	asrs	r0, r1, #31
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	ebb2 0804 	subs.w	r8, r2, r4
 8002f32:	eb63 0905 	sbc.w	r9, r3, r5
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4906      	ldr	r1, [pc, #24]	@ (8002f5c <UTILS_NanosecondsToTimespec+0x94>)
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
    }
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f58:	44b82fa1 	.word	0x44b82fa1
 8002f5c:	3b9aca00 	.word	0x3b9aca00
 8002f60:	3b9aca00 	.word	0x3b9aca00
 8002f64:	00000000 	.word	0x00000000

08002f68 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b08e      	sub	sp, #56	@ 0x38
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f72:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002f74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f009 fdae 	bl	800caf0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	17da      	asrs	r2, r3, #31
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	61fa      	str	r2, [r7, #28]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	69b9      	ldr	r1, [r7, #24]
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	2200      	movs	r2, #0
 8002faa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	461c      	mov	r4, r3
 8002fb4:	4615      	mov	r5, r2
 8002fb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002fba:	1911      	adds	r1, r2, r4
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	416b      	adcs	r3, r5
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002fca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	f04f 0500 	mov.w	r5, #0
 8002fda:	015d      	lsls	r5, r3, #5
 8002fdc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002fe0:	0154      	lsls	r4, r2, #5
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	ebb2 0800 	subs.w	r8, r2, r0
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002ffa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002ffe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	eb18 0a00 	adds.w	sl, r8, r0
 800300a:	eb49 0b01 	adc.w	fp, r9, r1
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800301a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800301e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003022:	ebb2 040a 	subs.w	r4, r2, sl
 8003026:	603c      	str	r4, [r7, #0]
 8003028:	eb63 030b 	sbc.w	r3, r3, fp
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4623      	mov	r3, r4
 8003034:	181b      	adds	r3, r3, r0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	462b      	mov	r3, r5
 800303a:	eb41 0303 	adc.w	r3, r1, r3
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003046:	f7ff ff3f 	bl	8002ec8 <UTILS_NanosecondsToTimespec>

    return 0;
 800304a:	2300      	movs	r3, #0
 800304c:	4618      	mov	r0, r3
 800304e:	3738      	adds	r7, #56	@ 0x38
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003058 <vSetActuatorMsg>:
	 * velocity: []
	 * normalized: []

*************************************************************************/

void vSetActuatorMsg(float *fpVelocity){
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	velocity_msg.velocity.data[0] = fpVelocity[0];
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <vSetActuatorMsg+0x8c>)
 8003066:	6a14      	ldr	r4, [r2, #32]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd faa5 	bl	80005b8 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[1] = fpVelocity[1];
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <vSetActuatorMsg+0x8c>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f103 0408 	add.w	r4, r3, #8
 8003084:	4610      	mov	r0, r2
 8003086:	f7fd fa97 	bl	80005b8 <__aeabi_f2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[2] = fpVelocity[2];
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3308      	adds	r3, #8
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <vSetActuatorMsg+0x8c>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f103 0410 	add.w	r4, r3, #16
 80030a0:	4610      	mov	r0, r2
 80030a2:	f7fd fa89 	bl	80005b8 <__aeabi_f2d>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[3] = fpVelocity[3];
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	330c      	adds	r3, #12
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <vSetActuatorMsg+0x8c>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f103 0418 	add.w	r4, r3, #24
 80030bc:	4610      	mov	r0, r2
 80030be:	f7fd fa7b 	bl	80005b8 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[4] = imu_msg.linear_acceleration.z;
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <vSetActuatorMsg+0x8c>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f103 0120 	add.w	r1, r3, #32
 80030d2:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <vSetActuatorMsg+0x90>)
 80030d4:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 80030d8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	2000f654 	.word	0x2000f654
 80030e8:	2000f690 	.word	0x2000f690

080030ec <vFirstSetActuatorMsg>:
   	   	   	   	   	   	memory with every message sent, at some point we will
   	   	   	   	   	   	run out of memory.

*************************************************************************/

void vFirstSetActuatorMsg(float *fpVelocity){
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	velocity_msg.header.frame_id.capacity = 20;
 80030f4:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 80030f6:	2214      	movs	r2, #20
 80030f8:	611a      	str	r2, [r3, #16]
	velocity_msg.header.frame_id.data = (char*) pvPortMalloc(velocity_msg.header.frame_id.capacity  * sizeof(char));
 80030fa:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4618      	mov	r0, r3
 8003100:	f00b f84c 	bl	800e19c <pvPortMalloc>
 8003104:	4603      	mov	r3, r0
 8003106:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003108:	6093      	str	r3, [r2, #8]
	velocity_msg.header.frame_id.size = strlen(velocity_msg.header.frame_id.data);
 800310a:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd f8e6 	bl	80002e0 <strlen>
 8003114:	4603      	mov	r3, r0
 8003116:	4a29      	ldr	r2, [pc, #164]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003118:	60d3      	str	r3, [r2, #12]

	velocity_msg.velocity.capacity = 5;
 800311a:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 800311c:	2205      	movs	r2, #5
 800311e:	629a      	str	r2, [r3, #40]	@ 0x28
	velocity_msg.velocity.data = (double*) pvPortMalloc(velocity_msg.velocity.capacity * sizeof(double));
 8003120:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4618      	mov	r0, r3
 8003128:	f00b f838 	bl	800e19c <pvPortMalloc>
 800312c:	4603      	mov	r3, r0
 800312e:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003130:	6213      	str	r3, [r2, #32]
	velocity_msg.velocity.data[0] = fpVelocity[0];
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003138:	6a14      	ldr	r4, [r2, #32]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fa3c 	bl	80005b8 <__aeabi_f2d>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[1] = fpVelocity[1];
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f103 0408 	add.w	r4, r3, #8
 8003156:	4610      	mov	r0, r2
 8003158:	f7fd fa2e 	bl	80005b8 <__aeabi_f2d>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[2] = fpVelocity[2];
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3308      	adds	r3, #8
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f103 0410 	add.w	r4, r3, #16
 8003172:	4610      	mov	r0, r2
 8003174:	f7fd fa20 	bl	80005b8 <__aeabi_f2d>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[3] = fpVelocity[3];
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	330c      	adds	r3, #12
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f103 0418 	add.w	r4, r3, #24
 800318e:	4610      	mov	r0, r2
 8003190:	f7fd fa12 	bl	80005b8 <__aeabi_f2d>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[4] = imu_msg.linear_acceleration.z;
 800319c:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f103 0120 	add.w	r1, r3, #32
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <vFirstSetActuatorMsg+0xd4>)
 80031a6:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 80031aa:	e9c1 2300 	strd	r2, r3, [r1]
	velocity_msg.velocity.size = 5;
 80031ae:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <vFirstSetActuatorMsg+0xd0>)
 80031b0:	2205      	movs	r2, #5
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	2000f654 	.word	0x2000f654
 80031c0:	2000f690 	.word	0x2000f690

080031c4 <vSendActuatorMsg>:
	Output params:       n/a

	Extra:

*************************************************************************/
void vSendActuatorMsg(){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	i32PubMessageState = rcl_publish(&velocity_pub, &velocity_msg, NULL);
 80031c8:	2200      	movs	r2, #0
 80031ca:	4904      	ldr	r1, [pc, #16]	@ (80031dc <vSendActuatorMsg+0x18>)
 80031cc:	4804      	ldr	r0, [pc, #16]	@ (80031e0 <vSendActuatorMsg+0x1c>)
 80031ce:	f00c f8e5 	bl	800f39c <rcl_publish>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4a03      	ldr	r2, [pc, #12]	@ (80031e4 <vSendActuatorMsg+0x20>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	2000f654 	.word	0x2000f654
 80031e0:	2000f64c 	.word	0x2000f64c
 80031e4:	2000f8b0 	.word	0x2000f8b0

080031e8 <vImuCallback>:
//		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
//	}
//
//}
void vImuCallback(const void * msgin)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	//const sensor_msgs__msg__Imu * minha_msg;
	if (msgin != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <vImuCallback+0x1a>
	{
		// Indica que houve leitura da IMU para a tarefa escrever setpoint
		osEventFlagsSet(hostImuEventHandle,0x01);
 80031f6:	4b05      	ldr	r3, [pc, #20]	@ (800320c <vImuCallback+0x24>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f007 f9b1 	bl	800a564 <osEventFlagsSet>
		//float a_velocity[] = {5,10,100,500};
		//vSetActuatorMsg(a_velocity);
		//HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
	}

}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20004dc8 	.word	0x20004dc8

08003210 <vMyMicroros>:
	Output params:       n/a

	Extra:

*************************************************************************/
void vMyMicroros(){
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
	if(i32MicrorosConfiguration()==RCL_RET_OK && i32CreateNode()==RCL_RET_OK && rmw_uros_sync_session(1000) == RMW_RET_OK &&
 8003216:	f000 f893 	bl	8003340 <i32MicrorosConfiguration>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d13c      	bne.n	800329a <vMyMicroros+0x8a>
 8003220:	f000 f956 	bl	80034d0 <i32CreateNode>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d137      	bne.n	800329a <vMyMicroros+0x8a>
 800322a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800322e:	f00e ffe3 	bl	80121f8 <rmw_uros_sync_session>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d130      	bne.n	800329a <vMyMicroros+0x8a>
			i32CreatePublisher()==RCL_RET_OK && i32CreateSubscriber()==RCL_RET_OK && i32CreateExecutor()==RCL_RET_OK){
 8003238:	f000 f97a 	bl	8003530 <i32CreatePublisher>
 800323c:	4603      	mov	r3, r0
	if(i32MicrorosConfiguration()==RCL_RET_OK && i32CreateNode()==RCL_RET_OK && rmw_uros_sync_session(1000) == RMW_RET_OK &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12b      	bne.n	800329a <vMyMicroros+0x8a>
			i32CreatePublisher()==RCL_RET_OK && i32CreateSubscriber()==RCL_RET_OK && i32CreateExecutor()==RCL_RET_OK){
 8003242:	f000 f9a3 	bl	800358c <i32CreateSubscriber>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d126      	bne.n	800329a <vMyMicroros+0x8a>
 800324c:	f000 f9cc 	bl	80035e8 <i32CreateExecutor>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d121      	bne.n	800329a <vMyMicroros+0x8a>

		float a_velocity[] = {0,0,0,0};
 8003256:	463b      	mov	r3, r7
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
		vFirstSetActuatorMsg(a_velocity);
 8003262:	463b      	mov	r3, r7
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff41 	bl	80030ec <vFirstSetActuatorMsg>
		 * is configured to be one second.
		 * https://micro.ros.org/docs/tutorials/programming_rcl_rclc/executor/
		 */

		// Run executor
		rcl_ret_t ret = rclc_executor_spin_some(&executor,1000*(1000*1000));
 800326a:	a32b      	add	r3, pc, #172	@ (adr r3, 8003318 <vMyMicroros+0x108>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	482b      	ldr	r0, [pc, #172]	@ (8003320 <vMyMicroros+0x110>)
 8003272:	f00d f995 	bl	80105a0 <rclc_executor_spin_some>
 8003276:	6178      	str	r0, [r7, #20]
		//rclc_executor_spin(&executor);
		while(RCL_RET_OK==ret){
 8003278:	e00a      	b.n	8003290 <vMyMicroros+0x80>

			if(i32PubMessageState!=RCL_RET_OK){
 800327a:	4b2a      	ldr	r3, [pc, #168]	@ (8003324 <vMyMicroros+0x114>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <vMyMicroros+0x88>
				break;
			}
			ret = rclc_executor_spin_some(&executor,1000*(1000*1000));
 8003282:	a325      	add	r3, pc, #148	@ (adr r3, 8003318 <vMyMicroros+0x108>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	4825      	ldr	r0, [pc, #148]	@ (8003320 <vMyMicroros+0x110>)
 800328a:	f00d f989 	bl	80105a0 <rclc_executor_spin_some>
 800328e:	6178      	str	r0, [r7, #20]
		while(RCL_RET_OK==ret){
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f1      	beq.n	800327a <vMyMicroros+0x6a>
 8003296:	e000      	b.n	800329a <vMyMicroros+0x8a>
				break;
 8003298:	bf00      	nop
		}

	}
	rcl_ret_t rc;
	rc = rclc_executor_fini(&executor);
 800329a:	4821      	ldr	r0, [pc, #132]	@ (8003320 <vMyMicroros+0x110>)
 800329c:	f00d f8a8 	bl	80103f0 <rclc_executor_fini>
 80032a0:	6138      	str	r0, [r7, #16]
	rc += rcl_publisher_fini(&velocity_pub, &node);
 80032a2:	4921      	ldr	r1, [pc, #132]	@ (8003328 <vMyMicroros+0x118>)
 80032a4:	4821      	ldr	r0, [pc, #132]	@ (800332c <vMyMicroros+0x11c>)
 80032a6:	f00c f813 	bl	800f2d0 <rcl_publisher_fini>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
	rc += rcl_timer_fini(&timer);
 80032b2:	481f      	ldr	r0, [pc, #124]	@ (8003330 <vMyMicroros+0x120>)
 80032b4:	f00c fba6 	bl	800fa04 <rcl_timer_fini>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
	rc += rcl_subscription_fini(&imu_sub, &node);
 80032c0:	4919      	ldr	r1, [pc, #100]	@ (8003328 <vMyMicroros+0x118>)
 80032c2:	481c      	ldr	r0, [pc, #112]	@ (8003334 <vMyMicroros+0x124>)
 80032c4:	f00c f95e 	bl	800f584 <rcl_subscription_fini>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
	rc += rcl_node_fini(&node);
 80032d0:	4815      	ldr	r0, [pc, #84]	@ (8003328 <vMyMicroros+0x118>)
 80032d2:	f00b fe9d 	bl	800f010 <rcl_node_fini>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
	rc += rclc_support_fini(&support);
 80032de:	4816      	ldr	r0, [pc, #88]	@ (8003338 <vMyMicroros+0x128>)
 80032e0:	f00d faf8 	bl	80108d4 <rclc_support_fini>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
	i32PubMessageState=RCL_RET_OK;
 80032ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <vMyMicroros+0x114>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
	vPortFree((void *)velocity_msg.header.frame_id.data); // Necessary to avoid running out of memory.
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <vMyMicroros+0x12c>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f00b f81e 	bl	800e338 <vPortFree>
	vPortFree((void *)velocity_msg.velocity.data);	// Necessary to avoid running out of memory.
 80032fc:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <vMyMicroros+0x12c>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4618      	mov	r0, r3
 8003302:	f00b f819 	bl	800e338 <vPortFree>
	vFastBlinkOnError();
 8003306:	f000 f9f7 	bl	80036f8 <vFastBlinkOnError>
	return;
 800330a:	bf00      	nop
}
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	3b9aca00 	.word	0x3b9aca00
 800331c:	00000000 	.word	0x00000000
 8003320:	2000f820 	.word	0x2000f820
 8003324:	2000f8b0 	.word	0x2000f8b0
 8003328:	2000f818 	.word	0x2000f818
 800332c:	2000f64c 	.word	0x2000f64c
 8003330:	2000f650 	.word	0x2000f650
 8003334:	2000f648 	.word	0x2000f648
 8003338:	2000f7e4 	.word	0x2000f7e4
 800333c:	2000f654 	.word	0x2000f654

08003340 <i32MicrorosConfiguration>:
   	   	   	   	   	   	If ret is RCL_RET_OK, this method was successful.

	Extra:

*************************************************************************/
rcl_ret_t i32MicrorosConfiguration(){
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b090      	sub	sp, #64	@ 0x40
 8003344:	af02      	add	r7, sp, #8
	rmw_uros_set_custom_transport(
 8003346:	4b56      	ldr	r3, [pc, #344]	@ (80034a0 <i32MicrorosConfiguration+0x160>)
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	4b56      	ldr	r3, [pc, #344]	@ (80034a4 <i32MicrorosConfiguration+0x164>)
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	4b56      	ldr	r3, [pc, #344]	@ (80034a8 <i32MicrorosConfiguration+0x168>)
 8003350:	4a56      	ldr	r2, [pc, #344]	@ (80034ac <i32MicrorosConfiguration+0x16c>)
 8003352:	4957      	ldr	r1, [pc, #348]	@ (80034b0 <i32MicrorosConfiguration+0x170>)
 8003354:	2001      	movs	r0, #1
 8003356:	f00d ffdf 	bl	8011318 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	4618      	mov	r0, r3
 8003360:	f00d fbc0 	bl	8010ae4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8003364:	4b53      	ldr	r3, [pc, #332]	@ (80034b4 <i32MicrorosConfiguration+0x174>)
 8003366:	61fb      	str	r3, [r7, #28]
	freeRTOS_allocator.deallocate = microros_deallocate;
 8003368:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <i32MicrorosConfiguration+0x178>)
 800336a:	623b      	str	r3, [r7, #32]
	freeRTOS_allocator.reallocate = microros_reallocate;
 800336c:	4b53      	ldr	r3, [pc, #332]	@ (80034bc <i32MicrorosConfiguration+0x17c>)
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8003370:	4b53      	ldr	r3, [pc, #332]	@ (80034c0 <i32MicrorosConfiguration+0x180>)
 8003372:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	4618      	mov	r0, r3
 800337a:	f00d fbcf 	bl	8010b1c <rcutils_set_default_allocator>
 800337e:	4603      	mov	r3, r0
 8003380:	f083 0301 	eor.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <i32MicrorosConfiguration+0x54>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800338a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800338e:	484d      	ldr	r0, [pc, #308]	@ (80034c4 <i32MicrorosConfiguration+0x184>)
 8003390:	f01a fd00 	bl	801dd94 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8003394:	4c4c      	ldr	r4, [pc, #304]	@ (80034c8 <i32MicrorosConfiguration+0x188>)
 8003396:	463b      	mov	r3, r7
 8003398:	4618      	mov	r0, r3
 800339a:	f00d fbb1 	bl	8010b00 <rcutils_get_default_allocator>
 800339e:	4625      	mov	r5, r4
 80033a0:	463c      	mov	r4, r7
 80033a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	602b      	str	r3, [r5, #0]
	// Initialize and modify options (Set DOMAIN ID to 25)
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 80033aa:	f00b fbe5 	bl	800eb78 <rcl_get_zero_initialized_init_options>
 80033ae:	4603      	mov	r3, r0
 80033b0:	61bb      	str	r3, [r7, #24]

	int i=0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
	rcl_ret_t ret;
	ret = rcl_init_options_init(&init_options, allocator);
 80033b6:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <i32MicrorosConfiguration+0x188>)
 80033b8:	f107 0418 	add.w	r4, r7, #24
 80033bc:	466d      	mov	r5, sp
 80033be:	f103 020c 	add.w	r2, r3, #12
 80033c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033cc:	4620      	mov	r0, r4
 80033ce:	f00b fbd5 	bl	800eb7c <rcl_init_options_init>
 80033d2:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80033d4:	e011      	b.n	80033fa <i32MicrorosConfiguration+0xba>
		ret = rcl_init_options_init(&init_options, allocator);
 80033d6:	4b3c      	ldr	r3, [pc, #240]	@ (80034c8 <i32MicrorosConfiguration+0x188>)
 80033d8:	f107 0418 	add.w	r4, r7, #24
 80033dc:	466d      	mov	r5, sp
 80033de:	f103 020c 	add.w	r2, r3, #12
 80033e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ec:	4620      	mov	r0, r4
 80033ee:	f00b fbc5 	bl	800eb7c <rcl_init_options_init>
 80033f2:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 80033f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f6:	3301      	adds	r3, #1
 80033f8:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80033fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <i32MicrorosConfiguration+0xc8>
 8003400:	2201      	movs	r2, #1
 8003402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003404:	4293      	cmp	r3, r2
 8003406:	dbe6      	blt.n	80033d6 <i32MicrorosConfiguration+0x96>
	}
	if(ret != RCL_RET_OK){return ret;}
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <i32MicrorosConfiguration+0xd2>
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	e041      	b.n	8003496 <i32MicrorosConfiguration+0x156>


	i=0;
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
	ret = rcl_init_options_set_domain_id(&init_options, 25);
 8003416:	f107 0318 	add.w	r3, r7, #24
 800341a:	2119      	movs	r1, #25
 800341c:	4618      	mov	r0, r3
 800341e:	f00b fc8f 	bl	800ed40 <rcl_init_options_set_domain_id>
 8003422:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003424:	e009      	b.n	800343a <i32MicrorosConfiguration+0xfa>
		ret = rcl_init_options_set_domain_id(&init_options, 25);
 8003426:	f107 0318 	add.w	r3, r7, #24
 800342a:	2119      	movs	r1, #25
 800342c:	4618      	mov	r0, r3
 800342e:	f00b fc87 	bl	800ed40 <rcl_init_options_set_domain_id>
 8003432:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	3301      	adds	r3, #1
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <i32MicrorosConfiguration+0x108>
 8003440:	2201      	movs	r2, #1
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	4293      	cmp	r3, r2
 8003446:	dbee      	blt.n	8003426 <i32MicrorosConfiguration+0xe6>
	}
	if(ret != RCL_RET_OK){return ret;}
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <i32MicrorosConfiguration+0x112>
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	e021      	b.n	8003496 <i32MicrorosConfiguration+0x156>

	// Initialize rclc support object with custom options
	i=0;
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
	ret = rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8003456:	f107 0318 	add.w	r3, r7, #24
 800345a:	4a1b      	ldr	r2, [pc, #108]	@ (80034c8 <i32MicrorosConfiguration+0x188>)
 800345c:	9200      	str	r2, [sp, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	2100      	movs	r1, #0
 8003462:	481a      	ldr	r0, [pc, #104]	@ (80034cc <i32MicrorosConfiguration+0x18c>)
 8003464:	f00d fa02 	bl	801086c <rclc_support_init_with_options>
 8003468:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 800346a:	e00c      	b.n	8003486 <i32MicrorosConfiguration+0x146>
		ret = rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800346c:	f107 0318 	add.w	r3, r7, #24
 8003470:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <i32MicrorosConfiguration+0x188>)
 8003472:	9200      	str	r2, [sp, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	2100      	movs	r1, #0
 8003478:	4814      	ldr	r0, [pc, #80]	@ (80034cc <i32MicrorosConfiguration+0x18c>)
 800347a:	f00d f9f7 	bl	801086c <rclc_support_init_with_options>
 800347e:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	3301      	adds	r3, #1
 8003484:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <i32MicrorosConfiguration+0x154>
 800348c:	2201      	movs	r2, #1
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	4293      	cmp	r3, r2
 8003492:	dbeb      	blt.n	800346c <i32MicrorosConfiguration+0x12c>
	};


	return ret;
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003496:	4618      	mov	r0, r3
 8003498:	3738      	adds	r7, #56	@ 0x38
 800349a:	46bd      	mov	sp, r7
 800349c:	bdb0      	pop	{r4, r5, r7, pc}
 800349e:	bf00      	nop
 80034a0:	08002975 	.word	0x08002975
 80034a4:	08002911 	.word	0x08002911
 80034a8:	080028f1 	.word	0x080028f1
 80034ac:	080028c5 	.word	0x080028c5
 80034b0:	2000f954 	.word	0x2000f954
 80034b4:	08002d8d 	.word	0x08002d8d
 80034b8:	08002dd1 	.word	0x08002dd1
 80034bc:	08002e09 	.word	0x08002e09
 80034c0:	08002e75 	.word	0x08002e75
 80034c4:	08020570 	.word	0x08020570
 80034c8:	2000f7d0 	.word	0x2000f7d0
 80034cc:	2000f7e4 	.word	0x2000f7e4

080034d0 <i32CreateNode>:
   	   	   	   	   	    If rc2 is RCL_RET_OK, this method was successful.

	Extra:

*************************************************************************/
rcl_ret_t i32CreateNode(){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
	// Create node object

	const char * node_name = "test_node";
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <i32CreateNode+0x50>)
 80034d8:	607b      	str	r3, [r7, #4]
	// Node namespace (Can remain empty "")
	const char * namespace = "";
 80034da:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <i32CreateNode+0x54>)
 80034dc:	603b      	str	r3, [r7, #0]
	int i=0;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
	// Init node with configured support object
	rcl_ret_t rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 80034e2:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <i32CreateNode+0x58>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4810      	ldr	r0, [pc, #64]	@ (800352c <i32CreateNode+0x5c>)
 80034ea:	f00d fa1d 	bl	8010928 <rclc_node_init_default>
 80034ee:	60b8      	str	r0, [r7, #8]
	while(rc2 != RCL_RET_OK && i<iNumberOfTries){
 80034f0:	e009      	b.n	8003506 <i32CreateNode+0x36>
		rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <i32CreateNode+0x58>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	480c      	ldr	r0, [pc, #48]	@ (800352c <i32CreateNode+0x5c>)
 80034fa:	f00d fa15 	bl	8010928 <rclc_node_init_default>
 80034fe:	60b8      	str	r0, [r7, #8]
		i++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
	while(rc2 != RCL_RET_OK && i<iNumberOfTries){
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <i32CreateNode+0x44>
 800350c:	2201      	movs	r2, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4293      	cmp	r3, r2
 8003512:	dbee      	blt.n	80034f2 <i32CreateNode+0x22>
	}
	return rc2;
 8003514:	68bb      	ldr	r3, [r7, #8]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	08020598 	.word	0x08020598
 8003524:	080205a4 	.word	0x080205a4
 8003528:	2000f7e4 	.word	0x2000f7e4
 800352c:	2000f818 	.word	0x2000f818

08003530 <i32CreatePublisher>:

	Extra:				/X3/gazebo/command/motor_speed is the topic
						generated by gazebo for the drone motors. We use
						this topic to write the speed of the motors.
*************************************************************************/
rcl_ret_t i32CreatePublisher(){
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
	rcl_ret_t ret = rclc_publisher_init_default(
 8003536:	f00b f81f 	bl	800e578 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 800353a:	4602      	mov	r2, r0
 800353c:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <i32CreatePublisher+0x50>)
 800353e:	4911      	ldr	r1, [pc, #68]	@ (8003584 <i32CreatePublisher+0x54>)
 8003540:	4811      	ldr	r0, [pc, #68]	@ (8003588 <i32CreatePublisher+0x58>)
 8003542:	f00d fa2d 	bl	80109a0 <rclc_publisher_init_default>
 8003546:	6078      	str	r0, [r7, #4]
			&velocity_pub,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_msgs,msg,Actuators),
			"/X3/gazebo/command/motor_speed"
		);
	int i=0;
 8003548:	2300      	movs	r3, #0
 800354a:	603b      	str	r3, [r7, #0]
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 800354c:	e00b      	b.n	8003566 <i32CreatePublisher+0x36>
		ret = rclc_publisher_init_default(
 800354e:	f00b f813 	bl	800e578 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 8003552:	4602      	mov	r2, r0
 8003554:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <i32CreatePublisher+0x50>)
 8003556:	490b      	ldr	r1, [pc, #44]	@ (8003584 <i32CreatePublisher+0x54>)
 8003558:	480b      	ldr	r0, [pc, #44]	@ (8003588 <i32CreatePublisher+0x58>)
 800355a:	f00d fa21 	bl	80109a0 <rclc_publisher_init_default>
 800355e:	6078      	str	r0, [r7, #4]
					&velocity_pub,
					&node,
					ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_msgs,msg,Actuators),
					"/X3/gazebo/command/motor_speed"
			   );
		i++;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	603b      	str	r3, [r7, #0]
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <i32CreatePublisher+0x44>
 800356c:	2201      	movs	r2, #1
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	4293      	cmp	r3, r2
 8003572:	dbec      	blt.n	800354e <i32CreatePublisher+0x1e>
	};

	 return ret;
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	080205a8 	.word	0x080205a8
 8003584:	2000f818 	.word	0x2000f818
 8003588:	2000f64c 	.word	0x2000f64c

0800358c <i32CreateSubscriber>:

	Extra:				/drone/imu is the topic generated by gazebo for
						the imu . We use this topic to read information
						about the drone imu.
*************************************************************************/
rcl_ret_t i32CreateSubscriber(){
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
	 const char * imu_topic_name = "/drone/imu";
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <i32CreateSubscriber+0x50>)
 8003594:	607b      	str	r3, [r7, #4]
	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs,msg,Imu);
 8003596:	f00f fa1f 	bl	80129d8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800359a:	6038      	str	r0, [r7, #0]
	// Initialize a reliable subscriber
	rcl_ret_t rc_imu = rclc_subscription_init_default(
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	490f      	ldr	r1, [pc, #60]	@ (80035e0 <i32CreateSubscriber+0x54>)
 80035a2:	4810      	ldr	r0, [pc, #64]	@ (80035e4 <i32CreateSubscriber+0x58>)
 80035a4:	f00d fa30 	bl	8010a08 <rclc_subscription_init_default>
 80035a8:	60f8      	str	r0, [r7, #12]
			&imu_sub, &node,
			imu_type_support, imu_topic_name
		);
	int i=0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
	while(RCL_RET_OK != rc_imu && i<iNumberOfTries){
 80035ae:	e009      	b.n	80035c4 <i32CreateSubscriber+0x38>
		rc_imu = rclc_subscription_init_default(
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	490a      	ldr	r1, [pc, #40]	@ (80035e0 <i32CreateSubscriber+0x54>)
 80035b6:	480b      	ldr	r0, [pc, #44]	@ (80035e4 <i32CreateSubscriber+0x58>)
 80035b8:	f00d fa26 	bl	8010a08 <rclc_subscription_init_default>
 80035bc:	60f8      	str	r0, [r7, #12]
			&imu_sub, &node,
			imu_type_support, imu_topic_name
		);
		i++;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
	while(RCL_RET_OK != rc_imu && i<iNumberOfTries){
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <i32CreateSubscriber+0x46>
 80035ca:	2201      	movs	r2, #1
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4293      	cmp	r3, r2
 80035d0:	dbee      	blt.n	80035b0 <i32CreateSubscriber+0x24>

	}
	return rc_imu;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	080205c8 	.word	0x080205c8
 80035e0:	2000f818 	.word	0x2000f818
 80035e4:	2000f648 	.word	0x2000f648

080035e8 <i32CreateExecutor>:
	Output params:      rcl_ret_t ret
   	   	   	   	   	    If ret is RCL_RET_OK, this method was successful.

	Extra:
*************************************************************************/
rcl_ret_t i32CreateExecutor(){
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b088      	sub	sp, #32
 80035ee:	af02      	add	r7, sp, #8
	 // Create a timer
	const unsigned int timer_timeout = 1000;
 80035f0:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80035f4:	617c      	str	r4, [r7, #20]
	rcl_ret_t ret;
	ret = rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(timer_timeout), vSendActuatorMsg,true);
 80035f6:	697c      	ldr	r4, [r7, #20]
 80035f8:	2500      	movs	r5, #0
 80035fa:	46a0      	mov	r8, r4
 80035fc:	46a9      	mov	r9, r5
 80035fe:	4644      	mov	r4, r8
 8003600:	464d      	mov	r5, r9
 8003602:	f04f 0a00 	mov.w	sl, #0
 8003606:	f04f 0b00 	mov.w	fp, #0
 800360a:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 800360e:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 8003612:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 8003616:	4654      	mov	r4, sl
 8003618:	465d      	mov	r5, fp
 800361a:	ebb4 0208 	subs.w	r2, r4, r8
 800361e:	eb65 0309 	sbc.w	r3, r5, r9
 8003622:	f04f 0400 	mov.w	r4, #0
 8003626:	f04f 0500 	mov.w	r5, #0
 800362a:	025d      	lsls	r5, r3, #9
 800362c:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 8003630:	0254      	lsls	r4, r2, #9
 8003632:	4622      	mov	r2, r4
 8003634:	462b      	mov	r3, r5
 8003636:	eb12 0008 	adds.w	r0, r2, r8
 800363a:	eb43 0109 	adc.w	r1, r3, r9
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800364c:	0182      	lsls	r2, r0, #6
 800364e:	1a14      	subs	r4, r2, r0
 8003650:	603c      	str	r4, [r7, #0]
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	e9d7 1200 	ldrd	r1, r2, [r7]
 800365c:	460b      	mov	r3, r1
 800365e:	eb13 0308 	adds.w	r3, r3, r8
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	4613      	mov	r3, r2
 8003666:	eb43 0309 	adc.w	r3, r3, r9
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003670:	2101      	movs	r1, #1
 8003672:	9101      	str	r1, [sp, #4]
 8003674:	4918      	ldr	r1, [pc, #96]	@ (80036d8 <i32CreateExecutor+0xf0>)
 8003676:	9100      	str	r1, [sp, #0]
 8003678:	4918      	ldr	r1, [pc, #96]	@ (80036dc <i32CreateExecutor+0xf4>)
 800367a:	4819      	ldr	r0, [pc, #100]	@ (80036e0 <i32CreateExecutor+0xf8>)
 800367c:	f00d f9f8 	bl	8010a70 <rclc_timer_init_default2>
 8003680:	6138      	str	r0, [r7, #16]
	if(ret != RCL_RET_OK){ return ret;}
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <i32CreateExecutor+0xa4>
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	e01f      	b.n	80036cc <i32CreateExecutor+0xe4>

	// Create executor
	ret = rclc_executor_init(&executor, &support.context, 2, &allocator);
 800368c:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <i32CreateExecutor+0xfc>)
 800368e:	2202      	movs	r2, #2
 8003690:	4912      	ldr	r1, [pc, #72]	@ (80036dc <i32CreateExecutor+0xf4>)
 8003692:	4815      	ldr	r0, [pc, #84]	@ (80036e8 <i32CreateExecutor+0x100>)
 8003694:	f00c fe40 	bl	8010318 <rclc_executor_init>
 8003698:	6138      	str	r0, [r7, #16]
	if(ret != RCL_RET_OK){ return ret;}
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <i32CreateExecutor+0xbc>
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	e013      	b.n	80036cc <i32CreateExecutor+0xe4>

	ret = rclc_executor_add_subscription(&executor, &imu_sub, &imu_msg,
 80036a4:	2300      	movs	r3, #0
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4b10      	ldr	r3, [pc, #64]	@ (80036ec <i32CreateExecutor+0x104>)
 80036aa:	4a11      	ldr	r2, [pc, #68]	@ (80036f0 <i32CreateExecutor+0x108>)
 80036ac:	4911      	ldr	r1, [pc, #68]	@ (80036f4 <i32CreateExecutor+0x10c>)
 80036ae:	480e      	ldr	r0, [pc, #56]	@ (80036e8 <i32CreateExecutor+0x100>)
 80036b0:	f00c fece 	bl	8010450 <rclc_executor_add_subscription>
 80036b4:	6138      	str	r0, [r7, #16]
			  &vImuCallback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	if(ret != RCL_RET_OK){ return ret;}
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <i32CreateExecutor+0xd8>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	e005      	b.n	80036cc <i32CreateExecutor+0xe4>


	ret = rclc_executor_add_timer(&executor, &timer);
 80036c0:	4907      	ldr	r1, [pc, #28]	@ (80036e0 <i32CreateExecutor+0xf8>)
 80036c2:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <i32CreateExecutor+0x100>)
 80036c4:	f00c fef8 	bl	80104b8 <rclc_executor_add_timer>
 80036c8:	6138      	str	r0, [r7, #16]

	return ret;
 80036ca:	693b      	ldr	r3, [r7, #16]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d6:	bf00      	nop
 80036d8:	080031c5 	.word	0x080031c5
 80036dc:	2000f7e4 	.word	0x2000f7e4
 80036e0:	2000f650 	.word	0x2000f650
 80036e4:	2000f7d0 	.word	0x2000f7d0
 80036e8:	2000f820 	.word	0x2000f820
 80036ec:	080031e9 	.word	0x080031e9
 80036f0:	2000f690 	.word	0x2000f690
 80036f4:	2000f648 	.word	0x2000f648

080036f8 <vFastBlinkOnError>:
	Output params:      n/a

	Extra:

*************************************************************************/
void vFastBlinkOnError(){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	for(int i=0;i<50;i++){
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	e00a      	b.n	800371a <vFastBlinkOnError+0x22>
		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8003704:	2120      	movs	r1, #32
 8003706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800370a:	f001 fb2f 	bl	8004d6c <HAL_GPIO_TogglePin>
		osDelay(100);
 800370e:	2064      	movs	r0, #100	@ 0x64
 8003710:	f006 fecd 	bl	800a4ae <osDelay>
	for(int i=0;i<50;i++){
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3301      	adds	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b31      	cmp	r3, #49	@ 0x31
 800371e:	ddf1      	ble.n	8003704 <vFastBlinkOnError+0xc>
	}
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <HAL_MspInit+0x50>)
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	4a11      	ldr	r2, [pc, #68]	@ (800377c <HAL_MspInit+0x50>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6613      	str	r3, [r2, #96]	@ 0x60
 800373e:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <HAL_MspInit+0x50>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <HAL_MspInit+0x50>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	4a0b      	ldr	r2, [pc, #44]	@ (800377c <HAL_MspInit+0x50>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003754:	6593      	str	r3, [r2, #88]	@ 0x58
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_MspInit+0x50>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	210f      	movs	r1, #15
 8003766:	f06f 0001 	mvn.w	r0, #1
 800376a:	f000 fdff 	bl	800436c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800376e:	f002 fa01 	bl	8005b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	@ 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003790:	4b2c      	ldr	r3, [pc, #176]	@ (8003844 <HAL_InitTick+0xc4>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	4a2b      	ldr	r2, [pc, #172]	@ (8003844 <HAL_InitTick+0xc4>)
 8003796:	f043 0310 	orr.w	r3, r3, #16
 800379a:	6593      	str	r3, [r2, #88]	@ 0x58
 800379c:	4b29      	ldr	r3, [pc, #164]	@ (8003844 <HAL_InitTick+0xc4>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037a8:	f107 020c 	add.w	r2, r7, #12
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 fed6 	bl	8006564 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037b8:	f002 fea8 	bl	800650c <HAL_RCC_GetPCLK1Freq>
 80037bc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_InitTick+0xc8>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0c9b      	lsrs	r3, r3, #18
 80037c8:	3b01      	subs	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037cc:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <HAL_InitTick+0xcc>)
 80037ce:	4a20      	ldr	r2, [pc, #128]	@ (8003850 <HAL_InitTick+0xd0>)
 80037d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_InitTick+0xcc>)
 80037d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037da:	4a1c      	ldr	r2, [pc, #112]	@ (800384c <HAL_InitTick+0xcc>)
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_InitTick+0xcc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e6:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_InitTick+0xcc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80037ec:	4817      	ldr	r0, [pc, #92]	@ (800384c <HAL_InitTick+0xcc>)
 80037ee:	f003 f97f 	bl	8006af0 <HAL_TIM_Base_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80037f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11b      	bne.n	8003838 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003800:	4812      	ldr	r0, [pc, #72]	@ (800384c <HAL_InitTick+0xcc>)
 8003802:	f003 fa3d 	bl	8006c80 <HAL_TIM_Base_Start_IT>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800380c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003814:	2036      	movs	r0, #54	@ 0x36
 8003816:	f000 fdc3 	bl	80043a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d808      	bhi.n	8003832 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003820:	2200      	movs	r2, #0
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	2036      	movs	r0, #54	@ 0x36
 8003826:	f000 fda1 	bl	800436c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800382a:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <HAL_InitTick+0xd4>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e002      	b.n	8003838 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800383c:	4618      	mov	r0, r3
 800383e:	3730      	adds	r7, #48	@ 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	431bde83 	.word	0x431bde83
 800384c:	2000f8b4 	.word	0x2000f8b4
 8003850:	40001000 	.word	0x40001000
 8003854:	20000020 	.word	0x20000020

08003858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800385c:	bf00      	nop
 800385e:	e7fd      	b.n	800385c <NMI_Handler+0x4>

08003860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <HardFault_Handler+0x4>

08003868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <MemManage_Handler+0x4>

08003870 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003874:	bf00      	nop
 8003876:	e7fd      	b.n	8003874 <BusFault_Handler+0x4>

08003878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <UsageFault_Handler+0x4>

08003880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003894:	4802      	ldr	r0, [pc, #8]	@ (80038a0 <DMA1_Channel1_IRQHandler+0x10>)
 8003896:	f000 ff74 	bl	8004782 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000fba4 	.word	0x2000fba4

080038a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80038a8:	4802      	ldr	r0, [pc, #8]	@ (80038b4 <DMA1_Channel2_IRQHandler+0x10>)
 80038aa:	f000 ff6a 	bl	8004782 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000fc04 	.word	0x2000fc04

080038b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80038bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80038c0:	f001 fa6e 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80038cc:	4802      	ldr	r0, [pc, #8]	@ (80038d8 <UART5_IRQHandler+0x10>)
 80038ce:	f004 f995 	bl	8007bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	2000fa7c 	.word	0x2000fa7c

080038dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038e0:	4802      	ldr	r0, [pc, #8]	@ (80038ec <TIM6_DAC_IRQHandler+0x10>)
 80038e2:	f003 fa45 	bl	8006d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000f8b4 	.word	0x2000f8b4

080038f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80038f4:	4802      	ldr	r0, [pc, #8]	@ (8003900 <LPUART1_IRQHandler+0x10>)
 80038f6:	f004 f981 	bl	8007bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000f954 	.word	0x2000f954

08003904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_kill>:

int _kill(int pid, int sig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800391e:	f01a fd13 	bl	801e348 <__errno>
 8003922:	4603      	mov	r3, r0
 8003924:	2216      	movs	r2, #22
 8003926:	601a      	str	r2, [r3, #0]
  return -1;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_exit>:

void _exit (int status)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800393c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe7 	bl	8003914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003946:	bf00      	nop
 8003948:	e7fd      	b.n	8003946 <_exit+0x12>

0800394a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	e00a      	b.n	8003972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800395c:	f3af 8000 	nop.w
 8003960:	4601      	mov	r1, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	60ba      	str	r2, [r7, #8]
 8003968:	b2ca      	uxtb	r2, r1
 800396a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	dbf0      	blt.n	800395c <_read+0x12>
  }

  return len;
 800397a:	687b      	ldr	r3, [r7, #4]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039ac:	605a      	str	r2, [r3, #4]
  return 0;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_isatty>:

int _isatty(int file)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f4:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <_sbrk+0x5c>)
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <_sbrk+0x60>)
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a00:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <_sbrk+0x64>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a08:	4b11      	ldr	r3, [pc, #68]	@ (8003a50 <_sbrk+0x64>)
 8003a0a:	4a12      	ldr	r2, [pc, #72]	@ (8003a54 <_sbrk+0x68>)
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a0e:	4b10      	ldr	r3, [pc, #64]	@ (8003a50 <_sbrk+0x64>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d207      	bcs.n	8003a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a1c:	f01a fc94 	bl	801e348 <__errno>
 8003a20:	4603      	mov	r3, r0
 8003a22:	220c      	movs	r2, #12
 8003a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a2a:	e009      	b.n	8003a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a2c:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <_sbrk+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a32:	4b07      	ldr	r3, [pc, #28]	@ (8003a50 <_sbrk+0x64>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	4a05      	ldr	r2, [pc, #20]	@ (8003a50 <_sbrk+0x64>)
 8003a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20020000 	.word	0x20020000
 8003a4c:	00000400 	.word	0x00000400
 8003a50:	2000f904 	.word	0x2000f904
 8003a54:	2001f928 	.word	0x2001f928

08003a58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <SystemInit+0x20>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a62:	4a05      	ldr	r2, [pc, #20]	@ (8003a78 <SystemInit+0x20>)
 8003a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a82:	f107 0310 	add.w	r3, r7, #16
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a9a:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003a9c:	4a20      	ldr	r2, [pc, #128]	@ (8003b20 <MX_TIM1_Init+0xa4>)
 8003a9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ab2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003aba:	4b18      	ldr	r3, [pc, #96]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ac0:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ac6:	4815      	ldr	r0, [pc, #84]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003ac8:	f003 f812 	bl	8006af0 <HAL_TIM_Base_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003ad2:	f7ff f955 	bl	8002d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003adc:	f107 0310 	add.w	r3, r7, #16
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	480e      	ldr	r0, [pc, #56]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003ae4:	f003 fa94 	bl	8007010 <HAL_TIM_ConfigClockSource>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003aee:	f7ff f947 	bl	8002d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4806      	ldr	r0, [pc, #24]	@ (8003b1c <MX_TIM1_Init+0xa0>)
 8003b04:	f003 fd12 	bl	800752c <HAL_TIMEx_MasterConfigSynchronization>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003b0e:	f7ff f937 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003b12:	bf00      	nop
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	2000f908 	.word	0x2000f908
 8003b20:	40012c00 	.word	0x40012c00

08003b24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <HAL_TIM_Base_MspInit+0x38>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10b      	bne.n	8003b4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b36:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_TIM_Base_MspInit+0x3c>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <HAL_TIM_Base_MspInit+0x3c>)
 8003b3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_TIM_Base_MspInit+0x3c>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40021000 	.word	0x40021000

08003b64 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003b68:	4b21      	ldr	r3, [pc, #132]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b6a:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <MX_LPUART1_UART_Init+0x90>)
 8003b6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003b6e:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003b82:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b8e:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b94:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ba0:	4b13      	ldr	r3, [pc, #76]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003ba6:	4812      	ldr	r0, [pc, #72]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003ba8:	f003 fd9c 	bl	80076e4 <HAL_UART_Init>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bb2:	f7ff f8e5 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	480d      	ldr	r0, [pc, #52]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003bba:	f006 f9be 	bl	8009f3a <HAL_UARTEx_SetTxFifoThreshold>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003bc4:	f7ff f8dc 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4809      	ldr	r0, [pc, #36]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003bcc:	f006 f9f3 	bl	8009fb6 <HAL_UARTEx_SetRxFifoThreshold>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003bd6:	f7ff f8d3 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <MX_LPUART1_UART_Init+0x8c>)
 8003bdc:	f006 f974 	bl	8009ec8 <HAL_UARTEx_DisableFifoMode>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003be6:	f7ff f8cb 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000f954 	.word	0x2000f954
 8003bf4:	40008000 	.word	0x40008000

08003bf8 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003bfc:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003bfe:	4a23      	ldr	r2, [pc, #140]	@ (8003c8c <MX_UART4_Init+0x94>)
 8003c00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003c02:	4b21      	ldr	r3, [pc, #132]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003c08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c16:	4b1c      	ldr	r3, [pc, #112]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c1e:	220c      	movs	r2, #12
 8003c20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c22:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c2e:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c40:	4811      	ldr	r0, [pc, #68]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c42:	f003 fd4f 	bl	80076e4 <HAL_UART_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003c4c:	f7ff f898 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c54:	f006 f971 	bl	8009f3a <HAL_UARTEx_SetTxFifoThreshold>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003c5e:	f7ff f88f 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c62:	2100      	movs	r1, #0
 8003c64:	4808      	ldr	r0, [pc, #32]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c66:	f006 f9a6 	bl	8009fb6 <HAL_UARTEx_SetRxFifoThreshold>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003c70:	f7ff f886 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003c74:	4804      	ldr	r0, [pc, #16]	@ (8003c88 <MX_UART4_Init+0x90>)
 8003c76:	f006 f927 	bl	8009ec8 <HAL_UARTEx_DisableFifoMode>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003c80:	f7ff f87e 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	2000f9e8 	.word	0x2000f9e8
 8003c8c:	40004c00 	.word	0x40004c00

08003c90 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003c94:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003c96:	4a23      	ldr	r2, [pc, #140]	@ (8003d24 <MX_UART5_Init+0x94>)
 8003c98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003c9a:	4b21      	ldr	r3, [pc, #132]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003c9c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ca0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003cae:	4b1c      	ldr	r3, [pc, #112]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cba:	4b19      	ldr	r3, [pc, #100]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cc0:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cc6:	4b16      	ldr	r3, [pc, #88]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ccc:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cd2:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003cd8:	4811      	ldr	r0, [pc, #68]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cda:	f003 fd03 	bl	80076e4 <HAL_UART_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003ce4:	f7ff f84c 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ce8:	2100      	movs	r1, #0
 8003cea:	480d      	ldr	r0, [pc, #52]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cec:	f006 f925 	bl	8009f3a <HAL_UARTEx_SetTxFifoThreshold>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003cf6:	f7ff f843 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4808      	ldr	r0, [pc, #32]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003cfe:	f006 f95a 	bl	8009fb6 <HAL_UARTEx_SetRxFifoThreshold>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003d08:	f7ff f83a 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003d0c:	4804      	ldr	r0, [pc, #16]	@ (8003d20 <MX_UART5_Init+0x90>)
 8003d0e:	f006 f8db 	bl	8009ec8 <HAL_UARTEx_DisableFifoMode>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003d18:	f7ff f832 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2000fa7c 	.word	0x2000fa7c
 8003d24:	40005000 	.word	0x40005000

08003d28 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d2c:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d2e:	4a23      	ldr	r2, [pc, #140]	@ (8003dbc <MX_USART3_UART_Init+0x94>)
 8003d30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d32:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d46:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d4e:	220c      	movs	r2, #12
 8003d50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d58:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d64:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d6a:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d70:	4811      	ldr	r0, [pc, #68]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d72:	f003 fcb7 	bl	80076e4 <HAL_UART_Init>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003d7c:	f7ff f800 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d80:	2100      	movs	r1, #0
 8003d82:	480d      	ldr	r0, [pc, #52]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d84:	f006 f8d9 	bl	8009f3a <HAL_UARTEx_SetTxFifoThreshold>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003d8e:	f7fe fff7 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d92:	2100      	movs	r1, #0
 8003d94:	4808      	ldr	r0, [pc, #32]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003d96:	f006 f90e 	bl	8009fb6 <HAL_UARTEx_SetRxFifoThreshold>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003da0:	f7fe ffee 	bl	8002d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003da4:	4804      	ldr	r0, [pc, #16]	@ (8003db8 <MX_USART3_UART_Init+0x90>)
 8003da6:	f006 f88f 	bl	8009ec8 <HAL_UARTEx_DisableFifoMode>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003db0:	f7fe ffe6 	bl	8002d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	2000fb10 	.word	0x2000fb10
 8003dbc:	40004800 	.word	0x40004800

08003dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0a6      	sub	sp, #152	@ 0x98
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ddc:	2254      	movs	r2, #84	@ 0x54
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f01a f9b5 	bl	801e150 <memset>
  if(uartHandle->Instance==LPUART1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4aa4      	ldr	r2, [pc, #656]	@ (800407c <HAL_UART_MspInit+0x2bc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f040 8098 	bne.w	8003f22 <HAL_UART_MspInit+0x162>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003df2:	2320      	movs	r3, #32
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003df6:	2300      	movs	r3, #0
 8003df8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f002 fc28 	bl	8006654 <HAL_RCCEx_PeriphCLKConfig>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e0a:	f7fe ffb9 	bl	8002d80 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003e0e:	4b9c      	ldr	r3, [pc, #624]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	4a9b      	ldr	r2, [pc, #620]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003e1a:	4b99      	ldr	r3, [pc, #612]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	4b96      	ldr	r3, [pc, #600]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2a:	4a95      	ldr	r2, [pc, #596]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e32:	4b93      	ldr	r3, [pc, #588]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003e3e:	230c      	movs	r3, #12
 8003e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003e56:	230c      	movs	r3, #12
 8003e58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003e60:	4619      	mov	r1, r3
 8003e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e66:	f000 fde7 	bl	8004a38 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003e6a:	4b86      	ldr	r3, [pc, #536]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e6c:	4a86      	ldr	r2, [pc, #536]	@ (8004088 <HAL_UART_MspInit+0x2c8>)
 8003e6e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003e70:	4b84      	ldr	r3, [pc, #528]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e72:	2222      	movs	r2, #34	@ 0x22
 8003e74:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e76:	4b83      	ldr	r3, [pc, #524]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7c:	4b81      	ldr	r3, [pc, #516]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e82:	4b80      	ldr	r3, [pc, #512]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e84:	2280      	movs	r2, #128	@ 0x80
 8003e86:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e88:	4b7e      	ldr	r3, [pc, #504]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e94:	4b7b      	ldr	r3, [pc, #492]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e96:	2220      	movs	r2, #32
 8003e98:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003ea0:	4878      	ldr	r0, [pc, #480]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003ea2:	f000 fa8b 	bl	80043bc <HAL_DMA_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003eac:	f7fe ff68 	bl	8002d80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a74      	ldr	r2, [pc, #464]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003eb8:	4a72      	ldr	r2, [pc, #456]	@ (8004084 <HAL_UART_MspInit+0x2c4>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003ebe:	4b73      	ldr	r3, [pc, #460]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ec0:	4a73      	ldr	r2, [pc, #460]	@ (8004090 <HAL_UART_MspInit+0x2d0>)
 8003ec2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003ec4:	4b71      	ldr	r3, [pc, #452]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ec6:	2223      	movs	r2, #35	@ 0x23
 8003ec8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eca:	4b70      	ldr	r3, [pc, #448]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ecc:	2210      	movs	r2, #16
 8003ece:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ed8:	2280      	movs	r2, #128	@ 0x80
 8003eda:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003edc:	4b6b      	ldr	r3, [pc, #428]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003ee8:	4b68      	ldr	r3, [pc, #416]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003eee:	4b67      	ldr	r3, [pc, #412]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003ef4:	4865      	ldr	r0, [pc, #404]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003ef6:	f000 fa61 	bl	80043bc <HAL_DMA_Init>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8003f00:	f7fe ff3e 	bl	8002d80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a61      	ldr	r2, [pc, #388]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003f08:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f0a:	4a60      	ldr	r2, [pc, #384]	@ (800408c <HAL_UART_MspInit+0x2cc>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003f10:	2200      	movs	r2, #0
 8003f12:	2105      	movs	r1, #5
 8003f14:	205b      	movs	r0, #91	@ 0x5b
 8003f16:	f000 fa29 	bl	800436c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003f1a:	205b      	movs	r0, #91	@ 0x5b
 8003f1c:	f000 fa40 	bl	80043a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003f20:	e101      	b.n	8004126 <HAL_UART_MspInit+0x366>
  else if(uartHandle->Instance==UART4)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5b      	ldr	r2, [pc, #364]	@ (8004094 <HAL_UART_MspInit+0x2d4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d13c      	bne.n	8003fa6 <HAL_UART_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003f30:	2300      	movs	r3, #0
 8003f32:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f002 fb8b 	bl	8006654 <HAL_RCCEx_PeriphCLKConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8003f44:	f7fe ff1c 	bl	8002d80 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f48:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003f4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f54:	4b4a      	ldr	r3, [pc, #296]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f60:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f64:	4a46      	ldr	r2, [pc, #280]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003f66:	f043 0304 	orr.w	r3, r3, #4
 8003f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f6c:	4b44      	ldr	r3, [pc, #272]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003f92:	2305      	movs	r3, #5
 8003f94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f98:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	483e      	ldr	r0, [pc, #248]	@ (8004098 <HAL_UART_MspInit+0x2d8>)
 8003fa0:	f000 fd4a 	bl	8004a38 <HAL_GPIO_Init>
}
 8003fa4:	e0bf      	b.n	8004126 <HAL_UART_MspInit+0x366>
  else if(uartHandle->Instance==UART5)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <HAL_UART_MspInit+0x2dc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d179      	bne.n	80040a4 <HAL_UART_MspInit+0x2e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fb49 	bl	8006654 <HAL_RCCEx_PeriphCLKConfig>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8003fc8:	f7fe feda 	bl	8002d80 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd8:	4b29      	ldr	r3, [pc, #164]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe4:	4b26      	ldr	r3, [pc, #152]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe8:	4a25      	ldr	r2, [pc, #148]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ff0:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ffc:	4b20      	ldr	r3, [pc, #128]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004000:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004008:	4b1d      	ldr	r3, [pc, #116]	@ (8004080 <HAL_UART_MspInit+0x2c0>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin;
 8004014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800402e:	2305      	movs	r3, #5
 8004030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8004034:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004038:	4619      	mov	r1, r3
 800403a:	4817      	ldr	r0, [pc, #92]	@ (8004098 <HAL_UART_MspInit+0x2d8>)
 800403c:	f000 fcfc 	bl	8004a38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin;
 8004040:	2304      	movs	r3, #4
 8004042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004058:	2305      	movs	r3, #5
 800405a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 800405e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004062:	4619      	mov	r1, r3
 8004064:	480e      	ldr	r0, [pc, #56]	@ (80040a0 <HAL_UART_MspInit+0x2e0>)
 8004066:	f000 fce7 	bl	8004a38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	2105      	movs	r1, #5
 800406e:	2035      	movs	r0, #53	@ 0x35
 8004070:	f000 f97c 	bl	800436c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004074:	2035      	movs	r0, #53	@ 0x35
 8004076:	f000 f993 	bl	80043a0 <HAL_NVIC_EnableIRQ>
}
 800407a:	e054      	b.n	8004126 <HAL_UART_MspInit+0x366>
 800407c:	40008000 	.word	0x40008000
 8004080:	40021000 	.word	0x40021000
 8004084:	2000fba4 	.word	0x2000fba4
 8004088:	40020008 	.word	0x40020008
 800408c:	2000fc04 	.word	0x2000fc04
 8004090:	4002001c 	.word	0x4002001c
 8004094:	40004c00 	.word	0x40004c00
 8004098:	48000800 	.word	0x48000800
 800409c:	40005000 	.word	0x40005000
 80040a0:	48000c00 	.word	0x48000c00
  else if(uartHandle->Instance==USART3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a21      	ldr	r2, [pc, #132]	@ (8004130 <HAL_UART_MspInit+0x370>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d13b      	bne.n	8004126 <HAL_UART_MspInit+0x366>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040ae:	2304      	movs	r3, #4
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80040b2:	2300      	movs	r3, #0
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80040ba:	4618      	mov	r0, r3
 80040bc:	f002 faca 	bl	8006654 <HAL_RCCEx_PeriphCLKConfig>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_UART_MspInit+0x30a>
      Error_Handler();
 80040c6:	f7fe fe5b 	bl	8002d80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004134 <HAL_UART_MspInit+0x374>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ce:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_UART_MspInit+0x374>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d6:	4b17      	ldr	r3, [pc, #92]	@ (8004134 <HAL_UART_MspInit+0x374>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e2:	4b14      	ldr	r3, [pc, #80]	@ (8004134 <HAL_UART_MspInit+0x374>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e6:	4a13      	ldr	r2, [pc, #76]	@ (8004134 <HAL_UART_MspInit+0x374>)
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040ee:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_UART_MspInit+0x374>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 80040fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	2302      	movs	r3, #2
 8004104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004114:	2307      	movs	r3, #7
 8004116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800411e:	4619      	mov	r1, r3
 8004120:	4805      	ldr	r0, [pc, #20]	@ (8004138 <HAL_UART_MspInit+0x378>)
 8004122:	f000 fc89 	bl	8004a38 <HAL_GPIO_Init>
}
 8004126:	bf00      	nop
 8004128:	3798      	adds	r7, #152	@ 0x98
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40004800 	.word	0x40004800
 8004134:	40021000 	.word	0x40021000
 8004138:	48000400 	.word	0x48000400

0800413c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800413c:	480d      	ldr	r0, [pc, #52]	@ (8004174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800413e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004140:	f7ff fc8a 	bl	8003a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004144:	480c      	ldr	r0, [pc, #48]	@ (8004178 <LoopForever+0x6>)
  ldr r1, =_edata
 8004146:	490d      	ldr	r1, [pc, #52]	@ (800417c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004148:	4a0d      	ldr	r2, [pc, #52]	@ (8004180 <LoopForever+0xe>)
  movs r3, #0
 800414a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800414c:	e002      	b.n	8004154 <LoopCopyDataInit>

0800414e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800414e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004152:	3304      	adds	r3, #4

08004154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004158:	d3f9      	bcc.n	800414e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800415a:	4a0a      	ldr	r2, [pc, #40]	@ (8004184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800415c:	4c0a      	ldr	r4, [pc, #40]	@ (8004188 <LoopForever+0x16>)
  movs r3, #0
 800415e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004160:	e001      	b.n	8004166 <LoopFillZerobss>

08004162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004164:	3204      	adds	r2, #4

08004166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004168:	d3fb      	bcc.n	8004162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800416a:	f01a f8f3 	bl	801e354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800416e:	f7fe fd8b 	bl	8002c88 <main>

08004172 <LoopForever>:

LoopForever:
    b LoopForever
 8004172:	e7fe      	b.n	8004172 <LoopForever>
  ldr   r0, =_estack
 8004174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800417c:	20001c58 	.word	0x20001c58
  ldr r2, =_sidata
 8004180:	08021d98 	.word	0x08021d98
  ldr r2, =_sbss
 8004184:	20001c58 	.word	0x20001c58
  ldr r4, =_ebss
 8004188:	2001f928 	.word	0x2001f928

0800418c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800418c:	e7fe      	b.n	800418c <ADC1_2_IRQHandler>

0800418e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004198:	2003      	movs	r0, #3
 800419a:	f000 f8dc 	bl	8004356 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800419e:	200f      	movs	r0, #15
 80041a0:	f7ff faee 	bl	8003780 <HAL_InitTick>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	71fb      	strb	r3, [r7, #7]
 80041ae:	e001      	b.n	80041b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041b0:	f7ff fabc 	bl	800372c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041b4:	79fb      	ldrb	r3, [r7, #7]

}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <HAL_IncTick+0x1c>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_IncTick+0x20>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	4a03      	ldr	r2, [pc, #12]	@ (80041dc <HAL_IncTick+0x1c>)
 80041d0:	6013      	str	r3, [r2, #0]
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	2000fc64 	.word	0x2000fc64
 80041e0:	20000024 	.word	0x20000024

080041e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return uwTick;
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_GetTick+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000fc64 	.word	0x2000fc64

080041fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800420c:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800422c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800422e:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	60d3      	str	r3, [r2, #12]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <__NVIC_GetPriorityGrouping+0x18>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 0307 	and.w	r3, r3, #7
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db0b      	blt.n	800428a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4907      	ldr	r1, [pc, #28]	@ (8004298 <__NVIC_EnableIRQ+0x38>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2001      	movs	r0, #1
 8004282:	fa00 f202 	lsl.w	r2, r0, r2
 8004286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000e100 	.word	0xe000e100

0800429c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	db0a      	blt.n	80042c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	490c      	ldr	r1, [pc, #48]	@ (80042e8 <__NVIC_SetPriority+0x4c>)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	440b      	add	r3, r1
 80042c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c4:	e00a      	b.n	80042dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4908      	ldr	r1, [pc, #32]	@ (80042ec <__NVIC_SetPriority+0x50>)
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	3b04      	subs	r3, #4
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	440b      	add	r3, r1
 80042da:	761a      	strb	r2, [r3, #24]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000e100 	.word	0xe000e100
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	@ 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f1c3 0307 	rsb	r3, r3, #7
 800430a:	2b04      	cmp	r3, #4
 800430c:	bf28      	it	cs
 800430e:	2304      	movcs	r3, #4
 8004310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3304      	adds	r3, #4
 8004316:	2b06      	cmp	r3, #6
 8004318:	d902      	bls.n	8004320 <NVIC_EncodePriority+0x30>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3b03      	subs	r3, #3
 800431e:	e000      	b.n	8004322 <NVIC_EncodePriority+0x32>
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	401a      	ands	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004338:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43d9      	mvns	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	4313      	orrs	r3, r2
         );
}
 800434a:	4618      	mov	r0, r3
 800434c:	3724      	adds	r7, #36	@ 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ff4c 	bl	80041fc <__NVIC_SetPriorityGrouping>
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800437a:	f7ff ff63 	bl	8004244 <__NVIC_GetPriorityGrouping>
 800437e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	6978      	ldr	r0, [r7, #20]
 8004386:	f7ff ffb3 	bl	80042f0 <NVIC_EncodePriority>
 800438a:	4602      	mov	r2, r0
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff82 	bl	800429c <__NVIC_SetPriority>
}
 8004398:	bf00      	nop
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff56 	bl	8004260 <__NVIC_EnableIRQ>
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e08d      	b.n	80044ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b47      	ldr	r3, [pc, #284]	@ (80044f4 <HAL_DMA_Init+0x138>)
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d80f      	bhi.n	80043fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	4b45      	ldr	r3, [pc, #276]	@ (80044f8 <HAL_DMA_Init+0x13c>)
 80043e2:	4413      	add	r3, r2
 80043e4:	4a45      	ldr	r2, [pc, #276]	@ (80044fc <HAL_DMA_Init+0x140>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	009a      	lsls	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a42      	ldr	r2, [pc, #264]	@ (8004500 <HAL_DMA_Init+0x144>)
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80043f8:	e00e      	b.n	8004418 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	4b40      	ldr	r3, [pc, #256]	@ (8004504 <HAL_DMA_Init+0x148>)
 8004402:	4413      	add	r3, r2
 8004404:	4a3d      	ldr	r2, [pc, #244]	@ (80044fc <HAL_DMA_Init+0x140>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	009a      	lsls	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a3c      	ldr	r2, [pc, #240]	@ (8004508 <HAL_DMA_Init+0x14c>)
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800443c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa82 	bl	8004974 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004478:	d102      	bne.n	8004480 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004494:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d010      	beq.n	80044c0 <HAL_DMA_Init+0x104>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d80c      	bhi.n	80044c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 faa2 	bl	80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	e008      	b.n	80044d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40020407 	.word	0x40020407
 80044f8:	bffdfff8 	.word	0xbffdfff8
 80044fc:	cccccccd 	.word	0xcccccccd
 8004500:	40020000 	.word	0x40020000
 8004504:	bffdfbf8 	.word	0xbffdfbf8
 8004508:	40020400 	.word	0x40020400

0800450c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_DMA_Start_IT+0x20>
 8004528:	2302      	movs	r3, #2
 800452a:	e066      	b.n	80045fa <HAL_DMA_Start_IT+0xee>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d155      	bne.n	80045ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f9c7 	bl	80048f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 020e 	orr.w	r2, r2, #14
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e00f      	b.n	80045a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0204 	bic.w	r2, r2, #4
 8004592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 020a 	orr.w	r2, r2, #10
 80045a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e005      	b.n	80045f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
 80045f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d005      	beq.n	8004626 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2204      	movs	r2, #4
 800461e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e037      	b.n	8004696 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 020e 	bic.w	r2, r2, #14
 8004634:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004644:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f003 021f 	and.w	r2, r3, #31
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004672:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004686:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800468a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004694:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d00d      	beq.n	80046e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2204      	movs	r2, #4
 80046d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
 80046e6:	e047      	b.n	8004778 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 020e 	bic.w	r2, r2, #14
 80046f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004712:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	2101      	movs	r1, #1
 8004726:	fa01 f202 	lsl.w	r2, r1, r2
 800472a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004734:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800474c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004756:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
    }
  }
  return status;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	2204      	movs	r2, #4
 80047a4:	409a      	lsls	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d026      	beq.n	80047fc <HAL_DMA_IRQHandler+0x7a>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d021      	beq.n	80047fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0204 	bic.w	r2, r2, #4
 80047d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	f003 021f 	and.w	r2, r3, #31
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	2104      	movs	r1, #4
 80047e4:	fa01 f202 	lsl.w	r2, r1, r2
 80047e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d071      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047fa:	e06c      	b.n	80048d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2202      	movs	r2, #2
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02e      	beq.n	800486e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d029      	beq.n	800486e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 020a 	bic.w	r2, r2, #10
 8004836:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	2102      	movs	r1, #2
 800484e:	fa01 f202 	lsl.w	r2, r1, r2
 8004852:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d038      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800486c:	e033      	b.n	80048d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	2208      	movs	r2, #8
 8004878:	409a      	lsls	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02a      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d025      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 020e 	bic.w	r2, r2, #14
 800489a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	2101      	movs	r1, #1
 80048aa:	fa01 f202 	lsl.w	r2, r1, r2
 80048ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
}
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800490e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	f003 021f 	and.w	r2, r3, #31
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	2101      	movs	r1, #1
 8004930:	fa01 f202 	lsl.w	r2, r1, r2
 8004934:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d108      	bne.n	8004958 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004956:	e007      	b.n	8004968 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	4b16      	ldr	r3, [pc, #88]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d802      	bhi.n	800498e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e001      	b.n	8004992 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800498e:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004990:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3b08      	subs	r3, #8
 800499e:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a0b      	ldr	r2, [pc, #44]	@ (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	409a      	lsls	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40020407 	.word	0x40020407
 80049e0:	40020800 	.word	0x40020800
 80049e4:	40020820 	.word	0x40020820
 80049e8:	cccccccd 	.word	0xcccccccd
 80049ec:	40020880 	.word	0x40020880

080049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a08      	ldr	r2, [pc, #32]	@ (8004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	1000823f 	.word	0x1000823f
 8004a34:	40020940 	.word	0x40020940

08004a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a46:	e15a      	b.n	8004cfe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	4013      	ands	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 814c 	beq.w	8004cf8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d005      	beq.n	8004a78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d130      	bne.n	8004ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2203      	movs	r2, #3
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aae:	2201      	movs	r2, #1
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0201 	and.w	r2, r3, #1
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d017      	beq.n	8004b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	2203      	movs	r2, #3
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d123      	bne.n	8004b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	08da      	lsrs	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	08da      	lsrs	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3208      	adds	r2, #8
 8004b64:	6939      	ldr	r1, [r7, #16]
 8004b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2203      	movs	r2, #3
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a6 	beq.w	8004cf8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bac:	4b5b      	ldr	r3, [pc, #364]	@ (8004d1c <HAL_GPIO_Init+0x2e4>)
 8004bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d1c <HAL_GPIO_Init+0x2e4>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bb8:	4b58      	ldr	r3, [pc, #352]	@ (8004d1c <HAL_GPIO_Init+0x2e4>)
 8004bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bc4:	4a56      	ldr	r2, [pc, #344]	@ (8004d20 <HAL_GPIO_Init+0x2e8>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	220f      	movs	r2, #15
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bee:	d01f      	beq.n	8004c30 <HAL_GPIO_Init+0x1f8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8004d24 <HAL_GPIO_Init+0x2ec>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d019      	beq.n	8004c2c <HAL_GPIO_Init+0x1f4>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8004d28 <HAL_GPIO_Init+0x2f0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_GPIO_Init+0x1f0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a4a      	ldr	r2, [pc, #296]	@ (8004d2c <HAL_GPIO_Init+0x2f4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00d      	beq.n	8004c24 <HAL_GPIO_Init+0x1ec>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a49      	ldr	r2, [pc, #292]	@ (8004d30 <HAL_GPIO_Init+0x2f8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <HAL_GPIO_Init+0x1e8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a48      	ldr	r2, [pc, #288]	@ (8004d34 <HAL_GPIO_Init+0x2fc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <HAL_GPIO_Init+0x1e4>
 8004c18:	2305      	movs	r3, #5
 8004c1a:	e00a      	b.n	8004c32 <HAL_GPIO_Init+0x1fa>
 8004c1c:	2306      	movs	r3, #6
 8004c1e:	e008      	b.n	8004c32 <HAL_GPIO_Init+0x1fa>
 8004c20:	2304      	movs	r3, #4
 8004c22:	e006      	b.n	8004c32 <HAL_GPIO_Init+0x1fa>
 8004c24:	2303      	movs	r3, #3
 8004c26:	e004      	b.n	8004c32 <HAL_GPIO_Init+0x1fa>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e002      	b.n	8004c32 <HAL_GPIO_Init+0x1fa>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_GPIO_Init+0x1fa>
 8004c30:	2300      	movs	r3, #0
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	f002 0203 	and.w	r2, r2, #3
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	4093      	lsls	r3, r2
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c42:	4937      	ldr	r1, [pc, #220]	@ (8004d20 <HAL_GPIO_Init+0x2e8>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c50:	4b39      	ldr	r3, [pc, #228]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c74:	4a30      	ldr	r2, [pc, #192]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c9e:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ca4:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cce:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cf2:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <HAL_GPIO_Init+0x300>)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f ae9d 	bne.w	8004a48 <HAL_GPIO_Init+0x10>
  }
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40010000 	.word	0x40010000
 8004d24:	48000400 	.word	0x48000400
 8004d28:	48000800 	.word	0x48000800
 8004d2c:	48000c00 	.word	0x48000c00
 8004d30:	48001000 	.word	0x48001000
 8004d34:	48001400 	.word	0x48001400
 8004d38:	40010400 	.word	0x40010400

08004d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	807b      	strh	r3, [r7, #2]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d4c:	787b      	ldrb	r3, [r7, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d58:	e002      	b.n	8004d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4013      	ands	r3, r2
 8004d84:	041a      	lsls	r2, r3, #16
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	43d9      	mvns	r1, r3
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004daa:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004db6:	4a05      	ldr	r2, [pc, #20]	@ (8004dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f806 	bl	8004dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e08d      	b.n	8004f14 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fd fee3 	bl	8002bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2224      	movs	r2, #36	@ 0x24
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e5c:	609a      	str	r2, [r3, #8]
 8004e5e:	e006      	b.n	8004e6e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d108      	bne.n	8004e88 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	e007      	b.n	8004e98 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eaa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69d9      	ldr	r1, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	4608      	mov	r0, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	817b      	strh	r3, [r7, #10]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	813b      	strh	r3, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	f040 80f9 	bne.w	8005136 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x34>
 8004f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0ed      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_I2C_Mem_Write+0x4e>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e0e6      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f72:	f7ff f937 	bl	80041e4 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2319      	movs	r3, #25
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fac3 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0d1      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2221      	movs	r2, #33	@ 0x21
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2240      	movs	r2, #64	@ 0x40
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fbc:	88f8      	ldrh	r0, [r7, #6]
 8004fbe:	893a      	ldrh	r2, [r7, #8]
 8004fc0:	8979      	ldrh	r1, [r7, #10]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	4603      	mov	r3, r0
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f9d3 	bl	8005378 <I2C_RequestMemoryWrite>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0a9      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2bff      	cmp	r3, #255	@ 0xff
 8004fec:	d90e      	bls.n	800500c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	22ff      	movs	r2, #255	@ 0xff
 8004ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	8979      	ldrh	r1, [r7, #10]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fc47 	bl	8005898 <I2C_TransferConfig>
 800500a:	e00f      	b.n	800502c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501a:	b2da      	uxtb	r2, r3
 800501c:	8979      	ldrh	r1, [r7, #10]
 800501e:	2300      	movs	r3, #0
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fc36 	bl	8005898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fac6 	bl	80055c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e07b      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d034      	beq.n	80050e4 <HAL_I2C_Mem_Write+0x1c8>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507e:	2b00      	cmp	r3, #0
 8005080:	d130      	bne.n	80050e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	@ 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa3f 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e04d      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2bff      	cmp	r3, #255	@ 0xff
 80050a4:	d90e      	bls.n	80050c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	22ff      	movs	r2, #255	@ 0xff
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	8979      	ldrh	r1, [r7, #10]
 80050b4:	2300      	movs	r3, #0
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fbeb 	bl	8005898 <I2C_TransferConfig>
 80050c2:	e00f      	b.n	80050e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	8979      	ldrh	r1, [r7, #10]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fbda 	bl	8005898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d19e      	bne.n	800502c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 faac 	bl	8005650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e01a      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2220      	movs	r2, #32
 8005108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <HAL_I2C_Mem_Write+0x224>)
 8005116:	400b      	ands	r3, r1
 8005118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	e000      	b.n	8005138 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	fe00e800 	.word	0xfe00e800

08005144 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4603      	mov	r3, r0
 8005154:	817b      	strh	r3, [r7, #10]
 8005156:	460b      	mov	r3, r1
 8005158:	813b      	strh	r3, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	f040 80fd 	bne.w	8005366 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_I2C_Mem_Read+0x34>
 8005172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800517e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0f1      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Mem_Read+0x4e>
 800518e:	2302      	movs	r3, #2
 8005190:	e0ea      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800519a:	f7ff f823 	bl	80041e4 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2319      	movs	r3, #25
 80051a6:	2201      	movs	r2, #1
 80051a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f9af 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0d5      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2222      	movs	r2, #34	@ 0x22
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2240      	movs	r2, #64	@ 0x40
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e4:	88f8      	ldrh	r0, [r7, #6]
 80051e6:	893a      	ldrh	r2, [r7, #8]
 80051e8:	8979      	ldrh	r1, [r7, #10]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	4603      	mov	r3, r0
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f913 	bl	8005420 <I2C_RequestMemoryRead>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0ad      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2bff      	cmp	r3, #255	@ 0xff
 8005214:	d90e      	bls.n	8005234 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22ff      	movs	r2, #255	@ 0xff
 800521a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005220:	b2da      	uxtb	r2, r3
 8005222:	8979      	ldrh	r1, [r7, #10]
 8005224:	4b52      	ldr	r3, [pc, #328]	@ (8005370 <HAL_I2C_Mem_Read+0x22c>)
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fb33 	bl	8005898 <I2C_TransferConfig>
 8005232:	e00f      	b.n	8005254 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005242:	b2da      	uxtb	r2, r3
 8005244:	8979      	ldrh	r1, [r7, #10]
 8005246:	4b4a      	ldr	r3, [pc, #296]	@ (8005370 <HAL_I2C_Mem_Read+0x22c>)
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fb22 	bl	8005898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	2200      	movs	r2, #0
 800525c:	2104      	movs	r1, #4
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f956 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e07c      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d034      	beq.n	8005314 <HAL_I2C_Mem_Read+0x1d0>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d130      	bne.n	8005314 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	2200      	movs	r2, #0
 80052ba:	2180      	movs	r1, #128	@ 0x80
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f927 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e04d      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2bff      	cmp	r3, #255	@ 0xff
 80052d4:	d90e      	bls.n	80052f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	22ff      	movs	r2, #255	@ 0xff
 80052da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	8979      	ldrh	r1, [r7, #10]
 80052e4:	2300      	movs	r3, #0
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fad3 	bl	8005898 <I2C_TransferConfig>
 80052f2:	e00f      	b.n	8005314 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005302:	b2da      	uxtb	r2, r3
 8005304:	8979      	ldrh	r1, [r7, #10]
 8005306:	2300      	movs	r3, #0
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fac2 	bl	8005898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d19a      	bne.n	8005254 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f994 	bl	8005650 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e01a      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2220      	movs	r2, #32
 8005338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_I2C_Mem_Read+0x230>)
 8005346:	400b      	ands	r3, r1
 8005348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	80002400 	.word	0x80002400
 8005374:	fe00e800 	.word	0xfe00e800

08005378 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	461a      	mov	r2, r3
 8005386:	4603      	mov	r3, r0
 8005388:	817b      	strh	r3, [r7, #10]
 800538a:	460b      	mov	r3, r1
 800538c:	813b      	strh	r3, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	b2da      	uxtb	r2, r3
 8005396:	8979      	ldrh	r1, [r7, #10]
 8005398:	4b20      	ldr	r3, [pc, #128]	@ (800541c <I2C_RequestMemoryWrite+0xa4>)
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 fa79 	bl	8005898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f909 	bl	80055c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e02c      	b.n	8005414 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80053ca:	e015      	b.n	80053f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f8ef 	bl	80055c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e012      	b.n	8005414 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2200      	movs	r2, #0
 8005400:	2180      	movs	r1, #128	@ 0x80
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f884 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	80002000 	.word	0x80002000

08005420 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4603      	mov	r3, r0
 8005430:	817b      	strh	r3, [r7, #10]
 8005432:	460b      	mov	r3, r1
 8005434:	813b      	strh	r3, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	8979      	ldrh	r1, [r7, #10]
 8005440:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <I2C_RequestMemoryRead+0xa4>)
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa26 	bl	8005898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f8b6 	bl	80055c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e02c      	b.n	80054ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d105      	bne.n	8005472 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005466:	893b      	ldrh	r3, [r7, #8]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005470:	e015      	b.n	800549e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005472:	893b      	ldrh	r3, [r7, #8]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	b29b      	uxth	r3, r3
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f89c 	bl	80055c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e012      	b.n	80054ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005494:	893b      	ldrh	r3, [r7, #8]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2140      	movs	r1, #64	@ 0x40
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f831 	bl	8005510 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	80002000 	.word	0x80002000

080054c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d103      	bne.n	80054e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d007      	beq.n	8005504 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	619a      	str	r2, [r3, #24]
  }
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005520:	e03b      	b.n	800559a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f8d6 	bl	80056d8 <I2C_IsErrorOccurred>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800553c:	d02d      	beq.n	800559a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fe fe51 	bl	80041e4 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x44>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d122      	bne.n	800559a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	429a      	cmp	r2, r3
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	429a      	cmp	r2, r3
 8005570:	d113      	bne.n	800559a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e00f      	b.n	80055ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d0b4      	beq.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055ce:	e033      	b.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f87f 	bl	80056d8 <I2C_IsErrorOccurred>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e031      	b.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055ea:	d025      	beq.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ec:	f7fe fdfa 	bl	80041e4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11a      	bne.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d013      	beq.n	8005638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e007      	b.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d1c4      	bne.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565c:	e02f      	b.n	80056be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f838 	bl	80056d8 <I2C_IsErrorOccurred>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e02d      	b.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fe fdb7 	bl	80041e4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11a      	bne.n	80056be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b20      	cmp	r3, #32
 8005694:	d013      	beq.n	80056be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e007      	b.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d1c8      	bne.n	800565e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	@ 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d068      	beq.n	80057d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2210      	movs	r2, #16
 800570a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800570c:	e049      	b.n	80057a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005714:	d045      	beq.n	80057a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7fe fd65 	bl	80041e4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <I2C_IsErrorOccurred+0x54>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d13a      	bne.n	80057a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800573e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800574a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800574e:	d121      	bne.n	8005794 <I2C_IsErrorOccurred+0xbc>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005756:	d01d      	beq.n	8005794 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	2b20      	cmp	r3, #32
 800575c:	d01a      	beq.n	8005794 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800576c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800576e:	f7fe fd39 	bl	80041e4 <HAL_GetTick>
 8005772:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005774:	e00e      	b.n	8005794 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005776:	f7fe fd35 	bl	80041e4 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b19      	cmp	r3, #25
 8005782:	d907      	bls.n	8005794 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f043 0320 	orr.w	r3, r3, #32
 800578a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005792:	e006      	b.n	80057a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d1e9      	bne.n	8005776 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d003      	beq.n	80057b8 <I2C_IsErrorOccurred+0xe0>
 80057b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0aa      	beq.n	800570e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2220      	movs	r2, #32
 80057c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800581a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f043 0302 	orr.w	r3, r3, #2
 8005832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800583c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01c      	beq.n	8005886 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff fe3b 	bl	80054c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <I2C_IsErrorOccurred+0x1bc>)
 800585e:	400b      	ands	r3, r1
 8005860:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800588a:	4618      	mov	r0, r3
 800588c:	3728      	adds	r7, #40	@ 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	fe00e800 	.word	0xfe00e800

08005898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	817b      	strh	r3, [r7, #10]
 80058a6:	4613      	mov	r3, r2
 80058a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058b0:	7a7b      	ldrb	r3, [r7, #9]
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	0d5b      	lsrs	r3, r3, #21
 80058d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80058d6:	4b08      	ldr	r3, [pc, #32]	@ (80058f8 <I2C_TransferConfig+0x60>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	43db      	mvns	r3, r3
 80058dc:	ea02 0103 	and.w	r1, r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	03ff63ff 	.word	0x03ff63ff

080058fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	d138      	bne.n	8005984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800591c:	2302      	movs	r3, #2
 800591e:	e032      	b.n	8005986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	@ 0x24
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800594e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005992:	b480      	push	{r7}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d139      	bne.n	8005a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e033      	b.n	8005a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2224      	movs	r2, #36	@ 0x24
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80059e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d141      	bne.n	8005abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a46:	d131      	bne.n	8005aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a48:	4b47      	ldr	r3, [pc, #284]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4e:	4a46      	ldr	r2, [pc, #280]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a58:	4b43      	ldr	r3, [pc, #268]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a60:	4a41      	ldr	r2, [pc, #260]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a68:	4b40      	ldr	r3, [pc, #256]	@ (8005b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2232      	movs	r2, #50	@ 0x32
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	4a3f      	ldr	r2, [pc, #252]	@ (8005b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	0c9b      	lsrs	r3, r3, #18
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a7e:	e002      	b.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a86:	4b38      	ldr	r3, [pc, #224]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a92:	d102      	bne.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f2      	bne.n	8005a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a9a:	4b33      	ldr	r3, [pc, #204]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aa6:	d158      	bne.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e057      	b.n	8005b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aac:	4b2e      	ldr	r3, [pc, #184]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005abc:	e04d      	b.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac4:	d141      	bne.n	8005b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ac6:	4b28      	ldr	r3, [pc, #160]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad2:	d131      	bne.n	8005b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ad4:	4b24      	ldr	r3, [pc, #144]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ada:	4a23      	ldr	r2, [pc, #140]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ae4:	4b20      	ldr	r3, [pc, #128]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005aec:	4a1e      	ldr	r2, [pc, #120]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005af4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2232      	movs	r2, #50	@ 0x32
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	0c9b      	lsrs	r3, r3, #18
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b0a:	e002      	b.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b12:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b1e:	d102      	bne.n	8005b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f2      	bne.n	8005b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b26:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b32:	d112      	bne.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e011      	b.n	8005b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b38:	4b0b      	ldr	r3, [pc, #44]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b48:	e007      	b.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b4a:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b52:	4a05      	ldr	r2, [pc, #20]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	40007000 	.word	0x40007000
 8005b6c:	2000001c 	.word	0x2000001c
 8005b70:	431bde83 	.word	0x431bde83

08005b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	4a04      	ldr	r2, [pc, #16]	@ (8005b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b82:	6093      	str	r3, [r2, #8]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40007000 	.word	0x40007000

08005b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e2fe      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d075      	beq.n	8005c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb2:	4b97      	ldr	r3, [pc, #604]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bbc:	4b94      	ldr	r3, [pc, #592]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	d102      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x3e>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d002      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x44>
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d10b      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd8:	4b8d      	ldr	r3, [pc, #564]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d05b      	beq.n	8005c9c <HAL_RCC_OscConfig+0x108>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d157      	bne.n	8005c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e2d9      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf8:	d106      	bne.n	8005c08 <HAL_RCC_OscConfig+0x74>
 8005bfa:	4b85      	ldr	r3, [pc, #532]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a84      	ldr	r2, [pc, #528]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e01d      	b.n	8005c44 <HAL_RCC_OscConfig+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x98>
 8005c12:	4b7f      	ldr	r3, [pc, #508]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a7e      	ldr	r2, [pc, #504]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a7b      	ldr	r2, [pc, #492]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0xb0>
 8005c2c:	4b78      	ldr	r3, [pc, #480]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a77      	ldr	r2, [pc, #476]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	4b75      	ldr	r3, [pc, #468]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a74      	ldr	r2, [pc, #464]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fe faca 	bl	80041e4 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c54:	f7fe fac6 	bl	80041e4 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b64      	cmp	r3, #100	@ 0x64
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e29e      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c66:	4b6a      	ldr	r3, [pc, #424]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0xc0>
 8005c72:	e014      	b.n	8005c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fe fab6 	bl	80041e4 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fe fab2 	bl	80041e4 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	@ 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e28a      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c8e:	4b60      	ldr	r3, [pc, #384]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0xe8>
 8005c9a:	e000      	b.n	8005c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d075      	beq.n	8005d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005caa:	4b59      	ldr	r3, [pc, #356]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cb4:	4b56      	ldr	r3, [pc, #344]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	d102      	bne.n	8005cca <HAL_RCC_OscConfig+0x136>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d002      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x13c>
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d11f      	bne.n	8005d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x154>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e25d      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce8:	4b49      	ldr	r3, [pc, #292]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	4946      	ldr	r1, [pc, #280]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cfc:	4b45      	ldr	r3, [pc, #276]	@ (8005e14 <HAL_RCC_OscConfig+0x280>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd fd3d 	bl	8003780 <HAL_InitTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d043      	beq.n	8005d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e249      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d023      	beq.n	8005d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d18:	4b3d      	ldr	r3, [pc, #244]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fe fa5e 	bl	80041e4 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d2c:	f7fe fa5a 	bl	80041e4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e232      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d3e:	4b34      	ldr	r3, [pc, #208]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4a:	4b31      	ldr	r3, [pc, #196]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	492d      	ldr	r1, [pc, #180]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	604b      	str	r3, [r1, #4]
 8005d5e:	e01a      	b.n	8005d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d60:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a2a      	ldr	r2, [pc, #168]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fe fa3a 	bl	80041e4 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d74:	f7fe fa36 	bl	80041e4 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e20e      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d86:	4b22      	ldr	r3, [pc, #136]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x1e0>
 8005d92:	e000      	b.n	8005d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d041      	beq.n	8005e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01c      	beq.n	8005de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005daa:	4b19      	ldr	r3, [pc, #100]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005db0:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dba:	f7fe fa13 	bl	80041e4 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc2:	f7fe fa0f 	bl	80041e4 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e1e7      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0ef      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x22e>
 8005de2:	e020      	b.n	8005e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dea:	4a09      	ldr	r2, [pc, #36]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df4:	f7fe f9f6 	bl	80041e4 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dfa:	e00d      	b.n	8005e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dfc:	f7fe f9f2 	bl	80041e4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d906      	bls.n	8005e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e1ca      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e18:	4b8c      	ldr	r3, [pc, #560]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1ea      	bne.n	8005dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80a6 	beq.w	8005f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e34:	2300      	movs	r3, #0
 8005e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e38:	4b84      	ldr	r3, [pc, #528]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_OscConfig+0x2b4>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x2b6>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e52:	4a7e      	ldr	r2, [pc, #504]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e66:	2301      	movs	r3, #1
 8005e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e6a:	4b79      	ldr	r3, [pc, #484]	@ (8006050 <HAL_RCC_OscConfig+0x4bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d118      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e76:	4b76      	ldr	r3, [pc, #472]	@ (8006050 <HAL_RCC_OscConfig+0x4bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a75      	ldr	r2, [pc, #468]	@ (8006050 <HAL_RCC_OscConfig+0x4bc>)
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e82:	f7fe f9af 	bl	80041e4 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8a:	f7fe f9ab 	bl	80041e4 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e183      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8006050 <HAL_RCC_OscConfig+0x4bc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d108      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x32e>
 8005eb0:	4b66      	ldr	r3, [pc, #408]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb6:	4a65      	ldr	r2, [pc, #404]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ec0:	e024      	b.n	8005f0c <HAL_RCC_OscConfig+0x378>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d110      	bne.n	8005eec <HAL_RCC_OscConfig+0x358>
 8005eca:	4b60      	ldr	r3, [pc, #384]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005eda:	4b5c      	ldr	r3, [pc, #368]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005eea:	e00f      	b.n	8005f0c <HAL_RCC_OscConfig+0x378>
 8005eec:	4b57      	ldr	r3, [pc, #348]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef2:	4a56      	ldr	r2, [pc, #344]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005efc:	4b53      	ldr	r3, [pc, #332]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f02:	4a52      	ldr	r2, [pc, #328]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f04:	f023 0304 	bic.w	r3, r3, #4
 8005f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fe f966 	bl	80041e4 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fe f962 	bl	80041e4 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e138      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f32:	4b46      	ldr	r3, [pc, #280]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ed      	beq.n	8005f1c <HAL_RCC_OscConfig+0x388>
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f42:	f7fe f94f 	bl	80041e4 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f48:	e00a      	b.n	8005f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4a:	f7fe f94b 	bl	80041e4 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e121      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f60:	4b3a      	ldr	r3, [pc, #232]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ed      	bne.n	8005f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f6e:	7ffb      	ldrb	r3, [r7, #31]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d105      	bne.n	8005f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f74:	4b35      	ldr	r3, [pc, #212]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f78:	4a34      	ldr	r2, [pc, #208]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d03c      	beq.n	8006006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01c      	beq.n	8005fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f94:	4b2d      	ldr	r3, [pc, #180]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fe f91e 	bl	80041e4 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fac:	f7fe f91a 	bl	80041e4 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e0f2      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fbe:	4b23      	ldr	r3, [pc, #140]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ef      	beq.n	8005fac <HAL_RCC_OscConfig+0x418>
 8005fcc:	e01b      	b.n	8006006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fce:	4b1f      	ldr	r3, [pc, #124]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fe f901 	bl	80041e4 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fe6:	f7fe f8fd 	bl	80041e4 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e0d5      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ff8:	4b14      	ldr	r3, [pc, #80]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8005ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1ef      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80c9 	beq.w	80061a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006010:	4b0e      	ldr	r3, [pc, #56]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 030c 	and.w	r3, r3, #12
 8006018:	2b0c      	cmp	r3, #12
 800601a:	f000 8083 	beq.w	8006124 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d15e      	bne.n	80060e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006026:	4b09      	ldr	r3, [pc, #36]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a08      	ldr	r2, [pc, #32]	@ (800604c <HAL_RCC_OscConfig+0x4b8>)
 800602c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fe f8d7 	bl	80041e4 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006038:	e00c      	b.n	8006054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603a:	f7fe f8d3 	bl	80041e4 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d905      	bls.n	8006054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e0ab      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
 800604c:	40021000 	.word	0x40021000
 8006050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006054:	4b55      	ldr	r3, [pc, #340]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1ec      	bne.n	800603a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006060:	4b52      	ldr	r3, [pc, #328]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	4b52      	ldr	r3, [pc, #328]	@ (80061b0 <HAL_RCC_OscConfig+0x61c>)
 8006066:	4013      	ands	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6a11      	ldr	r1, [r2, #32]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006070:	3a01      	subs	r2, #1
 8006072:	0112      	lsls	r2, r2, #4
 8006074:	4311      	orrs	r1, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800607a:	0212      	lsls	r2, r2, #8
 800607c:	4311      	orrs	r1, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006082:	0852      	lsrs	r2, r2, #1
 8006084:	3a01      	subs	r2, #1
 8006086:	0552      	lsls	r2, r2, #21
 8006088:	4311      	orrs	r1, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800608e:	0852      	lsrs	r2, r2, #1
 8006090:	3a01      	subs	r2, #1
 8006092:	0652      	lsls	r2, r2, #25
 8006094:	4311      	orrs	r1, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800609a:	06d2      	lsls	r2, r2, #27
 800609c:	430a      	orrs	r2, r1
 800609e:	4943      	ldr	r1, [pc, #268]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a4:	4b41      	ldr	r3, [pc, #260]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a40      	ldr	r2, [pc, #256]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060b0:	4b3e      	ldr	r3, [pc, #248]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4a3d      	ldr	r2, [pc, #244]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fe f892 	bl	80041e4 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fe f88e 	bl	80041e4 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e066      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d6:	4b35      	ldr	r3, [pc, #212]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x530>
 80060e2:	e05e      	b.n	80061a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e4:	4b31      	ldr	r3, [pc, #196]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a30      	ldr	r2, [pc, #192]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 80060ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fe f878 	bl	80041e4 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fe f874 	bl	80041e4 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e04c      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800610a:	4b28      	ldr	r3, [pc, #160]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006116:	4b25      	ldr	r3, [pc, #148]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	4924      	ldr	r1, [pc, #144]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <HAL_RCC_OscConfig+0x620>)
 800611e:	4013      	ands	r3, r2
 8006120:	60cb      	str	r3, [r1, #12]
 8006122:	e03e      	b.n	80061a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e039      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006130:	4b1e      	ldr	r3, [pc, #120]	@ (80061ac <HAL_RCC_OscConfig+0x618>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 0203 	and.w	r2, r3, #3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	429a      	cmp	r2, r3
 8006142:	d12c      	bne.n	800619e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	3b01      	subs	r3, #1
 8006150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d123      	bne.n	800619e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d11b      	bne.n	800619e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d113      	bne.n	800619e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	3b01      	subs	r3, #1
 8006184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d109      	bne.n	800619e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	3b01      	subs	r3, #1
 8006198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40021000 	.word	0x40021000
 80061b0:	019f800c 	.word	0x019f800c
 80061b4:	feeefffc 	.word	0xfeeefffc

080061b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e11e      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061d0:	4b91      	ldr	r3, [pc, #580]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d910      	bls.n	8006200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b8e      	ldr	r3, [pc, #568]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 020f 	bic.w	r2, r3, #15
 80061e6:	498c      	ldr	r1, [pc, #560]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b8a      	ldr	r3, [pc, #552]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e106      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d073      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d129      	bne.n	8006268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006214:	4b81      	ldr	r3, [pc, #516]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0f4      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006224:	f000 f9d0 	bl	80065c8 <RCC_GetSysClockFreqFromPLLSource>
 8006228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4a7c      	ldr	r2, [pc, #496]	@ (8006420 <HAL_RCC_ClockConfig+0x268>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d93f      	bls.n	80062b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006232:	4b7a      	ldr	r3, [pc, #488]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006246:	2b00      	cmp	r3, #0
 8006248:	d033      	beq.n	80062b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800624e:	2b00      	cmp	r3, #0
 8006250:	d12f      	bne.n	80062b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006252:	4b72      	ldr	r3, [pc, #456]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800625a:	4a70      	ldr	r2, [pc, #448]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 800625c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006262:	2380      	movs	r3, #128	@ 0x80
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e024      	b.n	80062b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d107      	bne.n	8006280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006270:	4b6a      	ldr	r3, [pc, #424]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0c6      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006280:	4b66      	ldr	r3, [pc, #408]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0be      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006290:	f000 f8ce 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 8006294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4a61      	ldr	r2, [pc, #388]	@ (8006420 <HAL_RCC_ClockConfig+0x268>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d909      	bls.n	80062b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800629e:	4b5f      	ldr	r3, [pc, #380]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062a6:	4a5d      	ldr	r2, [pc, #372]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80062a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062b2:	4b5a      	ldr	r3, [pc, #360]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f023 0203 	bic.w	r2, r3, #3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4957      	ldr	r1, [pc, #348]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c4:	f7fd ff8e 	bl	80041e4 <HAL_GetTick>
 80062c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ca:	e00a      	b.n	80062e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062cc:	f7fd ff8a 	bl	80041e4 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062da:	4293      	cmp	r3, r2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e095      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	4b4e      	ldr	r3, [pc, #312]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 020c 	and.w	r2, r3, #12
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d1eb      	bne.n	80062cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d023      	beq.n	8006348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800630c:	4b43      	ldr	r3, [pc, #268]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4a42      	ldr	r2, [pc, #264]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006324:	4b3d      	ldr	r3, [pc, #244]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800632c:	4a3b      	ldr	r2, [pc, #236]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 800632e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006334:	4b39      	ldr	r3, [pc, #228]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4936      	ldr	r1, [pc, #216]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
 8006346:	e008      	b.n	800635a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b80      	cmp	r3, #128	@ 0x80
 800634c:	d105      	bne.n	800635a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800634e:	4b33      	ldr	r3, [pc, #204]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4a32      	ldr	r2, [pc, #200]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 8006354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800635a:	4b2f      	ldr	r3, [pc, #188]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d21d      	bcs.n	80063a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006368:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f023 020f 	bic.w	r2, r3, #15
 8006370:	4929      	ldr	r1, [pc, #164]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006378:	f7fd ff34 	bl	80041e4 <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637e:	e00a      	b.n	8006396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006380:	f7fd ff30 	bl	80041e4 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e03b      	b.n	800640e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006396:	4b20      	ldr	r3, [pc, #128]	@ (8006418 <HAL_RCC_ClockConfig+0x260>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d1ed      	bne.n	8006380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b0:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4917      	ldr	r1, [pc, #92]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ce:	4b13      	ldr	r3, [pc, #76]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	490f      	ldr	r1, [pc, #60]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063e2:	f000 f825 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b0c      	ldr	r3, [pc, #48]	@ (800641c <HAL_RCC_ClockConfig+0x264>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	490c      	ldr	r1, [pc, #48]	@ (8006424 <HAL_RCC_ClockConfig+0x26c>)
 80063f4:	5ccb      	ldrb	r3, [r1, r3]
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006428 <HAL_RCC_ClockConfig+0x270>)
 8006400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006402:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <HAL_RCC_ClockConfig+0x274>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd f9ba 	bl	8003780 <HAL_InitTick>
 800640c:	4603      	mov	r3, r0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40022000 	.word	0x40022000
 800641c:	40021000 	.word	0x40021000
 8006420:	04c4b400 	.word	0x04c4b400
 8006424:	08020814 	.word	0x08020814
 8006428:	2000001c 	.word	0x2000001c
 800642c:	20000020 	.word	0x20000020

08006430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006436:	4b2c      	ldr	r3, [pc, #176]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	2b04      	cmp	r3, #4
 8006440:	d102      	bne.n	8006448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006442:	4b2a      	ldr	r3, [pc, #168]	@ (80064ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	e047      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006448:	4b27      	ldr	r3, [pc, #156]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b08      	cmp	r3, #8
 8006452:	d102      	bne.n	800645a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006454:	4b26      	ldr	r3, [pc, #152]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	e03e      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800645a:	4b23      	ldr	r3, [pc, #140]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b0c      	cmp	r3, #12
 8006464:	d136      	bne.n	80064d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006466:	4b20      	ldr	r3, [pc, #128]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006470:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	091b      	lsrs	r3, r3, #4
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	3301      	adds	r3, #1
 800647c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d10c      	bne.n	800649e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006484:	4a1a      	ldr	r2, [pc, #104]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	fbb2 f3f3 	udiv	r3, r2, r3
 800648c:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800648e:	68d2      	ldr	r2, [r2, #12]
 8006490:	0a12      	lsrs	r2, r2, #8
 8006492:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006496:	fb02 f303 	mul.w	r3, r2, r3
 800649a:	617b      	str	r3, [r7, #20]
      break;
 800649c:	e00c      	b.n	80064b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800649e:	4a13      	ldr	r2, [pc, #76]	@ (80064ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a6:	4a10      	ldr	r2, [pc, #64]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064a8:	68d2      	ldr	r2, [r2, #12]
 80064aa:	0a12      	lsrs	r2, r2, #8
 80064ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]
      break;
 80064b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064b8:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	0e5b      	lsrs	r3, r3, #25
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	3301      	adds	r3, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e001      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064d8:	693b      	ldr	r3, [r7, #16]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40021000 	.word	0x40021000
 80064ec:	00f42400 	.word	0x00f42400
 80064f0:	016e3600 	.word	0x016e3600

080064f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f8:	4b03      	ldr	r3, [pc, #12]	@ (8006508 <HAL_RCC_GetHCLKFreq+0x14>)
 80064fa:	681b      	ldr	r3, [r3, #0]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	2000001c 	.word	0x2000001c

0800650c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006510:	f7ff fff0 	bl	80064f4 <HAL_RCC_GetHCLKFreq>
 8006514:	4602      	mov	r2, r0
 8006516:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	4904      	ldr	r1, [pc, #16]	@ (8006534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006522:	5ccb      	ldrb	r3, [r1, r3]
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800652c:	4618      	mov	r0, r3
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40021000 	.word	0x40021000
 8006534:	08020824 	.word	0x08020824

08006538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800653c:	f7ff ffda 	bl	80064f4 <HAL_RCC_GetHCLKFreq>
 8006540:	4602      	mov	r2, r0
 8006542:	4b06      	ldr	r3, [pc, #24]	@ (800655c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	0adb      	lsrs	r3, r3, #11
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	4904      	ldr	r1, [pc, #16]	@ (8006560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800654e:	5ccb      	ldrb	r3, [r1, r3]
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40021000 	.word	0x40021000
 8006560:	08020824 	.word	0x08020824

08006564 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	220f      	movs	r2, #15
 8006572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006574:	4b12      	ldr	r3, [pc, #72]	@ (80065c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 0203 	and.w	r2, r3, #3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006580:	4b0f      	ldr	r3, [pc, #60]	@ (80065c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800658c:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <HAL_RCC_GetClockConfig+0x5c>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006598:	4b09      	ldr	r3, [pc, #36]	@ (80065c0 <HAL_RCC_GetClockConfig+0x5c>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	08db      	lsrs	r3, r3, #3
 800659e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80065a6:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <HAL_RCC_GetClockConfig+0x60>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 020f 	and.w	r2, r3, #15
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	601a      	str	r2, [r3, #0]
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40022000 	.word	0x40022000

080065c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d10c      	bne.n	8006606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065ec:	4a17      	ldr	r2, [pc, #92]	@ (800664c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	4a14      	ldr	r2, [pc, #80]	@ (8006648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065f6:	68d2      	ldr	r2, [r2, #12]
 80065f8:	0a12      	lsrs	r2, r2, #8
 80065fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	617b      	str	r3, [r7, #20]
    break;
 8006604:	e00c      	b.n	8006620 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006606:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	4a0e      	ldr	r2, [pc, #56]	@ (8006648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006610:	68d2      	ldr	r2, [r2, #12]
 8006612:	0a12      	lsrs	r2, r2, #8
 8006614:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	617b      	str	r3, [r7, #20]
    break;
 800661e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006620:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	0e5b      	lsrs	r3, r3, #25
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	3301      	adds	r3, #1
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
 8006638:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800663a:	687b      	ldr	r3, [r7, #4]
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40021000 	.word	0x40021000
 800664c:	016e3600 	.word	0x016e3600
 8006650:	00f42400 	.word	0x00f42400

08006654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800665c:	2300      	movs	r3, #0
 800665e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006660:	2300      	movs	r3, #0
 8006662:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8098 	beq.w	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006672:	2300      	movs	r3, #0
 8006674:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006676:	4b43      	ldr	r3, [pc, #268]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10d      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006682:	4b40      	ldr	r3, [pc, #256]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006686:	4a3f      	ldr	r2, [pc, #252]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668c:	6593      	str	r3, [r2, #88]	@ 0x58
 800668e:	4b3d      	ldr	r3, [pc, #244]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006696:	60bb      	str	r3, [r7, #8]
 8006698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669a:	2301      	movs	r3, #1
 800669c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800669e:	4b3a      	ldr	r3, [pc, #232]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a39      	ldr	r2, [pc, #228]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066aa:	f7fd fd9b 	bl	80041e4 <HAL_GetTick>
 80066ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b0:	e009      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b2:	f7fd fd97 	bl	80041e4 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d902      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	74fb      	strb	r3, [r7, #19]
        break;
 80066c4:	e005      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c6:	4b30      	ldr	r3, [pc, #192]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0ef      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d159      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01e      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d019      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066f4:	4b23      	ldr	r3, [pc, #140]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006700:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006706:	4a1f      	ldr	r2, [pc, #124]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800670c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006710:	4b1c      	ldr	r3, [pc, #112]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006716:	4a1b      	ldr	r2, [pc, #108]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006720:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006732:	f7fd fd57 	bl	80041e4 <HAL_GetTick>
 8006736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006738:	e00b      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fd fd53 	bl	80041e4 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d902      	bls.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	74fb      	strb	r3, [r7, #19]
            break;
 8006750:	e006      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006752:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0ec      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006760:	7cfb      	ldrb	r3, [r7, #19]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006766:	4b07      	ldr	r3, [pc, #28]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006774:	4903      	ldr	r1, [pc, #12]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800677c:	e008      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800677e:	7cfb      	ldrb	r3, [r7, #19]
 8006780:	74bb      	strb	r3, [r7, #18]
 8006782:	e005      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006784:	40021000 	.word	0x40021000
 8006788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	7cfb      	ldrb	r3, [r7, #19]
 800678e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006790:	7c7b      	ldrb	r3, [r7, #17]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d105      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006796:	4ba7      	ldr	r3, [pc, #668]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679a:	4aa6      	ldr	r2, [pc, #664]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067ae:	4ba1      	ldr	r3, [pc, #644]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b4:	f023 0203 	bic.w	r2, r3, #3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	499d      	ldr	r1, [pc, #628]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067d0:	4b98      	ldr	r3, [pc, #608]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d6:	f023 020c 	bic.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4995      	ldr	r1, [pc, #596]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067f2:	4b90      	ldr	r3, [pc, #576]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	498c      	ldr	r1, [pc, #560]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006814:	4b87      	ldr	r3, [pc, #540]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	4984      	ldr	r1, [pc, #528]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006836:	4b7f      	ldr	r3, [pc, #508]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	497b      	ldr	r1, [pc, #492]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006858:	4b76      	ldr	r3, [pc, #472]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	4973      	ldr	r1, [pc, #460]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800687a:	4b6e      	ldr	r3, [pc, #440]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006880:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	496a      	ldr	r1, [pc, #424]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800689c:	4b65      	ldr	r3, [pc, #404]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	4962      	ldr	r1, [pc, #392]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068be:	4b5d      	ldr	r3, [pc, #372]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	4959      	ldr	r1, [pc, #356]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e0:	4b54      	ldr	r3, [pc, #336]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ee:	4951      	ldr	r1, [pc, #324]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006902:	4b4c      	ldr	r3, [pc, #304]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4948      	ldr	r1, [pc, #288]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d015      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006924:	4b43      	ldr	r3, [pc, #268]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	4940      	ldr	r1, [pc, #256]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006942:	d105      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006944:	4b3b      	ldr	r3, [pc, #236]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a3a      	ldr	r2, [pc, #232]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800694e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800695c:	4b35      	ldr	r3, [pc, #212]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006962:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696a:	4932      	ldr	r1, [pc, #200]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800697a:	d105      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800697c:	4b2d      	ldr	r3, [pc, #180]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a2c      	ldr	r2, [pc, #176]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006986:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006994:	4b27      	ldr	r3, [pc, #156]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a2:	4924      	ldr	r1, [pc, #144]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069b2:	d105      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069cc:	4b19      	ldr	r3, [pc, #100]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	4916      	ldr	r1, [pc, #88]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069ea:	d105      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ec:	4b11      	ldr	r3, [pc, #68]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a10      	ldr	r2, [pc, #64]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d019      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a04:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	4908      	ldr	r1, [pc, #32]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a22:	d109      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a24:	4b03      	ldr	r3, [pc, #12]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4a02      	ldr	r2, [pc, #8]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a2e:	60d3      	str	r3, [r2, #12]
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a32:	bf00      	nop
 8006a34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d015      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a44:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	4926      	ldr	r1, [pc, #152]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a62:	d105      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a64:	4b21      	ldr	r3, [pc, #132]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4a20      	ldr	r2, [pc, #128]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d015      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a8a:	4918      	ldr	r1, [pc, #96]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9a:	d105      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a9c:	4b13      	ldr	r3, [pc, #76]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4a12      	ldr	r2, [pc, #72]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d015      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac2:	490a      	ldr	r1, [pc, #40]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ad2:	d105      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ad4:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4a04      	ldr	r2, [pc, #16]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ade:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ae0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000

08006af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e049      	b.n	8006b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fd f804 	bl	8003b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f000 fbac 	bl	800728c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d001      	beq.n	8006bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e04c      	b.n	8006c52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <HAL_TIM_Base_Start+0xc0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d022      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd2:	d01d      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a22      	ldr	r2, [pc, #136]	@ (8006c64 <HAL_TIM_Base_Start+0xc4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d018      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a21      	ldr	r2, [pc, #132]	@ (8006c68 <HAL_TIM_Base_Start+0xc8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d013      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <HAL_TIM_Base_Start+0xcc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00e      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8006c70 <HAL_TIM_Base_Start+0xd0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1c      	ldr	r2, [pc, #112]	@ (8006c74 <HAL_TIM_Base_Start+0xd4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_TIM_Base_Start+0x70>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006c78 <HAL_TIM_Base_Start+0xd8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d115      	bne.n	8006c3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	4b19      	ldr	r3, [pc, #100]	@ (8006c7c <HAL_TIM_Base_Start+0xdc>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b06      	cmp	r3, #6
 8006c20:	d015      	beq.n	8006c4e <HAL_TIM_Base_Start+0xae>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c28:	d011      	beq.n	8006c4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3a:	e008      	b.n	8006c4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e000      	b.n	8006c50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40015000 	.word	0x40015000
 8006c7c:	00010007 	.word	0x00010007

08006c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d001      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e054      	b.n	8006d42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a26      	ldr	r2, [pc, #152]	@ (8006d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc2:	d01d      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a22      	ldr	r2, [pc, #136]	@ (8006d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a21      	ldr	r2, [pc, #132]	@ (8006d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d60 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIM_Base_Start_IT+0x80>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xe8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d115      	bne.n	8006d2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	4b19      	ldr	r3, [pc, #100]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xec>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d015      	beq.n	8006d3e <HAL_TIM_Base_Start_IT+0xbe>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d18:	d011      	beq.n	8006d3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2a:	e008      	b.n	8006d3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e000      	b.n	8006d40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800
 8006d5c:	40000c00 	.word	0x40000c00
 8006d60:	40013400 	.word	0x40013400
 8006d64:	40014000 	.word	0x40014000
 8006d68:	40015000 	.word	0x40015000
 8006d6c:	00010007 	.word	0x00010007

08006d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01b      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0202 	mvn.w	r2, #2
 8006da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa48 	bl	8007250 <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa3a 	bl	800723c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa4b 	bl	8007264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d020      	beq.n	8006e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01b      	beq.n	8006e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0204 	mvn.w	r2, #4
 8006df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa22 	bl	8007250 <HAL_TIM_IC_CaptureCallback>
 8006e0c:	e005      	b.n	8006e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa14 	bl	800723c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fa25 	bl	8007264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d020      	beq.n	8006e6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01b      	beq.n	8006e6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0208 	mvn.w	r2, #8
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2204      	movs	r2, #4
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9fc 	bl	8007250 <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9ee 	bl	800723c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f9ff 	bl	8007264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d020      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01b      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0210 	mvn.w	r2, #16
 8006e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f9d6 	bl	8007250 <HAL_TIM_IC_CaptureCallback>
 8006ea4:	e005      	b.n	8006eb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9c8 	bl	800723c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f9d9 	bl	8007264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00c      	beq.n	8006edc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0201 	mvn.w	r2, #1
 8006ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fb ff40 	bl	8002d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00c      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fbb1 	bl	800766c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fba9 	bl	8007680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00c      	beq.n	8006f52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f993 	bl	8007278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00c      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f06f 0220 	mvn.w	r2, #32
 8006f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb71 	bl	8007658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00c      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb7d 	bl	8007694 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fb75 	bl	80076a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fb6d 	bl	80076bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00c      	beq.n	8007006 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb65 	bl	80076d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIM_ConfigClockSource+0x1c>
 8007028:	2302      	movs	r3, #2
 800702a:	e0f6      	b.n	800721a <HAL_TIM_ConfigClockSource+0x20a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800704a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800704e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a6f      	ldr	r2, [pc, #444]	@ (8007224 <HAL_TIM_ConfigClockSource+0x214>)
 8007066:	4293      	cmp	r3, r2
 8007068:	f000 80c1 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 800706c:	4a6d      	ldr	r2, [pc, #436]	@ (8007224 <HAL_TIM_ConfigClockSource+0x214>)
 800706e:	4293      	cmp	r3, r2
 8007070:	f200 80c6 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007074:	4a6c      	ldr	r2, [pc, #432]	@ (8007228 <HAL_TIM_ConfigClockSource+0x218>)
 8007076:	4293      	cmp	r3, r2
 8007078:	f000 80b9 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 800707c:	4a6a      	ldr	r2, [pc, #424]	@ (8007228 <HAL_TIM_ConfigClockSource+0x218>)
 800707e:	4293      	cmp	r3, r2
 8007080:	f200 80be 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007084:	4a69      	ldr	r2, [pc, #420]	@ (800722c <HAL_TIM_ConfigClockSource+0x21c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	f000 80b1 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 800708c:	4a67      	ldr	r2, [pc, #412]	@ (800722c <HAL_TIM_ConfigClockSource+0x21c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	f200 80b6 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007094:	4a66      	ldr	r2, [pc, #408]	@ (8007230 <HAL_TIM_ConfigClockSource+0x220>)
 8007096:	4293      	cmp	r3, r2
 8007098:	f000 80a9 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 800709c:	4a64      	ldr	r2, [pc, #400]	@ (8007230 <HAL_TIM_ConfigClockSource+0x220>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	f200 80ae 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 80070a4:	4a63      	ldr	r2, [pc, #396]	@ (8007234 <HAL_TIM_ConfigClockSource+0x224>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	f000 80a1 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 80070ac:	4a61      	ldr	r2, [pc, #388]	@ (8007234 <HAL_TIM_ConfigClockSource+0x224>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f200 80a6 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 80070b4:	4a60      	ldr	r2, [pc, #384]	@ (8007238 <HAL_TIM_ConfigClockSource+0x228>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f000 8099 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 80070bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007238 <HAL_TIM_ConfigClockSource+0x228>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f200 809e 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 80070c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070c8:	f000 8091 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 80070cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070d0:	f200 8096 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 80070d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070d8:	f000 8089 	beq.w	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 80070dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e0:	f200 808e 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 80070e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e8:	d03e      	beq.n	8007168 <HAL_TIM_ConfigClockSource+0x158>
 80070ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ee:	f200 8087 	bhi.w	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f6:	f000 8086 	beq.w	8007206 <HAL_TIM_ConfigClockSource+0x1f6>
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fe:	d87f      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007100:	2b70      	cmp	r3, #112	@ 0x70
 8007102:	d01a      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x12a>
 8007104:	2b70      	cmp	r3, #112	@ 0x70
 8007106:	d87b      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007108:	2b60      	cmp	r3, #96	@ 0x60
 800710a:	d050      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x19e>
 800710c:	2b60      	cmp	r3, #96	@ 0x60
 800710e:	d877      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007110:	2b50      	cmp	r3, #80	@ 0x50
 8007112:	d03c      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x17e>
 8007114:	2b50      	cmp	r3, #80	@ 0x50
 8007116:	d873      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007118:	2b40      	cmp	r3, #64	@ 0x40
 800711a:	d058      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0x1be>
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	d86f      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007120:	2b30      	cmp	r3, #48	@ 0x30
 8007122:	d064      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 8007124:	2b30      	cmp	r3, #48	@ 0x30
 8007126:	d86b      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007128:	2b20      	cmp	r3, #32
 800712a:	d060      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 800712c:	2b20      	cmp	r3, #32
 800712e:	d867      	bhi.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d05c      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 8007134:	2b10      	cmp	r3, #16
 8007136:	d05a      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1de>
 8007138:	e062      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800714a:	f000 f9cf 	bl	80074ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800715c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	609a      	str	r2, [r3, #8]
      break;
 8007166:	e04f      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007178:	f000 f9b8 	bl	80074ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800718a:	609a      	str	r2, [r3, #8]
      break;
 800718c:	e03c      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800719a:	461a      	mov	r2, r3
 800719c:	f000 f92a 	bl	80073f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2150      	movs	r1, #80	@ 0x50
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f983 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 80071ac:	e02c      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ba:	461a      	mov	r2, r3
 80071bc:	f000 f949 	bl	8007452 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2160      	movs	r1, #96	@ 0x60
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f973 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 80071cc:	e01c      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071da:	461a      	mov	r2, r3
 80071dc:	f000 f90a 	bl	80073f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2140      	movs	r1, #64	@ 0x40
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f963 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 80071ec:	e00c      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f000 f95a 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 80071fe:	e003      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
      break;
 8007204:	e000      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	00100070 	.word	0x00100070
 8007228:	00100060 	.word	0x00100060
 800722c:	00100050 	.word	0x00100050
 8007230:	00100040 	.word	0x00100040
 8007234:	00100030 	.word	0x00100030
 8007238:	00100020 	.word	0x00100020

0800723c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a4c      	ldr	r2, [pc, #304]	@ (80073d0 <TIM_Base_SetConfig+0x144>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d017      	beq.n	80072d4 <TIM_Base_SetConfig+0x48>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072aa:	d013      	beq.n	80072d4 <TIM_Base_SetConfig+0x48>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a49      	ldr	r2, [pc, #292]	@ (80073d4 <TIM_Base_SetConfig+0x148>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00f      	beq.n	80072d4 <TIM_Base_SetConfig+0x48>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a48      	ldr	r2, [pc, #288]	@ (80073d8 <TIM_Base_SetConfig+0x14c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00b      	beq.n	80072d4 <TIM_Base_SetConfig+0x48>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a47      	ldr	r2, [pc, #284]	@ (80073dc <TIM_Base_SetConfig+0x150>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d007      	beq.n	80072d4 <TIM_Base_SetConfig+0x48>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a46      	ldr	r2, [pc, #280]	@ (80073e0 <TIM_Base_SetConfig+0x154>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0x48>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a45      	ldr	r2, [pc, #276]	@ (80073e4 <TIM_Base_SetConfig+0x158>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d108      	bne.n	80072e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a39      	ldr	r2, [pc, #228]	@ (80073d0 <TIM_Base_SetConfig+0x144>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d023      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f4:	d01f      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a36      	ldr	r2, [pc, #216]	@ (80073d4 <TIM_Base_SetConfig+0x148>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01b      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a35      	ldr	r2, [pc, #212]	@ (80073d8 <TIM_Base_SetConfig+0x14c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d017      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a34      	ldr	r2, [pc, #208]	@ (80073dc <TIM_Base_SetConfig+0x150>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a33      	ldr	r2, [pc, #204]	@ (80073e0 <TIM_Base_SetConfig+0x154>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00f      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a33      	ldr	r2, [pc, #204]	@ (80073e8 <TIM_Base_SetConfig+0x15c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00b      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a32      	ldr	r2, [pc, #200]	@ (80073ec <TIM_Base_SetConfig+0x160>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a31      	ldr	r2, [pc, #196]	@ (80073f0 <TIM_Base_SetConfig+0x164>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_Base_SetConfig+0xaa>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2c      	ldr	r2, [pc, #176]	@ (80073e4 <TIM_Base_SetConfig+0x158>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d108      	bne.n	8007348 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800733c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <TIM_Base_SetConfig+0x144>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d013      	beq.n	800739c <TIM_Base_SetConfig+0x110>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a1a      	ldr	r2, [pc, #104]	@ (80073e0 <TIM_Base_SetConfig+0x154>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00f      	beq.n	800739c <TIM_Base_SetConfig+0x110>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a1a      	ldr	r2, [pc, #104]	@ (80073e8 <TIM_Base_SetConfig+0x15c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00b      	beq.n	800739c <TIM_Base_SetConfig+0x110>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a19      	ldr	r2, [pc, #100]	@ (80073ec <TIM_Base_SetConfig+0x160>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d007      	beq.n	800739c <TIM_Base_SetConfig+0x110>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a18      	ldr	r2, [pc, #96]	@ (80073f0 <TIM_Base_SetConfig+0x164>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <TIM_Base_SetConfig+0x110>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a13      	ldr	r2, [pc, #76]	@ (80073e4 <TIM_Base_SetConfig+0x158>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d103      	bne.n	80073a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d105      	bne.n	80073c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	611a      	str	r2, [r3, #16]
  }
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40000400 	.word	0x40000400
 80073d8:	40000800 	.word	0x40000800
 80073dc:	40000c00 	.word	0x40000c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40015000 	.word	0x40015000
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40014400 	.word	0x40014400
 80073f0:	40014800 	.word	0x40014800

080073f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f023 0201 	bic.w	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800741e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 030a 	bic.w	r3, r3, #10
 8007430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007452:	b480      	push	{r7}
 8007454:	b087      	sub	sp, #28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f023 0210 	bic.w	r2, r3, #16
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800747c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	031b      	lsls	r3, r3, #12
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800748e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f043 0307 	orr.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	609a      	str	r2, [r3, #8]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	021a      	lsls	r2, r3, #8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	431a      	orrs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	609a      	str	r2, [r3, #8]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007540:	2302      	movs	r3, #2
 8007542:	e074      	b.n	800762e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a34      	ldr	r2, [pc, #208]	@ (800763c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a33      	ldr	r2, [pc, #204]	@ (8007640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a31      	ldr	r2, [pc, #196]	@ (8007644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d108      	bne.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007588:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800759a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a21      	ldr	r2, [pc, #132]	@ (800763c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d022      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c4:	d01d      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007648 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d018      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	@ (800764c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1c      	ldr	r2, [pc, #112]	@ (8007650 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a18      	ldr	r2, [pc, #96]	@ (8007654 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a11      	ldr	r2, [pc, #68]	@ (8007644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10c      	bne.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4313      	orrs	r3, r2
 8007612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40012c00 	.word	0x40012c00
 8007640:	40013400 	.word	0x40013400
 8007644:	40015000 	.word	0x40015000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40014000 	.word	0x40014000

08007658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e042      	b.n	800777c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fc fb59 	bl	8003dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2224      	movs	r2, #36	@ 0x24
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0201 	bic.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 f8d6 	bl	80088e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fdd7 	bl	80082e8 <UART_SetConfig>
 800773a:	4603      	mov	r3, r0
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e01b      	b.n	800777c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f955 	bl	8008a24 <UART_CheckIdleState>
 800777a:	4603      	mov	r3, r0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	@ 0x28
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	4613      	mov	r3, r2
 8007792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779a:	2b20      	cmp	r3, #32
 800779c:	d17b      	bne.n	8007896 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_UART_Transmit+0x26>
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e074      	b.n	8007898 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2221      	movs	r2, #33	@ 0x21
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077be:	f7fc fd11 	bl	80041e4 <HAL_GetTick>
 80077c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	88fa      	ldrh	r2, [r7, #6]
 80077d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077dc:	d108      	bne.n	80077f0 <HAL_UART_Transmit+0x6c>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	e003      	b.n	80077f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077f8:	e030      	b.n	800785c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2200      	movs	r2, #0
 8007802:	2180      	movs	r1, #128	@ 0x80
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f001 f9b7 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e03d      	b.n	8007898 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007830:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	3302      	adds	r3, #2
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e007      	b.n	800784a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1c8      	bne.n	80077fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	2140      	movs	r1, #64	@ 0x40
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f001 f980 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e006      	b.n	8007898 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e000      	b.n	8007898 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	@ 0x28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d137      	bne.n	8007928 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_UART_Receive_IT+0x24>
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e030      	b.n	800792a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a18      	ldr	r2, [pc, #96]	@ (8007934 <HAL_UART_Receive_IT+0x94>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d01f      	beq.n	8007918 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	613b      	str	r3, [r7, #16]
   return(result);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	61bb      	str	r3, [r7, #24]
   return(result);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	461a      	mov	r2, r3
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f001 f998 	bl	8008c54 <UART_Start_Receive_IT>
 8007924:	4603      	mov	r3, r0
 8007926:	e000      	b.n	800792a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3728      	adds	r7, #40	@ 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40008000 	.word	0x40008000

08007938 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	@ 0x28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800794c:	2b20      	cmp	r3, #32
 800794e:	d167      	bne.n	8007a20 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_UART_Transmit_DMA+0x24>
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e060      	b.n	8007a22 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	88fa      	ldrh	r2, [r7, #6]
 800796a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2221      	movs	r2, #33	@ 0x21
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d028      	beq.n	80079e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007992:	4a26      	ldr	r2, [pc, #152]	@ (8007a2c <HAL_UART_Transmit_DMA+0xf4>)
 8007994:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800799a:	4a25      	ldr	r2, [pc, #148]	@ (8007a30 <HAL_UART_Transmit_DMA+0xf8>)
 800799c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079a2:	4a24      	ldr	r2, [pc, #144]	@ (8007a34 <HAL_UART_Transmit_DMA+0xfc>)
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079aa:	2200      	movs	r2, #0
 80079ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b6:	4619      	mov	r1, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3328      	adds	r3, #40	@ 0x28
 80079be:	461a      	mov	r2, r3
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	f7fc fda3 	bl	800450c <HAL_DMA_Start_IT>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2210      	movs	r2, #16
 80079d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e020      	b.n	8007a22 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2240      	movs	r2, #64	@ 0x40
 80079e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	613b      	str	r3, [r7, #16]
   return(result);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3308      	adds	r3, #8
 8007a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a08:	623a      	str	r2, [r7, #32]
 8007a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	69f9      	ldr	r1, [r7, #28]
 8007a0e:	6a3a      	ldr	r2, [r7, #32]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e5      	bne.n	80079e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e000      	b.n	8007a22 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007a20:	2302      	movs	r3, #2
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3728      	adds	r7, #40	@ 0x28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08009133 	.word	0x08009133
 8007a30:	080091cd 	.word	0x080091cd
 8007a34:	08009353 	.word	0x08009353

08007a38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	@ 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d137      	bne.n	8007ac0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_UART_Receive_DMA+0x24>
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e030      	b.n	8007ac2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_UART_Receive_DMA+0x94>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01f      	beq.n	8007ab0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	69f9      	ldr	r1, [r7, #28]
 8007aa2:	6a3a      	ldr	r2, [r7, #32]
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f001 f9ee 	bl	8008e98 <UART_Start_Receive_DMA>
 8007abc:	4603      	mov	r3, r0
 8007abe:	e000      	b.n	8007ac2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	@ 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40008000 	.word	0x40008000

08007ad0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b090      	sub	sp, #64	@ 0x40
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ae6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af2:	2b80      	cmp	r3, #128	@ 0x80
 8007af4:	d139      	bne.n	8007b6a <HAL_UART_DMAStop+0x9a>
 8007af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af8:	2b21      	cmp	r3, #33	@ 0x21
 8007afa:	d136      	bne.n	8007b6a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d015      	beq.n	8007b64 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fc fd60 	bl	8004602 <HAL_DMA_Abort>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00d      	beq.n	8007b64 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fc fec7 	bl	80048e0 <HAL_DMA_GetError>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	d105      	bne.n	8007b64 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e047      	b.n	8007bf4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fa3d 	bl	8008fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b40      	cmp	r3, #64	@ 0x40
 8007b76:	d13c      	bne.n	8007bf2 <HAL_UART_DMAStop+0x122>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7a:	2b22      	cmp	r3, #34	@ 0x22
 8007b7c:	d139      	bne.n	8007bf2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9e:	61ba      	str	r2, [r7, #24]
 8007ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e5      	bne.n	8007b7e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fc fd1d 	bl	8004602 <HAL_DMA_Abort>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fc fe83 	bl	80048e0 <HAL_DMA_GetError>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d105      	bne.n	8007bec <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2210      	movs	r2, #16
 8007be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e003      	b.n	8007bf4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 fa3a 	bl	8009066 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3740      	adds	r7, #64	@ 0x40
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b0ba      	sub	sp, #232	@ 0xe8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11b      	bne.n	8007c70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d015      	beq.n	8007c70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 8300 	beq.w	8008266 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
      }
      return;
 8007c6e:	e2fa      	b.n	8008266 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8123 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8007eb4 <HAL_UART_IRQHandler+0x2b8>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8007eb8 <HAL_UART_IRQHandler+0x2bc>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8116 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d011      	beq.n	8007cc4 <HAL_UART_IRQHandler+0xc8>
 8007ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	f043 0201 	orr.w	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d011      	beq.n	8007cf4 <HAL_UART_IRQHandler+0xf8>
 8007cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cea:	f043 0204 	orr.w	r2, r3, #4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d011      	beq.n	8007d24 <HAL_UART_IRQHandler+0x128>
 8007d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2204      	movs	r2, #4
 8007d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1a:	f043 0202 	orr.w	r2, r3, #2
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d017      	beq.n	8007d60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d40:	4b5c      	ldr	r3, [pc, #368]	@ (8007eb4 <HAL_UART_IRQHandler+0x2b8>)
 8007d42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d56:	f043 0208 	orr.w	r2, r3, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <HAL_UART_IRQHandler+0x196>
 8007d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00c      	beq.n	8007d92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d88:	f043 0220 	orr.w	r2, r3, #32
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8266 	beq.w	800826a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d013      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d105      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d005      	beq.n	8007df6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d054      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 f935 	bl	8009066 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b40      	cmp	r3, #64	@ 0x40
 8007e08:	d146      	bne.n	8007e98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1d9      	bne.n	8007e0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d017      	beq.n	8007e90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e66:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <HAL_UART_IRQHandler+0x2c0>)
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fc fc1f 	bl	80046b4 <HAL_DMA_Abort_IT>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d019      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8e:	e00f      	b.n	8007eb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa13 	bl	80082bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e96:	e00b      	b.n	8007eb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa0f 	bl	80082bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9e:	e007      	b.n	8007eb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa0b 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007eae:	e1dc      	b.n	800826a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb0:	bf00      	nop
    return;
 8007eb2:	e1da      	b.n	800826a <HAL_UART_IRQHandler+0x66e>
 8007eb4:	10000001 	.word	0x10000001
 8007eb8:	04000120 	.word	0x04000120
 8007ebc:	080093d3 	.word	0x080093d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f040 8170 	bne.w	80081aa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 8169 	beq.w	80081aa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8162 	beq.w	80081aa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2210      	movs	r2, #16
 8007eec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	f040 80d8 	bne.w	80080ae <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80af 	beq.w	8008074 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f20:	429a      	cmp	r2, r3
 8007f22:	f080 80a7 	bcs.w	8008074 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f040 8087 	bne.w	8008052 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1da      	bne.n	8007f44 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e1      	bne.n	8007f8e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ff4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e3      	bne.n	8007fca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800801e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008020:	f023 0310 	bic.w	r3, r3, #16
 8008024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008032:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008034:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e4      	bne.n	8008010 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800804c:	4618      	mov	r0, r3
 800804e:	f7fc fad8 	bl	8004602 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008064:	b29b      	uxth	r3, r3
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	b29b      	uxth	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f92f 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008072:	e0fc      	b.n	800826e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800807a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800807e:	429a      	cmp	r2, r3
 8008080:	f040 80f5 	bne.w	800826e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b20      	cmp	r3, #32
 8008094:	f040 80eb 	bne.w	800826e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f912 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
      return;
 80080ac:	e0df      	b.n	800826e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80d1 	beq.w	8008272 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80080d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80cc 	beq.w	8008272 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800810a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	623b      	str	r3, [r7, #32]
   return(result);
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008126:	f023 0301 	bic.w	r3, r3, #1
 800812a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008138:	633a      	str	r2, [r7, #48]	@ 0x30
 800813a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800813e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e1      	bne.n	8008110 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60fb      	str	r3, [r7, #12]
   return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f023 0310 	bic.w	r3, r3, #16
 8008174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	69b9      	ldr	r1, [r7, #24]
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	617b      	str	r3, [r7, #20]
   return(result);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e4      	bne.n	8008160 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2202      	movs	r2, #2
 800819a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800819c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f894 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081a8:	e063      	b.n	8008272 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00e      	beq.n	80081d4 <HAL_UART_IRQHandler+0x5d8>
 80081b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80081ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fe5d 	bl	8009e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081d2:	e051      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d014      	beq.n	800820a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d105      	bne.n	80081f8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d008      	beq.n	800820a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d03a      	beq.n	8008276 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
    }
    return;
 8008208:	e035      	b.n	8008276 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800820e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <HAL_UART_IRQHandler+0x62e>
 8008216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800821a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f001 f8e7 	bl	80093f6 <UART_EndTransmit_IT>
    return;
 8008228:	e026      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800822a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <HAL_UART_IRQHandler+0x64e>
 8008236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800823a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fe36 	bl	8009eb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008248:	e016      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800824e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d010      	beq.n	8008278 <HAL_UART_IRQHandler+0x67c>
 8008256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800825a:	2b00      	cmp	r3, #0
 800825c:	da0c      	bge.n	8008278 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 fe1e 	bl	8009ea0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008264:	e008      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
      return;
 8008266:	bf00      	nop
 8008268:	e006      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
    return;
 800826a:	bf00      	nop
 800826c:	e004      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
      return;
 800826e:	bf00      	nop
 8008270:	e002      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
      return;
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <HAL_UART_IRQHandler+0x67c>
    return;
 8008276:	bf00      	nop
  }
}
 8008278:	37e8      	adds	r7, #232	@ 0xe8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082ec:	b08c      	sub	sp, #48	@ 0x30
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	431a      	orrs	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	4313      	orrs	r3, r2
 800830e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4baa      	ldr	r3, [pc, #680]	@ (80085c0 <UART_SetConfig+0x2d8>)
 8008318:	4013      	ands	r3, r2
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008320:	430b      	orrs	r3, r1
 8008322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a9f      	ldr	r2, [pc, #636]	@ (80085c4 <UART_SetConfig+0x2dc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d004      	beq.n	8008354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008350:	4313      	orrs	r3, r2
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800835e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008368:	430b      	orrs	r3, r1
 800836a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	f023 010f 	bic.w	r1, r3, #15
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a90      	ldr	r2, [pc, #576]	@ (80085c8 <UART_SetConfig+0x2e0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d125      	bne.n	80083d8 <UART_SetConfig+0xf0>
 800838c:	4b8f      	ldr	r3, [pc, #572]	@ (80085cc <UART_SetConfig+0x2e4>)
 800838e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b03      	cmp	r3, #3
 8008398:	d81a      	bhi.n	80083d0 <UART_SetConfig+0xe8>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0xb8>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083b1 	.word	0x080083b1
 80083a4:	080083c1 	.word	0x080083c1
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083c9 	.word	0x080083c9
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	e116      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083b8:	2302      	movs	r3, #2
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083be:	e112      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083c0:	2304      	movs	r3, #4
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	e10e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083c8:	2308      	movs	r3, #8
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e10a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083d0:	2310      	movs	r3, #16
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e106      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a7c      	ldr	r2, [pc, #496]	@ (80085d0 <UART_SetConfig+0x2e8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d138      	bne.n	8008454 <UART_SetConfig+0x16c>
 80083e2:	4b7a      	ldr	r3, [pc, #488]	@ (80085cc <UART_SetConfig+0x2e4>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e8:	f003 030c 	and.w	r3, r3, #12
 80083ec:	2b0c      	cmp	r3, #12
 80083ee:	d82d      	bhi.n	800844c <UART_SetConfig+0x164>
 80083f0:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x110>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	0800842d 	.word	0x0800842d
 80083fc:	0800844d 	.word	0x0800844d
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800844d 	.word	0x0800844d
 8008408:	0800843d 	.word	0x0800843d
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008435 	.word	0x08008435
 800841c:	0800844d 	.word	0x0800844d
 8008420:	0800844d 	.word	0x0800844d
 8008424:	0800844d 	.word	0x0800844d
 8008428:	08008445 	.word	0x08008445
 800842c:	2300      	movs	r3, #0
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008432:	e0d8      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008434:	2302      	movs	r3, #2
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843a:	e0d4      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800843c:	2304      	movs	r3, #4
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008442:	e0d0      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008444:	2308      	movs	r3, #8
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844a:	e0cc      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800844c:	2310      	movs	r3, #16
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008452:	e0c8      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a5e      	ldr	r2, [pc, #376]	@ (80085d4 <UART_SetConfig+0x2ec>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d125      	bne.n	80084aa <UART_SetConfig+0x1c2>
 800845e:	4b5b      	ldr	r3, [pc, #364]	@ (80085cc <UART_SetConfig+0x2e4>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d016      	beq.n	800849a <UART_SetConfig+0x1b2>
 800846c:	2b30      	cmp	r3, #48	@ 0x30
 800846e:	d818      	bhi.n	80084a2 <UART_SetConfig+0x1ba>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d00a      	beq.n	800848a <UART_SetConfig+0x1a2>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d814      	bhi.n	80084a2 <UART_SetConfig+0x1ba>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <UART_SetConfig+0x19a>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d008      	beq.n	8008492 <UART_SetConfig+0x1aa>
 8008480:	e00f      	b.n	80084a2 <UART_SetConfig+0x1ba>
 8008482:	2300      	movs	r3, #0
 8008484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008488:	e0ad      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800848a:	2302      	movs	r3, #2
 800848c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008490:	e0a9      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008492:	2304      	movs	r3, #4
 8008494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008498:	e0a5      	b.n	80085e6 <UART_SetConfig+0x2fe>
 800849a:	2308      	movs	r3, #8
 800849c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a0:	e0a1      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084a2:	2310      	movs	r3, #16
 80084a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a8:	e09d      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a4a      	ldr	r2, [pc, #296]	@ (80085d8 <UART_SetConfig+0x2f0>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d125      	bne.n	8008500 <UART_SetConfig+0x218>
 80084b4:	4b45      	ldr	r3, [pc, #276]	@ (80085cc <UART_SetConfig+0x2e4>)
 80084b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80084be:	2bc0      	cmp	r3, #192	@ 0xc0
 80084c0:	d016      	beq.n	80084f0 <UART_SetConfig+0x208>
 80084c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80084c4:	d818      	bhi.n	80084f8 <UART_SetConfig+0x210>
 80084c6:	2b80      	cmp	r3, #128	@ 0x80
 80084c8:	d00a      	beq.n	80084e0 <UART_SetConfig+0x1f8>
 80084ca:	2b80      	cmp	r3, #128	@ 0x80
 80084cc:	d814      	bhi.n	80084f8 <UART_SetConfig+0x210>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <UART_SetConfig+0x1f0>
 80084d2:	2b40      	cmp	r3, #64	@ 0x40
 80084d4:	d008      	beq.n	80084e8 <UART_SetConfig+0x200>
 80084d6:	e00f      	b.n	80084f8 <UART_SetConfig+0x210>
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084de:	e082      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	e07e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	e07a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f6:	e076      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fe:	e072      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a35      	ldr	r2, [pc, #212]	@ (80085dc <UART_SetConfig+0x2f4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d12a      	bne.n	8008560 <UART_SetConfig+0x278>
 800850a:	4b30      	ldr	r3, [pc, #192]	@ (80085cc <UART_SetConfig+0x2e4>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008518:	d01a      	beq.n	8008550 <UART_SetConfig+0x268>
 800851a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800851e:	d81b      	bhi.n	8008558 <UART_SetConfig+0x270>
 8008520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008524:	d00c      	beq.n	8008540 <UART_SetConfig+0x258>
 8008526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852a:	d815      	bhi.n	8008558 <UART_SetConfig+0x270>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <UART_SetConfig+0x250>
 8008530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008534:	d008      	beq.n	8008548 <UART_SetConfig+0x260>
 8008536:	e00f      	b.n	8008558 <UART_SetConfig+0x270>
 8008538:	2300      	movs	r3, #0
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800853e:	e052      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008540:	2302      	movs	r3, #2
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008546:	e04e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800854e:	e04a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008556:	e046      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800855e:	e042      	b.n	80085e6 <UART_SetConfig+0x2fe>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a17      	ldr	r2, [pc, #92]	@ (80085c4 <UART_SetConfig+0x2dc>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d13a      	bne.n	80085e0 <UART_SetConfig+0x2f8>
 800856a:	4b18      	ldr	r3, [pc, #96]	@ (80085cc <UART_SetConfig+0x2e4>)
 800856c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008578:	d01a      	beq.n	80085b0 <UART_SetConfig+0x2c8>
 800857a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800857e:	d81b      	bhi.n	80085b8 <UART_SetConfig+0x2d0>
 8008580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008584:	d00c      	beq.n	80085a0 <UART_SetConfig+0x2b8>
 8008586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800858a:	d815      	bhi.n	80085b8 <UART_SetConfig+0x2d0>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <UART_SetConfig+0x2b0>
 8008590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008594:	d008      	beq.n	80085a8 <UART_SetConfig+0x2c0>
 8008596:	e00f      	b.n	80085b8 <UART_SetConfig+0x2d0>
 8008598:	2300      	movs	r3, #0
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859e:	e022      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085a0:	2302      	movs	r3, #2
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a6:	e01e      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085a8:	2304      	movs	r3, #4
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ae:	e01a      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085b0:	2308      	movs	r3, #8
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b6:	e016      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085b8:	2310      	movs	r3, #16
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085be:	e012      	b.n	80085e6 <UART_SetConfig+0x2fe>
 80085c0:	cfff69f3 	.word	0xcfff69f3
 80085c4:	40008000 	.word	0x40008000
 80085c8:	40013800 	.word	0x40013800
 80085cc:	40021000 	.word	0x40021000
 80085d0:	40004400 	.word	0x40004400
 80085d4:	40004800 	.word	0x40004800
 80085d8:	40004c00 	.word	0x40004c00
 80085dc:	40005000 	.word	0x40005000
 80085e0:	2310      	movs	r3, #16
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4aae      	ldr	r2, [pc, #696]	@ (80088a4 <UART_SetConfig+0x5bc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	f040 8097 	bne.w	8008720 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d823      	bhi.n	8008642 <UART_SetConfig+0x35a>
 80085fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <UART_SetConfig+0x318>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008625 	.word	0x08008625
 8008604:	08008643 	.word	0x08008643
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008643 	.word	0x08008643
 8008610:	08008633 	.word	0x08008633
 8008614:	08008643 	.word	0x08008643
 8008618:	08008643 	.word	0x08008643
 800861c:	08008643 	.word	0x08008643
 8008620:	0800863b 	.word	0x0800863b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008624:	f7fd ff72 	bl	800650c <HAL_RCC_GetPCLK1Freq>
 8008628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800862a:	e010      	b.n	800864e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800862c:	4b9e      	ldr	r3, [pc, #632]	@ (80088a8 <UART_SetConfig+0x5c0>)
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008630:	e00d      	b.n	800864e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008632:	f7fd fefd 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 8008636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008638:	e009      	b.n	800864e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008640:	e005      	b.n	800864e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800864c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8130 	beq.w	80088b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	4a94      	ldr	r2, [pc, #592]	@ (80088ac <UART_SetConfig+0x5c4>)
 800865c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008660:	461a      	mov	r2, r3
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	fbb3 f3f2 	udiv	r3, r3, r2
 8008668:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	4413      	add	r3, r2
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	429a      	cmp	r2, r3
 8008678:	d305      	bcc.n	8008686 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	429a      	cmp	r2, r3
 8008684:	d903      	bls.n	800868e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800868c:	e113      	b.n	80088b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	2200      	movs	r2, #0
 8008692:	60bb      	str	r3, [r7, #8]
 8008694:	60fa      	str	r2, [r7, #12]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	4a84      	ldr	r2, [pc, #528]	@ (80088ac <UART_SetConfig+0x5c4>)
 800869c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2200      	movs	r2, #0
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086b0:	f7f8 fb2a 	bl	8000d08 <__aeabi_uldivmod>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	020b      	lsls	r3, r1, #8
 80086c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086ca:	0202      	lsls	r2, r0, #8
 80086cc:	6979      	ldr	r1, [r7, #20]
 80086ce:	6849      	ldr	r1, [r1, #4]
 80086d0:	0849      	lsrs	r1, r1, #1
 80086d2:	2000      	movs	r0, #0
 80086d4:	460c      	mov	r4, r1
 80086d6:	4605      	mov	r5, r0
 80086d8:	eb12 0804 	adds.w	r8, r2, r4
 80086dc:	eb43 0905 	adc.w	r9, r3, r5
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	469a      	mov	sl, r3
 80086e8:	4693      	mov	fp, r2
 80086ea:	4652      	mov	r2, sl
 80086ec:	465b      	mov	r3, fp
 80086ee:	4640      	mov	r0, r8
 80086f0:	4649      	mov	r1, r9
 80086f2:	f7f8 fb09 	bl	8000d08 <__aeabi_uldivmod>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4613      	mov	r3, r2
 80086fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008704:	d308      	bcc.n	8008718 <UART_SetConfig+0x430>
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800870c:	d204      	bcs.n	8008718 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6a3a      	ldr	r2, [r7, #32]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	e0ce      	b.n	80088b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800871e:	e0ca      	b.n	80088b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008728:	d166      	bne.n	80087f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800872a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800872e:	2b08      	cmp	r3, #8
 8008730:	d827      	bhi.n	8008782 <UART_SetConfig+0x49a>
 8008732:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <UART_SetConfig+0x450>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008765 	.word	0x08008765
 8008740:	0800876d 	.word	0x0800876d
 8008744:	08008783 	.word	0x08008783
 8008748:	08008773 	.word	0x08008773
 800874c:	08008783 	.word	0x08008783
 8008750:	08008783 	.word	0x08008783
 8008754:	08008783 	.word	0x08008783
 8008758:	0800877b 	.word	0x0800877b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800875c:	f7fd fed6 	bl	800650c <HAL_RCC_GetPCLK1Freq>
 8008760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008762:	e014      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008764:	f7fd fee8 	bl	8006538 <HAL_RCC_GetPCLK2Freq>
 8008768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800876a:	e010      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800876c:	4b4e      	ldr	r3, [pc, #312]	@ (80088a8 <UART_SetConfig+0x5c0>)
 800876e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008770:	e00d      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008772:	f7fd fe5d 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 8008776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008778:	e009      	b.n	800878e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800877a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800877e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008780:	e005      	b.n	800878e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800878c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8090 	beq.w	80088b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879a:	4a44      	ldr	r2, [pc, #272]	@ (80088ac <UART_SetConfig+0x5c4>)
 800879c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a8:	005a      	lsls	r2, r3, #1
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	441a      	add	r2, r3
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d916      	bls.n	80087f0 <UART_SetConfig+0x508>
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c8:	d212      	bcs.n	80087f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f023 030f 	bic.w	r3, r3, #15
 80087d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	b29a      	uxth	r2, r3
 80087e0:	8bfb      	ldrh	r3, [r7, #30]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	8bfa      	ldrh	r2, [r7, #30]
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	e062      	b.n	80088b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087f6:	e05e      	b.n	80088b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	d828      	bhi.n	8008852 <UART_SetConfig+0x56a>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <UART_SetConfig+0x520>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800882d 	.word	0x0800882d
 800880c:	08008835 	.word	0x08008835
 8008810:	0800883d 	.word	0x0800883d
 8008814:	08008853 	.word	0x08008853
 8008818:	08008843 	.word	0x08008843
 800881c:	08008853 	.word	0x08008853
 8008820:	08008853 	.word	0x08008853
 8008824:	08008853 	.word	0x08008853
 8008828:	0800884b 	.word	0x0800884b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800882c:	f7fd fe6e 	bl	800650c <HAL_RCC_GetPCLK1Freq>
 8008830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008832:	e014      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008834:	f7fd fe80 	bl	8006538 <HAL_RCC_GetPCLK2Freq>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800883a:	e010      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800883c:	4b1a      	ldr	r3, [pc, #104]	@ (80088a8 <UART_SetConfig+0x5c0>)
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008840:	e00d      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008842:	f7fd fdf5 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 8008846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008848:	e009      	b.n	800885e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008850:	e005      	b.n	800885e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800885c:	bf00      	nop
    }

    if (pclk != 0U)
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d028      	beq.n	80088b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	4a10      	ldr	r2, [pc, #64]	@ (80088ac <UART_SetConfig+0x5c4>)
 800886a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800886e:	461a      	mov	r2, r3
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	fbb3 f2f2 	udiv	r2, r3, r2
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	441a      	add	r2, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	fbb2 f3f3 	udiv	r3, r2, r3
 8008886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d910      	bls.n	80088b0 <UART_SetConfig+0x5c8>
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008894:	d20c      	bcs.n	80088b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	b29a      	uxth	r2, r3
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60da      	str	r2, [r3, #12]
 80088a0:	e009      	b.n	80088b6 <UART_SetConfig+0x5ce>
 80088a2:	bf00      	nop
 80088a4:	40008000 	.word	0x40008000
 80088a8:	00f42400 	.word	0x00f42400
 80088ac:	0802082c 	.word	0x0802082c
      }
      else
      {
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3730      	adds	r7, #48	@ 0x30
 80088da:	46bd      	mov	sp, r7
 80088dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01a      	beq.n	80089f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089de:	d10a      	bne.n	80089f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	605a      	str	r2, [r3, #4]
  }
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b098      	sub	sp, #96	@ 0x60
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a34:	f7fb fbd6 	bl	80041e4 <HAL_GetTick>
 8008a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d12f      	bne.n	8008aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f88e 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d022      	beq.n	8008aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e6      	bne.n	8008a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e063      	b.n	8008b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	d149      	bne.n	8008b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f857 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d03c      	beq.n	8008b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8008af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e6      	bne.n	8008ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b22:	61fa      	str	r2, [r7, #28]
 8008b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e012      	b.n	8008b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3758      	adds	r7, #88	@ 0x58
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b88:	e04f      	b.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b90:	d04b      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b92:	f7fb fb27 	bl	80041e4 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d302      	bcc.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e04e      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d037      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b80      	cmp	r3, #128	@ 0x80
 8008bbe:	d034      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d031      	beq.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d110      	bne.n	8008bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fa42 	bl	8009066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2208      	movs	r2, #8
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e029      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c04:	d111      	bne.n	8008c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 fa28 	bl	8009066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e00f      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4013      	ands	r3, r2
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d0a0      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b0a3      	sub	sp, #140	@ 0x8c
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	88fa      	ldrh	r2, [r7, #6]
 8008c74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c86:	d10e      	bne.n	8008ca6 <UART_Start_Receive_IT+0x52>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d105      	bne.n	8008c9c <UART_Start_Receive_IT+0x48>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008c96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c9a:	e02d      	b.n	8008cf8 <UART_Start_Receive_IT+0xa4>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	22ff      	movs	r2, #255	@ 0xff
 8008ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ca4:	e028      	b.n	8008cf8 <UART_Start_Receive_IT+0xa4>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10d      	bne.n	8008cca <UART_Start_Receive_IT+0x76>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <UART_Start_Receive_IT+0x6c>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	22ff      	movs	r2, #255	@ 0xff
 8008cba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008cbe:	e01b      	b.n	8008cf8 <UART_Start_Receive_IT+0xa4>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	227f      	movs	r2, #127	@ 0x7f
 8008cc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008cc8:	e016      	b.n	8008cf8 <UART_Start_Receive_IT+0xa4>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cd2:	d10d      	bne.n	8008cf0 <UART_Start_Receive_IT+0x9c>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <UART_Start_Receive_IT+0x92>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	227f      	movs	r2, #127	@ 0x7f
 8008ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ce4:	e008      	b.n	8008cf8 <UART_Start_Receive_IT+0xa4>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	223f      	movs	r2, #63	@ 0x3f
 8008cea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008cee:	e003      	b.n	8008cf8 <UART_Start_Receive_IT+0xa4>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2222      	movs	r2, #34	@ 0x22
 8008d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d1a:	f043 0301 	orr.w	r3, r3, #1
 8008d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008d2c:	673a      	str	r2, [r7, #112]	@ 0x70
 8008d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008d32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008d3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e3      	bne.n	8008d08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d48:	d14f      	bne.n	8008dea <UART_Start_Receive_IT+0x196>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d349      	bcc.n	8008dea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d5e:	d107      	bne.n	8008d70 <UART_Start_Receive_IT+0x11c>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4a47      	ldr	r2, [pc, #284]	@ (8008e88 <UART_Start_Receive_IT+0x234>)
 8008d6c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d6e:	e002      	b.n	8008d76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4a46      	ldr	r2, [pc, #280]	@ (8008e8c <UART_Start_Receive_IT+0x238>)
 8008d74:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d01a      	beq.n	8008db4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008da2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008da6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e4      	bne.n	8008d7e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008dd4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008dd6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e5      	bne.n	8008db4 <UART_Start_Receive_IT+0x160>
 8008de8:	e046      	b.n	8008e78 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df2:	d107      	bne.n	8008e04 <UART_Start_Receive_IT+0x1b0>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a24      	ldr	r2, [pc, #144]	@ (8008e90 <UART_Start_Receive_IT+0x23c>)
 8008e00:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e02:	e002      	b.n	8008e0a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a23      	ldr	r2, [pc, #140]	@ (8008e94 <UART_Start_Receive_IT+0x240>)
 8008e08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d019      	beq.n	8008e46 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008e26:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e32:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e6      	bne.n	8008e12 <UART_Start_Receive_IT+0x1be>
 8008e44:	e018      	b.n	8008e78 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	613b      	str	r3, [r7, #16]
   return(result);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f043 0320 	orr.w	r3, r3, #32
 8008e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	461a      	mov	r2, r3
 8008e62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e64:	623b      	str	r3, [r7, #32]
 8008e66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	69f9      	ldr	r1, [r7, #28]
 8008e6a:	6a3a      	ldr	r2, [r7, #32]
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e6      	bne.n	8008e46 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	378c      	adds	r7, #140	@ 0x8c
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	08009b21 	.word	0x08009b21
 8008e8c:	080097bd 	.word	0x080097bd
 8008e90:	08009605 	.word	0x08009605
 8008e94:	0800944d 	.word	0x0800944d

08008e98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b096      	sub	sp, #88	@ 0x58
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2222      	movs	r2, #34	@ 0x22
 8008ec0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d02d      	beq.n	8008f2a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed4:	4a40      	ldr	r2, [pc, #256]	@ (8008fd8 <UART_Start_Receive_DMA+0x140>)
 8008ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ede:	4a3f      	ldr	r2, [pc, #252]	@ (8008fdc <UART_Start_Receive_DMA+0x144>)
 8008ee0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee8:	4a3d      	ldr	r2, [pc, #244]	@ (8008fe0 <UART_Start_Receive_DMA+0x148>)
 8008eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3324      	adds	r3, #36	@ 0x24
 8008f02:	4619      	mov	r1, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f08:	461a      	mov	r2, r3
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	f7fb fafe 	bl	800450c <HAL_DMA_Start_IT>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2210      	movs	r2, #16
 8008f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e051      	b.n	8008fce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d018      	beq.n	8008f64 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f46:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f52:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e6      	bne.n	8008f32 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3308      	adds	r3, #8
 8008f82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f84:	637a      	str	r2, [r7, #52]	@ 0x34
 8008f86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e5      	bne.n	8008f64 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fb8:	623a      	str	r2, [r7, #32]
 8008fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	69f9      	ldr	r1, [r7, #28]
 8008fbe:	6a3a      	ldr	r2, [r7, #32]
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e5      	bne.n	8008f98 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3758      	adds	r7, #88	@ 0x58
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	080091e9 	.word	0x080091e9
 8008fdc:	08009315 	.word	0x08009315
 8008fe0:	08009353 	.word	0x08009353

08008fe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b08f      	sub	sp, #60	@ 0x3c
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800900c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e6      	bne.n	8008fec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	60bb      	str	r3, [r7, #8]
   return(result);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009034:	633b      	str	r3, [r7, #48]	@ 0x30
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800903e:	61ba      	str	r2, [r7, #24]
 8009040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6979      	ldr	r1, [r7, #20]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	613b      	str	r3, [r7, #16]
   return(result);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e5      	bne.n	800901e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800905a:	bf00      	nop
 800905c:	373c      	adds	r7, #60	@ 0x3c
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009066:	b480      	push	{r7}
 8009068:	b095      	sub	sp, #84	@ 0x54
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800907c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800908c:	643b      	str	r3, [r7, #64]	@ 0x40
 800908e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e6      	bne.n	800906e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e3      	bne.n	80090a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d118      	bne.n	8009112 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f023 0310 	bic.w	r3, r3, #16
 80090f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090fe:	61bb      	str	r3, [r7, #24]
 8009100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6979      	ldr	r1, [r7, #20]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	613b      	str	r3, [r7, #16]
   return(result);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e6      	bne.n	80090e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009126:	bf00      	nop
 8009128:	3754      	adds	r7, #84	@ 0x54
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b090      	sub	sp, #64	@ 0x40
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b00      	cmp	r3, #0
 800914c:	d137      	bne.n	80091be <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800914e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009150:	2200      	movs	r2, #0
 8009152:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	623b      	str	r3, [r7, #32]
   return(result);
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800916c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800916e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009176:	633a      	str	r2, [r7, #48]	@ 0x30
 8009178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800917c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e5      	bne.n	8009156 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	60fb      	str	r3, [r7, #12]
   return(result);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a8:	61fb      	str	r3, [r7, #28]
 80091aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	69b9      	ldr	r1, [r7, #24]
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	617b      	str	r3, [r7, #20]
   return(result);
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e6      	bne.n	800918a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091bc:	e002      	b.n	80091c4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80091be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80091c0:	f7ff f85e 	bl	8008280 <HAL_UART_TxCpltCallback>
}
 80091c4:	bf00      	nop
 80091c6:	3740      	adds	r7, #64	@ 0x40
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f7ff f85a 	bl	8008294 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b09c      	sub	sp, #112	@ 0x70
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d171      	bne.n	80092e8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009206:	2200      	movs	r2, #0
 8009208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800920c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800921a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800921c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800922a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800922c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e6      	bne.n	800920c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800924e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	667b      	str	r3, [r7, #100]	@ 0x64
 8009256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3308      	adds	r3, #8
 800925c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800925e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009260:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800926c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e5      	bne.n	800923e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3308      	adds	r3, #8
 8009278:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	623b      	str	r3, [r7, #32]
   return(result);
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009288:	663b      	str	r3, [r7, #96]	@ 0x60
 800928a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009292:	633a      	str	r2, [r7, #48]	@ 0x30
 8009294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e5      	bne.n	8009272 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d118      	bne.n	80092e8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0310 	bic.w	r3, r3, #16
 80092ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	617b      	str	r3, [r7, #20]
   return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ea:	2200      	movs	r2, #0
 80092ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092fc:	4619      	mov	r1, r3
 80092fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009300:	f7fe ffe6 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009304:	e002      	b.n	800930c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009306:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009308:	f7f8 ff52 	bl	80021b0 <HAL_UART_RxCpltCallback>
}
 800930c:	bf00      	nop
 800930e:	3770      	adds	r7, #112	@ 0x70
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d109      	bne.n	8009344 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	b29b      	uxth	r3, r3
 800933a:	4619      	mov	r1, r3
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7fe ffc7 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009342:	e002      	b.n	800934a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7fe ffaf 	bl	80082a8 <HAL_UART_RxHalfCpltCallback>
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009366:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800936e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937a:	2b80      	cmp	r3, #128	@ 0x80
 800937c:	d109      	bne.n	8009392 <UART_DMAError+0x40>
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b21      	cmp	r3, #33	@ 0x21
 8009382:	d106      	bne.n	8009392 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800938c:	6978      	ldr	r0, [r7, #20]
 800938e:	f7ff fe29 	bl	8008fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939c:	2b40      	cmp	r3, #64	@ 0x40
 800939e:	d109      	bne.n	80093b4 <UART_DMAError+0x62>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b22      	cmp	r3, #34	@ 0x22
 80093a4:	d106      	bne.n	80093b4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093ae:	6978      	ldr	r0, [r7, #20]
 80093b0:	f7ff fe59 	bl	8009066 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ba:	f043 0210 	orr.w	r2, r3, #16
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093c4:	6978      	ldr	r0, [r7, #20]
 80093c6:	f7fe ff79 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ca:	bf00      	nop
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7fe ff67 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b088      	sub	sp, #32
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	60bb      	str	r3, [r7, #8]
   return(result);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009412:	61fb      	str	r3, [r7, #28]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6979      	ldr	r1, [r7, #20]
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	613b      	str	r3, [r7, #16]
   return(result);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e6      	bne.n	80093fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7fe ff1e 	bl	8008280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009444:	bf00      	nop
 8009446:	3720      	adds	r7, #32
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b09c      	sub	sp, #112	@ 0x70
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800945a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009464:	2b22      	cmp	r3, #34	@ 0x22
 8009466:	f040 80be 	bne.w	80095e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009474:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009478:	b2d9      	uxtb	r1, r3
 800947a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009484:	400a      	ands	r2, r1
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 80a1 	bne.w	80095f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e6      	bne.n	80094b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	f023 0301 	bic.w	r3, r3, #1
 80094fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3308      	adds	r3, #8
 8009504:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009506:	647a      	str	r2, [r7, #68]	@ 0x44
 8009508:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800950c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e5      	bne.n	80094e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a33      	ldr	r2, [pc, #204]	@ (8009600 <UART_RxISR_8BIT+0x1b4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d01f      	beq.n	8009578 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d018      	beq.n	8009578 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	623b      	str	r3, [r7, #32]
   return(result);
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800955a:	663b      	str	r3, [r7, #96]	@ 0x60
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009564:	633b      	str	r3, [r7, #48]	@ 0x30
 8009566:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800956a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e6      	bne.n	8009546 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800957c:	2b01      	cmp	r3, #1
 800957e:	d12e      	bne.n	80095de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	60fb      	str	r3, [r7, #12]
   return(result);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0310 	bic.w	r3, r3, #16
 800959a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095a4:	61fb      	str	r3, [r7, #28]
 80095a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	69b9      	ldr	r1, [r7, #24]
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	617b      	str	r3, [r7, #20]
   return(result);
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f003 0310 	and.w	r3, r3, #16
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d103      	bne.n	80095ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2210      	movs	r2, #16
 80095cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7fe fe7a 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095dc:	e00b      	b.n	80095f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7f8 fde6 	bl	80021b0 <HAL_UART_RxCpltCallback>
}
 80095e4:	e007      	b.n	80095f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f042 0208 	orr.w	r2, r2, #8
 80095f4:	619a      	str	r2, [r3, #24]
}
 80095f6:	bf00      	nop
 80095f8:	3770      	adds	r7, #112	@ 0x70
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	40008000 	.word	0x40008000

08009604 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b09c      	sub	sp, #112	@ 0x70
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009612:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800961c:	2b22      	cmp	r3, #34	@ 0x22
 800961e:	f040 80be 	bne.w	800979e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009628:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009630:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009632:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009636:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800963a:	4013      	ands	r3, r2
 800963c:	b29a      	uxth	r2, r3
 800963e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009640:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009646:	1c9a      	adds	r2, r3, #2
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 80a1 	bne.w	80097ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800967a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800967c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009680:	667b      	str	r3, [r7, #100]	@ 0x64
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800968a:	657b      	str	r3, [r7, #84]	@ 0x54
 800968c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009690:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e6      	bne.n	800966c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	f023 0301 	bic.w	r3, r3, #1
 80096b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3308      	adds	r3, #8
 80096bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096be:	643a      	str	r2, [r7, #64]	@ 0x40
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e5      	bne.n	800969e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a33      	ldr	r2, [pc, #204]	@ (80097b8 <UART_RxISR_16BIT+0x1b4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d01f      	beq.n	8009730 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d018      	beq.n	8009730 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	61fb      	str	r3, [r7, #28]
   return(result);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800971c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800971e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d12e      	bne.n	8009796 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	60bb      	str	r3, [r7, #8]
   return(result);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f023 0310 	bic.w	r3, r3, #16
 8009752:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800975c:	61bb      	str	r3, [r7, #24]
 800975e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6979      	ldr	r1, [r7, #20]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	613b      	str	r3, [r7, #16]
   return(result);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b10      	cmp	r3, #16
 800977c:	d103      	bne.n	8009786 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2210      	movs	r2, #16
 8009784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7fe fd9e 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009794:	e00b      	b.n	80097ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7f8 fd0a 	bl	80021b0 <HAL_UART_RxCpltCallback>
}
 800979c:	e007      	b.n	80097ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0208 	orr.w	r2, r2, #8
 80097ac:	619a      	str	r2, [r3, #24]
}
 80097ae:	bf00      	nop
 80097b0:	3770      	adds	r7, #112	@ 0x70
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40008000 	.word	0x40008000

080097bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b0ac      	sub	sp, #176	@ 0xb0
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097f2:	2b22      	cmp	r3, #34	@ 0x22
 80097f4:	f040 8183 	bne.w	8009afe <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009802:	e126      	b.n	8009a52 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800980e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009812:	b2d9      	uxtb	r1, r3
 8009814:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981e:	400a      	ands	r2, r1
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009834:	b29b      	uxth	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800984a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b00      	cmp	r3, #0
 8009854:	d053      	beq.n	80098fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2201      	movs	r2, #1
 8009874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987c:	f043 0201 	orr.w	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2202      	movs	r2, #2
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ac:	f043 0204 	orr.w	r2, r3, #4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2204      	movs	r2, #4
 80098d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098dc:	f043 0202 	orr.w	r2, r3, #2
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7fe fce3 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	f040 80a3 	bne.w	8009a52 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800991a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800991c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800992e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009930:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009934:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800993c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e4      	bne.n	800990c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800996a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800996c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009970:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e1      	bne.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a60      	ldr	r2, [pc, #384]	@ (8009b18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d021      	beq.n	80099e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01a      	beq.n	80099e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80099ce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e4      	bne.n	80099aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d130      	bne.n	8009a4a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	f023 0310 	bic.w	r3, r3, #16
 8009a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d103      	bne.n	8009a3a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2210      	movs	r2, #16
 8009a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7fe fc44 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a48:	e00e      	b.n	8009a68 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f8 fbb0 	bl	80021b0 <HAL_UART_RxCpltCallback>
        break;
 8009a50:	e00a      	b.n	8009a68 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a52:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d006      	beq.n	8009a68 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f47f aece 	bne.w	8009804 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d049      	beq.n	8009b0e <UART_RxISR_8BIT_FIFOEN+0x352>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a80:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d242      	bcs.n	8009b0e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ab4:	e841 2300 	strex	r3, r2, [r1]
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e3      	bne.n	8009a88 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a16      	ldr	r2, [pc, #88]	@ (8009b1c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009ac4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f043 0320 	orr.w	r3, r3, #32
 8009ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6979      	ldr	r1, [r7, #20]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	613b      	str	r3, [r7, #16]
   return(result);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e4      	bne.n	8009ac6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009afc:	e007      	b.n	8009b0e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	699a      	ldr	r2, [r3, #24]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f042 0208 	orr.w	r2, r2, #8
 8009b0c:	619a      	str	r2, [r3, #24]
}
 8009b0e:	bf00      	nop
 8009b10:	37b0      	adds	r7, #176	@ 0xb0
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	40008000 	.word	0x40008000
 8009b1c:	0800944d 	.word	0x0800944d

08009b20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b0ae      	sub	sp, #184	@ 0xb8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b56:	2b22      	cmp	r3, #34	@ 0x22
 8009b58:	f040 8187 	bne.w	8009e6a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b62:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b66:	e12a      	b.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009b7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009b82:	4013      	ands	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b90:	1c9a      	adds	r2, r3, #2
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d053      	beq.n	8009c66 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d011      	beq.n	8009bee <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be4:	f043 0201 	orr.w	r2, r3, #1
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d011      	beq.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c14:	f043 0204 	orr.w	r2, r3, #4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d011      	beq.n	8009c4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c44:	f043 0202 	orr.w	r2, r3, #2
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d006      	beq.n	8009c66 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7fe fb2f 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f040 80a5 	bne.w	8009dbe <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e2      	bne.n	8009c74 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cc4:	f023 0301 	bic.w	r3, r3, #1
 8009cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009cd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009cdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e1      	bne.n	8009cae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a60      	ldr	r2, [pc, #384]	@ (8009e84 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d021      	beq.n	8009d4c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d01a      	beq.n	8009d4c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d3a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e4      	bne.n	8009d16 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d130      	bne.n	8009db6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6a:	f023 0310 	bic.w	r3, r3, #16
 8009d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e4      	bne.n	8009d5a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	f003 0310 	and.w	r3, r3, #16
 8009d9a:	2b10      	cmp	r3, #16
 8009d9c:	d103      	bne.n	8009da6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2210      	movs	r2, #16
 8009da4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fe fa8e 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009db4:	e00e      	b.n	8009dd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7f8 f9fa 	bl	80021b0 <HAL_UART_RxCpltCallback>
        break;
 8009dbc:	e00a      	b.n	8009dd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dbe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d006      	beq.n	8009dd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f47f aeca 	bne.w	8009b68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dda:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d049      	beq.n	8009e7a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009dec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d242      	bcs.n	8009e7a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3308      	adds	r3, #8
 8009dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	623b      	str	r3, [r7, #32]
   return(result);
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e3      	bne.n	8009df4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a16      	ldr	r2, [pc, #88]	@ (8009e88 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009e30:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f043 0320 	orr.w	r3, r3, #32
 8009e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e54:	61fb      	str	r3, [r7, #28]
 8009e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e58:	69b9      	ldr	r1, [r7, #24]
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	e841 2300 	strex	r3, r2, [r1]
 8009e60:	617b      	str	r3, [r7, #20]
   return(result);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1e4      	bne.n	8009e32 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e68:	e007      	b.n	8009e7a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	699a      	ldr	r2, [r3, #24]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f042 0208 	orr.w	r2, r2, #8
 8009e78:	619a      	str	r2, [r3, #24]
}
 8009e7a:	bf00      	nop
 8009e7c:	37b8      	adds	r7, #184	@ 0xb8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40008000 	.word	0x40008000
 8009e88:	08009605 	.word	0x08009605

08009e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_UARTEx_DisableFifoMode+0x16>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e027      	b.n	8009f2e <HAL_UARTEx_DisableFifoMode+0x66>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2224      	movs	r2, #36	@ 0x24
 8009eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0201 	bic.w	r2, r2, #1
 8009f04:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d101      	bne.n	8009f52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e02d      	b.n	8009fae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2224      	movs	r2, #36	@ 0x24
 8009f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f850 	bl	800a034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d101      	bne.n	8009fce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e02d      	b.n	800a02a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2224      	movs	r2, #36	@ 0x24
 8009fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f022 0201 	bic.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f812 	bl	800a034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a040:	2b00      	cmp	r3, #0
 800a042:	d108      	bne.n	800a056 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a054:	e031      	b.n	800a0ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a056:	2308      	movs	r3, #8
 800a058:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a05a:	2308      	movs	r3, #8
 800a05c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	0e5b      	lsrs	r3, r3, #25
 800a066:	b2db      	uxtb	r3, r3
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	0f5b      	lsrs	r3, r3, #29
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	7b3a      	ldrb	r2, [r7, #12]
 800a082:	4911      	ldr	r1, [pc, #68]	@ (800a0c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a084:	5c8a      	ldrb	r2, [r1, r2]
 800a086:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a08a:	7b3a      	ldrb	r2, [r7, #12]
 800a08c:	490f      	ldr	r1, [pc, #60]	@ (800a0cc <UARTEx_SetNbDataToProcess+0x98>)
 800a08e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a090:	fb93 f3f2 	sdiv	r3, r3, r2
 800a094:	b29a      	uxth	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	7b7a      	ldrb	r2, [r7, #13]
 800a0a0:	4909      	ldr	r1, [pc, #36]	@ (800a0c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0a2:	5c8a      	ldrb	r2, [r1, r2]
 800a0a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0a8:	7b7a      	ldrb	r2, [r7, #13]
 800a0aa:	4908      	ldr	r1, [pc, #32]	@ (800a0cc <UARTEx_SetNbDataToProcess+0x98>)
 800a0ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	08020844 	.word	0x08020844
 800a0cc:	0802084c 	.word	0x0802084c

0800a0d0 <__NVIC_SetPriority>:
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	db0a      	blt.n	800a0fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	490c      	ldr	r1, [pc, #48]	@ (800a11c <__NVIC_SetPriority+0x4c>)
 800a0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ee:	0112      	lsls	r2, r2, #4
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a0f8:	e00a      	b.n	800a110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	4908      	ldr	r1, [pc, #32]	@ (800a120 <__NVIC_SetPriority+0x50>)
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	3b04      	subs	r3, #4
 800a108:	0112      	lsls	r2, r2, #4
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	440b      	add	r3, r1
 800a10e:	761a      	strb	r2, [r3, #24]
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	e000e100 	.word	0xe000e100
 800a120:	e000ed00 	.word	0xe000ed00

0800a124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <SysTick_Handler+0x1c>)
 800a12a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a12c:	f002 fe6a 	bl	800ce04 <xTaskGetSchedulerState>
 800a130:	4603      	mov	r3, r0
 800a132:	2b01      	cmp	r3, #1
 800a134:	d001      	beq.n	800a13a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a136:	f003 ff9f 	bl	800e078 <xPortSysTickHandler>
  }
}
 800a13a:	bf00      	nop
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	e000e010 	.word	0xe000e010

0800a144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a148:	2100      	movs	r1, #0
 800a14a:	f06f 0004 	mvn.w	r0, #4
 800a14e:	f7ff ffbf 	bl	800a0d0 <__NVIC_SetPriority>
#endif
}
 800a152:	bf00      	nop
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	603b      	str	r3, [r7, #0]
  return(result);
 800a164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a16a:	f06f 0305 	mvn.w	r3, #5
 800a16e:	607b      	str	r3, [r7, #4]
 800a170:	e00c      	b.n	800a18c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a172:	4b0a      	ldr	r3, [pc, #40]	@ (800a19c <osKernelInitialize+0x44>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a17a:	4b08      	ldr	r3, [pc, #32]	@ (800a19c <osKernelInitialize+0x44>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a180:	2300      	movs	r3, #0
 800a182:	607b      	str	r3, [r7, #4]
 800a184:	e002      	b.n	800a18c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a18a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a18c:	687b      	ldr	r3, [r7, #4]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	2000fc68 	.word	0x2000fc68

0800a1a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1a6:	f3ef 8305 	mrs	r3, IPSR
 800a1aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a1ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800a1b2:	f06f 0305 	mvn.w	r3, #5
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	e010      	b.n	800a1dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e8 <osKernelStart+0x48>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d109      	bne.n	800a1d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1c2:	f7ff ffbf 	bl	800a144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1c6:	4b08      	ldr	r3, [pc, #32]	@ (800a1e8 <osKernelStart+0x48>)
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1cc:	f002 f8ec 	bl	800c3a8 <vTaskStartScheduler>
      stat = osOK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	607b      	str	r3, [r7, #4]
 800a1d4:	e002      	b.n	800a1dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1dc:	687b      	ldr	r3, [r7, #4]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	2000fc68 	.word	0x2000fc68

0800a1ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08e      	sub	sp, #56	@ 0x38
 800a1f0:	af04      	add	r7, sp, #16
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1fc:	f3ef 8305 	mrs	r3, IPSR
 800a200:	617b      	str	r3, [r7, #20]
  return(result);
 800a202:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a204:	2b00      	cmp	r3, #0
 800a206:	d17e      	bne.n	800a306 <osThreadNew+0x11a>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d07b      	beq.n	800a306 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a20e:	2380      	movs	r3, #128	@ 0x80
 800a210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a212:	2318      	movs	r3, #24
 800a214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a216:	2300      	movs	r3, #0
 800a218:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a21e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d045      	beq.n	800a2b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <osThreadNew+0x48>
        name = attr->name;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d008      	beq.n	800a25a <osThreadNew+0x6e>
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	2b38      	cmp	r3, #56	@ 0x38
 800a24c:	d805      	bhi.n	800a25a <osThreadNew+0x6e>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <osThreadNew+0x72>
        return (NULL);
 800a25a:	2300      	movs	r3, #0
 800a25c:	e054      	b.n	800a308 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	089b      	lsrs	r3, r3, #2
 800a26c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00e      	beq.n	800a294 <osThreadNew+0xa8>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a27c:	d90a      	bls.n	800a294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a282:	2b00      	cmp	r3, #0
 800a284:	d006      	beq.n	800a294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <osThreadNew+0xa8>
        mem = 1;
 800a28e:	2301      	movs	r3, #1
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e010      	b.n	800a2b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10c      	bne.n	800a2b6 <osThreadNew+0xca>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d108      	bne.n	800a2b6 <osThreadNew+0xca>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d104      	bne.n	800a2b6 <osThreadNew+0xca>
          mem = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
 800a2b0:	e001      	b.n	800a2b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d110      	bne.n	800a2de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2c4:	9202      	str	r2, [sp, #8]
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	6a3a      	ldr	r2, [r7, #32]
 800a2d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f001 fe74 	bl	800bfc0 <xTaskCreateStatic>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	e013      	b.n	800a306 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d110      	bne.n	800a306 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	f107 0310 	add.w	r3, r7, #16
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f001 fec2 	bl	800c080 <xTaskCreate>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d001      	beq.n	800a306 <osThreadNew+0x11a>
            hTask = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a306:	693b      	ldr	r3, [r7, #16]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3728      	adds	r7, #40	@ 0x28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af02      	add	r7, sp, #8
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <osThreadFlagsSet+0x1a>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	da03      	bge.n	800a332 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a32a:	f06f 0303 	mvn.w	r3, #3
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	e035      	b.n	800a39e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a336:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a338:	f3ef 8305 	mrs	r3, IPSR
 800a33c:	613b      	str	r3, [r7, #16]
  return(result);
 800a33e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a340:	2b00      	cmp	r3, #0
 800a342:	d01f      	beq.n	800a384 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a344:	2300      	movs	r3, #0
 800a346:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a348:	f107 0308 	add.w	r3, r7, #8
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	2300      	movs	r3, #0
 800a350:	2201      	movs	r2, #1
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	f003 f81d 	bl	800d394 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	2200      	movs	r2, #0
 800a360:	9200      	str	r2, [sp, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	2100      	movs	r1, #0
 800a366:	6978      	ldr	r0, [r7, #20]
 800a368:	f003 f814 	bl	800d394 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d015      	beq.n	800a39e <osThreadFlagsSet+0x8e>
 800a372:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <osThreadFlagsSet+0x98>)
 800a374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	e00c      	b.n	800a39e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a384:	2300      	movs	r3, #0
 800a386:	2201      	movs	r2, #1
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6978      	ldr	r0, [r7, #20]
 800a38c:	f002 ff40 	bl	800d210 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a390:	f107 030c 	add.w	r3, r7, #12
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	6978      	ldr	r0, [r7, #20]
 800a39a:	f002 ff39 	bl	800d210 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a39e:	68fb      	ldr	r3, [r7, #12]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08c      	sub	sp, #48	@ 0x30
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b8:	f3ef 8305 	mrs	r3, IPSR
 800a3bc:	617b      	str	r3, [r7, #20]
  return(result);
 800a3be:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a3c4:	f06f 0305 	mvn.w	r3, #5
 800a3c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3ca:	e06b      	b.n	800a4a4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da03      	bge.n	800a3da <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a3d2:	f06f 0303 	mvn.w	r3, #3
 800a3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3d8:	e064      	b.n	800a4a4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f003 0302 	and.w	r3, r3, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3e8:	e001      	b.n	800a3ee <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800a3f6:	f002 f8f3 	bl	800c5e0 <xTaskGetTickCount>
 800a3fa:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a3fc:	f107 0210 	add.w	r2, r7, #16
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a404:	2000      	movs	r0, #0
 800a406:	f002 fea3 	bl	800d150 <xTaskNotifyWait>
 800a40a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d137      	bne.n	800a482 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4013      	ands	r3, r2
 800a418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a41e:	4313      	orrs	r3, r2
 800a420:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00c      	beq.n	800a446 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a430:	4013      	ands	r3, r2
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	429a      	cmp	r2, r3
 800a436:	d032      	beq.n	800a49e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10f      	bne.n	800a45e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a43e:	f06f 0302 	mvn.w	r3, #2
 800a442:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a444:	e02e      	b.n	800a4a4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d128      	bne.n	800a4a2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d103      	bne.n	800a45e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a456:	f06f 0302 	mvn.w	r3, #2
 800a45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a45c:	e022      	b.n	800a4a4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a45e:	f002 f8bf 	bl	800c5e0 <xTaskGetTickCount>
 800a462:	4602      	mov	r2, r0
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	429a      	cmp	r2, r3
 800a470:	d902      	bls.n	800a478 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	627b      	str	r3, [r7, #36]	@ 0x24
 800a476:	e00e      	b.n	800a496 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a480:	e009      	b.n	800a496 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d103      	bne.n	800a490 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a488:	f06f 0302 	mvn.w	r3, #2
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a48e:	e002      	b.n	800a496 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a490:	f06f 0301 	mvn.w	r3, #1
 800a494:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1af      	bne.n	800a3fc <osThreadFlagsWait+0x50>
 800a49c:	e002      	b.n	800a4a4 <osThreadFlagsWait+0xf8>
            break;
 800a49e:	bf00      	nop
 800a4a0:	e000      	b.n	800a4a4 <osThreadFlagsWait+0xf8>
            break;
 800a4a2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3730      	adds	r7, #48	@ 0x30
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4b6:	f3ef 8305 	mrs	r3, IPSR
 800a4ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <osDelay+0x1c>
    stat = osErrorISR;
 800a4c2:	f06f 0305 	mvn.w	r3, #5
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	e007      	b.n	800a4da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <osDelay+0x2c>
      vTaskDelay(ticks);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 ff31 	bl	800c33c <vTaskDelay>
    }
  }

  return (stat);
 800a4da:	68fb      	ldr	r3, [r7, #12]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f0:	f3ef 8305 	mrs	r3, IPSR
 800a4f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4f6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d12d      	bne.n	800a558 <osEventFlagsNew+0x74>
    mem = -1;
 800a4fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a500:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d015      	beq.n	800a534 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d006      	beq.n	800a51e <osEventFlagsNew+0x3a>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2b1f      	cmp	r3, #31
 800a516:	d902      	bls.n	800a51e <osEventFlagsNew+0x3a>
        mem = 1;
 800a518:	2301      	movs	r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	e00c      	b.n	800a538 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d108      	bne.n	800a538 <osEventFlagsNew+0x54>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d104      	bne.n	800a538 <osEventFlagsNew+0x54>
          mem = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	e001      	b.n	800a538 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d106      	bne.n	800a54c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 faf6 	bl	800ab34 <xEventGroupCreateStatic>
 800a548:	6178      	str	r0, [r7, #20]
 800a54a:	e005      	b.n	800a558 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d102      	bne.n	800a558 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a552:	f000 fb28 	bl	800aba6 <xEventGroupCreate>
 800a556:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a558:	697b      	ldr	r3, [r7, #20]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <osEventFlagsSet+0x1c>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a57e:	d303      	bcc.n	800a588 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800a580:	f06f 0303 	mvn.w	r3, #3
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	e028      	b.n	800a5da <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a588:	f3ef 8305 	mrs	r3, IPSR
 800a58c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a58e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01d      	beq.n	800a5d0 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800a594:	2300      	movs	r3, #0
 800a596:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a598:	f107 0308 	add.w	r3, r7, #8
 800a59c:	461a      	mov	r2, r3
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6938      	ldr	r0, [r7, #16]
 800a5a2:	f000 fca9 	bl	800aef8 <xEventGroupSetBitsFromISR>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800a5ac:	f06f 0302 	mvn.w	r3, #2
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	e012      	b.n	800a5da <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00d      	beq.n	800a5da <osEventFlagsSet+0x76>
 800a5be:	4b09      	ldr	r3, [pc, #36]	@ (800a5e4 <osEventFlagsSet+0x80>)
 800a5c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	e004      	b.n	800a5da <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6938      	ldr	r0, [r7, #16]
 800a5d4:	f000 fbd4 	bl	800ad80 <xEventGroupSetBits>
 800a5d8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800a5da:	697b      	ldr	r3, [r7, #20]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	@ 0x30
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <osEventFlagsWait+0x20>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a606:	d303      	bcc.n	800a610 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800a608:	f06f 0303 	mvn.w	r3, #3
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	e04b      	b.n	800a6a8 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a610:	f3ef 8305 	mrs	r3, IPSR
 800a614:	617b      	str	r3, [r7, #20]
  return(result);
 800a616:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800a61c:	f06f 0305 	mvn.w	r3, #5
 800a620:	61fb      	str	r3, [r7, #28]
 800a622:	e041      	b.n	800a6a8 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800a62e:	2301      	movs	r3, #1
 800a630:	627b      	str	r3, [r7, #36]	@ 0x24
 800a632:	e001      	b.n	800a638 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800a634:	2300      	movs	r3, #0
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800a642:	2300      	movs	r3, #0
 800a644:	623b      	str	r3, [r7, #32]
 800a646:	e001      	b.n	800a64c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800a648:	2301      	movs	r3, #1
 800a64a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	6a3a      	ldr	r2, [r7, #32]
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	69b8      	ldr	r0, [r7, #24]
 800a658:	f000 fac0 	bl	800abdc <xEventGroupWaitBits>
 800a65c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d010      	beq.n	800a68a <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	4013      	ands	r3, r2
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	429a      	cmp	r2, r3
 800a672:	d019      	beq.n	800a6a8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800a67a:	f06f 0301 	mvn.w	r3, #1
 800a67e:	61fb      	str	r3, [r7, #28]
 800a680:	e012      	b.n	800a6a8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a682:	f06f 0302 	mvn.w	r3, #2
 800a686:	61fb      	str	r3, [r7, #28]
 800a688:	e00e      	b.n	800a6a8 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800a69a:	f06f 0301 	mvn.w	r3, #1
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	e002      	b.n	800a6a8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a6a2:	f06f 0302 	mvn.w	r3, #2
 800a6a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800a6a8:	69fb      	ldr	r3, [r7, #28]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3728      	adds	r7, #40	@ 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b08a      	sub	sp, #40	@ 0x28
 800a6b6:	af02      	add	r7, sp, #8
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6c2:	f3ef 8305 	mrs	r3, IPSR
 800a6c6:	613b      	str	r3, [r7, #16]
  return(result);
 800a6c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d175      	bne.n	800a7ba <osSemaphoreNew+0x108>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d072      	beq.n	800a7ba <osSemaphoreNew+0x108>
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d86e      	bhi.n	800a7ba <osSemaphoreNew+0x108>
    mem = -1;
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d015      	beq.n	800a714 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d006      	beq.n	800a6fe <osSemaphoreNew+0x4c>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	2b4f      	cmp	r3, #79	@ 0x4f
 800a6f6:	d902      	bls.n	800a6fe <osSemaphoreNew+0x4c>
        mem = 1;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	61bb      	str	r3, [r7, #24]
 800a6fc:	e00c      	b.n	800a718 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d108      	bne.n	800a718 <osSemaphoreNew+0x66>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d104      	bne.n	800a718 <osSemaphoreNew+0x66>
          mem = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	e001      	b.n	800a718 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a71e:	d04c      	beq.n	800a7ba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d128      	bne.n	800a778 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d10a      	bne.n	800a742 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2203      	movs	r2, #3
 800a732:	9200      	str	r2, [sp, #0]
 800a734:	2200      	movs	r2, #0
 800a736:	2100      	movs	r1, #0
 800a738:	2001      	movs	r0, #1
 800a73a:	f000 fd0f 	bl	800b15c <xQueueGenericCreateStatic>
 800a73e:	61f8      	str	r0, [r7, #28]
 800a740:	e005      	b.n	800a74e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a742:	2203      	movs	r2, #3
 800a744:	2100      	movs	r1, #0
 800a746:	2001      	movs	r0, #1
 800a748:	f000 fd85 	bl	800b256 <xQueueGenericCreate>
 800a74c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d022      	beq.n	800a79a <osSemaphoreNew+0xe8>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d01f      	beq.n	800a79a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a75a:	2300      	movs	r3, #0
 800a75c:	2200      	movs	r2, #0
 800a75e:	2100      	movs	r1, #0
 800a760:	69f8      	ldr	r0, [r7, #28]
 800a762:	f000 fe45 	bl	800b3f0 <xQueueGenericSend>
 800a766:	4603      	mov	r3, r0
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d016      	beq.n	800a79a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a76c:	69f8      	ldr	r0, [r7, #28]
 800a76e:	f001 fa53 	bl	800bc18 <vQueueDelete>
            hSemaphore = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	61fb      	str	r3, [r7, #28]
 800a776:	e010      	b.n	800a79a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d108      	bne.n	800a790 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	461a      	mov	r2, r3
 800a784:	68b9      	ldr	r1, [r7, #8]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 fdc3 	bl	800b312 <xQueueCreateCountingSemaphoreStatic>
 800a78c:	61f8      	str	r0, [r7, #28]
 800a78e:	e004      	b.n	800a79a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fdf6 	bl	800b384 <xQueueCreateCountingSemaphore>
 800a798:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00c      	beq.n	800a7ba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <osSemaphoreNew+0xfc>
          name = attr->name;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	e001      	b.n	800a7b2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a7b2:	6979      	ldr	r1, [r7, #20]
 800a7b4:	69f8      	ldr	r0, [r7, #28]
 800a7b6:	f001 fb7b 	bl	800beb0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a7ba:	69fb      	ldr	r3, [r7, #28]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3720      	adds	r7, #32
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a7dc:	f06f 0303 	mvn.w	r3, #3
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	e039      	b.n	800a858 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7e4:	f3ef 8305 	mrs	r3, IPSR
 800a7e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d022      	beq.n	800a836 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a7f6:	f06f 0303 	mvn.w	r3, #3
 800a7fa:	617b      	str	r3, [r7, #20]
 800a7fc:	e02c      	b.n	800a858 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a7fe:	2300      	movs	r3, #0
 800a800:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	461a      	mov	r2, r3
 800a808:	2100      	movs	r1, #0
 800a80a:	6938      	ldr	r0, [r7, #16]
 800a80c:	f001 f982 	bl	800bb14 <xQueueReceiveFromISR>
 800a810:	4603      	mov	r3, r0
 800a812:	2b01      	cmp	r3, #1
 800a814:	d003      	beq.n	800a81e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a816:	f06f 0302 	mvn.w	r3, #2
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e01c      	b.n	800a858 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d019      	beq.n	800a858 <osSemaphoreAcquire+0x94>
 800a824:	4b0f      	ldr	r3, [pc, #60]	@ (800a864 <osSemaphoreAcquire+0xa0>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	e010      	b.n	800a858 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6938      	ldr	r0, [r7, #16]
 800a83a:	f001 f85b 	bl	800b8f4 <xQueueSemaphoreTake>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d009      	beq.n	800a858 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a84a:	f06f 0301 	mvn.w	r3, #1
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	e002      	b.n	800a858 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a852:	f06f 0302 	mvn.w	r3, #2
 800a856:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a858:	697b      	ldr	r3, [r7, #20]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	e000ed04 	.word	0xe000ed04

0800a868 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	@ 0x28
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a874:	2300      	movs	r3, #0
 800a876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a878:	f3ef 8305 	mrs	r3, IPSR
 800a87c:	613b      	str	r3, [r7, #16]
  return(result);
 800a87e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a880:	2b00      	cmp	r3, #0
 800a882:	d15f      	bne.n	800a944 <osMessageQueueNew+0xdc>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d05c      	beq.n	800a944 <osMessageQueueNew+0xdc>
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d059      	beq.n	800a944 <osMessageQueueNew+0xdc>
    mem = -1;
 800a890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a894:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d029      	beq.n	800a8f0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d012      	beq.n	800a8ca <osMessageQueueNew+0x62>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	2b4f      	cmp	r3, #79	@ 0x4f
 800a8aa:	d90e      	bls.n	800a8ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00a      	beq.n	800a8ca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695a      	ldr	r2, [r3, #20]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	fb01 f303 	mul.w	r3, r1, r3
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d302      	bcc.n	800a8ca <osMessageQueueNew+0x62>
        mem = 1;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	61bb      	str	r3, [r7, #24]
 800a8c8:	e014      	b.n	800a8f4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d110      	bne.n	800a8f4 <osMessageQueueNew+0x8c>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10c      	bne.n	800a8f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d108      	bne.n	800a8f4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d104      	bne.n	800a8f4 <osMessageQueueNew+0x8c>
          mem = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	e001      	b.n	800a8f4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d10b      	bne.n	800a912 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691a      	ldr	r2, [r3, #16]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2100      	movs	r1, #0
 800a904:	9100      	str	r1, [sp, #0]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 fc27 	bl	800b15c <xQueueGenericCreateStatic>
 800a90e:	61f8      	str	r0, [r7, #28]
 800a910:	e008      	b.n	800a924 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d105      	bne.n	800a924 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a918:	2200      	movs	r2, #0
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 fc9a 	bl	800b256 <xQueueGenericCreate>
 800a922:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00c      	beq.n	800a944 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	e001      	b.n	800a93c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a93c:	6979      	ldr	r1, [r7, #20]
 800a93e:	69f8      	ldr	r0, [r7, #28]
 800a940:	f001 fab6 	bl	800beb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a944:	69fb      	ldr	r3, [r7, #28]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3720      	adds	r7, #32
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a950:	b580      	push	{r7, lr}
 800a952:	b088      	sub	sp, #32
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	4613      	mov	r3, r2
 800a95e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a968:	f3ef 8305 	mrs	r3, IPSR
 800a96c:	617b      	str	r3, [r7, #20]
  return(result);
 800a96e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a970:	2b00      	cmp	r3, #0
 800a972:	d028      	beq.n	800a9c6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <osMessageQueuePut+0x36>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <osMessageQueuePut+0x36>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a986:	f06f 0303 	mvn.w	r3, #3
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	e038      	b.n	800aa00 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a992:	f107 0210 	add.w	r2, r7, #16
 800a996:	2300      	movs	r3, #0
 800a998:	68b9      	ldr	r1, [r7, #8]
 800a99a:	69b8      	ldr	r0, [r7, #24]
 800a99c:	f000 fe2a 	bl	800b5f4 <xQueueGenericSendFromISR>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d003      	beq.n	800a9ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a9a6:	f06f 0302 	mvn.w	r3, #2
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	e028      	b.n	800aa00 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d025      	beq.n	800aa00 <osMessageQueuePut+0xb0>
 800a9b4:	4b15      	ldr	r3, [pc, #84]	@ (800aa0c <osMessageQueuePut+0xbc>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	e01c      	b.n	800aa00 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <osMessageQueuePut+0x82>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a9d2:	f06f 0303 	mvn.w	r3, #3
 800a9d6:	61fb      	str	r3, [r7, #28]
 800a9d8:	e012      	b.n	800aa00 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a9da:	2300      	movs	r3, #0
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	69b8      	ldr	r0, [r7, #24]
 800a9e2:	f000 fd05 	bl	800b3f0 <xQueueGenericSend>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d009      	beq.n	800aa00 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a9f2:	f06f 0301 	mvn.w	r3, #1
 800a9f6:	61fb      	str	r3, [r7, #28]
 800a9f8:	e002      	b.n	800aa00 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a9fa:	f06f 0302 	mvn.w	r3, #2
 800a9fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa00:	69fb      	ldr	r3, [r7, #28]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa26:	f3ef 8305 	mrs	r3, IPSR
 800aa2a:	617b      	str	r3, [r7, #20]
  return(result);
 800aa2c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d028      	beq.n	800aa84 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <osMessageQueueGet+0x34>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <osMessageQueueGet+0x34>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aa44:	f06f 0303 	mvn.w	r3, #3
 800aa48:	61fb      	str	r3, [r7, #28]
 800aa4a:	e037      	b.n	800aabc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa50:	f107 0310 	add.w	r3, r7, #16
 800aa54:	461a      	mov	r2, r3
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	69b8      	ldr	r0, [r7, #24]
 800aa5a:	f001 f85b 	bl	800bb14 <xQueueReceiveFromISR>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d003      	beq.n	800aa6c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aa64:	f06f 0302 	mvn.w	r3, #2
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	e027      	b.n	800aabc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d024      	beq.n	800aabc <osMessageQueueGet+0xac>
 800aa72:	4b15      	ldr	r3, [pc, #84]	@ (800aac8 <osMessageQueueGet+0xb8>)
 800aa74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	e01b      	b.n	800aabc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <osMessageQueueGet+0x80>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d103      	bne.n	800aa98 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aa90:	f06f 0303 	mvn.w	r3, #3
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	e011      	b.n	800aabc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	69b8      	ldr	r0, [r7, #24]
 800aa9e:	f000 fe47 	bl	800b730 <xQueueReceive>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d009      	beq.n	800aabc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aaae:	f06f 0301 	mvn.w	r3, #1
 800aab2:	61fb      	str	r3, [r7, #28]
 800aab4:	e002      	b.n	800aabc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aab6:	f06f 0302 	mvn.w	r3, #2
 800aaba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aabc:	69fb      	ldr	r3, [r7, #28]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3720      	adds	r7, #32
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4a07      	ldr	r2, [pc, #28]	@ (800aaf8 <vApplicationGetIdleTaskMemory+0x2c>)
 800aadc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4a06      	ldr	r2, [pc, #24]	@ (800aafc <vApplicationGetIdleTaskMemory+0x30>)
 800aae2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2280      	movs	r2, #128	@ 0x80
 800aae8:	601a      	str	r2, [r3, #0]
}
 800aaea:	bf00      	nop
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	2000fc6c 	.word	0x2000fc6c
 800aafc:	2000fd14 	.word	0x2000fd14

0800ab00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4a07      	ldr	r2, [pc, #28]	@ (800ab2c <vApplicationGetTimerTaskMemory+0x2c>)
 800ab10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	4a06      	ldr	r2, [pc, #24]	@ (800ab30 <vApplicationGetTimerTaskMemory+0x30>)
 800ab16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab1e:	601a      	str	r2, [r3, #0]
}
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	2000ff14 	.word	0x2000ff14
 800ab30:	2000ffbc 	.word	0x2000ffbc

0800ab34 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10b      	bne.n	800ab5a <xEventGroupCreateStatic+0x26>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	613b      	str	r3, [r7, #16]
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop
 800ab58:	e7fd      	b.n	800ab56 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ab5a:	2320      	movs	r3, #32
 800ab5c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b20      	cmp	r3, #32
 800ab62:	d00b      	beq.n	800ab7c <xEventGroupCreateStatic+0x48>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	60fb      	str	r3, [r7, #12]
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	e7fd      	b.n	800ab78 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 f9c5 	bl	800af20 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ab9c:	697b      	ldr	r3, [r7, #20]
	}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800abac:	2020      	movs	r0, #32
 800abae:	f003 faf5 	bl	800e19c <pvPortMalloc>
 800abb2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f9ab 	bl	800af20 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800abd0:	687b      	ldr	r3, [r7, #4]
	}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b090      	sub	sp, #64	@ 0x40
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10b      	bne.n	800ac14 <xEventGroupWaitBits+0x38>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	623b      	str	r3, [r7, #32]
}
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	e7fd      	b.n	800ac10 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac1a:	d30b      	bcc.n	800ac34 <xEventGroupWaitBits+0x58>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	61fb      	str	r3, [r7, #28]
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	e7fd      	b.n	800ac30 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <xEventGroupWaitBits+0x76>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	61bb      	str	r3, [r7, #24]
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	e7fd      	b.n	800ac4e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac52:	f002 f8d7 	bl	800ce04 <xTaskGetSchedulerState>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <xEventGroupWaitBits+0x86>
 800ac5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <xEventGroupWaitBits+0x8a>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <xEventGroupWaitBits+0x8c>
 800ac66:	2300      	movs	r3, #0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10b      	bne.n	800ac84 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	617b      	str	r3, [r7, #20]
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	e7fd      	b.n	800ac80 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800ac84:	f001 fc00 	bl	800c488 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ac88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	68b9      	ldr	r1, [r7, #8]
 800ac92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac94:	f000 f90d 	bl	800aeb2 <prvTestWaitCondition>
 800ac98:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800ac9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00e      	beq.n	800acbe <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d028      	beq.n	800ad00 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800acae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	43db      	mvns	r3, r3
 800acb6:	401a      	ands	r2, r3
 800acb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	e020      	b.n	800ad00 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800acbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800acc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800acc8:	2301      	movs	r3, #1
 800acca:	633b      	str	r3, [r7, #48]	@ 0x30
 800accc:	e018      	b.n	800ad00 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800acda:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800ace2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ace8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800acea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acec:	1d18      	adds	r0, r3, #4
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf2:	4313      	orrs	r3, r2
 800acf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acf6:	4619      	mov	r1, r3
 800acf8:	f001 fdc8 	bl	800c88c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800ad00:	f001 fbd0 	bl	800c4a4 <xTaskResumeAll>
 800ad04:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800ad06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d031      	beq.n	800ad70 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d107      	bne.n	800ad22 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800ad12:	4b1a      	ldr	r3, [pc, #104]	@ (800ad7c <xEventGroupWaitBits+0x1a0>)
 800ad14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800ad22:	f002 f9e9 	bl	800d0f8 <uxTaskResetEventItemValue>
 800ad26:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800ad28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d11a      	bne.n	800ad68 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800ad32:	f003 f911 	bl	800df58 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800ad36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ad42:	f000 f8b6 	bl	800aeb2 <prvTestWaitCondition>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d009      	beq.n	800ad60 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d006      	beq.n	800ad60 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ad52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	43db      	mvns	r3, r3
 800ad5a:	401a      	ands	r2, r3
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ad60:	2301      	movs	r3, #1
 800ad62:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800ad64:	f003 f92a 	bl	800dfbc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ad68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ad70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3740      	adds	r7, #64	@ 0x40
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	e000ed04 	.word	0xe000ed04

0800ad80 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08e      	sub	sp, #56	@ 0x38
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10b      	bne.n	800adb4 <xEventGroupSetBits+0x34>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	613b      	str	r3, [r7, #16]
}
 800adae:	bf00      	nop
 800adb0:	bf00      	nop
 800adb2:	e7fd      	b.n	800adb0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adba:	d30b      	bcc.n	800add4 <xEventGroupSetBits+0x54>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	60fb      	str	r3, [r7, #12]
}
 800adce:	bf00      	nop
 800add0:	bf00      	nop
 800add2:	e7fd      	b.n	800add0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800add4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add6:	3304      	adds	r3, #4
 800add8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	3308      	adds	r3, #8
 800adde:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ade0:	f001 fb52 	bl	800c488 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	431a      	orrs	r2, r3
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800adf6:	e03c      	b.n	800ae72 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800adf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800adfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ae04:	2300      	movs	r3, #0
 800ae06:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ae0e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae16:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d108      	bne.n	800ae34 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ae22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae32:	e008      	b.n	800ae46 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ae34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d101      	bne.n	800ae46 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ae42:	2301      	movs	r3, #1
 800ae44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ae46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d010      	beq.n	800ae6e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ae56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ae5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ae66:	4619      	mov	r1, r3
 800ae68:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ae6a:	f001 fddd 	bl	800ca28 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800ae72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d1be      	bne.n	800adf8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ae7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	43db      	mvns	r3, r3
 800ae82:	401a      	ands	r2, r3
 800ae84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae86:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ae88:	f001 fb0c 	bl	800c4a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	681b      	ldr	r3, [r3, #0]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3738      	adds	r7, #56	@ 0x38
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff ff6b 	bl	800ad80 <xEventGroupSetBits>
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b087      	sub	sp, #28
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d107      	bne.n	800aed8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4013      	ands	r3, r2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00a      	beq.n	800aee8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800aed2:	2301      	movs	r3, #1
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	e007      	b.n	800aee8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	4013      	ands	r3, r2
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d101      	bne.n	800aee8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800aee8:	697b      	ldr	r3, [r7, #20]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	371c      	adds	r7, #28
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
	...

0800aef8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	68f9      	ldr	r1, [r7, #12]
 800af0a:	4804      	ldr	r0, [pc, #16]	@ (800af1c <xEventGroupSetBitsFromISR+0x24>)
 800af0c:	f002 fed6 	bl	800dcbc <xTimerPendFunctionCallFromISR>
 800af10:	6178      	str	r0, [r7, #20]

		return xReturn;
 800af12:	697b      	ldr	r3, [r7, #20]
	}
 800af14:	4618      	mov	r0, r3
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	0800ae99 	.word	0x0800ae99

0800af20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f103 0208 	add.w	r2, r3, #8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 0208 	add.w	r2, r3, #8
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f103 0208 	add.w	r2, r3, #8
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afd8:	d103      	bne.n	800afe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	e00c      	b.n	800affc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3308      	adds	r3, #8
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	e002      	b.n	800aff0 <vListInsert+0x2e>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d2f6      	bcs.n	800afea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	601a      	str	r2, [r3, #0]
}
 800b028:	bf00      	nop
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6892      	ldr	r2, [r2, #8]
 800b04a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6852      	ldr	r2, [r2, #4]
 800b054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d103      	bne.n	800b068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	1e5a      	subs	r2, r3, #1
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10b      	bne.n	800b0b4 <xQueueGenericReset+0x2c>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	60bb      	str	r3, [r7, #8]
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	e7fd      	b.n	800b0b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0b4:	f002 ff50 	bl	800df58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0c0:	68f9      	ldr	r1, [r7, #12]
 800b0c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0c4:	fb01 f303 	mul.w	r3, r1, r3
 800b0c8:	441a      	add	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0ea:	fb01 f303 	mul.w	r3, r1, r3
 800b0ee:	441a      	add	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	22ff      	movs	r2, #255	@ 0xff
 800b0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	22ff      	movs	r2, #255	@ 0xff
 800b100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d114      	bne.n	800b134 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d01a      	beq.n	800b148 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3310      	adds	r3, #16
 800b116:	4618      	mov	r0, r3
 800b118:	f001 fc22 	bl	800c960 <xTaskRemoveFromEventList>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d012      	beq.n	800b148 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b122:	4b0d      	ldr	r3, [pc, #52]	@ (800b158 <xQueueGenericReset+0xd0>)
 800b124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	e009      	b.n	800b148 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3310      	adds	r3, #16
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fef1 	bl	800af20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3324      	adds	r3, #36	@ 0x24
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff feec 	bl	800af20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b148:	f002 ff38 	bl	800dfbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b14c:	2301      	movs	r3, #1
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	e000ed04 	.word	0xe000ed04

0800b15c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08e      	sub	sp, #56	@ 0x38
 800b160:	af02      	add	r7, sp, #8
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10b      	bne.n	800b188 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	e7fd      	b.n	800b184 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	e7fd      	b.n	800b1a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <xQueueGenericCreateStatic+0x56>
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <xQueueGenericCreateStatic+0x5a>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e000      	b.n	800b1b8 <xQueueGenericCreateStatic+0x5c>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10b      	bne.n	800b1d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	623b      	str	r3, [r7, #32]
}
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	e7fd      	b.n	800b1d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d102      	bne.n	800b1e0 <xQueueGenericCreateStatic+0x84>
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <xQueueGenericCreateStatic+0x88>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e000      	b.n	800b1e6 <xQueueGenericCreateStatic+0x8a>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10b      	bne.n	800b202 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	61fb      	str	r3, [r7, #28]
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	e7fd      	b.n	800b1fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b202:	2350      	movs	r3, #80	@ 0x50
 800b204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b50      	cmp	r3, #80	@ 0x50
 800b20a:	d00b      	beq.n	800b224 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	61bb      	str	r3, [r7, #24]
}
 800b21e:	bf00      	nop
 800b220:	bf00      	nop
 800b222:	e7fd      	b.n	800b220 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b224:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00d      	beq.n	800b24c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b238:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	4613      	mov	r3, r2
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 f840 	bl	800b2cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b24e:	4618      	mov	r0, r3
 800b250:	3730      	adds	r7, #48	@ 0x30
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b256:	b580      	push	{r7, lr}
 800b258:	b08a      	sub	sp, #40	@ 0x28
 800b25a:	af02      	add	r7, sp, #8
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	4613      	mov	r3, r2
 800b262:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10b      	bne.n	800b282 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	613b      	str	r3, [r7, #16]
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	e7fd      	b.n	800b27e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	fb02 f303 	mul.w	r3, r2, r3
 800b28a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3350      	adds	r3, #80	@ 0x50
 800b290:	4618      	mov	r0, r3
 800b292:	f002 ff83 	bl	800e19c <pvPortMalloc>
 800b296:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d011      	beq.n	800b2c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	3350      	adds	r3, #80	@ 0x50
 800b2a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2b0:	79fa      	ldrb	r2, [r7, #7]
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 f805 	bl	800b2cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
	}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3720      	adds	r7, #32
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d103      	bne.n	800b2e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	e002      	b.n	800b2ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	69b8      	ldr	r0, [r7, #24]
 800b2fe:	f7ff fec3 	bl	800b088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	78fa      	ldrb	r2, [r7, #3]
 800b306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b30a:	bf00      	nop
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b312:	b580      	push	{r7, lr}
 800b314:	b08a      	sub	sp, #40	@ 0x28
 800b316:	af02      	add	r7, sp, #8
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10b      	bne.n	800b33c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	61bb      	str	r3, [r7, #24]
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	e7fd      	b.n	800b338 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	429a      	cmp	r2, r3
 800b342:	d90b      	bls.n	800b35c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	617b      	str	r3, [r7, #20]
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	e7fd      	b.n	800b358 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b35c:	2302      	movs	r3, #2
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	2100      	movs	r1, #0
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff fef8 	bl	800b15c <xQueueGenericCreateStatic>
 800b36c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b37a:	69fb      	ldr	r3, [r7, #28]
	}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10b      	bne.n	800b3ac <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	613b      	str	r3, [r7, #16]
}
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	e7fd      	b.n	800b3a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d90b      	bls.n	800b3cc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	60fb      	str	r3, [r7, #12]
}
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	e7fd      	b.n	800b3c8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff ff40 	bl	800b256 <xQueueGenericCreate>
 800b3d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b3e4:	697b      	ldr	r3, [r7, #20]
	}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08e      	sub	sp, #56	@ 0x38
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b3fe:	2300      	movs	r3, #0
 800b400:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10b      	bne.n	800b424 <xQueueGenericSend+0x34>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b41e:	bf00      	nop
 800b420:	bf00      	nop
 800b422:	e7fd      	b.n	800b420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d103      	bne.n	800b432 <xQueueGenericSend+0x42>
 800b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <xQueueGenericSend+0x46>
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <xQueueGenericSend+0x48>
 800b436:	2300      	movs	r3, #0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10b      	bne.n	800b454 <xQueueGenericSend+0x64>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	e7fd      	b.n	800b450 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d103      	bne.n	800b462 <xQueueGenericSend+0x72>
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d101      	bne.n	800b466 <xQueueGenericSend+0x76>
 800b462:	2301      	movs	r3, #1
 800b464:	e000      	b.n	800b468 <xQueueGenericSend+0x78>
 800b466:	2300      	movs	r3, #0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10b      	bne.n	800b484 <xQueueGenericSend+0x94>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	623b      	str	r3, [r7, #32]
}
 800b47e:	bf00      	nop
 800b480:	bf00      	nop
 800b482:	e7fd      	b.n	800b480 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b484:	f001 fcbe 	bl	800ce04 <xTaskGetSchedulerState>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <xQueueGenericSend+0xa4>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <xQueueGenericSend+0xa8>
 800b494:	2301      	movs	r3, #1
 800b496:	e000      	b.n	800b49a <xQueueGenericSend+0xaa>
 800b498:	2300      	movs	r3, #0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	61fb      	str	r3, [r7, #28]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4b6:	f002 fd4f 	bl	800df58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d302      	bcc.n	800b4cc <xQueueGenericSend+0xdc>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d129      	bne.n	800b520 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4d2:	f000 fbdd 	bl	800bc90 <prvCopyDataToQueue>
 800b4d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d010      	beq.n	800b502 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e2:	3324      	adds	r3, #36	@ 0x24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fa3b 	bl	800c960 <xTaskRemoveFromEventList>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d013      	beq.n	800b518 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b4f0:	4b3f      	ldr	r3, [pc, #252]	@ (800b5f0 <xQueueGenericSend+0x200>)
 800b4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	e00a      	b.n	800b518 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b508:	4b39      	ldr	r3, [pc, #228]	@ (800b5f0 <xQueueGenericSend+0x200>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b518:	f002 fd50 	bl	800dfbc <vPortExitCritical>
				return pdPASS;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e063      	b.n	800b5e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d103      	bne.n	800b52e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b526:	f002 fd49 	bl	800dfbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e05c      	b.n	800b5e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4618      	mov	r0, r3
 800b53a:	f001 fb01 	bl	800cb40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b542:	f002 fd3b 	bl	800dfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b546:	f000 ff9f 	bl	800c488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b54a:	f002 fd05 	bl	800df58 <vPortEnterCritical>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b554:	b25b      	sxtb	r3, r3
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b55a:	d103      	bne.n	800b564 <xQueueGenericSend+0x174>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b56a:	b25b      	sxtb	r3, r3
 800b56c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b570:	d103      	bne.n	800b57a <xQueueGenericSend+0x18a>
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b57a:	f002 fd1f 	bl	800dfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b57e:	1d3a      	adds	r2, r7, #4
 800b580:	f107 0314 	add.w	r3, r7, #20
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f001 faf0 	bl	800cb6c <xTaskCheckForTimeOut>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d124      	bne.n	800b5dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b594:	f000 fc74 	bl	800be80 <prvIsQueueFull>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d018      	beq.n	800b5d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	3310      	adds	r3, #16
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 f94a 	bl	800c840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5ae:	f000 fbff 	bl	800bdb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5b2:	f000 ff77 	bl	800c4a4 <xTaskResumeAll>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f47f af7c 	bne.w	800b4b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b5be:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f0 <xQueueGenericSend+0x200>)
 800b5c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	e772      	b.n	800b4b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5d2:	f000 fbed 	bl	800bdb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5d6:	f000 ff65 	bl	800c4a4 <xTaskResumeAll>
 800b5da:	e76c      	b.n	800b4b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5de:	f000 fbe7 	bl	800bdb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5e2:	f000 ff5f 	bl	800c4a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3738      	adds	r7, #56	@ 0x38
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b090      	sub	sp, #64	@ 0x40
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10b      	bne.n	800b624 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	e7fd      	b.n	800b620 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d103      	bne.n	800b632 <xQueueGenericSendFromISR+0x3e>
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <xQueueGenericSendFromISR+0x42>
 800b632:	2301      	movs	r3, #1
 800b634:	e000      	b.n	800b638 <xQueueGenericSendFromISR+0x44>
 800b636:	2300      	movs	r3, #0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10b      	bne.n	800b654 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b64e:	bf00      	nop
 800b650:	bf00      	nop
 800b652:	e7fd      	b.n	800b650 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d103      	bne.n	800b662 <xQueueGenericSendFromISR+0x6e>
 800b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d101      	bne.n	800b666 <xQueueGenericSendFromISR+0x72>
 800b662:	2301      	movs	r3, #1
 800b664:	e000      	b.n	800b668 <xQueueGenericSendFromISR+0x74>
 800b666:	2300      	movs	r3, #0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	623b      	str	r3, [r7, #32]
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b684:	f002 fd48 	bl	800e118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b688:	f3ef 8211 	mrs	r2, BASEPRI
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	61fa      	str	r2, [r7, #28]
 800b69e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d302      	bcc.n	800b6b6 <xQueueGenericSendFromISR+0xc2>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d12f      	bne.n	800b716 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b6cc:	f000 fae0 	bl	800bc90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6d8:	d112      	bne.n	800b700 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d016      	beq.n	800b710 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	3324      	adds	r3, #36	@ 0x24
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f001 f93a 	bl	800c960 <xTaskRemoveFromEventList>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00e      	beq.n	800b710 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00b      	beq.n	800b710 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	e007      	b.n	800b710 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b700:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b704:	3301      	adds	r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	b25a      	sxtb	r2, r3
 800b70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b710:	2301      	movs	r3, #1
 800b712:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b714:	e001      	b.n	800b71a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b724:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3740      	adds	r7, #64	@ 0x40
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08c      	sub	sp, #48	@ 0x30
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <xQueueReceive+0x32>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	623b      	str	r3, [r7, #32]
}
 800b75c:	bf00      	nop
 800b75e:	bf00      	nop
 800b760:	e7fd      	b.n	800b75e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <xQueueReceive+0x40>
 800b768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <xQueueReceive+0x44>
 800b770:	2301      	movs	r3, #1
 800b772:	e000      	b.n	800b776 <xQueueReceive+0x46>
 800b774:	2300      	movs	r3, #0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10b      	bne.n	800b792 <xQueueReceive+0x62>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	61fb      	str	r3, [r7, #28]
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	e7fd      	b.n	800b78e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b792:	f001 fb37 	bl	800ce04 <xTaskGetSchedulerState>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <xQueueReceive+0x72>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <xQueueReceive+0x76>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <xQueueReceive+0x78>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10b      	bne.n	800b7c4 <xQueueReceive+0x94>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	61bb      	str	r3, [r7, #24]
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	e7fd      	b.n	800b7c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7c4:	f002 fbc8 	bl	800df58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d01f      	beq.n	800b814 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b7d4:	68b9      	ldr	r1, [r7, #8]
 800b7d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7d8:	f000 fac4 	bl	800bd64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	1e5a      	subs	r2, r3, #1
 800b7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00f      	beq.n	800b80c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ee:	3310      	adds	r3, #16
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f001 f8b5 	bl	800c960 <xTaskRemoveFromEventList>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d007      	beq.n	800b80c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7fc:	4b3c      	ldr	r3, [pc, #240]	@ (800b8f0 <xQueueReceive+0x1c0>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b80c:	f002 fbd6 	bl	800dfbc <vPortExitCritical>
				return pdPASS;
 800b810:	2301      	movs	r3, #1
 800b812:	e069      	b.n	800b8e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b81a:	f002 fbcf 	bl	800dfbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b81e:	2300      	movs	r3, #0
 800b820:	e062      	b.n	800b8e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b824:	2b00      	cmp	r3, #0
 800b826:	d106      	bne.n	800b836 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b828:	f107 0310 	add.w	r3, r7, #16
 800b82c:	4618      	mov	r0, r3
 800b82e:	f001 f987 	bl	800cb40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b832:	2301      	movs	r3, #1
 800b834:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b836:	f002 fbc1 	bl	800dfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b83a:	f000 fe25 	bl	800c488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b83e:	f002 fb8b 	bl	800df58 <vPortEnterCritical>
 800b842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b848:	b25b      	sxtb	r3, r3
 800b84a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b84e:	d103      	bne.n	800b858 <xQueueReceive+0x128>
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b85e:	b25b      	sxtb	r3, r3
 800b860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b864:	d103      	bne.n	800b86e <xQueueReceive+0x13e>
 800b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b86e:	f002 fba5 	bl	800dfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b872:	1d3a      	adds	r2, r7, #4
 800b874:	f107 0310 	add.w	r3, r7, #16
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 f976 	bl	800cb6c <xTaskCheckForTimeOut>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d123      	bne.n	800b8ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b888:	f000 fae4 	bl	800be54 <prvIsQueueEmpty>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d017      	beq.n	800b8c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b894:	3324      	adds	r3, #36	@ 0x24
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	4611      	mov	r1, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 ffd0 	bl	800c840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8a2:	f000 fa85 	bl	800bdb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8a6:	f000 fdfd 	bl	800c4a4 <xTaskResumeAll>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d189      	bne.n	800b7c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f0 <xQueueReceive+0x1c0>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	e780      	b.n	800b7c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8c4:	f000 fa74 	bl	800bdb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8c8:	f000 fdec 	bl	800c4a4 <xTaskResumeAll>
 800b8cc:	e77a      	b.n	800b7c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8d0:	f000 fa6e 	bl	800bdb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8d4:	f000 fde6 	bl	800c4a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8da:	f000 fabb 	bl	800be54 <prvIsQueueEmpty>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f43f af6f 	beq.w	800b7c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3730      	adds	r7, #48	@ 0x30
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08e      	sub	sp, #56	@ 0x38
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b906:	2300      	movs	r3, #0
 800b908:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10b      	bne.n	800b928 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	623b      	str	r3, [r7, #32]
}
 800b922:	bf00      	nop
 800b924:	bf00      	nop
 800b926:	e7fd      	b.n	800b924 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00b      	beq.n	800b948 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	61fb      	str	r3, [r7, #28]
}
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b948:	f001 fa5c 	bl	800ce04 <xTaskGetSchedulerState>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d102      	bne.n	800b958 <xQueueSemaphoreTake+0x64>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <xQueueSemaphoreTake+0x68>
 800b958:	2301      	movs	r3, #1
 800b95a:	e000      	b.n	800b95e <xQueueSemaphoreTake+0x6a>
 800b95c:	2300      	movs	r3, #0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10b      	bne.n	800b97a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	61bb      	str	r3, [r7, #24]
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	e7fd      	b.n	800b976 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b97a:	f002 faed 	bl	800df58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b982:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b986:	2b00      	cmp	r3, #0
 800b988:	d024      	beq.n	800b9d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98c:	1e5a      	subs	r2, r3, #1
 800b98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b990:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d104      	bne.n	800b9a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b99a:	f001 fbc5 	bl	800d128 <pvTaskIncrementMutexHeldCount>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00f      	beq.n	800b9cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ae:	3310      	adds	r3, #16
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 ffd5 	bl	800c960 <xTaskRemoveFromEventList>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d007      	beq.n	800b9cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9bc:	4b54      	ldr	r3, [pc, #336]	@ (800bb10 <xQueueSemaphoreTake+0x21c>)
 800b9be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9cc:	f002 faf6 	bl	800dfbc <vPortExitCritical>
				return pdPASS;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e098      	b.n	800bb06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d112      	bne.n	800ba00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00b      	beq.n	800b9f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	617b      	str	r3, [r7, #20]
}
 800b9f2:	bf00      	nop
 800b9f4:	bf00      	nop
 800b9f6:	e7fd      	b.n	800b9f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b9f8:	f002 fae0 	bl	800dfbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e082      	b.n	800bb06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba06:	f107 030c 	add.w	r3, r7, #12
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 f898 	bl	800cb40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba10:	2301      	movs	r3, #1
 800ba12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba14:	f002 fad2 	bl	800dfbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba18:	f000 fd36 	bl	800c488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba1c:	f002 fa9c 	bl	800df58 <vPortEnterCritical>
 800ba20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba26:	b25b      	sxtb	r3, r3
 800ba28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba2c:	d103      	bne.n	800ba36 <xQueueSemaphoreTake+0x142>
 800ba2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba3c:	b25b      	sxtb	r3, r3
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba42:	d103      	bne.n	800ba4c <xQueueSemaphoreTake+0x158>
 800ba44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba4c:	f002 fab6 	bl	800dfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba50:	463a      	mov	r2, r7
 800ba52:	f107 030c 	add.w	r3, r7, #12
 800ba56:	4611      	mov	r1, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f001 f887 	bl	800cb6c <xTaskCheckForTimeOut>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d132      	bne.n	800baca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba66:	f000 f9f5 	bl	800be54 <prvIsQueueEmpty>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d026      	beq.n	800babe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d109      	bne.n	800ba8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ba78:	f002 fa6e 	bl	800df58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f001 f9dd 	bl	800ce40 <xTaskPriorityInherit>
 800ba86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ba88:	f002 fa98 	bl	800dfbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8e:	3324      	adds	r3, #36	@ 0x24
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	4611      	mov	r1, r2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fed3 	bl	800c840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba9c:	f000 f988 	bl	800bdb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800baa0:	f000 fd00 	bl	800c4a4 <xTaskResumeAll>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f47f af67 	bne.w	800b97a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800baac:	4b18      	ldr	r3, [pc, #96]	@ (800bb10 <xQueueSemaphoreTake+0x21c>)
 800baae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	e75d      	b.n	800b97a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800babe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bac0:	f000 f976 	bl	800bdb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bac4:	f000 fcee 	bl	800c4a4 <xTaskResumeAll>
 800bac8:	e757      	b.n	800b97a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800baca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bacc:	f000 f970 	bl	800bdb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bad0:	f000 fce8 	bl	800c4a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bad4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bad6:	f000 f9bd 	bl	800be54 <prvIsQueueEmpty>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	f43f af4c 	beq.w	800b97a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00d      	beq.n	800bb04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bae8:	f002 fa36 	bl	800df58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800baec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800baee:	f000 f8b7 	bl	800bc60 <prvGetDisinheritPriorityAfterTimeout>
 800baf2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800baf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 fa78 	bl	800cff0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb00:	f002 fa5c 	bl	800dfbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3738      	adds	r7, #56	@ 0x38
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08e      	sub	sp, #56	@ 0x38
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10b      	bne.n	800bb42 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	623b      	str	r3, [r7, #32]
}
 800bb3c:	bf00      	nop
 800bb3e:	bf00      	nop
 800bb40:	e7fd      	b.n	800bb3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d103      	bne.n	800bb50 <xQueueReceiveFromISR+0x3c>
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <xQueueReceiveFromISR+0x40>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <xQueueReceiveFromISR+0x42>
 800bb54:	2300      	movs	r3, #0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10b      	bne.n	800bb72 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	61fb      	str	r3, [r7, #28]
}
 800bb6c:	bf00      	nop
 800bb6e:	bf00      	nop
 800bb70:	e7fd      	b.n	800bb6e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb72:	f002 fad1 	bl	800e118 <vPortValidateInterruptPriority>
	__asm volatile
 800bb76:	f3ef 8211 	mrs	r2, BASEPRI
 800bb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	61ba      	str	r2, [r7, #24]
 800bb8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d02f      	beq.n	800bbfe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbac:	f000 f8da 	bl	800bd64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	1e5a      	subs	r2, r3, #1
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bbb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbc0:	d112      	bne.n	800bbe8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d016      	beq.n	800bbf8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbcc:	3310      	adds	r3, #16
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fec6 	bl	800c960 <xTaskRemoveFromEventList>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00e      	beq.n	800bbf8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e007      	b.n	800bbf8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbec:	3301      	adds	r3, #1
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	b25a      	sxtb	r2, r3
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbfc:	e001      	b.n	800bc02 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f383 8811 	msr	BASEPRI, r3
}
 800bc0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3738      	adds	r7, #56	@ 0x38
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <vQueueDelete+0x2a>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	60bb      	str	r3, [r7, #8]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 f95e 	bl	800bf04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d102      	bne.n	800bc58 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f002 fb70 	bl	800e338 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d006      	beq.n	800bc7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	e001      	b.n	800bc82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bc82:	68fb      	ldr	r3, [r7, #12]
	}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10d      	bne.n	800bcca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d14d      	bne.n	800bd52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f001 f928 	bl	800cf10 <xTaskPriorityDisinherit>
 800bcc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	609a      	str	r2, [r3, #8]
 800bcc8:	e043      	b.n	800bd52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d119      	bne.n	800bd04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6858      	ldr	r0, [r3, #4]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcd8:	461a      	mov	r2, r3
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	f012 fb69 	bl	801e3b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	685a      	ldr	r2, [r3, #4]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce8:	441a      	add	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d32b      	bcc.n	800bd52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	605a      	str	r2, [r3, #4]
 800bd02:	e026      	b.n	800bd52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68d8      	ldr	r0, [r3, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68b9      	ldr	r1, [r7, #8]
 800bd10:	f012 fb4f 	bl	801e3b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	68da      	ldr	r2, [r3, #12]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd1c:	425b      	negs	r3, r3
 800bd1e:	441a      	add	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d207      	bcs.n	800bd40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd38:	425b      	negs	r3, r3
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d105      	bne.n	800bd52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bd5a:	697b      	ldr	r3, [r7, #20]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d018      	beq.n	800bda8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd7e:	441a      	add	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d303      	bcc.n	800bd98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68d9      	ldr	r1, [r3, #12]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda0:	461a      	mov	r2, r3
 800bda2:	6838      	ldr	r0, [r7, #0]
 800bda4:	f012 fb05 	bl	801e3b2 <memcpy>
	}
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bdb8:	f002 f8ce 	bl	800df58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdc4:	e011      	b.n	800bdea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d012      	beq.n	800bdf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3324      	adds	r3, #36	@ 0x24
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fdc4 	bl	800c960 <xTaskRemoveFromEventList>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdde:	f000 ff29 	bl	800cc34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	dce9      	bgt.n	800bdc6 <prvUnlockQueue+0x16>
 800bdf2:	e000      	b.n	800bdf6 <prvUnlockQueue+0x46>
					break;
 800bdf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	22ff      	movs	r2, #255	@ 0xff
 800bdfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bdfe:	f002 f8dd 	bl	800dfbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be02:	f002 f8a9 	bl	800df58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be0e:	e011      	b.n	800be34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d012      	beq.n	800be3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3310      	adds	r3, #16
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 fd9f 	bl	800c960 <xTaskRemoveFromEventList>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be28:	f000 ff04 	bl	800cc34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	3b01      	subs	r3, #1
 800be30:	b2db      	uxtb	r3, r3
 800be32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dce9      	bgt.n	800be10 <prvUnlockQueue+0x60>
 800be3c:	e000      	b.n	800be40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	22ff      	movs	r2, #255	@ 0xff
 800be44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800be48:	f002 f8b8 	bl	800dfbc <vPortExitCritical>
}
 800be4c:	bf00      	nop
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be5c:	f002 f87c 	bl	800df58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be64:	2b00      	cmp	r3, #0
 800be66:	d102      	bne.n	800be6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	e001      	b.n	800be72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be72:	f002 f8a3 	bl	800dfbc <vPortExitCritical>

	return xReturn;
 800be76:	68fb      	ldr	r3, [r7, #12]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be88:	f002 f866 	bl	800df58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be94:	429a      	cmp	r2, r3
 800be96:	d102      	bne.n	800be9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be98:	2301      	movs	r3, #1
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	e001      	b.n	800bea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bea2:	f002 f88b 	bl	800dfbc <vPortExitCritical>

	return xReturn;
 800bea6:	68fb      	ldr	r3, [r7, #12]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e014      	b.n	800beea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bec0:	4a0f      	ldr	r2, [pc, #60]	@ (800bf00 <vQueueAddToRegistry+0x50>)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10b      	bne.n	800bee4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800becc:	490c      	ldr	r1, [pc, #48]	@ (800bf00 <vQueueAddToRegistry+0x50>)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bed6:	4a0a      	ldr	r2, [pc, #40]	@ (800bf00 <vQueueAddToRegistry+0x50>)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	4413      	add	r3, r2
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bee2:	e006      	b.n	800bef2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	3301      	adds	r3, #1
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b07      	cmp	r3, #7
 800beee:	d9e7      	bls.n	800bec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bef0:	bf00      	nop
 800bef2:	bf00      	nop
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	200103bc 	.word	0x200103bc

0800bf04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60fb      	str	r3, [r7, #12]
 800bf10:	e016      	b.n	800bf40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bf12:	4a10      	ldr	r2, [pc, #64]	@ (800bf54 <vQueueUnregisterQueue+0x50>)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4413      	add	r3, r2
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d10b      	bne.n	800bf3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bf22:	4a0c      	ldr	r2, [pc, #48]	@ (800bf54 <vQueueUnregisterQueue+0x50>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2100      	movs	r1, #0
 800bf28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bf2c:	4a09      	ldr	r2, [pc, #36]	@ (800bf54 <vQueueUnregisterQueue+0x50>)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	00db      	lsls	r3, r3, #3
 800bf32:	4413      	add	r3, r2
 800bf34:	2200      	movs	r2, #0
 800bf36:	605a      	str	r2, [r3, #4]
				break;
 800bf38:	e006      	b.n	800bf48 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	60fb      	str	r3, [r7, #12]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b07      	cmp	r3, #7
 800bf44:	d9e5      	bls.n	800bf12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bf46:	bf00      	nop
 800bf48:	bf00      	nop
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	200103bc 	.word	0x200103bc

0800bf58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf68:	f001 fff6 	bl	800df58 <vPortEnterCritical>
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf72:	b25b      	sxtb	r3, r3
 800bf74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf78:	d103      	bne.n	800bf82 <vQueueWaitForMessageRestricted+0x2a>
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf88:	b25b      	sxtb	r3, r3
 800bf8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf8e:	d103      	bne.n	800bf98 <vQueueWaitForMessageRestricted+0x40>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf98:	f002 f810 	bl	800dfbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d106      	bne.n	800bfb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	3324      	adds	r3, #36	@ 0x24
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 fcab 	bl	800c908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bfb2:	6978      	ldr	r0, [r7, #20]
 800bfb4:	f7ff fefc 	bl	800bdb0 <prvUnlockQueue>
	}
 800bfb8:	bf00      	nop
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08e      	sub	sp, #56	@ 0x38
 800bfc4:	af04      	add	r7, sp, #16
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bfce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10b      	bne.n	800bfec <xTaskCreateStatic+0x2c>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	623b      	str	r3, [r7, #32]
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	e7fd      	b.n	800bfe8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10b      	bne.n	800c00a <xTaskCreateStatic+0x4a>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	61fb      	str	r3, [r7, #28]
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop
 800c008:	e7fd      	b.n	800c006 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c00a:	23a8      	movs	r3, #168	@ 0xa8
 800c00c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2ba8      	cmp	r3, #168	@ 0xa8
 800c012:	d00b      	beq.n	800c02c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	61bb      	str	r3, [r7, #24]
}
 800c026:	bf00      	nop
 800c028:	bf00      	nop
 800c02a:	e7fd      	b.n	800c028 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c02c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c030:	2b00      	cmp	r3, #0
 800c032:	d01e      	beq.n	800c072 <xTaskCreateStatic+0xb2>
 800c034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c036:	2b00      	cmp	r3, #0
 800c038:	d01b      	beq.n	800c072 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c042:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	2202      	movs	r2, #2
 800c048:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c04c:	2300      	movs	r3, #0
 800c04e:	9303      	str	r3, [sp, #12]
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	9302      	str	r3, [sp, #8]
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	9301      	str	r3, [sp, #4]
 800c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	68b9      	ldr	r1, [r7, #8]
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 f851 	bl	800c10c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c06a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c06c:	f000 f8f6 	bl	800c25c <prvAddNewTaskToReadyList>
 800c070:	e001      	b.n	800c076 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c076:	697b      	ldr	r3, [r7, #20]
	}
 800c078:	4618      	mov	r0, r3
 800c07a:	3728      	adds	r7, #40	@ 0x28
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08c      	sub	sp, #48	@ 0x30
 800c084:	af04      	add	r7, sp, #16
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	4613      	mov	r3, r2
 800c08e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c090:	88fb      	ldrh	r3, [r7, #6]
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4618      	mov	r0, r3
 800c096:	f002 f881 	bl	800e19c <pvPortMalloc>
 800c09a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00e      	beq.n	800c0c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0a2:	20a8      	movs	r0, #168	@ 0xa8
 800c0a4:	f002 f87a 	bl	800e19c <pvPortMalloc>
 800c0a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c0b6:	e005      	b.n	800c0c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0b8:	6978      	ldr	r0, [r7, #20]
 800c0ba:	f002 f93d 	bl	800e338 <vPortFree>
 800c0be:	e001      	b.n	800c0c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d017      	beq.n	800c0fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0d2:	88fa      	ldrh	r2, [r7, #6]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9303      	str	r3, [sp, #12]
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	9302      	str	r3, [sp, #8]
 800c0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0de:	9301      	str	r3, [sp, #4]
 800c0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 f80f 	bl	800c10c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0ee:	69f8      	ldr	r0, [r7, #28]
 800c0f0:	f000 f8b4 	bl	800c25c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	61bb      	str	r3, [r7, #24]
 800c0f8:	e002      	b.n	800c100 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c100:	69bb      	ldr	r3, [r7, #24]
	}
 800c102:	4618      	mov	r0, r3
 800c104:	3720      	adds	r7, #32
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
 800c118:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	461a      	mov	r2, r3
 800c124:	21a5      	movs	r1, #165	@ 0xa5
 800c126:	f012 f813 	bl	801e150 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c134:	3b01      	subs	r3, #1
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	f023 0307 	bic.w	r3, r3, #7
 800c142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	f003 0307 	and.w	r3, r3, #7
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	617b      	str	r3, [r7, #20]
}
 800c160:	bf00      	nop
 800c162:	bf00      	nop
 800c164:	e7fd      	b.n	800c162 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01f      	beq.n	800c1ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c16c:	2300      	movs	r3, #0
 800c16e:	61fb      	str	r3, [r7, #28]
 800c170:	e012      	b.n	800c198 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	7819      	ldrb	r1, [r3, #0]
 800c17a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	4413      	add	r3, r2
 800c180:	3334      	adds	r3, #52	@ 0x34
 800c182:	460a      	mov	r2, r1
 800c184:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	4413      	add	r3, r2
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d006      	beq.n	800c1a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	3301      	adds	r3, #1
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	2b0f      	cmp	r3, #15
 800c19c:	d9e9      	bls.n	800c172 <prvInitialiseNewTask+0x66>
 800c19e:	e000      	b.n	800c1a2 <prvInitialiseNewTask+0x96>
			{
				break;
 800c1a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1aa:	e003      	b.n	800c1b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b6:	2b37      	cmp	r3, #55	@ 0x37
 800c1b8:	d901      	bls.n	800c1be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1ba:	2337      	movs	r3, #55	@ 0x37
 800c1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fec3 	bl	800af60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1dc:	3318      	adds	r3, #24
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe febe 	bl	800af60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c204:	2200      	movs	r2, #0
 800c206:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20c:	3354      	adds	r3, #84	@ 0x54
 800c20e:	224c      	movs	r2, #76	@ 0x4c
 800c210:	2100      	movs	r1, #0
 800c212:	4618      	mov	r0, r3
 800c214:	f011 ff9c 	bl	801e150 <memset>
 800c218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21a:	4a0d      	ldr	r2, [pc, #52]	@ (800c250 <prvInitialiseNewTask+0x144>)
 800c21c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c220:	4a0c      	ldr	r2, [pc, #48]	@ (800c254 <prvInitialiseNewTask+0x148>)
 800c222:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c226:	4a0c      	ldr	r2, [pc, #48]	@ (800c258 <prvInitialiseNewTask+0x14c>)
 800c228:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	68f9      	ldr	r1, [r7, #12]
 800c22e:	69b8      	ldr	r0, [r7, #24]
 800c230:	f001 fd64 	bl	800dcfc <pxPortInitialiseStack>
 800c234:	4602      	mov	r2, r0
 800c236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d002      	beq.n	800c246 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c246:	bf00      	nop
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2001f7e4 	.word	0x2001f7e4
 800c254:	2001f84c 	.word	0x2001f84c
 800c258:	2001f8b4 	.word	0x2001f8b4

0800c25c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c264:	f001 fe78 	bl	800df58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c268:	4b2d      	ldr	r3, [pc, #180]	@ (800c320 <prvAddNewTaskToReadyList+0xc4>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	3301      	adds	r3, #1
 800c26e:	4a2c      	ldr	r2, [pc, #176]	@ (800c320 <prvAddNewTaskToReadyList+0xc4>)
 800c270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c272:	4b2c      	ldr	r3, [pc, #176]	@ (800c324 <prvAddNewTaskToReadyList+0xc8>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d109      	bne.n	800c28e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c27a:	4a2a      	ldr	r2, [pc, #168]	@ (800c324 <prvAddNewTaskToReadyList+0xc8>)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c280:	4b27      	ldr	r3, [pc, #156]	@ (800c320 <prvAddNewTaskToReadyList+0xc4>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d110      	bne.n	800c2aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c288:	f000 fcf8 	bl	800cc7c <prvInitialiseTaskLists>
 800c28c:	e00d      	b.n	800c2aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c28e:	4b26      	ldr	r3, [pc, #152]	@ (800c328 <prvAddNewTaskToReadyList+0xcc>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d109      	bne.n	800c2aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c296:	4b23      	ldr	r3, [pc, #140]	@ (800c324 <prvAddNewTaskToReadyList+0xc8>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d802      	bhi.n	800c2aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c324 <prvAddNewTaskToReadyList+0xc8>)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2aa:	4b20      	ldr	r3, [pc, #128]	@ (800c32c <prvAddNewTaskToReadyList+0xd0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	4a1e      	ldr	r2, [pc, #120]	@ (800c32c <prvAddNewTaskToReadyList+0xd0>)
 800c2b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <prvAddNewTaskToReadyList+0xd0>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800c330 <prvAddNewTaskToReadyList+0xd4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d903      	bls.n	800c2d0 <prvAddNewTaskToReadyList+0x74>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2cc:	4a18      	ldr	r2, [pc, #96]	@ (800c330 <prvAddNewTaskToReadyList+0xd4>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4a15      	ldr	r2, [pc, #84]	@ (800c334 <prvAddNewTaskToReadyList+0xd8>)
 800c2de:	441a      	add	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	f7fe fe47 	bl	800af7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2ec:	f001 fe66 	bl	800dfbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <prvAddNewTaskToReadyList+0xcc>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00e      	beq.n	800c316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c324 <prvAddNewTaskToReadyList+0xc8>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c302:	429a      	cmp	r2, r3
 800c304:	d207      	bcs.n	800c316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c306:	4b0c      	ldr	r3, [pc, #48]	@ (800c338 <prvAddNewTaskToReadyList+0xdc>)
 800c308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	200108d0 	.word	0x200108d0
 800c324:	200103fc 	.word	0x200103fc
 800c328:	200108dc 	.word	0x200108dc
 800c32c:	200108ec 	.word	0x200108ec
 800c330:	200108d8 	.word	0x200108d8
 800c334:	20010400 	.word	0x20010400
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c344:	2300      	movs	r3, #0
 800c346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c34e:	4b14      	ldr	r3, [pc, #80]	@ (800c3a0 <vTaskDelay+0x64>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00b      	beq.n	800c36e <vTaskDelay+0x32>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	60bb      	str	r3, [r7, #8]
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	e7fd      	b.n	800c36a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c36e:	f000 f88b 	bl	800c488 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c372:	2100      	movs	r1, #0
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f001 f8f3 	bl	800d560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c37a:	f000 f893 	bl	800c4a4 <xTaskResumeAll>
 800c37e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d107      	bne.n	800c396 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c386:	4b07      	ldr	r3, [pc, #28]	@ (800c3a4 <vTaskDelay+0x68>)
 800c388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c396:	bf00      	nop
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	200108f8 	.word	0x200108f8
 800c3a4:	e000ed04 	.word	0xe000ed04

0800c3a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08a      	sub	sp, #40	@ 0x28
 800c3ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3b6:	463a      	mov	r2, r7
 800c3b8:	1d39      	adds	r1, r7, #4
 800c3ba:	f107 0308 	add.w	r3, r7, #8
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fb84 	bl	800aacc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	9202      	str	r2, [sp, #8]
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	460a      	mov	r2, r1
 800c3d6:	4924      	ldr	r1, [pc, #144]	@ (800c468 <vTaskStartScheduler+0xc0>)
 800c3d8:	4824      	ldr	r0, [pc, #144]	@ (800c46c <vTaskStartScheduler+0xc4>)
 800c3da:	f7ff fdf1 	bl	800bfc0 <xTaskCreateStatic>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4a23      	ldr	r2, [pc, #140]	@ (800c470 <vTaskStartScheduler+0xc8>)
 800c3e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3e4:	4b22      	ldr	r3, [pc, #136]	@ (800c470 <vTaskStartScheduler+0xc8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	617b      	str	r3, [r7, #20]
 800c3f0:	e001      	b.n	800c3f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d102      	bne.n	800c402 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c3fc:	f001 f904 	bl	800d608 <xTimerCreateTimerTask>
 800c400:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d11b      	bne.n	800c440 <vTaskStartScheduler+0x98>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	613b      	str	r3, [r7, #16]
}
 800c41a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c41c:	4b15      	ldr	r3, [pc, #84]	@ (800c474 <vTaskStartScheduler+0xcc>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3354      	adds	r3, #84	@ 0x54
 800c422:	4a15      	ldr	r2, [pc, #84]	@ (800c478 <vTaskStartScheduler+0xd0>)
 800c424:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c426:	4b15      	ldr	r3, [pc, #84]	@ (800c47c <vTaskStartScheduler+0xd4>)
 800c428:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c42c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c42e:	4b14      	ldr	r3, [pc, #80]	@ (800c480 <vTaskStartScheduler+0xd8>)
 800c430:	2201      	movs	r2, #1
 800c432:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c434:	4b13      	ldr	r3, [pc, #76]	@ (800c484 <vTaskStartScheduler+0xdc>)
 800c436:	2200      	movs	r2, #0
 800c438:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c43a:	f001 fce9 	bl	800de10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c43e:	e00f      	b.n	800c460 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c446:	d10b      	bne.n	800c460 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	60fb      	str	r3, [r7, #12]
}
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	e7fd      	b.n	800c45c <vTaskStartScheduler+0xb4>
}
 800c460:	bf00      	nop
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	080205d4 	.word	0x080205d4
 800c46c:	0800cc4d 	.word	0x0800cc4d
 800c470:	200108f4 	.word	0x200108f4
 800c474:	200103fc 	.word	0x200103fc
 800c478:	20001bf4 	.word	0x20001bf4
 800c47c:	200108f0 	.word	0x200108f0
 800c480:	200108dc 	.word	0x200108dc
 800c484:	200108d4 	.word	0x200108d4

0800c488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c488:	b480      	push	{r7}
 800c48a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c48c:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <vTaskSuspendAll+0x18>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3301      	adds	r3, #1
 800c492:	4a03      	ldr	r2, [pc, #12]	@ (800c4a0 <vTaskSuspendAll+0x18>)
 800c494:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c496:	bf00      	nop
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	200108f8 	.word	0x200108f8

0800c4a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4b2:	4b42      	ldr	r3, [pc, #264]	@ (800c5bc <xTaskResumeAll+0x118>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	603b      	str	r3, [r7, #0]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4d2:	f001 fd41 	bl	800df58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4d6:	4b39      	ldr	r3, [pc, #228]	@ (800c5bc <xTaskResumeAll+0x118>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a37      	ldr	r2, [pc, #220]	@ (800c5bc <xTaskResumeAll+0x118>)
 800c4de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4e0:	4b36      	ldr	r3, [pc, #216]	@ (800c5bc <xTaskResumeAll+0x118>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d162      	bne.n	800c5ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4e8:	4b35      	ldr	r3, [pc, #212]	@ (800c5c0 <xTaskResumeAll+0x11c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d05e      	beq.n	800c5ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4f0:	e02f      	b.n	800c552 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f2:	4b34      	ldr	r3, [pc, #208]	@ (800c5c4 <xTaskResumeAll+0x120>)
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	3318      	adds	r3, #24
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fd98 	bl	800b034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3304      	adds	r3, #4
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fe fd93 	bl	800b034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c512:	4b2d      	ldr	r3, [pc, #180]	@ (800c5c8 <xTaskResumeAll+0x124>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d903      	bls.n	800c522 <xTaskResumeAll+0x7e>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51e:	4a2a      	ldr	r2, [pc, #168]	@ (800c5c8 <xTaskResumeAll+0x124>)
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c526:	4613      	mov	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4a27      	ldr	r2, [pc, #156]	@ (800c5cc <xTaskResumeAll+0x128>)
 800c530:	441a      	add	r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3304      	adds	r3, #4
 800c536:	4619      	mov	r1, r3
 800c538:	4610      	mov	r0, r2
 800c53a:	f7fe fd1e 	bl	800af7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c542:	4b23      	ldr	r3, [pc, #140]	@ (800c5d0 <xTaskResumeAll+0x12c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c548:	429a      	cmp	r2, r3
 800c54a:	d302      	bcc.n	800c552 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c54c:	4b21      	ldr	r3, [pc, #132]	@ (800c5d4 <xTaskResumeAll+0x130>)
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c552:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c4 <xTaskResumeAll+0x120>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1cb      	bne.n	800c4f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c560:	f000 fc30 	bl	800cdc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c564:	4b1c      	ldr	r3, [pc, #112]	@ (800c5d8 <xTaskResumeAll+0x134>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d010      	beq.n	800c592 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c570:	f000 f846 	bl	800c600 <xTaskIncrementTick>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c57a:	4b16      	ldr	r3, [pc, #88]	@ (800c5d4 <xTaskResumeAll+0x130>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3b01      	subs	r3, #1
 800c584:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1f1      	bne.n	800c570 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c58c:	4b12      	ldr	r3, [pc, #72]	@ (800c5d8 <xTaskResumeAll+0x134>)
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c592:	4b10      	ldr	r3, [pc, #64]	@ (800c5d4 <xTaskResumeAll+0x130>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d009      	beq.n	800c5ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c59a:	2301      	movs	r3, #1
 800c59c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c59e:	4b0f      	ldr	r3, [pc, #60]	@ (800c5dc <xTaskResumeAll+0x138>)
 800c5a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5a4:	601a      	str	r2, [r3, #0]
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5ae:	f001 fd05 	bl	800dfbc <vPortExitCritical>

	return xAlreadyYielded;
 800c5b2:	68bb      	ldr	r3, [r7, #8]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	200108f8 	.word	0x200108f8
 800c5c0:	200108d0 	.word	0x200108d0
 800c5c4:	20010890 	.word	0x20010890
 800c5c8:	200108d8 	.word	0x200108d8
 800c5cc:	20010400 	.word	0x20010400
 800c5d0:	200103fc 	.word	0x200103fc
 800c5d4:	200108e4 	.word	0x200108e4
 800c5d8:	200108e0 	.word	0x200108e0
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5e6:	4b05      	ldr	r3, [pc, #20]	@ (800c5fc <xTaskGetTickCount+0x1c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5ec:	687b      	ldr	r3, [r7, #4]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	200108d4 	.word	0x200108d4

0800c600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c606:	2300      	movs	r3, #0
 800c608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c60a:	4b4f      	ldr	r3, [pc, #316]	@ (800c748 <xTaskIncrementTick+0x148>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f040 8090 	bne.w	800c734 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c614:	4b4d      	ldr	r3, [pc, #308]	@ (800c74c <xTaskIncrementTick+0x14c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c61c:	4a4b      	ldr	r2, [pc, #300]	@ (800c74c <xTaskIncrementTick+0x14c>)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d121      	bne.n	800c66c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c628:	4b49      	ldr	r3, [pc, #292]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00b      	beq.n	800c64a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	603b      	str	r3, [r7, #0]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <xTaskIncrementTick+0x46>
 800c64a:	4b41      	ldr	r3, [pc, #260]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	4b40      	ldr	r3, [pc, #256]	@ (800c754 <xTaskIncrementTick+0x154>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a3e      	ldr	r2, [pc, #248]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	4a3e      	ldr	r2, [pc, #248]	@ (800c754 <xTaskIncrementTick+0x154>)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	4b3e      	ldr	r3, [pc, #248]	@ (800c758 <xTaskIncrementTick+0x158>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a3c      	ldr	r2, [pc, #240]	@ (800c758 <xTaskIncrementTick+0x158>)
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f000 fbac 	bl	800cdc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c66c:	4b3b      	ldr	r3, [pc, #236]	@ (800c75c <xTaskIncrementTick+0x15c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	429a      	cmp	r2, r3
 800c674:	d349      	bcc.n	800c70a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c676:	4b36      	ldr	r3, [pc, #216]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d104      	bne.n	800c68a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c680:	4b36      	ldr	r3, [pc, #216]	@ (800c75c <xTaskIncrementTick+0x15c>)
 800c682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c686:	601a      	str	r2, [r3, #0]
					break;
 800c688:	e03f      	b.n	800c70a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68a:	4b31      	ldr	r3, [pc, #196]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d203      	bcs.n	800c6aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6a2:	4a2e      	ldr	r2, [pc, #184]	@ (800c75c <xTaskIncrementTick+0x15c>)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6a8:	e02f      	b.n	800c70a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fcc0 	bl	800b034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3318      	adds	r3, #24
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe fcb7 	bl	800b034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ca:	4b25      	ldr	r3, [pc, #148]	@ (800c760 <xTaskIncrementTick+0x160>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d903      	bls.n	800c6da <xTaskIncrementTick+0xda>
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d6:	4a22      	ldr	r2, [pc, #136]	@ (800c760 <xTaskIncrementTick+0x160>)
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4a1f      	ldr	r2, [pc, #124]	@ (800c764 <xTaskIncrementTick+0x164>)
 800c6e8:	441a      	add	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7fe fc42 	bl	800af7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800c768 <xTaskIncrementTick+0x168>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c700:	429a      	cmp	r2, r3
 800c702:	d3b8      	bcc.n	800c676 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c704:	2301      	movs	r3, #1
 800c706:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c708:	e7b5      	b.n	800c676 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c70a:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <xTaskIncrementTick+0x168>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c710:	4914      	ldr	r1, [pc, #80]	@ (800c764 <xTaskIncrementTick+0x164>)
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	440b      	add	r3, r1
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d901      	bls.n	800c726 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c722:	2301      	movs	r3, #1
 800c724:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c726:	4b11      	ldr	r3, [pc, #68]	@ (800c76c <xTaskIncrementTick+0x16c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d007      	beq.n	800c73e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c72e:	2301      	movs	r3, #1
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	e004      	b.n	800c73e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c734:	4b0e      	ldr	r3, [pc, #56]	@ (800c770 <xTaskIncrementTick+0x170>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3301      	adds	r3, #1
 800c73a:	4a0d      	ldr	r2, [pc, #52]	@ (800c770 <xTaskIncrementTick+0x170>)
 800c73c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c73e:	697b      	ldr	r3, [r7, #20]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	200108f8 	.word	0x200108f8
 800c74c:	200108d4 	.word	0x200108d4
 800c750:	20010888 	.word	0x20010888
 800c754:	2001088c 	.word	0x2001088c
 800c758:	200108e8 	.word	0x200108e8
 800c75c:	200108f0 	.word	0x200108f0
 800c760:	200108d8 	.word	0x200108d8
 800c764:	20010400 	.word	0x20010400
 800c768:	200103fc 	.word	0x200103fc
 800c76c:	200108e4 	.word	0x200108e4
 800c770:	200108e0 	.word	0x200108e0

0800c774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c77a:	4b2b      	ldr	r3, [pc, #172]	@ (800c828 <vTaskSwitchContext+0xb4>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c782:	4b2a      	ldr	r3, [pc, #168]	@ (800c82c <vTaskSwitchContext+0xb8>)
 800c784:	2201      	movs	r2, #1
 800c786:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c788:	e047      	b.n	800c81a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c78a:	4b28      	ldr	r3, [pc, #160]	@ (800c82c <vTaskSwitchContext+0xb8>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c790:	4b27      	ldr	r3, [pc, #156]	@ (800c830 <vTaskSwitchContext+0xbc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	60fb      	str	r3, [r7, #12]
 800c796:	e011      	b.n	800c7bc <vTaskSwitchContext+0x48>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10b      	bne.n	800c7b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	e7fd      	b.n	800c7b2 <vTaskSwitchContext+0x3e>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	491d      	ldr	r1, [pc, #116]	@ (800c834 <vTaskSwitchContext+0xc0>)
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	440b      	add	r3, r1
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d0e3      	beq.n	800c798 <vTaskSwitchContext+0x24>
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4a16      	ldr	r2, [pc, #88]	@ (800c834 <vTaskSwitchContext+0xc0>)
 800c7dc:	4413      	add	r3, r2
 800c7de:	60bb      	str	r3, [r7, #8]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	605a      	str	r2, [r3, #4]
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	685a      	ldr	r2, [r3, #4]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d104      	bne.n	800c800 <vTaskSwitchContext+0x8c>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	605a      	str	r2, [r3, #4]
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	4a0c      	ldr	r2, [pc, #48]	@ (800c838 <vTaskSwitchContext+0xc4>)
 800c808:	6013      	str	r3, [r2, #0]
 800c80a:	4a09      	ldr	r2, [pc, #36]	@ (800c830 <vTaskSwitchContext+0xbc>)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c810:	4b09      	ldr	r3, [pc, #36]	@ (800c838 <vTaskSwitchContext+0xc4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3354      	adds	r3, #84	@ 0x54
 800c816:	4a09      	ldr	r2, [pc, #36]	@ (800c83c <vTaskSwitchContext+0xc8>)
 800c818:	6013      	str	r3, [r2, #0]
}
 800c81a:	bf00      	nop
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	200108f8 	.word	0x200108f8
 800c82c:	200108e4 	.word	0x200108e4
 800c830:	200108d8 	.word	0x200108d8
 800c834:	20010400 	.word	0x20010400
 800c838:	200103fc 	.word	0x200103fc
 800c83c:	20001bf4 	.word	0x20001bf4

0800c840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	60fb      	str	r3, [r7, #12]
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c868:	4b07      	ldr	r3, [pc, #28]	@ (800c888 <vTaskPlaceOnEventList+0x48>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3318      	adds	r3, #24
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7fe fba6 	bl	800afc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c876:	2101      	movs	r1, #1
 800c878:	6838      	ldr	r0, [r7, #0]
 800c87a:	f000 fe71 	bl	800d560 <prvAddCurrentTaskToDelayedList>
}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	200103fc 	.word	0x200103fc

0800c88c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10b      	bne.n	800c8b6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	617b      	str	r3, [r7, #20]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c8b6:	4b12      	ldr	r3, [pc, #72]	@ (800c900 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10b      	bne.n	800c8d6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	613b      	str	r3, [r7, #16]
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c904 <vTaskPlaceOnUnorderedEventList+0x78>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c8e0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8e2:	4b08      	ldr	r3, [pc, #32]	@ (800c904 <vTaskPlaceOnUnorderedEventList+0x78>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3318      	adds	r3, #24
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7fe fb45 	bl	800af7a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fe34 	bl	800d560 <prvAddCurrentTaskToDelayedList>
}
 800c8f8:	bf00      	nop
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	200108f8 	.word	0x200108f8
 800c904:	200103fc 	.word	0x200103fc

0800c908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10b      	bne.n	800c932 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	617b      	str	r3, [r7, #20]
}
 800c92c:	bf00      	nop
 800c92e:	bf00      	nop
 800c930:	e7fd      	b.n	800c92e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c932:	4b0a      	ldr	r3, [pc, #40]	@ (800c95c <vTaskPlaceOnEventListRestricted+0x54>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3318      	adds	r3, #24
 800c938:	4619      	mov	r1, r3
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f7fe fb1d 	bl	800af7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c94a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c94c:	6879      	ldr	r1, [r7, #4]
 800c94e:	68b8      	ldr	r0, [r7, #8]
 800c950:	f000 fe06 	bl	800d560 <prvAddCurrentTaskToDelayedList>
	}
 800c954:	bf00      	nop
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	200103fc 	.word	0x200103fc

0800c960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3318      	adds	r3, #24
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe fb4e 	bl	800b034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c998:	4b1d      	ldr	r3, [pc, #116]	@ (800ca10 <xTaskRemoveFromEventList+0xb0>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d11d      	bne.n	800c9dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fe fb45 	bl	800b034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ae:	4b19      	ldr	r3, [pc, #100]	@ (800ca14 <xTaskRemoveFromEventList+0xb4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d903      	bls.n	800c9be <xTaskRemoveFromEventList+0x5e>
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ba:	4a16      	ldr	r2, [pc, #88]	@ (800ca14 <xTaskRemoveFromEventList+0xb4>)
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4a13      	ldr	r2, [pc, #76]	@ (800ca18 <xTaskRemoveFromEventList+0xb8>)
 800c9cc:	441a      	add	r2, r3
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	f7fe fad0 	bl	800af7a <vListInsertEnd>
 800c9da:	e005      	b.n	800c9e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3318      	adds	r3, #24
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	480e      	ldr	r0, [pc, #56]	@ (800ca1c <xTaskRemoveFromEventList+0xbc>)
 800c9e4:	f7fe fac9 	bl	800af7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800ca20 <xTaskRemoveFromEventList+0xc0>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d905      	bls.n	800ca02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800ca24 <xTaskRemoveFromEventList+0xc4>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	e001      	b.n	800ca06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca06:	697b      	ldr	r3, [r7, #20]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	200108f8 	.word	0x200108f8
 800ca14:	200108d8 	.word	0x200108d8
 800ca18:	20010400 	.word	0x20010400
 800ca1c:	20010890 	.word	0x20010890
 800ca20:	200103fc 	.word	0x200103fc
 800ca24:	200108e4 	.word	0x200108e4

0800ca28 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ca32:	4b2a      	ldr	r3, [pc, #168]	@ (800cadc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10b      	bne.n	800ca52 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	613b      	str	r3, [r7, #16]
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	e7fd      	b.n	800ca4e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10b      	bne.n	800ca80 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	60fb      	str	r3, [r7, #12]
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	e7fd      	b.n	800ca7c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7fe fad7 	bl	800b034 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fad2 	bl	800b034 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca94:	4b12      	ldr	r3, [pc, #72]	@ (800cae0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d903      	bls.n	800caa4 <vTaskRemoveFromUnorderedEventList+0x7c>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa0:	4a0f      	ldr	r2, [pc, #60]	@ (800cae0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caa8:	4613      	mov	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4a0c      	ldr	r2, [pc, #48]	@ (800cae4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800cab2:	441a      	add	r2, r3
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	3304      	adds	r3, #4
 800cab8:	4619      	mov	r1, r3
 800caba:	4610      	mov	r0, r2
 800cabc:	f7fe fa5d 	bl	800af7a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac4:	4b08      	ldr	r3, [pc, #32]	@ (800cae8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caca:	429a      	cmp	r2, r3
 800cacc:	d902      	bls.n	800cad4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800cace:	4b07      	ldr	r3, [pc, #28]	@ (800caec <vTaskRemoveFromUnorderedEventList+0xc4>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	601a      	str	r2, [r3, #0]
	}
}
 800cad4:	bf00      	nop
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	200108f8 	.word	0x200108f8
 800cae0:	200108d8 	.word	0x200108d8
 800cae4:	20010400 	.word	0x20010400
 800cae8:	200103fc 	.word	0x200103fc
 800caec:	200108e4 	.word	0x200108e4

0800caf0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10b      	bne.n	800cb16 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	60fb      	str	r3, [r7, #12]
}
 800cb10:	bf00      	nop
 800cb12:	bf00      	nop
 800cb14:	e7fd      	b.n	800cb12 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800cb16:	f001 fa1f 	bl	800df58 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb1a:	4b07      	ldr	r3, [pc, #28]	@ (800cb38 <vTaskSetTimeOutState+0x48>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cb22:	4b06      	ldr	r3, [pc, #24]	@ (800cb3c <vTaskSetTimeOutState+0x4c>)
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cb2a:	f001 fa47 	bl	800dfbc <vPortExitCritical>
}
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	200108e8 	.word	0x200108e8
 800cb3c:	200108d4 	.word	0x200108d4

0800cb40 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb48:	4b06      	ldr	r3, [pc, #24]	@ (800cb64 <vTaskInternalSetTimeOutState+0x24>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb50:	4b05      	ldr	r3, [pc, #20]	@ (800cb68 <vTaskInternalSetTimeOutState+0x28>)
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	605a      	str	r2, [r3, #4]
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	200108e8 	.word	0x200108e8
 800cb68:	200108d4 	.word	0x200108d4

0800cb6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10b      	bne.n	800cb94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	613b      	str	r3, [r7, #16]
}
 800cb8e:	bf00      	nop
 800cb90:	bf00      	nop
 800cb92:	e7fd      	b.n	800cb90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10b      	bne.n	800cbb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	60fb      	str	r3, [r7, #12]
}
 800cbac:	bf00      	nop
 800cbae:	bf00      	nop
 800cbb0:	e7fd      	b.n	800cbae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cbb2:	f001 f9d1 	bl	800df58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	@ (800cc2c <xTaskCheckForTimeOut+0xc0>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbce:	d102      	bne.n	800cbd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e023      	b.n	800cc1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b15      	ldr	r3, [pc, #84]	@ (800cc30 <xTaskCheckForTimeOut+0xc4>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d007      	beq.n	800cbf2 <xTaskCheckForTimeOut+0x86>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d302      	bcc.n	800cbf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e015      	b.n	800cc1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d20b      	bcs.n	800cc14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	1ad2      	subs	r2, r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff99 	bl	800cb40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e004      	b.n	800cc1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc1e:	f001 f9cd 	bl	800dfbc <vPortExitCritical>

	return xReturn;
 800cc22:	69fb      	ldr	r3, [r7, #28]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3720      	adds	r7, #32
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	200108d4 	.word	0x200108d4
 800cc30:	200108e8 	.word	0x200108e8

0800cc34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc34:	b480      	push	{r7}
 800cc36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc38:	4b03      	ldr	r3, [pc, #12]	@ (800cc48 <vTaskMissedYield+0x14>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
}
 800cc3e:	bf00      	nop
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	200108e4 	.word	0x200108e4

0800cc4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc54:	f000 f852 	bl	800ccfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc58:	4b06      	ldr	r3, [pc, #24]	@ (800cc74 <prvIdleTask+0x28>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d9f9      	bls.n	800cc54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc60:	4b05      	ldr	r3, [pc, #20]	@ (800cc78 <prvIdleTask+0x2c>)
 800cc62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc70:	e7f0      	b.n	800cc54 <prvIdleTask+0x8>
 800cc72:	bf00      	nop
 800cc74:	20010400 	.word	0x20010400
 800cc78:	e000ed04 	.word	0xe000ed04

0800cc7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc82:	2300      	movs	r3, #0
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	e00c      	b.n	800cca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4a12      	ldr	r2, [pc, #72]	@ (800ccdc <prvInitialiseTaskLists+0x60>)
 800cc94:	4413      	add	r3, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe f942 	bl	800af20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b37      	cmp	r3, #55	@ 0x37
 800cca6:	d9ef      	bls.n	800cc88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cca8:	480d      	ldr	r0, [pc, #52]	@ (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccaa:	f7fe f939 	bl	800af20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccae:	480d      	ldr	r0, [pc, #52]	@ (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccb0:	f7fe f936 	bl	800af20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccb4:	480c      	ldr	r0, [pc, #48]	@ (800cce8 <prvInitialiseTaskLists+0x6c>)
 800ccb6:	f7fe f933 	bl	800af20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccba:	480c      	ldr	r0, [pc, #48]	@ (800ccec <prvInitialiseTaskLists+0x70>)
 800ccbc:	f7fe f930 	bl	800af20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccc0:	480b      	ldr	r0, [pc, #44]	@ (800ccf0 <prvInitialiseTaskLists+0x74>)
 800ccc2:	f7fe f92d 	bl	800af20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf4 <prvInitialiseTaskLists+0x78>)
 800ccc8:	4a05      	ldr	r2, [pc, #20]	@ (800cce0 <prvInitialiseTaskLists+0x64>)
 800ccca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cccc:	4b0a      	ldr	r3, [pc, #40]	@ (800ccf8 <prvInitialiseTaskLists+0x7c>)
 800ccce:	4a05      	ldr	r2, [pc, #20]	@ (800cce4 <prvInitialiseTaskLists+0x68>)
 800ccd0:	601a      	str	r2, [r3, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	20010400 	.word	0x20010400
 800cce0:	20010860 	.word	0x20010860
 800cce4:	20010874 	.word	0x20010874
 800cce8:	20010890 	.word	0x20010890
 800ccec:	200108a4 	.word	0x200108a4
 800ccf0:	200108bc 	.word	0x200108bc
 800ccf4:	20010888 	.word	0x20010888
 800ccf8:	2001088c 	.word	0x2001088c

0800ccfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd02:	e019      	b.n	800cd38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd04:	f001 f928 	bl	800df58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd08:	4b10      	ldr	r3, [pc, #64]	@ (800cd4c <prvCheckTasksWaitingTermination+0x50>)
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fe f98d 	bl	800b034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4a0b      	ldr	r2, [pc, #44]	@ (800cd50 <prvCheckTasksWaitingTermination+0x54>)
 800cd22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd24:	4b0b      	ldr	r3, [pc, #44]	@ (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	4a0a      	ldr	r2, [pc, #40]	@ (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd2e:	f001 f945 	bl	800dfbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f810 	bl	800cd58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd38:	4b06      	ldr	r3, [pc, #24]	@ (800cd54 <prvCheckTasksWaitingTermination+0x58>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e1      	bne.n	800cd04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	200108a4 	.word	0x200108a4
 800cd50:	200108d0 	.word	0x200108d0
 800cd54:	200108b8 	.word	0x200108b8

0800cd58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3354      	adds	r3, #84	@ 0x54
 800cd64:	4618      	mov	r0, r3
 800cd66:	f011 fa53 	bl	801e210 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d108      	bne.n	800cd86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f001 fadd 	bl	800e338 <vPortFree>
				vPortFree( pxTCB );
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 fada 	bl	800e338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd84:	e019      	b.n	800cdba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d103      	bne.n	800cd98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 fad1 	bl	800e338 <vPortFree>
	}
 800cd96:	e010      	b.n	800cdba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d00b      	beq.n	800cdba <prvDeleteTCB+0x62>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60fb      	str	r3, [r7, #12]
}
 800cdb4:	bf00      	nop
 800cdb6:	bf00      	nop
 800cdb8:	e7fd      	b.n	800cdb6 <prvDeleteTCB+0x5e>
	}
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
	...

0800cdc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdca:	4b0c      	ldr	r3, [pc, #48]	@ (800cdfc <prvResetNextTaskUnblockTime+0x38>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d104      	bne.n	800cdde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ce00 <prvResetNextTaskUnblockTime+0x3c>)
 800cdd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cddc:	e008      	b.n	800cdf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdde:	4b07      	ldr	r3, [pc, #28]	@ (800cdfc <prvResetNextTaskUnblockTime+0x38>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4a04      	ldr	r2, [pc, #16]	@ (800ce00 <prvResetNextTaskUnblockTime+0x3c>)
 800cdee:	6013      	str	r3, [r2, #0]
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	20010888 	.word	0x20010888
 800ce00:	200108f0 	.word	0x200108f0

0800ce04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce38 <xTaskGetSchedulerState+0x34>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d102      	bne.n	800ce18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce12:	2301      	movs	r3, #1
 800ce14:	607b      	str	r3, [r7, #4]
 800ce16:	e008      	b.n	800ce2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce18:	4b08      	ldr	r3, [pc, #32]	@ (800ce3c <xTaskGetSchedulerState+0x38>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce20:	2302      	movs	r3, #2
 800ce22:	607b      	str	r3, [r7, #4]
 800ce24:	e001      	b.n	800ce2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce26:	2300      	movs	r3, #0
 800ce28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce2a:	687b      	ldr	r3, [r7, #4]
	}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	200108dc 	.word	0x200108dc
 800ce3c:	200108f8 	.word	0x200108f8

0800ce40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d051      	beq.n	800cefa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce5a:	4b2a      	ldr	r3, [pc, #168]	@ (800cf04 <xTaskPriorityInherit+0xc4>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d241      	bcs.n	800cee8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	699b      	ldr	r3, [r3, #24]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	db06      	blt.n	800ce7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce6c:	4b25      	ldr	r3, [pc, #148]	@ (800cf04 <xTaskPriorityInherit+0xc4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	6959      	ldr	r1, [r3, #20]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4a1f      	ldr	r2, [pc, #124]	@ (800cf08 <xTaskPriorityInherit+0xc8>)
 800ce8c:	4413      	add	r3, r2
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	d122      	bne.n	800ced8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	3304      	adds	r3, #4
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe f8cc 	bl	800b034 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce9c:	4b19      	ldr	r3, [pc, #100]	@ (800cf04 <xTaskPriorityInherit+0xc4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceaa:	4b18      	ldr	r3, [pc, #96]	@ (800cf0c <xTaskPriorityInherit+0xcc>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d903      	bls.n	800ceba <xTaskPriorityInherit+0x7a>
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb6:	4a15      	ldr	r2, [pc, #84]	@ (800cf0c <xTaskPriorityInherit+0xcc>)
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cebe:	4613      	mov	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4a10      	ldr	r2, [pc, #64]	@ (800cf08 <xTaskPriorityInherit+0xc8>)
 800cec8:	441a      	add	r2, r3
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	3304      	adds	r3, #4
 800cece:	4619      	mov	r1, r3
 800ced0:	4610      	mov	r0, r2
 800ced2:	f7fe f852 	bl	800af7a <vListInsertEnd>
 800ced6:	e004      	b.n	800cee2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ced8:	4b0a      	ldr	r3, [pc, #40]	@ (800cf04 <xTaskPriorityInherit+0xc4>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cee2:	2301      	movs	r3, #1
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e008      	b.n	800cefa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ceec:	4b05      	ldr	r3, [pc, #20]	@ (800cf04 <xTaskPriorityInherit+0xc4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d201      	bcs.n	800cefa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cef6:	2301      	movs	r3, #1
 800cef8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cefa:	68fb      	ldr	r3, [r7, #12]
	}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	200103fc 	.word	0x200103fc
 800cf08:	20010400 	.word	0x20010400
 800cf0c:	200108d8 	.word	0x200108d8

0800cf10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d058      	beq.n	800cfd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf26:	4b2f      	ldr	r3, [pc, #188]	@ (800cfe4 <xTaskPriorityDisinherit+0xd4>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d00b      	beq.n	800cf48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	60fb      	str	r3, [r7, #12]
}
 800cf42:	bf00      	nop
 800cf44:	bf00      	nop
 800cf46:	e7fd      	b.n	800cf44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10b      	bne.n	800cf68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	60bb      	str	r3, [r7, #8]
}
 800cf62:	bf00      	nop
 800cf64:	bf00      	nop
 800cf66:	e7fd      	b.n	800cf64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf6c:	1e5a      	subs	r2, r3, #1
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d02c      	beq.n	800cfd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d128      	bne.n	800cfd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe f852 	bl	800b034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe8 <xTaskPriorityDisinherit+0xd8>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d903      	bls.n	800cfb8 <xTaskPriorityDisinherit+0xa8>
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	4a0c      	ldr	r2, [pc, #48]	@ (800cfe8 <xTaskPriorityDisinherit+0xd8>)
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4a09      	ldr	r2, [pc, #36]	@ (800cfec <xTaskPriorityDisinherit+0xdc>)
 800cfc6:	441a      	add	r2, r3
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7fd ffd3 	bl	800af7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfd8:	697b      	ldr	r3, [r7, #20]
	}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	200103fc 	.word	0x200103fc
 800cfe8:	200108d8 	.word	0x200108d8
 800cfec:	20010400 	.word	0x20010400

0800cff0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cffe:	2301      	movs	r3, #1
 800d000:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d06c      	beq.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10b      	bne.n	800d028 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60fb      	str	r3, [r7, #12]
}
 800d022:	bf00      	nop
 800d024:	bf00      	nop
 800d026:	e7fd      	b.n	800d024 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d902      	bls.n	800d038 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	61fb      	str	r3, [r7, #28]
 800d036:	e002      	b.n	800d03e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d03c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	429a      	cmp	r2, r3
 800d046:	d04c      	beq.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d147      	bne.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d052:	4b26      	ldr	r3, [pc, #152]	@ (800d0ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d10b      	bne.n	800d074 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	60bb      	str	r3, [r7, #8]
}
 800d06e:	bf00      	nop
 800d070:	bf00      	nop
 800d072:	e7fd      	b.n	800d070 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d078:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	69fa      	ldr	r2, [r7, #28]
 800d07e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	2b00      	cmp	r3, #0
 800d086:	db04      	blt.n	800d092 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	6959      	ldr	r1, [r3, #20]
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4a13      	ldr	r2, [pc, #76]	@ (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0a2:	4413      	add	r3, r2
 800d0a4:	4299      	cmp	r1, r3
 800d0a6:	d11c      	bne.n	800d0e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fd ffc1 	bl	800b034 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d903      	bls.n	800d0c6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4413      	add	r3, r2
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4a07      	ldr	r2, [pc, #28]	@ (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d0d4:	441a      	add	r2, r3
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	3304      	adds	r3, #4
 800d0da:	4619      	mov	r1, r3
 800d0dc:	4610      	mov	r0, r2
 800d0de:	f7fd ff4c 	bl	800af7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0e2:	bf00      	nop
 800d0e4:	3720      	adds	r7, #32
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	200103fc 	.word	0x200103fc
 800d0f0:	20010400 	.word	0x20010400
 800d0f4:	200108d8 	.word	0x200108d8

0800d0f8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800d0fe:	4b09      	ldr	r3, [pc, #36]	@ (800d124 <uxTaskResetEventItemValue+0x2c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d106:	4b07      	ldr	r3, [pc, #28]	@ (800d124 <uxTaskResetEventItemValue+0x2c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d10c:	4b05      	ldr	r3, [pc, #20]	@ (800d124 <uxTaskResetEventItemValue+0x2c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d114:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800d116:	687b      	ldr	r3, [r7, #4]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	200103fc 	.word	0x200103fc

0800d128 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d128:	b480      	push	{r7}
 800d12a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d12c:	4b07      	ldr	r3, [pc, #28]	@ (800d14c <pvTaskIncrementMutexHeldCount+0x24>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d134:	4b05      	ldr	r3, [pc, #20]	@ (800d14c <pvTaskIncrementMutexHeldCount+0x24>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d13a:	3201      	adds	r2, #1
 800d13c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d13e:	4b03      	ldr	r3, [pc, #12]	@ (800d14c <pvTaskIncrementMutexHeldCount+0x24>)
 800d140:	681b      	ldr	r3, [r3, #0]
	}
 800d142:	4618      	mov	r0, r3
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	200103fc 	.word	0x200103fc

0800d150 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d15e:	f000 fefb 	bl	800df58 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d162:	4b29      	ldr	r3, [pc, #164]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d01c      	beq.n	800d1aa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d170:	4b25      	ldr	r3, [pc, #148]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	43d2      	mvns	r2, r2
 800d17c:	400a      	ands	r2, r1
 800d17e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d182:	4b21      	ldr	r3, [pc, #132]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00b      	beq.n	800d1aa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d192:	2101      	movs	r1, #1
 800d194:	6838      	ldr	r0, [r7, #0]
 800d196:	f000 f9e3 	bl	800d560 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d19a:	4b1c      	ldr	r3, [pc, #112]	@ (800d20c <xTaskNotifyWait+0xbc>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d1aa:	f000 ff07 	bl	800dfbc <vPortExitCritical>

		taskENTER_CRITICAL();
 800d1ae:	f000 fed3 	bl	800df58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d005      	beq.n	800d1c4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d1b8:	4b13      	ldr	r3, [pc, #76]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d1c4:	4b10      	ldr	r3, [pc, #64]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d002      	beq.n	800d1d8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	617b      	str	r3, [r7, #20]
 800d1d6:	e00a      	b.n	800d1ee <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	43d2      	mvns	r2, r2
 800d1e4:	400a      	ands	r2, r1
 800d1e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1ee:	4b06      	ldr	r3, [pc, #24]	@ (800d208 <xTaskNotifyWait+0xb8>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d1f8:	f000 fee0 	bl	800dfbc <vPortExitCritical>

		return xReturn;
 800d1fc:	697b      	ldr	r3, [r7, #20]
	}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	200103fc 	.word	0x200103fc
 800d20c:	e000ed04 	.word	0xe000ed04

0800d210 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d210:	b580      	push	{r7, lr}
 800d212:	b08a      	sub	sp, #40	@ 0x28
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	603b      	str	r3, [r7, #0]
 800d21c:	4613      	mov	r3, r2
 800d21e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d220:	2301      	movs	r3, #1
 800d222:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10b      	bne.n	800d242 <xTaskGenericNotify+0x32>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	61bb      	str	r3, [r7, #24]
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	e7fd      	b.n	800d23e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d246:	f000 fe87 	bl	800df58 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d260:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	2202      	movs	r2, #2
 800d266:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	2b04      	cmp	r3, #4
 800d26e:	d82e      	bhi.n	800d2ce <xTaskGenericNotify+0xbe>
 800d270:	a201      	add	r2, pc, #4	@ (adr r2, 800d278 <xTaskGenericNotify+0x68>)
 800d272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d276:	bf00      	nop
 800d278:	0800d2f3 	.word	0x0800d2f3
 800d27c:	0800d28d 	.word	0x0800d28d
 800d280:	0800d29f 	.word	0x0800d29f
 800d284:	0800d2af 	.word	0x0800d2af
 800d288:	0800d2b9 	.word	0x0800d2b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	431a      	orrs	r2, r3
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d29c:	e02c      	b.n	800d2f8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d2ac:	e024      	b.n	800d2f8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d2b6:	e01f      	b.n	800d2f8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d2b8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d004      	beq.n	800d2c8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d2c6:	e017      	b.n	800d2f8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800d2cc:	e014      	b.n	800d2f8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d2d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2d8:	d00d      	beq.n	800d2f6 <xTaskGenericNotify+0xe6>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	617b      	str	r3, [r7, #20]
}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	e7fd      	b.n	800d2ee <xTaskGenericNotify+0xde>
					break;
 800d2f2:	bf00      	nop
 800d2f4:	e000      	b.n	800d2f8 <xTaskGenericNotify+0xe8>

					break;
 800d2f6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d2f8:	7ffb      	ldrb	r3, [r7, #31]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d13b      	bne.n	800d376 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	3304      	adds	r3, #4
 800d302:	4618      	mov	r0, r3
 800d304:	f7fd fe96 	bl	800b034 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d30c:	4b1d      	ldr	r3, [pc, #116]	@ (800d384 <xTaskGenericNotify+0x174>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	429a      	cmp	r2, r3
 800d312:	d903      	bls.n	800d31c <xTaskGenericNotify+0x10c>
 800d314:	6a3b      	ldr	r3, [r7, #32]
 800d316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d318:	4a1a      	ldr	r2, [pc, #104]	@ (800d384 <xTaskGenericNotify+0x174>)
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4a17      	ldr	r2, [pc, #92]	@ (800d388 <xTaskGenericNotify+0x178>)
 800d32a:	441a      	add	r2, r3
 800d32c:	6a3b      	ldr	r3, [r7, #32]
 800d32e:	3304      	adds	r3, #4
 800d330:	4619      	mov	r1, r3
 800d332:	4610      	mov	r0, r2
 800d334:	f7fd fe21 	bl	800af7a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d338:	6a3b      	ldr	r3, [r7, #32]
 800d33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <xTaskGenericNotify+0x148>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	613b      	str	r3, [r7, #16]
}
 800d352:	bf00      	nop
 800d354:	bf00      	nop
 800d356:	e7fd      	b.n	800d354 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d35c:	4b0b      	ldr	r3, [pc, #44]	@ (800d38c <xTaskGenericNotify+0x17c>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d362:	429a      	cmp	r2, r3
 800d364:	d907      	bls.n	800d376 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d366:	4b0a      	ldr	r3, [pc, #40]	@ (800d390 <xTaskGenericNotify+0x180>)
 800d368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d376:	f000 fe21 	bl	800dfbc <vPortExitCritical>

		return xReturn;
 800d37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3728      	adds	r7, #40	@ 0x28
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200108d8 	.word	0x200108d8
 800d388:	20010400 	.word	0x20010400
 800d38c:	200103fc 	.word	0x200103fc
 800d390:	e000ed04 	.word	0xe000ed04

0800d394 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d394:	b580      	push	{r7, lr}
 800d396:	b08e      	sub	sp, #56	@ 0x38
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	603b      	str	r3, [r7, #0]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10b      	bne.n	800d3c6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d3c0:	bf00      	nop
 800d3c2:	bf00      	nop
 800d3c4:	e7fd      	b.n	800d3c2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3c6:	f000 fea7 	bl	800e118 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800d3ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	623a      	str	r2, [r7, #32]
 800d3e4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d3e6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d406:	2202      	movs	r2, #2
 800d408:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2b04      	cmp	r3, #4
 800d410:	d82e      	bhi.n	800d470 <xTaskGenericNotifyFromISR+0xdc>
 800d412:	a201      	add	r2, pc, #4	@ (adr r2, 800d418 <xTaskGenericNotifyFromISR+0x84>)
 800d414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d418:	0800d495 	.word	0x0800d495
 800d41c:	0800d42d 	.word	0x0800d42d
 800d420:	0800d43f 	.word	0x0800d43f
 800d424:	0800d44f 	.word	0x0800d44f
 800d428:	0800d459 	.word	0x0800d459
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	431a      	orrs	r2, r3
 800d436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d438:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d43c:	e02d      	b.n	800d49a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d448:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d44c:	e025      	b.n	800d49a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d456:	e020      	b.n	800d49a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d458:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d004      	beq.n	800d46a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d468:	e017      	b.n	800d49a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800d46e:	e014      	b.n	800d49a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d47a:	d00d      	beq.n	800d498 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	61bb      	str	r3, [r7, #24]
}
 800d48e:	bf00      	nop
 800d490:	bf00      	nop
 800d492:	e7fd      	b.n	800d490 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d494:	bf00      	nop
 800d496:	e000      	b.n	800d49a <xTaskGenericNotifyFromISR+0x106>
					break;
 800d498:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d49a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d147      	bne.n	800d532 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00b      	beq.n	800d4c2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	617b      	str	r3, [r7, #20]
}
 800d4bc:	bf00      	nop
 800d4be:	bf00      	nop
 800d4c0:	e7fd      	b.n	800d4be <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4c2:	4b21      	ldr	r3, [pc, #132]	@ (800d548 <xTaskGenericNotifyFromISR+0x1b4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d11d      	bne.n	800d506 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fd fdb0 	bl	800b034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d54c <xTaskGenericNotifyFromISR+0x1b8>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d903      	bls.n	800d4e8 <xTaskGenericNotifyFromISR+0x154>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e4:	4a19      	ldr	r2, [pc, #100]	@ (800d54c <xTaskGenericNotifyFromISR+0x1b8>)
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4a16      	ldr	r2, [pc, #88]	@ (800d550 <xTaskGenericNotifyFromISR+0x1bc>)
 800d4f6:	441a      	add	r2, r3
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fd fd3b 	bl	800af7a <vListInsertEnd>
 800d504:	e005      	b.n	800d512 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	3318      	adds	r3, #24
 800d50a:	4619      	mov	r1, r3
 800d50c:	4811      	ldr	r0, [pc, #68]	@ (800d554 <xTaskGenericNotifyFromISR+0x1c0>)
 800d50e:	f7fd fd34 	bl	800af7a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d516:	4b10      	ldr	r3, [pc, #64]	@ (800d558 <xTaskGenericNotifyFromISR+0x1c4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d908      	bls.n	800d532 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d528:	2201      	movs	r2, #1
 800d52a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d52c:	4b0b      	ldr	r3, [pc, #44]	@ (800d55c <xTaskGenericNotifyFromISR+0x1c8>)
 800d52e:	2201      	movs	r2, #1
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d534:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f383 8811 	msr	BASEPRI, r3
}
 800d53c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800d540:	4618      	mov	r0, r3
 800d542:	3738      	adds	r7, #56	@ 0x38
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	200108f8 	.word	0x200108f8
 800d54c:	200108d8 	.word	0x200108d8
 800d550:	20010400 	.word	0x20010400
 800d554:	20010890 	.word	0x20010890
 800d558:	200103fc 	.word	0x200103fc
 800d55c:	200108e4 	.word	0x200108e4

0800d560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d56a:	4b21      	ldr	r3, [pc, #132]	@ (800d5f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d570:	4b20      	ldr	r3, [pc, #128]	@ (800d5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	3304      	adds	r3, #4
 800d576:	4618      	mov	r0, r3
 800d578:	f7fd fd5c 	bl	800b034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d582:	d10a      	bne.n	800d59a <prvAddCurrentTaskToDelayedList+0x3a>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d007      	beq.n	800d59a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d58a:	4b1a      	ldr	r3, [pc, #104]	@ (800d5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3304      	adds	r3, #4
 800d590:	4619      	mov	r1, r3
 800d592:	4819      	ldr	r0, [pc, #100]	@ (800d5f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d594:	f7fd fcf1 	bl	800af7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d598:	e026      	b.n	800d5e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4413      	add	r3, r2
 800d5a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5a2:	4b14      	ldr	r3, [pc, #80]	@ (800d5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d209      	bcs.n	800d5c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5b2:	4b12      	ldr	r3, [pc, #72]	@ (800d5fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4610      	mov	r0, r2
 800d5c0:	f7fd fcff 	bl	800afc2 <vListInsert>
}
 800d5c4:	e010      	b.n	800d5e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800d600 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	f7fd fcf5 	bl	800afc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d604 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d202      	bcs.n	800d5e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5e2:	4a08      	ldr	r2, [pc, #32]	@ (800d604 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	6013      	str	r3, [r2, #0]
}
 800d5e8:	bf00      	nop
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	200108d4 	.word	0x200108d4
 800d5f4:	200103fc 	.word	0x200103fc
 800d5f8:	200108bc 	.word	0x200108bc
 800d5fc:	2001088c 	.word	0x2001088c
 800d600:	20010888 	.word	0x20010888
 800d604:	200108f0 	.word	0x200108f0

0800d608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08a      	sub	sp, #40	@ 0x28
 800d60c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d60e:	2300      	movs	r3, #0
 800d610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d612:	f000 fb13 	bl	800dc3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d616:	4b1d      	ldr	r3, [pc, #116]	@ (800d68c <xTimerCreateTimerTask+0x84>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d021      	beq.n	800d662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d622:	2300      	movs	r3, #0
 800d624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d626:	1d3a      	adds	r2, r7, #4
 800d628:	f107 0108 	add.w	r1, r7, #8
 800d62c:	f107 030c 	add.w	r3, r7, #12
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd fa65 	bl	800ab00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	9202      	str	r2, [sp, #8]
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	2302      	movs	r3, #2
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	2300      	movs	r3, #0
 800d646:	460a      	mov	r2, r1
 800d648:	4911      	ldr	r1, [pc, #68]	@ (800d690 <xTimerCreateTimerTask+0x88>)
 800d64a:	4812      	ldr	r0, [pc, #72]	@ (800d694 <xTimerCreateTimerTask+0x8c>)
 800d64c:	f7fe fcb8 	bl	800bfc0 <xTaskCreateStatic>
 800d650:	4603      	mov	r3, r0
 800d652:	4a11      	ldr	r2, [pc, #68]	@ (800d698 <xTimerCreateTimerTask+0x90>)
 800d654:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d656:	4b10      	ldr	r3, [pc, #64]	@ (800d698 <xTimerCreateTimerTask+0x90>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d65e:	2301      	movs	r3, #1
 800d660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10b      	bne.n	800d680 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	613b      	str	r3, [r7, #16]
}
 800d67a:	bf00      	nop
 800d67c:	bf00      	nop
 800d67e:	e7fd      	b.n	800d67c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d680:	697b      	ldr	r3, [r7, #20]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	2001092c 	.word	0x2001092c
 800d690:	080205dc 	.word	0x080205dc
 800d694:	0800d7d5 	.word	0x0800d7d5
 800d698:	20010930 	.word	0x20010930

0800d69c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b08a      	sub	sp, #40	@ 0x28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10b      	bne.n	800d6cc <xTimerGenericCommand+0x30>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	623b      	str	r3, [r7, #32]
}
 800d6c6:	bf00      	nop
 800d6c8:	bf00      	nop
 800d6ca:	e7fd      	b.n	800d6c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6cc:	4b19      	ldr	r3, [pc, #100]	@ (800d734 <xTimerGenericCommand+0x98>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d02a      	beq.n	800d72a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2b05      	cmp	r3, #5
 800d6e4:	dc18      	bgt.n	800d718 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6e6:	f7ff fb8d 	bl	800ce04 <xTaskGetSchedulerState>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d109      	bne.n	800d704 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6f0:	4b10      	ldr	r3, [pc, #64]	@ (800d734 <xTimerGenericCommand+0x98>)
 800d6f2:	6818      	ldr	r0, [r3, #0]
 800d6f4:	f107 0110 	add.w	r1, r7, #16
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6fc:	f7fd fe78 	bl	800b3f0 <xQueueGenericSend>
 800d700:	6278      	str	r0, [r7, #36]	@ 0x24
 800d702:	e012      	b.n	800d72a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d704:	4b0b      	ldr	r3, [pc, #44]	@ (800d734 <xTimerGenericCommand+0x98>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	f107 0110 	add.w	r1, r7, #16
 800d70c:	2300      	movs	r3, #0
 800d70e:	2200      	movs	r2, #0
 800d710:	f7fd fe6e 	bl	800b3f0 <xQueueGenericSend>
 800d714:	6278      	str	r0, [r7, #36]	@ 0x24
 800d716:	e008      	b.n	800d72a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d718:	4b06      	ldr	r3, [pc, #24]	@ (800d734 <xTimerGenericCommand+0x98>)
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	f107 0110 	add.w	r1, r7, #16
 800d720:	2300      	movs	r3, #0
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	f7fd ff66 	bl	800b5f4 <xQueueGenericSendFromISR>
 800d728:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3728      	adds	r7, #40	@ 0x28
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	2001092c 	.word	0x2001092c

0800d738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af02      	add	r7, sp, #8
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d742:	4b23      	ldr	r3, [pc, #140]	@ (800d7d0 <prvProcessExpiredTimer+0x98>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	3304      	adds	r3, #4
 800d750:	4618      	mov	r0, r3
 800d752:	f7fd fc6f 	bl	800b034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d75c:	f003 0304 	and.w	r3, r3, #4
 800d760:	2b00      	cmp	r3, #0
 800d762:	d023      	beq.n	800d7ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	699a      	ldr	r2, [r3, #24]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	18d1      	adds	r1, r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	6978      	ldr	r0, [r7, #20]
 800d772:	f000 f8d5 	bl	800d920 <prvInsertTimerInActiveList>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d020      	beq.n	800d7be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d77c:	2300      	movs	r3, #0
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	2300      	movs	r3, #0
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	2100      	movs	r1, #0
 800d786:	6978      	ldr	r0, [r7, #20]
 800d788:	f7ff ff88 	bl	800d69c <xTimerGenericCommand>
 800d78c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d114      	bne.n	800d7be <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	60fb      	str	r3, [r7, #12]
}
 800d7a6:	bf00      	nop
 800d7a8:	bf00      	nop
 800d7aa:	e7fd      	b.n	800d7a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7b2:	f023 0301 	bic.w	r3, r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	6a1b      	ldr	r3, [r3, #32]
 800d7c2:	6978      	ldr	r0, [r7, #20]
 800d7c4:	4798      	blx	r3
}
 800d7c6:	bf00      	nop
 800d7c8:	3718      	adds	r7, #24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20010924 	.word	0x20010924

0800d7d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7dc:	f107 0308 	add.w	r3, r7, #8
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 f859 	bl	800d898 <prvGetNextExpireTime>
 800d7e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f000 f805 	bl	800d7fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7f2:	f000 f8d7 	bl	800d9a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7f6:	bf00      	nop
 800d7f8:	e7f0      	b.n	800d7dc <prvTimerTask+0x8>
	...

0800d7fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d806:	f7fe fe3f 	bl	800c488 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d80a:	f107 0308 	add.w	r3, r7, #8
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 f866 	bl	800d8e0 <prvSampleTimeNow>
 800d814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d130      	bne.n	800d87e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d10a      	bne.n	800d838 <prvProcessTimerOrBlockTask+0x3c>
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	429a      	cmp	r2, r3
 800d828:	d806      	bhi.n	800d838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d82a:	f7fe fe3b 	bl	800c4a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d82e:	68f9      	ldr	r1, [r7, #12]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7ff ff81 	bl	800d738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d836:	e024      	b.n	800d882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d008      	beq.n	800d850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d83e:	4b13      	ldr	r3, [pc, #76]	@ (800d88c <prvProcessTimerOrBlockTask+0x90>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d101      	bne.n	800d84c <prvProcessTimerOrBlockTask+0x50>
 800d848:	2301      	movs	r3, #1
 800d84a:	e000      	b.n	800d84e <prvProcessTimerOrBlockTask+0x52>
 800d84c:	2300      	movs	r3, #0
 800d84e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d850:	4b0f      	ldr	r3, [pc, #60]	@ (800d890 <prvProcessTimerOrBlockTask+0x94>)
 800d852:	6818      	ldr	r0, [r3, #0]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	4619      	mov	r1, r3
 800d85e:	f7fe fb7b 	bl	800bf58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d862:	f7fe fe1f 	bl	800c4a4 <xTaskResumeAll>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10a      	bne.n	800d882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d86c:	4b09      	ldr	r3, [pc, #36]	@ (800d894 <prvProcessTimerOrBlockTask+0x98>)
 800d86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	f3bf 8f6f 	isb	sy
}
 800d87c:	e001      	b.n	800d882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d87e:	f7fe fe11 	bl	800c4a4 <xTaskResumeAll>
}
 800d882:	bf00      	nop
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20010928 	.word	0x20010928
 800d890:	2001092c 	.word	0x2001092c
 800d894:	e000ed04 	.word	0xe000ed04

0800d898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d8dc <prvGetNextExpireTime+0x44>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <prvGetNextExpireTime+0x16>
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	e000      	b.n	800d8b0 <prvGetNextExpireTime+0x18>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d105      	bne.n	800d8c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8bc:	4b07      	ldr	r3, [pc, #28]	@ (800d8dc <prvGetNextExpireTime+0x44>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	60fb      	str	r3, [r7, #12]
 800d8c6:	e001      	b.n	800d8cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	20010924 	.word	0x20010924

0800d8e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8e8:	f7fe fe7a 	bl	800c5e0 <xTaskGetTickCount>
 800d8ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d91c <prvSampleTimeNow+0x3c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d205      	bcs.n	800d904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8f8:	f000 f93a 	bl	800db70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	e002      	b.n	800d90a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d90a:	4a04      	ldr	r2, [pc, #16]	@ (800d91c <prvSampleTimeNow+0x3c>)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d910:	68fb      	ldr	r3, [r7, #12]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	20010934 	.word	0x20010934

0800d920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d92e:	2300      	movs	r3, #0
 800d930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	429a      	cmp	r2, r3
 800d944:	d812      	bhi.n	800d96c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	1ad2      	subs	r2, r2, r3
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	429a      	cmp	r2, r3
 800d952:	d302      	bcc.n	800d95a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d954:	2301      	movs	r3, #1
 800d956:	617b      	str	r3, [r7, #20]
 800d958:	e01b      	b.n	800d992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d95a:	4b10      	ldr	r3, [pc, #64]	@ (800d99c <prvInsertTimerInActiveList+0x7c>)
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3304      	adds	r3, #4
 800d962:	4619      	mov	r1, r3
 800d964:	4610      	mov	r0, r2
 800d966:	f7fd fb2c 	bl	800afc2 <vListInsert>
 800d96a:	e012      	b.n	800d992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d206      	bcs.n	800d982 <prvInsertTimerInActiveList+0x62>
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d302      	bcc.n	800d982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d97c:	2301      	movs	r3, #1
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	e007      	b.n	800d992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d982:	4b07      	ldr	r3, [pc, #28]	@ (800d9a0 <prvInsertTimerInActiveList+0x80>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3304      	adds	r3, #4
 800d98a:	4619      	mov	r1, r3
 800d98c:	4610      	mov	r0, r2
 800d98e:	f7fd fb18 	bl	800afc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d992:	697b      	ldr	r3, [r7, #20]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3718      	adds	r7, #24
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	20010928 	.word	0x20010928
 800d9a0:	20010924 	.word	0x20010924

0800d9a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b08e      	sub	sp, #56	@ 0x38
 800d9a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9aa:	e0ce      	b.n	800db4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	da19      	bge.n	800d9e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9b2:	1d3b      	adds	r3, r7, #4
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10b      	bne.n	800d9d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	61fb      	str	r3, [r7, #28]
}
 800d9d0:	bf00      	nop
 800d9d2:	bf00      	nop
 800d9d4:	e7fd      	b.n	800d9d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9dc:	6850      	ldr	r0, [r2, #4]
 800d9de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9e0:	6892      	ldr	r2, [r2, #8]
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f2c0 80ae 	blt.w	800db4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d004      	beq.n	800da04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fc:	3304      	adds	r3, #4
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fd fb18 	bl	800b034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da04:	463b      	mov	r3, r7
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff ff6a 	bl	800d8e0 <prvSampleTimeNow>
 800da0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b09      	cmp	r3, #9
 800da12:	f200 8097 	bhi.w	800db44 <prvProcessReceivedCommands+0x1a0>
 800da16:	a201      	add	r2, pc, #4	@ (adr r2, 800da1c <prvProcessReceivedCommands+0x78>)
 800da18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1c:	0800da45 	.word	0x0800da45
 800da20:	0800da45 	.word	0x0800da45
 800da24:	0800da45 	.word	0x0800da45
 800da28:	0800dabb 	.word	0x0800dabb
 800da2c:	0800dacf 	.word	0x0800dacf
 800da30:	0800db1b 	.word	0x0800db1b
 800da34:	0800da45 	.word	0x0800da45
 800da38:	0800da45 	.word	0x0800da45
 800da3c:	0800dabb 	.word	0x0800dabb
 800da40:	0800dacf 	.word	0x0800dacf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da4a:	f043 0301 	orr.w	r3, r3, #1
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	18d1      	adds	r1, r2, r3
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da64:	f7ff ff5c 	bl	800d920 <prvInsertTimerInActiveList>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d06c      	beq.n	800db48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da7c:	f003 0304 	and.w	r3, r3, #4
 800da80:	2b00      	cmp	r3, #0
 800da82:	d061      	beq.n	800db48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	441a      	add	r2, r3
 800da8c:	2300      	movs	r3, #0
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	2300      	movs	r3, #0
 800da92:	2100      	movs	r1, #0
 800da94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da96:	f7ff fe01 	bl	800d69c <xTimerGenericCommand>
 800da9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d152      	bne.n	800db48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	61bb      	str	r3, [r7, #24]
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop
 800dab8:	e7fd      	b.n	800dab6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800daba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dac0:	f023 0301 	bic.w	r3, r3, #1
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dacc:	e03d      	b.n	800db4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dad4:	f043 0301 	orr.w	r3, r3, #1
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dadc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10b      	bne.n	800db06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800daee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	617b      	str	r3, [r7, #20]
}
 800db00:	bf00      	nop
 800db02:	bf00      	nop
 800db04:	e7fd      	b.n	800db02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db08:	699a      	ldr	r2, [r3, #24]
 800db0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0c:	18d1      	adds	r1, r2, r3
 800db0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db14:	f7ff ff04 	bl	800d920 <prvInsertTimerInActiveList>
					break;
 800db18:	e017      	b.n	800db4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db20:	f003 0302 	and.w	r3, r3, #2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d103      	bne.n	800db30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800db28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db2a:	f000 fc05 	bl	800e338 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db2e:	e00c      	b.n	800db4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db36:	f023 0301 	bic.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db42:	e002      	b.n	800db4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800db44:	bf00      	nop
 800db46:	e000      	b.n	800db4a <prvProcessReceivedCommands+0x1a6>
					break;
 800db48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db4a:	4b08      	ldr	r3, [pc, #32]	@ (800db6c <prvProcessReceivedCommands+0x1c8>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	1d39      	adds	r1, r7, #4
 800db50:	2200      	movs	r2, #0
 800db52:	4618      	mov	r0, r3
 800db54:	f7fd fdec 	bl	800b730 <xQueueReceive>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f47f af26 	bne.w	800d9ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	3730      	adds	r7, #48	@ 0x30
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	2001092c 	.word	0x2001092c

0800db70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db76:	e049      	b.n	800dc0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db78:	4b2e      	ldr	r3, [pc, #184]	@ (800dc34 <prvSwitchTimerLists+0xc4>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db82:	4b2c      	ldr	r3, [pc, #176]	@ (800dc34 <prvSwitchTimerLists+0xc4>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3304      	adds	r3, #4
 800db90:	4618      	mov	r0, r3
 800db92:	f7fd fa4f 	bl	800b034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dba4:	f003 0304 	and.w	r3, r3, #4
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d02f      	beq.n	800dc0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	699b      	ldr	r3, [r3, #24]
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d90e      	bls.n	800dbdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbca:	4b1a      	ldr	r3, [pc, #104]	@ (800dc34 <prvSwitchTimerLists+0xc4>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7fd f9f4 	bl	800afc2 <vListInsert>
 800dbda:	e017      	b.n	800dc0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbdc:	2300      	movs	r3, #0
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f7ff fd58 	bl	800d69c <xTimerGenericCommand>
 800dbec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10b      	bne.n	800dc0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf8:	f383 8811 	msr	BASEPRI, r3
 800dbfc:	f3bf 8f6f 	isb	sy
 800dc00:	f3bf 8f4f 	dsb	sy
 800dc04:	603b      	str	r3, [r7, #0]
}
 800dc06:	bf00      	nop
 800dc08:	bf00      	nop
 800dc0a:	e7fd      	b.n	800dc08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc0c:	4b09      	ldr	r3, [pc, #36]	@ (800dc34 <prvSwitchTimerLists+0xc4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1b0      	bne.n	800db78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc16:	4b07      	ldr	r3, [pc, #28]	@ (800dc34 <prvSwitchTimerLists+0xc4>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc1c:	4b06      	ldr	r3, [pc, #24]	@ (800dc38 <prvSwitchTimerLists+0xc8>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a04      	ldr	r2, [pc, #16]	@ (800dc34 <prvSwitchTimerLists+0xc4>)
 800dc22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc24:	4a04      	ldr	r2, [pc, #16]	@ (800dc38 <prvSwitchTimerLists+0xc8>)
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	6013      	str	r3, [r2, #0]
}
 800dc2a:	bf00      	nop
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20010924 	.word	0x20010924
 800dc38:	20010928 	.word	0x20010928

0800dc3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc42:	f000 f989 	bl	800df58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc46:	4b15      	ldr	r3, [pc, #84]	@ (800dc9c <prvCheckForValidListAndQueue+0x60>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d120      	bne.n	800dc90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc4e:	4814      	ldr	r0, [pc, #80]	@ (800dca0 <prvCheckForValidListAndQueue+0x64>)
 800dc50:	f7fd f966 	bl	800af20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc54:	4813      	ldr	r0, [pc, #76]	@ (800dca4 <prvCheckForValidListAndQueue+0x68>)
 800dc56:	f7fd f963 	bl	800af20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc5a:	4b13      	ldr	r3, [pc, #76]	@ (800dca8 <prvCheckForValidListAndQueue+0x6c>)
 800dc5c:	4a10      	ldr	r2, [pc, #64]	@ (800dca0 <prvCheckForValidListAndQueue+0x64>)
 800dc5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc60:	4b12      	ldr	r3, [pc, #72]	@ (800dcac <prvCheckForValidListAndQueue+0x70>)
 800dc62:	4a10      	ldr	r2, [pc, #64]	@ (800dca4 <prvCheckForValidListAndQueue+0x68>)
 800dc64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc66:	2300      	movs	r3, #0
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	4b11      	ldr	r3, [pc, #68]	@ (800dcb0 <prvCheckForValidListAndQueue+0x74>)
 800dc6c:	4a11      	ldr	r2, [pc, #68]	@ (800dcb4 <prvCheckForValidListAndQueue+0x78>)
 800dc6e:	2110      	movs	r1, #16
 800dc70:	200a      	movs	r0, #10
 800dc72:	f7fd fa73 	bl	800b15c <xQueueGenericCreateStatic>
 800dc76:	4603      	mov	r3, r0
 800dc78:	4a08      	ldr	r2, [pc, #32]	@ (800dc9c <prvCheckForValidListAndQueue+0x60>)
 800dc7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc7c:	4b07      	ldr	r3, [pc, #28]	@ (800dc9c <prvCheckForValidListAndQueue+0x60>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc84:	4b05      	ldr	r3, [pc, #20]	@ (800dc9c <prvCheckForValidListAndQueue+0x60>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	490b      	ldr	r1, [pc, #44]	@ (800dcb8 <prvCheckForValidListAndQueue+0x7c>)
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fe f910 	bl	800beb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc90:	f000 f994 	bl	800dfbc <vPortExitCritical>
}
 800dc94:	bf00      	nop
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	2001092c 	.word	0x2001092c
 800dca0:	200108fc 	.word	0x200108fc
 800dca4:	20010910 	.word	0x20010910
 800dca8:	20010924 	.word	0x20010924
 800dcac:	20010928 	.word	0x20010928
 800dcb0:	200109d8 	.word	0x200109d8
 800dcb4:	20010938 	.word	0x20010938
 800dcb8:	080205e4 	.word	0x080205e4

0800dcbc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b08a      	sub	sp, #40	@ 0x28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
 800dcc8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800dcca:	f06f 0301 	mvn.w	r3, #1
 800dcce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dcdc:	4b06      	ldr	r3, [pc, #24]	@ (800dcf8 <xTimerPendFunctionCallFromISR+0x3c>)
 800dcde:	6818      	ldr	r0, [r3, #0]
 800dce0:	f107 0114 	add.w	r1, r7, #20
 800dce4:	2300      	movs	r3, #0
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	f7fd fc84 	bl	800b5f4 <xQueueGenericSendFromISR>
 800dcec:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3728      	adds	r7, #40	@ 0x28
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	2001092c 	.word	0x2001092c

0800dcfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	3b04      	subs	r3, #4
 800dd0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dd14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	3b04      	subs	r3, #4
 800dd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f023 0201 	bic.w	r2, r3, #1
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3b04      	subs	r3, #4
 800dd2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd2c:	4a0c      	ldr	r2, [pc, #48]	@ (800dd60 <pxPortInitialiseStack+0x64>)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3b14      	subs	r3, #20
 800dd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3b04      	subs	r3, #4
 800dd42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f06f 0202 	mvn.w	r2, #2
 800dd4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3b20      	subs	r3, #32
 800dd50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd52:	68fb      	ldr	r3, [r7, #12]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	0800dd65 	.word	0x0800dd65

0800dd64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd6e:	4b13      	ldr	r3, [pc, #76]	@ (800ddbc <prvTaskExitError+0x58>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd76:	d00b      	beq.n	800dd90 <prvTaskExitError+0x2c>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	60fb      	str	r3, [r7, #12]
}
 800dd8a:	bf00      	nop
 800dd8c:	bf00      	nop
 800dd8e:	e7fd      	b.n	800dd8c <prvTaskExitError+0x28>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	60bb      	str	r3, [r7, #8]
}
 800dda2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dda4:	bf00      	nop
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d0fc      	beq.n	800dda6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ddac:	bf00      	nop
 800ddae:	bf00      	nop
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	20000028 	.word	0x20000028

0800ddc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ddc0:	4b07      	ldr	r3, [pc, #28]	@ (800dde0 <pxCurrentTCBConst2>)
 800ddc2:	6819      	ldr	r1, [r3, #0]
 800ddc4:	6808      	ldr	r0, [r1, #0]
 800ddc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddca:	f380 8809 	msr	PSP, r0
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f04f 0000 	mov.w	r0, #0
 800ddd6:	f380 8811 	msr	BASEPRI, r0
 800ddda:	4770      	bx	lr
 800dddc:	f3af 8000 	nop.w

0800dde0 <pxCurrentTCBConst2>:
 800dde0:	200103fc 	.word	0x200103fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop

0800dde8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dde8:	4808      	ldr	r0, [pc, #32]	@ (800de0c <prvPortStartFirstTask+0x24>)
 800ddea:	6800      	ldr	r0, [r0, #0]
 800ddec:	6800      	ldr	r0, [r0, #0]
 800ddee:	f380 8808 	msr	MSP, r0
 800ddf2:	f04f 0000 	mov.w	r0, #0
 800ddf6:	f380 8814 	msr	CONTROL, r0
 800ddfa:	b662      	cpsie	i
 800ddfc:	b661      	cpsie	f
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	df00      	svc	0
 800de08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de0a:	bf00      	nop
 800de0c:	e000ed08 	.word	0xe000ed08

0800de10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de16:	4b47      	ldr	r3, [pc, #284]	@ (800df34 <xPortStartScheduler+0x124>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a47      	ldr	r2, [pc, #284]	@ (800df38 <xPortStartScheduler+0x128>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d10b      	bne.n	800de38 <xPortStartScheduler+0x28>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	613b      	str	r3, [r7, #16]
}
 800de32:	bf00      	nop
 800de34:	bf00      	nop
 800de36:	e7fd      	b.n	800de34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de38:	4b3e      	ldr	r3, [pc, #248]	@ (800df34 <xPortStartScheduler+0x124>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a3f      	ldr	r2, [pc, #252]	@ (800df3c <xPortStartScheduler+0x12c>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d10b      	bne.n	800de5a <xPortStartScheduler+0x4a>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	60fb      	str	r3, [r7, #12]
}
 800de54:	bf00      	nop
 800de56:	bf00      	nop
 800de58:	e7fd      	b.n	800de56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de5a:	4b39      	ldr	r3, [pc, #228]	@ (800df40 <xPortStartScheduler+0x130>)
 800de5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	22ff      	movs	r2, #255	@ 0xff
 800de6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	b2db      	uxtb	r3, r3
 800de72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de74:	78fb      	ldrb	r3, [r7, #3]
 800de76:	b2db      	uxtb	r3, r3
 800de78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	4b31      	ldr	r3, [pc, #196]	@ (800df44 <xPortStartScheduler+0x134>)
 800de80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de82:	4b31      	ldr	r3, [pc, #196]	@ (800df48 <xPortStartScheduler+0x138>)
 800de84:	2207      	movs	r2, #7
 800de86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de88:	e009      	b.n	800de9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800de8a:	4b2f      	ldr	r3, [pc, #188]	@ (800df48 <xPortStartScheduler+0x138>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	3b01      	subs	r3, #1
 800de90:	4a2d      	ldr	r2, [pc, #180]	@ (800df48 <xPortStartScheduler+0x138>)
 800de92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de94:	78fb      	ldrb	r3, [r7, #3]
 800de96:	b2db      	uxtb	r3, r3
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de9e:	78fb      	ldrb	r3, [r7, #3]
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dea6:	2b80      	cmp	r3, #128	@ 0x80
 800dea8:	d0ef      	beq.n	800de8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800deaa:	4b27      	ldr	r3, [pc, #156]	@ (800df48 <xPortStartScheduler+0x138>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f1c3 0307 	rsb	r3, r3, #7
 800deb2:	2b04      	cmp	r3, #4
 800deb4:	d00b      	beq.n	800dece <xPortStartScheduler+0xbe>
	__asm volatile
 800deb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deba:	f383 8811 	msr	BASEPRI, r3
 800debe:	f3bf 8f6f 	isb	sy
 800dec2:	f3bf 8f4f 	dsb	sy
 800dec6:	60bb      	str	r3, [r7, #8]
}
 800dec8:	bf00      	nop
 800deca:	bf00      	nop
 800decc:	e7fd      	b.n	800deca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dece:	4b1e      	ldr	r3, [pc, #120]	@ (800df48 <xPortStartScheduler+0x138>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	021b      	lsls	r3, r3, #8
 800ded4:	4a1c      	ldr	r2, [pc, #112]	@ (800df48 <xPortStartScheduler+0x138>)
 800ded6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ded8:	4b1b      	ldr	r3, [pc, #108]	@ (800df48 <xPortStartScheduler+0x138>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dee0:	4a19      	ldr	r2, [pc, #100]	@ (800df48 <xPortStartScheduler+0x138>)
 800dee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800deec:	4b17      	ldr	r3, [pc, #92]	@ (800df4c <xPortStartScheduler+0x13c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a16      	ldr	r2, [pc, #88]	@ (800df4c <xPortStartScheduler+0x13c>)
 800def2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800def6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800def8:	4b14      	ldr	r3, [pc, #80]	@ (800df4c <xPortStartScheduler+0x13c>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a13      	ldr	r2, [pc, #76]	@ (800df4c <xPortStartScheduler+0x13c>)
 800defe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800df02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df04:	f000 f8da 	bl	800e0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df08:	4b11      	ldr	r3, [pc, #68]	@ (800df50 <xPortStartScheduler+0x140>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df0e:	f000 f8f9 	bl	800e104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df12:	4b10      	ldr	r3, [pc, #64]	@ (800df54 <xPortStartScheduler+0x144>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a0f      	ldr	r2, [pc, #60]	@ (800df54 <xPortStartScheduler+0x144>)
 800df18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800df1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df1e:	f7ff ff63 	bl	800dde8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df22:	f7fe fc27 	bl	800c774 <vTaskSwitchContext>
	prvTaskExitError();
 800df26:	f7ff ff1d 	bl	800dd64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	e000ed00 	.word	0xe000ed00
 800df38:	410fc271 	.word	0x410fc271
 800df3c:	410fc270 	.word	0x410fc270
 800df40:	e000e400 	.word	0xe000e400
 800df44:	20010a28 	.word	0x20010a28
 800df48:	20010a2c 	.word	0x20010a2c
 800df4c:	e000ed20 	.word	0xe000ed20
 800df50:	20000028 	.word	0x20000028
 800df54:	e000ef34 	.word	0xe000ef34

0800df58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	607b      	str	r3, [r7, #4]
}
 800df70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df72:	4b10      	ldr	r3, [pc, #64]	@ (800dfb4 <vPortEnterCritical+0x5c>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	4a0e      	ldr	r2, [pc, #56]	@ (800dfb4 <vPortEnterCritical+0x5c>)
 800df7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df7c:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb4 <vPortEnterCritical+0x5c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d110      	bne.n	800dfa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df84:	4b0c      	ldr	r3, [pc, #48]	@ (800dfb8 <vPortEnterCritical+0x60>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00b      	beq.n	800dfa6 <vPortEnterCritical+0x4e>
	__asm volatile
 800df8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	603b      	str	r3, [r7, #0]
}
 800dfa0:	bf00      	nop
 800dfa2:	bf00      	nop
 800dfa4:	e7fd      	b.n	800dfa2 <vPortEnterCritical+0x4a>
	}
}
 800dfa6:	bf00      	nop
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	20000028 	.word	0x20000028
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfc2:	4b12      	ldr	r3, [pc, #72]	@ (800e00c <vPortExitCritical+0x50>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10b      	bne.n	800dfe2 <vPortExitCritical+0x26>
	__asm volatile
 800dfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfce:	f383 8811 	msr	BASEPRI, r3
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	607b      	str	r3, [r7, #4]
}
 800dfdc:	bf00      	nop
 800dfde:	bf00      	nop
 800dfe0:	e7fd      	b.n	800dfde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfe2:	4b0a      	ldr	r3, [pc, #40]	@ (800e00c <vPortExitCritical+0x50>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	4a08      	ldr	r2, [pc, #32]	@ (800e00c <vPortExitCritical+0x50>)
 800dfea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfec:	4b07      	ldr	r3, [pc, #28]	@ (800e00c <vPortExitCritical+0x50>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d105      	bne.n	800e000 <vPortExitCritical+0x44>
 800dff4:	2300      	movs	r3, #0
 800dff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f383 8811 	msr	BASEPRI, r3
}
 800dffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	20000028 	.word	0x20000028

0800e010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e010:	f3ef 8009 	mrs	r0, PSP
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	4b15      	ldr	r3, [pc, #84]	@ (800e070 <pxCurrentTCBConst>)
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	f01e 0f10 	tst.w	lr, #16
 800e020:	bf08      	it	eq
 800e022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02a:	6010      	str	r0, [r2, #0]
 800e02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e034:	f380 8811 	msr	BASEPRI, r0
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f7fe fb98 	bl	800c774 <vTaskSwitchContext>
 800e044:	f04f 0000 	mov.w	r0, #0
 800e048:	f380 8811 	msr	BASEPRI, r0
 800e04c:	bc09      	pop	{r0, r3}
 800e04e:	6819      	ldr	r1, [r3, #0]
 800e050:	6808      	ldr	r0, [r1, #0]
 800e052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e056:	f01e 0f10 	tst.w	lr, #16
 800e05a:	bf08      	it	eq
 800e05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e060:	f380 8809 	msr	PSP, r0
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	f3af 8000 	nop.w

0800e070 <pxCurrentTCBConst>:
 800e070:	200103fc 	.word	0x200103fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop

0800e078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	607b      	str	r3, [r7, #4]
}
 800e090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e092:	f7fe fab5 	bl	800c600 <xTaskIncrementTick>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e09c:	4b06      	ldr	r3, [pc, #24]	@ (800e0b8 <xPortSysTickHandler+0x40>)
 800e09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	f383 8811 	msr	BASEPRI, r3
}
 800e0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0b0:	bf00      	nop
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	e000ed04 	.word	0xe000ed04

0800e0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f0 <vPortSetupTimerInterrupt+0x34>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f4 <vPortSetupTimerInterrupt+0x38>)
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f8 <vPortSetupTimerInterrupt+0x3c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e0fc <vPortSetupTimerInterrupt+0x40>)
 800e0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d6:	099b      	lsrs	r3, r3, #6
 800e0d8:	4a09      	ldr	r2, [pc, #36]	@ (800e100 <vPortSetupTimerInterrupt+0x44>)
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0de:	4b04      	ldr	r3, [pc, #16]	@ (800e0f0 <vPortSetupTimerInterrupt+0x34>)
 800e0e0:	2207      	movs	r2, #7
 800e0e2:	601a      	str	r2, [r3, #0]
}
 800e0e4:	bf00      	nop
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	e000e010 	.word	0xe000e010
 800e0f4:	e000e018 	.word	0xe000e018
 800e0f8:	2000001c 	.word	0x2000001c
 800e0fc:	10624dd3 	.word	0x10624dd3
 800e100:	e000e014 	.word	0xe000e014

0800e104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e104:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e114 <vPortEnableVFP+0x10>
 800e108:	6801      	ldr	r1, [r0, #0]
 800e10a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e10e:	6001      	str	r1, [r0, #0]
 800e110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e112:	bf00      	nop
 800e114:	e000ed88 	.word	0xe000ed88

0800e118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e11e:	f3ef 8305 	mrs	r3, IPSR
 800e122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b0f      	cmp	r3, #15
 800e128:	d915      	bls.n	800e156 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e12a:	4a18      	ldr	r2, [pc, #96]	@ (800e18c <vPortValidateInterruptPriority+0x74>)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4413      	add	r3, r2
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e134:	4b16      	ldr	r3, [pc, #88]	@ (800e190 <vPortValidateInterruptPriority+0x78>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	7afa      	ldrb	r2, [r7, #11]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d20b      	bcs.n	800e156 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	607b      	str	r3, [r7, #4]
}
 800e150:	bf00      	nop
 800e152:	bf00      	nop
 800e154:	e7fd      	b.n	800e152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e156:	4b0f      	ldr	r3, [pc, #60]	@ (800e194 <vPortValidateInterruptPriority+0x7c>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e15e:	4b0e      	ldr	r3, [pc, #56]	@ (800e198 <vPortValidateInterruptPriority+0x80>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	429a      	cmp	r2, r3
 800e164:	d90b      	bls.n	800e17e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	603b      	str	r3, [r7, #0]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <vPortValidateInterruptPriority+0x62>
	}
 800e17e:	bf00      	nop
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	e000e3f0 	.word	0xe000e3f0
 800e190:	20010a28 	.word	0x20010a28
 800e194:	e000ed0c 	.word	0xe000ed0c
 800e198:	20010a2c 	.word	0x20010a2c

0800e19c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08a      	sub	sp, #40	@ 0x28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e1a8:	f7fe f96e 	bl	800c488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e1ac:	4b5c      	ldr	r3, [pc, #368]	@ (800e320 <pvPortMalloc+0x184>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e1b4:	f000 f924 	bl	800e400 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e1b8:	4b5a      	ldr	r3, [pc, #360]	@ (800e324 <pvPortMalloc+0x188>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4013      	ands	r3, r2
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f040 8095 	bne.w	800e2f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d01e      	beq.n	800e20a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e1cc:	2208      	movs	r2, #8
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f003 0307 	and.w	r3, r3, #7
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d015      	beq.n	800e20a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f023 0307 	bic.w	r3, r3, #7
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f003 0307 	and.w	r3, r3, #7
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00b      	beq.n	800e20a <pvPortMalloc+0x6e>
	__asm volatile
 800e1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	617b      	str	r3, [r7, #20]
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop
 800e208:	e7fd      	b.n	800e206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d06f      	beq.n	800e2f0 <pvPortMalloc+0x154>
 800e210:	4b45      	ldr	r3, [pc, #276]	@ (800e328 <pvPortMalloc+0x18c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	429a      	cmp	r2, r3
 800e218:	d86a      	bhi.n	800e2f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e21a:	4b44      	ldr	r3, [pc, #272]	@ (800e32c <pvPortMalloc+0x190>)
 800e21c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e21e:	4b43      	ldr	r3, [pc, #268]	@ (800e32c <pvPortMalloc+0x190>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e224:	e004      	b.n	800e230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d903      	bls.n	800e242 <pvPortMalloc+0xa6>
 800e23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1f1      	bne.n	800e226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e242:	4b37      	ldr	r3, [pc, #220]	@ (800e320 <pvPortMalloc+0x184>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e248:	429a      	cmp	r2, r3
 800e24a:	d051      	beq.n	800e2f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2208      	movs	r2, #8
 800e252:	4413      	add	r3, r2
 800e254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	1ad2      	subs	r2, r2, r3
 800e266:	2308      	movs	r3, #8
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d920      	bls.n	800e2b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4413      	add	r3, r2
 800e274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	f003 0307 	and.w	r3, r3, #7
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00b      	beq.n	800e298 <pvPortMalloc+0xfc>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	613b      	str	r3, [r7, #16]
}
 800e292:	bf00      	nop
 800e294:	bf00      	nop
 800e296:	e7fd      	b.n	800e294 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	1ad2      	subs	r2, r2, r3
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2aa:	69b8      	ldr	r0, [r7, #24]
 800e2ac:	f000 f90a 	bl	800e4c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e328 <pvPortMalloc+0x18c>)
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e328 <pvPortMalloc+0x18c>)
 800e2bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2be:	4b1a      	ldr	r3, [pc, #104]	@ (800e328 <pvPortMalloc+0x18c>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e330 <pvPortMalloc+0x194>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d203      	bcs.n	800e2d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2ca:	4b17      	ldr	r3, [pc, #92]	@ (800e328 <pvPortMalloc+0x18c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a18      	ldr	r2, [pc, #96]	@ (800e330 <pvPortMalloc+0x194>)
 800e2d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	4b13      	ldr	r3, [pc, #76]	@ (800e324 <pvPortMalloc+0x188>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2e6:	4b13      	ldr	r3, [pc, #76]	@ (800e334 <pvPortMalloc+0x198>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	4a11      	ldr	r2, [pc, #68]	@ (800e334 <pvPortMalloc+0x198>)
 800e2ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2f0:	f7fe f8d8 	bl	800c4a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	f003 0307 	and.w	r3, r3, #7
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00b      	beq.n	800e316 <pvPortMalloc+0x17a>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	60fb      	str	r3, [r7, #12]
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	e7fd      	b.n	800e312 <pvPortMalloc+0x176>
	return pvReturn;
 800e316:	69fb      	ldr	r3, [r7, #28]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3728      	adds	r7, #40	@ 0x28
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	2001aa38 	.word	0x2001aa38
 800e324:	2001aa4c 	.word	0x2001aa4c
 800e328:	2001aa3c 	.word	0x2001aa3c
 800e32c:	2001aa30 	.word	0x2001aa30
 800e330:	2001aa40 	.word	0x2001aa40
 800e334:	2001aa44 	.word	0x2001aa44

0800e338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d04f      	beq.n	800e3ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e34a:	2308      	movs	r3, #8
 800e34c:	425b      	negs	r3, r3
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	4413      	add	r3, r2
 800e352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	4b25      	ldr	r3, [pc, #148]	@ (800e3f4 <vPortFree+0xbc>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4013      	ands	r3, r2
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10b      	bne.n	800e37e <vPortFree+0x46>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	60fb      	str	r3, [r7, #12]
}
 800e378:	bf00      	nop
 800e37a:	bf00      	nop
 800e37c:	e7fd      	b.n	800e37a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00b      	beq.n	800e39e <vPortFree+0x66>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	60bb      	str	r3, [r7, #8]
}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	e7fd      	b.n	800e39a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	685a      	ldr	r2, [r3, #4]
 800e3a2:	4b14      	ldr	r3, [pc, #80]	@ (800e3f4 <vPortFree+0xbc>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d01e      	beq.n	800e3ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d11a      	bne.n	800e3ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	685a      	ldr	r2, [r3, #4]
 800e3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f4 <vPortFree+0xbc>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	43db      	mvns	r3, r3
 800e3be:	401a      	ands	r2, r3
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e3c4:	f7fe f860 	bl	800c488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f8 <vPortFree+0xc0>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	4a09      	ldr	r2, [pc, #36]	@ (800e3f8 <vPortFree+0xc0>)
 800e3d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3d6:	6938      	ldr	r0, [r7, #16]
 800e3d8:	f000 f874 	bl	800e4c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3dc:	4b07      	ldr	r3, [pc, #28]	@ (800e3fc <vPortFree+0xc4>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	4a06      	ldr	r2, [pc, #24]	@ (800e3fc <vPortFree+0xc4>)
 800e3e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3e6:	f7fe f85d 	bl	800c4a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3ea:	bf00      	nop
 800e3ec:	3718      	adds	r7, #24
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	2001aa4c 	.word	0x2001aa4c
 800e3f8:	2001aa3c 	.word	0x2001aa3c
 800e3fc:	2001aa48 	.word	0x2001aa48

0800e400 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e406:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800e40a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e40c:	4b27      	ldr	r3, [pc, #156]	@ (800e4ac <prvHeapInit+0xac>)
 800e40e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f003 0307 	and.w	r3, r3, #7
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00c      	beq.n	800e434 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3307      	adds	r3, #7
 800e41e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f023 0307 	bic.w	r3, r3, #7
 800e426:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	1ad3      	subs	r3, r2, r3
 800e42e:	4a1f      	ldr	r2, [pc, #124]	@ (800e4ac <prvHeapInit+0xac>)
 800e430:	4413      	add	r3, r2
 800e432:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e438:	4a1d      	ldr	r2, [pc, #116]	@ (800e4b0 <prvHeapInit+0xb0>)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e43e:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b0 <prvHeapInit+0xb0>)
 800e440:	2200      	movs	r2, #0
 800e442:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	4413      	add	r3, r2
 800e44a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e44c:	2208      	movs	r2, #8
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	1a9b      	subs	r3, r3, r2
 800e452:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f023 0307 	bic.w	r3, r3, #7
 800e45a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	4a15      	ldr	r2, [pc, #84]	@ (800e4b4 <prvHeapInit+0xb4>)
 800e460:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e462:	4b14      	ldr	r3, [pc, #80]	@ (800e4b4 <prvHeapInit+0xb4>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2200      	movs	r2, #0
 800e468:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e46a:	4b12      	ldr	r3, [pc, #72]	@ (800e4b4 <prvHeapInit+0xb4>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2200      	movs	r2, #0
 800e470:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	1ad2      	subs	r2, r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e480:	4b0c      	ldr	r3, [pc, #48]	@ (800e4b4 <prvHeapInit+0xb4>)
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	4a0a      	ldr	r2, [pc, #40]	@ (800e4b8 <prvHeapInit+0xb8>)
 800e48e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	4a09      	ldr	r2, [pc, #36]	@ (800e4bc <prvHeapInit+0xbc>)
 800e496:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e498:	4b09      	ldr	r3, [pc, #36]	@ (800e4c0 <prvHeapInit+0xc0>)
 800e49a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e49e:	601a      	str	r2, [r3, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	20010a30 	.word	0x20010a30
 800e4b0:	2001aa30 	.word	0x2001aa30
 800e4b4:	2001aa38 	.word	0x2001aa38
 800e4b8:	2001aa40 	.word	0x2001aa40
 800e4bc:	2001aa3c 	.word	0x2001aa3c
 800e4c0:	2001aa4c 	.word	0x2001aa4c

0800e4c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4cc:	4b28      	ldr	r3, [pc, #160]	@ (800e570 <prvInsertBlockIntoFreeList+0xac>)
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	e002      	b.n	800e4d8 <prvInsertBlockIntoFreeList+0x14>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d8f7      	bhi.n	800e4d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d108      	bne.n	800e506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	685a      	ldr	r2, [r3, #4]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	441a      	add	r2, r3
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	441a      	add	r2, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	429a      	cmp	r2, r3
 800e518:	d118      	bne.n	800e54c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	4b15      	ldr	r3, [pc, #84]	@ (800e574 <prvInsertBlockIntoFreeList+0xb0>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	429a      	cmp	r2, r3
 800e524:	d00d      	beq.n	800e542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	685a      	ldr	r2, [r3, #4]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	441a      	add	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	601a      	str	r2, [r3, #0]
 800e540:	e008      	b.n	800e554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e542:	4b0c      	ldr	r3, [pc, #48]	@ (800e574 <prvInsertBlockIntoFreeList+0xb0>)
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	e003      	b.n	800e554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d002      	beq.n	800e562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e562:	bf00      	nop
 800e564:	3714      	adds	r7, #20
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	2001aa30 	.word	0x2001aa30
 800e574:	2001aa38 	.word	0x2001aa38

0800e578 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e578:	4b04      	ldr	r3, [pc, #16]	@ (800e58c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	b10a      	cbz	r2, 800e582 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xa>
 800e57e:	4803      	ldr	r0, [pc, #12]	@ (800e58c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e580:	4770      	bx	lr
 800e582:	4a03      	ldr	r2, [pc, #12]	@ (800e590 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x18>)
 800e584:	4801      	ldr	r0, [pc, #4]	@ (800e58c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e586:	6812      	ldr	r2, [r2, #0]
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	4770      	bx	lr
 800e58c:	2000002c 	.word	0x2000002c
 800e590:	2000019c 	.word	0x2000019c

0800e594 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e594:	4a02      	ldr	r2, [pc, #8]	@ (800e5a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xc>)
 800e596:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x10>)
 800e598:	6812      	ldr	r2, [r2, #0]
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	2000019c 	.word	0x2000019c
 800e5a4:	2000002c 	.word	0x2000002c

0800e5a8 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__position>:
 800e5a8:	6840      	ldr	r0, [r0, #4]
 800e5aa:	4770      	bx	lr

0800e5ac <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__position>:
 800e5ac:	6800      	ldr	r0, [r0, #0]
 800e5ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e5b2:	4770      	bx	lr

0800e5b4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__position>:
 800e5b4:	6803      	ldr	r3, [r0, #0]
 800e5b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5be:	e9c2 0100 	strd	r0, r1, [r2]
 800e5c2:	4770      	bx	lr

0800e5c4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__position>:
 800e5c4:	6803      	ldr	r3, [r0, #0]
 800e5c6:	ed92 7b00 	vldr	d7, [r2]
 800e5ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e5ce:	ed83 7b00 	vstr	d7, [r3]
 800e5d2:	4770      	bx	lr

0800e5d4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_init_function>:
 800e5d4:	f004 bc7e 	b.w	8012ed4 <actuator_msgs__msg__Actuators__init>

0800e5d8 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_fini_function>:
 800e5d8:	f004 bccc 	b.w	8012f74 <actuator_msgs__msg__Actuators__fini>

0800e5dc <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__position>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4604      	mov	r4, r0
 800e5e0:	460d      	mov	r5, r1
 800e5e2:	f004 f9b5 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ee:	f004 b995 	b.w	801291c <rosidl_runtime_c__double__Sequence__init>
 800e5f2:	bf00      	nop

0800e5f4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__normalized>:
 800e5f4:	6840      	ldr	r0, [r0, #4]
 800e5f6:	4770      	bx	lr

0800e5f8 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__velocity>:
 800e5f8:	6840      	ldr	r0, [r0, #4]
 800e5fa:	4770      	bx	lr

0800e5fc <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__velocity>:
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e602:	4770      	bx	lr

0800e604 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__position>:
 800e604:	6800      	ldr	r0, [r0, #0]
 800e606:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e60a:	4770      	bx	lr

0800e60c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__normalized>:
 800e60c:	6800      	ldr	r0, [r0, #0]
 800e60e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e612:	4770      	bx	lr

0800e614 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__normalized>:
 800e614:	6800      	ldr	r0, [r0, #0]
 800e616:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e61a:	4770      	bx	lr

0800e61c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__velocity>:
 800e61c:	6800      	ldr	r0, [r0, #0]
 800e61e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e622:	4770      	bx	lr

0800e624 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__normalized>:
 800e624:	6803      	ldr	r3, [r0, #0]
 800e626:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e62e:	e9c2 0100 	strd	r0, r1, [r2]
 800e632:	4770      	bx	lr

0800e634 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__normalized>:
 800e634:	6803      	ldr	r3, [r0, #0]
 800e636:	ed92 7b00 	vldr	d7, [r2]
 800e63a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e63e:	ed83 7b00 	vstr	d7, [r3]
 800e642:	4770      	bx	lr

0800e644 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__velocity>:
 800e644:	6803      	ldr	r3, [r0, #0]
 800e646:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e64a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e64e:	e9c2 0100 	strd	r0, r1, [r2]
 800e652:	4770      	bx	lr

0800e654 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__velocity>:
 800e654:	6803      	ldr	r3, [r0, #0]
 800e656:	ed92 7b00 	vldr	d7, [r2]
 800e65a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e65e:	ed83 7b00 	vstr	d7, [r3]
 800e662:	4770      	bx	lr

0800e664 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__normalized>:
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4604      	mov	r4, r0
 800e668:	460d      	mov	r5, r1
 800e66a:	f004 f971 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 800e66e:	4629      	mov	r1, r5
 800e670:	4620      	mov	r0, r4
 800e672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e676:	f004 b951 	b.w	801291c <rosidl_runtime_c__double__Sequence__init>
 800e67a:	bf00      	nop

0800e67c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__velocity>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
 800e682:	f004 f965 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 800e686:	4629      	mov	r1, r5
 800e688:	4620      	mov	r0, r4
 800e68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e68e:	f004 b945 	b.w	801291c <rosidl_runtime_c__double__Sequence__init>
 800e692:	bf00      	nop

0800e694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e694:	b508      	push	{r3, lr}
 800e696:	f004 fb17 	bl	8012cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e69a:	4b06      	ldr	r3, [pc, #24]	@ (800e6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e69c:	4906      	ldr	r1, [pc, #24]	@ (800e6b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x24>)
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	60c8      	str	r0, [r1, #12]
 800e6a2:	b10a      	cbz	r2, 800e6a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>
 800e6a4:	4803      	ldr	r0, [pc, #12]	@ (800e6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e6a6:	bd08      	pop	{r3, pc}
 800e6a8:	4a04      	ldr	r2, [pc, #16]	@ (800e6bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x28>)
 800e6aa:	4802      	ldr	r0, [pc, #8]	@ (800e6b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e6ac:	6812      	ldr	r2, [r2, #0]
 800e6ae:	601a      	str	r2, [r3, #0]
 800e6b0:	bd08      	pop	{r3, pc}
 800e6b2:	bf00      	nop
 800e6b4:	2000004c 	.word	0x2000004c
 800e6b8:	20000064 	.word	0x20000064
 800e6bc:	200001a0 	.word	0x200001a0

0800e6c0 <_Actuators__max_serialized_size>:
 800e6c0:	b500      	push	{lr}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	f10d 0007 	add.w	r0, sp, #7
 800e6cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800e6d0:	f004 fb96 	bl	8012e00 <max_serialized_size_std_msgs__msg__Header>
 800e6d4:	b003      	add	sp, #12
 800e6d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6da:	bf00      	nop

0800e6dc <get_serialized_size_actuator_msgs__msg__Actuators>:
 800e6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	b1f8      	cbz	r0, 800e724 <get_serialized_size_actuator_msgs__msg__Actuators+0x48>
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	f004 fb13 	bl	8012d10 <get_serialized_size_std_msgs__msg__Header>
 800e6ea:	182f      	adds	r7, r5, r0
 800e6ec:	2104      	movs	r1, #4
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800e6f4:	f000 f94a 	bl	800e98c <ucdr_alignment>
 800e6f8:	1d04      	adds	r4, r0, #4
 800e6fa:	443c      	add	r4, r7
 800e6fc:	f1b8 0f00 	cmp.w	r8, #0
 800e700:	d122      	bne.n	800e748 <get_serialized_size_actuator_msgs__msg__Actuators+0x6c>
 800e702:	4620      	mov	r0, r4
 800e704:	2104      	movs	r1, #4
 800e706:	6a77      	ldr	r7, [r6, #36]	@ 0x24
 800e708:	f000 f940 	bl	800e98c <ucdr_alignment>
 800e70c:	4404      	add	r4, r0
 800e70e:	3404      	adds	r4, #4
 800e710:	b997      	cbnz	r7, 800e738 <get_serialized_size_actuator_msgs__msg__Actuators+0x5c>
 800e712:	4620      	mov	r0, r4
 800e714:	2104      	movs	r1, #4
 800e716:	6b36      	ldr	r6, [r6, #48]	@ 0x30
 800e718:	f000 f938 	bl	800e98c <ucdr_alignment>
 800e71c:	4404      	add	r4, r0
 800e71e:	3404      	adds	r4, #4
 800e720:	b916      	cbnz	r6, 800e728 <get_serialized_size_actuator_msgs__msg__Actuators+0x4c>
 800e722:	1b60      	subs	r0, r4, r5
 800e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e728:	4620      	mov	r0, r4
 800e72a:	2108      	movs	r1, #8
 800e72c:	f000 f92e 	bl	800e98c <ucdr_alignment>
 800e730:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e734:	1984      	adds	r4, r0, r6
 800e736:	e7f4      	b.n	800e722 <get_serialized_size_actuator_msgs__msg__Actuators+0x46>
 800e738:	4620      	mov	r0, r4
 800e73a:	2108      	movs	r1, #8
 800e73c:	f000 f926 	bl	800e98c <ucdr_alignment>
 800e740:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 800e744:	4404      	add	r4, r0
 800e746:	e7e4      	b.n	800e712 <get_serialized_size_actuator_msgs__msg__Actuators+0x36>
 800e748:	4620      	mov	r0, r4
 800e74a:	2108      	movs	r1, #8
 800e74c:	f000 f91e 	bl	800e98c <ucdr_alignment>
 800e750:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 800e754:	4404      	add	r4, r0
 800e756:	e7d4      	b.n	800e702 <get_serialized_size_actuator_msgs__msg__Actuators+0x26>

0800e758 <_Actuators__cdr_deserialize>:
 800e758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75a:	460c      	mov	r4, r1
 800e75c:	b083      	sub	sp, #12
 800e75e:	2900      	cmp	r1, #0
 800e760:	d04e      	beq.n	800e800 <_Actuators__cdr_deserialize+0xa8>
 800e762:	4605      	mov	r5, r0
 800e764:	f004 fb56 	bl	8012e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e768:	6843      	ldr	r3, [r0, #4]
 800e76a:	4621      	mov	r1, r4
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	4628      	mov	r0, r5
 800e770:	4798      	blx	r3
 800e772:	69e6      	ldr	r6, [r4, #28]
 800e774:	6961      	ldr	r1, [r4, #20]
 800e776:	ab01      	add	r3, sp, #4
 800e778:	4632      	mov	r2, r6
 800e77a:	4628      	mov	r0, r5
 800e77c:	f000 f9e0 	bl	800eb40 <ucdr_deserialize_sequence_double>
 800e780:	9b01      	ldr	r3, [sp, #4]
 800e782:	b9c8      	cbnz	r0, 800e7b8 <_Actuators__cdr_deserialize+0x60>
 800e784:	429e      	cmp	r6, r3
 800e786:	d33f      	bcc.n	800e808 <_Actuators__cdr_deserialize+0xb0>
 800e788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e78a:	6a21      	ldr	r1, [r4, #32]
 800e78c:	ab01      	add	r3, sp, #4
 800e78e:	4632      	mov	r2, r6
 800e790:	4628      	mov	r0, r5
 800e792:	f000 f9d5 	bl	800eb40 <ucdr_deserialize_sequence_double>
 800e796:	9b01      	ldr	r3, [sp, #4]
 800e798:	b310      	cbz	r0, 800e7e0 <_Actuators__cdr_deserialize+0x88>
 800e79a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e79c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800e79e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e7a0:	ab01      	add	r3, sp, #4
 800e7a2:	463a      	mov	r2, r7
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	f000 f9cb 	bl	800eb40 <ucdr_deserialize_sequence_double>
 800e7aa:	9b01      	ldr	r3, [sp, #4]
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	b128      	cbz	r0, 800e7bc <_Actuators__cdr_deserialize+0x64>
 800e7b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	b003      	add	sp, #12
 800e7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7b8:	61a3      	str	r3, [r4, #24]
 800e7ba:	e7e5      	b.n	800e788 <_Actuators__cdr_deserialize+0x30>
 800e7bc:	429f      	cmp	r7, r3
 800e7be:	d2f8      	bcs.n	800e7b2 <_Actuators__cdr_deserialize+0x5a>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	75a8      	strb	r0, [r5, #22]
 800e7c4:	756b      	strb	r3, [r5, #21]
 800e7c6:	2108      	movs	r1, #8
 800e7c8:	6320      	str	r0, [r4, #48]	@ 0x30
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f000 f8f4 	bl	800e9b8 <ucdr_align_to>
 800e7d0:	9901      	ldr	r1, [sp, #4]
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	00c9      	lsls	r1, r1, #3
 800e7d6:	f000 f925 	bl	800ea24 <ucdr_advance_buffer>
 800e7da:	4630      	mov	r0, r6
 800e7dc:	b003      	add	sp, #12
 800e7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e0:	429e      	cmp	r6, r3
 800e7e2:	d2db      	bcs.n	800e79c <_Actuators__cdr_deserialize+0x44>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	75a8      	strb	r0, [r5, #22]
 800e7e8:	756b      	strb	r3, [r5, #21]
 800e7ea:	2108      	movs	r1, #8
 800e7ec:	6260      	str	r0, [r4, #36]	@ 0x24
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f000 f8e2 	bl	800e9b8 <ucdr_align_to>
 800e7f4:	9901      	ldr	r1, [sp, #4]
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	00c9      	lsls	r1, r1, #3
 800e7fa:	f000 f913 	bl	800ea24 <ucdr_advance_buffer>
 800e7fe:	e7cd      	b.n	800e79c <_Actuators__cdr_deserialize+0x44>
 800e800:	460e      	mov	r6, r1
 800e802:	4630      	mov	r0, r6
 800e804:	b003      	add	sp, #12
 800e806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e808:	2301      	movs	r3, #1
 800e80a:	75a8      	strb	r0, [r5, #22]
 800e80c:	756b      	strb	r3, [r5, #21]
 800e80e:	2108      	movs	r1, #8
 800e810:	61a0      	str	r0, [r4, #24]
 800e812:	4628      	mov	r0, r5
 800e814:	f000 f8d0 	bl	800e9b8 <ucdr_align_to>
 800e818:	9901      	ldr	r1, [sp, #4]
 800e81a:	4628      	mov	r0, r5
 800e81c:	00c9      	lsls	r1, r1, #3
 800e81e:	f000 f901 	bl	800ea24 <ucdr_advance_buffer>
 800e822:	e7b1      	b.n	800e788 <_Actuators__cdr_deserialize+0x30>

0800e824 <_Actuators__cdr_serialize>:
 800e824:	b1d0      	cbz	r0, 800e85c <_Actuators__cdr_serialize+0x38>
 800e826:	b538      	push	{r3, r4, r5, lr}
 800e828:	460d      	mov	r5, r1
 800e82a:	4604      	mov	r4, r0
 800e82c:	f004 faf2 	bl	8012e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e830:	6843      	ldr	r3, [r0, #4]
 800e832:	4629      	mov	r1, r5
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	4620      	mov	r0, r4
 800e838:	4798      	blx	r3
 800e83a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800e83e:	4628      	mov	r0, r5
 800e840:	f000 f96c 	bl	800eb1c <ucdr_serialize_sequence_double>
 800e844:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800e848:	4628      	mov	r0, r5
 800e84a:	f000 f967 	bl	800eb1c <ucdr_serialize_sequence_double>
 800e84e:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800e852:	4628      	mov	r0, r5
 800e854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e858:	f000 b960 	b.w	800eb1c <ucdr_serialize_sequence_double>
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop

0800e860 <_Actuators__get_serialized_size>:
 800e860:	b570      	push	{r4, r5, r6, lr}
 800e862:	4605      	mov	r5, r0
 800e864:	b1d0      	cbz	r0, 800e89c <_Actuators__get_serialized_size+0x3c>
 800e866:	2100      	movs	r1, #0
 800e868:	f004 fa52 	bl	8012d10 <get_serialized_size_std_msgs__msg__Header>
 800e86c:	2104      	movs	r1, #4
 800e86e:	4604      	mov	r4, r0
 800e870:	69ae      	ldr	r6, [r5, #24]
 800e872:	f000 f88b 	bl	800e98c <ucdr_alignment>
 800e876:	4404      	add	r4, r0
 800e878:	3404      	adds	r4, #4
 800e87a:	bb16      	cbnz	r6, 800e8c2 <_Actuators__get_serialized_size+0x62>
 800e87c:	4620      	mov	r0, r4
 800e87e:	2104      	movs	r1, #4
 800e880:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800e882:	f000 f883 	bl	800e98c <ucdr_alignment>
 800e886:	4404      	add	r4, r0
 800e888:	3404      	adds	r4, #4
 800e88a:	b996      	cbnz	r6, 800e8b2 <_Actuators__get_serialized_size+0x52>
 800e88c:	4620      	mov	r0, r4
 800e88e:	2104      	movs	r1, #4
 800e890:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 800e892:	f000 f87b 	bl	800e98c <ucdr_alignment>
 800e896:	4404      	add	r4, r0
 800e898:	1d25      	adds	r5, r4, #4
 800e89a:	b90e      	cbnz	r6, 800e8a0 <_Actuators__get_serialized_size+0x40>
 800e89c:	4628      	mov	r0, r5
 800e89e:	bd70      	pop	{r4, r5, r6, pc}
 800e8a0:	2108      	movs	r1, #8
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f000 f872 	bl	800e98c <ucdr_alignment>
 800e8a8:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 800e8ac:	4405      	add	r5, r0
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	bd70      	pop	{r4, r5, r6, pc}
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	2108      	movs	r1, #8
 800e8b6:	f000 f869 	bl	800e98c <ucdr_alignment>
 800e8ba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e8be:	4404      	add	r4, r0
 800e8c0:	e7e4      	b.n	800e88c <_Actuators__get_serialized_size+0x2c>
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	2108      	movs	r1, #8
 800e8c6:	f000 f861 	bl	800e98c <ucdr_alignment>
 800e8ca:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e8ce:	4404      	add	r4, r0
 800e8d0:	e7d4      	b.n	800e87c <_Actuators__get_serialized_size+0x1c>
 800e8d2:	bf00      	nop

0800e8d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e8d4:	4800      	ldr	r0, [pc, #0]	@ (800e8d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x4>)
 800e8d6:	4770      	bx	lr
 800e8d8:	20000154 	.word	0x20000154

0800e8dc <ucdr_check_buffer_available_for>:
 800e8dc:	7d83      	ldrb	r3, [r0, #22]
 800e8de:	b93b      	cbnz	r3, 800e8f0 <ucdr_check_buffer_available_for+0x14>
 800e8e0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e8e4:	440b      	add	r3, r1
 800e8e6:	4298      	cmp	r0, r3
 800e8e8:	bf34      	ite	cc
 800e8ea:	2000      	movcc	r0, #0
 800e8ec:	2001      	movcs	r0, #1
 800e8ee:	4770      	bx	lr
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	4770      	bx	lr

0800e8f4 <ucdr_check_final_buffer_behavior>:
 800e8f4:	7d83      	ldrb	r3, [r0, #22]
 800e8f6:	b943      	cbnz	r3, 800e90a <ucdr_check_final_buffer_behavior+0x16>
 800e8f8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e8fc:	4291      	cmp	r1, r2
 800e8fe:	b510      	push	{r4, lr}
 800e900:	4604      	mov	r4, r0
 800e902:	d205      	bcs.n	800e910 <ucdr_check_final_buffer_behavior+0x1c>
 800e904:	2301      	movs	r3, #1
 800e906:	4618      	mov	r0, r3
 800e908:	bd10      	pop	{r4, pc}
 800e90a:	2300      	movs	r3, #0
 800e90c:	4618      	mov	r0, r3
 800e90e:	4770      	bx	lr
 800e910:	6982      	ldr	r2, [r0, #24]
 800e912:	b13a      	cbz	r2, 800e924 <ucdr_check_final_buffer_behavior+0x30>
 800e914:	69c1      	ldr	r1, [r0, #28]
 800e916:	4790      	blx	r2
 800e918:	f080 0301 	eor.w	r3, r0, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	75a0      	strb	r0, [r4, #22]
 800e920:	4618      	mov	r0, r3
 800e922:	bd10      	pop	{r4, pc}
 800e924:	2001      	movs	r0, #1
 800e926:	75a0      	strb	r0, [r4, #22]
 800e928:	e7fa      	b.n	800e920 <ucdr_check_final_buffer_behavior+0x2c>
 800e92a:	bf00      	nop

0800e92c <ucdr_set_on_full_buffer_callback>:
 800e92c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop

0800e934 <ucdr_init_buffer_origin_offset_endian>:
 800e934:	b410      	push	{r4}
 800e936:	9c01      	ldr	r4, [sp, #4]
 800e938:	6001      	str	r1, [r0, #0]
 800e93a:	440a      	add	r2, r1
 800e93c:	6042      	str	r2, [r0, #4]
 800e93e:	190a      	adds	r2, r1, r4
 800e940:	441c      	add	r4, r3
 800e942:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e946:	6082      	str	r2, [r0, #8]
 800e948:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e94c:	7503      	strb	r3, [r0, #20]
 800e94e:	2200      	movs	r2, #0
 800e950:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e954:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e958:	7542      	strb	r2, [r0, #21]
 800e95a:	7582      	strb	r2, [r0, #22]
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop

0800e960 <ucdr_init_buffer_origin_offset>:
 800e960:	b510      	push	{r4, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	9c04      	ldr	r4, [sp, #16]
 800e966:	9400      	str	r4, [sp, #0]
 800e968:	2401      	movs	r4, #1
 800e96a:	9401      	str	r4, [sp, #4]
 800e96c:	f7ff ffe2 	bl	800e934 <ucdr_init_buffer_origin_offset_endian>
 800e970:	b002      	add	sp, #8
 800e972:	bd10      	pop	{r4, pc}

0800e974 <ucdr_init_buffer_origin>:
 800e974:	b510      	push	{r4, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	2400      	movs	r4, #0
 800e97a:	9400      	str	r4, [sp, #0]
 800e97c:	f7ff fff0 	bl	800e960 <ucdr_init_buffer_origin_offset>
 800e980:	b002      	add	sp, #8
 800e982:	bd10      	pop	{r4, pc}

0800e984 <ucdr_init_buffer>:
 800e984:	2300      	movs	r3, #0
 800e986:	f7ff bff5 	b.w	800e974 <ucdr_init_buffer_origin>
 800e98a:	bf00      	nop

0800e98c <ucdr_alignment>:
 800e98c:	fbb0 f3f1 	udiv	r3, r0, r1
 800e990:	fb03 0011 	mls	r0, r3, r1, r0
 800e994:	1a08      	subs	r0, r1, r0
 800e996:	3901      	subs	r1, #1
 800e998:	4008      	ands	r0, r1
 800e99a:	4770      	bx	lr

0800e99c <ucdr_buffer_alignment>:
 800e99c:	7d43      	ldrb	r3, [r0, #21]
 800e99e:	428b      	cmp	r3, r1
 800e9a0:	d208      	bcs.n	800e9b4 <ucdr_buffer_alignment+0x18>
 800e9a2:	6900      	ldr	r0, [r0, #16]
 800e9a4:	fbb0 f3f1 	udiv	r3, r0, r1
 800e9a8:	fb01 0013 	mls	r0, r1, r3, r0
 800e9ac:	1a08      	subs	r0, r1, r0
 800e9ae:	3901      	subs	r1, #1
 800e9b0:	4008      	ands	r0, r1
 800e9b2:	4770      	bx	lr
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	4770      	bx	lr

0800e9b8 <ucdr_align_to>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	460d      	mov	r5, r1
 800e9be:	f7ff ffed 	bl	800e99c <ucdr_buffer_alignment>
 800e9c2:	68a3      	ldr	r3, [r4, #8]
 800e9c4:	6861      	ldr	r1, [r4, #4]
 800e9c6:	6922      	ldr	r2, [r4, #16]
 800e9c8:	7565      	strb	r5, [r4, #21]
 800e9ca:	4403      	add	r3, r0
 800e9cc:	428b      	cmp	r3, r1
 800e9ce:	bf28      	it	cs
 800e9d0:	460b      	movcs	r3, r1
 800e9d2:	4402      	add	r2, r0
 800e9d4:	60a3      	str	r3, [r4, #8]
 800e9d6:	6122      	str	r2, [r4, #16]
 800e9d8:	bd38      	pop	{r3, r4, r5, pc}
 800e9da:	bf00      	nop

0800e9dc <ucdr_buffer_length>:
 800e9dc:	6882      	ldr	r2, [r0, #8]
 800e9de:	6800      	ldr	r0, [r0, #0]
 800e9e0:	1a10      	subs	r0, r2, r0
 800e9e2:	4770      	bx	lr

0800e9e4 <ucdr_buffer_remaining>:
 800e9e4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e9e8:	1a10      	subs	r0, r2, r0
 800e9ea:	4770      	bx	lr

0800e9ec <ucdr_check_final_buffer_behavior_array>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	7d83      	ldrb	r3, [r0, #22]
 800e9f0:	b963      	cbnz	r3, 800ea0c <ucdr_check_final_buffer_behavior_array+0x20>
 800e9f2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	d308      	bcc.n	800ea10 <ucdr_check_final_buffer_behavior_array+0x24>
 800e9fe:	b139      	cbz	r1, 800ea10 <ucdr_check_final_buffer_behavior_array+0x24>
 800ea00:	6983      	ldr	r3, [r0, #24]
 800ea02:	b163      	cbz	r3, 800ea1e <ucdr_check_final_buffer_behavior_array+0x32>
 800ea04:	69c1      	ldr	r1, [r0, #28]
 800ea06:	4798      	blx	r3
 800ea08:	75a0      	strb	r0, [r4, #22]
 800ea0a:	b108      	cbz	r0, 800ea10 <ucdr_check_final_buffer_behavior_array+0x24>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	4620      	mov	r0, r4
 800ea12:	f7ff ffe7 	bl	800e9e4 <ucdr_buffer_remaining>
 800ea16:	42a8      	cmp	r0, r5
 800ea18:	bf28      	it	cs
 800ea1a:	4628      	movcs	r0, r5
 800ea1c:	bd38      	pop	{r3, r4, r5, pc}
 800ea1e:	2301      	movs	r3, #1
 800ea20:	7583      	strb	r3, [r0, #22]
 800ea22:	e7f3      	b.n	800ea0c <ucdr_check_final_buffer_behavior_array+0x20>

0800ea24 <ucdr_advance_buffer>:
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4604      	mov	r4, r0
 800ea28:	460d      	mov	r5, r1
 800ea2a:	f7ff ff57 	bl	800e8dc <ucdr_check_buffer_available_for>
 800ea2e:	b178      	cbz	r0, 800ea50 <ucdr_advance_buffer+0x2c>
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	68a2      	ldr	r2, [r4, #8]
 800ea34:	442b      	add	r3, r5
 800ea36:	6123      	str	r3, [r4, #16]
 800ea38:	2301      	movs	r3, #1
 800ea3a:	442a      	add	r2, r5
 800ea3c:	7563      	strb	r3, [r4, #21]
 800ea3e:	60a2      	str	r2, [r4, #8]
 800ea40:	bd38      	pop	{r3, r4, r5, pc}
 800ea42:	68a2      	ldr	r2, [r4, #8]
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	4402      	add	r2, r0
 800ea48:	4403      	add	r3, r0
 800ea4a:	1a2d      	subs	r5, r5, r0
 800ea4c:	60a2      	str	r2, [r4, #8]
 800ea4e:	6123      	str	r3, [r4, #16]
 800ea50:	2201      	movs	r2, #1
 800ea52:	4629      	mov	r1, r5
 800ea54:	4620      	mov	r0, r4
 800ea56:	f7ff ffc9 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d1f1      	bne.n	800ea42 <ucdr_advance_buffer+0x1e>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	7563      	strb	r3, [r4, #21]
 800ea62:	bd38      	pop	{r3, r4, r5, pc}

0800ea64 <ucdr_serialize_sequence_char>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	460e      	mov	r6, r1
 800ea68:	4615      	mov	r5, r2
 800ea6a:	7d01      	ldrb	r1, [r0, #20]
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	f005 fa0f 	bl	8013e90 <ucdr_serialize_endian_uint32_t>
 800ea72:	b90d      	cbnz	r5, 800ea78 <ucdr_serialize_sequence_char+0x14>
 800ea74:	2001      	movs	r0, #1
 800ea76:	bd70      	pop	{r4, r5, r6, pc}
 800ea78:	7d21      	ldrb	r1, [r4, #20]
 800ea7a:	462b      	mov	r3, r5
 800ea7c:	4632      	mov	r2, r6
 800ea7e:	4620      	mov	r0, r4
 800ea80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea84:	f004 bca0 	b.w	80133c8 <ucdr_serialize_endian_array_char>

0800ea88 <ucdr_deserialize_sequence_char>:
 800ea88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea8c:	461d      	mov	r5, r3
 800ea8e:	4616      	mov	r6, r2
 800ea90:	460f      	mov	r7, r1
 800ea92:	461a      	mov	r2, r3
 800ea94:	7d01      	ldrb	r1, [r0, #20]
 800ea96:	4604      	mov	r4, r0
 800ea98:	f005 fb18 	bl	80140cc <ucdr_deserialize_endian_uint32_t>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	429e      	cmp	r6, r3
 800eaa0:	d208      	bcs.n	800eab4 <ucdr_deserialize_sequence_char+0x2c>
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	75a2      	strb	r2, [r4, #22]
 800eaa6:	7d21      	ldrb	r1, [r4, #20]
 800eaa8:	463a      	mov	r2, r7
 800eaaa:	4620      	mov	r0, r4
 800eaac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eab0:	f004 bcbc 	b.w	801342c <ucdr_deserialize_endian_array_char>
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1f6      	bne.n	800eaa6 <ucdr_deserialize_sequence_char+0x1e>
 800eab8:	2001      	movs	r0, #1
 800eaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabe:	bf00      	nop

0800eac0 <ucdr_serialize_sequence_uint8_t>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	460e      	mov	r6, r1
 800eac4:	4615      	mov	r5, r2
 800eac6:	7d01      	ldrb	r1, [r0, #20]
 800eac8:	4604      	mov	r4, r0
 800eaca:	f005 f9e1 	bl	8013e90 <ucdr_serialize_endian_uint32_t>
 800eace:	b90d      	cbnz	r5, 800ead4 <ucdr_serialize_sequence_uint8_t+0x14>
 800ead0:	2001      	movs	r0, #1
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	7d21      	ldrb	r1, [r4, #20]
 800ead6:	462b      	mov	r3, r5
 800ead8:	4632      	mov	r2, r6
 800eada:	4620      	mov	r0, r4
 800eadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eae0:	f004 bd08 	b.w	80134f4 <ucdr_serialize_endian_array_uint8_t>

0800eae4 <ucdr_deserialize_sequence_uint8_t>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	461d      	mov	r5, r3
 800eaea:	4616      	mov	r6, r2
 800eaec:	460f      	mov	r7, r1
 800eaee:	461a      	mov	r2, r3
 800eaf0:	7d01      	ldrb	r1, [r0, #20]
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	f005 faea 	bl	80140cc <ucdr_deserialize_endian_uint32_t>
 800eaf8:	682b      	ldr	r3, [r5, #0]
 800eafa:	429e      	cmp	r6, r3
 800eafc:	d208      	bcs.n	800eb10 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800eafe:	2201      	movs	r2, #1
 800eb00:	75a2      	strb	r2, [r4, #22]
 800eb02:	7d21      	ldrb	r1, [r4, #20]
 800eb04:	463a      	mov	r2, r7
 800eb06:	4620      	mov	r0, r4
 800eb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	f004 bd56 	b.w	80135bc <ucdr_deserialize_endian_array_uint8_t>
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d1f6      	bne.n	800eb02 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800eb14:	2001      	movs	r0, #1
 800eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1a:	bf00      	nop

0800eb1c <ucdr_serialize_sequence_double>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	460e      	mov	r6, r1
 800eb20:	4615      	mov	r5, r2
 800eb22:	7d01      	ldrb	r1, [r0, #20]
 800eb24:	4604      	mov	r4, r0
 800eb26:	f005 f9b3 	bl	8013e90 <ucdr_serialize_endian_uint32_t>
 800eb2a:	b90d      	cbnz	r5, 800eb30 <ucdr_serialize_sequence_double+0x14>
 800eb2c:	2001      	movs	r0, #1
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	7d21      	ldrb	r1, [r4, #20]
 800eb32:	462b      	mov	r3, r5
 800eb34:	4632      	mov	r2, r6
 800eb36:	4620      	mov	r0, r4
 800eb38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb3c:	f004 bdc4 	b.w	80136c8 <ucdr_serialize_endian_array_double>

0800eb40 <ucdr_deserialize_sequence_double>:
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	461d      	mov	r5, r3
 800eb46:	4616      	mov	r6, r2
 800eb48:	460f      	mov	r7, r1
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	7d01      	ldrb	r1, [r0, #20]
 800eb4e:	4604      	mov	r4, r0
 800eb50:	f005 fabc 	bl	80140cc <ucdr_deserialize_endian_uint32_t>
 800eb54:	682b      	ldr	r3, [r5, #0]
 800eb56:	429e      	cmp	r6, r3
 800eb58:	d208      	bcs.n	800eb6c <ucdr_deserialize_sequence_double+0x2c>
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	75a2      	strb	r2, [r4, #22]
 800eb5e:	7d21      	ldrb	r1, [r4, #20]
 800eb60:	463a      	mov	r2, r7
 800eb62:	4620      	mov	r0, r4
 800eb64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb68:	f004 be58 	b.w	801381c <ucdr_deserialize_endian_array_double>
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1f6      	bne.n	800eb5e <ucdr_deserialize_sequence_double+0x1e>
 800eb70:	2001      	movs	r0, #1
 800eb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb76:	bf00      	nop

0800eb78 <rcl_get_zero_initialized_init_options>:
 800eb78:	2000      	movs	r0, #0
 800eb7a:	4770      	bx	lr

0800eb7c <rcl_init_options_init>:
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	b09e      	sub	sp, #120	@ 0x78
 800eb82:	ad23      	add	r5, sp, #140	@ 0x8c
 800eb84:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d046      	beq.n	800ec1a <rcl_init_options_init+0x9e>
 800eb8c:	6803      	ldr	r3, [r0, #0]
 800eb8e:	4604      	mov	r4, r0
 800eb90:	b133      	cbz	r3, 800eba0 <rcl_init_options_init+0x24>
 800eb92:	2564      	movs	r5, #100	@ 0x64
 800eb94:	4628      	mov	r0, r5
 800eb96:	b01e      	add	sp, #120	@ 0x78
 800eb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb9c:	b004      	add	sp, #16
 800eb9e:	4770      	bx	lr
 800eba0:	4628      	mov	r0, r5
 800eba2:	f001 ffd9 	bl	8010b58 <rcutils_allocator_is_valid>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d037      	beq.n	800ec1a <rcl_init_options_init+0x9e>
 800ebaa:	46ae      	mov	lr, r5
 800ebac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebb0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800ebb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebb8:	f8de 3000 	ldr.w	r3, [lr]
 800ebbc:	f8cc 3000 	str.w	r3, [ip]
 800ebc0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800ebc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebc4:	2070      	movs	r0, #112	@ 0x70
 800ebc6:	4798      	blx	r3
 800ebc8:	4606      	mov	r6, r0
 800ebca:	6020      	str	r0, [r4, #0]
 800ebcc:	b338      	cbz	r0, 800ec1e <rcl_init_options_init+0xa2>
 800ebce:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800ebd2:	4686      	mov	lr, r0
 800ebd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ebd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ebdc:	f8dc 3000 	ldr.w	r3, [ip]
 800ebe0:	f8ce 3000 	str.w	r3, [lr]
 800ebe4:	a802      	add	r0, sp, #8
 800ebe6:	f002 fa89 	bl	80110fc <rmw_get_zero_initialized_init_options>
 800ebea:	2258      	movs	r2, #88	@ 0x58
 800ebec:	a902      	add	r1, sp, #8
 800ebee:	f106 0018 	add.w	r0, r6, #24
 800ebf2:	f00f fbde 	bl	801e3b2 <memcpy>
 800ebf6:	ab26      	add	r3, sp, #152	@ 0x98
 800ebf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ebfc:	6826      	ldr	r6, [r4, #0]
 800ebfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ec02:	f106 0018 	add.w	r0, r6, #24
 800ec06:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ec0a:	f002 fb9b 	bl	8011344 <rmw_init_options_init>
 800ec0e:	4605      	mov	r5, r0
 800ec10:	b938      	cbnz	r0, 800ec22 <rcl_init_options_init+0xa6>
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800ec18:	e7bc      	b.n	800eb94 <rcl_init_options_init+0x18>
 800ec1a:	250b      	movs	r5, #11
 800ec1c:	e7ba      	b.n	800eb94 <rcl_init_options_init+0x18>
 800ec1e:	250a      	movs	r5, #10
 800ec20:	e7b8      	b.n	800eb94 <rcl_init_options_init+0x18>
 800ec22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ec24:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800ec26:	6820      	ldr	r0, [r4, #0]
 800ec28:	4798      	blx	r3
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f009 fe4e 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 800ec30:	4605      	mov	r5, r0
 800ec32:	e7af      	b.n	800eb94 <rcl_init_options_init+0x18>

0800ec34 <rcl_init_options_fini>:
 800ec34:	b530      	push	{r4, r5, lr}
 800ec36:	b087      	sub	sp, #28
 800ec38:	b1f0      	cbz	r0, 800ec78 <rcl_init_options_fini+0x44>
 800ec3a:	6803      	ldr	r3, [r0, #0]
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	b1db      	cbz	r3, 800ec78 <rcl_init_options_fini+0x44>
 800ec40:	469c      	mov	ip, r3
 800ec42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec46:	f10d 0e04 	add.w	lr, sp, #4
 800ec4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ec52:	f8ce 3000 	str.w	r3, [lr]
 800ec56:	a801      	add	r0, sp, #4
 800ec58:	f001 ff7e 	bl	8010b58 <rcutils_allocator_is_valid>
 800ec5c:	b160      	cbz	r0, 800ec78 <rcl_init_options_fini+0x44>
 800ec5e:	6820      	ldr	r0, [r4, #0]
 800ec60:	3018      	adds	r0, #24
 800ec62:	f002 fc0b 	bl	801147c <rmw_init_options_fini>
 800ec66:	4605      	mov	r5, r0
 800ec68:	b950      	cbnz	r0, 800ec80 <rcl_init_options_fini+0x4c>
 800ec6a:	6820      	ldr	r0, [r4, #0]
 800ec6c:	9b02      	ldr	r3, [sp, #8]
 800ec6e:	9905      	ldr	r1, [sp, #20]
 800ec70:	4798      	blx	r3
 800ec72:	4628      	mov	r0, r5
 800ec74:	b007      	add	sp, #28
 800ec76:	bd30      	pop	{r4, r5, pc}
 800ec78:	250b      	movs	r5, #11
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	b007      	add	sp, #28
 800ec7e:	bd30      	pop	{r4, r5, pc}
 800ec80:	f009 fe24 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 800ec84:	4605      	mov	r5, r0
 800ec86:	e7f8      	b.n	800ec7a <rcl_init_options_fini+0x46>

0800ec88 <rcl_init_options_copy>:
 800ec88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8a:	b09d      	sub	sp, #116	@ 0x74
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d04a      	beq.n	800ed26 <rcl_init_options_copy+0x9e>
 800ec90:	4604      	mov	r4, r0
 800ec92:	6800      	ldr	r0, [r0, #0]
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d046      	beq.n	800ed26 <rcl_init_options_copy+0x9e>
 800ec98:	460d      	mov	r5, r1
 800ec9a:	f001 ff5d 	bl	8010b58 <rcutils_allocator_is_valid>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d041      	beq.n	800ed26 <rcl_init_options_copy+0x9e>
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	d03f      	beq.n	800ed26 <rcl_init_options_copy+0x9e>
 800eca6:	682b      	ldr	r3, [r5, #0]
 800eca8:	b11b      	cbz	r3, 800ecb2 <rcl_init_options_copy+0x2a>
 800ecaa:	2464      	movs	r4, #100	@ 0x64
 800ecac:	4620      	mov	r0, r4
 800ecae:	b01d      	add	sp, #116	@ 0x74
 800ecb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb2:	6826      	ldr	r6, [r4, #0]
 800ecb4:	46b6      	mov	lr, r6
 800ecb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ecba:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800ecbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecc2:	f8de 3000 	ldr.w	r3, [lr]
 800ecc6:	6837      	ldr	r7, [r6, #0]
 800ecc8:	f8cc 3000 	str.w	r3, [ip]
 800eccc:	4619      	mov	r1, r3
 800ecce:	2070      	movs	r0, #112	@ 0x70
 800ecd0:	47b8      	blx	r7
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	6028      	str	r0, [r5, #0]
 800ecd6:	b350      	cbz	r0, 800ed2e <rcl_init_options_copy+0xa6>
 800ecd8:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800ecdc:	4686      	mov	lr, r0
 800ecde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ece2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ece6:	f8dc 3000 	ldr.w	r3, [ip]
 800ecea:	f8ce 3000 	str.w	r3, [lr]
 800ecee:	4668      	mov	r0, sp
 800ecf0:	f002 fa04 	bl	80110fc <rmw_get_zero_initialized_init_options>
 800ecf4:	2258      	movs	r2, #88	@ 0x58
 800ecf6:	4669      	mov	r1, sp
 800ecf8:	f106 0018 	add.w	r0, r6, #24
 800ecfc:	f00f fb59 	bl	801e3b2 <memcpy>
 800ed00:	6820      	ldr	r0, [r4, #0]
 800ed02:	6829      	ldr	r1, [r5, #0]
 800ed04:	3018      	adds	r0, #24
 800ed06:	3118      	adds	r1, #24
 800ed08:	f002 fb84 	bl	8011414 <rmw_init_options_copy>
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d0cc      	beq.n	800ecac <rcl_init_options_copy+0x24>
 800ed12:	f001 ffed 	bl	8010cf0 <rcutils_get_error_string>
 800ed16:	f002 f803 	bl	8010d20 <rcutils_reset_error>
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f7ff ff8a 	bl	800ec34 <rcl_init_options_fini>
 800ed20:	b138      	cbz	r0, 800ed32 <rcl_init_options_copy+0xaa>
 800ed22:	4604      	mov	r4, r0
 800ed24:	e7c2      	b.n	800ecac <rcl_init_options_copy+0x24>
 800ed26:	240b      	movs	r4, #11
 800ed28:	4620      	mov	r0, r4
 800ed2a:	b01d      	add	sp, #116	@ 0x74
 800ed2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2e:	240a      	movs	r4, #10
 800ed30:	e7bc      	b.n	800ecac <rcl_init_options_copy+0x24>
 800ed32:	4620      	mov	r0, r4
 800ed34:	b01d      	add	sp, #116	@ 0x74
 800ed36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ed3a:	f009 bdc7 	b.w	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 800ed3e:	bf00      	nop

0800ed40 <rcl_init_options_set_domain_id>:
 800ed40:	b120      	cbz	r0, 800ed4c <rcl_init_options_set_domain_id+0xc>
 800ed42:	6803      	ldr	r3, [r0, #0]
 800ed44:	b113      	cbz	r3, 800ed4c <rcl_init_options_set_domain_id+0xc>
 800ed46:	6259      	str	r1, [r3, #36]	@ 0x24
 800ed48:	2000      	movs	r0, #0
 800ed4a:	4770      	bx	lr
 800ed4c:	200b      	movs	r0, #11
 800ed4e:	4770      	bx	lr

0800ed50 <rcl_get_zero_initialized_node>:
 800ed50:	4a03      	ldr	r2, [pc, #12]	@ (800ed60 <rcl_get_zero_initialized_node+0x10>)
 800ed52:	4603      	mov	r3, r0
 800ed54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed58:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	4770      	bx	lr
 800ed60:	08020a38 	.word	0x08020a38

0800ed64 <rcl_node_init>:
 800ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed68:	b0ab      	sub	sp, #172	@ 0xac
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800ed6e:	a825      	add	r0, sp, #148	@ 0x94
 800ed70:	4689      	mov	r9, r1
 800ed72:	4690      	mov	r8, r2
 800ed74:	461f      	mov	r7, r3
 800ed76:	f009 ff1b 	bl	8018bb0 <rcl_guard_condition_get_default_options>
 800ed7a:	2d00      	cmp	r5, #0
 800ed7c:	f000 80d8 	beq.w	800ef30 <rcl_node_init+0x1cc>
 800ed80:	4628      	mov	r0, r5
 800ed82:	f001 fee9 	bl	8010b58 <rcutils_allocator_is_valid>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	f000 80d2 	beq.w	800ef30 <rcl_node_init+0x1cc>
 800ed8c:	f1b9 0f00 	cmp.w	r9, #0
 800ed90:	f000 80ce 	beq.w	800ef30 <rcl_node_init+0x1cc>
 800ed94:	f1b8 0f00 	cmp.w	r8, #0
 800ed98:	f000 80ca 	beq.w	800ef30 <rcl_node_init+0x1cc>
 800ed9c:	2c00      	cmp	r4, #0
 800ed9e:	f000 80c7 	beq.w	800ef30 <rcl_node_init+0x1cc>
 800eda2:	6866      	ldr	r6, [r4, #4]
 800eda4:	2e00      	cmp	r6, #0
 800eda6:	f040 80ca 	bne.w	800ef3e <rcl_node_init+0x1da>
 800edaa:	2f00      	cmp	r7, #0
 800edac:	f000 80c0 	beq.w	800ef30 <rcl_node_init+0x1cc>
 800edb0:	4638      	mov	r0, r7
 800edb2:	f009 fdab 	bl	801890c <rcl_context_is_valid>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	f000 80bf 	beq.w	800ef3a <rcl_node_init+0x1d6>
 800edbc:	4632      	mov	r2, r6
 800edbe:	a924      	add	r1, sp, #144	@ 0x90
 800edc0:	4648      	mov	r0, r9
 800edc2:	9624      	str	r6, [sp, #144]	@ 0x90
 800edc4:	f002 fa50 	bl	8011268 <rmw_validate_node_name>
 800edc8:	4606      	mov	r6, r0
 800edca:	2800      	cmp	r0, #0
 800edcc:	f040 80b1 	bne.w	800ef32 <rcl_node_init+0x1ce>
 800edd0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800edd2:	2800      	cmp	r0, #0
 800edd4:	f040 8104 	bne.w	800efe0 <rcl_node_init+0x27c>
 800edd8:	f898 3000 	ldrb.w	r3, [r8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 80f0 	beq.w	800efc2 <rcl_node_init+0x25e>
 800ede2:	2b2f      	cmp	r3, #47	@ 0x2f
 800ede4:	f000 80b0 	beq.w	800ef48 <rcl_node_init+0x1e4>
 800ede8:	4b85      	ldr	r3, [pc, #532]	@ (800f000 <rcl_node_init+0x29c>)
 800edea:	f8cd 800c 	str.w	r8, [sp, #12]
 800edee:	9302      	str	r3, [sp, #8]
 800edf0:	692b      	ldr	r3, [r5, #16]
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800edf8:	9301      	str	r3, [sp, #4]
 800edfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800edfe:	f001 ffab 	bl	8010d58 <rcutils_format_string_limit>
 800ee02:	4680      	mov	r8, r0
 800ee04:	f1b8 0f00 	cmp.w	r8, #0
 800ee08:	f000 80e8 	beq.w	800efdc <rcl_node_init+0x278>
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	a924      	add	r1, sp, #144	@ 0x90
 800ee10:	4640      	mov	r0, r8
 800ee12:	9224      	str	r2, [sp, #144]	@ 0x90
 800ee14:	f002 fa0a 	bl	801122c <rmw_validate_namespace>
 800ee18:	4606      	mov	r6, r0
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	f040 80a4 	bne.w	800ef68 <rcl_node_init+0x204>
 800ee20:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f040 809d 	bne.w	800ef62 <rcl_node_init+0x1fe>
 800ee28:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800ee2c:	2178      	movs	r1, #120	@ 0x78
 800ee2e:	2001      	movs	r0, #1
 800ee30:	4798      	blx	r3
 800ee32:	4606      	mov	r6, r0
 800ee34:	6060      	str	r0, [r4, #4]
 800ee36:	2800      	cmp	r0, #0
 800ee38:	f000 80d6 	beq.w	800efe8 <rcl_node_init+0x284>
 800ee3c:	a80a      	add	r0, sp, #40	@ 0x28
 800ee3e:	f000 f961 	bl	800f104 <rcl_node_get_default_options>
 800ee42:	a90a      	add	r1, sp, #40	@ 0x28
 800ee44:	4630      	mov	r0, r6
 800ee46:	2268      	movs	r2, #104	@ 0x68
 800ee48:	f00f fab3 	bl	801e3b2 <memcpy>
 800ee4c:	6861      	ldr	r1, [r4, #4]
 800ee4e:	6027      	str	r7, [r4, #0]
 800ee50:	4628      	mov	r0, r5
 800ee52:	f000 f965 	bl	800f120 <rcl_node_options_copy>
 800ee56:	4606      	mov	r6, r0
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	f040 8085 	bne.w	800ef68 <rcl_node_init+0x204>
 800ee5e:	4640      	mov	r0, r8
 800ee60:	f7f1 fa3e 	bl	80002e0 <strlen>
 800ee64:	eb08 0300 	add.w	r3, r8, r0
 800ee68:	6866      	ldr	r6, [r4, #4]
 800ee6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ee6e:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800ee72:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee74:	bf0c      	ite	eq
 800ee76:	4b63      	ldreq	r3, [pc, #396]	@ (800f004 <rcl_node_init+0x2a0>)
 800ee78:	4b63      	ldrne	r3, [pc, #396]	@ (800f008 <rcl_node_init+0x2a4>)
 800ee7a:	9302      	str	r3, [sp, #8]
 800ee7c:	692b      	ldr	r3, [r5, #16]
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ee8a:	f001 ff65 	bl	8010d58 <rcutils_format_string_limit>
 800ee8e:	6863      	ldr	r3, [r4, #4]
 800ee90:	6770      	str	r0, [r6, #116]	@ 0x74
 800ee92:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800ee94:	2a00      	cmp	r2, #0
 800ee96:	f000 80a9 	beq.w	800efec <rcl_node_init+0x288>
 800ee9a:	6822      	ldr	r2, [r4, #0]
 800ee9c:	9307      	str	r3, [sp, #28]
 800ee9e:	6810      	ldr	r0, [r2, #0]
 800eea0:	4649      	mov	r1, r9
 800eea2:	3028      	adds	r0, #40	@ 0x28
 800eea4:	4642      	mov	r2, r8
 800eea6:	f002 fd65 	bl	8011974 <rmw_create_node>
 800eeaa:	9b07      	ldr	r3, [sp, #28]
 800eeac:	6698      	str	r0, [r3, #104]	@ 0x68
 800eeae:	6863      	ldr	r3, [r4, #4]
 800eeb0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	f000 809d 	beq.w	800eff2 <rcl_node_init+0x28e>
 800eeb8:	f002 fdee 	bl	8011a98 <rmw_node_get_graph_guard_condition>
 800eebc:	4681      	mov	r9, r0
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f000 809c 	beq.w	800effc <rcl_node_init+0x298>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	6929      	ldr	r1, [r5, #16]
 800eec8:	6866      	ldr	r6, [r4, #4]
 800eeca:	2008      	movs	r0, #8
 800eecc:	4798      	blx	r3
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800eed2:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800eed6:	f1ba 0f00 	cmp.w	sl, #0
 800eeda:	f000 808d 	beq.w	800eff8 <rcl_node_init+0x294>
 800eede:	f10d 0b20 	add.w	fp, sp, #32
 800eee2:	4658      	mov	r0, fp
 800eee4:	f009 fd8c 	bl	8018a00 <rcl_get_zero_initialized_guard_condition>
 800eee8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800eeec:	6863      	ldr	r3, [r4, #4]
 800eeee:	46ac      	mov	ip, r5
 800eef0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800eef4:	e88a 0003 	stmia.w	sl, {r0, r1}
 800eef8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eefc:	ae25      	add	r6, sp, #148	@ 0x94
 800eefe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef00:	f8dc 3000 	ldr.w	r3, [ip]
 800ef04:	6033      	str	r3, [r6, #0]
 800ef06:	ab2a      	add	r3, sp, #168	@ 0xa8
 800ef08:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ef0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ef10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800ef12:	463a      	mov	r2, r7
 800ef14:	4649      	mov	r1, r9
 800ef16:	4670      	mov	r0, lr
 800ef18:	f009 fdc8 	bl	8018aac <rcl_guard_condition_init_from_rmw>
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	bb18      	cbnz	r0, 800ef68 <rcl_node_init+0x204>
 800ef20:	686b      	ldr	r3, [r5, #4]
 800ef22:	6929      	ldr	r1, [r5, #16]
 800ef24:	4798      	blx	r3
 800ef26:	686b      	ldr	r3, [r5, #4]
 800ef28:	6929      	ldr	r1, [r5, #16]
 800ef2a:	4640      	mov	r0, r8
 800ef2c:	4798      	blx	r3
 800ef2e:	e000      	b.n	800ef32 <rcl_node_init+0x1ce>
 800ef30:	260b      	movs	r6, #11
 800ef32:	4630      	mov	r0, r6
 800ef34:	b02b      	add	sp, #172	@ 0xac
 800ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3a:	2665      	movs	r6, #101	@ 0x65
 800ef3c:	e7f9      	b.n	800ef32 <rcl_node_init+0x1ce>
 800ef3e:	2664      	movs	r6, #100	@ 0x64
 800ef40:	4630      	mov	r0, r6
 800ef42:	b02b      	add	sp, #172	@ 0xac
 800ef44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef48:	f105 030c 	add.w	r3, r5, #12
 800ef4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ef50:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ef54:	4640      	mov	r0, r8
 800ef56:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ef5a:	f002 f81b 	bl	8010f94 <rcutils_strdup>
 800ef5e:	4680      	mov	r8, r0
 800ef60:	e750      	b.n	800ee04 <rcl_node_init+0xa0>
 800ef62:	f002 f975 	bl	8011250 <rmw_namespace_validation_result_string>
 800ef66:	26ca      	movs	r6, #202	@ 0xca
 800ef68:	6863      	ldr	r3, [r4, #4]
 800ef6a:	b1f3      	cbz	r3, 800efaa <rcl_node_init+0x246>
 800ef6c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ef6e:	b138      	cbz	r0, 800ef80 <rcl_node_init+0x21c>
 800ef70:	f009 fdfc 	bl	8018b6c <rcl_guard_condition_fini>
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	6929      	ldr	r1, [r5, #16]
 800ef78:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ef7a:	686b      	ldr	r3, [r5, #4]
 800ef7c:	4798      	blx	r3
 800ef7e:	6863      	ldr	r3, [r4, #4]
 800ef80:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ef82:	b110      	cbz	r0, 800ef8a <rcl_node_init+0x226>
 800ef84:	f002 fd0c 	bl	80119a0 <rmw_destroy_node>
 800ef88:	6863      	ldr	r3, [r4, #4]
 800ef8a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ef8c:	6929      	ldr	r1, [r5, #16]
 800ef8e:	686b      	ldr	r3, [r5, #4]
 800ef90:	4798      	blx	r3
 800ef92:	6863      	ldr	r3, [r4, #4]
 800ef94:	6929      	ldr	r1, [r5, #16]
 800ef96:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ef98:	686b      	ldr	r3, [r5, #4]
 800ef9a:	4798      	blx	r3
 800ef9c:	6860      	ldr	r0, [r4, #4]
 800ef9e:	f000 f8dd 	bl	800f15c <rcl_node_options_fini>
 800efa2:	686b      	ldr	r3, [r5, #4]
 800efa4:	6929      	ldr	r1, [r5, #16]
 800efa6:	6860      	ldr	r0, [r4, #4]
 800efa8:	4798      	blx	r3
 800efaa:	686b      	ldr	r3, [r5, #4]
 800efac:	6929      	ldr	r1, [r5, #16]
 800efae:	2000      	movs	r0, #0
 800efb0:	4798      	blx	r3
 800efb2:	686b      	ldr	r3, [r5, #4]
 800efb4:	6929      	ldr	r1, [r5, #16]
 800efb6:	4640      	mov	r0, r8
 800efb8:	4798      	blx	r3
 800efba:	2300      	movs	r3, #0
 800efbc:	e9c4 3300 	strd	r3, r3, [r4]
 800efc0:	e7b7      	b.n	800ef32 <rcl_node_init+0x1ce>
 800efc2:	f105 030c 	add.w	r3, r5, #12
 800efc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efca:	e88d 0003 	stmia.w	sp, {r0, r1}
 800efce:	480f      	ldr	r0, [pc, #60]	@ (800f00c <rcl_node_init+0x2a8>)
 800efd0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800efd4:	f001 ffde 	bl	8010f94 <rcutils_strdup>
 800efd8:	4680      	mov	r8, r0
 800efda:	e713      	b.n	800ee04 <rcl_node_init+0xa0>
 800efdc:	260a      	movs	r6, #10
 800efde:	e7a8      	b.n	800ef32 <rcl_node_init+0x1ce>
 800efe0:	f002 f98e 	bl	8011300 <rmw_node_name_validation_result_string>
 800efe4:	26c9      	movs	r6, #201	@ 0xc9
 800efe6:	e7a4      	b.n	800ef32 <rcl_node_init+0x1ce>
 800efe8:	260a      	movs	r6, #10
 800efea:	e7de      	b.n	800efaa <rcl_node_init+0x246>
 800efec:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800efee:	260a      	movs	r6, #10
 800eff0:	e7bd      	b.n	800ef6e <rcl_node_init+0x20a>
 800eff2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eff4:	2601      	movs	r6, #1
 800eff6:	e7ba      	b.n	800ef6e <rcl_node_init+0x20a>
 800eff8:	260a      	movs	r6, #10
 800effa:	e7c1      	b.n	800ef80 <rcl_node_init+0x21c>
 800effc:	2601      	movs	r6, #1
 800effe:	e7b3      	b.n	800ef68 <rcl_node_init+0x204>
 800f000:	08020a08 	.word	0x08020a08
 800f004:	08020a0c 	.word	0x08020a0c
 800f008:	08020a14 	.word	0x08020a14
 800f00c:	08020a04 	.word	0x08020a04

0800f010 <rcl_node_fini>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	b318      	cbz	r0, 800f05c <rcl_node_fini+0x4c>
 800f014:	6845      	ldr	r5, [r0, #4]
 800f016:	4604      	mov	r4, r0
 800f018:	b1f5      	cbz	r5, 800f058 <rcl_node_fini+0x48>
 800f01a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800f01c:	686e      	ldr	r6, [r5, #4]
 800f01e:	692f      	ldr	r7, [r5, #16]
 800f020:	f002 fcbe 	bl	80119a0 <rmw_destroy_node>
 800f024:	6863      	ldr	r3, [r4, #4]
 800f026:	4605      	mov	r5, r0
 800f028:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f02a:	f009 fd9f 	bl	8018b6c <rcl_guard_condition_fini>
 800f02e:	6863      	ldr	r3, [r4, #4]
 800f030:	4305      	orrs	r5, r0
 800f032:	4639      	mov	r1, r7
 800f034:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f036:	bf14      	ite	ne
 800f038:	2501      	movne	r5, #1
 800f03a:	2500      	moveq	r5, #0
 800f03c:	47b0      	blx	r6
 800f03e:	6863      	ldr	r3, [r4, #4]
 800f040:	4639      	mov	r1, r7
 800f042:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800f044:	47b0      	blx	r6
 800f046:	6863      	ldr	r3, [r4, #4]
 800f048:	4639      	mov	r1, r7
 800f04a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f04c:	47b0      	blx	r6
 800f04e:	6860      	ldr	r0, [r4, #4]
 800f050:	4639      	mov	r1, r7
 800f052:	47b0      	blx	r6
 800f054:	2300      	movs	r3, #0
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	4628      	mov	r0, r5
 800f05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f05c:	25c8      	movs	r5, #200	@ 0xc8
 800f05e:	4628      	mov	r0, r5
 800f060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f062:	bf00      	nop

0800f064 <rcl_node_is_valid_except_context>:
 800f064:	b128      	cbz	r0, 800f072 <rcl_node_is_valid_except_context+0xe>
 800f066:	6840      	ldr	r0, [r0, #4]
 800f068:	b118      	cbz	r0, 800f072 <rcl_node_is_valid_except_context+0xe>
 800f06a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f06c:	3800      	subs	r0, #0
 800f06e:	bf18      	it	ne
 800f070:	2001      	movne	r0, #1
 800f072:	4770      	bx	lr

0800f074 <rcl_node_is_valid>:
 800f074:	b130      	cbz	r0, 800f084 <rcl_node_is_valid+0x10>
 800f076:	6843      	ldr	r3, [r0, #4]
 800f078:	b123      	cbz	r3, 800f084 <rcl_node_is_valid+0x10>
 800f07a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f07c:	b113      	cbz	r3, 800f084 <rcl_node_is_valid+0x10>
 800f07e:	6800      	ldr	r0, [r0, #0]
 800f080:	f009 bc44 	b.w	801890c <rcl_context_is_valid>
 800f084:	2000      	movs	r0, #0
 800f086:	4770      	bx	lr

0800f088 <rcl_node_get_name>:
 800f088:	b120      	cbz	r0, 800f094 <rcl_node_get_name+0xc>
 800f08a:	6840      	ldr	r0, [r0, #4]
 800f08c:	b110      	cbz	r0, 800f094 <rcl_node_get_name+0xc>
 800f08e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f090:	b100      	cbz	r0, 800f094 <rcl_node_get_name+0xc>
 800f092:	6880      	ldr	r0, [r0, #8]
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop

0800f098 <rcl_node_get_namespace>:
 800f098:	b120      	cbz	r0, 800f0a4 <rcl_node_get_namespace+0xc>
 800f09a:	6840      	ldr	r0, [r0, #4]
 800f09c:	b110      	cbz	r0, 800f0a4 <rcl_node_get_namespace+0xc>
 800f09e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f0a0:	b100      	cbz	r0, 800f0a4 <rcl_node_get_namespace+0xc>
 800f0a2:	68c0      	ldr	r0, [r0, #12]
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop

0800f0a8 <rcl_node_get_options>:
 800f0a8:	b128      	cbz	r0, 800f0b6 <rcl_node_get_options+0xe>
 800f0aa:	6840      	ldr	r0, [r0, #4]
 800f0ac:	b118      	cbz	r0, 800f0b6 <rcl_node_get_options+0xe>
 800f0ae:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	bf08      	it	eq
 800f0b4:	2000      	moveq	r0, #0
 800f0b6:	4770      	bx	lr

0800f0b8 <rcl_node_get_rmw_handle>:
 800f0b8:	b110      	cbz	r0, 800f0c0 <rcl_node_get_rmw_handle+0x8>
 800f0ba:	6840      	ldr	r0, [r0, #4]
 800f0bc:	b100      	cbz	r0, 800f0c0 <rcl_node_get_rmw_handle+0x8>
 800f0be:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop

0800f0c4 <rcl_get_disable_loaned_message>:
 800f0c4:	b510      	push	{r4, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9301      	str	r3, [sp, #4]
 800f0cc:	b1a0      	cbz	r0, 800f0f8 <rcl_get_disable_loaned_message+0x34>
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	a901      	add	r1, sp, #4
 800f0d2:	480b      	ldr	r0, [pc, #44]	@ (800f100 <rcl_get_disable_loaned_message+0x3c>)
 800f0d4:	f001 fdf4 	bl	8010cc0 <rcutils_get_env>
 800f0d8:	b110      	cbz	r0, 800f0e0 <rcl_get_disable_loaned_message+0x1c>
 800f0da:	2001      	movs	r0, #1
 800f0dc:	b002      	add	sp, #8
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	9a01      	ldr	r2, [sp, #4]
 800f0e2:	7813      	ldrb	r3, [r2, #0]
 800f0e4:	3b31      	subs	r3, #49	@ 0x31
 800f0e6:	bf08      	it	eq
 800f0e8:	7853      	ldrbeq	r3, [r2, #1]
 800f0ea:	fab3 f383 	clz	r3, r3
 800f0ee:	095b      	lsrs	r3, r3, #5
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	7023      	strb	r3, [r4, #0]
 800f0f4:	b002      	add	sp, #8
 800f0f6:	bd10      	pop	{r4, pc}
 800f0f8:	200b      	movs	r0, #11
 800f0fa:	b002      	add	sp, #8
 800f0fc:	bd10      	pop	{r4, pc}
 800f0fe:	bf00      	nop
 800f100:	08020a1c 	.word	0x08020a1c

0800f104 <rcl_node_get_default_options>:
 800f104:	b510      	push	{r4, lr}
 800f106:	2253      	movs	r2, #83	@ 0x53
 800f108:	4604      	mov	r4, r0
 800f10a:	2100      	movs	r1, #0
 800f10c:	3015      	adds	r0, #21
 800f10e:	f00f f81f 	bl	801e150 <memset>
 800f112:	4620      	mov	r0, r4
 800f114:	f001 fcf4 	bl	8010b00 <rcutils_get_default_allocator>
 800f118:	2301      	movs	r3, #1
 800f11a:	7523      	strb	r3, [r4, #20]
 800f11c:	4620      	mov	r0, r4
 800f11e:	bd10      	pop	{r4, pc}

0800f120 <rcl_node_options_copy>:
 800f120:	b1d0      	cbz	r0, 800f158 <rcl_node_options_copy+0x38>
 800f122:	b570      	push	{r4, r5, r6, lr}
 800f124:	460c      	mov	r4, r1
 800f126:	b1a9      	cbz	r1, 800f154 <rcl_node_options_copy+0x34>
 800f128:	4288      	cmp	r0, r1
 800f12a:	4684      	mov	ip, r0
 800f12c:	d012      	beq.n	800f154 <rcl_node_options_copy+0x34>
 800f12e:	4605      	mov	r5, r0
 800f130:	8a86      	ldrh	r6, [r0, #20]
 800f132:	468e      	mov	lr, r1
 800f134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f136:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f13a:	682b      	ldr	r3, [r5, #0]
 800f13c:	f8ce 3000 	str.w	r3, [lr]
 800f140:	f10c 0118 	add.w	r1, ip, #24
 800f144:	2250      	movs	r2, #80	@ 0x50
 800f146:	82a6      	strh	r6, [r4, #20]
 800f148:	f104 0018 	add.w	r0, r4, #24
 800f14c:	f00f f931 	bl	801e3b2 <memcpy>
 800f150:	2000      	movs	r0, #0
 800f152:	bd70      	pop	{r4, r5, r6, pc}
 800f154:	200b      	movs	r0, #11
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	200b      	movs	r0, #11
 800f15a:	4770      	bx	lr

0800f15c <rcl_node_options_fini>:
 800f15c:	b1c0      	cbz	r0, 800f190 <rcl_node_options_fini+0x34>
 800f15e:	b500      	push	{lr}
 800f160:	4684      	mov	ip, r0
 800f162:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f166:	b087      	sub	sp, #28
 800f168:	f10d 0e04 	add.w	lr, sp, #4
 800f16c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f170:	f8dc 3000 	ldr.w	r3, [ip]
 800f174:	f8ce 3000 	str.w	r3, [lr]
 800f178:	a801      	add	r0, sp, #4
 800f17a:	f001 fced 	bl	8010b58 <rcutils_allocator_is_valid>
 800f17e:	b118      	cbz	r0, 800f188 <rcl_node_options_fini+0x2c>
 800f180:	2000      	movs	r0, #0
 800f182:	b007      	add	sp, #28
 800f184:	f85d fb04 	ldr.w	pc, [sp], #4
 800f188:	200b      	movs	r0, #11
 800f18a:	b007      	add	sp, #28
 800f18c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f190:	200b      	movs	r0, #11
 800f192:	4770      	bx	lr

0800f194 <rcl_get_zero_initialized_publisher>:
 800f194:	4b01      	ldr	r3, [pc, #4]	@ (800f19c <rcl_get_zero_initialized_publisher+0x8>)
 800f196:	6818      	ldr	r0, [r3, #0]
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	08020a40 	.word	0x08020a40

0800f1a0 <rcl_publisher_init>:
 800f1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a4:	b088      	sub	sp, #32
 800f1a6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f1a8:	2d00      	cmp	r5, #0
 800f1aa:	d06a      	beq.n	800f282 <rcl_publisher_init+0xe2>
 800f1ac:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	4648      	mov	r0, r9
 800f1b4:	460e      	mov	r6, r1
 800f1b6:	4690      	mov	r8, r2
 800f1b8:	461f      	mov	r7, r3
 800f1ba:	f001 fccd 	bl	8010b58 <rcutils_allocator_is_valid>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d05f      	beq.n	800f282 <rcl_publisher_init+0xe2>
 800f1c2:	2c00      	cmp	r4, #0
 800f1c4:	d05d      	beq.n	800f282 <rcl_publisher_init+0xe2>
 800f1c6:	f8d4 a000 	ldr.w	sl, [r4]
 800f1ca:	f1ba 0f00 	cmp.w	sl, #0
 800f1ce:	d004      	beq.n	800f1da <rcl_publisher_init+0x3a>
 800f1d0:	2764      	movs	r7, #100	@ 0x64
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	b008      	add	sp, #32
 800f1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f7ff ff4a 	bl	800f074 <rcl_node_is_valid>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d053      	beq.n	800f28c <rcl_publisher_init+0xec>
 800f1e4:	f1b8 0f00 	cmp.w	r8, #0
 800f1e8:	d04b      	beq.n	800f282 <rcl_publisher_init+0xe2>
 800f1ea:	2f00      	cmp	r7, #0
 800f1ec:	d049      	beq.n	800f282 <rcl_publisher_init+0xe2>
 800f1ee:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800f1f2:	aa07      	add	r2, sp, #28
 800f1f4:	9205      	str	r2, [sp, #20]
 800f1f6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800f1fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f202:	f8cd a01c 	str.w	sl, [sp, #28]
 800f206:	4639      	mov	r1, r7
 800f208:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f20c:	4630      	mov	r0, r6
 800f20e:	f009 fe7b 	bl	8018f08 <rcl_node_resolve_name>
 800f212:	4607      	mov	r7, r0
 800f214:	2800      	cmp	r0, #0
 800f216:	d150      	bne.n	800f2ba <rcl_publisher_init+0x11a>
 800f218:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800f21c:	21c8      	movs	r1, #200	@ 0xc8
 800f21e:	2001      	movs	r0, #1
 800f220:	4798      	blx	r3
 800f222:	6020      	str	r0, [r4, #0]
 800f224:	2800      	cmp	r0, #0
 800f226:	d04e      	beq.n	800f2c6 <rcl_publisher_init+0x126>
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff ff45 	bl	800f0b8 <rcl_node_get_rmw_handle>
 800f22e:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	9a07      	ldr	r2, [sp, #28]
 800f236:	6827      	ldr	r7, [r4, #0]
 800f238:	462b      	mov	r3, r5
 800f23a:	4641      	mov	r1, r8
 800f23c:	f002 fc96 	bl	8011b6c <rmw_create_publisher>
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800f246:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f24a:	b370      	cbz	r0, 800f2aa <rcl_publisher_init+0x10a>
 800f24c:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800f250:	f002 fd68 	bl	8011d24 <rmw_publisher_get_actual_qos>
 800f254:	6823      	ldr	r3, [r4, #0]
 800f256:	4607      	mov	r7, r0
 800f258:	b9d0      	cbnz	r0, 800f290 <rcl_publisher_init+0xf0>
 800f25a:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800f25e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f262:	4629      	mov	r1, r5
 800f264:	2270      	movs	r2, #112	@ 0x70
 800f266:	4618      	mov	r0, r3
 800f268:	f00f f8a3 	bl	801e3b2 <memcpy>
 800f26c:	6832      	ldr	r2, [r6, #0]
 800f26e:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800f272:	9807      	ldr	r0, [sp, #28]
 800f274:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800f276:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f278:	4798      	blx	r3
 800f27a:	4638      	mov	r0, r7
 800f27c:	b008      	add	sp, #32
 800f27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f282:	270b      	movs	r7, #11
 800f284:	4638      	mov	r0, r7
 800f286:	b008      	add	sp, #32
 800f288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f28c:	27c8      	movs	r7, #200	@ 0xc8
 800f28e:	e7a0      	b.n	800f1d2 <rcl_publisher_init+0x32>
 800f290:	b18b      	cbz	r3, 800f2b6 <rcl_publisher_init+0x116>
 800f292:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f296:	b142      	cbz	r2, 800f2aa <rcl_publisher_init+0x10a>
 800f298:	4630      	mov	r0, r6
 800f29a:	f7ff ff0d 	bl	800f0b8 <rcl_node_get_rmw_handle>
 800f29e:	6823      	ldr	r3, [r4, #0]
 800f2a0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800f2a4:	f002 fd4c 	bl	8011d40 <rmw_destroy_publisher>
 800f2a8:	6823      	ldr	r3, [r4, #0]
 800f2aa:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800f2ac:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	4790      	blx	r2
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	2701      	movs	r7, #1
 800f2b8:	e7db      	b.n	800f272 <rcl_publisher_init+0xd2>
 800f2ba:	2867      	cmp	r0, #103	@ 0x67
 800f2bc:	d0d9      	beq.n	800f272 <rcl_publisher_init+0xd2>
 800f2be:	2869      	cmp	r0, #105	@ 0x69
 800f2c0:	d003      	beq.n	800f2ca <rcl_publisher_init+0x12a>
 800f2c2:	280a      	cmp	r0, #10
 800f2c4:	d1f7      	bne.n	800f2b6 <rcl_publisher_init+0x116>
 800f2c6:	270a      	movs	r7, #10
 800f2c8:	e7d3      	b.n	800f272 <rcl_publisher_init+0xd2>
 800f2ca:	2767      	movs	r7, #103	@ 0x67
 800f2cc:	e7d1      	b.n	800f272 <rcl_publisher_init+0xd2>
 800f2ce:	bf00      	nop

0800f2d0 <rcl_publisher_fini>:
 800f2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d2:	b1f8      	cbz	r0, 800f314 <rcl_publisher_fini+0x44>
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	460d      	mov	r5, r1
 800f2da:	f7ff fec3 	bl	800f064 <rcl_node_is_valid_except_context>
 800f2de:	b1e8      	cbz	r0, 800f31c <rcl_publisher_fini+0x4c>
 800f2e0:	6823      	ldr	r3, [r4, #0]
 800f2e2:	b1a3      	cbz	r3, 800f30e <rcl_publisher_fini+0x3e>
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800f2e8:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 800f2ea:	f7ff fee5 	bl	800f0b8 <rcl_node_get_rmw_handle>
 800f2ee:	b1c0      	cbz	r0, 800f322 <rcl_publisher_fini+0x52>
 800f2f0:	6823      	ldr	r3, [r4, #0]
 800f2f2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800f2f6:	f002 fd23 	bl	8011d40 <rmw_destroy_publisher>
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	1e05      	subs	r5, r0, #0
 800f2fe:	6820      	ldr	r0, [r4, #0]
 800f300:	bf18      	it	ne
 800f302:	2501      	movne	r5, #1
 800f304:	47b0      	blx	r6
 800f306:	2300      	movs	r3, #0
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	4628      	mov	r0, r5
 800f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f30e:	461d      	mov	r5, r3
 800f310:	4628      	mov	r0, r5
 800f312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f314:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800f318:	4628      	mov	r0, r5
 800f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f31c:	25c8      	movs	r5, #200	@ 0xc8
 800f31e:	4628      	mov	r0, r5
 800f320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f322:	250b      	movs	r5, #11
 800f324:	e7f1      	b.n	800f30a <rcl_publisher_fini+0x3a>
 800f326:	bf00      	nop

0800f328 <rcl_publisher_get_default_options>:
 800f328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f32a:	4919      	ldr	r1, [pc, #100]	@ (800f390 <rcl_publisher_get_default_options+0x68>)
 800f32c:	4c19      	ldr	r4, [pc, #100]	@ (800f394 <rcl_publisher_get_default_options+0x6c>)
 800f32e:	b08b      	sub	sp, #44	@ 0x2c
 800f330:	2250      	movs	r2, #80	@ 0x50
 800f332:	4605      	mov	r5, r0
 800f334:	4818      	ldr	r0, [pc, #96]	@ (800f398 <rcl_publisher_get_default_options+0x70>)
 800f336:	f00f f83c 	bl	801e3b2 <memcpy>
 800f33a:	a802      	add	r0, sp, #8
 800f33c:	f001 fbe0 	bl	8010b00 <rcutils_get_default_allocator>
 800f340:	f10d 0c08 	add.w	ip, sp, #8
 800f344:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f34a:	466f      	mov	r7, sp
 800f34c:	f8dc 3000 	ldr.w	r3, [ip]
 800f350:	f844 3b04 	str.w	r3, [r4], #4
 800f354:	4638      	mov	r0, r7
 800f356:	f001 fef9 	bl	801114c <rmw_get_default_publisher_options>
 800f35a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f35e:	2600      	movs	r6, #0
 800f360:	e884 0003 	stmia.w	r4, {r0, r1}
 800f364:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800f368:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800f36c:	f7ff feaa 	bl	800f0c4 <rcl_get_disable_loaned_message>
 800f370:	b958      	cbnz	r0, 800f38a <rcl_publisher_get_default_options+0x62>
 800f372:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800f376:	4908      	ldr	r1, [pc, #32]	@ (800f398 <rcl_publisher_get_default_options+0x70>)
 800f378:	2270      	movs	r2, #112	@ 0x70
 800f37a:	4628      	mov	r0, r5
 800f37c:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800f380:	f00f f817 	bl	801e3b2 <memcpy>
 800f384:	4628      	mov	r0, r5
 800f386:	b00b      	add	sp, #44	@ 0x2c
 800f388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f38a:	f001 fcc9 	bl	8010d20 <rcutils_reset_error>
 800f38e:	e7f2      	b.n	800f376 <rcl_publisher_get_default_options+0x4e>
 800f390:	08020a48 	.word	0x08020a48
 800f394:	2001aaa0 	.word	0x2001aaa0
 800f398:	2001aa50 	.word	0x2001aa50

0800f39c <rcl_publish>:
 800f39c:	b1f8      	cbz	r0, 800f3de <rcl_publish+0x42>
 800f39e:	6803      	ldr	r3, [r0, #0]
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	b1b3      	cbz	r3, 800f3d4 <rcl_publish+0x38>
 800f3a6:	4616      	mov	r6, r2
 800f3a8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f3ac:	b192      	cbz	r2, 800f3d4 <rcl_publish+0x38>
 800f3ae:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800f3b2:	460d      	mov	r5, r1
 800f3b4:	f009 faaa 	bl	801890c <rcl_context_is_valid>
 800f3b8:	b160      	cbz	r0, 800f3d4 <rcl_publish+0x38>
 800f3ba:	6823      	ldr	r3, [r4, #0]
 800f3bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f3c0:	b140      	cbz	r0, 800f3d4 <rcl_publish+0x38>
 800f3c2:	b155      	cbz	r5, 800f3da <rcl_publish+0x3e>
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	4629      	mov	r1, r5
 800f3c8:	f002 fb70 	bl	8011aac <rmw_publish>
 800f3cc:	3800      	subs	r0, #0
 800f3ce:	bf18      	it	ne
 800f3d0:	2001      	movne	r0, #1
 800f3d2:	bd70      	pop	{r4, r5, r6, pc}
 800f3d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800f3d8:	bd70      	pop	{r4, r5, r6, pc}
 800f3da:	200b      	movs	r0, #11
 800f3dc:	bd70      	pop	{r4, r5, r6, pc}
 800f3de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800f3e2:	4770      	bx	lr

0800f3e4 <rcl_publisher_is_valid>:
 800f3e4:	b1a0      	cbz	r0, 800f410 <rcl_publisher_is_valid+0x2c>
 800f3e6:	6803      	ldr	r3, [r0, #0]
 800f3e8:	b510      	push	{r4, lr}
 800f3ea:	4604      	mov	r4, r0
 800f3ec:	b173      	cbz	r3, 800f40c <rcl_publisher_is_valid+0x28>
 800f3ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f3f2:	b15a      	cbz	r2, 800f40c <rcl_publisher_is_valid+0x28>
 800f3f4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800f3f8:	f009 fa88 	bl	801890c <rcl_context_is_valid>
 800f3fc:	b130      	cbz	r0, 800f40c <rcl_publisher_is_valid+0x28>
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f404:	3800      	subs	r0, #0
 800f406:	bf18      	it	ne
 800f408:	2001      	movne	r0, #1
 800f40a:	bd10      	pop	{r4, pc}
 800f40c:	2000      	movs	r0, #0
 800f40e:	bd10      	pop	{r4, pc}
 800f410:	2000      	movs	r0, #0
 800f412:	4770      	bx	lr

0800f414 <rcl_publisher_is_valid_except_context>:
 800f414:	b130      	cbz	r0, 800f424 <rcl_publisher_is_valid_except_context+0x10>
 800f416:	6800      	ldr	r0, [r0, #0]
 800f418:	b120      	cbz	r0, 800f424 <rcl_publisher_is_valid_except_context+0x10>
 800f41a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800f41e:	3800      	subs	r0, #0
 800f420:	bf18      	it	ne
 800f422:	2001      	movne	r0, #1
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop

0800f428 <rcl_get_zero_initialized_subscription>:
 800f428:	4b01      	ldr	r3, [pc, #4]	@ (800f430 <rcl_get_zero_initialized_subscription+0x8>)
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	08020a98 	.word	0x08020a98

0800f434 <rcl_subscription_init>:
 800f434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f438:	b089      	sub	sp, #36	@ 0x24
 800f43a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f43c:	b1d6      	cbz	r6, 800f474 <rcl_subscription_init+0x40>
 800f43e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f442:	4604      	mov	r4, r0
 800f444:	4648      	mov	r0, r9
 800f446:	460d      	mov	r5, r1
 800f448:	4690      	mov	r8, r2
 800f44a:	461f      	mov	r7, r3
 800f44c:	f001 fb84 	bl	8010b58 <rcutils_allocator_is_valid>
 800f450:	b180      	cbz	r0, 800f474 <rcl_subscription_init+0x40>
 800f452:	b17c      	cbz	r4, 800f474 <rcl_subscription_init+0x40>
 800f454:	4628      	mov	r0, r5
 800f456:	f7ff fe0d 	bl	800f074 <rcl_node_is_valid>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d054      	beq.n	800f508 <rcl_subscription_init+0xd4>
 800f45e:	f1b8 0f00 	cmp.w	r8, #0
 800f462:	d007      	beq.n	800f474 <rcl_subscription_init+0x40>
 800f464:	b137      	cbz	r7, 800f474 <rcl_subscription_init+0x40>
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	b14b      	cbz	r3, 800f47e <rcl_subscription_init+0x4a>
 800f46a:	2764      	movs	r7, #100	@ 0x64
 800f46c:	4638      	mov	r0, r7
 800f46e:	b009      	add	sp, #36	@ 0x24
 800f470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f474:	270b      	movs	r7, #11
 800f476:	4638      	mov	r0, r7
 800f478:	b009      	add	sp, #36	@ 0x24
 800f47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f47e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f482:	aa07      	add	r2, sp, #28
 800f484:	9205      	str	r2, [sp, #20]
 800f486:	9307      	str	r3, [sp, #28]
 800f488:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800f48c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f490:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f494:	4639      	mov	r1, r7
 800f496:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f49a:	4628      	mov	r0, r5
 800f49c:	f009 fd34 	bl	8018f08 <rcl_node_resolve_name>
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d15f      	bne.n	800f566 <rcl_subscription_init+0x132>
 800f4a6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800f4aa:	21d0      	movs	r1, #208	@ 0xd0
 800f4ac:	2001      	movs	r0, #1
 800f4ae:	4798      	blx	r3
 800f4b0:	6020      	str	r0, [r4, #0]
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d05d      	beq.n	800f572 <rcl_subscription_init+0x13e>
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f7ff fdfe 	bl	800f0b8 <rcl_node_get_rmw_handle>
 800f4bc:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	9a07      	ldr	r2, [sp, #28]
 800f4c4:	6827      	ldr	r7, [r4, #0]
 800f4c6:	4641      	mov	r1, r8
 800f4c8:	4633      	mov	r3, r6
 800f4ca:	f002 fccf 	bl	8011e6c <rmw_create_subscription>
 800f4ce:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 800f4d2:	6827      	ldr	r7, [r4, #0]
 800f4d4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f4d8:	b358      	cbz	r0, 800f532 <rcl_subscription_init+0xfe>
 800f4da:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800f4de:	f002 fda5 	bl	801202c <rmw_subscription_get_actual_qos>
 800f4e2:	4607      	mov	r7, r0
 800f4e4:	b9a8      	cbnz	r0, 800f512 <rcl_subscription_init+0xde>
 800f4e6:	6820      	ldr	r0, [r4, #0]
 800f4e8:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f4ec:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 800f4f0:	2278      	movs	r2, #120	@ 0x78
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	f00e ff5d 	bl	801e3b2 <memcpy>
 800f4f8:	9807      	ldr	r0, [sp, #28]
 800f4fa:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f4fc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f4fe:	4798      	blx	r3
 800f500:	4638      	mov	r0, r7
 800f502:	b009      	add	sp, #36	@ 0x24
 800f504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f508:	27c8      	movs	r7, #200	@ 0xc8
 800f50a:	4638      	mov	r0, r7
 800f50c:	b009      	add	sp, #36	@ 0x24
 800f50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f512:	6827      	ldr	r7, [r4, #0]
 800f514:	b32f      	cbz	r7, 800f562 <rcl_subscription_init+0x12e>
 800f516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f51a:	b153      	cbz	r3, 800f532 <rcl_subscription_init+0xfe>
 800f51c:	4628      	mov	r0, r5
 800f51e:	f7ff fdcb 	bl	800f0b8 <rcl_node_get_rmw_handle>
 800f522:	6823      	ldr	r3, [r4, #0]
 800f524:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f528:	f002 fd8e 	bl	8012048 <rmw_destroy_subscription>
 800f52c:	6827      	ldr	r7, [r4, #0]
 800f52e:	4638      	mov	r0, r7
 800f530:	b197      	cbz	r7, 800f558 <rcl_subscription_init+0x124>
 800f532:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800f536:	4628      	mov	r0, r5
 800f538:	f001 fb0e 	bl	8010b58 <rcutils_allocator_is_valid>
 800f53c:	b1e8      	cbz	r0, 800f57a <rcl_subscription_init+0x146>
 800f53e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f540:	b1d8      	cbz	r0, 800f57a <rcl_subscription_init+0x146>
 800f542:	4629      	mov	r1, r5
 800f544:	f001 fe0a 	bl	801115c <rmw_subscription_content_filter_options_fini>
 800f548:	4605      	mov	r5, r0
 800f54a:	b9a0      	cbnz	r0, 800f576 <rcl_subscription_init+0x142>
 800f54c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f550:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f552:	4798      	blx	r3
 800f554:	6820      	ldr	r0, [r4, #0]
 800f556:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800f558:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f55a:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f55c:	4798      	blx	r3
 800f55e:	2300      	movs	r3, #0
 800f560:	6023      	str	r3, [r4, #0]
 800f562:	2701      	movs	r7, #1
 800f564:	e7c8      	b.n	800f4f8 <rcl_subscription_init+0xc4>
 800f566:	2867      	cmp	r0, #103	@ 0x67
 800f568:	d0c6      	beq.n	800f4f8 <rcl_subscription_init+0xc4>
 800f56a:	2869      	cmp	r0, #105	@ 0x69
 800f56c:	d007      	beq.n	800f57e <rcl_subscription_init+0x14a>
 800f56e:	280a      	cmp	r0, #10
 800f570:	d1f7      	bne.n	800f562 <rcl_subscription_init+0x12e>
 800f572:	270a      	movs	r7, #10
 800f574:	e7c0      	b.n	800f4f8 <rcl_subscription_init+0xc4>
 800f576:	f009 f9a9 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 800f57a:	6820      	ldr	r0, [r4, #0]
 800f57c:	e7ec      	b.n	800f558 <rcl_subscription_init+0x124>
 800f57e:	2767      	movs	r7, #103	@ 0x67
 800f580:	e7ba      	b.n	800f4f8 <rcl_subscription_init+0xc4>
 800f582:	bf00      	nop

0800f584 <rcl_subscription_fini>:
 800f584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f588:	2800      	cmp	r0, #0
 800f58a:	d03a      	beq.n	800f602 <rcl_subscription_fini+0x7e>
 800f58c:	4604      	mov	r4, r0
 800f58e:	4608      	mov	r0, r1
 800f590:	460d      	mov	r5, r1
 800f592:	f7ff fd67 	bl	800f064 <rcl_node_is_valid_except_context>
 800f596:	2800      	cmp	r0, #0
 800f598:	d038      	beq.n	800f60c <rcl_subscription_fini+0x88>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	b36b      	cbz	r3, 800f5fa <rcl_subscription_fini+0x76>
 800f59e:	4628      	mov	r0, r5
 800f5a0:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800f5a2:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800f5a6:	f7ff fd87 	bl	800f0b8 <rcl_node_get_rmw_handle>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d039      	beq.n	800f622 <rcl_subscription_fini+0x9e>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f5b4:	f002 fd48 	bl	8012048 <rmw_destroy_subscription>
 800f5b8:	6826      	ldr	r6, [r4, #0]
 800f5ba:	1e05      	subs	r5, r0, #0
 800f5bc:	bf18      	it	ne
 800f5be:	2501      	movne	r5, #1
 800f5c0:	b36e      	cbz	r6, 800f61e <rcl_subscription_fini+0x9a>
 800f5c2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f5c6:	4648      	mov	r0, r9
 800f5c8:	f001 fac6 	bl	8010b58 <rcutils_allocator_is_valid>
 800f5cc:	b358      	cbz	r0, 800f626 <rcl_subscription_fini+0xa2>
 800f5ce:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f5d0:	b150      	cbz	r0, 800f5e8 <rcl_subscription_fini+0x64>
 800f5d2:	4649      	mov	r1, r9
 800f5d4:	f001 fdc2 	bl	801115c <rmw_subscription_content_filter_options_fini>
 800f5d8:	4681      	mov	r9, r0
 800f5da:	b9d8      	cbnz	r0, 800f614 <rcl_subscription_fini+0x90>
 800f5dc:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f5de:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f5e0:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f5e2:	4798      	blx	r3
 800f5e4:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800f5e8:	6826      	ldr	r6, [r4, #0]
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	4641      	mov	r1, r8
 800f5ee:	47b8      	blx	r7
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	6023      	str	r3, [r4, #0]
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fa:	461d      	mov	r5, r3
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f602:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800f606:	4628      	mov	r0, r5
 800f608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f60c:	25c8      	movs	r5, #200	@ 0xc8
 800f60e:	4628      	mov	r0, r5
 800f610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f614:	f009 f95a 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 800f618:	6826      	ldr	r6, [r4, #0]
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d0e5      	beq.n	800f5ea <rcl_subscription_fini+0x66>
 800f61e:	2501      	movs	r5, #1
 800f620:	e7e3      	b.n	800f5ea <rcl_subscription_fini+0x66>
 800f622:	250b      	movs	r5, #11
 800f624:	e7ea      	b.n	800f5fc <rcl_subscription_fini+0x78>
 800f626:	6826      	ldr	r6, [r4, #0]
 800f628:	2501      	movs	r5, #1
 800f62a:	e7de      	b.n	800f5ea <rcl_subscription_fini+0x66>

0800f62c <rcl_subscription_get_default_options>:
 800f62c:	b570      	push	{r4, r5, r6, lr}
 800f62e:	4d14      	ldr	r5, [pc, #80]	@ (800f680 <rcl_subscription_get_default_options+0x54>)
 800f630:	4914      	ldr	r1, [pc, #80]	@ (800f684 <rcl_subscription_get_default_options+0x58>)
 800f632:	b08a      	sub	sp, #40	@ 0x28
 800f634:	4604      	mov	r4, r0
 800f636:	2250      	movs	r2, #80	@ 0x50
 800f638:	4628      	mov	r0, r5
 800f63a:	f00e feba 	bl	801e3b2 <memcpy>
 800f63e:	a804      	add	r0, sp, #16
 800f640:	f001 fa5e 	bl	8010b00 <rcutils_get_default_allocator>
 800f644:	f10d 0c10 	add.w	ip, sp, #16
 800f648:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f64c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800f650:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f654:	466e      	mov	r6, sp
 800f656:	f8dc 3000 	ldr.w	r3, [ip]
 800f65a:	f8ce 3000 	str.w	r3, [lr]
 800f65e:	4630      	mov	r0, r6
 800f660:	f001 fd96 	bl	8011190 <rmw_get_default_subscription_options>
 800f664:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f668:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f66c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f670:	2278      	movs	r2, #120	@ 0x78
 800f672:	4629      	mov	r1, r5
 800f674:	4620      	mov	r0, r4
 800f676:	f00e fe9c 	bl	801e3b2 <memcpy>
 800f67a:	4620      	mov	r0, r4
 800f67c:	b00a      	add	sp, #40	@ 0x28
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
 800f680:	2001aac0 	.word	0x2001aac0
 800f684:	08020aa0 	.word	0x08020aa0

0800f688 <rcl_take>:
 800f688:	2800      	cmp	r0, #0
 800f68a:	d04b      	beq.n	800f724 <rcl_take+0x9c>
 800f68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f690:	4615      	mov	r5, r2
 800f692:	6802      	ldr	r2, [r0, #0]
 800f694:	b0a0      	sub	sp, #128	@ 0x80
 800f696:	4604      	mov	r4, r0
 800f698:	2a00      	cmp	r2, #0
 800f69a:	d03b      	beq.n	800f714 <rcl_take+0x8c>
 800f69c:	461f      	mov	r7, r3
 800f69e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d036      	beq.n	800f714 <rcl_take+0x8c>
 800f6a6:	460e      	mov	r6, r1
 800f6a8:	2900      	cmp	r1, #0
 800f6aa:	d039      	beq.n	800f720 <rcl_take+0x98>
 800f6ac:	2d00      	cmp	r5, #0
 800f6ae:	d03d      	beq.n	800f72c <rcl_take+0xa4>
 800f6b0:	a802      	add	r0, sp, #8
 800f6b2:	f001 fd73 	bl	801119c <rmw_get_zero_initialized_message_info>
 800f6b6:	6823      	ldr	r3, [r4, #0]
 800f6b8:	f10d 0c08 	add.w	ip, sp, #8
 800f6bc:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 800f6c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6c4:	46ae      	mov	lr, r5
 800f6c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6da:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f6de:	462b      	mov	r3, r5
 800f6e0:	e88e 0003 	stmia.w	lr, {r0, r1}
 800f6e4:	f04f 0800 	mov.w	r8, #0
 800f6e8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 800f6f4:	9700      	str	r7, [sp, #0]
 800f6f6:	f002 fd07 	bl	8012108 <rmw_take_with_info>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	b9c0      	cbnz	r0, 800f730 <rcl_take+0xa8>
 800f6fe:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 800f702:	f240 1291 	movw	r2, #401	@ 0x191
 800f706:	2900      	cmp	r1, #0
 800f708:	bf08      	it	eq
 800f70a:	4613      	moveq	r3, r2
 800f70c:	4618      	mov	r0, r3
 800f70e:	b020      	add	sp, #128	@ 0x80
 800f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f714:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f718:	4618      	mov	r0, r3
 800f71a:	b020      	add	sp, #128	@ 0x80
 800f71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f720:	230b      	movs	r3, #11
 800f722:	e7f3      	b.n	800f70c <rcl_take+0x84>
 800f724:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f728:	4618      	mov	r0, r3
 800f72a:	4770      	bx	lr
 800f72c:	ad12      	add	r5, sp, #72	@ 0x48
 800f72e:	e7bf      	b.n	800f6b0 <rcl_take+0x28>
 800f730:	f009 f8cc 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 800f734:	4603      	mov	r3, r0
 800f736:	e7e9      	b.n	800f70c <rcl_take+0x84>

0800f738 <rcl_subscription_get_rmw_handle>:
 800f738:	b118      	cbz	r0, 800f742 <rcl_subscription_get_rmw_handle+0xa>
 800f73a:	6800      	ldr	r0, [r0, #0]
 800f73c:	b108      	cbz	r0, 800f742 <rcl_subscription_get_rmw_handle+0xa>
 800f73e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f742:	4770      	bx	lr

0800f744 <rcl_subscription_is_valid>:
 800f744:	b130      	cbz	r0, 800f754 <rcl_subscription_is_valid+0x10>
 800f746:	6800      	ldr	r0, [r0, #0]
 800f748:	b120      	cbz	r0, 800f754 <rcl_subscription_is_valid+0x10>
 800f74a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f74e:	3800      	subs	r0, #0
 800f750:	bf18      	it	ne
 800f752:	2001      	movne	r0, #1
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <_rcl_timer_time_jump>:
 800f758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f75c:	4605      	mov	r5, r0
 800f75e:	b084      	sub	sp, #16
 800f760:	4614      	mov	r4, r2
 800f762:	b131      	cbz	r1, 800f772 <_rcl_timer_time_jump+0x1a>
 800f764:	7803      	ldrb	r3, [r0, #0]
 800f766:	3b02      	subs	r3, #2
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d93f      	bls.n	800f7ec <_rcl_timer_time_jump+0x94>
 800f76c:	b004      	add	sp, #16
 800f76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f772:	6813      	ldr	r3, [r2, #0]
 800f774:	a902      	add	r1, sp, #8
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	f009 ff34 	bl	80195e4 <rcl_clock_get_now>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d1f5      	bne.n	800f76c <_rcl_timer_time_jump+0x14>
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	2105      	movs	r1, #5
 800f784:	3020      	adds	r0, #32
 800f786:	f001 f9f5 	bl	8010b74 <__atomic_load_8>
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	4681      	mov	r9, r0
 800f78e:	460f      	mov	r7, r1
 800f790:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800f794:	2105      	movs	r1, #5
 800f796:	f001 f9ed 	bl	8010b74 <__atomic_load_8>
 800f79a:	4680      	mov	r8, r0
 800f79c:	6820      	ldr	r0, [r4, #0]
 800f79e:	460e      	mov	r6, r1
 800f7a0:	3018      	adds	r0, #24
 800f7a2:	2105      	movs	r1, #5
 800f7a4:	f001 f9e6 	bl	8010b74 <__atomic_load_8>
 800f7a8:	782b      	ldrb	r3, [r5, #0]
 800f7aa:	3b02      	subs	r3, #2
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	460d      	mov	r5, r1
 800f7b0:	4682      	mov	sl, r0
 800f7b2:	d939      	bls.n	800f828 <_rcl_timer_time_jump+0xd0>
 800f7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7b8:	4542      	cmp	r2, r8
 800f7ba:	eb73 0606 	sbcs.w	r6, r3, r6
 800f7be:	da61      	bge.n	800f884 <_rcl_timer_time_jump+0x12c>
 800f7c0:	454a      	cmp	r2, r9
 800f7c2:	eb73 0707 	sbcs.w	r7, r3, r7
 800f7c6:	dad1      	bge.n	800f76c <_rcl_timer_time_jump+0x14>
 800f7c8:	1882      	adds	r2, r0, r2
 800f7ca:	6820      	ldr	r0, [r4, #0]
 800f7cc:	f04f 0505 	mov.w	r5, #5
 800f7d0:	eb43 0301 	adc.w	r3, r3, r1
 800f7d4:	9500      	str	r5, [sp, #0]
 800f7d6:	3028      	adds	r0, #40	@ 0x28
 800f7d8:	f001 fa02 	bl	8010be0 <__atomic_store_8>
 800f7dc:	6820      	ldr	r0, [r4, #0]
 800f7de:	9500      	str	r5, [sp, #0]
 800f7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7e4:	3020      	adds	r0, #32
 800f7e6:	f001 f9fb 	bl	8010be0 <__atomic_store_8>
 800f7ea:	e7bf      	b.n	800f76c <_rcl_timer_time_jump+0x14>
 800f7ec:	6813      	ldr	r3, [r2, #0]
 800f7ee:	a902      	add	r1, sp, #8
 800f7f0:	6818      	ldr	r0, [r3, #0]
 800f7f2:	f009 fef7 	bl	80195e4 <rcl_clock_get_now>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d1b8      	bne.n	800f76c <_rcl_timer_time_jump+0x14>
 800f7fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	d0b4      	beq.n	800f76c <_rcl_timer_time_jump+0x14>
 800f802:	6820      	ldr	r0, [r4, #0]
 800f804:	2105      	movs	r1, #5
 800f806:	3028      	adds	r0, #40	@ 0x28
 800f808:	f001 f9b4 	bl	8010b74 <__atomic_load_8>
 800f80c:	9d02      	ldr	r5, [sp, #8]
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	4602      	mov	r2, r0
 800f812:	6820      	ldr	r0, [r4, #0]
 800f814:	1b52      	subs	r2, r2, r5
 800f816:	f04f 0405 	mov.w	r4, #5
 800f81a:	9400      	str	r4, [sp, #0]
 800f81c:	eb61 0303 	sbc.w	r3, r1, r3
 800f820:	3030      	adds	r0, #48	@ 0x30
 800f822:	f001 f9dd 	bl	8010be0 <__atomic_store_8>
 800f826:	e7a1      	b.n	800f76c <_rcl_timer_time_jump+0x14>
 800f828:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	d09d      	beq.n	800f76c <_rcl_timer_time_jump+0x14>
 800f830:	6820      	ldr	r0, [r4, #0]
 800f832:	f04f 0805 	mov.w	r8, #5
 800f836:	2300      	movs	r3, #0
 800f838:	f8cd 8000 	str.w	r8, [sp]
 800f83c:	3030      	adds	r0, #48	@ 0x30
 800f83e:	2200      	movs	r2, #0
 800f840:	f001 fa04 	bl	8010c4c <__atomic_exchange_8>
 800f844:	ea51 0300 	orrs.w	r3, r1, r0
 800f848:	4606      	mov	r6, r0
 800f84a:	460f      	mov	r7, r1
 800f84c:	d08e      	beq.n	800f76c <_rcl_timer_time_jump+0x14>
 800f84e:	9a02      	ldr	r2, [sp, #8]
 800f850:	9b03      	ldr	r3, [sp, #12]
 800f852:	f8cd 8000 	str.w	r8, [sp]
 800f856:	1a12      	subs	r2, r2, r0
 800f858:	6820      	ldr	r0, [r4, #0]
 800f85a:	eb63 0301 	sbc.w	r3, r3, r1
 800f85e:	eb12 020a 	adds.w	r2, r2, sl
 800f862:	eb43 0305 	adc.w	r3, r3, r5
 800f866:	3028      	adds	r0, #40	@ 0x28
 800f868:	f001 f9ba 	bl	8010be0 <__atomic_store_8>
 800f86c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f870:	f8cd 8000 	str.w	r8, [sp]
 800f874:	6820      	ldr	r0, [r4, #0]
 800f876:	1b92      	subs	r2, r2, r6
 800f878:	eb63 0307 	sbc.w	r3, r3, r7
 800f87c:	3020      	adds	r0, #32
 800f87e:	f001 f9af 	bl	8010be0 <__atomic_store_8>
 800f882:	e773      	b.n	800f76c <_rcl_timer_time_jump+0x14>
 800f884:	6820      	ldr	r0, [r4, #0]
 800f886:	3008      	adds	r0, #8
 800f888:	f009 f9ae 	bl	8018be8 <rcl_trigger_guard_condition>
 800f88c:	e76e      	b.n	800f76c <_rcl_timer_time_jump+0x14>
 800f88e:	bf00      	nop

0800f890 <rcl_get_zero_initialized_timer>:
 800f890:	4b01      	ldr	r3, [pc, #4]	@ (800f898 <rcl_get_zero_initialized_timer+0x8>)
 800f892:	6818      	ldr	r0, [r3, #0]
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	08020af0 	.word	0x08020af0
 800f89c:	00000000 	.word	0x00000000

0800f8a0 <rcl_timer_init2>:
 800f8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a4:	b0ae      	sub	sp, #184	@ 0xb8
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	a839      	add	r0, sp, #228	@ 0xe4
 800f8aa:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 800f8ae:	460d      	mov	r5, r1
 800f8b0:	4691      	mov	r9, r2
 800f8b2:	f001 f951 	bl	8010b58 <rcutils_allocator_is_valid>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d06a      	beq.n	800f990 <rcl_timer_init2+0xf0>
 800f8ba:	2c00      	cmp	r4, #0
 800f8bc:	d068      	beq.n	800f990 <rcl_timer_init2+0xf0>
 800f8be:	2d00      	cmp	r5, #0
 800f8c0:	d066      	beq.n	800f990 <rcl_timer_init2+0xf0>
 800f8c2:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	db63      	blt.n	800f990 <rcl_timer_init2+0xf0>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	b123      	cbz	r3, 800f8d6 <rcl_timer_init2+0x36>
 800f8cc:	2664      	movs	r6, #100	@ 0x64
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	b02e      	add	sp, #184	@ 0xb8
 800f8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d6:	a908      	add	r1, sp, #32
 800f8d8:	4628      	mov	r0, r5
 800f8da:	f009 fe83 	bl	80195e4 <rcl_clock_get_now>
 800f8de:	4606      	mov	r6, r0
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d1f4      	bne.n	800f8ce <rcl_timer_init2+0x2e>
 800f8e4:	ae06      	add	r6, sp, #24
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 800f8ec:	f009 f888 	bl	8018a00 <rcl_get_zero_initialized_guard_condition>
 800f8f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f8f4:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 800f8f8:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f8fa:	e88a 0003 	stmia.w	sl, {r0, r1}
 800f8fe:	4630      	mov	r0, r6
 800f900:	f009 f956 	bl	8018bb0 <rcl_guard_condition_get_default_options>
 800f904:	ab0d      	add	r3, sp, #52	@ 0x34
 800f906:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f90a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f90e:	4649      	mov	r1, r9
 800f910:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f914:	4650      	mov	r0, sl
 800f916:	f009 f87d 	bl	8018a14 <rcl_guard_condition_init>
 800f91a:	4606      	mov	r6, r0
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d1d6      	bne.n	800f8ce <rcl_timer_init2+0x2e>
 800f920:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d038      	beq.n	800f99a <rcl_timer_init2+0xfa>
 800f928:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800f92a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f92c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 800f930:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800f934:	2300      	movs	r3, #0
 800f936:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 800f93a:	932c      	str	r3, [sp, #176]	@ 0xb0
 800f93c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f940:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 800f942:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800f9f8 <rcl_timer_init2+0x158>
 800f946:	19d0      	adds	r0, r2, r7
 800f948:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 800f94a:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 800f94e:	eb43 0107 	adc.w	r1, r3, r7
 800f952:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800f956:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800f95a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800f95e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f962:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 800f966:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f96a:	f8dc 3000 	ldr.w	r3, [ip]
 800f96e:	f8ce 3000 	str.w	r3, [lr]
 800f972:	f088 0801 	eor.w	r8, r8, #1
 800f976:	4619      	mov	r1, r3
 800f978:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 800f97c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f97e:	2060      	movs	r0, #96	@ 0x60
 800f980:	4798      	blx	r3
 800f982:	6020      	str	r0, [r4, #0]
 800f984:	b358      	cbz	r0, 800f9de <rcl_timer_init2+0x13e>
 800f986:	2260      	movs	r2, #96	@ 0x60
 800f988:	a916      	add	r1, sp, #88	@ 0x58
 800f98a:	f00e fd12 	bl	801e3b2 <memcpy>
 800f98e:	e79e      	b.n	800f8ce <rcl_timer_init2+0x2e>
 800f990:	260b      	movs	r6, #11
 800f992:	4630      	mov	r0, r6
 800f994:	b02e      	add	sp, #184	@ 0xb8
 800f996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99a:	2001      	movs	r0, #1
 800f99c:	2100      	movs	r1, #0
 800f99e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800f9a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f9aa:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800f9ae:	4a14      	ldr	r2, [pc, #80]	@ (800fa00 <rcl_timer_init2+0x160>)
 800f9b0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f9b4:	9405      	str	r4, [sp, #20]
 800f9b6:	9204      	str	r2, [sp, #16]
 800f9b8:	ab12      	add	r3, sp, #72	@ 0x48
 800f9ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f9c0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f9c4:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f009 fe27 	bl	801961c <rcl_clock_add_jump_callback>
 800f9ce:	4681      	mov	r9, r0
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d0a9      	beq.n	800f928 <rcl_timer_init2+0x88>
 800f9d4:	4650      	mov	r0, sl
 800f9d6:	f009 f8c9 	bl	8018b6c <rcl_guard_condition_fini>
 800f9da:	464e      	mov	r6, r9
 800f9dc:	e777      	b.n	800f8ce <rcl_timer_init2+0x2e>
 800f9de:	4650      	mov	r0, sl
 800f9e0:	f009 f8c4 	bl	8018b6c <rcl_guard_condition_fini>
 800f9e4:	4906      	ldr	r1, [pc, #24]	@ (800fa00 <rcl_timer_init2+0x160>)
 800f9e6:	4622      	mov	r2, r4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f009 fe79 	bl	80196e0 <rcl_clock_remove_jump_callback>
 800f9ee:	260a      	movs	r6, #10
 800f9f0:	e76d      	b.n	800f8ce <rcl_timer_init2+0x2e>
 800f9f2:	bf00      	nop
 800f9f4:	f3af 8000 	nop.w
	...
 800fa00:	0800f759 	.word	0x0800f759

0800fa04 <rcl_timer_fini>:
 800fa04:	b310      	cbz	r0, 800fa4c <rcl_timer_fini+0x48>
 800fa06:	6803      	ldr	r3, [r0, #0]
 800fa08:	b570      	push	{r4, r5, r6, lr}
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	b1b3      	cbz	r3, 800fa3c <rcl_timer_fini+0x38>
 800fa0e:	f3bf 8f5b 	dmb	ish
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800fa18:	f3bf 8f5b 	dmb	ish
 800fa1c:	6803      	ldr	r3, [r0, #0]
 800fa1e:	6818      	ldr	r0, [r3, #0]
 800fa20:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800fa22:	7802      	ldrb	r2, [r0, #0]
 800fa24:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800fa26:	2a01      	cmp	r2, #1
 800fa28:	d00a      	beq.n	800fa40 <rcl_timer_fini+0x3c>
 800fa2a:	f103 0008 	add.w	r0, r3, #8
 800fa2e:	f009 f89d 	bl	8018b6c <rcl_guard_condition_fini>
 800fa32:	6820      	ldr	r0, [r4, #0]
 800fa34:	4631      	mov	r1, r6
 800fa36:	47a8      	blx	r5
 800fa38:	2300      	movs	r3, #0
 800fa3a:	6023      	str	r3, [r4, #0]
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	bd70      	pop	{r4, r5, r6, pc}
 800fa40:	4903      	ldr	r1, [pc, #12]	@ (800fa50 <rcl_timer_fini+0x4c>)
 800fa42:	4622      	mov	r2, r4
 800fa44:	f009 fe4c 	bl	80196e0 <rcl_clock_remove_jump_callback>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	e7ee      	b.n	800fa2a <rcl_timer_fini+0x26>
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	4770      	bx	lr
 800fa50:	0800f759 	.word	0x0800f759

0800fa54 <rcl_timer_clock>:
 800fa54:	b130      	cbz	r0, 800fa64 <rcl_timer_clock+0x10>
 800fa56:	b129      	cbz	r1, 800fa64 <rcl_timer_clock+0x10>
 800fa58:	6803      	ldr	r3, [r0, #0]
 800fa5a:	b12b      	cbz	r3, 800fa68 <rcl_timer_clock+0x14>
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	600b      	str	r3, [r1, #0]
 800fa60:	2000      	movs	r0, #0
 800fa62:	4770      	bx	lr
 800fa64:	200b      	movs	r0, #11
 800fa66:	4770      	bx	lr
 800fa68:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop

0800fa70 <rcl_timer_call>:
 800fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa74:	b087      	sub	sp, #28
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d067      	beq.n	800fb4a <rcl_timer_call+0xda>
 800fa7a:	6803      	ldr	r3, [r0, #0]
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d068      	beq.n	800fb54 <rcl_timer_call+0xe4>
 800fa82:	f3bf 8f5b 	dmb	ish
 800fa86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fa8a:	f3bf 8f5b 	dmb	ish
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d150      	bne.n	800fb34 <rcl_timer_call+0xc4>
 800fa92:	6803      	ldr	r3, [r0, #0]
 800fa94:	a904      	add	r1, sp, #16
 800fa96:	6818      	ldr	r0, [r3, #0]
 800fa98:	f009 fda4 	bl	80195e4 <rcl_clock_get_now>
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d144      	bne.n	800fb2c <rcl_timer_call+0xbc>
 800faa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	db4a      	blt.n	800fb40 <rcl_timer_call+0xd0>
 800faaa:	6820      	ldr	r0, [r4, #0]
 800faac:	f04f 0a05 	mov.w	sl, #5
 800fab0:	f8cd a000 	str.w	sl, [sp]
 800fab4:	3020      	adds	r0, #32
 800fab6:	f001 f8c9 	bl	8010c4c <__atomic_exchange_8>
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	f3bf 8f5b 	dmb	ish
 800fac0:	4680      	mov	r8, r0
 800fac2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800fac6:	f3bf 8f5b 	dmb	ish
 800faca:	6820      	ldr	r0, [r4, #0]
 800facc:	4689      	mov	r9, r1
 800face:	3028      	adds	r0, #40	@ 0x28
 800fad0:	4651      	mov	r1, sl
 800fad2:	f001 f84f 	bl	8010b74 <__atomic_load_8>
 800fad6:	4606      	mov	r6, r0
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	460f      	mov	r7, r1
 800fadc:	3018      	adds	r0, #24
 800fade:	4651      	mov	r1, sl
 800fae0:	f001 f848 	bl	8010b74 <__atomic_load_8>
 800fae4:	1836      	adds	r6, r6, r0
 800fae6:	eb41 0707 	adc.w	r7, r1, r7
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	4682      	mov	sl, r0
 800faf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800faf4:	42b0      	cmp	r0, r6
 800faf6:	eb71 0c07 	sbcs.w	ip, r1, r7
 800fafa:	db04      	blt.n	800fb06 <rcl_timer_call+0x96>
 800fafc:	ea53 0c02 	orrs.w	ip, r3, r2
 800fb00:	d12b      	bne.n	800fb5a <rcl_timer_call+0xea>
 800fb02:	4606      	mov	r6, r0
 800fb04:	460f      	mov	r7, r1
 800fb06:	6820      	ldr	r0, [r4, #0]
 800fb08:	2105      	movs	r1, #5
 800fb0a:	4632      	mov	r2, r6
 800fb0c:	463b      	mov	r3, r7
 800fb0e:	3028      	adds	r0, #40	@ 0x28
 800fb10:	9100      	str	r1, [sp, #0]
 800fb12:	f001 f865 	bl	8010be0 <__atomic_store_8>
 800fb16:	f1bb 0f00 	cmp.w	fp, #0
 800fb1a:	d007      	beq.n	800fb2c <rcl_timer_call+0xbc>
 800fb1c:	9a04      	ldr	r2, [sp, #16]
 800fb1e:	9b05      	ldr	r3, [sp, #20]
 800fb20:	ebb2 0208 	subs.w	r2, r2, r8
 800fb24:	4620      	mov	r0, r4
 800fb26:	eb63 0309 	sbc.w	r3, r3, r9
 800fb2a:	47d8      	blx	fp
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	b007      	add	sp, #28
 800fb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb34:	f240 3521 	movw	r5, #801	@ 0x321
 800fb38:	4628      	mov	r0, r5
 800fb3a:	b007      	add	sp, #28
 800fb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb40:	2501      	movs	r5, #1
 800fb42:	4628      	mov	r0, r5
 800fb44:	b007      	add	sp, #28
 800fb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4a:	250b      	movs	r5, #11
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	b007      	add	sp, #28
 800fb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb54:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800fb58:	e7e8      	b.n	800fb2c <rcl_timer_call+0xbc>
 800fb5a:	1b80      	subs	r0, r0, r6
 800fb5c:	eb61 0107 	sbc.w	r1, r1, r7
 800fb60:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fb64:	f7f1 f880 	bl	8000c68 <__aeabi_ldivmod>
 800fb68:	9b02      	ldr	r3, [sp, #8]
 800fb6a:	3001      	adds	r0, #1
 800fb6c:	f141 0100 	adc.w	r1, r1, #0
 800fb70:	fb00 f303 	mul.w	r3, r0, r3
 800fb74:	fb01 330a 	mla	r3, r1, sl, r3
 800fb78:	fba0 0a0a 	umull	r0, sl, r0, sl
 800fb7c:	1830      	adds	r0, r6, r0
 800fb7e:	4453      	add	r3, sl
 800fb80:	eb43 0707 	adc.w	r7, r3, r7
 800fb84:	4606      	mov	r6, r0
 800fb86:	e7be      	b.n	800fb06 <rcl_timer_call+0x96>

0800fb88 <rcl_timer_is_ready>:
 800fb88:	b398      	cbz	r0, 800fbf2 <rcl_timer_is_ready+0x6a>
 800fb8a:	b530      	push	{r4, r5, lr}
 800fb8c:	6803      	ldr	r3, [r0, #0]
 800fb8e:	b083      	sub	sp, #12
 800fb90:	4604      	mov	r4, r0
 800fb92:	b383      	cbz	r3, 800fbf6 <rcl_timer_is_ready+0x6e>
 800fb94:	460d      	mov	r5, r1
 800fb96:	b349      	cbz	r1, 800fbec <rcl_timer_is_ready+0x64>
 800fb98:	f3bf 8f5b 	dmb	ish
 800fb9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fba0:	f3bf 8f5b 	dmb	ish
 800fba4:	b9fb      	cbnz	r3, 800fbe6 <rcl_timer_is_ready+0x5e>
 800fba6:	6803      	ldr	r3, [r0, #0]
 800fba8:	4669      	mov	r1, sp
 800fbaa:	6818      	ldr	r0, [r3, #0]
 800fbac:	f009 fd1a 	bl	80195e4 <rcl_clock_get_now>
 800fbb0:	b128      	cbz	r0, 800fbbe <rcl_timer_is_ready+0x36>
 800fbb2:	f240 3321 	movw	r3, #801	@ 0x321
 800fbb6:	4298      	cmp	r0, r3
 800fbb8:	d015      	beq.n	800fbe6 <rcl_timer_is_ready+0x5e>
 800fbba:	b003      	add	sp, #12
 800fbbc:	bd30      	pop	{r4, r5, pc}
 800fbbe:	6820      	ldr	r0, [r4, #0]
 800fbc0:	2105      	movs	r1, #5
 800fbc2:	3028      	adds	r0, #40	@ 0x28
 800fbc4:	f000 ffd6 	bl	8010b74 <__atomic_load_8>
 800fbc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fbcc:	1ac0      	subs	r0, r0, r3
 800fbce:	eb61 0102 	sbc.w	r1, r1, r2
 800fbd2:	2801      	cmp	r0, #1
 800fbd4:	f171 0100 	sbcs.w	r1, r1, #0
 800fbd8:	bfb4      	ite	lt
 800fbda:	2301      	movlt	r3, #1
 800fbdc:	2300      	movge	r3, #0
 800fbde:	702b      	strb	r3, [r5, #0]
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	b003      	add	sp, #12
 800fbe4:	bd30      	pop	{r4, r5, pc}
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	702b      	strb	r3, [r5, #0]
 800fbea:	e7f9      	b.n	800fbe0 <rcl_timer_is_ready+0x58>
 800fbec:	200b      	movs	r0, #11
 800fbee:	b003      	add	sp, #12
 800fbf0:	bd30      	pop	{r4, r5, pc}
 800fbf2:	200b      	movs	r0, #11
 800fbf4:	4770      	bx	lr
 800fbf6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800fbfa:	e7de      	b.n	800fbba <rcl_timer_is_ready+0x32>

0800fbfc <rcl_timer_get_next_call_time>:
 800fbfc:	b1d8      	cbz	r0, 800fc36 <rcl_timer_get_next_call_time+0x3a>
 800fbfe:	b538      	push	{r3, r4, r5, lr}
 800fc00:	6803      	ldr	r3, [r0, #0]
 800fc02:	b1d3      	cbz	r3, 800fc3a <rcl_timer_get_next_call_time+0x3e>
 800fc04:	460c      	mov	r4, r1
 800fc06:	b1a1      	cbz	r1, 800fc32 <rcl_timer_get_next_call_time+0x36>
 800fc08:	f3bf 8f5b 	dmb	ish
 800fc0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fc10:	f3bf 8f5b 	dmb	ish
 800fc14:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800fc18:	b943      	cbnz	r3, 800fc2c <rcl_timer_get_next_call_time+0x30>
 800fc1a:	6800      	ldr	r0, [r0, #0]
 800fc1c:	2105      	movs	r1, #5
 800fc1e:	3028      	adds	r0, #40	@ 0x28
 800fc20:	f000 ffa8 	bl	8010b74 <__atomic_load_8>
 800fc24:	e9c4 0100 	strd	r0, r1, [r4]
 800fc28:	4628      	mov	r0, r5
 800fc2a:	bd38      	pop	{r3, r4, r5, pc}
 800fc2c:	f240 3021 	movw	r0, #801	@ 0x321
 800fc30:	bd38      	pop	{r3, r4, r5, pc}
 800fc32:	200b      	movs	r0, #11
 800fc34:	bd38      	pop	{r3, r4, r5, pc}
 800fc36:	200b      	movs	r0, #11
 800fc38:	4770      	bx	lr
 800fc3a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800fc3e:	bd38      	pop	{r3, r4, r5, pc}

0800fc40 <rcl_timer_get_guard_condition>:
 800fc40:	b130      	cbz	r0, 800fc50 <rcl_timer_get_guard_condition+0x10>
 800fc42:	6800      	ldr	r0, [r0, #0]
 800fc44:	b120      	cbz	r0, 800fc50 <rcl_timer_get_guard_condition+0x10>
 800fc46:	68c3      	ldr	r3, [r0, #12]
 800fc48:	b10b      	cbz	r3, 800fc4e <rcl_timer_get_guard_condition+0xe>
 800fc4a:	3008      	adds	r0, #8
 800fc4c:	4770      	bx	lr
 800fc4e:	4618      	mov	r0, r3
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop

0800fc54 <_rclc_check_for_new_data>:
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d046      	beq.n	800fce6 <_rclc_check_for_new_data+0x92>
 800fc58:	b510      	push	{r4, lr}
 800fc5a:	7802      	ldrb	r2, [r0, #0]
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2a0a      	cmp	r2, #10
 800fc62:	d842      	bhi.n	800fcea <_rclc_check_for_new_data+0x96>
 800fc64:	e8df f002 	tbb	[pc, r2]
 800fc68:	14181212 	.word	0x14181212
 800fc6c:	06060614 	.word	0x06060614
 800fc70:	2e1a      	.short	0x2e1a
 800fc72:	16          	.byte	0x16
 800fc73:	00          	.byte	0x00
 800fc74:	6a0a      	ldr	r2, [r1, #32]
 800fc76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fc78:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fc7c:	3a00      	subs	r2, #0
 800fc7e:	bf18      	it	ne
 800fc80:	2201      	movne	r2, #1
 800fc82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fc86:	2000      	movs	r0, #0
 800fc88:	b004      	add	sp, #16
 800fc8a:	bd10      	pop	{r4, pc}
 800fc8c:	680a      	ldr	r2, [r1, #0]
 800fc8e:	e7f2      	b.n	800fc76 <_rclc_check_for_new_data+0x22>
 800fc90:	698a      	ldr	r2, [r1, #24]
 800fc92:	e7f0      	b.n	800fc76 <_rclc_check_for_new_data+0x22>
 800fc94:	688a      	ldr	r2, [r1, #8]
 800fc96:	e7ee      	b.n	800fc76 <_rclc_check_for_new_data+0x22>
 800fc98:	690a      	ldr	r2, [r1, #16]
 800fc9a:	e7ec      	b.n	800fc76 <_rclc_check_for_new_data+0x22>
 800fc9c:	685c      	ldr	r4, [r3, #4]
 800fc9e:	4608      	mov	r0, r1
 800fca0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800fca4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800fca8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800fcac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800fcb6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800fcba:	f104 0110 	add.w	r1, r4, #16
 800fcbe:	f00a fdaf 	bl	801a820 <rcl_action_client_wait_set_get_entities_ready>
 800fcc2:	e7e1      	b.n	800fc88 <_rclc_check_for_new_data+0x34>
 800fcc4:	685c      	ldr	r4, [r3, #4]
 800fcc6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800fcca:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800fcce:	e9cd 3200 	strd	r3, r2, [sp]
 800fcd2:	4608      	mov	r0, r1
 800fcd4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800fcd8:	f104 0220 	add.w	r2, r4, #32
 800fcdc:	f104 0110 	add.w	r1, r4, #16
 800fce0:	f00a ffa4 	bl	801ac2c <rcl_action_server_wait_set_get_entities_ready>
 800fce4:	e7d0      	b.n	800fc88 <_rclc_check_for_new_data+0x34>
 800fce6:	200b      	movs	r0, #11
 800fce8:	4770      	bx	lr
 800fcea:	2001      	movs	r0, #1
 800fcec:	e7cc      	b.n	800fc88 <_rclc_check_for_new_data+0x34>
 800fcee:	bf00      	nop

0800fcf0 <_rclc_take_new_data>:
 800fcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcf2:	b099      	sub	sp, #100	@ 0x64
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	f000 8082 	beq.w	800fdfe <_rclc_take_new_data+0x10e>
 800fcfa:	7803      	ldrb	r3, [r0, #0]
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	2b0a      	cmp	r3, #10
 800fd00:	f200 815d 	bhi.w	800ffbe <_rclc_take_new_data+0x2ce>
 800fd04:	e8df f003 	tbb	[pc, r3]
 800fd08:	31531f1f 	.word	0x31531f1f
 800fd0c:	06060631 	.word	0x06060631
 800fd10:	4555      	.short	0x4555
 800fd12:	53          	.byte	0x53
 800fd13:	00          	.byte	0x00
 800fd14:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fd16:	6a0b      	ldr	r3, [r1, #32]
 800fd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d046      	beq.n	800fdae <_rclc_take_new_data+0xbe>
 800fd20:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800fd24:	f104 0110 	add.w	r1, r4, #16
 800fd28:	f009 fa88 	bl	801923c <rcl_take_request>
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d03d      	beq.n	800fdae <_rclc_take_new_data+0xbe>
 800fd32:	f240 2359 	movw	r3, #601	@ 0x259
 800fd36:	4298      	cmp	r0, r3
 800fd38:	d128      	bne.n	800fd8c <_rclc_take_new_data+0x9c>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800fd40:	4628      	mov	r0, r5
 800fd42:	b019      	add	sp, #100	@ 0x64
 800fd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd46:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fd48:	680b      	ldr	r3, [r1, #0]
 800fd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd4e:	b373      	cbz	r3, 800fdae <_rclc_take_new_data+0xbe>
 800fd50:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800fd54:	2300      	movs	r3, #0
 800fd56:	aa0a      	add	r2, sp, #40	@ 0x28
 800fd58:	f7ff fc96 	bl	800f688 <rcl_take>
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	b330      	cbz	r0, 800fdae <_rclc_take_new_data+0xbe>
 800fd60:	f240 1391 	movw	r3, #401	@ 0x191
 800fd64:	4298      	cmp	r0, r3
 800fd66:	d0e8      	beq.n	800fd3a <_rclc_take_new_data+0x4a>
 800fd68:	e010      	b.n	800fd8c <_rclc_take_new_data+0x9c>
 800fd6a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fd6c:	698b      	ldr	r3, [r1, #24]
 800fd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd72:	b1e3      	cbz	r3, 800fdae <_rclc_take_new_data+0xbe>
 800fd74:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800fd78:	f104 0110 	add.w	r1, r4, #16
 800fd7c:	f008 fd30 	bl	80187e0 <rcl_take_response>
 800fd80:	4605      	mov	r5, r0
 800fd82:	b1a0      	cbz	r0, 800fdae <_rclc_take_new_data+0xbe>
 800fd84:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fd88:	4298      	cmp	r0, r3
 800fd8a:	d0d9      	beq.n	800fd40 <_rclc_take_new_data+0x50>
 800fd8c:	f000 ffc8 	bl	8010d20 <rcutils_reset_error>
 800fd90:	e7d6      	b.n	800fd40 <_rclc_take_new_data+0x50>
 800fd92:	6840      	ldr	r0, [r0, #4]
 800fd94:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d15f      	bne.n	800fe5c <_rclc_take_new_data+0x16c>
 800fd9c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d179      	bne.n	800fe98 <_rclc_take_new_data+0x1a8>
 800fda4:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f040 8096 	bne.w	800feda <_rclc_take_new_data+0x1ea>
 800fdae:	2500      	movs	r5, #0
 800fdb0:	e7c6      	b.n	800fd40 <_rclc_take_new_data+0x50>
 800fdb2:	6840      	ldr	r0, [r0, #4]
 800fdb4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d138      	bne.n	800fe2e <_rclc_take_new_data+0x13e>
 800fdbc:	69c3      	ldr	r3, [r0, #28]
 800fdbe:	b113      	cbz	r3, 800fdc6 <_rclc_take_new_data+0xd6>
 800fdc0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fdc4:	b9fb      	cbnz	r3, 800fe06 <_rclc_take_new_data+0x116>
 800fdc6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f040 80a8 	bne.w	800ff20 <_rclc_take_new_data+0x230>
 800fdd0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d0ea      	beq.n	800fdae <_rclc_take_new_data+0xbe>
 800fdd8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800fdda:	a90a      	add	r1, sp, #40	@ 0x28
 800fddc:	3010      	adds	r0, #16
 800fdde:	f00a fc03 	bl	801a5e8 <rcl_action_take_result_response>
 800fde2:	4605      	mov	r5, r0
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d1d1      	bne.n	800fd8c <_rclc_take_new_data+0x9c>
 800fde8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fdec:	6860      	ldr	r0, [r4, #4]
 800fdee:	f00b f843 	bl	801ae78 <rclc_action_find_handle_by_result_request_sequence_number>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d0db      	beq.n	800fdae <_rclc_take_new_data+0xbe>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800fdfc:	e7d7      	b.n	800fdae <_rclc_take_new_data+0xbe>
 800fdfe:	250b      	movs	r5, #11
 800fe00:	4628      	mov	r0, r5
 800fe02:	b019      	add	sp, #100	@ 0x64
 800fe04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe06:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fe08:	3010      	adds	r0, #16
 800fe0a:	f00a fc69 	bl	801a6e0 <rcl_action_take_feedback>
 800fe0e:	4605      	mov	r5, r0
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d1bb      	bne.n	800fd8c <_rclc_take_new_data+0x9c>
 800fe14:	6860      	ldr	r0, [r4, #4]
 800fe16:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fe18:	f00a ffec 	bl	801adf4 <rclc_action_find_goal_handle_by_uuid>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	f000 80c4 	beq.w	800ffac <_rclc_take_new_data+0x2bc>
 800fe24:	2201      	movs	r2, #1
 800fe26:	6860      	ldr	r0, [r4, #4]
 800fe28:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800fe2c:	e7cb      	b.n	800fdc6 <_rclc_take_new_data+0xd6>
 800fe2e:	aa04      	add	r2, sp, #16
 800fe30:	a90a      	add	r1, sp, #40	@ 0x28
 800fe32:	3010      	adds	r0, #16
 800fe34:	f00a fb68 	bl	801a508 <rcl_action_take_goal_response>
 800fe38:	4605      	mov	r5, r0
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d1a6      	bne.n	800fd8c <_rclc_take_new_data+0x9c>
 800fe3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fe42:	6860      	ldr	r0, [r4, #4]
 800fe44:	f00b f806 	bl	801ae54 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fe48:	b130      	cbz	r0, 800fe58 <_rclc_take_new_data+0x168>
 800fe4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fe4e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fe52:	2201      	movs	r2, #1
 800fe54:	f880 2020 	strb.w	r2, [r0, #32]
 800fe58:	6860      	ldr	r0, [r4, #4]
 800fe5a:	e7af      	b.n	800fdbc <_rclc_take_new_data+0xcc>
 800fe5c:	f00a ffa4 	bl	801ada8 <rclc_action_take_goal_handle>
 800fe60:	4606      	mov	r6, r0
 800fe62:	6860      	ldr	r0, [r4, #4]
 800fe64:	2e00      	cmp	r6, #0
 800fe66:	d099      	beq.n	800fd9c <_rclc_take_new_data+0xac>
 800fe68:	6070      	str	r0, [r6, #4]
 800fe6a:	69f2      	ldr	r2, [r6, #28]
 800fe6c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fe70:	3010      	adds	r0, #16
 800fe72:	f00a fd65 	bl	801a940 <rcl_action_take_goal_request>
 800fe76:	4605      	mov	r5, r0
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	f040 8099 	bne.w	800ffb0 <_rclc_take_new_data+0x2c0>
 800fe7e:	69f7      	ldr	r7, [r6, #28]
 800fe80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fe82:	7235      	strb	r5, [r6, #8]
 800fe84:	f8c6 0009 	str.w	r0, [r6, #9]
 800fe88:	f8c6 100d 	str.w	r1, [r6, #13]
 800fe8c:	6860      	ldr	r0, [r4, #4]
 800fe8e:	f8c6 2011 	str.w	r2, [r6, #17]
 800fe92:	f8c6 3015 	str.w	r3, [r6, #21]
 800fe96:	e781      	b.n	800fd9c <_rclc_take_new_data+0xac>
 800fe98:	aa04      	add	r2, sp, #16
 800fe9a:	3010      	adds	r0, #16
 800fe9c:	a90a      	add	r1, sp, #40	@ 0x28
 800fe9e:	f00a fdbf 	bl	801aa20 <rcl_action_take_result_request>
 800fea2:	4605      	mov	r5, r0
 800fea4:	2800      	cmp	r0, #0
 800fea6:	f47f af71 	bne.w	800fd8c <_rclc_take_new_data+0x9c>
 800feaa:	6860      	ldr	r0, [r4, #4]
 800feac:	a904      	add	r1, sp, #16
 800feae:	f00a ffa1 	bl	801adf4 <rclc_action_find_goal_handle_by_uuid>
 800feb2:	4607      	mov	r7, r0
 800feb4:	b160      	cbz	r0, 800fed0 <_rclc_take_new_data+0x1e0>
 800feb6:	ad0a      	add	r5, sp, #40	@ 0x28
 800feb8:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800febc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800febe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fec0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fec4:	f04f 0c02 	mov.w	ip, #2
 800fec8:	e886 0003 	stmia.w	r6, {r0, r1}
 800fecc:	f887 c008 	strb.w	ip, [r7, #8]
 800fed0:	6860      	ldr	r0, [r4, #4]
 800fed2:	2300      	movs	r3, #0
 800fed4:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800fed8:	e764      	b.n	800fda4 <_rclc_take_new_data+0xb4>
 800feda:	ae04      	add	r6, sp, #16
 800fedc:	aa0a      	add	r2, sp, #40	@ 0x28
 800fede:	3010      	adds	r0, #16
 800fee0:	4631      	mov	r1, r6
 800fee2:	f00a fddb 	bl	801aa9c <rcl_action_take_cancel_request>
 800fee6:	4605      	mov	r5, r0
 800fee8:	2800      	cmp	r0, #0
 800feea:	f47f af4f 	bne.w	800fd8c <_rclc_take_new_data+0x9c>
 800feee:	6860      	ldr	r0, [r4, #4]
 800fef0:	a90a      	add	r1, sp, #40	@ 0x28
 800fef2:	f00a ff7f 	bl	801adf4 <rclc_action_find_goal_handle_by_uuid>
 800fef6:	4605      	mov	r5, r0
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d04c      	beq.n	800ff96 <_rclc_take_new_data+0x2a6>
 800fefc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ff00:	2101      	movs	r1, #1
 800ff02:	f00a feff 	bl	801ad04 <rcl_action_transition_goal_state>
 800ff06:	2803      	cmp	r0, #3
 800ff08:	4607      	mov	r7, r0
 800ff0a:	d139      	bne.n	800ff80 <_rclc_take_new_data+0x290>
 800ff0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ff0e:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800ff12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff14:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff18:	e884 0003 	stmia.w	r4, {r0, r1}
 800ff1c:	722f      	strb	r7, [r5, #8]
 800ff1e:	e746      	b.n	800fdae <_rclc_take_new_data+0xbe>
 800ff20:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ff24:	a90a      	add	r1, sp, #40	@ 0x28
 800ff26:	3010      	adds	r0, #16
 800ff28:	f00a fb9c 	bl	801a664 <rcl_action_take_cancel_response>
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f47f af2c 	bne.w	800fd8c <_rclc_take_new_data+0x9c>
 800ff34:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff38:	6860      	ldr	r0, [r4, #4]
 800ff3a:	f00a ffaf 	bl	801ae9c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	6860      	ldr	r0, [r4, #4]
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	f43f af44 	beq.w	800fdd0 <_rclc_take_new_data+0xe0>
 800ff48:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ff4a:	2701      	movs	r7, #1
 800ff4c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f43f af3e 	beq.w	800fdd0 <_rclc_take_new_data+0xe0>
 800ff54:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ff56:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ff5a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ff5e:	f00a ff49 	bl	801adf4 <rclc_action_find_goal_handle_by_uuid>
 800ff62:	b138      	cbz	r0, 800ff74 <_rclc_take_new_data+0x284>
 800ff64:	6860      	ldr	r0, [r4, #4]
 800ff66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ff68:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ff6c:	3501      	adds	r5, #1
 800ff6e:	42ab      	cmp	r3, r5
 800ff70:	d8f0      	bhi.n	800ff54 <_rclc_take_new_data+0x264>
 800ff72:	e72d      	b.n	800fdd0 <_rclc_take_new_data+0xe0>
 800ff74:	6860      	ldr	r0, [r4, #4]
 800ff76:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ff78:	3501      	adds	r5, #1
 800ff7a:	42ab      	cmp	r3, r5
 800ff7c:	d8ea      	bhi.n	800ff54 <_rclc_take_new_data+0x264>
 800ff7e:	e727      	b.n	800fdd0 <_rclc_take_new_data+0xe0>
 800ff80:	ab06      	add	r3, sp, #24
 800ff82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff84:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff88:	2103      	movs	r1, #3
 800ff8a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ff8e:	6860      	ldr	r0, [r4, #4]
 800ff90:	f00a fffa 	bl	801af88 <rclc_action_server_goal_cancel_reject>
 800ff94:	e70b      	b.n	800fdae <_rclc_take_new_data+0xbe>
 800ff96:	ab06      	add	r3, sp, #24
 800ff98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff9e:	2102      	movs	r1, #2
 800ffa0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ffa4:	6860      	ldr	r0, [r4, #4]
 800ffa6:	f00a ffef 	bl	801af88 <rclc_action_server_goal_cancel_reject>
 800ffaa:	e700      	b.n	800fdae <_rclc_take_new_data+0xbe>
 800ffac:	6860      	ldr	r0, [r4, #4]
 800ffae:	e70a      	b.n	800fdc6 <_rclc_take_new_data+0xd6>
 800ffb0:	6860      	ldr	r0, [r4, #4]
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	f00a ff08 	bl	801adc8 <rclc_action_remove_used_goal_handle>
 800ffb8:	f000 feb2 	bl	8010d20 <rcutils_reset_error>
 800ffbc:	e6c0      	b.n	800fd40 <_rclc_take_new_data+0x50>
 800ffbe:	2501      	movs	r5, #1
 800ffc0:	e6be      	b.n	800fd40 <_rclc_take_new_data+0x50>
 800ffc2:	bf00      	nop

0800ffc4 <rclc_executor_trigger_any>:
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	b370      	cbz	r0, 8010026 <rclc_executor_trigger_any+0x62>
 800ffc8:	b379      	cbz	r1, 801002a <rclc_executor_trigger_any+0x66>
 800ffca:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ffce:	2200      	movs	r2, #0
 800ffd0:	b350      	cbz	r0, 8010028 <rclc_executor_trigger_any+0x64>
 800ffd2:	b430      	push	{r4, r5}
 800ffd4:	f893 c000 	ldrb.w	ip, [r3]
 800ffd8:	f1bc 0f08 	cmp.w	ip, #8
 800ffdc:	d017      	beq.n	801000e <rclc_executor_trigger_any+0x4a>
 800ffde:	f1bc 0f09 	cmp.w	ip, #9
 800ffe2:	d00d      	beq.n	8010000 <rclc_executor_trigger_any+0x3c>
 800ffe4:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ffe8:	b940      	cbnz	r0, 800fffc <rclc_executor_trigger_any+0x38>
 800ffea:	3201      	adds	r2, #1
 800ffec:	4291      	cmp	r1, r2
 800ffee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fff2:	d003      	beq.n	800fffc <rclc_executor_trigger_any+0x38>
 800fff4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d1eb      	bne.n	800ffd4 <rclc_executor_trigger_any+0x10>
 800fffc:	bc30      	pop	{r4, r5}
 800fffe:	4770      	bx	lr
 8010000:	685c      	ldr	r4, [r3, #4]
 8010002:	6a25      	ldr	r5, [r4, #32]
 8010004:	2d00      	cmp	r5, #0
 8010006:	d1f9      	bne.n	800fffc <rclc_executor_trigger_any+0x38>
 8010008:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 801000c:	e7ec      	b.n	800ffe8 <rclc_executor_trigger_any+0x24>
 801000e:	685c      	ldr	r4, [r3, #4]
 8010010:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010012:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8010016:	d1f1      	bne.n	800fffc <rclc_executor_trigger_any+0x38>
 8010018:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 801001c:	2800      	cmp	r0, #0
 801001e:	d1ed      	bne.n	800fffc <rclc_executor_trigger_any+0x38>
 8010020:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010024:	e7e0      	b.n	800ffe8 <rclc_executor_trigger_any+0x24>
 8010026:	4770      	bx	lr
 8010028:	4770      	bx	lr
 801002a:	4608      	mov	r0, r1
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop

08010030 <_rclc_execute>:
 8010030:	2800      	cmp	r0, #0
 8010032:	f000 80da 	beq.w	80101ea <_rclc_execute+0x1ba>
 8010036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010038:	7843      	ldrb	r3, [r0, #1]
 801003a:	b087      	sub	sp, #28
 801003c:	4604      	mov	r4, r0
 801003e:	b123      	cbz	r3, 801004a <_rclc_execute+0x1a>
 8010040:	2b01      	cmp	r3, #1
 8010042:	d01c      	beq.n	801007e <_rclc_execute+0x4e>
 8010044:	2000      	movs	r0, #0
 8010046:	b007      	add	sp, #28
 8010048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801004a:	7803      	ldrb	r3, [r0, #0]
 801004c:	2b08      	cmp	r3, #8
 801004e:	f000 809e 	beq.w	801018e <_rclc_execute+0x15e>
 8010052:	2b09      	cmp	r3, #9
 8010054:	d024      	beq.n	80100a0 <_rclc_execute+0x70>
 8010056:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801005a:	2800      	cmp	r0, #0
 801005c:	d0f2      	beq.n	8010044 <_rclc_execute+0x14>
 801005e:	2b0a      	cmp	r3, #10
 8010060:	f200 8158 	bhi.w	8010314 <_rclc_execute+0x2e4>
 8010064:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010068:	008c0071 	.word	0x008c0071
 801006c:	0071007e 	.word	0x0071007e
 8010070:	00590075 	.word	0x00590075
 8010074:	00590059 	.word	0x00590059
 8010078:	01560156 	.word	0x01560156
 801007c:	007b      	.short	0x007b
 801007e:	7803      	ldrb	r3, [r0, #0]
 8010080:	2b0a      	cmp	r3, #10
 8010082:	f200 8147 	bhi.w	8010314 <_rclc_execute+0x2e4>
 8010086:	e8df f013 	tbh	[pc, r3, lsl #1]
 801008a:	00f7      	.short	0x00f7
 801008c:	006d0079 	.word	0x006d0079
 8010090:	00640060 	.word	0x00640060
 8010094:	00480048 	.word	0x00480048
 8010098:	00fe0048 	.word	0x00fe0048
 801009c:	006a0100 	.word	0x006a0100
 80100a0:	6840      	ldr	r0, [r0, #4]
 80100a2:	6a02      	ldr	r2, [r0, #32]
 80100a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80100a8:	2a00      	cmp	r2, #0
 80100aa:	f040 80f1 	bne.w	8010290 <_rclc_execute+0x260>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d0c8      	beq.n	8010044 <_rclc_execute+0x14>
 80100b2:	e003      	b.n	80100bc <_rclc_execute+0x8c>
 80100b4:	6858      	ldr	r0, [r3, #4]
 80100b6:	f00a fe87 	bl	801adc8 <rclc_action_remove_used_goal_handle>
 80100ba:	6860      	ldr	r0, [r4, #4]
 80100bc:	f00a febe 	bl	801ae3c <rclc_action_find_first_terminated_handle>
 80100c0:	4603      	mov	r3, r0
 80100c2:	4601      	mov	r1, r0
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d1f5      	bne.n	80100b4 <_rclc_execute+0x84>
 80100c8:	6860      	ldr	r0, [r4, #4]
 80100ca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 80100ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 80e9 	beq.w	80102aa <_rclc_execute+0x27a>
 80100d8:	f640 0634 	movw	r6, #2100	@ 0x834
 80100dc:	2701      	movs	r7, #1
 80100de:	e007      	b.n	80100f0 <_rclc_execute+0xc0>
 80100e0:	4628      	mov	r0, r5
 80100e2:	f00a ff05 	bl	801aef0 <rclc_action_server_response_goal_request>
 80100e6:	6860      	ldr	r0, [r4, #4]
 80100e8:	4629      	mov	r1, r5
 80100ea:	f00a fe6d 	bl	801adc8 <rclc_action_remove_used_goal_handle>
 80100ee:	6860      	ldr	r0, [r4, #4]
 80100f0:	2100      	movs	r1, #0
 80100f2:	f00a fe97 	bl	801ae24 <rclc_action_find_first_handle_by_status>
 80100f6:	4605      	mov	r5, r0
 80100f8:	2800      	cmp	r0, #0
 80100fa:	f000 80d3 	beq.w	80102a4 <_rclc_execute+0x274>
 80100fe:	6863      	ldr	r3, [r4, #4]
 8010100:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010102:	699b      	ldr	r3, [r3, #24]
 8010104:	4798      	blx	r3
 8010106:	42b0      	cmp	r0, r6
 8010108:	f04f 0100 	mov.w	r1, #0
 801010c:	d1e8      	bne.n	80100e0 <_rclc_execute+0xb0>
 801010e:	2101      	movs	r1, #1
 8010110:	4628      	mov	r0, r5
 8010112:	f00a feed 	bl	801aef0 <rclc_action_server_response_goal_request>
 8010116:	722f      	strb	r7, [r5, #8]
 8010118:	e7e9      	b.n	80100ee <_rclc_execute+0xbe>
 801011a:	2b06      	cmp	r3, #6
 801011c:	68a0      	ldr	r0, [r4, #8]
 801011e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010120:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010122:	f000 80b9 	beq.w	8010298 <_rclc_execute+0x268>
 8010126:	2b07      	cmp	r3, #7
 8010128:	f000 80ef 	beq.w	801030a <_rclc_execute+0x2da>
 801012c:	47b0      	blx	r6
 801012e:	f104 0510 	add.w	r5, r4, #16
 8010132:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010134:	6860      	ldr	r0, [r4, #4]
 8010136:	4629      	mov	r1, r5
 8010138:	f009 f8d0 	bl	80192dc <rcl_send_response>
 801013c:	2800      	cmp	r0, #0
 801013e:	d082      	beq.n	8010046 <_rclc_execute+0x16>
 8010140:	9005      	str	r0, [sp, #20]
 8010142:	f000 fded 	bl	8010d20 <rcutils_reset_error>
 8010146:	9805      	ldr	r0, [sp, #20]
 8010148:	e77d      	b.n	8010046 <_rclc_execute+0x16>
 801014a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801014c:	68a0      	ldr	r0, [r4, #8]
 801014e:	4798      	blx	r3
 8010150:	e778      	b.n	8010044 <_rclc_execute+0x14>
 8010152:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010154:	68a0      	ldr	r0, [r4, #8]
 8010156:	f104 0110 	add.w	r1, r4, #16
 801015a:	4798      	blx	r3
 801015c:	e772      	b.n	8010044 <_rclc_execute+0x14>
 801015e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010160:	4798      	blx	r3
 8010162:	e76f      	b.n	8010044 <_rclc_execute+0x14>
 8010164:	6860      	ldr	r0, [r4, #4]
 8010166:	f7ff fc83 	bl	800fa70 <rcl_timer_call>
 801016a:	f240 3321 	movw	r3, #801	@ 0x321
 801016e:	4298      	cmp	r0, r3
 8010170:	f43f af68 	beq.w	8010044 <_rclc_execute+0x14>
 8010174:	2800      	cmp	r0, #0
 8010176:	f43f af66 	beq.w	8010046 <_rclc_execute+0x16>
 801017a:	e7e1      	b.n	8010140 <_rclc_execute+0x110>
 801017c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8010180:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8010184:	2800      	cmp	r0, #0
 8010186:	d0e8      	beq.n	801015a <_rclc_execute+0x12a>
 8010188:	68a0      	ldr	r0, [r4, #8]
 801018a:	4798      	blx	r3
 801018c:	e75a      	b.n	8010044 <_rclc_execute+0x14>
 801018e:	6840      	ldr	r0, [r0, #4]
 8010190:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010192:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 8010196:	d107      	bne.n	80101a8 <_rclc_execute+0x178>
 8010198:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801019c:	b923      	cbnz	r3, 80101a8 <_rclc_execute+0x178>
 801019e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f43f af4e 	beq.w	8010044 <_rclc_execute+0x14>
 80101a8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80101ac:	b303      	cbz	r3, 80101f0 <_rclc_execute+0x1c0>
 80101ae:	2600      	movs	r6, #0
 80101b0:	2701      	movs	r7, #1
 80101b2:	e004      	b.n	80101be <_rclc_execute+0x18e>
 80101b4:	f00a fdd2 	bl	801ad5c <rclc_action_send_result_request>
 80101b8:	b990      	cbnz	r0, 80101e0 <_rclc_execute+0x1b0>
 80101ba:	722f      	strb	r7, [r5, #8]
 80101bc:	6860      	ldr	r0, [r4, #4]
 80101be:	f00a fe7f 	bl	801aec0 <rclc_action_find_first_handle_with_goal_response>
 80101c2:	4605      	mov	r5, r0
 80101c4:	b198      	cbz	r0, 80101ee <_rclc_execute+0x1be>
 80101c6:	6863      	ldr	r3, [r4, #4]
 80101c8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80101d0:	f885 6020 	strb.w	r6, [r5, #32]
 80101d4:	4798      	blx	r3
 80101d6:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80101da:	4628      	mov	r0, r5
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1e9      	bne.n	80101b4 <_rclc_execute+0x184>
 80101e0:	6860      	ldr	r0, [r4, #4]
 80101e2:	4629      	mov	r1, r5
 80101e4:	f00a fdf0 	bl	801adc8 <rclc_action_remove_used_goal_handle>
 80101e8:	e7e8      	b.n	80101bc <_rclc_execute+0x18c>
 80101ea:	200b      	movs	r0, #11
 80101ec:	4770      	bx	lr
 80101ee:	6860      	ldr	r0, [r4, #4]
 80101f0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80101f4:	b18b      	cbz	r3, 801021a <_rclc_execute+0x1ea>
 80101f6:	68c5      	ldr	r5, [r0, #12]
 80101f8:	b32d      	cbz	r5, 8010246 <_rclc_execute+0x216>
 80101fa:	2600      	movs	r6, #0
 80101fc:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8010200:	b143      	cbz	r3, 8010214 <_rclc_execute+0x1e4>
 8010202:	69c3      	ldr	r3, [r0, #28]
 8010204:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8010208:	b123      	cbz	r3, 8010214 <_rclc_execute+0x1e4>
 801020a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801020c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801020e:	4628      	mov	r0, r5
 8010210:	4798      	blx	r3
 8010212:	6860      	ldr	r0, [r4, #4]
 8010214:	682d      	ldr	r5, [r5, #0]
 8010216:	2d00      	cmp	r5, #0
 8010218:	d1f0      	bne.n	80101fc <_rclc_execute+0x1cc>
 801021a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801021e:	b193      	cbz	r3, 8010246 <_rclc_execute+0x216>
 8010220:	68c5      	ldr	r5, [r0, #12]
 8010222:	b185      	cbz	r5, 8010246 <_rclc_execute+0x216>
 8010224:	2600      	movs	r6, #0
 8010226:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801022a:	b14b      	cbz	r3, 8010240 <_rclc_execute+0x210>
 801022c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801022e:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8010232:	b12b      	cbz	r3, 8010240 <_rclc_execute+0x210>
 8010234:	4628      	mov	r0, r5
 8010236:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010238:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801023c:	4798      	blx	r3
 801023e:	6860      	ldr	r0, [r4, #4]
 8010240:	682d      	ldr	r5, [r5, #0]
 8010242:	2d00      	cmp	r5, #0
 8010244:	d1ef      	bne.n	8010226 <_rclc_execute+0x1f6>
 8010246:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801024a:	2b00      	cmp	r3, #0
 801024c:	f43f aefa 	beq.w	8010044 <_rclc_execute+0x14>
 8010250:	2700      	movs	r7, #0
 8010252:	e00b      	b.n	801026c <_rclc_execute+0x23c>
 8010254:	6863      	ldr	r3, [r4, #4]
 8010256:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010258:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801025a:	6a1e      	ldr	r6, [r3, #32]
 801025c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8010260:	47b0      	blx	r6
 8010262:	6860      	ldr	r0, [r4, #4]
 8010264:	4629      	mov	r1, r5
 8010266:	f00a fdaf 	bl	801adc8 <rclc_action_remove_used_goal_handle>
 801026a:	6860      	ldr	r0, [r4, #4]
 801026c:	f00a fe34 	bl	801aed8 <rclc_action_find_first_handle_with_result_response>
 8010270:	4605      	mov	r5, r0
 8010272:	2800      	cmp	r0, #0
 8010274:	d1ee      	bne.n	8010254 <_rclc_execute+0x224>
 8010276:	e6e5      	b.n	8010044 <_rclc_execute+0x14>
 8010278:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801027c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801027e:	2800      	cmp	r0, #0
 8010280:	f43f af65 	beq.w	801014e <_rclc_execute+0x11e>
 8010284:	e762      	b.n	801014c <_rclc_execute+0x11c>
 8010286:	6840      	ldr	r0, [r0, #4]
 8010288:	e78e      	b.n	80101a8 <_rclc_execute+0x178>
 801028a:	6840      	ldr	r0, [r0, #4]
 801028c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010290:	2b00      	cmp	r3, #0
 8010292:	f43f af1c 	beq.w	80100ce <_rclc_execute+0x9e>
 8010296:	e711      	b.n	80100bc <_rclc_execute+0x8c>
 8010298:	f104 0510 	add.w	r5, r4, #16
 801029c:	460a      	mov	r2, r1
 801029e:	4629      	mov	r1, r5
 80102a0:	47b0      	blx	r6
 80102a2:	e746      	b.n	8010132 <_rclc_execute+0x102>
 80102a4:	6860      	ldr	r0, [r4, #4]
 80102a6:	f880 5020 	strb.w	r5, [r0, #32]
 80102aa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f43f aec8 	beq.w	8010044 <_rclc_execute+0x14>
 80102b4:	68c5      	ldr	r5, [r0, #12]
 80102b6:	b325      	cbz	r5, 8010302 <_rclc_execute+0x2d2>
 80102b8:	2602      	movs	r6, #2
 80102ba:	e001      	b.n	80102c0 <_rclc_execute+0x290>
 80102bc:	682d      	ldr	r5, [r5, #0]
 80102be:	b305      	cbz	r5, 8010302 <_rclc_execute+0x2d2>
 80102c0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d1f9      	bne.n	80102bc <_rclc_execute+0x28c>
 80102c8:	69c3      	ldr	r3, [r0, #28]
 80102ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80102cc:	4628      	mov	r0, r5
 80102ce:	4798      	blx	r3
 80102d0:	4603      	mov	r3, r0
 80102d2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80102d6:	4628      	mov	r0, r5
 80102d8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80102dc:	b11b      	cbz	r3, 80102e6 <_rclc_execute+0x2b6>
 80102de:	f00a fe27 	bl	801af30 <rclc_action_server_goal_cancel_accept>
 80102e2:	6860      	ldr	r0, [r4, #4]
 80102e4:	e7ea      	b.n	80102bc <_rclc_execute+0x28c>
 80102e6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80102e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80102ec:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80102f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102f4:	6860      	ldr	r0, [r4, #4]
 80102f6:	2101      	movs	r1, #1
 80102f8:	f00a fe46 	bl	801af88 <rclc_action_server_goal_cancel_reject>
 80102fc:	722e      	strb	r6, [r5, #8]
 80102fe:	6860      	ldr	r0, [r4, #4]
 8010300:	e7dc      	b.n	80102bc <_rclc_execute+0x28c>
 8010302:	2300      	movs	r3, #0
 8010304:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010308:	e69c      	b.n	8010044 <_rclc_execute+0x14>
 801030a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801030c:	47b0      	blx	r6
 801030e:	f104 0510 	add.w	r5, r4, #16
 8010312:	e70e      	b.n	8010132 <_rclc_execute+0x102>
 8010314:	2001      	movs	r0, #1
 8010316:	e696      	b.n	8010046 <_rclc_execute+0x16>

08010318 <rclc_executor_init>:
 8010318:	2800      	cmp	r0, #0
 801031a:	d05a      	beq.n	80103d2 <rclc_executor_init+0xba>
 801031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010320:	460d      	mov	r5, r1
 8010322:	b0b2      	sub	sp, #200	@ 0xc8
 8010324:	2900      	cmp	r1, #0
 8010326:	d050      	beq.n	80103ca <rclc_executor_init+0xb2>
 8010328:	4604      	mov	r4, r0
 801032a:	4618      	mov	r0, r3
 801032c:	4616      	mov	r6, r2
 801032e:	461f      	mov	r7, r3
 8010330:	f000 fc12 	bl	8010b58 <rcutils_allocator_is_valid>
 8010334:	2800      	cmp	r0, #0
 8010336:	d048      	beq.n	80103ca <rclc_executor_init+0xb2>
 8010338:	2e00      	cmp	r6, #0
 801033a:	d046      	beq.n	80103ca <rclc_executor_init+0xb2>
 801033c:	492a      	ldr	r1, [pc, #168]	@ (80103e8 <rclc_executor_init+0xd0>)
 801033e:	2290      	movs	r2, #144	@ 0x90
 8010340:	a80e      	add	r0, sp, #56	@ 0x38
 8010342:	f00e f836 	bl	801e3b2 <memcpy>
 8010346:	a90e      	add	r1, sp, #56	@ 0x38
 8010348:	2290      	movs	r2, #144	@ 0x90
 801034a:	4620      	mov	r0, r4
 801034c:	f00e f831 	bl	801e3b2 <memcpy>
 8010350:	6065      	str	r5, [r4, #4]
 8010352:	4668      	mov	r0, sp
 8010354:	60e6      	str	r6, [r4, #12]
 8010356:	466d      	mov	r5, sp
 8010358:	f009 fa80 	bl	801985c <rcl_get_zero_initialized_wait_set>
 801035c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801035e:	f104 0c18 	add.w	ip, r4, #24
 8010362:	f8d7 8000 	ldr.w	r8, [r7]
 8010366:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801036a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801036c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010372:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010376:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 80103e0 <rclc_executor_init+0xc8>
 801037a:	682b      	ldr	r3, [r5, #0]
 801037c:	f8cc 3000 	str.w	r3, [ip]
 8010380:	6939      	ldr	r1, [r7, #16]
 8010382:	6167      	str	r7, [r4, #20]
 8010384:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 8010388:	01b0      	lsls	r0, r6, #6
 801038a:	47c0      	blx	r8
 801038c:	60a0      	str	r0, [r4, #8]
 801038e:	b310      	cbz	r0, 80103d6 <rclc_executor_init+0xbe>
 8010390:	2500      	movs	r5, #0
 8010392:	e000      	b.n	8010396 <rclc_executor_init+0x7e>
 8010394:	68a0      	ldr	r0, [r4, #8]
 8010396:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 801039a:	4631      	mov	r1, r6
 801039c:	3501      	adds	r5, #1
 801039e:	f000 fa55 	bl	801084c <rclc_executor_handle_init>
 80103a2:	42ae      	cmp	r6, r5
 80103a4:	d1f6      	bne.n	8010394 <rclc_executor_init+0x7c>
 80103a6:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80103aa:	f000 fa45 	bl	8010838 <rclc_executor_handle_counters_zero_init>
 80103ae:	490f      	ldr	r1, [pc, #60]	@ (80103ec <rclc_executor_init+0xd4>)
 80103b0:	68a2      	ldr	r2, [r4, #8]
 80103b2:	2300      	movs	r3, #0
 80103b4:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 80103b8:	b12a      	cbz	r2, 80103c6 <rclc_executor_init+0xae>
 80103ba:	6962      	ldr	r2, [r4, #20]
 80103bc:	b11a      	cbz	r2, 80103c6 <rclc_executor_init+0xae>
 80103be:	68e2      	ldr	r2, [r4, #12]
 80103c0:	b10a      	cbz	r2, 80103c6 <rclc_executor_init+0xae>
 80103c2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 80103c6:	2000      	movs	r0, #0
 80103c8:	e000      	b.n	80103cc <rclc_executor_init+0xb4>
 80103ca:	200b      	movs	r0, #11
 80103cc:	b032      	add	sp, #200	@ 0xc8
 80103ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d2:	200b      	movs	r0, #11
 80103d4:	4770      	bx	lr
 80103d6:	200a      	movs	r0, #10
 80103d8:	e7f8      	b.n	80103cc <rclc_executor_init+0xb4>
 80103da:	bf00      	nop
 80103dc:	f3af 8000 	nop.w
 80103e0:	3b9aca00 	.word	0x3b9aca00
 80103e4:	00000000 	.word	0x00000000
 80103e8:	08020af8 	.word	0x08020af8
 80103ec:	0800ffc5 	.word	0x0800ffc5

080103f0 <rclc_executor_fini>:
 80103f0:	b1f8      	cbz	r0, 8010432 <rclc_executor_fini+0x42>
 80103f2:	b538      	push	{r3, r4, r5, lr}
 80103f4:	4604      	mov	r4, r0
 80103f6:	6880      	ldr	r0, [r0, #8]
 80103f8:	b1c8      	cbz	r0, 801042e <rclc_executor_fini+0x3e>
 80103fa:	6963      	ldr	r3, [r4, #20]
 80103fc:	b1bb      	cbz	r3, 801042e <rclc_executor_fini+0x3e>
 80103fe:	68e2      	ldr	r2, [r4, #12]
 8010400:	b1aa      	cbz	r2, 801042e <rclc_executor_fini+0x3e>
 8010402:	685a      	ldr	r2, [r3, #4]
 8010404:	6919      	ldr	r1, [r3, #16]
 8010406:	4790      	blx	r2
 8010408:	2300      	movs	r3, #0
 801040a:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801040e:	6123      	str	r3, [r4, #16]
 8010410:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8010414:	f104 0518 	add.w	r5, r4, #24
 8010418:	f000 fa0e 	bl	8010838 <rclc_executor_handle_counters_zero_init>
 801041c:	4628      	mov	r0, r5
 801041e:	f009 fa31 	bl	8019884 <rcl_wait_set_is_valid>
 8010422:	b940      	cbnz	r0, 8010436 <rclc_executor_fini+0x46>
 8010424:	a308      	add	r3, pc, #32	@ (adr r3, 8010448 <rclc_executor_fini+0x58>)
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
 801042e:	2000      	movs	r0, #0
 8010430:	bd38      	pop	{r3, r4, r5, pc}
 8010432:	2000      	movs	r0, #0
 8010434:	4770      	bx	lr
 8010436:	4628      	mov	r0, r5
 8010438:	f009 fa2a 	bl	8019890 <rcl_wait_set_fini>
 801043c:	2800      	cmp	r0, #0
 801043e:	d0f1      	beq.n	8010424 <rclc_executor_fini+0x34>
 8010440:	f000 fc6e 	bl	8010d20 <rcutils_reset_error>
 8010444:	e7ee      	b.n	8010424 <rclc_executor_fini+0x34>
 8010446:	bf00      	nop
 8010448:	3b9aca00 	.word	0x3b9aca00
 801044c:	00000000 	.word	0x00000000

08010450 <rclc_executor_add_subscription>:
 8010450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010452:	f89d e018 	ldrb.w	lr, [sp, #24]
 8010456:	b338      	cbz	r0, 80104a8 <rclc_executor_add_subscription+0x58>
 8010458:	b331      	cbz	r1, 80104a8 <rclc_executor_add_subscription+0x58>
 801045a:	b32a      	cbz	r2, 80104a8 <rclc_executor_add_subscription+0x58>
 801045c:	b323      	cbz	r3, 80104a8 <rclc_executor_add_subscription+0x58>
 801045e:	4604      	mov	r4, r0
 8010460:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 8010464:	42a8      	cmp	r0, r5
 8010466:	d301      	bcc.n	801046c <rclc_executor_add_subscription+0x1c>
 8010468:	2001      	movs	r0, #1
 801046a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801046c:	68a6      	ldr	r6, [r4, #8]
 801046e:	0187      	lsls	r7, r0, #6
 8010470:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8010474:	2500      	movs	r5, #0
 8010476:	55f5      	strb	r5, [r6, r7]
 8010478:	3001      	adds	r0, #1
 801047a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 801047e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8010482:	2301      	movs	r3, #1
 8010484:	f104 0518 	add.w	r5, r4, #24
 8010488:	e9cc 1201 	strd	r1, r2, [ip, #4]
 801048c:	f88c e001 	strb.w	lr, [ip, #1]
 8010490:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8010494:	6120      	str	r0, [r4, #16]
 8010496:	4628      	mov	r0, r5
 8010498:	f009 f9f4 	bl	8019884 <rcl_wait_set_is_valid>
 801049c:	b930      	cbnz	r0, 80104ac <rclc_executor_add_subscription+0x5c>
 801049e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80104a0:	3301      	adds	r3, #1
 80104a2:	2000      	movs	r0, #0
 80104a4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80104a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a8:	200b      	movs	r0, #11
 80104aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ac:	4628      	mov	r0, r5
 80104ae:	f009 f9ef 	bl	8019890 <rcl_wait_set_fini>
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d0f3      	beq.n	801049e <rclc_executor_add_subscription+0x4e>
 80104b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104b8 <rclc_executor_add_timer>:
 80104b8:	b300      	cbz	r0, 80104fc <rclc_executor_add_timer+0x44>
 80104ba:	b1f9      	cbz	r1, 80104fc <rclc_executor_add_timer+0x44>
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80104c2:	4293      	cmp	r3, r2
 80104c4:	4604      	mov	r4, r0
 80104c6:	d301      	bcc.n	80104cc <rclc_executor_add_timer+0x14>
 80104c8:	2001      	movs	r0, #1
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	6880      	ldr	r0, [r0, #8]
 80104ce:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 80104d2:	019d      	lsls	r5, r3, #6
 80104d4:	6051      	str	r1, [r2, #4]
 80104d6:	2102      	movs	r1, #2
 80104d8:	5341      	strh	r1, [r0, r5]
 80104da:	3301      	adds	r3, #1
 80104dc:	2000      	movs	r0, #0
 80104de:	2101      	movs	r1, #1
 80104e0:	f104 0518 	add.w	r5, r4, #24
 80104e4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 80104e6:	8711      	strh	r1, [r2, #56]	@ 0x38
 80104e8:	4628      	mov	r0, r5
 80104ea:	6123      	str	r3, [r4, #16]
 80104ec:	f009 f9ca 	bl	8019884 <rcl_wait_set_is_valid>
 80104f0:	b930      	cbnz	r0, 8010500 <rclc_executor_add_timer+0x48>
 80104f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80104f4:	3301      	adds	r3, #1
 80104f6:	2000      	movs	r0, #0
 80104f8:	6523      	str	r3, [r4, #80]	@ 0x50
 80104fa:	bd38      	pop	{r3, r4, r5, pc}
 80104fc:	200b      	movs	r0, #11
 80104fe:	4770      	bx	lr
 8010500:	4628      	mov	r0, r5
 8010502:	f009 f9c5 	bl	8019890 <rcl_wait_set_fini>
 8010506:	2800      	cmp	r0, #0
 8010508:	d0f3      	beq.n	80104f2 <rclc_executor_add_timer+0x3a>
 801050a:	bd38      	pop	{r3, r4, r5, pc}

0801050c <rclc_executor_prepare>:
 801050c:	2800      	cmp	r0, #0
 801050e:	d044      	beq.n	801059a <rclc_executor_prepare+0x8e>
 8010510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010512:	f100 0518 	add.w	r5, r0, #24
 8010516:	b09b      	sub	sp, #108	@ 0x6c
 8010518:	4604      	mov	r4, r0
 801051a:	4628      	mov	r0, r5
 801051c:	f009 f9b2 	bl	8019884 <rcl_wait_set_is_valid>
 8010520:	b110      	cbz	r0, 8010528 <rclc_executor_prepare+0x1c>
 8010522:	2000      	movs	r0, #0
 8010524:	b01b      	add	sp, #108	@ 0x6c
 8010526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010528:	4628      	mov	r0, r5
 801052a:	f009 f9b1 	bl	8019890 <rcl_wait_set_fini>
 801052e:	2800      	cmp	r0, #0
 8010530:	d130      	bne.n	8010594 <rclc_executor_prepare+0x88>
 8010532:	a80c      	add	r0, sp, #48	@ 0x30
 8010534:	f009 f992 	bl	801985c <rcl_get_zero_initialized_wait_set>
 8010538:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801053c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010540:	46ae      	mov	lr, r5
 8010542:	6967      	ldr	r7, [r4, #20]
 8010544:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010548:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801054c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010550:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010554:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010558:	f8dc 3000 	ldr.w	r3, [ip]
 801055c:	f8ce 3000 	str.w	r3, [lr]
 8010560:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010562:	ae04      	add	r6, sp, #16
 8010564:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	6862      	ldr	r2, [r4, #4]
 801056a:	6033      	str	r3, [r6, #0]
 801056c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801056e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8010570:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010574:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8010578:	e9cd 2100 	strd	r2, r1, [sp]
 801057c:	4628      	mov	r0, r5
 801057e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010580:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8010582:	f009 fca1 	bl	8019ec8 <rcl_wait_set_init>
 8010586:	2800      	cmp	r0, #0
 8010588:	d0cc      	beq.n	8010524 <rclc_executor_prepare+0x18>
 801058a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801058c:	f000 fbc8 	bl	8010d20 <rcutils_reset_error>
 8010590:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010592:	e7c7      	b.n	8010524 <rclc_executor_prepare+0x18>
 8010594:	f000 fbc4 	bl	8010d20 <rcutils_reset_error>
 8010598:	e7cb      	b.n	8010532 <rclc_executor_prepare+0x26>
 801059a:	200b      	movs	r0, #11
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop

080105a0 <rclc_executor_spin_some>:
 80105a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	b083      	sub	sp, #12
 80105a6:	2800      	cmp	r0, #0
 80105a8:	f000 8091 	beq.w	80106ce <rclc_executor_spin_some+0x12e>
 80105ac:	4604      	mov	r4, r0
 80105ae:	6840      	ldr	r0, [r0, #4]
 80105b0:	4690      	mov	r8, r2
 80105b2:	4699      	mov	r9, r3
 80105b4:	f008 f9aa 	bl	801890c <rcl_context_is_valid>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	d037      	beq.n	801062c <rclc_executor_spin_some+0x8c>
 80105bc:	4620      	mov	r0, r4
 80105be:	f104 0718 	add.w	r7, r4, #24
 80105c2:	f7ff ffa3 	bl	801050c <rclc_executor_prepare>
 80105c6:	4638      	mov	r0, r7
 80105c8:	f009 fa32 	bl	8019a30 <rcl_wait_set_clear>
 80105cc:	4606      	mov	r6, r0
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d177      	bne.n	80106c2 <rclc_executor_spin_some+0x122>
 80105d2:	68e3      	ldr	r3, [r4, #12]
 80105d4:	4605      	mov	r5, r0
 80105d6:	b1eb      	cbz	r3, 8010614 <rclc_executor_spin_some+0x74>
 80105d8:	68a1      	ldr	r1, [r4, #8]
 80105da:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 80105de:	01aa      	lsls	r2, r5, #6
 80105e0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80105e4:	b1b3      	cbz	r3, 8010614 <rclc_executor_spin_some+0x74>
 80105e6:	5c8b      	ldrb	r3, [r1, r2]
 80105e8:	2b0a      	cmp	r3, #10
 80105ea:	d81f      	bhi.n	801062c <rclc_executor_spin_some+0x8c>
 80105ec:	e8df f003 	tbb	[pc, r3]
 80105f0:	253e3434 	.word	0x253e3434
 80105f4:	06060625 	.word	0x06060625
 80105f8:	525d      	.short	0x525d
 80105fa:	48          	.byte	0x48
 80105fb:	00          	.byte	0x00
 80105fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010600:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010604:	4638      	mov	r0, r7
 8010606:	f009 fd73 	bl	801a0f0 <rcl_wait_set_add_service>
 801060a:	b9f8      	cbnz	r0, 801064c <rclc_executor_spin_some+0xac>
 801060c:	68e3      	ldr	r3, [r4, #12]
 801060e:	3501      	adds	r5, #1
 8010610:	42ab      	cmp	r3, r5
 8010612:	d8e1      	bhi.n	80105d8 <rclc_executor_spin_some+0x38>
 8010614:	4642      	mov	r2, r8
 8010616:	464b      	mov	r3, r9
 8010618:	4638      	mov	r0, r7
 801061a:	f009 fd95 	bl	801a148 <rcl_wait>
 801061e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 8010622:	2d00      	cmp	r5, #0
 8010624:	f000 80ab 	beq.w	801077e <rclc_executor_spin_some+0x1de>
 8010628:	2d01      	cmp	r5, #1
 801062a:	d055      	beq.n	80106d8 <rclc_executor_spin_some+0x138>
 801062c:	f000 fb78 	bl	8010d20 <rcutils_reset_error>
 8010630:	2601      	movs	r6, #1
 8010632:	4630      	mov	r0, r6
 8010634:	b003      	add	sp, #12
 8010636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801063a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801063e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010642:	4638      	mov	r0, r7
 8010644:	f009 fd28 	bl	801a098 <rcl_wait_set_add_client>
 8010648:	2800      	cmp	r0, #0
 801064a:	d0df      	beq.n	801060c <rclc_executor_spin_some+0x6c>
 801064c:	9001      	str	r0, [sp, #4]
 801064e:	f000 fb67 	bl	8010d20 <rcutils_reset_error>
 8010652:	9801      	ldr	r0, [sp, #4]
 8010654:	4606      	mov	r6, r0
 8010656:	e7ec      	b.n	8010632 <rclc_executor_spin_some+0x92>
 8010658:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801065c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010660:	4638      	mov	r0, r7
 8010662:	f009 f9b9 	bl	80199d8 <rcl_wait_set_add_subscription>
 8010666:	2800      	cmp	r0, #0
 8010668:	d0d0      	beq.n	801060c <rclc_executor_spin_some+0x6c>
 801066a:	e7ef      	b.n	801064c <rclc_executor_spin_some+0xac>
 801066c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010670:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010674:	4638      	mov	r0, r7
 8010676:	f009 fcdf 	bl	801a038 <rcl_wait_set_add_timer>
 801067a:	2800      	cmp	r0, #0
 801067c:	d0c6      	beq.n	801060c <rclc_executor_spin_some+0x6c>
 801067e:	e7e5      	b.n	801064c <rclc_executor_spin_some+0xac>
 8010680:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010684:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010688:	4638      	mov	r0, r7
 801068a:	f009 fca9 	bl	8019fe0 <rcl_wait_set_add_guard_condition>
 801068e:	2800      	cmp	r0, #0
 8010690:	d0bc      	beq.n	801060c <rclc_executor_spin_some+0x6c>
 8010692:	e7db      	b.n	801064c <rclc_executor_spin_some+0xac>
 8010694:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010698:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801069c:	3110      	adds	r1, #16
 801069e:	4638      	mov	r0, r7
 80106a0:	f00a fa70 	bl	801ab84 <rcl_action_wait_set_add_action_server>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d0b1      	beq.n	801060c <rclc_executor_spin_some+0x6c>
 80106a8:	e7d0      	b.n	801064c <rclc_executor_spin_some+0xac>
 80106aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80106ae:	2300      	movs	r3, #0
 80106b0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80106b4:	3110      	adds	r1, #16
 80106b6:	4638      	mov	r0, r7
 80106b8:	f00a f852 	bl	801a760 <rcl_action_wait_set_add_action_client>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d0a5      	beq.n	801060c <rclc_executor_spin_some+0x6c>
 80106c0:	e7c4      	b.n	801064c <rclc_executor_spin_some+0xac>
 80106c2:	f000 fb2d 	bl	8010d20 <rcutils_reset_error>
 80106c6:	4630      	mov	r0, r6
 80106c8:	b003      	add	sp, #12
 80106ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ce:	260b      	movs	r6, #11
 80106d0:	4630      	mov	r0, r6
 80106d2:	b003      	add	sp, #12
 80106d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d8:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 80106dc:	4663      	mov	r3, ip
 80106de:	4615      	mov	r5, r2
 80106e0:	b1ca      	cbz	r2, 8010716 <rclc_executor_spin_some+0x176>
 80106e2:	2500      	movs	r5, #0
 80106e4:	46a8      	mov	r8, r5
 80106e6:	f240 1991 	movw	r9, #401	@ 0x191
 80106ea:	e00c      	b.n	8010706 <rclc_executor_spin_some+0x166>
 80106ec:	f7ff fab2 	bl	800fc54 <_rclc_check_for_new_data>
 80106f0:	f108 0801 	add.w	r8, r8, #1
 80106f4:	4605      	mov	r5, r0
 80106f6:	b108      	cbz	r0, 80106fc <rclc_executor_spin_some+0x15c>
 80106f8:	4548      	cmp	r0, r9
 80106fa:	d13e      	bne.n	801077a <rclc_executor_spin_some+0x1da>
 80106fc:	68e2      	ldr	r2, [r4, #12]
 80106fe:	4590      	cmp	r8, r2
 8010700:	f080 808b 	bcs.w	801081a <rclc_executor_spin_some+0x27a>
 8010704:	68a3      	ldr	r3, [r4, #8]
 8010706:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 801070a:	469c      	mov	ip, r3
 801070c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010710:	4639      	mov	r1, r7
 8010712:	2b00      	cmp	r3, #0
 8010714:	d1ea      	bne.n	80106ec <rclc_executor_spin_some+0x14c>
 8010716:	4611      	mov	r1, r2
 8010718:	4660      	mov	r0, ip
 801071a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 801071e:	4798      	blx	r3
 8010720:	b358      	cbz	r0, 801077a <rclc_executor_spin_some+0x1da>
 8010722:	68e3      	ldr	r3, [r4, #12]
 8010724:	b34b      	cbz	r3, 801077a <rclc_executor_spin_some+0x1da>
 8010726:	f04f 0800 	mov.w	r8, #0
 801072a:	f240 1991 	movw	r9, #401	@ 0x191
 801072e:	e00a      	b.n	8010746 <rclc_executor_spin_some+0x1a6>
 8010730:	f7ff fade 	bl	800fcf0 <_rclc_take_new_data>
 8010734:	f108 0801 	add.w	r8, r8, #1
 8010738:	4605      	mov	r5, r0
 801073a:	b108      	cbz	r0, 8010740 <rclc_executor_spin_some+0x1a0>
 801073c:	4548      	cmp	r0, r9
 801073e:	d11c      	bne.n	801077a <rclc_executor_spin_some+0x1da>
 8010740:	68e3      	ldr	r3, [r4, #12]
 8010742:	4598      	cmp	r8, r3
 8010744:	d26f      	bcs.n	8010826 <rclc_executor_spin_some+0x286>
 8010746:	68a3      	ldr	r3, [r4, #8]
 8010748:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 801074c:	4639      	mov	r1, r7
 801074e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8010752:	2a00      	cmp	r2, #0
 8010754:	d1ec      	bne.n	8010730 <rclc_executor_spin_some+0x190>
 8010756:	2700      	movs	r7, #0
 8010758:	e009      	b.n	801076e <rclc_executor_spin_some+0x1ce>
 801075a:	f7ff fc69 	bl	8010030 <_rclc_execute>
 801075e:	3701      	adds	r7, #1
 8010760:	4605      	mov	r5, r0
 8010762:	b950      	cbnz	r0, 801077a <rclc_executor_spin_some+0x1da>
 8010764:	68e3      	ldr	r3, [r4, #12]
 8010766:	429f      	cmp	r7, r3
 8010768:	f4bf af63 	bcs.w	8010632 <rclc_executor_spin_some+0x92>
 801076c:	68a3      	ldr	r3, [r4, #8]
 801076e:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 8010772:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1ef      	bne.n	801075a <rclc_executor_spin_some+0x1ba>
 801077a:	462e      	mov	r6, r5
 801077c:	e759      	b.n	8010632 <rclc_executor_spin_some+0x92>
 801077e:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8010782:	4663      	mov	r3, ip
 8010784:	2a00      	cmp	r2, #0
 8010786:	d054      	beq.n	8010832 <rclc_executor_spin_some+0x292>
 8010788:	46a8      	mov	r8, r5
 801078a:	f240 1991 	movw	r9, #401	@ 0x191
 801078e:	e00b      	b.n	80107a8 <rclc_executor_spin_some+0x208>
 8010790:	f7ff fa60 	bl	800fc54 <_rclc_check_for_new_data>
 8010794:	f108 0801 	add.w	r8, r8, #1
 8010798:	4605      	mov	r5, r0
 801079a:	b108      	cbz	r0, 80107a0 <rclc_executor_spin_some+0x200>
 801079c:	4548      	cmp	r0, r9
 801079e:	d1ec      	bne.n	801077a <rclc_executor_spin_some+0x1da>
 80107a0:	68e2      	ldr	r2, [r4, #12]
 80107a2:	4590      	cmp	r8, r2
 80107a4:	d23c      	bcs.n	8010820 <rclc_executor_spin_some+0x280>
 80107a6:	68a3      	ldr	r3, [r4, #8]
 80107a8:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 80107ac:	469c      	mov	ip, r3
 80107ae:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80107b2:	4639      	mov	r1, r7
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1eb      	bne.n	8010790 <rclc_executor_spin_some+0x1f0>
 80107b8:	4611      	mov	r1, r2
 80107ba:	4660      	mov	r0, ip
 80107bc:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 80107c0:	4798      	blx	r3
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d0d9      	beq.n	801077a <rclc_executor_spin_some+0x1da>
 80107c6:	68e3      	ldr	r3, [r4, #12]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d0d6      	beq.n	801077a <rclc_executor_spin_some+0x1da>
 80107cc:	f04f 0a00 	mov.w	sl, #0
 80107d0:	f240 1891 	movw	r8, #401	@ 0x191
 80107d4:	f240 2959 	movw	r9, #601	@ 0x259
 80107d8:	e013      	b.n	8010802 <rclc_executor_spin_some+0x262>
 80107da:	f7ff fa89 	bl	800fcf0 <_rclc_take_new_data>
 80107de:	b118      	cbz	r0, 80107e8 <rclc_executor_spin_some+0x248>
 80107e0:	4540      	cmp	r0, r8
 80107e2:	d001      	beq.n	80107e8 <rclc_executor_spin_some+0x248>
 80107e4:	4548      	cmp	r0, r9
 80107e6:	d122      	bne.n	801082e <rclc_executor_spin_some+0x28e>
 80107e8:	68a0      	ldr	r0, [r4, #8]
 80107ea:	4458      	add	r0, fp
 80107ec:	f7ff fc20 	bl	8010030 <_rclc_execute>
 80107f0:	f10a 0a01 	add.w	sl, sl, #1
 80107f4:	4605      	mov	r5, r0
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d1bf      	bne.n	801077a <rclc_executor_spin_some+0x1da>
 80107fa:	68e3      	ldr	r3, [r4, #12]
 80107fc:	459a      	cmp	sl, r3
 80107fe:	f4bf af18 	bcs.w	8010632 <rclc_executor_spin_some+0x92>
 8010802:	68a0      	ldr	r0, [r4, #8]
 8010804:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8010808:	4639      	mov	r1, r7
 801080a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801080e:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1e1      	bne.n	80107da <rclc_executor_spin_some+0x23a>
 8010816:	462e      	mov	r6, r5
 8010818:	e70b      	b.n	8010632 <rclc_executor_spin_some+0x92>
 801081a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801081e:	e77a      	b.n	8010716 <rclc_executor_spin_some+0x176>
 8010820:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8010824:	e7c8      	b.n	80107b8 <rclc_executor_spin_some+0x218>
 8010826:	2b00      	cmp	r3, #0
 8010828:	d0a7      	beq.n	801077a <rclc_executor_spin_some+0x1da>
 801082a:	68a3      	ldr	r3, [r4, #8]
 801082c:	e793      	b.n	8010756 <rclc_executor_spin_some+0x1b6>
 801082e:	4606      	mov	r6, r0
 8010830:	e6ff      	b.n	8010632 <rclc_executor_spin_some+0x92>
 8010832:	4615      	mov	r5, r2
 8010834:	e7c0      	b.n	80107b8 <rclc_executor_spin_some+0x218>
 8010836:	bf00      	nop

08010838 <rclc_executor_handle_counters_zero_init>:
 8010838:	b130      	cbz	r0, 8010848 <rclc_executor_handle_counters_zero_init+0x10>
 801083a:	b508      	push	{r3, lr}
 801083c:	2220      	movs	r2, #32
 801083e:	2100      	movs	r1, #0
 8010840:	f00d fc86 	bl	801e150 <memset>
 8010844:	2000      	movs	r0, #0
 8010846:	bd08      	pop	{r3, pc}
 8010848:	200b      	movs	r0, #11
 801084a:	4770      	bx	lr

0801084c <rclc_executor_handle_init>:
 801084c:	b158      	cbz	r0, 8010866 <rclc_executor_handle_init+0x1a>
 801084e:	2300      	movs	r3, #0
 8010850:	220b      	movs	r2, #11
 8010852:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010856:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801085a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 801085e:	8002      	strh	r2, [r0, #0]
 8010860:	8703      	strh	r3, [r0, #56]	@ 0x38
 8010862:	4618      	mov	r0, r3
 8010864:	4770      	bx	lr
 8010866:	200b      	movs	r0, #11
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop

0801086c <rclc_support_init_with_options>:
 801086c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010870:	b083      	sub	sp, #12
 8010872:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010874:	b340      	cbz	r0, 80108c8 <rclc_support_init_with_options+0x5c>
 8010876:	461d      	mov	r5, r3
 8010878:	b333      	cbz	r3, 80108c8 <rclc_support_init_with_options+0x5c>
 801087a:	b32e      	cbz	r6, 80108c8 <rclc_support_init_with_options+0x5c>
 801087c:	46e9      	mov	r9, sp
 801087e:	4604      	mov	r4, r0
 8010880:	4648      	mov	r0, r9
 8010882:	460f      	mov	r7, r1
 8010884:	4690      	mov	r8, r2
 8010886:	f008 f837 	bl	80188f8 <rcl_get_zero_initialized_context>
 801088a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801088e:	462a      	mov	r2, r5
 8010890:	e884 0003 	stmia.w	r4, {r0, r1}
 8010894:	4623      	mov	r3, r4
 8010896:	4641      	mov	r1, r8
 8010898:	4638      	mov	r0, r7
 801089a:	f008 f9bb 	bl	8018c14 <rcl_init>
 801089e:	4605      	mov	r5, r0
 80108a0:	b960      	cbnz	r0, 80108bc <rclc_support_init_with_options+0x50>
 80108a2:	60a6      	str	r6, [r4, #8]
 80108a4:	4632      	mov	r2, r6
 80108a6:	f104 010c 	add.w	r1, r4, #12
 80108aa:	2003      	movs	r0, #3
 80108ac:	f008 fdfc 	bl	80194a8 <rcl_clock_init>
 80108b0:	4605      	mov	r5, r0
 80108b2:	b918      	cbnz	r0, 80108bc <rclc_support_init_with_options+0x50>
 80108b4:	4628      	mov	r0, r5
 80108b6:	b003      	add	sp, #12
 80108b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108bc:	f000 fa30 	bl	8010d20 <rcutils_reset_error>
 80108c0:	4628      	mov	r0, r5
 80108c2:	b003      	add	sp, #12
 80108c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108c8:	250b      	movs	r5, #11
 80108ca:	4628      	mov	r0, r5
 80108cc:	b003      	add	sp, #12
 80108ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108d2:	bf00      	nop

080108d4 <rclc_support_fini>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	b320      	cbz	r0, 8010922 <rclc_support_fini+0x4e>
 80108d8:	4604      	mov	r4, r0
 80108da:	300c      	adds	r0, #12
 80108dc:	f008 fe52 	bl	8019584 <rcl_clock_fini>
 80108e0:	4605      	mov	r5, r0
 80108e2:	b948      	cbnz	r0, 80108f8 <rclc_support_fini+0x24>
 80108e4:	4620      	mov	r0, r4
 80108e6:	f008 facf 	bl	8018e88 <rcl_shutdown>
 80108ea:	b968      	cbnz	r0, 8010908 <rclc_support_fini+0x34>
 80108ec:	4620      	mov	r0, r4
 80108ee:	f008 f873 	bl	80189d8 <rcl_context_fini>
 80108f2:	b988      	cbnz	r0, 8010918 <rclc_support_fini+0x44>
 80108f4:	4628      	mov	r0, r5
 80108f6:	bd38      	pop	{r3, r4, r5, pc}
 80108f8:	f000 fa12 	bl	8010d20 <rcutils_reset_error>
 80108fc:	4620      	mov	r0, r4
 80108fe:	2501      	movs	r5, #1
 8010900:	f008 fac2 	bl	8018e88 <rcl_shutdown>
 8010904:	2800      	cmp	r0, #0
 8010906:	d0f1      	beq.n	80108ec <rclc_support_fini+0x18>
 8010908:	f000 fa0a 	bl	8010d20 <rcutils_reset_error>
 801090c:	4620      	mov	r0, r4
 801090e:	2501      	movs	r5, #1
 8010910:	f008 f862 	bl	80189d8 <rcl_context_fini>
 8010914:	2800      	cmp	r0, #0
 8010916:	d0ed      	beq.n	80108f4 <rclc_support_fini+0x20>
 8010918:	2501      	movs	r5, #1
 801091a:	f000 fa01 	bl	8010d20 <rcutils_reset_error>
 801091e:	4628      	mov	r0, r5
 8010920:	bd38      	pop	{r3, r4, r5, pc}
 8010922:	250b      	movs	r5, #11
 8010924:	4628      	mov	r0, r5
 8010926:	bd38      	pop	{r3, r4, r5, pc}

08010928 <rclc_node_init_default>:
 8010928:	b3b8      	cbz	r0, 801099a <rclc_node_init_default+0x72>
 801092a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801092e:	460d      	mov	r5, r1
 8010930:	b0a1      	sub	sp, #132	@ 0x84
 8010932:	b329      	cbz	r1, 8010980 <rclc_node_init_default+0x58>
 8010934:	4616      	mov	r6, r2
 8010936:	b31a      	cbz	r2, 8010980 <rclc_node_init_default+0x58>
 8010938:	461f      	mov	r7, r3
 801093a:	b30b      	cbz	r3, 8010980 <rclc_node_init_default+0x58>
 801093c:	f10d 0810 	add.w	r8, sp, #16
 8010940:	4604      	mov	r4, r0
 8010942:	4640      	mov	r0, r8
 8010944:	f7fe fa04 	bl	800ed50 <rcl_get_zero_initialized_node>
 8010948:	e898 0003 	ldmia.w	r8, {r0, r1}
 801094c:	f10d 0918 	add.w	r9, sp, #24
 8010950:	e884 0003 	stmia.w	r4, {r0, r1}
 8010954:	4648      	mov	r0, r9
 8010956:	f7fe fbd5 	bl	800f104 <rcl_node_get_default_options>
 801095a:	4640      	mov	r0, r8
 801095c:	f7fe f9f8 	bl	800ed50 <rcl_get_zero_initialized_node>
 8010960:	f8cd 9000 	str.w	r9, [sp]
 8010964:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010968:	463b      	mov	r3, r7
 801096a:	e884 0003 	stmia.w	r4, {r0, r1}
 801096e:	4632      	mov	r2, r6
 8010970:	4629      	mov	r1, r5
 8010972:	4620      	mov	r0, r4
 8010974:	f7fe f9f6 	bl	800ed64 <rcl_node_init>
 8010978:	b930      	cbnz	r0, 8010988 <rclc_node_init_default+0x60>
 801097a:	b021      	add	sp, #132	@ 0x84
 801097c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010980:	200b      	movs	r0, #11
 8010982:	b021      	add	sp, #132	@ 0x84
 8010984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010988:	9003      	str	r0, [sp, #12]
 801098a:	f000 f9c9 	bl	8010d20 <rcutils_reset_error>
 801098e:	f000 f9c7 	bl	8010d20 <rcutils_reset_error>
 8010992:	9803      	ldr	r0, [sp, #12]
 8010994:	b021      	add	sp, #132	@ 0x84
 8010996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801099a:	200b      	movs	r0, #11
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop

080109a0 <rclc_publisher_init_default>:
 80109a0:	b368      	cbz	r0, 80109fe <rclc_publisher_init_default+0x5e>
 80109a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a6:	460d      	mov	r5, r1
 80109a8:	b0a0      	sub	sp, #128	@ 0x80
 80109aa:	b321      	cbz	r1, 80109f6 <rclc_publisher_init_default+0x56>
 80109ac:	4616      	mov	r6, r2
 80109ae:	b312      	cbz	r2, 80109f6 <rclc_publisher_init_default+0x56>
 80109b0:	461f      	mov	r7, r3
 80109b2:	b303      	cbz	r3, 80109f6 <rclc_publisher_init_default+0x56>
 80109b4:	4604      	mov	r4, r0
 80109b6:	f7fe fbed 	bl	800f194 <rcl_get_zero_initialized_publisher>
 80109ba:	f10d 0810 	add.w	r8, sp, #16
 80109be:	6020      	str	r0, [r4, #0]
 80109c0:	4640      	mov	r0, r8
 80109c2:	f7fe fcb1 	bl	800f328 <rcl_publisher_get_default_options>
 80109c6:	490f      	ldr	r1, [pc, #60]	@ (8010a04 <rclc_publisher_init_default+0x64>)
 80109c8:	2250      	movs	r2, #80	@ 0x50
 80109ca:	4640      	mov	r0, r8
 80109cc:	f00d fcf1 	bl	801e3b2 <memcpy>
 80109d0:	f8cd 8000 	str.w	r8, [sp]
 80109d4:	463b      	mov	r3, r7
 80109d6:	4632      	mov	r2, r6
 80109d8:	4629      	mov	r1, r5
 80109da:	4620      	mov	r0, r4
 80109dc:	f7fe fbe0 	bl	800f1a0 <rcl_publisher_init>
 80109e0:	b910      	cbnz	r0, 80109e8 <rclc_publisher_init_default+0x48>
 80109e2:	b020      	add	sp, #128	@ 0x80
 80109e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e8:	9003      	str	r0, [sp, #12]
 80109ea:	f000 f999 	bl	8010d20 <rcutils_reset_error>
 80109ee:	9803      	ldr	r0, [sp, #12]
 80109f0:	b020      	add	sp, #128	@ 0x80
 80109f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f6:	200b      	movs	r0, #11
 80109f8:	b020      	add	sp, #128	@ 0x80
 80109fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109fe:	200b      	movs	r0, #11
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	08020b88 	.word	0x08020b88

08010a08 <rclc_subscription_init_default>:
 8010a08:	b368      	cbz	r0, 8010a66 <rclc_subscription_init_default+0x5e>
 8010a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0e:	460d      	mov	r5, r1
 8010a10:	b0a2      	sub	sp, #136	@ 0x88
 8010a12:	b321      	cbz	r1, 8010a5e <rclc_subscription_init_default+0x56>
 8010a14:	4616      	mov	r6, r2
 8010a16:	b312      	cbz	r2, 8010a5e <rclc_subscription_init_default+0x56>
 8010a18:	461f      	mov	r7, r3
 8010a1a:	b303      	cbz	r3, 8010a5e <rclc_subscription_init_default+0x56>
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	f7fe fd03 	bl	800f428 <rcl_get_zero_initialized_subscription>
 8010a22:	f10d 0810 	add.w	r8, sp, #16
 8010a26:	6020      	str	r0, [r4, #0]
 8010a28:	4640      	mov	r0, r8
 8010a2a:	f7fe fdff 	bl	800f62c <rcl_subscription_get_default_options>
 8010a2e:	490f      	ldr	r1, [pc, #60]	@ (8010a6c <rclc_subscription_init_default+0x64>)
 8010a30:	2250      	movs	r2, #80	@ 0x50
 8010a32:	4640      	mov	r0, r8
 8010a34:	f00d fcbd 	bl	801e3b2 <memcpy>
 8010a38:	f8cd 8000 	str.w	r8, [sp]
 8010a3c:	463b      	mov	r3, r7
 8010a3e:	4632      	mov	r2, r6
 8010a40:	4629      	mov	r1, r5
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7fe fcf6 	bl	800f434 <rcl_subscription_init>
 8010a48:	b910      	cbnz	r0, 8010a50 <rclc_subscription_init_default+0x48>
 8010a4a:	b022      	add	sp, #136	@ 0x88
 8010a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a50:	9003      	str	r0, [sp, #12]
 8010a52:	f000 f965 	bl	8010d20 <rcutils_reset_error>
 8010a56:	9803      	ldr	r0, [sp, #12]
 8010a58:	b022      	add	sp, #136	@ 0x88
 8010a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a5e:	200b      	movs	r0, #11
 8010a60:	b022      	add	sp, #136	@ 0x88
 8010a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a66:	200b      	movs	r0, #11
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	08020bd8 	.word	0x08020bd8

08010a70 <rclc_timer_init_default2>:
 8010a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a74:	b08c      	sub	sp, #48	@ 0x30
 8010a76:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8010a7a:	b330      	cbz	r0, 8010aca <rclc_timer_init_default2+0x5a>
 8010a7c:	460e      	mov	r6, r1
 8010a7e:	b321      	cbz	r1, 8010aca <rclc_timer_init_default2+0x5a>
 8010a80:	4690      	mov	r8, r2
 8010a82:	461f      	mov	r7, r3
 8010a84:	4605      	mov	r5, r0
 8010a86:	f7fe ff03 	bl	800f890 <rcl_get_zero_initialized_timer>
 8010a8a:	9408      	str	r4, [sp, #32]
 8010a8c:	68b4      	ldr	r4, [r6, #8]
 8010a8e:	6028      	str	r0, [r5, #0]
 8010a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a92:	f10d 0c0c 	add.w	ip, sp, #12
 8010a96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	f8cc 3000 	str.w	r3, [ip]
 8010aa0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010aa2:	9302      	str	r3, [sp, #8]
 8010aa4:	e9cd 8700 	strd	r8, r7, [sp]
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	4632      	mov	r2, r6
 8010aac:	f106 010c 	add.w	r1, r6, #12
 8010ab0:	f7fe fef6 	bl	800f8a0 <rcl_timer_init2>
 8010ab4:	b910      	cbnz	r0, 8010abc <rclc_timer_init_default2+0x4c>
 8010ab6:	b00c      	add	sp, #48	@ 0x30
 8010ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010abc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010abe:	f000 f92f 	bl	8010d20 <rcutils_reset_error>
 8010ac2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010ac4:	b00c      	add	sp, #48	@ 0x30
 8010ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aca:	200b      	movs	r0, #11
 8010acc:	b00c      	add	sp, #48	@ 0x30
 8010ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad2:	bf00      	nop

08010ad4 <__default_zero_allocate>:
 8010ad4:	f00c bdf4 	b.w	801d6c0 <calloc>

08010ad8 <__default_reallocate>:
 8010ad8:	f00c bf92 	b.w	801da00 <realloc>

08010adc <__default_deallocate>:
 8010adc:	f00c be6e 	b.w	801d7bc <free>

08010ae0 <__default_allocate>:
 8010ae0:	f00c be64 	b.w	801d7ac <malloc>

08010ae4 <rcutils_get_zero_initialized_allocator>:
 8010ae4:	b510      	push	{r4, lr}
 8010ae6:	4c05      	ldr	r4, [pc, #20]	@ (8010afc <rcutils_get_zero_initialized_allocator+0x18>)
 8010ae8:	4686      	mov	lr, r0
 8010aea:	4684      	mov	ip, r0
 8010aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010aee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	f8cc 3000 	str.w	r3, [ip]
 8010af8:	4670      	mov	r0, lr
 8010afa:	bd10      	pop	{r4, pc}
 8010afc:	08020c28 	.word	0x08020c28

08010b00 <rcutils_get_default_allocator>:
 8010b00:	b510      	push	{r4, lr}
 8010b02:	4c05      	ldr	r4, [pc, #20]	@ (8010b18 <rcutils_get_default_allocator+0x18>)
 8010b04:	4686      	mov	lr, r0
 8010b06:	4684      	mov	ip, r0
 8010b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	f8cc 3000 	str.w	r3, [ip]
 8010b14:	4670      	mov	r0, lr
 8010b16:	bd10      	pop	{r4, pc}
 8010b18:	20000188 	.word	0x20000188

08010b1c <rcutils_set_default_allocator>:
 8010b1c:	b1a8      	cbz	r0, 8010b4a <rcutils_set_default_allocator+0x2e>
 8010b1e:	6802      	ldr	r2, [r0, #0]
 8010b20:	b1a2      	cbz	r2, 8010b4c <rcutils_set_default_allocator+0x30>
 8010b22:	6841      	ldr	r1, [r0, #4]
 8010b24:	b1a1      	cbz	r1, 8010b50 <rcutils_set_default_allocator+0x34>
 8010b26:	b410      	push	{r4}
 8010b28:	68c4      	ldr	r4, [r0, #12]
 8010b2a:	b164      	cbz	r4, 8010b46 <rcutils_set_default_allocator+0x2a>
 8010b2c:	6880      	ldr	r0, [r0, #8]
 8010b2e:	b138      	cbz	r0, 8010b40 <rcutils_set_default_allocator+0x24>
 8010b30:	4b08      	ldr	r3, [pc, #32]	@ (8010b54 <rcutils_set_default_allocator+0x38>)
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	2200      	movs	r2, #0
 8010b36:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8010b3a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010b3e:	2001      	movs	r0, #1
 8010b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b44:	4770      	bx	lr
 8010b46:	4620      	mov	r0, r4
 8010b48:	e7fa      	b.n	8010b40 <rcutils_set_default_allocator+0x24>
 8010b4a:	4770      	bx	lr
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	4770      	bx	lr
 8010b50:	4608      	mov	r0, r1
 8010b52:	4770      	bx	lr
 8010b54:	20000188 	.word	0x20000188

08010b58 <rcutils_allocator_is_valid>:
 8010b58:	b158      	cbz	r0, 8010b72 <rcutils_allocator_is_valid+0x1a>
 8010b5a:	6803      	ldr	r3, [r0, #0]
 8010b5c:	b143      	cbz	r3, 8010b70 <rcutils_allocator_is_valid+0x18>
 8010b5e:	6843      	ldr	r3, [r0, #4]
 8010b60:	b133      	cbz	r3, 8010b70 <rcutils_allocator_is_valid+0x18>
 8010b62:	68c3      	ldr	r3, [r0, #12]
 8010b64:	b123      	cbz	r3, 8010b70 <rcutils_allocator_is_valid+0x18>
 8010b66:	6880      	ldr	r0, [r0, #8]
 8010b68:	3800      	subs	r0, #0
 8010b6a:	bf18      	it	ne
 8010b6c:	2001      	movne	r0, #1
 8010b6e:	4770      	bx	lr
 8010b70:	4618      	mov	r0, r3
 8010b72:	4770      	bx	lr

08010b74 <__atomic_load_8>:
 8010b74:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010b78:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010b7c:	4a15      	ldr	r2, [pc, #84]	@ (8010bd4 <__atomic_load_8+0x60>)
 8010b7e:	4b16      	ldr	r3, [pc, #88]	@ (8010bd8 <__atomic_load_8+0x64>)
 8010b80:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010b84:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010b88:	fb02 f101 	mul.w	r1, r2, r1
 8010b8c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010b90:	fba3 2301 	umull	r2, r3, r3, r1
 8010b94:	091b      	lsrs	r3, r3, #4
 8010b96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010b9a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8010b9e:	b4f0      	push	{r4, r5, r6, r7}
 8010ba0:	4d0e      	ldr	r5, [pc, #56]	@ (8010bdc <__atomic_load_8+0x68>)
 8010ba2:	1ac9      	subs	r1, r1, r3
 8010ba4:	194a      	adds	r2, r1, r5
 8010ba6:	f04f 0c01 	mov.w	ip, #1
 8010baa:	e8d2 3f4f 	ldrexb	r3, [r2]
 8010bae:	e8c2 cf44 	strexb	r4, ip, [r2]
 8010bb2:	2c00      	cmp	r4, #0
 8010bb4:	d1f9      	bne.n	8010baa <__atomic_load_8+0x36>
 8010bb6:	f3bf 8f5b 	dmb	ish
 8010bba:	b2dc      	uxtb	r4, r3
 8010bbc:	2c00      	cmp	r4, #0
 8010bbe:	d1f4      	bne.n	8010baa <__atomic_load_8+0x36>
 8010bc0:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010bc4:	f3bf 8f5b 	dmb	ish
 8010bc8:	546b      	strb	r3, [r5, r1]
 8010bca:	4630      	mov	r0, r6
 8010bcc:	4639      	mov	r1, r7
 8010bce:	bcf0      	pop	{r4, r5, r6, r7}
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	27d4eb2d 	.word	0x27d4eb2d
 8010bd8:	b21642c9 	.word	0xb21642c9
 8010bdc:	2001ab38 	.word	0x2001ab38

08010be0 <__atomic_store_8>:
 8010be0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010be4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010be8:	b570      	push	{r4, r5, r6, lr}
 8010bea:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010bee:	4c14      	ldr	r4, [pc, #80]	@ (8010c40 <__atomic_store_8+0x60>)
 8010bf0:	4e14      	ldr	r6, [pc, #80]	@ (8010c44 <__atomic_store_8+0x64>)
 8010bf2:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010bf6:	fb04 f101 	mul.w	r1, r4, r1
 8010bfa:	4c13      	ldr	r4, [pc, #76]	@ (8010c48 <__atomic_store_8+0x68>)
 8010bfc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010c00:	fba4 5401 	umull	r5, r4, r4, r1
 8010c04:	0924      	lsrs	r4, r4, #4
 8010c06:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8010c0a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8010c0e:	eba1 0e04 	sub.w	lr, r1, r4
 8010c12:	f04f 0501 	mov.w	r5, #1
 8010c16:	eb0e 0c06 	add.w	ip, lr, r6
 8010c1a:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010c1e:	e8cc 5f44 	strexb	r4, r5, [ip]
 8010c22:	2c00      	cmp	r4, #0
 8010c24:	d1f9      	bne.n	8010c1a <__atomic_store_8+0x3a>
 8010c26:	f3bf 8f5b 	dmb	ish
 8010c2a:	b2cc      	uxtb	r4, r1
 8010c2c:	2c00      	cmp	r4, #0
 8010c2e:	d1f4      	bne.n	8010c1a <__atomic_store_8+0x3a>
 8010c30:	e9c0 2300 	strd	r2, r3, [r0]
 8010c34:	f3bf 8f5b 	dmb	ish
 8010c38:	f806 100e 	strb.w	r1, [r6, lr]
 8010c3c:	bd70      	pop	{r4, r5, r6, pc}
 8010c3e:	bf00      	nop
 8010c40:	27d4eb2d 	.word	0x27d4eb2d
 8010c44:	2001ab38 	.word	0x2001ab38
 8010c48:	b21642c9 	.word	0xb21642c9

08010c4c <__atomic_exchange_8>:
 8010c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c4e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8010c52:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8010c56:	4917      	ldr	r1, [pc, #92]	@ (8010cb4 <__atomic_exchange_8+0x68>)
 8010c58:	4f17      	ldr	r7, [pc, #92]	@ (8010cb8 <__atomic_exchange_8+0x6c>)
 8010c5a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8010c5e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8010c62:	fb01 fe0e 	mul.w	lr, r1, lr
 8010c66:	4915      	ldr	r1, [pc, #84]	@ (8010cbc <__atomic_exchange_8+0x70>)
 8010c68:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	fba1 010e 	umull	r0, r1, r1, lr
 8010c72:	0909      	lsrs	r1, r1, #4
 8010c74:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8010c78:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8010c7c:	ebae 0e01 	sub.w	lr, lr, r1
 8010c80:	f04f 0501 	mov.w	r5, #1
 8010c84:	eb0e 0107 	add.w	r1, lr, r7
 8010c88:	e8d1 cf4f 	ldrexb	ip, [r1]
 8010c8c:	e8c1 5f40 	strexb	r0, r5, [r1]
 8010c90:	2800      	cmp	r0, #0
 8010c92:	d1f9      	bne.n	8010c88 <__atomic_exchange_8+0x3c>
 8010c94:	f3bf 8f5b 	dmb	ish
 8010c98:	fa5f f48c 	uxtb.w	r4, ip
 8010c9c:	2c00      	cmp	r4, #0
 8010c9e:	d1f3      	bne.n	8010c88 <__atomic_exchange_8+0x3c>
 8010ca0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010ca4:	e9c6 2300 	strd	r2, r3, [r6]
 8010ca8:	f3bf 8f5b 	dmb	ish
 8010cac:	f807 c00e 	strb.w	ip, [r7, lr]
 8010cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	27d4eb2d 	.word	0x27d4eb2d
 8010cb8:	2001ab38 	.word	0x2001ab38
 8010cbc:	b21642c9 	.word	0xb21642c9

08010cc0 <rcutils_get_env>:
 8010cc0:	b150      	cbz	r0, 8010cd8 <rcutils_get_env+0x18>
 8010cc2:	b510      	push	{r4, lr}
 8010cc4:	460c      	mov	r4, r1
 8010cc6:	b909      	cbnz	r1, 8010ccc <rcutils_get_env+0xc>
 8010cc8:	4806      	ldr	r0, [pc, #24]	@ (8010ce4 <rcutils_get_env+0x24>)
 8010cca:	bd10      	pop	{r4, pc}
 8010ccc:	f00c fd26 	bl	801d71c <getenv>
 8010cd0:	b120      	cbz	r0, 8010cdc <rcutils_get_env+0x1c>
 8010cd2:	6020      	str	r0, [r4, #0]
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	bd10      	pop	{r4, pc}
 8010cd8:	4803      	ldr	r0, [pc, #12]	@ (8010ce8 <rcutils_get_env+0x28>)
 8010cda:	4770      	bx	lr
 8010cdc:	4b03      	ldr	r3, [pc, #12]	@ (8010cec <rcutils_get_env+0x2c>)
 8010cde:	6023      	str	r3, [r4, #0]
 8010ce0:	e7f8      	b.n	8010cd4 <rcutils_get_env+0x14>
 8010ce2:	bf00      	nop
 8010ce4:	08020c58 	.word	0x08020c58
 8010ce8:	08020c3c 	.word	0x08020c3c
 8010cec:	08021a84 	.word	0x08021a84

08010cf0 <rcutils_get_error_string>:
 8010cf0:	4b06      	ldr	r3, [pc, #24]	@ (8010d0c <rcutils_get_error_string+0x1c>)
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	b13b      	cbz	r3, 8010d06 <rcutils_get_error_string+0x16>
 8010cf6:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <rcutils_get_error_string+0x20>)
 8010cf8:	781a      	ldrb	r2, [r3, #0]
 8010cfa:	b90a      	cbnz	r2, 8010d00 <rcutils_get_error_string+0x10>
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	701a      	strb	r2, [r3, #0]
 8010d00:	4b04      	ldr	r3, [pc, #16]	@ (8010d14 <rcutils_get_error_string+0x24>)
 8010d02:	7818      	ldrb	r0, [r3, #0]
 8010d04:	4770      	bx	lr
 8010d06:	4b04      	ldr	r3, [pc, #16]	@ (8010d18 <rcutils_get_error_string+0x28>)
 8010d08:	7818      	ldrb	r0, [r3, #0]
 8010d0a:	4770      	bx	lr
 8010d0c:	2001ab4f 	.word	0x2001ab4f
 8010d10:	2001ab51 	.word	0x2001ab51
 8010d14:	2001ab50 	.word	0x2001ab50
 8010d18:	08020c74 	.word	0x08020c74
 8010d1c:	00000000 	.word	0x00000000

08010d20 <rcutils_reset_error>:
 8010d20:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010d40 <rcutils_reset_error+0x20>
 8010d24:	4a08      	ldr	r2, [pc, #32]	@ (8010d48 <rcutils_reset_error+0x28>)
 8010d26:	4809      	ldr	r0, [pc, #36]	@ (8010d4c <rcutils_reset_error+0x2c>)
 8010d28:	4909      	ldr	r1, [pc, #36]	@ (8010d50 <rcutils_reset_error+0x30>)
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	8013      	strh	r3, [r2, #0]
 8010d2e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010d32:	4a08      	ldr	r2, [pc, #32]	@ (8010d54 <rcutils_reset_error+0x34>)
 8010d34:	7003      	strb	r3, [r0, #0]
 8010d36:	700b      	strb	r3, [r1, #0]
 8010d38:	7013      	strb	r3, [r2, #0]
 8010d3a:	4770      	bx	lr
 8010d3c:	f3af 8000 	nop.w
	...
 8010d48:	2001ab58 	.word	0x2001ab58
 8010d4c:	2001ab51 	.word	0x2001ab51
 8010d50:	2001ab50 	.word	0x2001ab50
 8010d54:	2001ab4f 	.word	0x2001ab4f

08010d58 <rcutils_format_string_limit>:
 8010d58:	b40f      	push	{r0, r1, r2, r3}
 8010d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5c:	b083      	sub	sp, #12
 8010d5e:	ac08      	add	r4, sp, #32
 8010d60:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010d66:	b376      	cbz	r6, 8010dc6 <rcutils_format_string_limit+0x6e>
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f7ff fef5 	bl	8010b58 <rcutils_allocator_is_valid>
 8010d6e:	b350      	cbz	r0, 8010dc6 <rcutils_format_string_limit+0x6e>
 8010d70:	2100      	movs	r1, #0
 8010d72:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010d74:	4632      	mov	r2, r6
 8010d76:	4608      	mov	r0, r1
 8010d78:	e9cd 3300 	strd	r3, r3, [sp]
 8010d7c:	f000 f8f8 	bl	8010f70 <rcutils_vsnprintf>
 8010d80:	1c43      	adds	r3, r0, #1
 8010d82:	4605      	mov	r5, r0
 8010d84:	d01f      	beq.n	8010dc6 <rcutils_format_string_limit+0x6e>
 8010d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010d8a:	1c47      	adds	r7, r0, #1
 8010d8c:	429f      	cmp	r7, r3
 8010d8e:	bf84      	itt	hi
 8010d90:	461f      	movhi	r7, r3
 8010d92:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8010d96:	4638      	mov	r0, r7
 8010d98:	9b08      	ldr	r3, [sp, #32]
 8010d9a:	4798      	blx	r3
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	b190      	cbz	r0, 8010dc6 <rcutils_format_string_limit+0x6e>
 8010da0:	9b01      	ldr	r3, [sp, #4]
 8010da2:	4632      	mov	r2, r6
 8010da4:	4639      	mov	r1, r7
 8010da6:	f000 f8e3 	bl	8010f70 <rcutils_vsnprintf>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	db07      	blt.n	8010dbe <rcutils_format_string_limit+0x66>
 8010dae:	2300      	movs	r3, #0
 8010db0:	5563      	strb	r3, [r4, r5]
 8010db2:	4620      	mov	r0, r4
 8010db4:	b003      	add	sp, #12
 8010db6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010dba:	b004      	add	sp, #16
 8010dbc:	4770      	bx	lr
 8010dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	4798      	blx	r3
 8010dc6:	2400      	movs	r4, #0
 8010dc8:	e7f3      	b.n	8010db2 <rcutils_format_string_limit+0x5a>
 8010dca:	bf00      	nop

08010dcc <rcutils_repl_str>:
 8010dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd0:	4699      	mov	r9, r3
 8010dd2:	b089      	sub	sp, #36	@ 0x24
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	4648      	mov	r0, r9
 8010dd8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010ddc:	4698      	mov	r8, r3
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	460c      	mov	r4, r1
 8010de2:	f7ff feb9 	bl	8010b58 <rcutils_allocator_is_valid>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	f000 80a3 	beq.w	8010f32 <rcutils_repl_str+0x166>
 8010dec:	4620      	mov	r0, r4
 8010dee:	f7ef fa77 	bl	80002e0 <strlen>
 8010df2:	f04f 0a00 	mov.w	sl, #0
 8010df6:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8010dfa:	9001      	str	r0, [sp, #4]
 8010dfc:	4657      	mov	r7, sl
 8010dfe:	4655      	mov	r5, sl
 8010e00:	2610      	movs	r6, #16
 8010e02:	e01e      	b.n	8010e42 <rcutils_repl_str+0x76>
 8010e04:	3501      	adds	r5, #1
 8010e06:	45aa      	cmp	sl, r5
 8010e08:	d212      	bcs.n	8010e30 <rcutils_repl_str+0x64>
 8010e0a:	44b2      	add	sl, r6
 8010e0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010e10:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8010e14:	4798      	blx	r3
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f000 8088 	beq.w	8010f2c <rcutils_repl_str+0x160>
 8010e1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010e20:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8010e24:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8010e28:	4607      	mov	r7, r0
 8010e2a:	bf28      	it	cs
 8010e2c:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8010e30:	9a00      	ldr	r2, [sp, #0]
 8010e32:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8010e36:	1aa2      	subs	r2, r4, r2
 8010e38:	f843 2c04 	str.w	r2, [r3, #-4]
 8010e3c:	9b01      	ldr	r3, [sp, #4]
 8010e3e:	eb04 0803 	add.w	r8, r4, r3
 8010e42:	9902      	ldr	r1, [sp, #8]
 8010e44:	4640      	mov	r0, r8
 8010e46:	f00d f9bd 	bl	801e1c4 <strstr>
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	465a      	mov	r2, fp
 8010e4e:	4638      	mov	r0, r7
 8010e50:	2c00      	cmp	r4, #0
 8010e52:	d1d7      	bne.n	8010e04 <rcutils_repl_str+0x38>
 8010e54:	4640      	mov	r0, r8
 8010e56:	f7ef fa43 	bl	80002e0 <strlen>
 8010e5a:	9b00      	ldr	r3, [sp, #0]
 8010e5c:	eba8 0803 	sub.w	r8, r8, r3
 8010e60:	eb08 0300 	add.w	r3, r8, r0
 8010e64:	9304      	str	r3, [sp, #16]
 8010e66:	f8d9 8000 	ldr.w	r8, [r9]
 8010e6a:	2d00      	cmp	r5, #0
 8010e6c:	d03f      	beq.n	8010eee <rcutils_repl_str+0x122>
 8010e6e:	9803      	ldr	r0, [sp, #12]
 8010e70:	f7ef fa36 	bl	80002e0 <strlen>
 8010e74:	4606      	mov	r6, r0
 8010e76:	9801      	ldr	r0, [sp, #4]
 8010e78:	9a04      	ldr	r2, [sp, #16]
 8010e7a:	1a33      	subs	r3, r6, r0
 8010e7c:	fb05 2a03 	mla	sl, r5, r3, r2
 8010e80:	4659      	mov	r1, fp
 8010e82:	f10a 0001 	add.w	r0, sl, #1
 8010e86:	47c0      	blx	r8
 8010e88:	4683      	mov	fp, r0
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	d04e      	beq.n	8010f2c <rcutils_repl_str+0x160>
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	9900      	ldr	r1, [sp, #0]
 8010e92:	f00d fa8e 	bl	801e3b2 <memcpy>
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	9706      	str	r7, [sp, #24]
 8010e9a:	1e6a      	subs	r2, r5, #1
 8010e9c:	445b      	add	r3, fp
 8010e9e:	46a8      	mov	r8, r5
 8010ea0:	9202      	str	r2, [sp, #8]
 8010ea2:	4625      	mov	r5, r4
 8010ea4:	f8cd 901c 	str.w	r9, [sp, #28]
 8010ea8:	461c      	mov	r4, r3
 8010eaa:	9903      	ldr	r1, [sp, #12]
 8010eac:	4632      	mov	r2, r6
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f00d fa7f 	bl	801e3b2 <memcpy>
 8010eb4:	9b01      	ldr	r3, [sp, #4]
 8010eb6:	f857 2b04 	ldr.w	r2, [r7], #4
 8010eba:	eb02 0c03 	add.w	ip, r2, r3
 8010ebe:	9b00      	ldr	r3, [sp, #0]
 8010ec0:	eb03 010c 	add.w	r1, r3, ip
 8010ec4:	9b02      	ldr	r3, [sp, #8]
 8010ec6:	4434      	add	r4, r6
 8010ec8:	429d      	cmp	r5, r3
 8010eca:	4620      	mov	r0, r4
 8010ecc:	d022      	beq.n	8010f14 <rcutils_repl_str+0x148>
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	eba2 090c 	sub.w	r9, r2, ip
 8010ed4:	464a      	mov	r2, r9
 8010ed6:	3501      	adds	r5, #1
 8010ed8:	f00d fa6b 	bl	801e3b2 <memcpy>
 8010edc:	45a8      	cmp	r8, r5
 8010ede:	444c      	add	r4, r9
 8010ee0:	d1e3      	bne.n	8010eaa <rcutils_repl_str+0xde>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8010ee8:	f80b 300a 	strb.w	r3, [fp, sl]
 8010eec:	e008      	b.n	8010f00 <rcutils_repl_str+0x134>
 8010eee:	4618      	mov	r0, r3
 8010ef0:	4659      	mov	r1, fp
 8010ef2:	3001      	adds	r0, #1
 8010ef4:	47c0      	blx	r8
 8010ef6:	4683      	mov	fp, r0
 8010ef8:	b110      	cbz	r0, 8010f00 <rcutils_repl_str+0x134>
 8010efa:	9900      	ldr	r1, [sp, #0]
 8010efc:	f00d fa51 	bl	801e3a2 <strcpy>
 8010f00:	4638      	mov	r0, r7
 8010f02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010f06:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010f0a:	4798      	blx	r3
 8010f0c:	4658      	mov	r0, fp
 8010f0e:	b009      	add	sp, #36	@ 0x24
 8010f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f14:	9b04      	ldr	r3, [sp, #16]
 8010f16:	eba3 020c 	sub.w	r2, r3, ip
 8010f1a:	9205      	str	r2, [sp, #20]
 8010f1c:	3501      	adds	r5, #1
 8010f1e:	f00d fa48 	bl	801e3b2 <memcpy>
 8010f22:	9a05      	ldr	r2, [sp, #20]
 8010f24:	45a8      	cmp	r8, r5
 8010f26:	4414      	add	r4, r2
 8010f28:	d1bf      	bne.n	8010eaa <rcutils_repl_str+0xde>
 8010f2a:	e7da      	b.n	8010ee2 <rcutils_repl_str+0x116>
 8010f2c:	f04f 0b00 	mov.w	fp, #0
 8010f30:	e7e6      	b.n	8010f00 <rcutils_repl_str+0x134>
 8010f32:	4683      	mov	fp, r0
 8010f34:	4658      	mov	r0, fp
 8010f36:	b009      	add	sp, #36	@ 0x24
 8010f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f3c <rcutils_snprintf>:
 8010f3c:	b40c      	push	{r2, r3}
 8010f3e:	b530      	push	{r4, r5, lr}
 8010f40:	b083      	sub	sp, #12
 8010f42:	ab06      	add	r3, sp, #24
 8010f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	b152      	cbz	r2, 8010f62 <rcutils_snprintf+0x26>
 8010f4c:	b138      	cbz	r0, 8010f5e <rcutils_snprintf+0x22>
 8010f4e:	b141      	cbz	r1, 8010f62 <rcutils_snprintf+0x26>
 8010f50:	f00d f832 	bl	801dfb8 <vsniprintf>
 8010f54:	b003      	add	sp, #12
 8010f56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f5a:	b002      	add	sp, #8
 8010f5c:	4770      	bx	lr
 8010f5e:	2900      	cmp	r1, #0
 8010f60:	d0f6      	beq.n	8010f50 <rcutils_snprintf+0x14>
 8010f62:	f00d f9f1 	bl	801e348 <__errno>
 8010f66:	2316      	movs	r3, #22
 8010f68:	6003      	str	r3, [r0, #0]
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f6e:	e7f1      	b.n	8010f54 <rcutils_snprintf+0x18>

08010f70 <rcutils_vsnprintf>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	b13a      	cbz	r2, 8010f84 <rcutils_vsnprintf+0x14>
 8010f74:	b120      	cbz	r0, 8010f80 <rcutils_vsnprintf+0x10>
 8010f76:	b129      	cbz	r1, 8010f84 <rcutils_vsnprintf+0x14>
 8010f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f7c:	f00d b81c 	b.w	801dfb8 <vsniprintf>
 8010f80:	2900      	cmp	r1, #0
 8010f82:	d0f9      	beq.n	8010f78 <rcutils_vsnprintf+0x8>
 8010f84:	f00d f9e0 	bl	801e348 <__errno>
 8010f88:	2316      	movs	r3, #22
 8010f8a:	6003      	str	r3, [r0, #0]
 8010f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	bf00      	nop

08010f94 <rcutils_strdup>:
 8010f94:	b084      	sub	sp, #16
 8010f96:	b570      	push	{r4, r5, r6, lr}
 8010f98:	b086      	sub	sp, #24
 8010f9a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8010f9e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fa8:	f10d 0e04 	add.w	lr, sp, #4
 8010fac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fb0:	f8dc 3000 	ldr.w	r3, [ip]
 8010fb4:	f8ce 3000 	str.w	r3, [lr]
 8010fb8:	b304      	cbz	r4, 8010ffc <rcutils_strdup+0x68>
 8010fba:	a801      	add	r0, sp, #4
 8010fbc:	f7ff fdcc 	bl	8010b58 <rcutils_allocator_is_valid>
 8010fc0:	b1e0      	cbz	r0, 8010ffc <rcutils_strdup+0x68>
 8010fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ef f939 	bl	8000240 <memchr>
 8010fce:	b190      	cbz	r0, 8010ff6 <rcutils_strdup+0x62>
 8010fd0:	1b06      	subs	r6, r0, r4
 8010fd2:	1c70      	adds	r0, r6, #1
 8010fd4:	9b01      	ldr	r3, [sp, #4]
 8010fd6:	9905      	ldr	r1, [sp, #20]
 8010fd8:	4798      	blx	r3
 8010fda:	4605      	mov	r5, r0
 8010fdc:	b128      	cbz	r0, 8010fea <rcutils_strdup+0x56>
 8010fde:	4632      	mov	r2, r6
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	f00d f9e6 	bl	801e3b2 <memcpy>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	55ab      	strb	r3, [r5, r6]
 8010fea:	4628      	mov	r0, r5
 8010fec:	b006      	add	sp, #24
 8010fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ff2:	b004      	add	sp, #16
 8010ff4:	4770      	bx	lr
 8010ff6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010ffa:	e7eb      	b.n	8010fd4 <rcutils_strdup+0x40>
 8010ffc:	2500      	movs	r5, #0
 8010ffe:	e7f4      	b.n	8010fea <rcutils_strdup+0x56>

08011000 <rcutils_strndup>:
 8011000:	b082      	sub	sp, #8
 8011002:	b570      	push	{r4, r5, r6, lr}
 8011004:	ac04      	add	r4, sp, #16
 8011006:	e884 000c 	stmia.w	r4, {r2, r3}
 801100a:	b1e8      	cbz	r0, 8011048 <rcutils_strndup+0x48>
 801100c:	4605      	mov	r5, r0
 801100e:	a804      	add	r0, sp, #16
 8011010:	460c      	mov	r4, r1
 8011012:	f7ff fda1 	bl	8010b58 <rcutils_allocator_is_valid>
 8011016:	b1b8      	cbz	r0, 8011048 <rcutils_strndup+0x48>
 8011018:	4622      	mov	r2, r4
 801101a:	2100      	movs	r1, #0
 801101c:	4628      	mov	r0, r5
 801101e:	f7ef f90f 	bl	8000240 <memchr>
 8011022:	b100      	cbz	r0, 8011026 <rcutils_strndup+0x26>
 8011024:	1b44      	subs	r4, r0, r5
 8011026:	9b04      	ldr	r3, [sp, #16]
 8011028:	9908      	ldr	r1, [sp, #32]
 801102a:	1c60      	adds	r0, r4, #1
 801102c:	4798      	blx	r3
 801102e:	4606      	mov	r6, r0
 8011030:	b128      	cbz	r0, 801103e <rcutils_strndup+0x3e>
 8011032:	4622      	mov	r2, r4
 8011034:	4629      	mov	r1, r5
 8011036:	f00d f9bc 	bl	801e3b2 <memcpy>
 801103a:	2300      	movs	r3, #0
 801103c:	5533      	strb	r3, [r6, r4]
 801103e:	4630      	mov	r0, r6
 8011040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011044:	b002      	add	sp, #8
 8011046:	4770      	bx	lr
 8011048:	2600      	movs	r6, #0
 801104a:	4630      	mov	r0, r6
 801104c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011050:	b002      	add	sp, #8
 8011052:	4770      	bx	lr

08011054 <rcutils_system_time_now>:
 8011054:	b318      	cbz	r0, 801109e <rcutils_system_time_now+0x4a>
 8011056:	b570      	push	{r4, r5, r6, lr}
 8011058:	b084      	sub	sp, #16
 801105a:	4604      	mov	r4, r0
 801105c:	4669      	mov	r1, sp
 801105e:	2001      	movs	r0, #1
 8011060:	f7f1 ff82 	bl	8002f68 <clock_gettime>
 8011064:	2800      	cmp	r0, #0
 8011066:	db17      	blt.n	8011098 <rcutils_system_time_now+0x44>
 8011068:	e9dd 3100 	ldrd	r3, r1, [sp]
 801106c:	2900      	cmp	r1, #0
 801106e:	db13      	blt.n	8011098 <rcutils_system_time_now+0x44>
 8011070:	9d02      	ldr	r5, [sp, #8]
 8011072:	2d00      	cmp	r5, #0
 8011074:	db0d      	blt.n	8011092 <rcutils_system_time_now+0x3e>
 8011076:	4e0b      	ldr	r6, [pc, #44]	@ (80110a4 <rcutils_system_time_now+0x50>)
 8011078:	fba3 3206 	umull	r3, r2, r3, r6
 801107c:	195b      	adds	r3, r3, r5
 801107e:	fb06 2201 	mla	r2, r6, r1, r2
 8011082:	f04f 0000 	mov.w	r0, #0
 8011086:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801108a:	e9c4 3200 	strd	r3, r2, [r4]
 801108e:	b004      	add	sp, #16
 8011090:	bd70      	pop	{r4, r5, r6, pc}
 8011092:	ea53 0201 	orrs.w	r2, r3, r1
 8011096:	d1ee      	bne.n	8011076 <rcutils_system_time_now+0x22>
 8011098:	2002      	movs	r0, #2
 801109a:	b004      	add	sp, #16
 801109c:	bd70      	pop	{r4, r5, r6, pc}
 801109e:	200b      	movs	r0, #11
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	3b9aca00 	.word	0x3b9aca00

080110a8 <rcutils_steady_time_now>:
 80110a8:	b318      	cbz	r0, 80110f2 <rcutils_steady_time_now+0x4a>
 80110aa:	b570      	push	{r4, r5, r6, lr}
 80110ac:	b084      	sub	sp, #16
 80110ae:	4604      	mov	r4, r0
 80110b0:	4669      	mov	r1, sp
 80110b2:	2000      	movs	r0, #0
 80110b4:	f7f1 ff58 	bl	8002f68 <clock_gettime>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	db17      	blt.n	80110ec <rcutils_steady_time_now+0x44>
 80110bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80110c0:	2900      	cmp	r1, #0
 80110c2:	db13      	blt.n	80110ec <rcutils_steady_time_now+0x44>
 80110c4:	9d02      	ldr	r5, [sp, #8]
 80110c6:	2d00      	cmp	r5, #0
 80110c8:	db0d      	blt.n	80110e6 <rcutils_steady_time_now+0x3e>
 80110ca:	4e0b      	ldr	r6, [pc, #44]	@ (80110f8 <rcutils_steady_time_now+0x50>)
 80110cc:	fba3 3206 	umull	r3, r2, r3, r6
 80110d0:	195b      	adds	r3, r3, r5
 80110d2:	fb06 2201 	mla	r2, r6, r1, r2
 80110d6:	f04f 0000 	mov.w	r0, #0
 80110da:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80110de:	e9c4 3200 	strd	r3, r2, [r4]
 80110e2:	b004      	add	sp, #16
 80110e4:	bd70      	pop	{r4, r5, r6, pc}
 80110e6:	ea53 0201 	orrs.w	r2, r3, r1
 80110ea:	d1ee      	bne.n	80110ca <rcutils_steady_time_now+0x22>
 80110ec:	2002      	movs	r0, #2
 80110ee:	b004      	add	sp, #16
 80110f0:	bd70      	pop	{r4, r5, r6, pc}
 80110f2:	200b      	movs	r0, #11
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop
 80110f8:	3b9aca00 	.word	0x3b9aca00

080110fc <rmw_get_zero_initialized_init_options>:
 80110fc:	b530      	push	{r4, r5, lr}
 80110fe:	b08b      	sub	sp, #44	@ 0x2c
 8011100:	466d      	mov	r5, sp
 8011102:	4604      	mov	r4, r0
 8011104:	4628      	mov	r0, r5
 8011106:	f000 f825 	bl	8011154 <rmw_get_default_security_options>
 801110a:	a802      	add	r0, sp, #8
 801110c:	f00a f8ee 	bl	801b2ec <rmw_get_zero_initialized_discovery_options>
 8011110:	2258      	movs	r2, #88	@ 0x58
 8011112:	2100      	movs	r1, #0
 8011114:	4620      	mov	r0, r4
 8011116:	f00d f81b 	bl	801e150 <memset>
 801111a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801111e:	f104 0310 	add.w	r3, r4, #16
 8011122:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011126:	f10d 0c08 	add.w	ip, sp, #8
 801112a:	e883 0003 	stmia.w	r3, {r0, r1}
 801112e:	60e2      	str	r2, [r4, #12]
 8011130:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011134:	f104 0e1c 	add.w	lr, r4, #28
 8011138:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801113c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011140:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011144:	4620      	mov	r0, r4
 8011146:	b00b      	add	sp, #44	@ 0x2c
 8011148:	bd30      	pop	{r4, r5, pc}
 801114a:	bf00      	nop

0801114c <rmw_get_default_publisher_options>:
 801114c:	2200      	movs	r2, #0
 801114e:	6002      	str	r2, [r0, #0]
 8011150:	7102      	strb	r2, [r0, #4]
 8011152:	4770      	bx	lr

08011154 <rmw_get_default_security_options>:
 8011154:	2200      	movs	r2, #0
 8011156:	7002      	strb	r2, [r0, #0]
 8011158:	6042      	str	r2, [r0, #4]
 801115a:	4770      	bx	lr

0801115c <rmw_subscription_content_filter_options_fini>:
 801115c:	b1b0      	cbz	r0, 801118c <rmw_subscription_content_filter_options_fini+0x30>
 801115e:	b538      	push	{r3, r4, r5, lr}
 8011160:	4604      	mov	r4, r0
 8011162:	4608      	mov	r0, r1
 8011164:	460d      	mov	r5, r1
 8011166:	f7ff fcf7 	bl	8010b58 <rcutils_allocator_is_valid>
 801116a:	b168      	cbz	r0, 8011188 <rmw_subscription_content_filter_options_fini+0x2c>
 801116c:	6820      	ldr	r0, [r4, #0]
 801116e:	b120      	cbz	r0, 801117a <rmw_subscription_content_filter_options_fini+0x1e>
 8011170:	686b      	ldr	r3, [r5, #4]
 8011172:	6929      	ldr	r1, [r5, #16]
 8011174:	4798      	blx	r3
 8011176:	2300      	movs	r3, #0
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	1d20      	adds	r0, r4, #4
 801117c:	f009 ff74 	bl	801b068 <rcutils_string_array_fini>
 8011180:	3800      	subs	r0, #0
 8011182:	bf18      	it	ne
 8011184:	2001      	movne	r0, #1
 8011186:	bd38      	pop	{r3, r4, r5, pc}
 8011188:	200b      	movs	r0, #11
 801118a:	bd38      	pop	{r3, r4, r5, pc}
 801118c:	200b      	movs	r0, #11
 801118e:	4770      	bx	lr

08011190 <rmw_get_default_subscription_options>:
 8011190:	2200      	movs	r2, #0
 8011192:	e9c0 2200 	strd	r2, r2, [r0]
 8011196:	6082      	str	r2, [r0, #8]
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop

0801119c <rmw_get_zero_initialized_message_info>:
 801119c:	b510      	push	{r4, lr}
 801119e:	2238      	movs	r2, #56	@ 0x38
 80111a0:	4604      	mov	r4, r0
 80111a2:	2100      	movs	r1, #0
 80111a4:	f00c ffd4 	bl	801e150 <memset>
 80111a8:	4620      	mov	r0, r4
 80111aa:	bd10      	pop	{r4, pc}

080111ac <rmw_validate_namespace_with_size>:
 80111ac:	2800      	cmp	r0, #0
 80111ae:	d031      	beq.n	8011214 <rmw_validate_namespace_with_size+0x68>
 80111b0:	b570      	push	{r4, r5, r6, lr}
 80111b2:	4614      	mov	r4, r2
 80111b4:	b0c2      	sub	sp, #264	@ 0x108
 80111b6:	b1ba      	cbz	r2, 80111e8 <rmw_validate_namespace_with_size+0x3c>
 80111b8:	2901      	cmp	r1, #1
 80111ba:	460e      	mov	r6, r1
 80111bc:	461d      	mov	r5, r3
 80111be:	d102      	bne.n	80111c6 <rmw_validate_namespace_with_size+0x1a>
 80111c0:	7803      	ldrb	r3, [r0, #0]
 80111c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80111c4:	d015      	beq.n	80111f2 <rmw_validate_namespace_with_size+0x46>
 80111c6:	aa01      	add	r2, sp, #4
 80111c8:	4669      	mov	r1, sp
 80111ca:	f00a f961 	bl	801b490 <rmw_validate_full_topic_name>
 80111ce:	b960      	cbnz	r0, 80111ea <rmw_validate_namespace_with_size+0x3e>
 80111d0:	9b00      	ldr	r3, [sp, #0]
 80111d2:	b163      	cbz	r3, 80111ee <rmw_validate_namespace_with_size+0x42>
 80111d4:	2b07      	cmp	r3, #7
 80111d6:	d00a      	beq.n	80111ee <rmw_validate_namespace_with_size+0x42>
 80111d8:	1e5a      	subs	r2, r3, #1
 80111da:	2a05      	cmp	r2, #5
 80111dc:	d81c      	bhi.n	8011218 <rmw_validate_namespace_with_size+0x6c>
 80111de:	e8df f002 	tbb	[pc, r2]
 80111e2:	0c0c      	.short	0x0c0c
 80111e4:	0c0c0c0c 	.word	0x0c0c0c0c
 80111e8:	200b      	movs	r0, #11
 80111ea:	b042      	add	sp, #264	@ 0x108
 80111ec:	bd70      	pop	{r4, r5, r6, pc}
 80111ee:	2ef5      	cmp	r6, #245	@ 0xf5
 80111f0:	d809      	bhi.n	8011206 <rmw_validate_namespace_with_size+0x5a>
 80111f2:	2300      	movs	r3, #0
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	2000      	movs	r0, #0
 80111f8:	e7f7      	b.n	80111ea <rmw_validate_namespace_with_size+0x3e>
 80111fa:	6023      	str	r3, [r4, #0]
 80111fc:	2d00      	cmp	r5, #0
 80111fe:	d0fa      	beq.n	80111f6 <rmw_validate_namespace_with_size+0x4a>
 8011200:	9b01      	ldr	r3, [sp, #4]
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	e7f7      	b.n	80111f6 <rmw_validate_namespace_with_size+0x4a>
 8011206:	2307      	movs	r3, #7
 8011208:	6023      	str	r3, [r4, #0]
 801120a:	2d00      	cmp	r5, #0
 801120c:	d0f3      	beq.n	80111f6 <rmw_validate_namespace_with_size+0x4a>
 801120e:	23f4      	movs	r3, #244	@ 0xf4
 8011210:	602b      	str	r3, [r5, #0]
 8011212:	e7f0      	b.n	80111f6 <rmw_validate_namespace_with_size+0x4a>
 8011214:	200b      	movs	r0, #11
 8011216:	4770      	bx	lr
 8011218:	4a03      	ldr	r2, [pc, #12]	@ (8011228 <rmw_validate_namespace_with_size+0x7c>)
 801121a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801121e:	a802      	add	r0, sp, #8
 8011220:	f7ff fe8c 	bl	8010f3c <rcutils_snprintf>
 8011224:	2001      	movs	r0, #1
 8011226:	e7e0      	b.n	80111ea <rmw_validate_namespace_with_size+0x3e>
 8011228:	08020c78 	.word	0x08020c78

0801122c <rmw_validate_namespace>:
 801122c:	b168      	cbz	r0, 801124a <rmw_validate_namespace+0x1e>
 801122e:	b570      	push	{r4, r5, r6, lr}
 8011230:	460d      	mov	r5, r1
 8011232:	4616      	mov	r6, r2
 8011234:	4604      	mov	r4, r0
 8011236:	f7ef f853 	bl	80002e0 <strlen>
 801123a:	4633      	mov	r3, r6
 801123c:	4601      	mov	r1, r0
 801123e:	462a      	mov	r2, r5
 8011240:	4620      	mov	r0, r4
 8011242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011246:	f7ff bfb1 	b.w	80111ac <rmw_validate_namespace_with_size>
 801124a:	200b      	movs	r0, #11
 801124c:	4770      	bx	lr
 801124e:	bf00      	nop

08011250 <rmw_namespace_validation_result_string>:
 8011250:	2807      	cmp	r0, #7
 8011252:	bf9a      	itte	ls
 8011254:	4b02      	ldrls	r3, [pc, #8]	@ (8011260 <rmw_namespace_validation_result_string+0x10>)
 8011256:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801125a:	4802      	ldrhi	r0, [pc, #8]	@ (8011264 <rmw_namespace_validation_result_string+0x14>)
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	08020e70 	.word	0x08020e70
 8011264:	08020cc8 	.word	0x08020cc8

08011268 <rmw_validate_node_name>:
 8011268:	2800      	cmp	r0, #0
 801126a:	d037      	beq.n	80112dc <rmw_validate_node_name+0x74>
 801126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126e:	460e      	mov	r6, r1
 8011270:	2900      	cmp	r1, #0
 8011272:	d035      	beq.n	80112e0 <rmw_validate_node_name+0x78>
 8011274:	4617      	mov	r7, r2
 8011276:	4604      	mov	r4, r0
 8011278:	f7ef f832 	bl	80002e0 <strlen>
 801127c:	b1d8      	cbz	r0, 80112b6 <rmw_validate_node_name+0x4e>
 801127e:	1e63      	subs	r3, r4, #1
 8011280:	1819      	adds	r1, r3, r0
 8011282:	461a      	mov	r2, r3
 8011284:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011288:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 801128c:	f02e 0c20 	bic.w	ip, lr, #32
 8011290:	2d09      	cmp	r5, #9
 8011292:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8011296:	d915      	bls.n	80112c4 <rmw_validate_node_name+0x5c>
 8011298:	f1bc 0f19 	cmp.w	ip, #25
 801129c:	d912      	bls.n	80112c4 <rmw_validate_node_name+0x5c>
 801129e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80112a2:	d00f      	beq.n	80112c4 <rmw_validate_node_name+0x5c>
 80112a4:	2302      	movs	r3, #2
 80112a6:	6033      	str	r3, [r6, #0]
 80112a8:	b11f      	cbz	r7, 80112b2 <rmw_validate_node_name+0x4a>
 80112aa:	f1c4 0401 	rsb	r4, r4, #1
 80112ae:	4414      	add	r4, r2
 80112b0:	603c      	str	r4, [r7, #0]
 80112b2:	2000      	movs	r0, #0
 80112b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b6:	2301      	movs	r3, #1
 80112b8:	6033      	str	r3, [r6, #0]
 80112ba:	2f00      	cmp	r7, #0
 80112bc:	d0f9      	beq.n	80112b2 <rmw_validate_node_name+0x4a>
 80112be:	2300      	movs	r3, #0
 80112c0:	603b      	str	r3, [r7, #0]
 80112c2:	e7f6      	b.n	80112b2 <rmw_validate_node_name+0x4a>
 80112c4:	4299      	cmp	r1, r3
 80112c6:	d1dc      	bne.n	8011282 <rmw_validate_node_name+0x1a>
 80112c8:	7823      	ldrb	r3, [r4, #0]
 80112ca:	4a0c      	ldr	r2, [pc, #48]	@ (80112fc <rmw_validate_node_name+0x94>)
 80112cc:	5cd3      	ldrb	r3, [r2, r3]
 80112ce:	f013 0304 	ands.w	r3, r3, #4
 80112d2:	d10e      	bne.n	80112f2 <rmw_validate_node_name+0x8a>
 80112d4:	28ff      	cmp	r0, #255	@ 0xff
 80112d6:	d805      	bhi.n	80112e4 <rmw_validate_node_name+0x7c>
 80112d8:	6033      	str	r3, [r6, #0]
 80112da:	e7ea      	b.n	80112b2 <rmw_validate_node_name+0x4a>
 80112dc:	200b      	movs	r0, #11
 80112de:	4770      	bx	lr
 80112e0:	200b      	movs	r0, #11
 80112e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e4:	2304      	movs	r3, #4
 80112e6:	6033      	str	r3, [r6, #0]
 80112e8:	2f00      	cmp	r7, #0
 80112ea:	d0e2      	beq.n	80112b2 <rmw_validate_node_name+0x4a>
 80112ec:	23fe      	movs	r3, #254	@ 0xfe
 80112ee:	603b      	str	r3, [r7, #0]
 80112f0:	e7df      	b.n	80112b2 <rmw_validate_node_name+0x4a>
 80112f2:	2303      	movs	r3, #3
 80112f4:	6033      	str	r3, [r6, #0]
 80112f6:	2f00      	cmp	r7, #0
 80112f8:	d1e1      	bne.n	80112be <rmw_validate_node_name+0x56>
 80112fa:	e7da      	b.n	80112b2 <rmw_validate_node_name+0x4a>
 80112fc:	08021b9a 	.word	0x08021b9a

08011300 <rmw_node_name_validation_result_string>:
 8011300:	2804      	cmp	r0, #4
 8011302:	bf9a      	itte	ls
 8011304:	4b02      	ldrls	r3, [pc, #8]	@ (8011310 <rmw_node_name_validation_result_string+0x10>)
 8011306:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801130a:	4802      	ldrhi	r0, [pc, #8]	@ (8011314 <rmw_node_name_validation_result_string+0x14>)
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop
 8011310:	08020f7c 	.word	0x08020f7c
 8011314:	08020e90 	.word	0x08020e90

08011318 <rmw_uros_set_custom_transport>:
 8011318:	b470      	push	{r4, r5, r6}
 801131a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801131e:	b162      	cbz	r2, 801133a <rmw_uros_set_custom_transport+0x22>
 8011320:	b15b      	cbz	r3, 801133a <rmw_uros_set_custom_transport+0x22>
 8011322:	b155      	cbz	r5, 801133a <rmw_uros_set_custom_transport+0x22>
 8011324:	b14e      	cbz	r6, 801133a <rmw_uros_set_custom_transport+0x22>
 8011326:	4c06      	ldr	r4, [pc, #24]	@ (8011340 <rmw_uros_set_custom_transport+0x28>)
 8011328:	7020      	strb	r0, [r4, #0]
 801132a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801132e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011332:	6166      	str	r6, [r4, #20]
 8011334:	2000      	movs	r0, #0
 8011336:	bc70      	pop	{r4, r5, r6}
 8011338:	4770      	bx	lr
 801133a:	200b      	movs	r0, #11
 801133c:	bc70      	pop	{r4, r5, r6}
 801133e:	4770      	bx	lr
 8011340:	2001ab68 	.word	0x2001ab68

08011344 <rmw_init_options_init>:
 8011344:	b084      	sub	sp, #16
 8011346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011348:	b083      	sub	sp, #12
 801134a:	ad09      	add	r5, sp, #36	@ 0x24
 801134c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011350:	b130      	cbz	r0, 8011360 <rmw_init_options_init+0x1c>
 8011352:	4604      	mov	r4, r0
 8011354:	4628      	mov	r0, r5
 8011356:	f7ff fbff 	bl	8010b58 <rcutils_allocator_is_valid>
 801135a:	b108      	cbz	r0, 8011360 <rmw_init_options_init+0x1c>
 801135c:	68a6      	ldr	r6, [r4, #8]
 801135e:	b12e      	cbz	r6, 801136c <rmw_init_options_init+0x28>
 8011360:	200b      	movs	r0, #11
 8011362:	b003      	add	sp, #12
 8011364:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011368:	b004      	add	sp, #16
 801136a:	4770      	bx	lr
 801136c:	2200      	movs	r2, #0
 801136e:	2300      	movs	r3, #0
 8011370:	e9c4 2300 	strd	r2, r3, [r4]
 8011374:	4b22      	ldr	r3, [pc, #136]	@ (8011400 <rmw_init_options_init+0xbc>)
 8011376:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8011410 <rmw_init_options_init+0xcc>
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	60a3      	str	r3, [r4, #8]
 801137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011380:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8011384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011388:	466f      	mov	r7, sp
 801138a:	682b      	ldr	r3, [r5, #0]
 801138c:	f8cc 3000 	str.w	r3, [ip]
 8011390:	4638      	mov	r0, r7
 8011392:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8011396:	60e6      	str	r6, [r4, #12]
 8011398:	f7ff fedc 	bl	8011154 <rmw_get_default_security_options>
 801139c:	e897 0003 	ldmia.w	r7, {r0, r1}
 80113a0:	f104 0310 	add.w	r3, r4, #16
 80113a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80113a8:	2203      	movs	r2, #3
 80113aa:	4816      	ldr	r0, [pc, #88]	@ (8011404 <rmw_init_options_init+0xc0>)
 80113ac:	4916      	ldr	r1, [pc, #88]	@ (8011408 <rmw_init_options_init+0xc4>)
 80113ae:	7626      	strb	r6, [r4, #24]
 80113b0:	f001 f834 	bl	801241c <rmw_uxrce_init_init_options_impl_memory>
 80113b4:	4813      	ldr	r0, [pc, #76]	@ (8011404 <rmw_init_options_init+0xc0>)
 80113b6:	f00a f9cb 	bl	801b750 <get_memory>
 80113ba:	b1f0      	cbz	r0, 80113fa <rmw_init_options_init+0xb6>
 80113bc:	4a13      	ldr	r2, [pc, #76]	@ (801140c <rmw_init_options_init+0xc8>)
 80113be:	6883      	ldr	r3, [r0, #8]
 80113c0:	6851      	ldr	r1, [r2, #4]
 80113c2:	7810      	ldrb	r0, [r2, #0]
 80113c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80113c6:	7418      	strb	r0, [r3, #16]
 80113c8:	6159      	str	r1, [r3, #20]
 80113ca:	68d1      	ldr	r1, [r2, #12]
 80113cc:	61d9      	str	r1, [r3, #28]
 80113ce:	6911      	ldr	r1, [r2, #16]
 80113d0:	6219      	str	r1, [r3, #32]
 80113d2:	6951      	ldr	r1, [r2, #20]
 80113d4:	6892      	ldr	r2, [r2, #8]
 80113d6:	619a      	str	r2, [r3, #24]
 80113d8:	6259      	str	r1, [r3, #36]	@ 0x24
 80113da:	f005 ff99 	bl	8017310 <uxr_nanos>
 80113de:	f00c faa3 	bl	801d928 <srand>
 80113e2:	f00c facf 	bl	801d984 <rand>
 80113e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80113e8:	6298      	str	r0, [r3, #40]	@ 0x28
 80113ea:	2800      	cmp	r0, #0
 80113ec:	d0f9      	beq.n	80113e2 <rmw_init_options_init+0x9e>
 80113ee:	2000      	movs	r0, #0
 80113f0:	b003      	add	sp, #12
 80113f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80113f6:	b004      	add	sp, #16
 80113f8:	4770      	bx	lr
 80113fa:	2001      	movs	r0, #1
 80113fc:	e7b1      	b.n	8011362 <rmw_init_options_init+0x1e>
 80113fe:	bf00      	nop
 8011400:	08021774 	.word	0x08021774
 8011404:	2001ad54 	.word	0x2001ad54
 8011408:	2001acd0 	.word	0x2001acd0
 801140c:	2001ab68 	.word	0x2001ab68
 8011410:	08020a04 	.word	0x08020a04

08011414 <rmw_init_options_copy>:
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	b158      	cbz	r0, 8011430 <rmw_init_options_copy+0x1c>
 8011418:	460d      	mov	r5, r1
 801141a:	b149      	cbz	r1, 8011430 <rmw_init_options_copy+0x1c>
 801141c:	4604      	mov	r4, r0
 801141e:	6880      	ldr	r0, [r0, #8]
 8011420:	b120      	cbz	r0, 801142c <rmw_init_options_copy+0x18>
 8011422:	4b14      	ldr	r3, [pc, #80]	@ (8011474 <rmw_init_options_copy+0x60>)
 8011424:	6819      	ldr	r1, [r3, #0]
 8011426:	f7ee fefb 	bl	8000220 <strcmp>
 801142a:	b9e8      	cbnz	r0, 8011468 <rmw_init_options_copy+0x54>
 801142c:	68ae      	ldr	r6, [r5, #8]
 801142e:	b116      	cbz	r6, 8011436 <rmw_init_options_copy+0x22>
 8011430:	260b      	movs	r6, #11
 8011432:	4630      	mov	r0, r6
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	2258      	movs	r2, #88	@ 0x58
 8011438:	4621      	mov	r1, r4
 801143a:	4628      	mov	r0, r5
 801143c:	f00c ffb9 	bl	801e3b2 <memcpy>
 8011440:	480d      	ldr	r0, [pc, #52]	@ (8011478 <rmw_init_options_copy+0x64>)
 8011442:	f00a f985 	bl	801b750 <get_memory>
 8011446:	b190      	cbz	r0, 801146e <rmw_init_options_copy+0x5a>
 8011448:	6883      	ldr	r3, [r0, #8]
 801144a:	656b      	str	r3, [r5, #84]	@ 0x54
 801144c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801144e:	f102 0c10 	add.w	ip, r2, #16
 8011452:	f103 0510 	add.w	r5, r3, #16
 8011456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801145c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011460:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011464:	4630      	mov	r0, r6
 8011466:	bd70      	pop	{r4, r5, r6, pc}
 8011468:	260c      	movs	r6, #12
 801146a:	4630      	mov	r0, r6
 801146c:	bd70      	pop	{r4, r5, r6, pc}
 801146e:	2601      	movs	r6, #1
 8011470:	e7df      	b.n	8011432 <rmw_init_options_copy+0x1e>
 8011472:	bf00      	nop
 8011474:	08021774 	.word	0x08021774
 8011478:	2001ad54 	.word	0x2001ad54

0801147c <rmw_init_options_fini>:
 801147c:	b368      	cbz	r0, 80114da <rmw_init_options_fini+0x5e>
 801147e:	b510      	push	{r4, lr}
 8011480:	4604      	mov	r4, r0
 8011482:	b096      	sub	sp, #88	@ 0x58
 8011484:	3040      	adds	r0, #64	@ 0x40
 8011486:	f7ff fb67 	bl	8010b58 <rcutils_allocator_is_valid>
 801148a:	b1f0      	cbz	r0, 80114ca <rmw_init_options_fini+0x4e>
 801148c:	68a0      	ldr	r0, [r4, #8]
 801148e:	b120      	cbz	r0, 801149a <rmw_init_options_fini+0x1e>
 8011490:	4b13      	ldr	r3, [pc, #76]	@ (80114e0 <rmw_init_options_fini+0x64>)
 8011492:	6819      	ldr	r1, [r3, #0]
 8011494:	f7ee fec4 	bl	8000220 <strcmp>
 8011498:	b9e8      	cbnz	r0, 80114d6 <rmw_init_options_fini+0x5a>
 801149a:	4b12      	ldr	r3, [pc, #72]	@ (80114e4 <rmw_init_options_fini+0x68>)
 801149c:	6819      	ldr	r1, [r3, #0]
 801149e:	b1b9      	cbz	r1, 80114d0 <rmw_init_options_fini+0x54>
 80114a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114a2:	e001      	b.n	80114a8 <rmw_init_options_fini+0x2c>
 80114a4:	6849      	ldr	r1, [r1, #4]
 80114a6:	b199      	cbz	r1, 80114d0 <rmw_init_options_fini+0x54>
 80114a8:	688b      	ldr	r3, [r1, #8]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d1fa      	bne.n	80114a4 <rmw_init_options_fini+0x28>
 80114ae:	480d      	ldr	r0, [pc, #52]	@ (80114e4 <rmw_init_options_fini+0x68>)
 80114b0:	f00a f95e 	bl	801b770 <put_memory>
 80114b4:	4668      	mov	r0, sp
 80114b6:	f7ff fe21 	bl	80110fc <rmw_get_zero_initialized_init_options>
 80114ba:	2258      	movs	r2, #88	@ 0x58
 80114bc:	4669      	mov	r1, sp
 80114be:	4620      	mov	r0, r4
 80114c0:	f00c ff77 	bl	801e3b2 <memcpy>
 80114c4:	2000      	movs	r0, #0
 80114c6:	b016      	add	sp, #88	@ 0x58
 80114c8:	bd10      	pop	{r4, pc}
 80114ca:	200b      	movs	r0, #11
 80114cc:	b016      	add	sp, #88	@ 0x58
 80114ce:	bd10      	pop	{r4, pc}
 80114d0:	2001      	movs	r0, #1
 80114d2:	b016      	add	sp, #88	@ 0x58
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	200c      	movs	r0, #12
 80114d8:	e7f5      	b.n	80114c6 <rmw_init_options_fini+0x4a>
 80114da:	200b      	movs	r0, #11
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	08021774 	.word	0x08021774
 80114e4:	2001ad54 	.word	0x2001ad54

080114e8 <rmw_init>:
 80114e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114ec:	b083      	sub	sp, #12
 80114ee:	2800      	cmp	r0, #0
 80114f0:	f000 80d4 	beq.w	801169c <rmw_init+0x1b4>
 80114f4:	460e      	mov	r6, r1
 80114f6:	2900      	cmp	r1, #0
 80114f8:	f000 80d0 	beq.w	801169c <rmw_init+0x1b4>
 80114fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80114fe:	4605      	mov	r5, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 80cb 	beq.w	801169c <rmw_init+0x1b4>
 8011506:	4b77      	ldr	r3, [pc, #476]	@ (80116e4 <rmw_init+0x1fc>)
 8011508:	6880      	ldr	r0, [r0, #8]
 801150a:	681f      	ldr	r7, [r3, #0]
 801150c:	b128      	cbz	r0, 801151a <rmw_init+0x32>
 801150e:	4639      	mov	r1, r7
 8011510:	f7ee fe86 	bl	8000220 <strcmp>
 8011514:	2800      	cmp	r0, #0
 8011516:	f040 80d3 	bne.w	80116c0 <rmw_init+0x1d8>
 801151a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801151e:	4c72      	ldr	r4, [pc, #456]	@ (80116e8 <rmw_init+0x200>)
 8011520:	4972      	ldr	r1, [pc, #456]	@ (80116ec <rmw_init+0x204>)
 8011522:	4873      	ldr	r0, [pc, #460]	@ (80116f0 <rmw_init+0x208>)
 8011524:	60b7      	str	r7, [r6, #8]
 8011526:	e9c6 2300 	strd	r2, r3, [r6]
 801152a:	68eb      	ldr	r3, [r5, #12]
 801152c:	66b3      	str	r3, [r6, #104]	@ 0x68
 801152e:	2201      	movs	r2, #1
 8011530:	f000 ff14 	bl	801235c <rmw_uxrce_init_session_memory>
 8011534:	4620      	mov	r0, r4
 8011536:	496f      	ldr	r1, [pc, #444]	@ (80116f4 <rmw_init+0x20c>)
 8011538:	2204      	movs	r2, #4
 801153a:	f000 ff4f 	bl	80123dc <rmw_uxrce_init_static_input_buffer_memory>
 801153e:	f04f 0800 	mov.w	r8, #0
 8011542:	486b      	ldr	r0, [pc, #428]	@ (80116f0 <rmw_init+0x208>)
 8011544:	f884 800d 	strb.w	r8, [r4, #13]
 8011548:	f00a f902 	bl	801b750 <get_memory>
 801154c:	2800      	cmp	r0, #0
 801154e:	f000 80b2 	beq.w	80116b6 <rmw_init+0x1ce>
 8011552:	6884      	ldr	r4, [r0, #8]
 8011554:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8011556:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8011558:	f890 c010 	ldrb.w	ip, [r0, #16]
 801155c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011560:	9101      	str	r1, [sp, #4]
 8011562:	6a00      	ldr	r0, [r0, #32]
 8011564:	9000      	str	r0, [sp, #0]
 8011566:	f104 0910 	add.w	r9, r4, #16
 801156a:	4661      	mov	r1, ip
 801156c:	4648      	mov	r0, r9
 801156e:	f003 fe99 	bl	80152a4 <uxr_set_custom_transport_callbacks>
 8011572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011576:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 801157a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801157e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8011582:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011586:	495c      	ldr	r1, [pc, #368]	@ (80116f8 <rmw_init+0x210>)
 8011588:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801158c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8011590:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011594:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011598:	4858      	ldr	r0, [pc, #352]	@ (80116fc <rmw_init+0x214>)
 801159a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801159e:	2201      	movs	r2, #1
 80115a0:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80115a2:	f000 febb 	bl	801231c <rmw_uxrce_init_node_memory>
 80115a6:	4956      	ldr	r1, [pc, #344]	@ (8011700 <rmw_init+0x218>)
 80115a8:	4856      	ldr	r0, [pc, #344]	@ (8011704 <rmw_init+0x21c>)
 80115aa:	2205      	movs	r2, #5
 80115ac:	f000 fe96 	bl	80122dc <rmw_uxrce_init_subscription_memory>
 80115b0:	4955      	ldr	r1, [pc, #340]	@ (8011708 <rmw_init+0x220>)
 80115b2:	4856      	ldr	r0, [pc, #344]	@ (801170c <rmw_init+0x224>)
 80115b4:	220a      	movs	r2, #10
 80115b6:	f000 fe71 	bl	801229c <rmw_uxrce_init_publisher_memory>
 80115ba:	4955      	ldr	r1, [pc, #340]	@ (8011710 <rmw_init+0x228>)
 80115bc:	4855      	ldr	r0, [pc, #340]	@ (8011714 <rmw_init+0x22c>)
 80115be:	2201      	movs	r2, #1
 80115c0:	f000 fe2c 	bl	801221c <rmw_uxrce_init_service_memory>
 80115c4:	4954      	ldr	r1, [pc, #336]	@ (8011718 <rmw_init+0x230>)
 80115c6:	4855      	ldr	r0, [pc, #340]	@ (801171c <rmw_init+0x234>)
 80115c8:	2201      	movs	r2, #1
 80115ca:	f000 fe47 	bl	801225c <rmw_uxrce_init_client_memory>
 80115ce:	4954      	ldr	r1, [pc, #336]	@ (8011720 <rmw_init+0x238>)
 80115d0:	4854      	ldr	r0, [pc, #336]	@ (8011724 <rmw_init+0x23c>)
 80115d2:	220f      	movs	r2, #15
 80115d4:	f000 fee2 	bl	801239c <rmw_uxrce_init_topic_memory>
 80115d8:	4953      	ldr	r1, [pc, #332]	@ (8011728 <rmw_init+0x240>)
 80115da:	4854      	ldr	r0, [pc, #336]	@ (801172c <rmw_init+0x244>)
 80115dc:	2203      	movs	r2, #3
 80115de:	f000 ff1d 	bl	801241c <rmw_uxrce_init_init_options_impl_memory>
 80115e2:	4953      	ldr	r1, [pc, #332]	@ (8011730 <rmw_init+0x248>)
 80115e4:	4853      	ldr	r0, [pc, #332]	@ (8011734 <rmw_init+0x24c>)
 80115e6:	2204      	movs	r2, #4
 80115e8:	f000 ff38 	bl	801245c <rmw_uxrce_init_wait_set_memory>
 80115ec:	4952      	ldr	r1, [pc, #328]	@ (8011738 <rmw_init+0x250>)
 80115ee:	4853      	ldr	r0, [pc, #332]	@ (801173c <rmw_init+0x254>)
 80115f0:	2204      	movs	r2, #4
 80115f2:	f000 ff53 	bl	801249c <rmw_uxrce_init_guard_condition_memory>
 80115f6:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80115f8:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 80115fa:	4642      	mov	r2, r8
 80115fc:	f000 fdd6 	bl	80121ac <rmw_uxrce_transport_init>
 8011600:	4607      	mov	r7, r0
 8011602:	2800      	cmp	r0, #0
 8011604:	d161      	bne.n	80116ca <rmw_init+0x1e2>
 8011606:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8011608:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801160c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801160e:	4628      	mov	r0, r5
 8011610:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8011614:	f004 f880 	bl	8015718 <uxr_init_session>
 8011618:	4628      	mov	r0, r5
 801161a:	4949      	ldr	r1, [pc, #292]	@ (8011740 <rmw_init+0x258>)
 801161c:	4622      	mov	r2, r4
 801161e:	f004 f89f 	bl	8015760 <uxr_set_topic_callback>
 8011622:	4628      	mov	r0, r5
 8011624:	4947      	ldr	r1, [pc, #284]	@ (8011744 <rmw_init+0x25c>)
 8011626:	463a      	mov	r2, r7
 8011628:	f004 f896 	bl	8015758 <uxr_set_status_callback>
 801162c:	4628      	mov	r0, r5
 801162e:	4946      	ldr	r1, [pc, #280]	@ (8011748 <rmw_init+0x260>)
 8011630:	463a      	mov	r2, r7
 8011632:	f004 f899 	bl	8015768 <uxr_set_request_callback>
 8011636:	4628      	mov	r0, r5
 8011638:	4944      	ldr	r1, [pc, #272]	@ (801174c <rmw_init+0x264>)
 801163a:	463a      	mov	r2, r7
 801163c:	f004 f898 	bl	8015770 <uxr_set_reply_callback>
 8011640:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011644:	2304      	movs	r3, #4
 8011646:	0092      	lsls	r2, r2, #2
 8011648:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801164c:	4628      	mov	r0, r5
 801164e:	f004 f8bd 	bl	80157cc <uxr_create_input_reliable_stream>
 8011652:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011656:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801165a:	2304      	movs	r3, #4
 801165c:	0092      	lsls	r2, r2, #2
 801165e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8011662:	4628      	mov	r0, r5
 8011664:	f004 f89a 	bl	801579c <uxr_create_output_reliable_stream>
 8011668:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801166c:	4628      	mov	r0, r5
 801166e:	f004 f8a7 	bl	80157c0 <uxr_create_input_best_effort_stream>
 8011672:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8011676:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801167a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801167e:	3114      	adds	r1, #20
 8011680:	4628      	mov	r0, r5
 8011682:	f004 f879 	bl	8015778 <uxr_create_output_best_effort_stream>
 8011686:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801168a:	4628      	mov	r0, r5
 801168c:	f004 fe10 	bl	80162b0 <uxr_create_session>
 8011690:	4605      	mov	r5, r0
 8011692:	b140      	cbz	r0, 80116a6 <rmw_init+0x1be>
 8011694:	4638      	mov	r0, r7
 8011696:	b003      	add	sp, #12
 8011698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801169c:	270b      	movs	r7, #11
 801169e:	4638      	mov	r0, r7
 80116a0:	b003      	add	sp, #12
 80116a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116a6:	4648      	mov	r0, r9
 80116a8:	f003 fe3e 	bl	8015328 <uxr_close_custom_transport>
 80116ac:	4810      	ldr	r0, [pc, #64]	@ (80116f0 <rmw_init+0x208>)
 80116ae:	4621      	mov	r1, r4
 80116b0:	f00a f85e 	bl	801b770 <put_memory>
 80116b4:	66f5      	str	r5, [r6, #108]	@ 0x6c
 80116b6:	2701      	movs	r7, #1
 80116b8:	4638      	mov	r0, r7
 80116ba:	b003      	add	sp, #12
 80116bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116c0:	270c      	movs	r7, #12
 80116c2:	4638      	mov	r0, r7
 80116c4:	b003      	add	sp, #12
 80116c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116ca:	4648      	mov	r0, r9
 80116cc:	f003 fe2c 	bl	8015328 <uxr_close_custom_transport>
 80116d0:	4807      	ldr	r0, [pc, #28]	@ (80116f0 <rmw_init+0x208>)
 80116d2:	4621      	mov	r1, r4
 80116d4:	f00a f84c 	bl	801b770 <put_memory>
 80116d8:	4638      	mov	r0, r7
 80116da:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80116de:	b003      	add	sp, #12
 80116e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116e4:	08021774 	.word	0x08021774
 80116e8:	2001ce68 	.word	0x2001ce68
 80116ec:	2001df60 	.word	0x2001df60
 80116f0:	2001f508 	.word	0x2001f508
 80116f4:	2001ad68 	.word	0x2001ad68
 80116f8:	2001dea8 	.word	0x2001dea8
 80116fc:	2001df4c 	.word	0x2001df4c
 8011700:	2001d1e0 	.word	0x2001d1e0
 8011704:	2001d618 	.word	0x2001d618
 8011708:	2001d628 	.word	0x2001d628
 801170c:	2001de98 	.word	0x2001de98
 8011710:	2001d108 	.word	0x2001d108
 8011714:	2001d1d0 	.word	0x2001d1d0
 8011718:	2001d030 	.word	0x2001d030
 801171c:	2001d0f8 	.word	0x2001d0f8
 8011720:	2001ce78 	.word	0x2001ce78
 8011724:	2001d01c 	.word	0x2001d01c
 8011728:	2001acd0 	.word	0x2001acd0
 801172c:	2001ad54 	.word	0x2001ad54
 8011730:	2001ac50 	.word	0x2001ac50
 8011734:	2001acc0 	.word	0x2001acc0
 8011738:	2001abc0 	.word	0x2001abc0
 801173c:	2001ac40 	.word	0x2001ac40
 8011740:	0801b589 	.word	0x0801b589
 8011744:	0801b581 	.word	0x0801b581
 8011748:	0801b621 	.word	0x0801b621
 801174c:	0801b6bd 	.word	0x0801b6bd

08011750 <rmw_shutdown>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	b09c      	sub	sp, #112	@ 0x70
 8011754:	2800      	cmp	r0, #0
 8011756:	d051      	beq.n	80117fc <rmw_shutdown+0xac>
 8011758:	4605      	mov	r5, r0
 801175a:	6880      	ldr	r0, [r0, #8]
 801175c:	b128      	cbz	r0, 801176a <rmw_shutdown+0x1a>
 801175e:	4b2b      	ldr	r3, [pc, #172]	@ (801180c <rmw_shutdown+0xbc>)
 8011760:	6819      	ldr	r1, [r3, #0]
 8011762:	f7ee fd5d 	bl	8000220 <strcmp>
 8011766:	2800      	cmp	r0, #0
 8011768:	d144      	bne.n	80117f4 <rmw_shutdown+0xa4>
 801176a:	4b29      	ldr	r3, [pc, #164]	@ (8011810 <rmw_shutdown+0xc0>)
 801176c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801176e:	681c      	ldr	r4, [r3, #0]
 8011770:	2c00      	cmp	r4, #0
 8011772:	d047      	beq.n	8011804 <rmw_shutdown+0xb4>
 8011774:	2600      	movs	r6, #0
 8011776:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801177a:	691a      	ldr	r2, [r3, #16]
 801177c:	4282      	cmp	r2, r0
 801177e:	d024      	beq.n	80117ca <rmw_shutdown+0x7a>
 8011780:	2c00      	cmp	r4, #0
 8011782:	d1f8      	bne.n	8011776 <rmw_shutdown+0x26>
 8011784:	b188      	cbz	r0, 80117aa <rmw_shutdown+0x5a>
 8011786:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801178a:	789b      	ldrb	r3, [r3, #2]
 801178c:	2b01      	cmp	r3, #1
 801178e:	bf14      	ite	ne
 8011790:	210a      	movne	r1, #10
 8011792:	2100      	moveq	r1, #0
 8011794:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011798:	f004 fd62 	bl	8016260 <uxr_delete_session_retries>
 801179c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801179e:	f000 fe9d 	bl	80124dc <rmw_uxrce_fini_session_memory>
 80117a2:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80117a4:	3010      	adds	r0, #16
 80117a6:	f003 fdbf 	bl	8015328 <uxr_close_custom_transport>
 80117aa:	2300      	movs	r3, #0
 80117ac:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80117ae:	b1be      	cbz	r6, 80117e0 <rmw_shutdown+0x90>
 80117b0:	4d18      	ldr	r5, [pc, #96]	@ (8011814 <rmw_shutdown+0xc4>)
 80117b2:	682c      	ldr	r4, [r5, #0]
 80117b4:	b134      	cbz	r4, 80117c4 <rmw_shutdown+0x74>
 80117b6:	4621      	mov	r1, r4
 80117b8:	6864      	ldr	r4, [r4, #4]
 80117ba:	4628      	mov	r0, r5
 80117bc:	f009 ffd8 	bl	801b770 <put_memory>
 80117c0:	2c00      	cmp	r4, #0
 80117c2:	d1f8      	bne.n	80117b6 <rmw_shutdown+0x66>
 80117c4:	4630      	mov	r0, r6
 80117c6:	b01c      	add	sp, #112	@ 0x70
 80117c8:	bd70      	pop	{r4, r5, r6, pc}
 80117ca:	f103 0018 	add.w	r0, r3, #24
 80117ce:	f000 f8e7 	bl	80119a0 <rmw_destroy_node>
 80117d2:	4606      	mov	r6, r0
 80117d4:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80117d6:	2c00      	cmp	r4, #0
 80117d8:	d1cd      	bne.n	8011776 <rmw_shutdown+0x26>
 80117da:	2800      	cmp	r0, #0
 80117dc:	d1d3      	bne.n	8011786 <rmw_shutdown+0x36>
 80117de:	e7e4      	b.n	80117aa <rmw_shutdown+0x5a>
 80117e0:	4668      	mov	r0, sp
 80117e2:	f009 fdb7 	bl	801b354 <rmw_get_zero_initialized_context>
 80117e6:	2270      	movs	r2, #112	@ 0x70
 80117e8:	4669      	mov	r1, sp
 80117ea:	4628      	mov	r0, r5
 80117ec:	f00c fde1 	bl	801e3b2 <memcpy>
 80117f0:	2600      	movs	r6, #0
 80117f2:	e7dd      	b.n	80117b0 <rmw_shutdown+0x60>
 80117f4:	260c      	movs	r6, #12
 80117f6:	4630      	mov	r0, r6
 80117f8:	b01c      	add	sp, #112	@ 0x70
 80117fa:	bd70      	pop	{r4, r5, r6, pc}
 80117fc:	260b      	movs	r6, #11
 80117fe:	4630      	mov	r0, r6
 8011800:	b01c      	add	sp, #112	@ 0x70
 8011802:	bd70      	pop	{r4, r5, r6, pc}
 8011804:	2800      	cmp	r0, #0
 8011806:	d0eb      	beq.n	80117e0 <rmw_shutdown+0x90>
 8011808:	4626      	mov	r6, r4
 801180a:	e7bc      	b.n	8011786 <rmw_shutdown+0x36>
 801180c:	08021774 	.word	0x08021774
 8011810:	2001df4c 	.word	0x2001df4c
 8011814:	2001ce68 	.word	0x2001ce68

08011818 <rmw_context_fini>:
 8011818:	4b17      	ldr	r3, [pc, #92]	@ (8011878 <rmw_context_fini+0x60>)
 801181a:	b570      	push	{r4, r5, r6, lr}
 801181c:	681c      	ldr	r4, [r3, #0]
 801181e:	4605      	mov	r5, r0
 8011820:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8011822:	b33c      	cbz	r4, 8011874 <rmw_context_fini+0x5c>
 8011824:	2600      	movs	r6, #0
 8011826:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801182a:	691a      	ldr	r2, [r3, #16]
 801182c:	4282      	cmp	r2, r0
 801182e:	d018      	beq.n	8011862 <rmw_context_fini+0x4a>
 8011830:	2c00      	cmp	r4, #0
 8011832:	d1f8      	bne.n	8011826 <rmw_context_fini+0xe>
 8011834:	b188      	cbz	r0, 801185a <rmw_context_fini+0x42>
 8011836:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801183a:	789b      	ldrb	r3, [r3, #2]
 801183c:	2b01      	cmp	r3, #1
 801183e:	bf14      	ite	ne
 8011840:	210a      	movne	r1, #10
 8011842:	2100      	moveq	r1, #0
 8011844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011848:	f004 fd0a 	bl	8016260 <uxr_delete_session_retries>
 801184c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801184e:	f000 fe45 	bl	80124dc <rmw_uxrce_fini_session_memory>
 8011852:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011854:	3010      	adds	r0, #16
 8011856:	f003 fd67 	bl	8015328 <uxr_close_custom_transport>
 801185a:	2300      	movs	r3, #0
 801185c:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801185e:	4630      	mov	r0, r6
 8011860:	bd70      	pop	{r4, r5, r6, pc}
 8011862:	f103 0018 	add.w	r0, r3, #24
 8011866:	f000 f89b 	bl	80119a0 <rmw_destroy_node>
 801186a:	4606      	mov	r6, r0
 801186c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801186e:	2c00      	cmp	r4, #0
 8011870:	d1d9      	bne.n	8011826 <rmw_context_fini+0xe>
 8011872:	e7df      	b.n	8011834 <rmw_context_fini+0x1c>
 8011874:	4626      	mov	r6, r4
 8011876:	e7dd      	b.n	8011834 <rmw_context_fini+0x1c>
 8011878:	2001df4c 	.word	0x2001df4c

0801187c <create_node>:
 801187c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011880:	b083      	sub	sp, #12
 8011882:	2b00      	cmp	r3, #0
 8011884:	d063      	beq.n	801194e <create_node+0xd2>
 8011886:	4606      	mov	r6, r0
 8011888:	4836      	ldr	r0, [pc, #216]	@ (8011964 <create_node+0xe8>)
 801188a:	460f      	mov	r7, r1
 801188c:	4690      	mov	r8, r2
 801188e:	461d      	mov	r5, r3
 8011890:	f009 ff5e 	bl	801b750 <get_memory>
 8011894:	2800      	cmp	r0, #0
 8011896:	d05a      	beq.n	801194e <create_node+0xd2>
 8011898:	6884      	ldr	r4, [r0, #8]
 801189a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 801189c:	6123      	str	r3, [r4, #16]
 801189e:	f009 ffdd 	bl	801b85c <rmw_get_implementation_identifier>
 80118a2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80118a6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80118aa:	f8c4 9020 	str.w	r9, [r4, #32]
 80118ae:	4630      	mov	r0, r6
 80118b0:	f7ee fd16 	bl	80002e0 <strlen>
 80118b4:	1c42      	adds	r2, r0, #1
 80118b6:	2a3c      	cmp	r2, #60	@ 0x3c
 80118b8:	f104 0518 	add.w	r5, r4, #24
 80118bc:	d844      	bhi.n	8011948 <create_node+0xcc>
 80118be:	4648      	mov	r0, r9
 80118c0:	4631      	mov	r1, r6
 80118c2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80118c6:	f00c fd74 	bl	801e3b2 <memcpy>
 80118ca:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80118ce:	4638      	mov	r0, r7
 80118d0:	f7ee fd06 	bl	80002e0 <strlen>
 80118d4:	1c42      	adds	r2, r0, #1
 80118d6:	2a3c      	cmp	r2, #60	@ 0x3c
 80118d8:	d836      	bhi.n	8011948 <create_node+0xcc>
 80118da:	4639      	mov	r1, r7
 80118dc:	4648      	mov	r0, r9
 80118de:	f00c fd68 	bl	801e3b2 <memcpy>
 80118e2:	6923      	ldr	r3, [r4, #16]
 80118e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80118e8:	2101      	movs	r1, #1
 80118ea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80118ee:	1842      	adds	r2, r0, r1
 80118f0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80118f4:	f003 fd1c 	bl	8015330 <uxr_object_id>
 80118f8:	6160      	str	r0, [r4, #20]
 80118fa:	783b      	ldrb	r3, [r7, #0]
 80118fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80118fe:	d128      	bne.n	8011952 <create_node+0xd6>
 8011900:	787b      	ldrb	r3, [r7, #1]
 8011902:	bb33      	cbnz	r3, 8011952 <create_node+0xd6>
 8011904:	4a18      	ldr	r2, [pc, #96]	@ (8011968 <create_node+0xec>)
 8011906:	4819      	ldr	r0, [pc, #100]	@ (801196c <create_node+0xf0>)
 8011908:	4633      	mov	r3, r6
 801190a:	213c      	movs	r1, #60	@ 0x3c
 801190c:	f00c fab2 	bl	801de74 <sniprintf>
 8011910:	6920      	ldr	r0, [r4, #16]
 8011912:	4916      	ldr	r1, [pc, #88]	@ (801196c <create_node+0xf0>)
 8011914:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011918:	9100      	str	r1, [sp, #0]
 801191a:	2106      	movs	r1, #6
 801191c:	9101      	str	r1, [sp, #4]
 801191e:	6811      	ldr	r1, [r2, #0]
 8011920:	6962      	ldr	r2, [r4, #20]
 8011922:	fa1f f388 	uxth.w	r3, r8
 8011926:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801192a:	f003 fab1 	bl	8014e90 <uxr_buffer_create_participant_bin>
 801192e:	4602      	mov	r2, r0
 8011930:	6920      	ldr	r0, [r4, #16]
 8011932:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011936:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801193a:	f000 ff4f 	bl	80127dc <run_xrce_session>
 801193e:	b118      	cbz	r0, 8011948 <create_node+0xcc>
 8011940:	4628      	mov	r0, r5
 8011942:	b003      	add	sp, #12
 8011944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011948:	4628      	mov	r0, r5
 801194a:	f000 fdcd 	bl	80124e8 <rmw_uxrce_fini_node_memory>
 801194e:	2500      	movs	r5, #0
 8011950:	e7f6      	b.n	8011940 <create_node+0xc4>
 8011952:	4a07      	ldr	r2, [pc, #28]	@ (8011970 <create_node+0xf4>)
 8011954:	9600      	str	r6, [sp, #0]
 8011956:	463b      	mov	r3, r7
 8011958:	213c      	movs	r1, #60	@ 0x3c
 801195a:	4804      	ldr	r0, [pc, #16]	@ (801196c <create_node+0xf0>)
 801195c:	f00c fa8a 	bl	801de74 <sniprintf>
 8011960:	e7d6      	b.n	8011910 <create_node+0x94>
 8011962:	bf00      	nop
 8011964:	2001df4c 	.word	0x2001df4c
 8011968:	08020fa0 	.word	0x08020fa0
 801196c:	2001ab84 	.word	0x2001ab84
 8011970:	08020a14 	.word	0x08020a14

08011974 <rmw_create_node>:
 8011974:	b191      	cbz	r1, 801199c <rmw_create_node+0x28>
 8011976:	b410      	push	{r4}
 8011978:	4614      	mov	r4, r2
 801197a:	780a      	ldrb	r2, [r1, #0]
 801197c:	4603      	mov	r3, r0
 801197e:	4608      	mov	r0, r1
 8011980:	b142      	cbz	r2, 8011994 <rmw_create_node+0x20>
 8011982:	b13c      	cbz	r4, 8011994 <rmw_create_node+0x20>
 8011984:	7822      	ldrb	r2, [r4, #0]
 8011986:	b12a      	cbz	r2, 8011994 <rmw_create_node+0x20>
 8011988:	4621      	mov	r1, r4
 801198a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801198c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011990:	f7ff bf74 	b.w	801187c <create_node>
 8011994:	2000      	movs	r0, #0
 8011996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801199a:	4770      	bx	lr
 801199c:	2000      	movs	r0, #0
 801199e:	4770      	bx	lr

080119a0 <rmw_destroy_node>:
 80119a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a2:	b328      	cbz	r0, 80119f0 <rmw_destroy_node+0x50>
 80119a4:	4607      	mov	r7, r0
 80119a6:	6800      	ldr	r0, [r0, #0]
 80119a8:	b120      	cbz	r0, 80119b4 <rmw_destroy_node+0x14>
 80119aa:	4b36      	ldr	r3, [pc, #216]	@ (8011a84 <rmw_destroy_node+0xe4>)
 80119ac:	6819      	ldr	r1, [r3, #0]
 80119ae:	f7ee fc37 	bl	8000220 <strcmp>
 80119b2:	b9e8      	cbnz	r0, 80119f0 <rmw_destroy_node+0x50>
 80119b4:	687d      	ldr	r5, [r7, #4]
 80119b6:	b1dd      	cbz	r5, 80119f0 <rmw_destroy_node+0x50>
 80119b8:	4b33      	ldr	r3, [pc, #204]	@ (8011a88 <rmw_destroy_node+0xe8>)
 80119ba:	681c      	ldr	r4, [r3, #0]
 80119bc:	2c00      	cmp	r4, #0
 80119be:	d05f      	beq.n	8011a80 <rmw_destroy_node+0xe0>
 80119c0:	2600      	movs	r6, #0
 80119c2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80119c6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80119ca:	429d      	cmp	r5, r3
 80119cc:	d013      	beq.n	80119f6 <rmw_destroy_node+0x56>
 80119ce:	2c00      	cmp	r4, #0
 80119d0:	d1f7      	bne.n	80119c2 <rmw_destroy_node+0x22>
 80119d2:	4b2e      	ldr	r3, [pc, #184]	@ (8011a8c <rmw_destroy_node+0xec>)
 80119d4:	681c      	ldr	r4, [r3, #0]
 80119d6:	b1c4      	cbz	r4, 8011a0a <rmw_destroy_node+0x6a>
 80119d8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80119dc:	6a0b      	ldr	r3, [r1, #32]
 80119de:	429d      	cmp	r5, r3
 80119e0:	d1f9      	bne.n	80119d6 <rmw_destroy_node+0x36>
 80119e2:	317c      	adds	r1, #124	@ 0x7c
 80119e4:	4638      	mov	r0, r7
 80119e6:	f000 fb2f 	bl	8012048 <rmw_destroy_subscription>
 80119ea:	2801      	cmp	r0, #1
 80119ec:	4606      	mov	r6, r0
 80119ee:	d1f2      	bne.n	80119d6 <rmw_destroy_node+0x36>
 80119f0:	2601      	movs	r6, #1
 80119f2:	4630      	mov	r0, r6
 80119f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119f6:	3184      	adds	r1, #132	@ 0x84
 80119f8:	4638      	mov	r0, r7
 80119fa:	f000 f9a1 	bl	8011d40 <rmw_destroy_publisher>
 80119fe:	2801      	cmp	r0, #1
 8011a00:	4606      	mov	r6, r0
 8011a02:	d0f5      	beq.n	80119f0 <rmw_destroy_node+0x50>
 8011a04:	2c00      	cmp	r4, #0
 8011a06:	d1dc      	bne.n	80119c2 <rmw_destroy_node+0x22>
 8011a08:	e7e3      	b.n	80119d2 <rmw_destroy_node+0x32>
 8011a0a:	4b21      	ldr	r3, [pc, #132]	@ (8011a90 <rmw_destroy_node+0xf0>)
 8011a0c:	681c      	ldr	r4, [r3, #0]
 8011a0e:	b16c      	cbz	r4, 8011a2c <rmw_destroy_node+0x8c>
 8011a10:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011a14:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011a16:	429d      	cmp	r5, r3
 8011a18:	d1f9      	bne.n	8011a0e <rmw_destroy_node+0x6e>
 8011a1a:	317c      	adds	r1, #124	@ 0x7c
 8011a1c:	4638      	mov	r0, r7
 8011a1e:	f000 f9e1 	bl	8011de4 <rmw_destroy_service>
 8011a22:	2801      	cmp	r0, #1
 8011a24:	4606      	mov	r6, r0
 8011a26:	d0e3      	beq.n	80119f0 <rmw_destroy_node+0x50>
 8011a28:	2c00      	cmp	r4, #0
 8011a2a:	d1f1      	bne.n	8011a10 <rmw_destroy_node+0x70>
 8011a2c:	4b19      	ldr	r3, [pc, #100]	@ (8011a94 <rmw_destroy_node+0xf4>)
 8011a2e:	681c      	ldr	r4, [r3, #0]
 8011a30:	b16c      	cbz	r4, 8011a4e <rmw_destroy_node+0xae>
 8011a32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011a36:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011a38:	429d      	cmp	r5, r3
 8011a3a:	d1f9      	bne.n	8011a30 <rmw_destroy_node+0x90>
 8011a3c:	317c      	adds	r1, #124	@ 0x7c
 8011a3e:	4638      	mov	r0, r7
 8011a40:	f009 feaa 	bl	801b798 <rmw_destroy_client>
 8011a44:	2801      	cmp	r0, #1
 8011a46:	4606      	mov	r6, r0
 8011a48:	d0d2      	beq.n	80119f0 <rmw_destroy_node+0x50>
 8011a4a:	2c00      	cmp	r4, #0
 8011a4c:	d1f1      	bne.n	8011a32 <rmw_destroy_node+0x92>
 8011a4e:	6928      	ldr	r0, [r5, #16]
 8011a50:	696a      	ldr	r2, [r5, #20]
 8011a52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011a56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011a5a:	6819      	ldr	r1, [r3, #0]
 8011a5c:	f003 f9ce 	bl	8014dfc <uxr_buffer_delete_entity>
 8011a60:	4602      	mov	r2, r0
 8011a62:	6928      	ldr	r0, [r5, #16]
 8011a64:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011a68:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011a6c:	f000 feb6 	bl	80127dc <run_xrce_session>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	bf08      	it	eq
 8011a74:	2602      	moveq	r6, #2
 8011a76:	4638      	mov	r0, r7
 8011a78:	f000 fd36 	bl	80124e8 <rmw_uxrce_fini_node_memory>
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a80:	4626      	mov	r6, r4
 8011a82:	e7a6      	b.n	80119d2 <rmw_destroy_node+0x32>
 8011a84:	08021774 	.word	0x08021774
 8011a88:	2001de98 	.word	0x2001de98
 8011a8c:	2001d618 	.word	0x2001d618
 8011a90:	2001d1d0 	.word	0x2001d1d0
 8011a94:	2001d0f8 	.word	0x2001d0f8

08011a98 <rmw_node_get_graph_guard_condition>:
 8011a98:	6843      	ldr	r3, [r0, #4]
 8011a9a:	6918      	ldr	r0, [r3, #16]
 8011a9c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop

08011aa4 <flush_session>:
 8011aa4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8011aa6:	f004 ba3f 	b.w	8015f28 <uxr_run_session_until_confirm_delivery>
 8011aaa:	bf00      	nop

08011aac <rmw_publish>:
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d053      	beq.n	8011b58 <rmw_publish+0xac>
 8011ab0:	b570      	push	{r4, r5, r6, lr}
 8011ab2:	460d      	mov	r5, r1
 8011ab4:	b08e      	sub	sp, #56	@ 0x38
 8011ab6:	2900      	cmp	r1, #0
 8011ab8:	d04b      	beq.n	8011b52 <rmw_publish+0xa6>
 8011aba:	4604      	mov	r4, r0
 8011abc:	6800      	ldr	r0, [r0, #0]
 8011abe:	f000 ff13 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	d045      	beq.n	8011b52 <rmw_publish+0xa6>
 8011ac6:	6866      	ldr	r6, [r4, #4]
 8011ac8:	2e00      	cmp	r6, #0
 8011aca:	d042      	beq.n	8011b52 <rmw_publish+0xa6>
 8011acc:	69b4      	ldr	r4, [r6, #24]
 8011ace:	4628      	mov	r0, r5
 8011ad0:	6923      	ldr	r3, [r4, #16]
 8011ad2:	4798      	blx	r3
 8011ad4:	69f3      	ldr	r3, [r6, #28]
 8011ad6:	9005      	str	r0, [sp, #20]
 8011ad8:	b113      	cbz	r3, 8011ae0 <rmw_publish+0x34>
 8011ada:	a805      	add	r0, sp, #20
 8011adc:	4798      	blx	r3
 8011ade:	9805      	ldr	r0, [sp, #20]
 8011ae0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	9000      	str	r0, [sp, #0]
 8011ae8:	6972      	ldr	r2, [r6, #20]
 8011aea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011aec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011af0:	ab06      	add	r3, sp, #24
 8011af2:	f005 fcaf 	bl	8017454 <uxr_prepare_output_stream>
 8011af6:	b1d8      	cbz	r0, 8011b30 <rmw_publish+0x84>
 8011af8:	68a3      	ldr	r3, [r4, #8]
 8011afa:	a906      	add	r1, sp, #24
 8011afc:	4628      	mov	r0, r5
 8011afe:	4798      	blx	r3
 8011b00:	6a33      	ldr	r3, [r6, #32]
 8011b02:	4604      	mov	r4, r0
 8011b04:	b10b      	cbz	r3, 8011b0a <rmw_publish+0x5e>
 8011b06:	a806      	add	r0, sp, #24
 8011b08:	4798      	blx	r3
 8011b0a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8011b0e:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8011b12:	2b01      	cmp	r3, #1
 8011b14:	6910      	ldr	r0, [r2, #16]
 8011b16:	d021      	beq.n	8011b5c <rmw_publish+0xb0>
 8011b18:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8011b1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011b1e:	f004 fa03 	bl	8015f28 <uxr_run_session_until_confirm_delivery>
 8011b22:	4004      	ands	r4, r0
 8011b24:	b2e4      	uxtb	r4, r4
 8011b26:	f084 0001 	eor.w	r0, r4, #1
 8011b2a:	b2c0      	uxtb	r0, r0
 8011b2c:	b00e      	add	sp, #56	@ 0x38
 8011b2e:	bd70      	pop	{r4, r5, r6, pc}
 8011b30:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011b34:	6918      	ldr	r0, [r3, #16]
 8011b36:	4b0c      	ldr	r3, [pc, #48]	@ (8011b68 <rmw_publish+0xbc>)
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	9b05      	ldr	r3, [sp, #20]
 8011b3c:	9300      	str	r3, [sp, #0]
 8011b3e:	9602      	str	r6, [sp, #8]
 8011b40:	6972      	ldr	r2, [r6, #20]
 8011b42:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011b44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011b48:	ab06      	add	r3, sp, #24
 8011b4a:	f005 fcb3 	bl	80174b4 <uxr_prepare_output_stream_fragmented>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d1d2      	bne.n	8011af8 <rmw_publish+0x4c>
 8011b52:	2001      	movs	r0, #1
 8011b54:	b00e      	add	sp, #56	@ 0x38
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	2001      	movs	r0, #1
 8011b5a:	4770      	bx	lr
 8011b5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011b60:	f003 fe4a 	bl	80157f8 <uxr_flash_output_streams>
 8011b64:	e7df      	b.n	8011b26 <rmw_publish+0x7a>
 8011b66:	bf00      	nop
 8011b68:	08011aa5 	.word	0x08011aa5

08011b6c <rmw_create_publisher>:
 8011b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b70:	b087      	sub	sp, #28
 8011b72:	2800      	cmp	r0, #0
 8011b74:	f000 80c9 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011b78:	460f      	mov	r7, r1
 8011b7a:	2900      	cmp	r1, #0
 8011b7c:	f000 80c5 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011b80:	4604      	mov	r4, r0
 8011b82:	6800      	ldr	r0, [r0, #0]
 8011b84:	4615      	mov	r5, r2
 8011b86:	461e      	mov	r6, r3
 8011b88:	f000 feae 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	f000 80bc 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011b92:	2d00      	cmp	r5, #0
 8011b94:	f000 80b9 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011b98:	782b      	ldrb	r3, [r5, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f000 80b5 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011ba0:	2e00      	cmp	r6, #0
 8011ba2:	f000 80b2 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011ba6:	485c      	ldr	r0, [pc, #368]	@ (8011d18 <rmw_create_publisher+0x1ac>)
 8011ba8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011bac:	f009 fdd0 	bl	801b750 <get_memory>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	f000 80aa 	beq.w	8011d0a <rmw_create_publisher+0x19e>
 8011bb6:	6884      	ldr	r4, [r0, #8]
 8011bb8:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8011bbc:	f009 fe4e 	bl	801b85c <rmw_get_implementation_identifier>
 8011bc0:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8011bc4:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011bc8:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8011bcc:	4628      	mov	r0, r5
 8011bce:	f7ee fb87 	bl	80002e0 <strlen>
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	283c      	cmp	r0, #60	@ 0x3c
 8011bd6:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8011bda:	f200 808f 	bhi.w	8011cfc <rmw_create_publisher+0x190>
 8011bde:	4a4f      	ldr	r2, [pc, #316]	@ (8011d1c <rmw_create_publisher+0x1b0>)
 8011be0:	462b      	mov	r3, r5
 8011be2:	213c      	movs	r1, #60	@ 0x3c
 8011be4:	4650      	mov	r0, sl
 8011be6:	f00c f945 	bl	801de74 <sniprintf>
 8011bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011bee:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8011bf0:	4631      	mov	r1, r6
 8011bf2:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8011bf6:	2250      	movs	r2, #80	@ 0x50
 8011bf8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011bfc:	f00c fbd9 	bl	801e3b2 <memcpy>
 8011c00:	7a33      	ldrb	r3, [r6, #8]
 8011c02:	4947      	ldr	r1, [pc, #284]	@ (8011d20 <rmw_create_publisher+0x1b4>)
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c0a:	bf0c      	ite	eq
 8011c0c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8011c10:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8011c14:	67a3      	str	r3, [r4, #120]	@ 0x78
 8011c16:	2300      	movs	r3, #0
 8011c18:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	f000 fe71 	bl	8012904 <get_message_typesupport_handle>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d06a      	beq.n	8011cfc <rmw_create_publisher+0x190>
 8011c26:	6842      	ldr	r2, [r0, #4]
 8011c28:	61a2      	str	r2, [r4, #24]
 8011c2a:	2a00      	cmp	r2, #0
 8011c2c:	d066      	beq.n	8011cfc <rmw_create_publisher+0x190>
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4633      	mov	r3, r6
 8011c32:	4648      	mov	r0, r9
 8011c34:	f009 fe40 	bl	801b8b8 <create_topic>
 8011c38:	6260      	str	r0, [r4, #36]	@ 0x24
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	d062      	beq.n	8011d04 <rmw_create_publisher+0x198>
 8011c3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c46:	2103      	movs	r1, #3
 8011c48:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011c4c:	1c42      	adds	r2, r0, #1
 8011c4e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8011c52:	f003 fb6d 	bl	8015330 <uxr_object_id>
 8011c56:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011c5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c5e:	6120      	str	r0, [r4, #16]
 8011c60:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8011c64:	6910      	ldr	r0, [r2, #16]
 8011c66:	2506      	movs	r5, #6
 8011c68:	9500      	str	r5, [sp, #0]
 8011c6a:	6819      	ldr	r1, [r3, #0]
 8011c6c:	6922      	ldr	r2, [r4, #16]
 8011c6e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011c72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c76:	f003 f971 	bl	8014f5c <uxr_buffer_create_publisher_bin>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011c80:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011c84:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011c88:	f000 fda8 	bl	80127dc <run_xrce_session>
 8011c8c:	b3b0      	cbz	r0, 8011cfc <rmw_create_publisher+0x190>
 8011c8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c96:	2105      	movs	r1, #5
 8011c98:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8011c9c:	1c42      	adds	r2, r0, #1
 8011c9e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8011ca2:	f003 fb45 	bl	8015330 <uxr_object_id>
 8011ca6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011caa:	6160      	str	r0, [r4, #20]
 8011cac:	4631      	mov	r1, r6
 8011cae:	af04      	add	r7, sp, #16
 8011cb0:	691e      	ldr	r6, [r3, #16]
 8011cb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011cb6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011cba:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	f000 fdac 	bl	801281c <convert_qos_profile>
 8011cc4:	9503      	str	r5, [sp, #12]
 8011cc6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011cca:	9001      	str	r0, [sp, #4]
 8011ccc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011cd0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8011cda:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011cde:	f8da 1000 	ldr.w	r1, [sl]
 8011ce2:	4630      	mov	r0, r6
 8011ce4:	f003 f998 	bl	8015018 <uxr_buffer_create_datawriter_bin>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011cee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011cf2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011cf6:	f000 fd71 	bl	80127dc <run_xrce_session>
 8011cfa:	b940      	cbnz	r0, 8011d0e <rmw_create_publisher+0x1a2>
 8011cfc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011cfe:	b108      	cbz	r0, 8011d04 <rmw_create_publisher+0x198>
 8011d00:	f000 fc62 	bl	80125c8 <rmw_uxrce_fini_topic_memory>
 8011d04:	4640      	mov	r0, r8
 8011d06:	f000 fc07 	bl	8012518 <rmw_uxrce_fini_publisher_memory>
 8011d0a:	f04f 0800 	mov.w	r8, #0
 8011d0e:	4640      	mov	r0, r8
 8011d10:	b007      	add	sp, #28
 8011d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d16:	bf00      	nop
 8011d18:	2001de98 	.word	0x2001de98
 8011d1c:	08020fa0 	.word	0x08020fa0
 8011d20:	08020950 	.word	0x08020950

08011d24 <rmw_publisher_get_actual_qos>:
 8011d24:	b508      	push	{r3, lr}
 8011d26:	4603      	mov	r3, r0
 8011d28:	b140      	cbz	r0, 8011d3c <rmw_publisher_get_actual_qos+0x18>
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	b131      	cbz	r1, 8011d3c <rmw_publisher_get_actual_qos+0x18>
 8011d2e:	6859      	ldr	r1, [r3, #4]
 8011d30:	2250      	movs	r2, #80	@ 0x50
 8011d32:	3128      	adds	r1, #40	@ 0x28
 8011d34:	f00c fb3d 	bl	801e3b2 <memcpy>
 8011d38:	2000      	movs	r0, #0
 8011d3a:	bd08      	pop	{r3, pc}
 8011d3c:	200b      	movs	r0, #11
 8011d3e:	bd08      	pop	{r3, pc}

08011d40 <rmw_destroy_publisher>:
 8011d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d44:	b128      	cbz	r0, 8011d52 <rmw_destroy_publisher+0x12>
 8011d46:	4604      	mov	r4, r0
 8011d48:	6800      	ldr	r0, [r0, #0]
 8011d4a:	460d      	mov	r5, r1
 8011d4c:	f000 fdcc 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011d50:	b918      	cbnz	r0, 8011d5a <rmw_destroy_publisher+0x1a>
 8011d52:	2401      	movs	r4, #1
 8011d54:	4620      	mov	r0, r4
 8011d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5a:	6863      	ldr	r3, [r4, #4]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d0f8      	beq.n	8011d52 <rmw_destroy_publisher+0x12>
 8011d60:	2d00      	cmp	r5, #0
 8011d62:	d0f6      	beq.n	8011d52 <rmw_destroy_publisher+0x12>
 8011d64:	6828      	ldr	r0, [r5, #0]
 8011d66:	f000 fdbf 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d0f1      	beq.n	8011d52 <rmw_destroy_publisher+0x12>
 8011d6e:	686c      	ldr	r4, [r5, #4]
 8011d70:	2c00      	cmp	r4, #0
 8011d72:	d0ee      	beq.n	8011d52 <rmw_destroy_publisher+0x12>
 8011d74:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011d76:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8011d7a:	f009 fdf1 	bl	801b960 <destroy_topic>
 8011d7e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011d82:	6962      	ldr	r2, [r4, #20]
 8011d84:	6918      	ldr	r0, [r3, #16]
 8011d86:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011d8a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d8e:	6819      	ldr	r1, [r3, #0]
 8011d90:	f003 f834 	bl	8014dfc <uxr_buffer_delete_entity>
 8011d94:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011d98:	6922      	ldr	r2, [r4, #16]
 8011d9a:	4680      	mov	r8, r0
 8011d9c:	6918      	ldr	r0, [r3, #16]
 8011d9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011da2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011da6:	6819      	ldr	r1, [r3, #0]
 8011da8:	f003 f828 	bl	8014dfc <uxr_buffer_delete_entity>
 8011dac:	4606      	mov	r6, r0
 8011dae:	6938      	ldr	r0, [r7, #16]
 8011db0:	4642      	mov	r2, r8
 8011db2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011db6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011dba:	f000 fd0f 	bl	80127dc <run_xrce_session>
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	6938      	ldr	r0, [r7, #16]
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011dc8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011dcc:	f000 fd06 	bl	80127dc <run_xrce_session>
 8011dd0:	4004      	ands	r4, r0
 8011dd2:	f084 0401 	eor.w	r4, r4, #1
 8011dd6:	b2e4      	uxtb	r4, r4
 8011dd8:	4628      	mov	r0, r5
 8011dda:	0064      	lsls	r4, r4, #1
 8011ddc:	f000 fb9c 	bl	8012518 <rmw_uxrce_fini_publisher_memory>
 8011de0:	e7b8      	b.n	8011d54 <rmw_destroy_publisher+0x14>
 8011de2:	bf00      	nop

08011de4 <rmw_destroy_service>:
 8011de4:	b570      	push	{r4, r5, r6, lr}
 8011de6:	b128      	cbz	r0, 8011df4 <rmw_destroy_service+0x10>
 8011de8:	4604      	mov	r4, r0
 8011dea:	6800      	ldr	r0, [r0, #0]
 8011dec:	460d      	mov	r5, r1
 8011dee:	f000 fd7b 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011df2:	b910      	cbnz	r0, 8011dfa <rmw_destroy_service+0x16>
 8011df4:	2401      	movs	r4, #1
 8011df6:	4620      	mov	r0, r4
 8011df8:	bd70      	pop	{r4, r5, r6, pc}
 8011dfa:	6863      	ldr	r3, [r4, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d0f9      	beq.n	8011df4 <rmw_destroy_service+0x10>
 8011e00:	2d00      	cmp	r5, #0
 8011e02:	d0f7      	beq.n	8011df4 <rmw_destroy_service+0x10>
 8011e04:	6828      	ldr	r0, [r5, #0]
 8011e06:	f000 fd6f 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	d0f2      	beq.n	8011df4 <rmw_destroy_service+0x10>
 8011e0e:	686e      	ldr	r6, [r5, #4]
 8011e10:	2e00      	cmp	r6, #0
 8011e12:	d0ef      	beq.n	8011df4 <rmw_destroy_service+0x10>
 8011e14:	6864      	ldr	r4, [r4, #4]
 8011e16:	6932      	ldr	r2, [r6, #16]
 8011e18:	6920      	ldr	r0, [r4, #16]
 8011e1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011e1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e22:	6819      	ldr	r1, [r3, #0]
 8011e24:	f003 faea 	bl	80153fc <uxr_buffer_cancel_data>
 8011e28:	4602      	mov	r2, r0
 8011e2a:	6920      	ldr	r0, [r4, #16]
 8011e2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011e30:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011e34:	f000 fcd2 	bl	80127dc <run_xrce_session>
 8011e38:	6920      	ldr	r0, [r4, #16]
 8011e3a:	6932      	ldr	r2, [r6, #16]
 8011e3c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011e40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e44:	6819      	ldr	r1, [r3, #0]
 8011e46:	f002 ffd9 	bl	8014dfc <uxr_buffer_delete_entity>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	6920      	ldr	r0, [r4, #16]
 8011e4e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011e52:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011e56:	f000 fcc1 	bl	80127dc <run_xrce_session>
 8011e5a:	f080 0401 	eor.w	r4, r0, #1
 8011e5e:	b2e4      	uxtb	r4, r4
 8011e60:	4628      	mov	r0, r5
 8011e62:	0064      	lsls	r4, r4, #1
 8011e64:	f000 fb84 	bl	8012570 <rmw_uxrce_fini_service_memory>
 8011e68:	e7c5      	b.n	8011df6 <rmw_destroy_service+0x12>
 8011e6a:	bf00      	nop

08011e6c <rmw_create_subscription>:
 8011e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	b08d      	sub	sp, #52	@ 0x34
 8011e72:	2800      	cmp	r0, #0
 8011e74:	f000 80d1 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011e78:	460f      	mov	r7, r1
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	f000 80cd 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011e80:	4604      	mov	r4, r0
 8011e82:	6800      	ldr	r0, [r0, #0]
 8011e84:	4615      	mov	r5, r2
 8011e86:	461e      	mov	r6, r3
 8011e88:	f000 fd2e 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	f000 80c4 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011e92:	2d00      	cmp	r5, #0
 8011e94:	f000 80c1 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011e98:	782b      	ldrb	r3, [r5, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f000 80bd 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011ea0:	2e00      	cmp	r6, #0
 8011ea2:	f000 80ba 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011ea6:	485e      	ldr	r0, [pc, #376]	@ (8012020 <rmw_create_subscription+0x1b4>)
 8011ea8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011eac:	f009 fc50 	bl	801b750 <get_memory>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	f000 80b2 	beq.w	801201a <rmw_create_subscription+0x1ae>
 8011eb6:	6884      	ldr	r4, [r0, #8]
 8011eb8:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8011ebc:	f009 fcce 	bl	801b85c <rmw_get_implementation_identifier>
 8011ec0:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8011ec4:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8011ec6:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8011eca:	4628      	mov	r0, r5
 8011ecc:	f7ee fa08 	bl	80002e0 <strlen>
 8011ed0:	3001      	adds	r0, #1
 8011ed2:	283c      	cmp	r0, #60	@ 0x3c
 8011ed4:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8011ed8:	f200 8098 	bhi.w	801200c <rmw_create_subscription+0x1a0>
 8011edc:	4a51      	ldr	r2, [pc, #324]	@ (8012024 <rmw_create_subscription+0x1b8>)
 8011ede:	462b      	mov	r3, r5
 8011ee0:	213c      	movs	r1, #60	@ 0x3c
 8011ee2:	4650      	mov	r0, sl
 8011ee4:	f00b ffc6 	bl	801de74 <sniprintf>
 8011ee8:	4631      	mov	r1, r6
 8011eea:	f8c4 9020 	str.w	r9, [r4, #32]
 8011eee:	2250      	movs	r2, #80	@ 0x50
 8011ef0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011ef4:	f00c fa5d 	bl	801e3b2 <memcpy>
 8011ef8:	494b      	ldr	r1, [pc, #300]	@ (8012028 <rmw_create_subscription+0x1bc>)
 8011efa:	4638      	mov	r0, r7
 8011efc:	f000 fd02 	bl	8012904 <get_message_typesupport_handle>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	f000 8083 	beq.w	801200c <rmw_create_subscription+0x1a0>
 8011f06:	6842      	ldr	r2, [r0, #4]
 8011f08:	61a2      	str	r2, [r4, #24]
 8011f0a:	2a00      	cmp	r2, #0
 8011f0c:	d07e      	beq.n	801200c <rmw_create_subscription+0x1a0>
 8011f0e:	4629      	mov	r1, r5
 8011f10:	4633      	mov	r3, r6
 8011f12:	4648      	mov	r0, r9
 8011f14:	f009 fcd0 	bl	801b8b8 <create_topic>
 8011f18:	61e0      	str	r0, [r4, #28]
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	d07a      	beq.n	8012014 <rmw_create_subscription+0x1a8>
 8011f1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011f26:	2104      	movs	r1, #4
 8011f28:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8011f2c:	1c42      	adds	r2, r0, #1
 8011f2e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011f32:	f003 f9fd 	bl	8015330 <uxr_object_id>
 8011f36:	6120      	str	r0, [r4, #16]
 8011f38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f3c:	2506      	movs	r5, #6
 8011f3e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011f42:	9500      	str	r5, [sp, #0]
 8011f44:	6819      	ldr	r1, [r3, #0]
 8011f46:	6922      	ldr	r2, [r4, #16]
 8011f48:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011f4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011f50:	f003 f832 	bl	8014fb8 <uxr_buffer_create_subscriber_bin>
 8011f54:	4602      	mov	r2, r0
 8011f56:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f5a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011f5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011f62:	f000 fc3b 	bl	80127dc <run_xrce_session>
 8011f66:	2800      	cmp	r0, #0
 8011f68:	d050      	beq.n	801200c <rmw_create_subscription+0x1a0>
 8011f6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011f72:	4629      	mov	r1, r5
 8011f74:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011f78:	1c42      	adds	r2, r0, #1
 8011f7a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8011f7e:	f003 f9d7 	bl	8015330 <uxr_object_id>
 8011f82:	af08      	add	r7, sp, #32
 8011f84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f88:	69e3      	ldr	r3, [r4, #28]
 8011f8a:	6160      	str	r0, [r4, #20]
 8011f8c:	4631      	mov	r1, r6
 8011f8e:	4638      	mov	r0, r7
 8011f90:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011f94:	9305      	str	r3, [sp, #20]
 8011f96:	f000 fc41 	bl	801281c <convert_qos_profile>
 8011f9a:	9503      	str	r5, [sp, #12]
 8011f9c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011fa0:	9b05      	ldr	r3, [sp, #20]
 8011fa2:	9001      	str	r0, [sp, #4]
 8011fa4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	9300      	str	r3, [sp, #0]
 8011fac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011fb0:	f8db 1000 	ldr.w	r1, [fp]
 8011fb4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8011fb8:	f003 f892 	bl	80150e0 <uxr_buffer_create_datareader_bin>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011fc2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011fc6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011fca:	f000 fc07 	bl	80127dc <run_xrce_session>
 8011fce:	b1e8      	cbz	r0, 801200c <rmw_create_subscription+0x1a0>
 8011fd0:	7a33      	ldrb	r3, [r6, #8]
 8011fd2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011fd6:	2b02      	cmp	r3, #2
 8011fd8:	bf0c      	ite	eq
 8011fda:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8011fde:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8011fe2:	9307      	str	r3, [sp, #28]
 8011fe4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011fe8:	2200      	movs	r2, #0
 8011fea:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8011fee:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ff0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	6962      	ldr	r2, [r4, #20]
 8011ff8:	9b07      	ldr	r3, [sp, #28]
 8011ffa:	6809      	ldr	r1, [r1, #0]
 8011ffc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012000:	f003 f9c4 	bl	801538c <uxr_buffer_request_data>
 8012004:	4640      	mov	r0, r8
 8012006:	b00d      	add	sp, #52	@ 0x34
 8012008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200c:	69e0      	ldr	r0, [r4, #28]
 801200e:	b108      	cbz	r0, 8012014 <rmw_create_subscription+0x1a8>
 8012010:	f000 fada 	bl	80125c8 <rmw_uxrce_fini_topic_memory>
 8012014:	4640      	mov	r0, r8
 8012016:	f000 fa95 	bl	8012544 <rmw_uxrce_fini_subscription_memory>
 801201a:	f04f 0800 	mov.w	r8, #0
 801201e:	e7f1      	b.n	8012004 <rmw_create_subscription+0x198>
 8012020:	2001d618 	.word	0x2001d618
 8012024:	08020fa0 	.word	0x08020fa0
 8012028:	08020950 	.word	0x08020950

0801202c <rmw_subscription_get_actual_qos>:
 801202c:	b508      	push	{r3, lr}
 801202e:	4603      	mov	r3, r0
 8012030:	b140      	cbz	r0, 8012044 <rmw_subscription_get_actual_qos+0x18>
 8012032:	4608      	mov	r0, r1
 8012034:	b131      	cbz	r1, 8012044 <rmw_subscription_get_actual_qos+0x18>
 8012036:	6859      	ldr	r1, [r3, #4]
 8012038:	2250      	movs	r2, #80	@ 0x50
 801203a:	3128      	adds	r1, #40	@ 0x28
 801203c:	f00c f9b9 	bl	801e3b2 <memcpy>
 8012040:	2000      	movs	r0, #0
 8012042:	bd08      	pop	{r3, pc}
 8012044:	200b      	movs	r0, #11
 8012046:	bd08      	pop	{r3, pc}

08012048 <rmw_destroy_subscription>:
 8012048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204c:	b128      	cbz	r0, 801205a <rmw_destroy_subscription+0x12>
 801204e:	4604      	mov	r4, r0
 8012050:	6800      	ldr	r0, [r0, #0]
 8012052:	460d      	mov	r5, r1
 8012054:	f000 fc48 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8012058:	b918      	cbnz	r0, 8012062 <rmw_destroy_subscription+0x1a>
 801205a:	2401      	movs	r4, #1
 801205c:	4620      	mov	r0, r4
 801205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012062:	6863      	ldr	r3, [r4, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d0f8      	beq.n	801205a <rmw_destroy_subscription+0x12>
 8012068:	2d00      	cmp	r5, #0
 801206a:	d0f6      	beq.n	801205a <rmw_destroy_subscription+0x12>
 801206c:	6828      	ldr	r0, [r5, #0]
 801206e:	f000 fc3b 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 8012072:	2800      	cmp	r0, #0
 8012074:	d0f1      	beq.n	801205a <rmw_destroy_subscription+0x12>
 8012076:	686c      	ldr	r4, [r5, #4]
 8012078:	2c00      	cmp	r4, #0
 801207a:	d0ee      	beq.n	801205a <rmw_destroy_subscription+0x12>
 801207c:	6a26      	ldr	r6, [r4, #32]
 801207e:	6962      	ldr	r2, [r4, #20]
 8012080:	6930      	ldr	r0, [r6, #16]
 8012082:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012086:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801208a:	6819      	ldr	r1, [r3, #0]
 801208c:	f003 f9b6 	bl	80153fc <uxr_buffer_cancel_data>
 8012090:	4602      	mov	r2, r0
 8012092:	6930      	ldr	r0, [r6, #16]
 8012094:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012098:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801209c:	f000 fb9e 	bl	80127dc <run_xrce_session>
 80120a0:	69e0      	ldr	r0, [r4, #28]
 80120a2:	f009 fc5d 	bl	801b960 <destroy_topic>
 80120a6:	6a23      	ldr	r3, [r4, #32]
 80120a8:	6962      	ldr	r2, [r4, #20]
 80120aa:	6918      	ldr	r0, [r3, #16]
 80120ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80120b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120b4:	6819      	ldr	r1, [r3, #0]
 80120b6:	f002 fea1 	bl	8014dfc <uxr_buffer_delete_entity>
 80120ba:	6a23      	ldr	r3, [r4, #32]
 80120bc:	6922      	ldr	r2, [r4, #16]
 80120be:	4680      	mov	r8, r0
 80120c0:	6918      	ldr	r0, [r3, #16]
 80120c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80120c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120ca:	6819      	ldr	r1, [r3, #0]
 80120cc:	f002 fe96 	bl	8014dfc <uxr_buffer_delete_entity>
 80120d0:	4607      	mov	r7, r0
 80120d2:	6930      	ldr	r0, [r6, #16]
 80120d4:	4642      	mov	r2, r8
 80120d6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80120da:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80120de:	f000 fb7d 	bl	80127dc <run_xrce_session>
 80120e2:	4604      	mov	r4, r0
 80120e4:	6930      	ldr	r0, [r6, #16]
 80120e6:	463a      	mov	r2, r7
 80120e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80120ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80120f0:	f000 fb74 	bl	80127dc <run_xrce_session>
 80120f4:	4004      	ands	r4, r0
 80120f6:	f084 0401 	eor.w	r4, r4, #1
 80120fa:	b2e4      	uxtb	r4, r4
 80120fc:	4628      	mov	r0, r5
 80120fe:	0064      	lsls	r4, r4, #1
 8012100:	f000 fa20 	bl	8012544 <rmw_uxrce_fini_subscription_memory>
 8012104:	e7aa      	b.n	801205c <rmw_destroy_subscription+0x14>
 8012106:	bf00      	nop

08012108 <rmw_take_with_info>:
 8012108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801210a:	4604      	mov	r4, r0
 801210c:	6800      	ldr	r0, [r0, #0]
 801210e:	b089      	sub	sp, #36	@ 0x24
 8012110:	460f      	mov	r7, r1
 8012112:	4615      	mov	r5, r2
 8012114:	b128      	cbz	r0, 8012122 <rmw_take_with_info+0x1a>
 8012116:	4b23      	ldr	r3, [pc, #140]	@ (80121a4 <rmw_take_with_info+0x9c>)
 8012118:	6819      	ldr	r1, [r3, #0]
 801211a:	f7ee f881 	bl	8000220 <strcmp>
 801211e:	2800      	cmp	r0, #0
 8012120:	d13d      	bne.n	801219e <rmw_take_with_info+0x96>
 8012122:	6864      	ldr	r4, [r4, #4]
 8012124:	b1fd      	cbz	r5, 8012166 <rmw_take_with_info+0x5e>
 8012126:	2300      	movs	r3, #0
 8012128:	702b      	strb	r3, [r5, #0]
 801212a:	f000 fad9 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801212e:	4620      	mov	r0, r4
 8012130:	f000 faae 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012134:	4606      	mov	r6, r0
 8012136:	b1e8      	cbz	r0, 8012174 <rmw_take_with_info+0x6c>
 8012138:	6881      	ldr	r1, [r0, #8]
 801213a:	4668      	mov	r0, sp
 801213c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8012140:	3110      	adds	r1, #16
 8012142:	f7fc fc1f 	bl	800e984 <ucdr_init_buffer>
 8012146:	69a3      	ldr	r3, [r4, #24]
 8012148:	4639      	mov	r1, r7
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	4668      	mov	r0, sp
 801214e:	4798      	blx	r3
 8012150:	4631      	mov	r1, r6
 8012152:	4604      	mov	r4, r0
 8012154:	4814      	ldr	r0, [pc, #80]	@ (80121a8 <rmw_take_with_info+0xa0>)
 8012156:	f009 fb0b 	bl	801b770 <put_memory>
 801215a:	702c      	strb	r4, [r5, #0]
 801215c:	f084 0001 	eor.w	r0, r4, #1
 8012160:	b2c0      	uxtb	r0, r0
 8012162:	b009      	add	sp, #36	@ 0x24
 8012164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012166:	f000 fabb 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801216a:	4620      	mov	r0, r4
 801216c:	f000 fa90 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012170:	4605      	mov	r5, r0
 8012172:	b910      	cbnz	r0, 801217a <rmw_take_with_info+0x72>
 8012174:	2001      	movs	r0, #1
 8012176:	b009      	add	sp, #36	@ 0x24
 8012178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801217a:	68a9      	ldr	r1, [r5, #8]
 801217c:	4668      	mov	r0, sp
 801217e:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8012182:	3110      	adds	r1, #16
 8012184:	f7fc fbfe 	bl	800e984 <ucdr_init_buffer>
 8012188:	69a3      	ldr	r3, [r4, #24]
 801218a:	4639      	mov	r1, r7
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	4668      	mov	r0, sp
 8012190:	4798      	blx	r3
 8012192:	4629      	mov	r1, r5
 8012194:	4604      	mov	r4, r0
 8012196:	4804      	ldr	r0, [pc, #16]	@ (80121a8 <rmw_take_with_info+0xa0>)
 8012198:	f009 faea 	bl	801b770 <put_memory>
 801219c:	e7de      	b.n	801215c <rmw_take_with_info+0x54>
 801219e:	200c      	movs	r0, #12
 80121a0:	b009      	add	sp, #36	@ 0x24
 80121a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121a4:	08021774 	.word	0x08021774
 80121a8:	2001ce68 	.word	0x2001ce68

080121ac <rmw_uxrce_transport_init>:
 80121ac:	b508      	push	{r3, lr}
 80121ae:	b108      	cbz	r0, 80121b4 <rmw_uxrce_transport_init+0x8>
 80121b0:	f100 0210 	add.w	r2, r0, #16
 80121b4:	b139      	cbz	r1, 80121c6 <rmw_uxrce_transport_init+0x1a>
 80121b6:	6949      	ldr	r1, [r1, #20]
 80121b8:	4610      	mov	r0, r2
 80121ba:	f003 f881 	bl	80152c0 <uxr_init_custom_transport>
 80121be:	f080 0001 	eor.w	r0, r0, #1
 80121c2:	b2c0      	uxtb	r0, r0
 80121c4:	bd08      	pop	{r3, pc}
 80121c6:	4b04      	ldr	r3, [pc, #16]	@ (80121d8 <rmw_uxrce_transport_init+0x2c>)
 80121c8:	4610      	mov	r0, r2
 80121ca:	6859      	ldr	r1, [r3, #4]
 80121cc:	f003 f878 	bl	80152c0 <uxr_init_custom_transport>
 80121d0:	f080 0001 	eor.w	r0, r0, #1
 80121d4:	b2c0      	uxtb	r0, r0
 80121d6:	bd08      	pop	{r3, pc}
 80121d8:	2001ab68 	.word	0x2001ab68

080121dc <rmw_uros_epoch_nanos>:
 80121dc:	4b05      	ldr	r3, [pc, #20]	@ (80121f4 <rmw_uros_epoch_nanos+0x18>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	b123      	cbz	r3, 80121ec <rmw_uros_epoch_nanos+0x10>
 80121e2:	6898      	ldr	r0, [r3, #8]
 80121e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80121e8:	f003 bafc 	b.w	80157e4 <uxr_epoch_nanos>
 80121ec:	2000      	movs	r0, #0
 80121ee:	2100      	movs	r1, #0
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	2001f508 	.word	0x2001f508

080121f8 <rmw_uros_sync_session>:
 80121f8:	b508      	push	{r3, lr}
 80121fa:	4b07      	ldr	r3, [pc, #28]	@ (8012218 <rmw_uros_sync_session+0x20>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	b14b      	cbz	r3, 8012214 <rmw_uros_sync_session+0x1c>
 8012200:	4601      	mov	r1, r0
 8012202:	6898      	ldr	r0, [r3, #8]
 8012204:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012208:	f003 ff0a 	bl	8016020 <uxr_sync_session>
 801220c:	f080 0001 	eor.w	r0, r0, #1
 8012210:	b2c0      	uxtb	r0, r0
 8012212:	bd08      	pop	{r3, pc}
 8012214:	2001      	movs	r0, #1
 8012216:	bd08      	pop	{r3, pc}
 8012218:	2001f508 	.word	0x2001f508

0801221c <rmw_uxrce_init_service_memory>:
 801221c:	b1e2      	cbz	r2, 8012258 <rmw_uxrce_init_service_memory+0x3c>
 801221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012222:	7b05      	ldrb	r5, [r0, #12]
 8012224:	4606      	mov	r6, r0
 8012226:	b9ad      	cbnz	r5, 8012254 <rmw_uxrce_init_service_memory+0x38>
 8012228:	23c8      	movs	r3, #200	@ 0xc8
 801222a:	e9c0 5500 	strd	r5, r5, [r0]
 801222e:	6083      	str	r3, [r0, #8]
 8012230:	f240 1301 	movw	r3, #257	@ 0x101
 8012234:	4617      	mov	r7, r2
 8012236:	8183      	strh	r3, [r0, #12]
 8012238:	460c      	mov	r4, r1
 801223a:	46a8      	mov	r8, r5
 801223c:	4621      	mov	r1, r4
 801223e:	4630      	mov	r0, r6
 8012240:	3501      	adds	r5, #1
 8012242:	f009 fa95 	bl	801b770 <put_memory>
 8012246:	42af      	cmp	r7, r5
 8012248:	60a4      	str	r4, [r4, #8]
 801224a:	f884 800c 	strb.w	r8, [r4, #12]
 801224e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8012252:	d1f3      	bne.n	801223c <rmw_uxrce_init_service_memory+0x20>
 8012254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop

0801225c <rmw_uxrce_init_client_memory>:
 801225c:	b1e2      	cbz	r2, 8012298 <rmw_uxrce_init_client_memory+0x3c>
 801225e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012262:	7b05      	ldrb	r5, [r0, #12]
 8012264:	4606      	mov	r6, r0
 8012266:	b9ad      	cbnz	r5, 8012294 <rmw_uxrce_init_client_memory+0x38>
 8012268:	23c8      	movs	r3, #200	@ 0xc8
 801226a:	e9c0 5500 	strd	r5, r5, [r0]
 801226e:	6083      	str	r3, [r0, #8]
 8012270:	f240 1301 	movw	r3, #257	@ 0x101
 8012274:	4617      	mov	r7, r2
 8012276:	8183      	strh	r3, [r0, #12]
 8012278:	460c      	mov	r4, r1
 801227a:	46a8      	mov	r8, r5
 801227c:	4621      	mov	r1, r4
 801227e:	4630      	mov	r0, r6
 8012280:	3501      	adds	r5, #1
 8012282:	f009 fa75 	bl	801b770 <put_memory>
 8012286:	42af      	cmp	r7, r5
 8012288:	60a4      	str	r4, [r4, #8]
 801228a:	f884 800c 	strb.w	r8, [r4, #12]
 801228e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8012292:	d1f3      	bne.n	801227c <rmw_uxrce_init_client_memory+0x20>
 8012294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012298:	4770      	bx	lr
 801229a:	bf00      	nop

0801229c <rmw_uxrce_init_publisher_memory>:
 801229c:	b1e2      	cbz	r2, 80122d8 <rmw_uxrce_init_publisher_memory+0x3c>
 801229e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a2:	7b05      	ldrb	r5, [r0, #12]
 80122a4:	4606      	mov	r6, r0
 80122a6:	b9ad      	cbnz	r5, 80122d4 <rmw_uxrce_init_publisher_memory+0x38>
 80122a8:	23d8      	movs	r3, #216	@ 0xd8
 80122aa:	e9c0 5500 	strd	r5, r5, [r0]
 80122ae:	6083      	str	r3, [r0, #8]
 80122b0:	f240 1301 	movw	r3, #257	@ 0x101
 80122b4:	4617      	mov	r7, r2
 80122b6:	8183      	strh	r3, [r0, #12]
 80122b8:	460c      	mov	r4, r1
 80122ba:	46a8      	mov	r8, r5
 80122bc:	4621      	mov	r1, r4
 80122be:	4630      	mov	r0, r6
 80122c0:	3501      	adds	r5, #1
 80122c2:	f009 fa55 	bl	801b770 <put_memory>
 80122c6:	42af      	cmp	r7, r5
 80122c8:	60a4      	str	r4, [r4, #8]
 80122ca:	f884 800c 	strb.w	r8, [r4, #12]
 80122ce:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80122d2:	d1f3      	bne.n	80122bc <rmw_uxrce_init_publisher_memory+0x20>
 80122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop

080122dc <rmw_uxrce_init_subscription_memory>:
 80122dc:	b1e2      	cbz	r2, 8012318 <rmw_uxrce_init_subscription_memory+0x3c>
 80122de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e2:	7b05      	ldrb	r5, [r0, #12]
 80122e4:	4606      	mov	r6, r0
 80122e6:	b9ad      	cbnz	r5, 8012314 <rmw_uxrce_init_subscription_memory+0x38>
 80122e8:	23d8      	movs	r3, #216	@ 0xd8
 80122ea:	e9c0 5500 	strd	r5, r5, [r0]
 80122ee:	6083      	str	r3, [r0, #8]
 80122f0:	f240 1301 	movw	r3, #257	@ 0x101
 80122f4:	4617      	mov	r7, r2
 80122f6:	8183      	strh	r3, [r0, #12]
 80122f8:	460c      	mov	r4, r1
 80122fa:	46a8      	mov	r8, r5
 80122fc:	4621      	mov	r1, r4
 80122fe:	4630      	mov	r0, r6
 8012300:	3501      	adds	r5, #1
 8012302:	f009 fa35 	bl	801b770 <put_memory>
 8012306:	42af      	cmp	r7, r5
 8012308:	60a4      	str	r4, [r4, #8]
 801230a:	f884 800c 	strb.w	r8, [r4, #12]
 801230e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8012312:	d1f3      	bne.n	80122fc <rmw_uxrce_init_subscription_memory+0x20>
 8012314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop

0801231c <rmw_uxrce_init_node_memory>:
 801231c:	b1e2      	cbz	r2, 8012358 <rmw_uxrce_init_node_memory+0x3c>
 801231e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012322:	7b05      	ldrb	r5, [r0, #12]
 8012324:	4606      	mov	r6, r0
 8012326:	b9ad      	cbnz	r5, 8012354 <rmw_uxrce_init_node_memory+0x38>
 8012328:	23a4      	movs	r3, #164	@ 0xa4
 801232a:	e9c0 5500 	strd	r5, r5, [r0]
 801232e:	6083      	str	r3, [r0, #8]
 8012330:	f240 1301 	movw	r3, #257	@ 0x101
 8012334:	4617      	mov	r7, r2
 8012336:	8183      	strh	r3, [r0, #12]
 8012338:	460c      	mov	r4, r1
 801233a:	46a8      	mov	r8, r5
 801233c:	4621      	mov	r1, r4
 801233e:	4630      	mov	r0, r6
 8012340:	3501      	adds	r5, #1
 8012342:	f009 fa15 	bl	801b770 <put_memory>
 8012346:	42af      	cmp	r7, r5
 8012348:	60a4      	str	r4, [r4, #8]
 801234a:	f884 800c 	strb.w	r8, [r4, #12]
 801234e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8012352:	d1f3      	bne.n	801233c <rmw_uxrce_init_node_memory+0x20>
 8012354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop

0801235c <rmw_uxrce_init_session_memory>:
 801235c:	b1ea      	cbz	r2, 801239a <rmw_uxrce_init_session_memory+0x3e>
 801235e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012362:	7b05      	ldrb	r5, [r0, #12]
 8012364:	4606      	mov	r6, r0
 8012366:	b9b5      	cbnz	r5, 8012396 <rmw_uxrce_init_session_memory+0x3a>
 8012368:	e9c0 5500 	strd	r5, r5, [r0]
 801236c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8012370:	f240 1301 	movw	r3, #257	@ 0x101
 8012374:	4617      	mov	r7, r2
 8012376:	f8c0 8008 	str.w	r8, [r0, #8]
 801237a:	460c      	mov	r4, r1
 801237c:	8183      	strh	r3, [r0, #12]
 801237e:	46a9      	mov	r9, r5
 8012380:	4621      	mov	r1, r4
 8012382:	4630      	mov	r0, r6
 8012384:	3501      	adds	r5, #1
 8012386:	f009 f9f3 	bl	801b770 <put_memory>
 801238a:	42af      	cmp	r7, r5
 801238c:	60a4      	str	r4, [r4, #8]
 801238e:	f884 900c 	strb.w	r9, [r4, #12]
 8012392:	4444      	add	r4, r8
 8012394:	d1f4      	bne.n	8012380 <rmw_uxrce_init_session_memory+0x24>
 8012396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801239a:	4770      	bx	lr

0801239c <rmw_uxrce_init_topic_memory>:
 801239c:	b1e2      	cbz	r2, 80123d8 <rmw_uxrce_init_topic_memory+0x3c>
 801239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a2:	7b05      	ldrb	r5, [r0, #12]
 80123a4:	4606      	mov	r6, r0
 80123a6:	b9ad      	cbnz	r5, 80123d4 <rmw_uxrce_init_topic_memory+0x38>
 80123a8:	231c      	movs	r3, #28
 80123aa:	e9c0 5500 	strd	r5, r5, [r0]
 80123ae:	6083      	str	r3, [r0, #8]
 80123b0:	f240 1301 	movw	r3, #257	@ 0x101
 80123b4:	4617      	mov	r7, r2
 80123b6:	8183      	strh	r3, [r0, #12]
 80123b8:	460c      	mov	r4, r1
 80123ba:	46a8      	mov	r8, r5
 80123bc:	4621      	mov	r1, r4
 80123be:	4630      	mov	r0, r6
 80123c0:	3501      	adds	r5, #1
 80123c2:	f009 f9d5 	bl	801b770 <put_memory>
 80123c6:	42af      	cmp	r7, r5
 80123c8:	60a4      	str	r4, [r4, #8]
 80123ca:	f884 800c 	strb.w	r8, [r4, #12]
 80123ce:	f104 041c 	add.w	r4, r4, #28
 80123d2:	d1f3      	bne.n	80123bc <rmw_uxrce_init_topic_memory+0x20>
 80123d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop

080123dc <rmw_uxrce_init_static_input_buffer_memory>:
 80123dc:	b1ea      	cbz	r2, 801241a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80123de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e2:	7b05      	ldrb	r5, [r0, #12]
 80123e4:	4606      	mov	r6, r0
 80123e6:	b9b5      	cbnz	r5, 8012416 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80123e8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80123ec:	e9c0 5500 	strd	r5, r5, [r0]
 80123f0:	6083      	str	r3, [r0, #8]
 80123f2:	f240 1301 	movw	r3, #257	@ 0x101
 80123f6:	4617      	mov	r7, r2
 80123f8:	8183      	strh	r3, [r0, #12]
 80123fa:	460c      	mov	r4, r1
 80123fc:	46a8      	mov	r8, r5
 80123fe:	4621      	mov	r1, r4
 8012400:	4630      	mov	r0, r6
 8012402:	3501      	adds	r5, #1
 8012404:	f009 f9b4 	bl	801b770 <put_memory>
 8012408:	42af      	cmp	r7, r5
 801240a:	60a4      	str	r4, [r4, #8]
 801240c:	f884 800c 	strb.w	r8, [r4, #12]
 8012410:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8012414:	d1f3      	bne.n	80123fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8012416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801241a:	4770      	bx	lr

0801241c <rmw_uxrce_init_init_options_impl_memory>:
 801241c:	b1e2      	cbz	r2, 8012458 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012422:	7b05      	ldrb	r5, [r0, #12]
 8012424:	4606      	mov	r6, r0
 8012426:	b9ad      	cbnz	r5, 8012454 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8012428:	232c      	movs	r3, #44	@ 0x2c
 801242a:	e9c0 5500 	strd	r5, r5, [r0]
 801242e:	6083      	str	r3, [r0, #8]
 8012430:	f240 1301 	movw	r3, #257	@ 0x101
 8012434:	4617      	mov	r7, r2
 8012436:	8183      	strh	r3, [r0, #12]
 8012438:	460c      	mov	r4, r1
 801243a:	46a8      	mov	r8, r5
 801243c:	4621      	mov	r1, r4
 801243e:	4630      	mov	r0, r6
 8012440:	3501      	adds	r5, #1
 8012442:	f009 f995 	bl	801b770 <put_memory>
 8012446:	42af      	cmp	r7, r5
 8012448:	60a4      	str	r4, [r4, #8]
 801244a:	f884 800c 	strb.w	r8, [r4, #12]
 801244e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8012452:	d1f3      	bne.n	801243c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8012454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop

0801245c <rmw_uxrce_init_wait_set_memory>:
 801245c:	b1e2      	cbz	r2, 8012498 <rmw_uxrce_init_wait_set_memory+0x3c>
 801245e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012462:	7b05      	ldrb	r5, [r0, #12]
 8012464:	4606      	mov	r6, r0
 8012466:	b9ad      	cbnz	r5, 8012494 <rmw_uxrce_init_wait_set_memory+0x38>
 8012468:	231c      	movs	r3, #28
 801246a:	e9c0 5500 	strd	r5, r5, [r0]
 801246e:	6083      	str	r3, [r0, #8]
 8012470:	f240 1301 	movw	r3, #257	@ 0x101
 8012474:	4617      	mov	r7, r2
 8012476:	8183      	strh	r3, [r0, #12]
 8012478:	460c      	mov	r4, r1
 801247a:	46a8      	mov	r8, r5
 801247c:	4621      	mov	r1, r4
 801247e:	4630      	mov	r0, r6
 8012480:	3501      	adds	r5, #1
 8012482:	f009 f975 	bl	801b770 <put_memory>
 8012486:	42af      	cmp	r7, r5
 8012488:	60a4      	str	r4, [r4, #8]
 801248a:	f884 800c 	strb.w	r8, [r4, #12]
 801248e:	f104 041c 	add.w	r4, r4, #28
 8012492:	d1f3      	bne.n	801247c <rmw_uxrce_init_wait_set_memory+0x20>
 8012494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop

0801249c <rmw_uxrce_init_guard_condition_memory>:
 801249c:	b1e2      	cbz	r2, 80124d8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801249e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a2:	7b05      	ldrb	r5, [r0, #12]
 80124a4:	4606      	mov	r6, r0
 80124a6:	b9ad      	cbnz	r5, 80124d4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80124a8:	2320      	movs	r3, #32
 80124aa:	e9c0 5500 	strd	r5, r5, [r0]
 80124ae:	6083      	str	r3, [r0, #8]
 80124b0:	f240 1301 	movw	r3, #257	@ 0x101
 80124b4:	4617      	mov	r7, r2
 80124b6:	8183      	strh	r3, [r0, #12]
 80124b8:	460c      	mov	r4, r1
 80124ba:	46a8      	mov	r8, r5
 80124bc:	4621      	mov	r1, r4
 80124be:	4630      	mov	r0, r6
 80124c0:	3501      	adds	r5, #1
 80124c2:	f009 f955 	bl	801b770 <put_memory>
 80124c6:	42af      	cmp	r7, r5
 80124c8:	60a4      	str	r4, [r4, #8]
 80124ca:	f884 800c 	strb.w	r8, [r4, #12]
 80124ce:	f104 0420 	add.w	r4, r4, #32
 80124d2:	d1f3      	bne.n	80124bc <rmw_uxrce_init_guard_condition_memory+0x20>
 80124d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop

080124dc <rmw_uxrce_fini_session_memory>:
 80124dc:	4601      	mov	r1, r0
 80124de:	4801      	ldr	r0, [pc, #4]	@ (80124e4 <rmw_uxrce_fini_session_memory+0x8>)
 80124e0:	f009 b946 	b.w	801b770 <put_memory>
 80124e4:	2001f508 	.word	0x2001f508

080124e8 <rmw_uxrce_fini_node_memory>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	4604      	mov	r4, r0
 80124ec:	6800      	ldr	r0, [r0, #0]
 80124ee:	b128      	cbz	r0, 80124fc <rmw_uxrce_fini_node_memory+0x14>
 80124f0:	4b07      	ldr	r3, [pc, #28]	@ (8012510 <rmw_uxrce_fini_node_memory+0x28>)
 80124f2:	6819      	ldr	r1, [r3, #0]
 80124f4:	f7ed fe94 	bl	8000220 <strcmp>
 80124f8:	b940      	cbnz	r0, 801250c <rmw_uxrce_fini_node_memory+0x24>
 80124fa:	6020      	str	r0, [r4, #0]
 80124fc:	6861      	ldr	r1, [r4, #4]
 80124fe:	b129      	cbz	r1, 801250c <rmw_uxrce_fini_node_memory+0x24>
 8012500:	2500      	movs	r5, #0
 8012502:	4804      	ldr	r0, [pc, #16]	@ (8012514 <rmw_uxrce_fini_node_memory+0x2c>)
 8012504:	610d      	str	r5, [r1, #16]
 8012506:	f009 f933 	bl	801b770 <put_memory>
 801250a:	6065      	str	r5, [r4, #4]
 801250c:	bd38      	pop	{r3, r4, r5, pc}
 801250e:	bf00      	nop
 8012510:	08021774 	.word	0x08021774
 8012514:	2001df4c 	.word	0x2001df4c

08012518 <rmw_uxrce_fini_publisher_memory>:
 8012518:	b510      	push	{r4, lr}
 801251a:	4604      	mov	r4, r0
 801251c:	6800      	ldr	r0, [r0, #0]
 801251e:	b128      	cbz	r0, 801252c <rmw_uxrce_fini_publisher_memory+0x14>
 8012520:	4b06      	ldr	r3, [pc, #24]	@ (801253c <rmw_uxrce_fini_publisher_memory+0x24>)
 8012522:	6819      	ldr	r1, [r3, #0]
 8012524:	f7ed fe7c 	bl	8000220 <strcmp>
 8012528:	b938      	cbnz	r0, 801253a <rmw_uxrce_fini_publisher_memory+0x22>
 801252a:	6020      	str	r0, [r4, #0]
 801252c:	6861      	ldr	r1, [r4, #4]
 801252e:	b121      	cbz	r1, 801253a <rmw_uxrce_fini_publisher_memory+0x22>
 8012530:	4803      	ldr	r0, [pc, #12]	@ (8012540 <rmw_uxrce_fini_publisher_memory+0x28>)
 8012532:	f009 f91d 	bl	801b770 <put_memory>
 8012536:	2300      	movs	r3, #0
 8012538:	6063      	str	r3, [r4, #4]
 801253a:	bd10      	pop	{r4, pc}
 801253c:	08021774 	.word	0x08021774
 8012540:	2001de98 	.word	0x2001de98

08012544 <rmw_uxrce_fini_subscription_memory>:
 8012544:	b510      	push	{r4, lr}
 8012546:	4604      	mov	r4, r0
 8012548:	6800      	ldr	r0, [r0, #0]
 801254a:	b128      	cbz	r0, 8012558 <rmw_uxrce_fini_subscription_memory+0x14>
 801254c:	4b06      	ldr	r3, [pc, #24]	@ (8012568 <rmw_uxrce_fini_subscription_memory+0x24>)
 801254e:	6819      	ldr	r1, [r3, #0]
 8012550:	f7ed fe66 	bl	8000220 <strcmp>
 8012554:	b938      	cbnz	r0, 8012566 <rmw_uxrce_fini_subscription_memory+0x22>
 8012556:	6020      	str	r0, [r4, #0]
 8012558:	6861      	ldr	r1, [r4, #4]
 801255a:	b121      	cbz	r1, 8012566 <rmw_uxrce_fini_subscription_memory+0x22>
 801255c:	4803      	ldr	r0, [pc, #12]	@ (801256c <rmw_uxrce_fini_subscription_memory+0x28>)
 801255e:	f009 f907 	bl	801b770 <put_memory>
 8012562:	2300      	movs	r3, #0
 8012564:	6063      	str	r3, [r4, #4]
 8012566:	bd10      	pop	{r4, pc}
 8012568:	08021774 	.word	0x08021774
 801256c:	2001d618 	.word	0x2001d618

08012570 <rmw_uxrce_fini_service_memory>:
 8012570:	b510      	push	{r4, lr}
 8012572:	4604      	mov	r4, r0
 8012574:	6800      	ldr	r0, [r0, #0]
 8012576:	b128      	cbz	r0, 8012584 <rmw_uxrce_fini_service_memory+0x14>
 8012578:	4b06      	ldr	r3, [pc, #24]	@ (8012594 <rmw_uxrce_fini_service_memory+0x24>)
 801257a:	6819      	ldr	r1, [r3, #0]
 801257c:	f7ed fe50 	bl	8000220 <strcmp>
 8012580:	b938      	cbnz	r0, 8012592 <rmw_uxrce_fini_service_memory+0x22>
 8012582:	6020      	str	r0, [r4, #0]
 8012584:	6861      	ldr	r1, [r4, #4]
 8012586:	b121      	cbz	r1, 8012592 <rmw_uxrce_fini_service_memory+0x22>
 8012588:	4803      	ldr	r0, [pc, #12]	@ (8012598 <rmw_uxrce_fini_service_memory+0x28>)
 801258a:	f009 f8f1 	bl	801b770 <put_memory>
 801258e:	2300      	movs	r3, #0
 8012590:	6063      	str	r3, [r4, #4]
 8012592:	bd10      	pop	{r4, pc}
 8012594:	08021774 	.word	0x08021774
 8012598:	2001d1d0 	.word	0x2001d1d0

0801259c <rmw_uxrce_fini_client_memory>:
 801259c:	b510      	push	{r4, lr}
 801259e:	4604      	mov	r4, r0
 80125a0:	6800      	ldr	r0, [r0, #0]
 80125a2:	b128      	cbz	r0, 80125b0 <rmw_uxrce_fini_client_memory+0x14>
 80125a4:	4b06      	ldr	r3, [pc, #24]	@ (80125c0 <rmw_uxrce_fini_client_memory+0x24>)
 80125a6:	6819      	ldr	r1, [r3, #0]
 80125a8:	f7ed fe3a 	bl	8000220 <strcmp>
 80125ac:	b938      	cbnz	r0, 80125be <rmw_uxrce_fini_client_memory+0x22>
 80125ae:	6020      	str	r0, [r4, #0]
 80125b0:	6861      	ldr	r1, [r4, #4]
 80125b2:	b121      	cbz	r1, 80125be <rmw_uxrce_fini_client_memory+0x22>
 80125b4:	4803      	ldr	r0, [pc, #12]	@ (80125c4 <rmw_uxrce_fini_client_memory+0x28>)
 80125b6:	f009 f8db 	bl	801b770 <put_memory>
 80125ba:	2300      	movs	r3, #0
 80125bc:	6063      	str	r3, [r4, #4]
 80125be:	bd10      	pop	{r4, pc}
 80125c0:	08021774 	.word	0x08021774
 80125c4:	2001d0f8 	.word	0x2001d0f8

080125c8 <rmw_uxrce_fini_topic_memory>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	4604      	mov	r4, r0
 80125cc:	4621      	mov	r1, r4
 80125ce:	4803      	ldr	r0, [pc, #12]	@ (80125dc <rmw_uxrce_fini_topic_memory+0x14>)
 80125d0:	f009 f8ce 	bl	801b770 <put_memory>
 80125d4:	2300      	movs	r3, #0
 80125d6:	61a3      	str	r3, [r4, #24]
 80125d8:	bd10      	pop	{r4, pc}
 80125da:	bf00      	nop
 80125dc:	2001d01c 	.word	0x2001d01c

080125e0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80125e0:	b082      	sub	sp, #8
 80125e2:	b530      	push	{r4, r5, lr}
 80125e4:	4929      	ldr	r1, [pc, #164]	@ (801268c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80125e6:	ac03      	add	r4, sp, #12
 80125e8:	e884 000c 	stmia.w	r4, {r2, r3}
 80125ec:	680c      	ldr	r4, [r1, #0]
 80125ee:	461d      	mov	r5, r3
 80125f0:	4602      	mov	r2, r0
 80125f2:	2c00      	cmp	r4, #0
 80125f4:	d043      	beq.n	801267e <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 80125f6:	4620      	mov	r0, r4
 80125f8:	2100      	movs	r1, #0
 80125fa:	6883      	ldr	r3, [r0, #8]
 80125fc:	6840      	ldr	r0, [r0, #4]
 80125fe:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 8012602:	429a      	cmp	r2, r3
 8012604:	bf08      	it	eq
 8012606:	3101      	addeq	r1, #1
 8012608:	2800      	cmp	r0, #0
 801260a:	d1f6      	bne.n	80125fa <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 801260c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012610:	2b02      	cmp	r3, #2
 8012612:	d027      	beq.n	8012664 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 8012614:	d906      	bls.n	8012624 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8012616:	2b03      	cmp	r3, #3
 8012618:	d004      	beq.n	8012624 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801261a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801261e:	2000      	movs	r0, #0
 8012620:	b002      	add	sp, #8
 8012622:	4770      	bx	lr
 8012624:	b1fd      	cbz	r5, 8012666 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012626:	428d      	cmp	r5, r1
 8012628:	d81d      	bhi.n	8012666 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801262a:	2c00      	cmp	r4, #0
 801262c:	d0f5      	beq.n	801261a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801262e:	2000      	movs	r0, #0
 8012630:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012634:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8012638:	e001      	b.n	801263e <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 801263a:	6864      	ldr	r4, [r4, #4]
 801263c:	b1dc      	cbz	r4, 8012676 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801263e:	68a3      	ldr	r3, [r4, #8]
 8012640:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8012644:	428a      	cmp	r2, r1
 8012646:	d1f8      	bne.n	801263a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8012648:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801264c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8012650:	4561      	cmp	r1, ip
 8012652:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012656:	eb73 0e05 	sbcs.w	lr, r3, r5
 801265a:	daee      	bge.n	801263a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801265c:	468c      	mov	ip, r1
 801265e:	461d      	mov	r5, r3
 8012660:	4620      	mov	r0, r4
 8012662:	e7ea      	b.n	801263a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8012664:	b92d      	cbnz	r5, 8012672 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 8012666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801266a:	4808      	ldr	r0, [pc, #32]	@ (801268c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 801266c:	b002      	add	sp, #8
 801266e:	f009 b86f 	b.w	801b750 <get_memory>
 8012672:	428d      	cmp	r5, r1
 8012674:	d8f7      	bhi.n	8012666 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801267a:	b002      	add	sp, #8
 801267c:	4770      	bx	lr
 801267e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012682:	2b02      	cmp	r3, #2
 8012684:	d0ef      	beq.n	8012666 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012686:	d9ee      	bls.n	8012666 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012688:	4621      	mov	r1, r4
 801268a:	e7c4      	b.n	8012616 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 801268c:	2001ce68 	.word	0x2001ce68

08012690 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8012690:	4b11      	ldr	r3, [pc, #68]	@ (80126d8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	b1eb      	cbz	r3, 80126d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8012696:	b530      	push	{r4, r5, lr}
 8012698:	4684      	mov	ip, r0
 801269a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801269e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 80126a2:	2000      	movs	r0, #0
 80126a4:	e001      	b.n	80126aa <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	b193      	cbz	r3, 80126d0 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 80126aa:	689a      	ldr	r2, [r3, #8]
 80126ac:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80126b0:	458c      	cmp	ip, r1
 80126b2:	d1f8      	bne.n	80126a6 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80126b4:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80126b8:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80126bc:	42a1      	cmp	r1, r4
 80126be:	eb72 050e 	sbcs.w	r5, r2, lr
 80126c2:	daf0      	bge.n	80126a6 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80126c4:	4618      	mov	r0, r3
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	460c      	mov	r4, r1
 80126ca:	4696      	mov	lr, r2
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d1ec      	bne.n	80126aa <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80126d0:	bd30      	pop	{r4, r5, pc}
 80126d2:	4618      	mov	r0, r3
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	2001ce68 	.word	0x2001ce68
 80126dc:	00000000 	.word	0x00000000

080126e0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	4b3c      	ldr	r3, [pc, #240]	@ (80127d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80126e6:	ed2d 8b06 	vpush	{d8-d10}
 80126ea:	f8d3 8000 	ldr.w	r8, [r3]
 80126ee:	b08d      	sub	sp, #52	@ 0x34
 80126f0:	f7ff fd74 	bl	80121dc <rmw_uros_epoch_nanos>
 80126f4:	f1b8 0f00 	cmp.w	r8, #0
 80126f8:	d05c      	beq.n	80127b4 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 80126fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80126fe:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012702:	2b04      	cmp	r3, #4
 8012704:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 80127c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8012708:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 80127c8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801270c:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 80127d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8012710:	4683      	mov	fp, r0
 8012712:	ac04      	add	r4, sp, #16
 8012714:	468a      	mov	sl, r1
 8012716:	d03f      	beq.n	8012798 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8012718:	2b05      	cmp	r3, #5
 801271a:	d044      	beq.n	80127a6 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 801271c:	2b03      	cmp	r3, #3
 801271e:	d03b      	beq.n	8012798 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8012720:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012724:	ed8d ab06 	vstr	d10, [sp, #24]
 8012728:	ed8d 8b08 	vstr	d8, [sp, #32]
 801272c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8012730:	ab08      	add	r3, sp, #32
 8012732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012734:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012738:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801273c:	f008 fe22 	bl	801b384 <rmw_time_equal>
 8012740:	b118      	cbz	r0, 801274a <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 8012742:	ed8d 9b04 	vstr	d9, [sp, #16]
 8012746:	ed8d 8b06 	vstr	d8, [sp, #24]
 801274a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801274e:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 8012752:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 8012756:	f8d8 9004 	ldr.w	r9, [r8, #4]
 801275a:	f008 fe67 	bl	801b42c <rmw_time_total_nsec>
 801275e:	183f      	adds	r7, r7, r0
 8012760:	eb46 0601 	adc.w	r6, r6, r1
 8012764:	455f      	cmp	r7, fp
 8012766:	eb76 060a 	sbcs.w	r6, r6, sl
 801276a:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801276e:	db05      	blt.n	801277c <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 8012770:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8012774:	4593      	cmp	fp, r2
 8012776:	eb7a 0303 	sbcs.w	r3, sl, r3
 801277a:	da03      	bge.n	8012784 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 801277c:	4816      	ldr	r0, [pc, #88]	@ (80127d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801277e:	4641      	mov	r1, r8
 8012780:	f008 fff6 	bl	801b770 <put_memory>
 8012784:	f1b9 0f00 	cmp.w	r9, #0
 8012788:	d014      	beq.n	80127b4 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 801278a:	46c8      	mov	r8, r9
 801278c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012790:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012794:	2b04      	cmp	r3, #4
 8012796:	d1bf      	bne.n	8012718 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 8012798:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801279c:	3340      	adds	r3, #64	@ 0x40
 801279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127a4:	e7c0      	b.n	8012728 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 80127a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80127aa:	3348      	adds	r3, #72	@ 0x48
 80127ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127b2:	e7b9      	b.n	8012728 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 80127b4:	b00d      	add	sp, #52	@ 0x34
 80127b6:	ecbd 8b06 	vpop	{d8-d10}
 80127ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127be:	bf00      	nop
	...
 80127c8:	00000001 	.word	0x00000001
 80127cc:	00000000 	.word	0x00000000
 80127d0:	0000001e 	.word	0x0000001e
 80127d4:	00000000 	.word	0x00000000
 80127d8:	2001ce68 	.word	0x2001ce68

080127dc <run_xrce_session>:
 80127dc:	b500      	push	{lr}
 80127de:	f891 c002 	ldrb.w	ip, [r1, #2]
 80127e2:	b087      	sub	sp, #28
 80127e4:	f1bc 0f01 	cmp.w	ip, #1
 80127e8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80127ec:	d00f      	beq.n	801280e <run_xrce_session+0x32>
 80127ee:	4619      	mov	r1, r3
 80127f0:	2301      	movs	r3, #1
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	f10d 020e 	add.w	r2, sp, #14
 80127f8:	f10d 0317 	add.w	r3, sp, #23
 80127fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012800:	f003 fbb8 	bl	8015f74 <uxr_run_session_until_all_status>
 8012804:	b100      	cbz	r0, 8012808 <run_xrce_session+0x2c>
 8012806:	2001      	movs	r0, #1
 8012808:	b007      	add	sp, #28
 801280a:	f85d fb04 	ldr.w	pc, [sp], #4
 801280e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012812:	f002 fff1 	bl	80157f8 <uxr_flash_output_streams>
 8012816:	2001      	movs	r0, #1
 8012818:	e7f6      	b.n	8012808 <run_xrce_session+0x2c>
 801281a:	bf00      	nop

0801281c <convert_qos_profile>:
 801281c:	780a      	ldrb	r2, [r1, #0]
 801281e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012822:	f1a2 0202 	sub.w	r2, r2, #2
 8012826:	fab2 f282 	clz	r2, r2
 801282a:	0952      	lsrs	r2, r2, #5
 801282c:	7082      	strb	r2, [r0, #2]
 801282e:	7a4a      	ldrb	r2, [r1, #9]
 8012830:	8889      	ldrh	r1, [r1, #4]
 8012832:	8081      	strh	r1, [r0, #4]
 8012834:	f1a2 0202 	sub.w	r2, r2, #2
 8012838:	f1ac 0c02 	sub.w	ip, ip, #2
 801283c:	fab2 f282 	clz	r2, r2
 8012840:	fabc fc8c 	clz	ip, ip
 8012844:	0952      	lsrs	r2, r2, #5
 8012846:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801284a:	0052      	lsls	r2, r2, #1
 801284c:	f880 c001 	strb.w	ip, [r0, #1]
 8012850:	7002      	strb	r2, [r0, #0]
 8012852:	4770      	bx	lr

08012854 <generate_type_name>:
 8012854:	b530      	push	{r4, r5, lr}
 8012856:	2300      	movs	r3, #0
 8012858:	700b      	strb	r3, [r1, #0]
 801285a:	6803      	ldr	r3, [r0, #0]
 801285c:	b087      	sub	sp, #28
 801285e:	4614      	mov	r4, r2
 8012860:	b1d3      	cbz	r3, 8012898 <generate_type_name+0x44>
 8012862:	4a0f      	ldr	r2, [pc, #60]	@ (80128a0 <generate_type_name+0x4c>)
 8012864:	4615      	mov	r5, r2
 8012866:	9203      	str	r2, [sp, #12]
 8012868:	9500      	str	r5, [sp, #0]
 801286a:	6842      	ldr	r2, [r0, #4]
 801286c:	480d      	ldr	r0, [pc, #52]	@ (80128a4 <generate_type_name+0x50>)
 801286e:	9001      	str	r0, [sp, #4]
 8012870:	4608      	mov	r0, r1
 8012872:	490d      	ldr	r1, [pc, #52]	@ (80128a8 <generate_type_name+0x54>)
 8012874:	9204      	str	r2, [sp, #16]
 8012876:	9105      	str	r1, [sp, #20]
 8012878:	9102      	str	r1, [sp, #8]
 801287a:	4a0c      	ldr	r2, [pc, #48]	@ (80128ac <generate_type_name+0x58>)
 801287c:	4621      	mov	r1, r4
 801287e:	f00b faf9 	bl	801de74 <sniprintf>
 8012882:	2800      	cmp	r0, #0
 8012884:	db05      	blt.n	8012892 <generate_type_name+0x3e>
 8012886:	4284      	cmp	r4, r0
 8012888:	bfd4      	ite	le
 801288a:	2000      	movle	r0, #0
 801288c:	2001      	movgt	r0, #1
 801288e:	b007      	add	sp, #28
 8012890:	bd30      	pop	{r4, r5, pc}
 8012892:	2000      	movs	r0, #0
 8012894:	b007      	add	sp, #28
 8012896:	bd30      	pop	{r4, r5, pc}
 8012898:	4b05      	ldr	r3, [pc, #20]	@ (80128b0 <generate_type_name+0x5c>)
 801289a:	4a01      	ldr	r2, [pc, #4]	@ (80128a0 <generate_type_name+0x4c>)
 801289c:	461d      	mov	r5, r3
 801289e:	e7e2      	b.n	8012866 <generate_type_name+0x12>
 80128a0:	08020f90 	.word	0x08020f90
 80128a4:	08020fa8 	.word	0x08020fa8
 80128a8:	08020fa4 	.word	0x08020fa4
 80128ac:	08020f94 	.word	0x08020f94
 80128b0:	08021a84 	.word	0x08021a84

080128b4 <generate_topic_name>:
 80128b4:	b510      	push	{r4, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	4614      	mov	r4, r2
 80128ba:	9000      	str	r0, [sp, #0]
 80128bc:	4b08      	ldr	r3, [pc, #32]	@ (80128e0 <generate_topic_name+0x2c>)
 80128be:	4a09      	ldr	r2, [pc, #36]	@ (80128e4 <generate_topic_name+0x30>)
 80128c0:	4608      	mov	r0, r1
 80128c2:	4621      	mov	r1, r4
 80128c4:	f00b fad6 	bl	801de74 <sniprintf>
 80128c8:	2800      	cmp	r0, #0
 80128ca:	db05      	blt.n	80128d8 <generate_topic_name+0x24>
 80128cc:	4284      	cmp	r4, r0
 80128ce:	bfd4      	ite	le
 80128d0:	2000      	movle	r0, #0
 80128d2:	2001      	movgt	r0, #1
 80128d4:	b002      	add	sp, #8
 80128d6:	bd10      	pop	{r4, pc}
 80128d8:	2000      	movs	r0, #0
 80128da:	b002      	add	sp, #8
 80128dc:	bd10      	pop	{r4, pc}
 80128de:	bf00      	nop
 80128e0:	08020fac 	.word	0x08020fac
 80128e4:	08020a0c 	.word	0x08020a0c

080128e8 <is_uxrce_rmw_identifier_valid>:
 80128e8:	b510      	push	{r4, lr}
 80128ea:	4604      	mov	r4, r0
 80128ec:	b140      	cbz	r0, 8012900 <is_uxrce_rmw_identifier_valid+0x18>
 80128ee:	f008 ffb5 	bl	801b85c <rmw_get_implementation_identifier>
 80128f2:	4601      	mov	r1, r0
 80128f4:	4620      	mov	r0, r4
 80128f6:	f7ed fc93 	bl	8000220 <strcmp>
 80128fa:	fab0 f080 	clz	r0, r0
 80128fe:	0940      	lsrs	r0, r0, #5
 8012900:	bd10      	pop	{r4, pc}
 8012902:	bf00      	nop

08012904 <get_message_typesupport_handle>:
 8012904:	6883      	ldr	r3, [r0, #8]
 8012906:	4718      	bx	r3

08012908 <get_message_typesupport_handle_function>:
 8012908:	b510      	push	{r4, lr}
 801290a:	4604      	mov	r4, r0
 801290c:	6800      	ldr	r0, [r0, #0]
 801290e:	f7ed fc87 	bl	8000220 <strcmp>
 8012912:	2800      	cmp	r0, #0
 8012914:	bf0c      	ite	eq
 8012916:	4620      	moveq	r0, r4
 8012918:	2000      	movne	r0, #0
 801291a:	bd10      	pop	{r4, pc}

0801291c <rosidl_runtime_c__double__Sequence__init>:
 801291c:	b1b0      	cbz	r0, 801294c <rosidl_runtime_c__double__Sequence__init+0x30>
 801291e:	b530      	push	{r4, r5, lr}
 8012920:	460d      	mov	r5, r1
 8012922:	b087      	sub	sp, #28
 8012924:	4604      	mov	r4, r0
 8012926:	b931      	cbnz	r1, 8012936 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8012928:	4608      	mov	r0, r1
 801292a:	e9c4 0500 	strd	r0, r5, [r4]
 801292e:	60a5      	str	r5, [r4, #8]
 8012930:	2001      	movs	r0, #1
 8012932:	b007      	add	sp, #28
 8012934:	bd30      	pop	{r4, r5, pc}
 8012936:	a801      	add	r0, sp, #4
 8012938:	f7fe f8e2 	bl	8010b00 <rcutils_get_default_allocator>
 801293c:	9b01      	ldr	r3, [sp, #4]
 801293e:	9905      	ldr	r1, [sp, #20]
 8012940:	00e8      	lsls	r0, r5, #3
 8012942:	4798      	blx	r3
 8012944:	2800      	cmp	r0, #0
 8012946:	d1f0      	bne.n	801292a <rosidl_runtime_c__double__Sequence__init+0xe>
 8012948:	2000      	movs	r0, #0
 801294a:	e7f2      	b.n	8012932 <rosidl_runtime_c__double__Sequence__init+0x16>
 801294c:	2000      	movs	r0, #0
 801294e:	4770      	bx	lr

08012950 <rosidl_runtime_c__double__Sequence__fini>:
 8012950:	b188      	cbz	r0, 8012976 <rosidl_runtime_c__double__Sequence__fini+0x26>
 8012952:	b510      	push	{r4, lr}
 8012954:	6803      	ldr	r3, [r0, #0]
 8012956:	b086      	sub	sp, #24
 8012958:	4604      	mov	r4, r0
 801295a:	b153      	cbz	r3, 8012972 <rosidl_runtime_c__double__Sequence__fini+0x22>
 801295c:	a801      	add	r0, sp, #4
 801295e:	f7fe f8cf 	bl	8010b00 <rcutils_get_default_allocator>
 8012962:	9b02      	ldr	r3, [sp, #8]
 8012964:	9905      	ldr	r1, [sp, #20]
 8012966:	6820      	ldr	r0, [r4, #0]
 8012968:	4798      	blx	r3
 801296a:	2300      	movs	r3, #0
 801296c:	e9c4 3300 	strd	r3, r3, [r4]
 8012970:	60a3      	str	r3, [r4, #8]
 8012972:	b006      	add	sp, #24
 8012974:	bd10      	pop	{r4, pc}
 8012976:	4770      	bx	lr

08012978 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	6805      	ldr	r5, [r0, #0]
 801297e:	4604      	mov	r4, r0
 8012980:	4628      	mov	r0, r5
 8012982:	460e      	mov	r6, r1
 8012984:	f7ed fc4c 	bl	8000220 <strcmp>
 8012988:	b308      	cbz	r0, 80129ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 801298a:	4b12      	ldr	r3, [pc, #72]	@ (80129d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 801298c:	4628      	mov	r0, r5
 801298e:	6819      	ldr	r1, [r3, #0]
 8012990:	f7ed fc46 	bl	8000220 <strcmp>
 8012994:	4605      	mov	r5, r0
 8012996:	b980      	cbnz	r0, 80129ba <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8012998:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801299c:	f8d8 4000 	ldr.w	r4, [r8]
 80129a0:	b1ac      	cbz	r4, 80129ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 80129a2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80129a6:	3f04      	subs	r7, #4
 80129a8:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80129ac:	4631      	mov	r1, r6
 80129ae:	f7ed fc37 	bl	8000220 <strcmp>
 80129b2:	b128      	cbz	r0, 80129c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 80129b4:	3501      	adds	r5, #1
 80129b6:	42a5      	cmp	r5, r4
 80129b8:	d1f6      	bne.n	80129a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 80129ba:	2000      	movs	r0, #0
 80129bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80129c4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80129c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129cc:	4718      	bx	r3
 80129ce:	4620      	mov	r0, r4
 80129d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129d4:	2000019c 	.word	0x2000019c

080129d8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80129d8:	4b04      	ldr	r3, [pc, #16]	@ (80129ec <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	b10a      	cbz	r2, 80129e2 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 80129de:	4803      	ldr	r0, [pc, #12]	@ (80129ec <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80129e0:	4770      	bx	lr
 80129e2:	4a03      	ldr	r2, [pc, #12]	@ (80129f0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 80129e4:	4801      	ldr	r0, [pc, #4]	@ (80129ec <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80129e6:	6812      	ldr	r2, [r2, #0]
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	4770      	bx	lr
 80129ec:	200001a4 	.word	0x200001a4
 80129f0:	2000019c 	.word	0x2000019c

080129f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80129f4:	4a02      	ldr	r2, [pc, #8]	@ (8012a00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 80129f6:	4b03      	ldr	r3, [pc, #12]	@ (8012a04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 80129f8:	6812      	ldr	r2, [r2, #0]
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	2000019c 	.word	0x2000019c
 8012a04:	200001a4 	.word	0x200001a4

08012a08 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8012a08:	2009      	movs	r0, #9
 8012a0a:	4770      	bx	lr

08012a0c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8012a0c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop

08012a14 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8012a14:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a18:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012a1c:	e9c2 0100 	strd	r0, r1, [r2]
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop

08012a24 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8012a24:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012a28:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a2c:	e9c0 2300 	strd	r2, r3, [r0]
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop

08012a34 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8012a34:	f009 bb3c 	b.w	801c0b0 <sensor_msgs__msg__Imu__init>

08012a38 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 8012a38:	f009 bb86 	b.w	801c148 <sensor_msgs__msg__Imu__fini>

08012a3c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8012a3c:	2009      	movs	r0, #9
 8012a3e:	4770      	bx	lr

08012a40 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 8012a40:	2009      	movs	r0, #9
 8012a42:	4770      	bx	lr

08012a44 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8012a44:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a48:	4770      	bx	lr
 8012a4a:	bf00      	nop

08012a4c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 8012a4c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop

08012a54 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 8012a54:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop

08012a5c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 8012a5c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop

08012a64 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8012a64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop

08012a6c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8012a6c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a70:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012a74:	e9c2 0100 	strd	r0, r1, [r2]
 8012a78:	4770      	bx	lr
 8012a7a:	bf00      	nop

08012a7c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8012a7c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012a80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a84:	e9c0 2300 	strd	r2, r3, [r0]
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop

08012a8c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8012a8c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a90:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012a94:	e9c2 0100 	strd	r0, r1, [r2]
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop

08012a9c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8012a9c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012aa0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012aa4:	e9c0 2300 	strd	r2, r3, [r0]
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop

08012aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012aac:	b510      	push	{r4, lr}
 8012aae:	f000 f90b 	bl	8012cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012ab2:	4c0b      	ldr	r4, [pc, #44]	@ (8012ae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8012ab4:	60e0      	str	r0, [r4, #12]
 8012ab6:	f000 fb1f 	bl	80130f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8012aba:	64a0      	str	r0, [r4, #72]	@ 0x48
 8012abc:	f000 fb2e 	bl	801311c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012ac0:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8012ac4:	f000 fb2a 	bl	801311c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012ac8:	4b06      	ldr	r3, [pc, #24]	@ (8012ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8012aca:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	b10a      	cbz	r2, 8012ad6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8012ad2:	4804      	ldr	r0, [pc, #16]	@ (8012ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8012ad4:	bd10      	pop	{r4, pc}
 8012ad6:	4a04      	ldr	r2, [pc, #16]	@ (8012ae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8012ad8:	4802      	ldr	r0, [pc, #8]	@ (8012ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8012ada:	6812      	ldr	r2, [r2, #0]
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	bd10      	pop	{r4, pc}
 8012ae0:	200001dc 	.word	0x200001dc
 8012ae4:	200001c4 	.word	0x200001c4
 8012ae8:	200001a0 	.word	0x200001a0

08012aec <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8012aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aee:	4607      	mov	r7, r0
 8012af0:	460e      	mov	r6, r1
 8012af2:	f000 f90d 	bl	8012d10 <get_serialized_size_std_msgs__msg__Header>
 8012af6:	1834      	adds	r4, r6, r0
 8012af8:	4621      	mov	r1, r4
 8012afa:	f107 0018 	add.w	r0, r7, #24
 8012afe:	f000 fb1b 	bl	8013138 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8012b02:	4404      	add	r4, r0
 8012b04:	2108      	movs	r1, #8
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7fb ff40 	bl	800e98c <ucdr_alignment>
 8012b0c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8012b10:	4425      	add	r5, r4
 8012b12:	4629      	mov	r1, r5
 8012b14:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012b18:	f000 fbc6 	bl	80132a8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012b1c:	4405      	add	r5, r0
 8012b1e:	2108      	movs	r1, #8
 8012b20:	4628      	mov	r0, r5
 8012b22:	f7fb ff33 	bl	800e98c <ucdr_alignment>
 8012b26:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8012b2a:	442c      	add	r4, r5
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8012b32:	f000 fbb9 	bl	80132a8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8012b36:	4404      	add	r4, r0
 8012b38:	2108      	movs	r1, #8
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	f7fb ff26 	bl	800e98c <ucdr_alignment>
 8012b40:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 8012b44:	4430      	add	r0, r6
 8012b46:	4420      	add	r0, r4
 8012b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b4a:	bf00      	nop

08012b4c <get_serialized_size_sensor_msgs__msg__Imu>:
 8012b4c:	b108      	cbz	r0, 8012b52 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8012b4e:	f7ff bfcd 	b.w	8012aec <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8012b52:	4770      	bx	lr

08012b54 <_Imu__get_serialized_size>:
 8012b54:	b110      	cbz	r0, 8012b5c <_Imu__get_serialized_size+0x8>
 8012b56:	2100      	movs	r1, #0
 8012b58:	f7ff bfc8 	b.w	8012aec <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop

08012b60 <_Imu__cdr_deserialize>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	460c      	mov	r4, r1
 8012b64:	b399      	cbz	r1, 8012bce <_Imu__cdr_deserialize+0x6e>
 8012b66:	4605      	mov	r5, r0
 8012b68:	f000 f954 	bl	8012e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012b6c:	6843      	ldr	r3, [r0, #4]
 8012b6e:	4621      	mov	r1, r4
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	4628      	mov	r0, r5
 8012b74:	4798      	blx	r3
 8012b76:	f000 fb93 	bl	80132a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8012b7a:	6843      	ldr	r3, [r0, #4]
 8012b7c:	f104 0118 	add.w	r1, r4, #24
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	4628      	mov	r0, r5
 8012b84:	4798      	blx	r3
 8012b86:	2209      	movs	r2, #9
 8012b88:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	f000 fdef 	bl	8013770 <ucdr_deserialize_array_double>
 8012b92:	f000 fc15 	bl	80133c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012b96:	6843      	ldr	r3, [r0, #4]
 8012b98:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	4798      	blx	r3
 8012ba2:	2209      	movs	r2, #9
 8012ba4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8012ba8:	4628      	mov	r0, r5
 8012baa:	f000 fde1 	bl	8013770 <ucdr_deserialize_array_double>
 8012bae:	f000 fc07 	bl	80133c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012bb2:	6843      	ldr	r3, [r0, #4]
 8012bb4:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	4628      	mov	r0, r5
 8012bbc:	4798      	blx	r3
 8012bbe:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	2209      	movs	r2, #9
 8012bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bca:	f000 bdd1 	b.w	8013770 <ucdr_deserialize_array_double>
 8012bce:	4608      	mov	r0, r1
 8012bd0:	bd38      	pop	{r3, r4, r5, pc}
 8012bd2:	bf00      	nop

08012bd4 <_Imu__cdr_serialize>:
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d035      	beq.n	8012c44 <_Imu__cdr_serialize+0x70>
 8012bd8:	b538      	push	{r3, r4, r5, lr}
 8012bda:	4604      	mov	r4, r0
 8012bdc:	460d      	mov	r5, r1
 8012bde:	f000 f919 	bl	8012e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012be2:	6843      	ldr	r3, [r0, #4]
 8012be4:	4629      	mov	r1, r5
 8012be6:	689b      	ldr	r3, [r3, #8]
 8012be8:	4620      	mov	r0, r4
 8012bea:	4798      	blx	r3
 8012bec:	f000 fb58 	bl	80132a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8012bf0:	6843      	ldr	r3, [r0, #4]
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	f104 0018 	add.w	r0, r4, #24
 8012bfa:	4798      	blx	r3
 8012bfc:	2209      	movs	r2, #9
 8012bfe:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012c02:	4628      	mov	r0, r5
 8012c04:	f000 fd0c 	bl	8013620 <ucdr_serialize_array_double>
 8012c08:	f000 fbda 	bl	80133c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012c0c:	6843      	ldr	r3, [r0, #4]
 8012c0e:	4629      	mov	r1, r5
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8012c16:	4798      	blx	r3
 8012c18:	2209      	movs	r2, #9
 8012c1a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8012c1e:	4628      	mov	r0, r5
 8012c20:	f000 fcfe 	bl	8013620 <ucdr_serialize_array_double>
 8012c24:	f000 fbcc 	bl	80133c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012c28:	6843      	ldr	r3, [r0, #4]
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8012c32:	4798      	blx	r3
 8012c34:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8012c38:	4628      	mov	r0, r5
 8012c3a:	2209      	movs	r2, #9
 8012c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c40:	f000 bcee 	b.w	8013620 <ucdr_serialize_array_double>
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop

08012c48 <max_serialized_size_sensor_msgs__msg__Imu>:
 8012c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	7003      	strb	r3, [r0, #0]
 8012c4e:	4607      	mov	r7, r0
 8012c50:	460e      	mov	r6, r1
 8012c52:	f000 f8d5 	bl	8012e00 <max_serialized_size_std_msgs__msg__Header>
 8012c56:	1834      	adds	r4, r6, r0
 8012c58:	4621      	mov	r1, r4
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	f000 fafe 	bl	801325c <max_serialized_size_geometry_msgs__msg__Quaternion>
 8012c60:	4404      	add	r4, r0
 8012c62:	2108      	movs	r1, #8
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7fb fe91 	bl	800e98c <ucdr_alignment>
 8012c6a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8012c6e:	4425      	add	r5, r4
 8012c70:	4629      	mov	r1, r5
 8012c72:	4638      	mov	r0, r7
 8012c74:	f000 fb8a 	bl	801338c <max_serialized_size_geometry_msgs__msg__Vector3>
 8012c78:	4405      	add	r5, r0
 8012c7a:	2108      	movs	r1, #8
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f7fb fe85 	bl	800e98c <ucdr_alignment>
 8012c82:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8012c86:	442c      	add	r4, r5
 8012c88:	4621      	mov	r1, r4
 8012c8a:	4638      	mov	r0, r7
 8012c8c:	f000 fb7e 	bl	801338c <max_serialized_size_geometry_msgs__msg__Vector3>
 8012c90:	4404      	add	r4, r0
 8012c92:	2108      	movs	r1, #8
 8012c94:	4620      	mov	r0, r4
 8012c96:	f7fb fe79 	bl	800e98c <ucdr_alignment>
 8012c9a:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 8012c9e:	4430      	add	r0, r6
 8012ca0:	4420      	add	r0, r4
 8012ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ca4 <_Imu__max_serialized_size>:
 8012ca4:	b500      	push	{lr}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	2100      	movs	r1, #0
 8012caa:	f10d 0007 	add.w	r0, sp, #7
 8012cae:	f7ff ffcb 	bl	8012c48 <max_serialized_size_sensor_msgs__msg__Imu>
 8012cb2:	b003      	add	sp, #12
 8012cb4:	f85d fb04 	ldr.w	pc, [sp], #4

08012cb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012cb8:	4800      	ldr	r0, [pc, #0]	@ (8012cbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 8012cba:	4770      	bx	lr
 8012cbc:	20000380 	.word	0x20000380

08012cc0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8012cc0:	f009 ba9e 	b.w	801c200 <std_msgs__msg__Header__init>

08012cc4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012cc4:	f009 babc 	b.w	801c240 <std_msgs__msg__Header__fini>

08012cc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012cc8:	b508      	push	{r3, lr}
 8012cca:	f000 f99b 	bl	8013004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012cce:	4b06      	ldr	r3, [pc, #24]	@ (8012ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012cd0:	4906      	ldr	r1, [pc, #24]	@ (8012cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	60c8      	str	r0, [r1, #12]
 8012cd6:	b10a      	cbz	r2, 8012cdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8012cd8:	4803      	ldr	r0, [pc, #12]	@ (8012ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012cda:	bd08      	pop	{r3, pc}
 8012cdc:	4a04      	ldr	r2, [pc, #16]	@ (8012cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8012cde:	4802      	ldr	r0, [pc, #8]	@ (8012ce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012ce0:	6812      	ldr	r2, [r2, #0]
 8012ce2:	601a      	str	r2, [r3, #0]
 8012ce4:	bd08      	pop	{r3, pc}
 8012ce6:	bf00      	nop
 8012ce8:	200003b4 	.word	0x200003b4
 8012cec:	200003cc 	.word	0x200003cc
 8012cf0:	200001a0 	.word	0x200001a0

08012cf4 <_Header__max_serialized_size>:
 8012cf4:	b500      	push	{lr}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	f10d 0007 	add.w	r0, sp, #7
 8012d00:	f88d 3007 	strb.w	r3, [sp, #7]
 8012d04:	f000 f9dc 	bl	80130c0 <max_serialized_size_builtin_interfaces__msg__Time>
 8012d08:	b003      	add	sp, #12
 8012d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d0e:	bf00      	nop

08012d10 <get_serialized_size_std_msgs__msg__Header>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	4605      	mov	r5, r0
 8012d14:	b168      	cbz	r0, 8012d32 <get_serialized_size_std_msgs__msg__Header+0x22>
 8012d16:	460c      	mov	r4, r1
 8012d18:	f000 f982 	bl	8013020 <get_serialized_size_builtin_interfaces__msg__Time>
 8012d1c:	1826      	adds	r6, r4, r0
 8012d1e:	2104      	movs	r1, #4
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7fb fe33 	bl	800e98c <ucdr_alignment>
 8012d26:	68eb      	ldr	r3, [r5, #12]
 8012d28:	f1c4 0405 	rsb	r4, r4, #5
 8012d2c:	441c      	add	r4, r3
 8012d2e:	4404      	add	r4, r0
 8012d30:	19a0      	adds	r0, r4, r6
 8012d32:	bd70      	pop	{r4, r5, r6, pc}

08012d34 <_Header__cdr_deserialize>:
 8012d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d36:	460c      	mov	r4, r1
 8012d38:	b083      	sub	sp, #12
 8012d3a:	b1e1      	cbz	r1, 8012d76 <_Header__cdr_deserialize+0x42>
 8012d3c:	4606      	mov	r6, r0
 8012d3e:	f000 f9d3 	bl	80130e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012d42:	6843      	ldr	r3, [r0, #4]
 8012d44:	4621      	mov	r1, r4
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	4630      	mov	r0, r6
 8012d4a:	4798      	blx	r3
 8012d4c:	6927      	ldr	r7, [r4, #16]
 8012d4e:	68a1      	ldr	r1, [r4, #8]
 8012d50:	ab01      	add	r3, sp, #4
 8012d52:	463a      	mov	r2, r7
 8012d54:	4630      	mov	r0, r6
 8012d56:	f7fb fe97 	bl	800ea88 <ucdr_deserialize_sequence_char>
 8012d5a:	9b01      	ldr	r3, [sp, #4]
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	b920      	cbnz	r0, 8012d6a <_Header__cdr_deserialize+0x36>
 8012d60:	429f      	cmp	r7, r3
 8012d62:	d30c      	bcc.n	8012d7e <_Header__cdr_deserialize+0x4a>
 8012d64:	4628      	mov	r0, r5
 8012d66:	b003      	add	sp, #12
 8012d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d6a:	b103      	cbz	r3, 8012d6e <_Header__cdr_deserialize+0x3a>
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	4628      	mov	r0, r5
 8012d70:	60e3      	str	r3, [r4, #12]
 8012d72:	b003      	add	sp, #12
 8012d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d76:	460d      	mov	r5, r1
 8012d78:	4628      	mov	r0, r5
 8012d7a:	b003      	add	sp, #12
 8012d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d7e:	2101      	movs	r1, #1
 8012d80:	75b0      	strb	r0, [r6, #22]
 8012d82:	7571      	strb	r1, [r6, #21]
 8012d84:	60e0      	str	r0, [r4, #12]
 8012d86:	4630      	mov	r0, r6
 8012d88:	f7fb fe16 	bl	800e9b8 <ucdr_align_to>
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	9901      	ldr	r1, [sp, #4]
 8012d90:	f7fb fe48 	bl	800ea24 <ucdr_advance_buffer>
 8012d94:	4628      	mov	r0, r5
 8012d96:	b003      	add	sp, #12
 8012d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d9a:	bf00      	nop

08012d9c <_Header__cdr_serialize>:
 8012d9c:	b1f8      	cbz	r0, 8012dde <_Header__cdr_serialize+0x42>
 8012d9e:	b570      	push	{r4, r5, r6, lr}
 8012da0:	4604      	mov	r4, r0
 8012da2:	460d      	mov	r5, r1
 8012da4:	f000 f9a0 	bl	80130e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012da8:	6843      	ldr	r3, [r0, #4]
 8012daa:	4629      	mov	r1, r5
 8012dac:	689b      	ldr	r3, [r3, #8]
 8012dae:	4620      	mov	r0, r4
 8012db0:	4798      	blx	r3
 8012db2:	68a6      	ldr	r6, [r4, #8]
 8012db4:	b156      	cbz	r6, 8012dcc <_Header__cdr_serialize+0x30>
 8012db6:	4630      	mov	r0, r6
 8012db8:	f7ed fa92 	bl	80002e0 <strlen>
 8012dbc:	4631      	mov	r1, r6
 8012dbe:	60e0      	str	r0, [r4, #12]
 8012dc0:	1c42      	adds	r2, r0, #1
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dc8:	f7fb be4c 	b.w	800ea64 <ucdr_serialize_sequence_char>
 8012dcc:	4630      	mov	r0, r6
 8012dce:	60e0      	str	r0, [r4, #12]
 8012dd0:	4632      	mov	r2, r6
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dda:	f7fb be43 	b.w	800ea64 <ucdr_serialize_sequence_char>
 8012dde:	4770      	bx	lr

08012de0 <_Header__get_serialized_size>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4604      	mov	r4, r0
 8012de4:	b150      	cbz	r0, 8012dfc <_Header__get_serialized_size+0x1c>
 8012de6:	2100      	movs	r1, #0
 8012de8:	f000 f91a 	bl	8013020 <get_serialized_size_builtin_interfaces__msg__Time>
 8012dec:	2104      	movs	r1, #4
 8012dee:	4605      	mov	r5, r0
 8012df0:	f7fb fdcc 	bl	800e98c <ucdr_alignment>
 8012df4:	68e4      	ldr	r4, [r4, #12]
 8012df6:	3405      	adds	r4, #5
 8012df8:	442c      	add	r4, r5
 8012dfa:	4420      	add	r0, r4
 8012dfc:	bd38      	pop	{r3, r4, r5, pc}
 8012dfe:	bf00      	nop

08012e00 <max_serialized_size_std_msgs__msg__Header>:
 8012e00:	b510      	push	{r4, lr}
 8012e02:	2301      	movs	r3, #1
 8012e04:	4604      	mov	r4, r0
 8012e06:	7003      	strb	r3, [r0, #0]
 8012e08:	f000 f95a 	bl	80130c0 <max_serialized_size_builtin_interfaces__msg__Time>
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	7023      	strb	r3, [r4, #0]
 8012e10:	bd10      	pop	{r4, pc}
 8012e12:	bf00      	nop

08012e14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012e14:	4800      	ldr	r0, [pc, #0]	@ (8012e18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8012e16:	4770      	bx	lr
 8012e18:	20000444 	.word	0x20000444

08012e1c <actuator_msgs__msg__Actuators__get_type_hash>:
 8012e1c:	4800      	ldr	r0, [pc, #0]	@ (8012e20 <actuator_msgs__msg__Actuators__get_type_hash+0x4>)
 8012e1e:	4770      	bx	lr
 8012e20:	20000478 	.word	0x20000478

08012e24 <actuator_msgs__msg__Actuators__get_type_description>:
 8012e24:	b570      	push	{r4, r5, r6, lr}
 8012e26:	4e0c      	ldr	r6, [pc, #48]	@ (8012e58 <actuator_msgs__msg__Actuators__get_type_description+0x34>)
 8012e28:	7835      	ldrb	r5, [r6, #0]
 8012e2a:	b10d      	cbz	r5, 8012e30 <actuator_msgs__msg__Actuators__get_type_description+0xc>
 8012e2c:	480b      	ldr	r0, [pc, #44]	@ (8012e5c <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 8012e2e:	bd70      	pop	{r4, r5, r6, pc}
 8012e30:	4628      	mov	r0, r5
 8012e32:	f000 f8b7 	bl	8012fa4 <builtin_interfaces__msg__Time__get_type_description>
 8012e36:	300c      	adds	r0, #12
 8012e38:	c807      	ldmia	r0, {r0, r1, r2}
 8012e3a:	4c09      	ldr	r4, [pc, #36]	@ (8012e60 <actuator_msgs__msg__Actuators__get_type_description+0x3c>)
 8012e3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012e40:	4628      	mov	r0, r5
 8012e42:	f009 f999 	bl	801c178 <std_msgs__msg__Header__get_type_description>
 8012e46:	300c      	adds	r0, #12
 8012e48:	c807      	ldmia	r0, {r0, r1, r2}
 8012e4a:	3418      	adds	r4, #24
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012e52:	7033      	strb	r3, [r6, #0]
 8012e54:	4801      	ldr	r0, [pc, #4]	@ (8012e5c <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 8012e56:	bd70      	pop	{r4, r5, r6, pc}
 8012e58:	2001f585 	.word	0x2001f585
 8012e5c:	08021210 	.word	0x08021210
 8012e60:	20000680 	.word	0x20000680

08012e64 <actuator_msgs__msg__Actuators__get_type_description_sources>:
 8012e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e66:	4e17      	ldr	r6, [pc, #92]	@ (8012ec4 <actuator_msgs__msg__Actuators__get_type_description_sources+0x60>)
 8012e68:	7837      	ldrb	r7, [r6, #0]
 8012e6a:	b10f      	cbz	r7, 8012e70 <actuator_msgs__msg__Actuators__get_type_description_sources+0xc>
 8012e6c:	4816      	ldr	r0, [pc, #88]	@ (8012ec8 <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 8012e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e70:	4d16      	ldr	r5, [pc, #88]	@ (8012ecc <actuator_msgs__msg__Actuators__get_type_description_sources+0x68>)
 8012e72:	4c17      	ldr	r4, [pc, #92]	@ (8012ed0 <actuator_msgs__msg__Actuators__get_type_description_sources+0x6c>)
 8012e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e7c:	682b      	ldr	r3, [r5, #0]
 8012e7e:	4625      	mov	r5, r4
 8012e80:	4638      	mov	r0, r7
 8012e82:	f845 3b04 	str.w	r3, [r5], #4
 8012e86:	f000 f899 	bl	8012fbc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8012e8a:	4684      	mov	ip, r0
 8012e8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e98:	4638      	mov	r0, r7
 8012e9a:	f8dc 3000 	ldr.w	r3, [ip]
 8012e9e:	602b      	str	r3, [r5, #0]
 8012ea0:	f009 f982 	bl	801c1a8 <std_msgs__msg__Header__get_individual_type_description_source>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	4684      	mov	ip, r0
 8012ea8:	7033      	strb	r3, [r6, #0]
 8012eaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012eae:	3428      	adds	r4, #40	@ 0x28
 8012eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012eb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012eb8:	f8dc 3000 	ldr.w	r3, [ip]
 8012ebc:	4802      	ldr	r0, [pc, #8]	@ (8012ec8 <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 8012ebe:	6023      	str	r3, [r4, #0]
 8012ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	2001f584 	.word	0x2001f584
 8012ec8:	080211e0 	.word	0x080211e0
 8012ecc:	080211ec 	.word	0x080211ec
 8012ed0:	2001f518 	.word	0x2001f518

08012ed4 <actuator_msgs__msg__Actuators__init>:
 8012ed4:	b3f0      	cbz	r0, 8012f54 <actuator_msgs__msg__Actuators__init+0x80>
 8012ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ed8:	4604      	mov	r4, r0
 8012eda:	f009 f991 	bl	801c200 <std_msgs__msg__Header__init>
 8012ede:	b1a8      	cbz	r0, 8012f0c <actuator_msgs__msg__Actuators__init+0x38>
 8012ee0:	f104 0514 	add.w	r5, r4, #20
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f7ff fd18 	bl	801291c <rosidl_runtime_c__double__Sequence__init>
 8012eec:	b368      	cbz	r0, 8012f4a <actuator_msgs__msg__Actuators__init+0x76>
 8012eee:	f104 0620 	add.w	r6, r4, #32
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	f7ff fd11 	bl	801291c <rosidl_runtime_c__double__Sequence__init>
 8012efa:	b1c0      	cbz	r0, 8012f2e <actuator_msgs__msg__Actuators__init+0x5a>
 8012efc:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 8012f00:	2100      	movs	r1, #0
 8012f02:	4638      	mov	r0, r7
 8012f04:	f7ff fd0a 	bl	801291c <rosidl_runtime_c__double__Sequence__init>
 8012f08:	b330      	cbz	r0, 8012f58 <actuator_msgs__msg__Actuators__init+0x84>
 8012f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f009 f997 	bl	801c240 <std_msgs__msg__Header__fini>
 8012f12:	f104 0014 	add.w	r0, r4, #20
 8012f16:	f7ff fd1b 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f1a:	f104 0020 	add.w	r0, r4, #32
 8012f1e:	f7ff fd17 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f22:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012f26:	f7ff fd13 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f009 f986 	bl	801c240 <std_msgs__msg__Header__fini>
 8012f34:	4628      	mov	r0, r5
 8012f36:	f7ff fd0b 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7ff fd08 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f40:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012f44:	f7ff fd04 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f48:	e7ef      	b.n	8012f2a <actuator_msgs__msg__Actuators__init+0x56>
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f009 f978 	bl	801c240 <std_msgs__msg__Header__fini>
 8012f50:	4628      	mov	r0, r5
 8012f52:	e7e0      	b.n	8012f16 <actuator_msgs__msg__Actuators__init+0x42>
 8012f54:	2000      	movs	r0, #0
 8012f56:	4770      	bx	lr
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f009 f971 	bl	801c240 <std_msgs__msg__Header__fini>
 8012f5e:	4628      	mov	r0, r5
 8012f60:	f7ff fcf6 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff fcf3 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f6a:	4638      	mov	r0, r7
 8012f6c:	f7ff fcf0 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f70:	e7db      	b.n	8012f2a <actuator_msgs__msg__Actuators__init+0x56>
 8012f72:	bf00      	nop

08012f74 <actuator_msgs__msg__Actuators__fini>:
 8012f74:	b188      	cbz	r0, 8012f9a <actuator_msgs__msg__Actuators__fini+0x26>
 8012f76:	b510      	push	{r4, lr}
 8012f78:	4604      	mov	r4, r0
 8012f7a:	f009 f961 	bl	801c240 <std_msgs__msg__Header__fini>
 8012f7e:	f104 0014 	add.w	r0, r4, #20
 8012f82:	f7ff fce5 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f86:	f104 0020 	add.w	r0, r4, #32
 8012f8a:	f7ff fce1 	bl	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f8e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f96:	f7ff bcdb 	b.w	8012950 <rosidl_runtime_c__double__Sequence__fini>
 8012f9a:	4770      	bx	lr

08012f9c <builtin_interfaces__msg__Time__get_type_hash>:
 8012f9c:	4800      	ldr	r0, [pc, #0]	@ (8012fa0 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8012f9e:	4770      	bx	lr
 8012fa0:	20000840 	.word	0x20000840

08012fa4 <builtin_interfaces__msg__Time__get_type_description>:
 8012fa4:	4b03      	ldr	r3, [pc, #12]	@ (8012fb4 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8012fa6:	781a      	ldrb	r2, [r3, #0]
 8012fa8:	b90a      	cbnz	r2, 8012fae <builtin_interfaces__msg__Time__get_type_description+0xa>
 8012faa:	2201      	movs	r2, #1
 8012fac:	701a      	strb	r2, [r3, #0]
 8012fae:	4802      	ldr	r0, [pc, #8]	@ (8012fb8 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8012fb0:	4770      	bx	lr
 8012fb2:	bf00      	nop
 8012fb4:	2001f5ad 	.word	0x2001f5ad
 8012fb8:	08021264 	.word	0x08021264

08012fbc <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8012fbc:	4800      	ldr	r0, [pc, #0]	@ (8012fc0 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8012fbe:	4770      	bx	lr
 8012fc0:	08021240 	.word	0x08021240

08012fc4 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8012fc4:	4b09      	ldr	r3, [pc, #36]	@ (8012fec <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8012fc6:	781a      	ldrb	r2, [r3, #0]
 8012fc8:	b96a      	cbnz	r2, 8012fe6 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8012fca:	b430      	push	{r4, r5}
 8012fcc:	4d08      	ldr	r5, [pc, #32]	@ (8012ff0 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8012fce:	4c09      	ldr	r4, [pc, #36]	@ (8012ff4 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	701a      	strb	r2, [r3, #0]
 8012fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012fdc:	682b      	ldr	r3, [r5, #0]
 8012fde:	4806      	ldr	r0, [pc, #24]	@ (8012ff8 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8012fe0:	6023      	str	r3, [r4, #0]
 8012fe2:	bc30      	pop	{r4, r5}
 8012fe4:	4770      	bx	lr
 8012fe6:	4804      	ldr	r0, [pc, #16]	@ (8012ff8 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	2001f5ac 	.word	0x2001f5ac
 8012ff0:	08021240 	.word	0x08021240
 8012ff4:	2001f588 	.word	0x2001f588
 8012ff8:	08021234 	.word	0x08021234

08012ffc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012ffc:	f009 b92c 	b.w	801c258 <builtin_interfaces__msg__Time__init>

08013000 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8013000:	f009 b92e 	b.w	801c260 <builtin_interfaces__msg__Time__fini>

08013004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8013004:	4b04      	ldr	r3, [pc, #16]	@ (8013018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	b10a      	cbz	r2, 801300e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801300a:	4803      	ldr	r0, [pc, #12]	@ (8013018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801300c:	4770      	bx	lr
 801300e:	4a03      	ldr	r2, [pc, #12]	@ (801301c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8013010:	4801      	ldr	r0, [pc, #4]	@ (8013018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8013012:	6812      	ldr	r2, [r2, #0]
 8013014:	601a      	str	r2, [r3, #0]
 8013016:	4770      	bx	lr
 8013018:	20000a18 	.word	0x20000a18
 801301c:	200001a0 	.word	0x200001a0

08013020 <get_serialized_size_builtin_interfaces__msg__Time>:
 8013020:	b180      	cbz	r0, 8013044 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8013022:	b538      	push	{r3, r4, r5, lr}
 8013024:	460d      	mov	r5, r1
 8013026:	4628      	mov	r0, r5
 8013028:	2104      	movs	r1, #4
 801302a:	f7fb fcaf 	bl	800e98c <ucdr_alignment>
 801302e:	2104      	movs	r1, #4
 8013030:	186c      	adds	r4, r5, r1
 8013032:	4404      	add	r4, r0
 8013034:	4620      	mov	r0, r4
 8013036:	f7fb fca9 	bl	800e98c <ucdr_alignment>
 801303a:	f1c5 0504 	rsb	r5, r5, #4
 801303e:	4405      	add	r5, r0
 8013040:	1928      	adds	r0, r5, r4
 8013042:	bd38      	pop	{r3, r4, r5, pc}
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop

08013048 <_Time__cdr_deserialize>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	460c      	mov	r4, r1
 801304c:	b141      	cbz	r1, 8013060 <_Time__cdr_deserialize+0x18>
 801304e:	4605      	mov	r5, r0
 8013050:	f001 fb30 	bl	80146b4 <ucdr_deserialize_int32_t>
 8013054:	1d21      	adds	r1, r4, #4
 8013056:	4628      	mov	r0, r5
 8013058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801305c:	f000 bfa8 	b.w	8013fb0 <ucdr_deserialize_uint32_t>
 8013060:	4608      	mov	r0, r1
 8013062:	bd38      	pop	{r3, r4, r5, pc}

08013064 <_Time__cdr_serialize>:
 8013064:	b160      	cbz	r0, 8013080 <_Time__cdr_serialize+0x1c>
 8013066:	b538      	push	{r3, r4, r5, lr}
 8013068:	460d      	mov	r5, r1
 801306a:	4604      	mov	r4, r0
 801306c:	6801      	ldr	r1, [r0, #0]
 801306e:	4628      	mov	r0, r5
 8013070:	f001 fa86 	bl	8014580 <ucdr_serialize_int32_t>
 8013074:	6861      	ldr	r1, [r4, #4]
 8013076:	4628      	mov	r0, r5
 8013078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801307c:	f000 be6e 	b.w	8013d5c <ucdr_serialize_uint32_t>
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop

08013084 <_Time__get_serialized_size>:
 8013084:	b160      	cbz	r0, 80130a0 <_Time__get_serialized_size+0x1c>
 8013086:	b510      	push	{r4, lr}
 8013088:	2104      	movs	r1, #4
 801308a:	2000      	movs	r0, #0
 801308c:	f7fb fc7e 	bl	800e98c <ucdr_alignment>
 8013090:	1d04      	adds	r4, r0, #4
 8013092:	2104      	movs	r1, #4
 8013094:	4620      	mov	r0, r4
 8013096:	f7fb fc79 	bl	800e98c <ucdr_alignment>
 801309a:	3004      	adds	r0, #4
 801309c:	4420      	add	r0, r4
 801309e:	bd10      	pop	{r4, pc}
 80130a0:	4770      	bx	lr
 80130a2:	bf00      	nop

080130a4 <_Time__max_serialized_size>:
 80130a4:	b510      	push	{r4, lr}
 80130a6:	2104      	movs	r1, #4
 80130a8:	2000      	movs	r0, #0
 80130aa:	f7fb fc6f 	bl	800e98c <ucdr_alignment>
 80130ae:	1d04      	adds	r4, r0, #4
 80130b0:	2104      	movs	r1, #4
 80130b2:	4620      	mov	r0, r4
 80130b4:	f7fb fc6a 	bl	800e98c <ucdr_alignment>
 80130b8:	3004      	adds	r0, #4
 80130ba:	4420      	add	r0, r4
 80130bc:	bd10      	pop	{r4, pc}
 80130be:	bf00      	nop

080130c0 <max_serialized_size_builtin_interfaces__msg__Time>:
 80130c0:	b538      	push	{r3, r4, r5, lr}
 80130c2:	460c      	mov	r4, r1
 80130c4:	2301      	movs	r3, #1
 80130c6:	7003      	strb	r3, [r0, #0]
 80130c8:	2104      	movs	r1, #4
 80130ca:	4620      	mov	r0, r4
 80130cc:	f7fb fc5e 	bl	800e98c <ucdr_alignment>
 80130d0:	2104      	movs	r1, #4
 80130d2:	1863      	adds	r3, r4, r1
 80130d4:	18c5      	adds	r5, r0, r3
 80130d6:	4628      	mov	r0, r5
 80130d8:	f7fb fc58 	bl	800e98c <ucdr_alignment>
 80130dc:	f1c4 0404 	rsb	r4, r4, #4
 80130e0:	4420      	add	r0, r4
 80130e2:	4428      	add	r0, r5
 80130e4:	bd38      	pop	{r3, r4, r5, pc}
 80130e6:	bf00      	nop

080130e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80130e8:	4800      	ldr	r0, [pc, #0]	@ (80130ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80130ea:	4770      	bx	lr
 80130ec:	20000aa8 	.word	0x20000aa8

080130f0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 80130f0:	f009 b8ea 	b.w	801c2c8 <geometry_msgs__msg__Quaternion__init>

080130f4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 80130f4:	f009 b8fc 	b.w	801c2f0 <geometry_msgs__msg__Quaternion__fini>

080130f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80130f8:	4b04      	ldr	r3, [pc, #16]	@ (801310c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	b10a      	cbz	r2, 8013102 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 80130fe:	4803      	ldr	r0, [pc, #12]	@ (801310c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8013100:	4770      	bx	lr
 8013102:	4a03      	ldr	r2, [pc, #12]	@ (8013110 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8013104:	4801      	ldr	r0, [pc, #4]	@ (801310c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8013106:	6812      	ldr	r2, [r2, #0]
 8013108:	601a      	str	r2, [r3, #0]
 801310a:	4770      	bx	lr
 801310c:	20000adc 	.word	0x20000adc
 8013110:	200001a0 	.word	0x200001a0

08013114 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8013114:	f009 b91e 	b.w	801c354 <geometry_msgs__msg__Vector3__init>

08013118 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8013118:	f009 b920 	b.w	801c35c <geometry_msgs__msg__Vector3__fini>

0801311c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 801311c:	4b04      	ldr	r3, [pc, #16]	@ (8013130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	b10a      	cbz	r2, 8013126 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8013122:	4803      	ldr	r0, [pc, #12]	@ (8013130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8013124:	4770      	bx	lr
 8013126:	4a03      	ldr	r2, [pc, #12]	@ (8013134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8013128:	4801      	ldr	r0, [pc, #4]	@ (8013130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801312a:	6812      	ldr	r2, [r2, #0]
 801312c:	601a      	str	r2, [r3, #0]
 801312e:	4770      	bx	lr
 8013130:	20000be4 	.word	0x20000be4
 8013134:	200001a0 	.word	0x200001a0

08013138 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8013138:	b1f0      	cbz	r0, 8013178 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801313a:	b570      	push	{r4, r5, r6, lr}
 801313c:	460d      	mov	r5, r1
 801313e:	4628      	mov	r0, r5
 8013140:	2108      	movs	r1, #8
 8013142:	f7fb fc23 	bl	800e98c <ucdr_alignment>
 8013146:	2108      	movs	r1, #8
 8013148:	186c      	adds	r4, r5, r1
 801314a:	4404      	add	r4, r0
 801314c:	4620      	mov	r0, r4
 801314e:	f7fb fc1d 	bl	800e98c <ucdr_alignment>
 8013152:	f100 0608 	add.w	r6, r0, #8
 8013156:	4426      	add	r6, r4
 8013158:	2108      	movs	r1, #8
 801315a:	4630      	mov	r0, r6
 801315c:	f7fb fc16 	bl	800e98c <ucdr_alignment>
 8013160:	f100 0408 	add.w	r4, r0, #8
 8013164:	4434      	add	r4, r6
 8013166:	2108      	movs	r1, #8
 8013168:	4620      	mov	r0, r4
 801316a:	f7fb fc0f 	bl	800e98c <ucdr_alignment>
 801316e:	f1c5 0508 	rsb	r5, r5, #8
 8013172:	4405      	add	r5, r0
 8013174:	1928      	adds	r0, r5, r4
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	4770      	bx	lr
 801317a:	bf00      	nop

0801317c <_Quaternion__cdr_deserialize>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	460c      	mov	r4, r1
 8013180:	b199      	cbz	r1, 80131aa <_Quaternion__cdr_deserialize+0x2e>
 8013182:	4605      	mov	r5, r0
 8013184:	f001 fcb4 	bl	8014af0 <ucdr_deserialize_double>
 8013188:	f104 0108 	add.w	r1, r4, #8
 801318c:	4628      	mov	r0, r5
 801318e:	f001 fcaf 	bl	8014af0 <ucdr_deserialize_double>
 8013192:	f104 0110 	add.w	r1, r4, #16
 8013196:	4628      	mov	r0, r5
 8013198:	f001 fcaa 	bl	8014af0 <ucdr_deserialize_double>
 801319c:	f104 0118 	add.w	r1, r4, #24
 80131a0:	4628      	mov	r0, r5
 80131a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131a6:	f001 bca3 	b.w	8014af0 <ucdr_deserialize_double>
 80131aa:	4608      	mov	r0, r1
 80131ac:	bd38      	pop	{r3, r4, r5, pc}
 80131ae:	bf00      	nop

080131b0 <_Quaternion__cdr_serialize>:
 80131b0:	b1c0      	cbz	r0, 80131e4 <_Quaternion__cdr_serialize+0x34>
 80131b2:	b538      	push	{r3, r4, r5, lr}
 80131b4:	ed90 0b00 	vldr	d0, [r0]
 80131b8:	460d      	mov	r5, r1
 80131ba:	4604      	mov	r4, r0
 80131bc:	4608      	mov	r0, r1
 80131be:	f001 fb07 	bl	80147d0 <ucdr_serialize_double>
 80131c2:	ed94 0b02 	vldr	d0, [r4, #8]
 80131c6:	4628      	mov	r0, r5
 80131c8:	f001 fb02 	bl	80147d0 <ucdr_serialize_double>
 80131cc:	ed94 0b04 	vldr	d0, [r4, #16]
 80131d0:	4628      	mov	r0, r5
 80131d2:	f001 fafd 	bl	80147d0 <ucdr_serialize_double>
 80131d6:	ed94 0b06 	vldr	d0, [r4, #24]
 80131da:	4628      	mov	r0, r5
 80131dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131e0:	f001 baf6 	b.w	80147d0 <ucdr_serialize_double>
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop

080131e8 <_Quaternion__get_serialized_size>:
 80131e8:	b1d8      	cbz	r0, 8013222 <_Quaternion__get_serialized_size+0x3a>
 80131ea:	b538      	push	{r3, r4, r5, lr}
 80131ec:	2108      	movs	r1, #8
 80131ee:	2000      	movs	r0, #0
 80131f0:	f7fb fbcc 	bl	800e98c <ucdr_alignment>
 80131f4:	f100 0408 	add.w	r4, r0, #8
 80131f8:	2108      	movs	r1, #8
 80131fa:	4620      	mov	r0, r4
 80131fc:	f7fb fbc6 	bl	800e98c <ucdr_alignment>
 8013200:	f100 0508 	add.w	r5, r0, #8
 8013204:	4425      	add	r5, r4
 8013206:	2108      	movs	r1, #8
 8013208:	4628      	mov	r0, r5
 801320a:	f7fb fbbf 	bl	800e98c <ucdr_alignment>
 801320e:	f100 0408 	add.w	r4, r0, #8
 8013212:	442c      	add	r4, r5
 8013214:	2108      	movs	r1, #8
 8013216:	4620      	mov	r0, r4
 8013218:	f7fb fbb8 	bl	800e98c <ucdr_alignment>
 801321c:	3008      	adds	r0, #8
 801321e:	4420      	add	r0, r4
 8013220:	bd38      	pop	{r3, r4, r5, pc}
 8013222:	4770      	bx	lr

08013224 <_Quaternion__max_serialized_size>:
 8013224:	b538      	push	{r3, r4, r5, lr}
 8013226:	2108      	movs	r1, #8
 8013228:	2000      	movs	r0, #0
 801322a:	f7fb fbaf 	bl	800e98c <ucdr_alignment>
 801322e:	f100 0408 	add.w	r4, r0, #8
 8013232:	2108      	movs	r1, #8
 8013234:	4620      	mov	r0, r4
 8013236:	f7fb fba9 	bl	800e98c <ucdr_alignment>
 801323a:	f100 0508 	add.w	r5, r0, #8
 801323e:	4425      	add	r5, r4
 8013240:	2108      	movs	r1, #8
 8013242:	4628      	mov	r0, r5
 8013244:	f7fb fba2 	bl	800e98c <ucdr_alignment>
 8013248:	f100 0408 	add.w	r4, r0, #8
 801324c:	442c      	add	r4, r5
 801324e:	2108      	movs	r1, #8
 8013250:	4620      	mov	r0, r4
 8013252:	f7fb fb9b 	bl	800e98c <ucdr_alignment>
 8013256:	3008      	adds	r0, #8
 8013258:	4420      	add	r0, r4
 801325a:	bd38      	pop	{r3, r4, r5, pc}

0801325c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	2301      	movs	r3, #1
 8013260:	460c      	mov	r4, r1
 8013262:	7003      	strb	r3, [r0, #0]
 8013264:	2108      	movs	r1, #8
 8013266:	4620      	mov	r0, r4
 8013268:	f7fb fb90 	bl	800e98c <ucdr_alignment>
 801326c:	2108      	movs	r1, #8
 801326e:	1863      	adds	r3, r4, r1
 8013270:	18c5      	adds	r5, r0, r3
 8013272:	4628      	mov	r0, r5
 8013274:	f7fb fb8a 	bl	800e98c <ucdr_alignment>
 8013278:	f100 0608 	add.w	r6, r0, #8
 801327c:	442e      	add	r6, r5
 801327e:	2108      	movs	r1, #8
 8013280:	4630      	mov	r0, r6
 8013282:	f7fb fb83 	bl	800e98c <ucdr_alignment>
 8013286:	f100 0508 	add.w	r5, r0, #8
 801328a:	4435      	add	r5, r6
 801328c:	2108      	movs	r1, #8
 801328e:	4628      	mov	r0, r5
 8013290:	f7fb fb7c 	bl	800e98c <ucdr_alignment>
 8013294:	f1c4 0408 	rsb	r4, r4, #8
 8013298:	4420      	add	r0, r4
 801329a:	4428      	add	r0, r5
 801329c:	bd70      	pop	{r4, r5, r6, pc}
 801329e:	bf00      	nop

080132a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80132a0:	4800      	ldr	r0, [pc, #0]	@ (80132a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 80132a2:	4770      	bx	lr
 80132a4:	20000cb0 	.word	0x20000cb0

080132a8 <get_serialized_size_geometry_msgs__msg__Vector3>:
 80132a8:	b1b8      	cbz	r0, 80132da <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 80132aa:	b570      	push	{r4, r5, r6, lr}
 80132ac:	460d      	mov	r5, r1
 80132ae:	4628      	mov	r0, r5
 80132b0:	2108      	movs	r1, #8
 80132b2:	f7fb fb6b 	bl	800e98c <ucdr_alignment>
 80132b6:	2108      	movs	r1, #8
 80132b8:	186e      	adds	r6, r5, r1
 80132ba:	4406      	add	r6, r0
 80132bc:	4630      	mov	r0, r6
 80132be:	f7fb fb65 	bl	800e98c <ucdr_alignment>
 80132c2:	f100 0408 	add.w	r4, r0, #8
 80132c6:	4434      	add	r4, r6
 80132c8:	2108      	movs	r1, #8
 80132ca:	4620      	mov	r0, r4
 80132cc:	f7fb fb5e 	bl	800e98c <ucdr_alignment>
 80132d0:	f1c5 0508 	rsb	r5, r5, #8
 80132d4:	4405      	add	r5, r0
 80132d6:	1928      	adds	r0, r5, r4
 80132d8:	bd70      	pop	{r4, r5, r6, pc}
 80132da:	4770      	bx	lr

080132dc <_Vector3__cdr_deserialize>:
 80132dc:	b538      	push	{r3, r4, r5, lr}
 80132de:	460c      	mov	r4, r1
 80132e0:	b171      	cbz	r1, 8013300 <_Vector3__cdr_deserialize+0x24>
 80132e2:	4605      	mov	r5, r0
 80132e4:	f001 fc04 	bl	8014af0 <ucdr_deserialize_double>
 80132e8:	f104 0108 	add.w	r1, r4, #8
 80132ec:	4628      	mov	r0, r5
 80132ee:	f001 fbff 	bl	8014af0 <ucdr_deserialize_double>
 80132f2:	f104 0110 	add.w	r1, r4, #16
 80132f6:	4628      	mov	r0, r5
 80132f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132fc:	f001 bbf8 	b.w	8014af0 <ucdr_deserialize_double>
 8013300:	4608      	mov	r0, r1
 8013302:	bd38      	pop	{r3, r4, r5, pc}

08013304 <_Vector3__cdr_serialize>:
 8013304:	b198      	cbz	r0, 801332e <_Vector3__cdr_serialize+0x2a>
 8013306:	b538      	push	{r3, r4, r5, lr}
 8013308:	ed90 0b00 	vldr	d0, [r0]
 801330c:	460d      	mov	r5, r1
 801330e:	4604      	mov	r4, r0
 8013310:	4608      	mov	r0, r1
 8013312:	f001 fa5d 	bl	80147d0 <ucdr_serialize_double>
 8013316:	ed94 0b02 	vldr	d0, [r4, #8]
 801331a:	4628      	mov	r0, r5
 801331c:	f001 fa58 	bl	80147d0 <ucdr_serialize_double>
 8013320:	ed94 0b04 	vldr	d0, [r4, #16]
 8013324:	4628      	mov	r0, r5
 8013326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801332a:	f001 ba51 	b.w	80147d0 <ucdr_serialize_double>
 801332e:	4770      	bx	lr

08013330 <_Vector3__get_serialized_size>:
 8013330:	b1a0      	cbz	r0, 801335c <_Vector3__get_serialized_size+0x2c>
 8013332:	b538      	push	{r3, r4, r5, lr}
 8013334:	2108      	movs	r1, #8
 8013336:	2000      	movs	r0, #0
 8013338:	f7fb fb28 	bl	800e98c <ucdr_alignment>
 801333c:	f100 0508 	add.w	r5, r0, #8
 8013340:	2108      	movs	r1, #8
 8013342:	4628      	mov	r0, r5
 8013344:	f7fb fb22 	bl	800e98c <ucdr_alignment>
 8013348:	f100 0408 	add.w	r4, r0, #8
 801334c:	442c      	add	r4, r5
 801334e:	2108      	movs	r1, #8
 8013350:	4620      	mov	r0, r4
 8013352:	f7fb fb1b 	bl	800e98c <ucdr_alignment>
 8013356:	3008      	adds	r0, #8
 8013358:	4420      	add	r0, r4
 801335a:	bd38      	pop	{r3, r4, r5, pc}
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop

08013360 <_Vector3__max_serialized_size>:
 8013360:	b538      	push	{r3, r4, r5, lr}
 8013362:	2108      	movs	r1, #8
 8013364:	2000      	movs	r0, #0
 8013366:	f7fb fb11 	bl	800e98c <ucdr_alignment>
 801336a:	f100 0508 	add.w	r5, r0, #8
 801336e:	2108      	movs	r1, #8
 8013370:	4628      	mov	r0, r5
 8013372:	f7fb fb0b 	bl	800e98c <ucdr_alignment>
 8013376:	f100 0408 	add.w	r4, r0, #8
 801337a:	442c      	add	r4, r5
 801337c:	2108      	movs	r1, #8
 801337e:	4620      	mov	r0, r4
 8013380:	f7fb fb04 	bl	800e98c <ucdr_alignment>
 8013384:	3008      	adds	r0, #8
 8013386:	4420      	add	r0, r4
 8013388:	bd38      	pop	{r3, r4, r5, pc}
 801338a:	bf00      	nop

0801338c <max_serialized_size_geometry_msgs__msg__Vector3>:
 801338c:	b570      	push	{r4, r5, r6, lr}
 801338e:	2301      	movs	r3, #1
 8013390:	460c      	mov	r4, r1
 8013392:	7003      	strb	r3, [r0, #0]
 8013394:	2108      	movs	r1, #8
 8013396:	4620      	mov	r0, r4
 8013398:	f7fb faf8 	bl	800e98c <ucdr_alignment>
 801339c:	2108      	movs	r1, #8
 801339e:	1863      	adds	r3, r4, r1
 80133a0:	18c6      	adds	r6, r0, r3
 80133a2:	4630      	mov	r0, r6
 80133a4:	f7fb faf2 	bl	800e98c <ucdr_alignment>
 80133a8:	f100 0508 	add.w	r5, r0, #8
 80133ac:	4435      	add	r5, r6
 80133ae:	2108      	movs	r1, #8
 80133b0:	4628      	mov	r0, r5
 80133b2:	f7fb faeb 	bl	800e98c <ucdr_alignment>
 80133b6:	f1c4 0408 	rsb	r4, r4, #8
 80133ba:	4420      	add	r0, r4
 80133bc:	4428      	add	r0, r5
 80133be:	bd70      	pop	{r4, r5, r6, pc}

080133c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80133c0:	4800      	ldr	r0, [pc, #0]	@ (80133c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 80133c2:	4770      	bx	lr
 80133c4:	20000ce4 	.word	0x20000ce4

080133c8 <ucdr_serialize_endian_array_char>:
 80133c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133cc:	4619      	mov	r1, r3
 80133ce:	461f      	mov	r7, r3
 80133d0:	4605      	mov	r5, r0
 80133d2:	4690      	mov	r8, r2
 80133d4:	f7fb fa82 	bl	800e8dc <ucdr_check_buffer_available_for>
 80133d8:	b9e0      	cbnz	r0, 8013414 <ucdr_serialize_endian_array_char+0x4c>
 80133da:	463e      	mov	r6, r7
 80133dc:	e009      	b.n	80133f2 <ucdr_serialize_endian_array_char+0x2a>
 80133de:	68a8      	ldr	r0, [r5, #8]
 80133e0:	f00a ffe7 	bl	801e3b2 <memcpy>
 80133e4:	68ab      	ldr	r3, [r5, #8]
 80133e6:	6928      	ldr	r0, [r5, #16]
 80133e8:	4423      	add	r3, r4
 80133ea:	4420      	add	r0, r4
 80133ec:	1b36      	subs	r6, r6, r4
 80133ee:	60ab      	str	r3, [r5, #8]
 80133f0:	6128      	str	r0, [r5, #16]
 80133f2:	2201      	movs	r2, #1
 80133f4:	4631      	mov	r1, r6
 80133f6:	4628      	mov	r0, r5
 80133f8:	f7fb faf8 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 80133fc:	1bb9      	subs	r1, r7, r6
 80133fe:	4604      	mov	r4, r0
 8013400:	4602      	mov	r2, r0
 8013402:	4441      	add	r1, r8
 8013404:	2800      	cmp	r0, #0
 8013406:	d1ea      	bne.n	80133de <ucdr_serialize_endian_array_char+0x16>
 8013408:	2301      	movs	r3, #1
 801340a:	7da8      	ldrb	r0, [r5, #22]
 801340c:	756b      	strb	r3, [r5, #21]
 801340e:	4058      	eors	r0, r3
 8013410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013414:	463a      	mov	r2, r7
 8013416:	68a8      	ldr	r0, [r5, #8]
 8013418:	4641      	mov	r1, r8
 801341a:	f00a ffca 	bl	801e3b2 <memcpy>
 801341e:	68aa      	ldr	r2, [r5, #8]
 8013420:	692b      	ldr	r3, [r5, #16]
 8013422:	443a      	add	r2, r7
 8013424:	443b      	add	r3, r7
 8013426:	60aa      	str	r2, [r5, #8]
 8013428:	612b      	str	r3, [r5, #16]
 801342a:	e7ed      	b.n	8013408 <ucdr_serialize_endian_array_char+0x40>

0801342c <ucdr_deserialize_endian_array_char>:
 801342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013430:	4619      	mov	r1, r3
 8013432:	461f      	mov	r7, r3
 8013434:	4605      	mov	r5, r0
 8013436:	4690      	mov	r8, r2
 8013438:	f7fb fa50 	bl	800e8dc <ucdr_check_buffer_available_for>
 801343c:	b9e0      	cbnz	r0, 8013478 <ucdr_deserialize_endian_array_char+0x4c>
 801343e:	463e      	mov	r6, r7
 8013440:	e009      	b.n	8013456 <ucdr_deserialize_endian_array_char+0x2a>
 8013442:	68a9      	ldr	r1, [r5, #8]
 8013444:	f00a ffb5 	bl	801e3b2 <memcpy>
 8013448:	68aa      	ldr	r2, [r5, #8]
 801344a:	692b      	ldr	r3, [r5, #16]
 801344c:	4422      	add	r2, r4
 801344e:	4423      	add	r3, r4
 8013450:	1b36      	subs	r6, r6, r4
 8013452:	60aa      	str	r2, [r5, #8]
 8013454:	612b      	str	r3, [r5, #16]
 8013456:	2201      	movs	r2, #1
 8013458:	4631      	mov	r1, r6
 801345a:	4628      	mov	r0, r5
 801345c:	f7fb fac6 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 8013460:	4604      	mov	r4, r0
 8013462:	1bb8      	subs	r0, r7, r6
 8013464:	4622      	mov	r2, r4
 8013466:	4440      	add	r0, r8
 8013468:	2c00      	cmp	r4, #0
 801346a:	d1ea      	bne.n	8013442 <ucdr_deserialize_endian_array_char+0x16>
 801346c:	2301      	movs	r3, #1
 801346e:	7da8      	ldrb	r0, [r5, #22]
 8013470:	756b      	strb	r3, [r5, #21]
 8013472:	4058      	eors	r0, r3
 8013474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013478:	463a      	mov	r2, r7
 801347a:	68a9      	ldr	r1, [r5, #8]
 801347c:	4640      	mov	r0, r8
 801347e:	f00a ff98 	bl	801e3b2 <memcpy>
 8013482:	68aa      	ldr	r2, [r5, #8]
 8013484:	692b      	ldr	r3, [r5, #16]
 8013486:	443a      	add	r2, r7
 8013488:	443b      	add	r3, r7
 801348a:	60aa      	str	r2, [r5, #8]
 801348c:	612b      	str	r3, [r5, #16]
 801348e:	e7ed      	b.n	801346c <ucdr_deserialize_endian_array_char+0x40>

08013490 <ucdr_serialize_array_uint8_t>:
 8013490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013494:	4688      	mov	r8, r1
 8013496:	4611      	mov	r1, r2
 8013498:	4617      	mov	r7, r2
 801349a:	4605      	mov	r5, r0
 801349c:	f7fb fa1e 	bl	800e8dc <ucdr_check_buffer_available_for>
 80134a0:	b9e0      	cbnz	r0, 80134dc <ucdr_serialize_array_uint8_t+0x4c>
 80134a2:	463e      	mov	r6, r7
 80134a4:	e009      	b.n	80134ba <ucdr_serialize_array_uint8_t+0x2a>
 80134a6:	68a8      	ldr	r0, [r5, #8]
 80134a8:	f00a ff83 	bl	801e3b2 <memcpy>
 80134ac:	68aa      	ldr	r2, [r5, #8]
 80134ae:	692b      	ldr	r3, [r5, #16]
 80134b0:	4422      	add	r2, r4
 80134b2:	4423      	add	r3, r4
 80134b4:	1b36      	subs	r6, r6, r4
 80134b6:	60aa      	str	r2, [r5, #8]
 80134b8:	612b      	str	r3, [r5, #16]
 80134ba:	2201      	movs	r2, #1
 80134bc:	4631      	mov	r1, r6
 80134be:	4628      	mov	r0, r5
 80134c0:	f7fb fa94 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 80134c4:	1bb9      	subs	r1, r7, r6
 80134c6:	4604      	mov	r4, r0
 80134c8:	4602      	mov	r2, r0
 80134ca:	4441      	add	r1, r8
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d1ea      	bne.n	80134a6 <ucdr_serialize_array_uint8_t+0x16>
 80134d0:	2301      	movs	r3, #1
 80134d2:	7da8      	ldrb	r0, [r5, #22]
 80134d4:	756b      	strb	r3, [r5, #21]
 80134d6:	4058      	eors	r0, r3
 80134d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134dc:	463a      	mov	r2, r7
 80134de:	68a8      	ldr	r0, [r5, #8]
 80134e0:	4641      	mov	r1, r8
 80134e2:	f00a ff66 	bl	801e3b2 <memcpy>
 80134e6:	68aa      	ldr	r2, [r5, #8]
 80134e8:	692b      	ldr	r3, [r5, #16]
 80134ea:	443a      	add	r2, r7
 80134ec:	443b      	add	r3, r7
 80134ee:	60aa      	str	r2, [r5, #8]
 80134f0:	612b      	str	r3, [r5, #16]
 80134f2:	e7ed      	b.n	80134d0 <ucdr_serialize_array_uint8_t+0x40>

080134f4 <ucdr_serialize_endian_array_uint8_t>:
 80134f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f8:	4619      	mov	r1, r3
 80134fa:	461f      	mov	r7, r3
 80134fc:	4605      	mov	r5, r0
 80134fe:	4690      	mov	r8, r2
 8013500:	f7fb f9ec 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013504:	b9e0      	cbnz	r0, 8013540 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013506:	463e      	mov	r6, r7
 8013508:	e009      	b.n	801351e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801350a:	68a8      	ldr	r0, [r5, #8]
 801350c:	f00a ff51 	bl	801e3b2 <memcpy>
 8013510:	68ab      	ldr	r3, [r5, #8]
 8013512:	6928      	ldr	r0, [r5, #16]
 8013514:	4423      	add	r3, r4
 8013516:	4420      	add	r0, r4
 8013518:	1b36      	subs	r6, r6, r4
 801351a:	60ab      	str	r3, [r5, #8]
 801351c:	6128      	str	r0, [r5, #16]
 801351e:	2201      	movs	r2, #1
 8013520:	4631      	mov	r1, r6
 8013522:	4628      	mov	r0, r5
 8013524:	f7fb fa62 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 8013528:	1bb9      	subs	r1, r7, r6
 801352a:	4604      	mov	r4, r0
 801352c:	4602      	mov	r2, r0
 801352e:	4441      	add	r1, r8
 8013530:	2800      	cmp	r0, #0
 8013532:	d1ea      	bne.n	801350a <ucdr_serialize_endian_array_uint8_t+0x16>
 8013534:	2301      	movs	r3, #1
 8013536:	7da8      	ldrb	r0, [r5, #22]
 8013538:	756b      	strb	r3, [r5, #21]
 801353a:	4058      	eors	r0, r3
 801353c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013540:	463a      	mov	r2, r7
 8013542:	68a8      	ldr	r0, [r5, #8]
 8013544:	4641      	mov	r1, r8
 8013546:	f00a ff34 	bl	801e3b2 <memcpy>
 801354a:	68aa      	ldr	r2, [r5, #8]
 801354c:	692b      	ldr	r3, [r5, #16]
 801354e:	443a      	add	r2, r7
 8013550:	443b      	add	r3, r7
 8013552:	60aa      	str	r2, [r5, #8]
 8013554:	612b      	str	r3, [r5, #16]
 8013556:	e7ed      	b.n	8013534 <ucdr_serialize_endian_array_uint8_t+0x40>

08013558 <ucdr_deserialize_array_uint8_t>:
 8013558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801355c:	4688      	mov	r8, r1
 801355e:	4611      	mov	r1, r2
 8013560:	4617      	mov	r7, r2
 8013562:	4605      	mov	r5, r0
 8013564:	f7fb f9ba 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013568:	b9e0      	cbnz	r0, 80135a4 <ucdr_deserialize_array_uint8_t+0x4c>
 801356a:	463e      	mov	r6, r7
 801356c:	e009      	b.n	8013582 <ucdr_deserialize_array_uint8_t+0x2a>
 801356e:	68a9      	ldr	r1, [r5, #8]
 8013570:	f00a ff1f 	bl	801e3b2 <memcpy>
 8013574:	68aa      	ldr	r2, [r5, #8]
 8013576:	692b      	ldr	r3, [r5, #16]
 8013578:	4422      	add	r2, r4
 801357a:	4423      	add	r3, r4
 801357c:	1b36      	subs	r6, r6, r4
 801357e:	60aa      	str	r2, [r5, #8]
 8013580:	612b      	str	r3, [r5, #16]
 8013582:	2201      	movs	r2, #1
 8013584:	4631      	mov	r1, r6
 8013586:	4628      	mov	r0, r5
 8013588:	f7fb fa30 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 801358c:	4604      	mov	r4, r0
 801358e:	1bb8      	subs	r0, r7, r6
 8013590:	4622      	mov	r2, r4
 8013592:	4440      	add	r0, r8
 8013594:	2c00      	cmp	r4, #0
 8013596:	d1ea      	bne.n	801356e <ucdr_deserialize_array_uint8_t+0x16>
 8013598:	2301      	movs	r3, #1
 801359a:	7da8      	ldrb	r0, [r5, #22]
 801359c:	756b      	strb	r3, [r5, #21]
 801359e:	4058      	eors	r0, r3
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	463a      	mov	r2, r7
 80135a6:	68a9      	ldr	r1, [r5, #8]
 80135a8:	4640      	mov	r0, r8
 80135aa:	f00a ff02 	bl	801e3b2 <memcpy>
 80135ae:	68aa      	ldr	r2, [r5, #8]
 80135b0:	692b      	ldr	r3, [r5, #16]
 80135b2:	443a      	add	r2, r7
 80135b4:	443b      	add	r3, r7
 80135b6:	60aa      	str	r2, [r5, #8]
 80135b8:	612b      	str	r3, [r5, #16]
 80135ba:	e7ed      	b.n	8013598 <ucdr_deserialize_array_uint8_t+0x40>

080135bc <ucdr_deserialize_endian_array_uint8_t>:
 80135bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135c0:	4619      	mov	r1, r3
 80135c2:	461f      	mov	r7, r3
 80135c4:	4605      	mov	r5, r0
 80135c6:	4690      	mov	r8, r2
 80135c8:	f7fb f988 	bl	800e8dc <ucdr_check_buffer_available_for>
 80135cc:	b9e0      	cbnz	r0, 8013608 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80135ce:	463e      	mov	r6, r7
 80135d0:	e009      	b.n	80135e6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80135d2:	68a9      	ldr	r1, [r5, #8]
 80135d4:	f00a feed 	bl	801e3b2 <memcpy>
 80135d8:	68aa      	ldr	r2, [r5, #8]
 80135da:	692b      	ldr	r3, [r5, #16]
 80135dc:	4422      	add	r2, r4
 80135de:	4423      	add	r3, r4
 80135e0:	1b36      	subs	r6, r6, r4
 80135e2:	60aa      	str	r2, [r5, #8]
 80135e4:	612b      	str	r3, [r5, #16]
 80135e6:	2201      	movs	r2, #1
 80135e8:	4631      	mov	r1, r6
 80135ea:	4628      	mov	r0, r5
 80135ec:	f7fb f9fe 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 80135f0:	4604      	mov	r4, r0
 80135f2:	1bb8      	subs	r0, r7, r6
 80135f4:	4622      	mov	r2, r4
 80135f6:	4440      	add	r0, r8
 80135f8:	2c00      	cmp	r4, #0
 80135fa:	d1ea      	bne.n	80135d2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80135fc:	2301      	movs	r3, #1
 80135fe:	7da8      	ldrb	r0, [r5, #22]
 8013600:	756b      	strb	r3, [r5, #21]
 8013602:	4058      	eors	r0, r3
 8013604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013608:	463a      	mov	r2, r7
 801360a:	68a9      	ldr	r1, [r5, #8]
 801360c:	4640      	mov	r0, r8
 801360e:	f00a fed0 	bl	801e3b2 <memcpy>
 8013612:	68aa      	ldr	r2, [r5, #8]
 8013614:	692b      	ldr	r3, [r5, #16]
 8013616:	443a      	add	r2, r7
 8013618:	443b      	add	r3, r7
 801361a:	60aa      	str	r2, [r5, #8]
 801361c:	612b      	str	r3, [r5, #16]
 801361e:	e7ed      	b.n	80135fc <ucdr_deserialize_endian_array_uint8_t+0x40>

08013620 <ucdr_serialize_array_double>:
 8013620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013624:	460e      	mov	r6, r1
 8013626:	2108      	movs	r1, #8
 8013628:	4604      	mov	r4, r0
 801362a:	4617      	mov	r7, r2
 801362c:	f7fb f9b6 	bl	800e99c <ucdr_buffer_alignment>
 8013630:	4601      	mov	r1, r0
 8013632:	4620      	mov	r0, r4
 8013634:	7d65      	ldrb	r5, [r4, #21]
 8013636:	f7fb f9f5 	bl	800ea24 <ucdr_advance_buffer>
 801363a:	7d21      	ldrb	r1, [r4, #20]
 801363c:	7565      	strb	r5, [r4, #21]
 801363e:	2901      	cmp	r1, #1
 8013640:	d010      	beq.n	8013664 <ucdr_serialize_array_double+0x44>
 8013642:	b157      	cbz	r7, 801365a <ucdr_serialize_array_double+0x3a>
 8013644:	2500      	movs	r5, #0
 8013646:	e000      	b.n	801364a <ucdr_serialize_array_double+0x2a>
 8013648:	7d21      	ldrb	r1, [r4, #20]
 801364a:	ecb6 0b02 	vldmia	r6!, {d0}
 801364e:	4620      	mov	r0, r4
 8013650:	3501      	adds	r5, #1
 8013652:	f001 f985 	bl	8014960 <ucdr_serialize_endian_double>
 8013656:	42af      	cmp	r7, r5
 8013658:	d1f6      	bne.n	8013648 <ucdr_serialize_array_double+0x28>
 801365a:	7da0      	ldrb	r0, [r4, #22]
 801365c:	f080 0001 	eor.w	r0, r0, #1
 8013660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013664:	00ff      	lsls	r7, r7, #3
 8013666:	4639      	mov	r1, r7
 8013668:	4620      	mov	r0, r4
 801366a:	f7fb f937 	bl	800e8dc <ucdr_check_buffer_available_for>
 801366e:	b9f8      	cbnz	r0, 80136b0 <ucdr_serialize_array_double+0x90>
 8013670:	46b8      	mov	r8, r7
 8013672:	e00a      	b.n	801368a <ucdr_serialize_array_double+0x6a>
 8013674:	68a0      	ldr	r0, [r4, #8]
 8013676:	f00a fe9c 	bl	801e3b2 <memcpy>
 801367a:	68a2      	ldr	r2, [r4, #8]
 801367c:	6923      	ldr	r3, [r4, #16]
 801367e:	442a      	add	r2, r5
 8013680:	442b      	add	r3, r5
 8013682:	eba8 0805 	sub.w	r8, r8, r5
 8013686:	60a2      	str	r2, [r4, #8]
 8013688:	6123      	str	r3, [r4, #16]
 801368a:	2208      	movs	r2, #8
 801368c:	4641      	mov	r1, r8
 801368e:	4620      	mov	r0, r4
 8013690:	f7fb f9ac 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 8013694:	eba7 0108 	sub.w	r1, r7, r8
 8013698:	4605      	mov	r5, r0
 801369a:	4602      	mov	r2, r0
 801369c:	4431      	add	r1, r6
 801369e:	2800      	cmp	r0, #0
 80136a0:	d1e8      	bne.n	8013674 <ucdr_serialize_array_double+0x54>
 80136a2:	7da0      	ldrb	r0, [r4, #22]
 80136a4:	2308      	movs	r3, #8
 80136a6:	7563      	strb	r3, [r4, #21]
 80136a8:	f080 0001 	eor.w	r0, r0, #1
 80136ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b0:	463a      	mov	r2, r7
 80136b2:	68a0      	ldr	r0, [r4, #8]
 80136b4:	4631      	mov	r1, r6
 80136b6:	f00a fe7c 	bl	801e3b2 <memcpy>
 80136ba:	68a2      	ldr	r2, [r4, #8]
 80136bc:	6923      	ldr	r3, [r4, #16]
 80136be:	443a      	add	r2, r7
 80136c0:	443b      	add	r3, r7
 80136c2:	60a2      	str	r2, [r4, #8]
 80136c4:	6123      	str	r3, [r4, #16]
 80136c6:	e7ec      	b.n	80136a2 <ucdr_serialize_array_double+0x82>

080136c8 <ucdr_serialize_endian_array_double>:
 80136c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136cc:	4688      	mov	r8, r1
 80136ce:	2108      	movs	r1, #8
 80136d0:	4604      	mov	r4, r0
 80136d2:	4616      	mov	r6, r2
 80136d4:	461f      	mov	r7, r3
 80136d6:	f7fb f961 	bl	800e99c <ucdr_buffer_alignment>
 80136da:	4601      	mov	r1, r0
 80136dc:	4620      	mov	r0, r4
 80136de:	7d65      	ldrb	r5, [r4, #21]
 80136e0:	f7fb f9a0 	bl	800ea24 <ucdr_advance_buffer>
 80136e4:	f1b8 0f01 	cmp.w	r8, #1
 80136e8:	7565      	strb	r5, [r4, #21]
 80136ea:	d00f      	beq.n	801370c <ucdr_serialize_endian_array_double+0x44>
 80136ec:	2500      	movs	r5, #0
 80136ee:	b147      	cbz	r7, 8013702 <ucdr_serialize_endian_array_double+0x3a>
 80136f0:	ecb6 0b02 	vldmia	r6!, {d0}
 80136f4:	4641      	mov	r1, r8
 80136f6:	4620      	mov	r0, r4
 80136f8:	3501      	adds	r5, #1
 80136fa:	f001 f931 	bl	8014960 <ucdr_serialize_endian_double>
 80136fe:	42af      	cmp	r7, r5
 8013700:	d1f6      	bne.n	80136f0 <ucdr_serialize_endian_array_double+0x28>
 8013702:	7da0      	ldrb	r0, [r4, #22]
 8013704:	f080 0001 	eor.w	r0, r0, #1
 8013708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801370c:	00ff      	lsls	r7, r7, #3
 801370e:	4639      	mov	r1, r7
 8013710:	4620      	mov	r0, r4
 8013712:	f7fb f8e3 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013716:	b9f8      	cbnz	r0, 8013758 <ucdr_serialize_endian_array_double+0x90>
 8013718:	46b8      	mov	r8, r7
 801371a:	e00a      	b.n	8013732 <ucdr_serialize_endian_array_double+0x6a>
 801371c:	68a0      	ldr	r0, [r4, #8]
 801371e:	f00a fe48 	bl	801e3b2 <memcpy>
 8013722:	68a2      	ldr	r2, [r4, #8]
 8013724:	6923      	ldr	r3, [r4, #16]
 8013726:	442a      	add	r2, r5
 8013728:	442b      	add	r3, r5
 801372a:	eba8 0805 	sub.w	r8, r8, r5
 801372e:	60a2      	str	r2, [r4, #8]
 8013730:	6123      	str	r3, [r4, #16]
 8013732:	2208      	movs	r2, #8
 8013734:	4641      	mov	r1, r8
 8013736:	4620      	mov	r0, r4
 8013738:	f7fb f958 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 801373c:	eba7 0108 	sub.w	r1, r7, r8
 8013740:	4605      	mov	r5, r0
 8013742:	4602      	mov	r2, r0
 8013744:	4431      	add	r1, r6
 8013746:	2800      	cmp	r0, #0
 8013748:	d1e8      	bne.n	801371c <ucdr_serialize_endian_array_double+0x54>
 801374a:	7da0      	ldrb	r0, [r4, #22]
 801374c:	2308      	movs	r3, #8
 801374e:	7563      	strb	r3, [r4, #21]
 8013750:	f080 0001 	eor.w	r0, r0, #1
 8013754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013758:	463a      	mov	r2, r7
 801375a:	68a0      	ldr	r0, [r4, #8]
 801375c:	4631      	mov	r1, r6
 801375e:	f00a fe28 	bl	801e3b2 <memcpy>
 8013762:	68a2      	ldr	r2, [r4, #8]
 8013764:	6923      	ldr	r3, [r4, #16]
 8013766:	443a      	add	r2, r7
 8013768:	443b      	add	r3, r7
 801376a:	60a2      	str	r2, [r4, #8]
 801376c:	6123      	str	r3, [r4, #16]
 801376e:	e7ec      	b.n	801374a <ucdr_serialize_endian_array_double+0x82>

08013770 <ucdr_deserialize_array_double>:
 8013770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013774:	460e      	mov	r6, r1
 8013776:	2108      	movs	r1, #8
 8013778:	4604      	mov	r4, r0
 801377a:	4617      	mov	r7, r2
 801377c:	f7fb f90e 	bl	800e99c <ucdr_buffer_alignment>
 8013780:	4601      	mov	r1, r0
 8013782:	4620      	mov	r0, r4
 8013784:	7d65      	ldrb	r5, [r4, #21]
 8013786:	f7fb f94d 	bl	800ea24 <ucdr_advance_buffer>
 801378a:	7d21      	ldrb	r1, [r4, #20]
 801378c:	7565      	strb	r5, [r4, #21]
 801378e:	2901      	cmp	r1, #1
 8013790:	d011      	beq.n	80137b6 <ucdr_deserialize_array_double+0x46>
 8013792:	b15f      	cbz	r7, 80137ac <ucdr_deserialize_array_double+0x3c>
 8013794:	2500      	movs	r5, #0
 8013796:	e000      	b.n	801379a <ucdr_deserialize_array_double+0x2a>
 8013798:	7d21      	ldrb	r1, [r4, #20]
 801379a:	4632      	mov	r2, r6
 801379c:	4620      	mov	r0, r4
 801379e:	3501      	adds	r5, #1
 80137a0:	f001 fa64 	bl	8014c6c <ucdr_deserialize_endian_double>
 80137a4:	42af      	cmp	r7, r5
 80137a6:	f106 0608 	add.w	r6, r6, #8
 80137aa:	d1f5      	bne.n	8013798 <ucdr_deserialize_array_double+0x28>
 80137ac:	7da0      	ldrb	r0, [r4, #22]
 80137ae:	f080 0001 	eor.w	r0, r0, #1
 80137b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b6:	00ff      	lsls	r7, r7, #3
 80137b8:	4639      	mov	r1, r7
 80137ba:	4620      	mov	r0, r4
 80137bc:	f7fb f88e 	bl	800e8dc <ucdr_check_buffer_available_for>
 80137c0:	b9f8      	cbnz	r0, 8013802 <ucdr_deserialize_array_double+0x92>
 80137c2:	46b8      	mov	r8, r7
 80137c4:	e00a      	b.n	80137dc <ucdr_deserialize_array_double+0x6c>
 80137c6:	68a1      	ldr	r1, [r4, #8]
 80137c8:	f00a fdf3 	bl	801e3b2 <memcpy>
 80137cc:	68a2      	ldr	r2, [r4, #8]
 80137ce:	6923      	ldr	r3, [r4, #16]
 80137d0:	442a      	add	r2, r5
 80137d2:	442b      	add	r3, r5
 80137d4:	eba8 0805 	sub.w	r8, r8, r5
 80137d8:	60a2      	str	r2, [r4, #8]
 80137da:	6123      	str	r3, [r4, #16]
 80137dc:	2208      	movs	r2, #8
 80137de:	4641      	mov	r1, r8
 80137e0:	4620      	mov	r0, r4
 80137e2:	f7fb f903 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 80137e6:	4605      	mov	r5, r0
 80137e8:	eba7 0008 	sub.w	r0, r7, r8
 80137ec:	462a      	mov	r2, r5
 80137ee:	4430      	add	r0, r6
 80137f0:	2d00      	cmp	r5, #0
 80137f2:	d1e8      	bne.n	80137c6 <ucdr_deserialize_array_double+0x56>
 80137f4:	7da0      	ldrb	r0, [r4, #22]
 80137f6:	2308      	movs	r3, #8
 80137f8:	7563      	strb	r3, [r4, #21]
 80137fa:	f080 0001 	eor.w	r0, r0, #1
 80137fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013802:	463a      	mov	r2, r7
 8013804:	68a1      	ldr	r1, [r4, #8]
 8013806:	4630      	mov	r0, r6
 8013808:	f00a fdd3 	bl	801e3b2 <memcpy>
 801380c:	68a2      	ldr	r2, [r4, #8]
 801380e:	6923      	ldr	r3, [r4, #16]
 8013810:	443a      	add	r2, r7
 8013812:	443b      	add	r3, r7
 8013814:	60a2      	str	r2, [r4, #8]
 8013816:	6123      	str	r3, [r4, #16]
 8013818:	e7ec      	b.n	80137f4 <ucdr_deserialize_array_double+0x84>
 801381a:	bf00      	nop

0801381c <ucdr_deserialize_endian_array_double>:
 801381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013820:	4688      	mov	r8, r1
 8013822:	2108      	movs	r1, #8
 8013824:	4605      	mov	r5, r0
 8013826:	4614      	mov	r4, r2
 8013828:	461f      	mov	r7, r3
 801382a:	f7fb f8b7 	bl	800e99c <ucdr_buffer_alignment>
 801382e:	4601      	mov	r1, r0
 8013830:	4628      	mov	r0, r5
 8013832:	7d6e      	ldrb	r6, [r5, #21]
 8013834:	f7fb f8f6 	bl	800ea24 <ucdr_advance_buffer>
 8013838:	f1b8 0f01 	cmp.w	r8, #1
 801383c:	756e      	strb	r6, [r5, #21]
 801383e:	d010      	beq.n	8013862 <ucdr_deserialize_endian_array_double+0x46>
 8013840:	2600      	movs	r6, #0
 8013842:	b14f      	cbz	r7, 8013858 <ucdr_deserialize_endian_array_double+0x3c>
 8013844:	4622      	mov	r2, r4
 8013846:	4641      	mov	r1, r8
 8013848:	4628      	mov	r0, r5
 801384a:	3601      	adds	r6, #1
 801384c:	f001 fa0e 	bl	8014c6c <ucdr_deserialize_endian_double>
 8013850:	42b7      	cmp	r7, r6
 8013852:	f104 0408 	add.w	r4, r4, #8
 8013856:	d1f5      	bne.n	8013844 <ucdr_deserialize_endian_array_double+0x28>
 8013858:	7da8      	ldrb	r0, [r5, #22]
 801385a:	f080 0001 	eor.w	r0, r0, #1
 801385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013862:	00ff      	lsls	r7, r7, #3
 8013864:	4639      	mov	r1, r7
 8013866:	4628      	mov	r0, r5
 8013868:	f7fb f838 	bl	800e8dc <ucdr_check_buffer_available_for>
 801386c:	b9f8      	cbnz	r0, 80138ae <ucdr_deserialize_endian_array_double+0x92>
 801386e:	46b8      	mov	r8, r7
 8013870:	e00a      	b.n	8013888 <ucdr_deserialize_endian_array_double+0x6c>
 8013872:	68a9      	ldr	r1, [r5, #8]
 8013874:	f00a fd9d 	bl	801e3b2 <memcpy>
 8013878:	68aa      	ldr	r2, [r5, #8]
 801387a:	692b      	ldr	r3, [r5, #16]
 801387c:	4432      	add	r2, r6
 801387e:	4433      	add	r3, r6
 8013880:	eba8 0806 	sub.w	r8, r8, r6
 8013884:	60aa      	str	r2, [r5, #8]
 8013886:	612b      	str	r3, [r5, #16]
 8013888:	2208      	movs	r2, #8
 801388a:	4641      	mov	r1, r8
 801388c:	4628      	mov	r0, r5
 801388e:	f7fb f8ad 	bl	800e9ec <ucdr_check_final_buffer_behavior_array>
 8013892:	4606      	mov	r6, r0
 8013894:	eba7 0008 	sub.w	r0, r7, r8
 8013898:	4632      	mov	r2, r6
 801389a:	4420      	add	r0, r4
 801389c:	2e00      	cmp	r6, #0
 801389e:	d1e8      	bne.n	8013872 <ucdr_deserialize_endian_array_double+0x56>
 80138a0:	7da8      	ldrb	r0, [r5, #22]
 80138a2:	2308      	movs	r3, #8
 80138a4:	756b      	strb	r3, [r5, #21]
 80138a6:	f080 0001 	eor.w	r0, r0, #1
 80138aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ae:	463a      	mov	r2, r7
 80138b0:	68a9      	ldr	r1, [r5, #8]
 80138b2:	4620      	mov	r0, r4
 80138b4:	f00a fd7d 	bl	801e3b2 <memcpy>
 80138b8:	68aa      	ldr	r2, [r5, #8]
 80138ba:	692b      	ldr	r3, [r5, #16]
 80138bc:	443a      	add	r2, r7
 80138be:	443b      	add	r3, r7
 80138c0:	60aa      	str	r2, [r5, #8]
 80138c2:	612b      	str	r3, [r5, #16]
 80138c4:	e7ec      	b.n	80138a0 <ucdr_deserialize_endian_array_double+0x84>
 80138c6:	bf00      	nop

080138c8 <ucdr_serialize_bool>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	460d      	mov	r5, r1
 80138cc:	2101      	movs	r1, #1
 80138ce:	4604      	mov	r4, r0
 80138d0:	f7fb f810 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 80138d4:	b148      	cbz	r0, 80138ea <ucdr_serialize_bool+0x22>
 80138d6:	68a3      	ldr	r3, [r4, #8]
 80138d8:	701d      	strb	r5, [r3, #0]
 80138da:	68a2      	ldr	r2, [r4, #8]
 80138dc:	6923      	ldr	r3, [r4, #16]
 80138de:	2101      	movs	r1, #1
 80138e0:	440a      	add	r2, r1
 80138e2:	440b      	add	r3, r1
 80138e4:	60a2      	str	r2, [r4, #8]
 80138e6:	6123      	str	r3, [r4, #16]
 80138e8:	7561      	strb	r1, [r4, #21]
 80138ea:	7da0      	ldrb	r0, [r4, #22]
 80138ec:	f080 0001 	eor.w	r0, r0, #1
 80138f0:	bd38      	pop	{r3, r4, r5, pc}
 80138f2:	bf00      	nop

080138f4 <ucdr_deserialize_bool>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	460d      	mov	r5, r1
 80138f8:	2101      	movs	r1, #1
 80138fa:	4604      	mov	r4, r0
 80138fc:	f7fa fffa 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013900:	b160      	cbz	r0, 801391c <ucdr_deserialize_bool+0x28>
 8013902:	68a2      	ldr	r2, [r4, #8]
 8013904:	6923      	ldr	r3, [r4, #16]
 8013906:	f812 1b01 	ldrb.w	r1, [r2], #1
 801390a:	3900      	subs	r1, #0
 801390c:	bf18      	it	ne
 801390e:	2101      	movne	r1, #1
 8013910:	7029      	strb	r1, [r5, #0]
 8013912:	3301      	adds	r3, #1
 8013914:	2101      	movs	r1, #1
 8013916:	60a2      	str	r2, [r4, #8]
 8013918:	6123      	str	r3, [r4, #16]
 801391a:	7561      	strb	r1, [r4, #21]
 801391c:	7da0      	ldrb	r0, [r4, #22]
 801391e:	f080 0001 	eor.w	r0, r0, #1
 8013922:	bd38      	pop	{r3, r4, r5, pc}

08013924 <ucdr_serialize_uint8_t>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	460d      	mov	r5, r1
 8013928:	2101      	movs	r1, #1
 801392a:	4604      	mov	r4, r0
 801392c:	f7fa ffe2 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013930:	b148      	cbz	r0, 8013946 <ucdr_serialize_uint8_t+0x22>
 8013932:	68a3      	ldr	r3, [r4, #8]
 8013934:	701d      	strb	r5, [r3, #0]
 8013936:	68a2      	ldr	r2, [r4, #8]
 8013938:	6923      	ldr	r3, [r4, #16]
 801393a:	2101      	movs	r1, #1
 801393c:	440a      	add	r2, r1
 801393e:	440b      	add	r3, r1
 8013940:	60a2      	str	r2, [r4, #8]
 8013942:	6123      	str	r3, [r4, #16]
 8013944:	7561      	strb	r1, [r4, #21]
 8013946:	7da0      	ldrb	r0, [r4, #22]
 8013948:	f080 0001 	eor.w	r0, r0, #1
 801394c:	bd38      	pop	{r3, r4, r5, pc}
 801394e:	bf00      	nop

08013950 <ucdr_deserialize_uint8_t>:
 8013950:	b538      	push	{r3, r4, r5, lr}
 8013952:	460d      	mov	r5, r1
 8013954:	2101      	movs	r1, #1
 8013956:	4604      	mov	r4, r0
 8013958:	f7fa ffcc 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 801395c:	b150      	cbz	r0, 8013974 <ucdr_deserialize_uint8_t+0x24>
 801395e:	68a3      	ldr	r3, [r4, #8]
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	702b      	strb	r3, [r5, #0]
 8013964:	68a2      	ldr	r2, [r4, #8]
 8013966:	6923      	ldr	r3, [r4, #16]
 8013968:	2101      	movs	r1, #1
 801396a:	440a      	add	r2, r1
 801396c:	440b      	add	r3, r1
 801396e:	60a2      	str	r2, [r4, #8]
 8013970:	6123      	str	r3, [r4, #16]
 8013972:	7561      	strb	r1, [r4, #21]
 8013974:	7da0      	ldrb	r0, [r4, #22]
 8013976:	f080 0001 	eor.w	r0, r0, #1
 801397a:	bd38      	pop	{r3, r4, r5, pc}

0801397c <ucdr_serialize_uint16_t>:
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	b082      	sub	sp, #8
 8013982:	460b      	mov	r3, r1
 8013984:	2102      	movs	r1, #2
 8013986:	4604      	mov	r4, r0
 8013988:	f8ad 3006 	strh.w	r3, [sp, #6]
 801398c:	f7fb f806 	bl	800e99c <ucdr_buffer_alignment>
 8013990:	4601      	mov	r1, r0
 8013992:	4620      	mov	r0, r4
 8013994:	7d67      	ldrb	r7, [r4, #21]
 8013996:	f7fb f845 	bl	800ea24 <ucdr_advance_buffer>
 801399a:	2102      	movs	r1, #2
 801399c:	4620      	mov	r0, r4
 801399e:	f7fa ff9d 	bl	800e8dc <ucdr_check_buffer_available_for>
 80139a2:	b1c0      	cbz	r0, 80139d6 <ucdr_serialize_uint16_t+0x5a>
 80139a4:	7d22      	ldrb	r2, [r4, #20]
 80139a6:	68a3      	ldr	r3, [r4, #8]
 80139a8:	2a01      	cmp	r2, #1
 80139aa:	d04e      	beq.n	8013a4a <ucdr_serialize_uint16_t+0xce>
 80139ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80139b0:	701a      	strb	r2, [r3, #0]
 80139b2:	68a3      	ldr	r3, [r4, #8]
 80139b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139b8:	705a      	strb	r2, [r3, #1]
 80139ba:	68a2      	ldr	r2, [r4, #8]
 80139bc:	6923      	ldr	r3, [r4, #16]
 80139be:	3202      	adds	r2, #2
 80139c0:	3302      	adds	r3, #2
 80139c2:	2102      	movs	r1, #2
 80139c4:	60a2      	str	r2, [r4, #8]
 80139c6:	6123      	str	r3, [r4, #16]
 80139c8:	7561      	strb	r1, [r4, #21]
 80139ca:	7da0      	ldrb	r0, [r4, #22]
 80139cc:	f080 0001 	eor.w	r0, r0, #1
 80139d0:	b002      	add	sp, #8
 80139d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80139da:	42ab      	cmp	r3, r5
 80139dc:	d923      	bls.n	8013a26 <ucdr_serialize_uint16_t+0xaa>
 80139de:	1b5e      	subs	r6, r3, r5
 80139e0:	60a3      	str	r3, [r4, #8]
 80139e2:	6923      	ldr	r3, [r4, #16]
 80139e4:	f1c6 0802 	rsb	r8, r6, #2
 80139e8:	4433      	add	r3, r6
 80139ea:	6123      	str	r3, [r4, #16]
 80139ec:	4641      	mov	r1, r8
 80139ee:	4620      	mov	r0, r4
 80139f0:	f7fa ff80 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 80139f4:	b368      	cbz	r0, 8013a52 <ucdr_serialize_uint16_t+0xd6>
 80139f6:	7d23      	ldrb	r3, [r4, #20]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d03b      	beq.n	8013a74 <ucdr_serialize_uint16_t+0xf8>
 80139fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013a00:	702b      	strb	r3, [r5, #0]
 8013a02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013a06:	706b      	strb	r3, [r5, #1]
 8013a08:	6923      	ldr	r3, [r4, #16]
 8013a0a:	68a2      	ldr	r2, [r4, #8]
 8013a0c:	7da0      	ldrb	r0, [r4, #22]
 8013a0e:	3302      	adds	r3, #2
 8013a10:	4442      	add	r2, r8
 8013a12:	1b9b      	subs	r3, r3, r6
 8013a14:	2102      	movs	r1, #2
 8013a16:	f080 0001 	eor.w	r0, r0, #1
 8013a1a:	60a2      	str	r2, [r4, #8]
 8013a1c:	6123      	str	r3, [r4, #16]
 8013a1e:	7561      	strb	r1, [r4, #21]
 8013a20:	b002      	add	sp, #8
 8013a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a26:	2102      	movs	r1, #2
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f7fa ff63 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	d0cb      	beq.n	80139ca <ucdr_serialize_uint16_t+0x4e>
 8013a32:	7d23      	ldrb	r3, [r4, #20]
 8013a34:	68a2      	ldr	r2, [r4, #8]
 8013a36:	2b01      	cmp	r3, #1
 8013a38:	d018      	beq.n	8013a6c <ucdr_serialize_uint16_t+0xf0>
 8013a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013a3e:	7013      	strb	r3, [r2, #0]
 8013a40:	68a3      	ldr	r3, [r4, #8]
 8013a42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a46:	705a      	strb	r2, [r3, #1]
 8013a48:	e7b7      	b.n	80139ba <ucdr_serialize_uint16_t+0x3e>
 8013a4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013a4e:	801a      	strh	r2, [r3, #0]
 8013a50:	e7b3      	b.n	80139ba <ucdr_serialize_uint16_t+0x3e>
 8013a52:	68a2      	ldr	r2, [r4, #8]
 8013a54:	6923      	ldr	r3, [r4, #16]
 8013a56:	7da0      	ldrb	r0, [r4, #22]
 8013a58:	7567      	strb	r7, [r4, #21]
 8013a5a:	1b92      	subs	r2, r2, r6
 8013a5c:	1b9b      	subs	r3, r3, r6
 8013a5e:	f080 0001 	eor.w	r0, r0, #1
 8013a62:	60a2      	str	r2, [r4, #8]
 8013a64:	6123      	str	r3, [r4, #16]
 8013a66:	b002      	add	sp, #8
 8013a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013a70:	8013      	strh	r3, [r2, #0]
 8013a72:	e7a2      	b.n	80139ba <ucdr_serialize_uint16_t+0x3e>
 8013a74:	4628      	mov	r0, r5
 8013a76:	f10d 0506 	add.w	r5, sp, #6
 8013a7a:	4632      	mov	r2, r6
 8013a7c:	4629      	mov	r1, r5
 8013a7e:	f00a fc98 	bl	801e3b2 <memcpy>
 8013a82:	68a0      	ldr	r0, [r4, #8]
 8013a84:	4642      	mov	r2, r8
 8013a86:	19a9      	adds	r1, r5, r6
 8013a88:	f00a fc93 	bl	801e3b2 <memcpy>
 8013a8c:	e7bc      	b.n	8013a08 <ucdr_serialize_uint16_t+0x8c>
 8013a8e:	bf00      	nop

08013a90 <ucdr_serialize_endian_uint16_t>:
 8013a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a94:	b083      	sub	sp, #12
 8013a96:	460d      	mov	r5, r1
 8013a98:	2102      	movs	r1, #2
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013aa0:	f7fa ff7c 	bl	800e99c <ucdr_buffer_alignment>
 8013aa4:	4601      	mov	r1, r0
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013aac:	f7fa ffba 	bl	800ea24 <ucdr_advance_buffer>
 8013ab0:	2102      	movs	r1, #2
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f7fa ff12 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013ab8:	bb60      	cbnz	r0, 8013b14 <ucdr_serialize_endian_uint16_t+0x84>
 8013aba:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013abe:	42be      	cmp	r6, r7
 8013ac0:	d923      	bls.n	8013b0a <ucdr_serialize_endian_uint16_t+0x7a>
 8013ac2:	6923      	ldr	r3, [r4, #16]
 8013ac4:	60a6      	str	r6, [r4, #8]
 8013ac6:	1bf6      	subs	r6, r6, r7
 8013ac8:	4433      	add	r3, r6
 8013aca:	f1c6 0902 	rsb	r9, r6, #2
 8013ace:	6123      	str	r3, [r4, #16]
 8013ad0:	4649      	mov	r1, r9
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f7fa ff0e 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d037      	beq.n	8013b4c <ucdr_serialize_endian_uint16_t+0xbc>
 8013adc:	2d01      	cmp	r5, #1
 8013ade:	d043      	beq.n	8013b68 <ucdr_serialize_endian_uint16_t+0xd8>
 8013ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ae4:	703b      	strb	r3, [r7, #0]
 8013ae6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013aea:	707b      	strb	r3, [r7, #1]
 8013aec:	6923      	ldr	r3, [r4, #16]
 8013aee:	68a2      	ldr	r2, [r4, #8]
 8013af0:	7da0      	ldrb	r0, [r4, #22]
 8013af2:	3302      	adds	r3, #2
 8013af4:	444a      	add	r2, r9
 8013af6:	1b9b      	subs	r3, r3, r6
 8013af8:	2102      	movs	r1, #2
 8013afa:	f080 0001 	eor.w	r0, r0, #1
 8013afe:	60a2      	str	r2, [r4, #8]
 8013b00:	6123      	str	r3, [r4, #16]
 8013b02:	7561      	strb	r1, [r4, #21]
 8013b04:	b003      	add	sp, #12
 8013b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b0a:	2102      	movs	r1, #2
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f7fa fef1 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013b12:	b188      	cbz	r0, 8013b38 <ucdr_serialize_endian_uint16_t+0xa8>
 8013b14:	2d01      	cmp	r5, #1
 8013b16:	68a3      	ldr	r3, [r4, #8]
 8013b18:	d014      	beq.n	8013b44 <ucdr_serialize_endian_uint16_t+0xb4>
 8013b1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013b1e:	701a      	strb	r2, [r3, #0]
 8013b20:	68a3      	ldr	r3, [r4, #8]
 8013b22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b26:	705a      	strb	r2, [r3, #1]
 8013b28:	68a2      	ldr	r2, [r4, #8]
 8013b2a:	6923      	ldr	r3, [r4, #16]
 8013b2c:	3202      	adds	r2, #2
 8013b2e:	3302      	adds	r3, #2
 8013b30:	2102      	movs	r1, #2
 8013b32:	60a2      	str	r2, [r4, #8]
 8013b34:	6123      	str	r3, [r4, #16]
 8013b36:	7561      	strb	r1, [r4, #21]
 8013b38:	7da0      	ldrb	r0, [r4, #22]
 8013b3a:	f080 0001 	eor.w	r0, r0, #1
 8013b3e:	b003      	add	sp, #12
 8013b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013b48:	801a      	strh	r2, [r3, #0]
 8013b4a:	e7ed      	b.n	8013b28 <ucdr_serialize_endian_uint16_t+0x98>
 8013b4c:	68a2      	ldr	r2, [r4, #8]
 8013b4e:	6923      	ldr	r3, [r4, #16]
 8013b50:	7da0      	ldrb	r0, [r4, #22]
 8013b52:	f884 8015 	strb.w	r8, [r4, #21]
 8013b56:	1b92      	subs	r2, r2, r6
 8013b58:	1b9b      	subs	r3, r3, r6
 8013b5a:	f080 0001 	eor.w	r0, r0, #1
 8013b5e:	60a2      	str	r2, [r4, #8]
 8013b60:	6123      	str	r3, [r4, #16]
 8013b62:	b003      	add	sp, #12
 8013b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b68:	f10d 0506 	add.w	r5, sp, #6
 8013b6c:	4632      	mov	r2, r6
 8013b6e:	4629      	mov	r1, r5
 8013b70:	4638      	mov	r0, r7
 8013b72:	f00a fc1e 	bl	801e3b2 <memcpy>
 8013b76:	68a0      	ldr	r0, [r4, #8]
 8013b78:	464a      	mov	r2, r9
 8013b7a:	19a9      	adds	r1, r5, r6
 8013b7c:	f00a fc19 	bl	801e3b2 <memcpy>
 8013b80:	e7b4      	b.n	8013aec <ucdr_serialize_endian_uint16_t+0x5c>
 8013b82:	bf00      	nop

08013b84 <ucdr_deserialize_uint16_t>:
 8013b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b88:	460d      	mov	r5, r1
 8013b8a:	2102      	movs	r1, #2
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	f7fa ff05 	bl	800e99c <ucdr_buffer_alignment>
 8013b92:	4601      	mov	r1, r0
 8013b94:	4620      	mov	r0, r4
 8013b96:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013b9a:	f7fa ff43 	bl	800ea24 <ucdr_advance_buffer>
 8013b9e:	2102      	movs	r1, #2
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f7fa fe9b 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013ba6:	b1a8      	cbz	r0, 8013bd4 <ucdr_deserialize_uint16_t+0x50>
 8013ba8:	7d22      	ldrb	r2, [r4, #20]
 8013baa:	68a3      	ldr	r3, [r4, #8]
 8013bac:	2a01      	cmp	r2, #1
 8013bae:	d046      	beq.n	8013c3e <ucdr_deserialize_uint16_t+0xba>
 8013bb0:	785b      	ldrb	r3, [r3, #1]
 8013bb2:	702b      	strb	r3, [r5, #0]
 8013bb4:	68a3      	ldr	r3, [r4, #8]
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	706b      	strb	r3, [r5, #1]
 8013bba:	68a2      	ldr	r2, [r4, #8]
 8013bbc:	6923      	ldr	r3, [r4, #16]
 8013bbe:	3202      	adds	r2, #2
 8013bc0:	3302      	adds	r3, #2
 8013bc2:	2102      	movs	r1, #2
 8013bc4:	60a2      	str	r2, [r4, #8]
 8013bc6:	6123      	str	r3, [r4, #16]
 8013bc8:	7561      	strb	r1, [r4, #21]
 8013bca:	7da0      	ldrb	r0, [r4, #22]
 8013bcc:	f080 0001 	eor.w	r0, r0, #1
 8013bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bd4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013bd8:	42be      	cmp	r6, r7
 8013bda:	d920      	bls.n	8013c1e <ucdr_deserialize_uint16_t+0x9a>
 8013bdc:	6923      	ldr	r3, [r4, #16]
 8013bde:	60a6      	str	r6, [r4, #8]
 8013be0:	1bf6      	subs	r6, r6, r7
 8013be2:	4433      	add	r3, r6
 8013be4:	f1c6 0902 	rsb	r9, r6, #2
 8013be8:	6123      	str	r3, [r4, #16]
 8013bea:	4649      	mov	r1, r9
 8013bec:	4620      	mov	r0, r4
 8013bee:	f7fa fe81 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013bf2:	b338      	cbz	r0, 8013c44 <ucdr_deserialize_uint16_t+0xc0>
 8013bf4:	7d23      	ldrb	r3, [r4, #20]
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	d034      	beq.n	8013c64 <ucdr_deserialize_uint16_t+0xe0>
 8013bfa:	787b      	ldrb	r3, [r7, #1]
 8013bfc:	702b      	strb	r3, [r5, #0]
 8013bfe:	783b      	ldrb	r3, [r7, #0]
 8013c00:	706b      	strb	r3, [r5, #1]
 8013c02:	6923      	ldr	r3, [r4, #16]
 8013c04:	68a2      	ldr	r2, [r4, #8]
 8013c06:	7da0      	ldrb	r0, [r4, #22]
 8013c08:	2102      	movs	r1, #2
 8013c0a:	3302      	adds	r3, #2
 8013c0c:	444a      	add	r2, r9
 8013c0e:	1b9b      	subs	r3, r3, r6
 8013c10:	7561      	strb	r1, [r4, #21]
 8013c12:	60a2      	str	r2, [r4, #8]
 8013c14:	6123      	str	r3, [r4, #16]
 8013c16:	f080 0001 	eor.w	r0, r0, #1
 8013c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c1e:	2102      	movs	r1, #2
 8013c20:	4620      	mov	r0, r4
 8013c22:	f7fa fe67 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d0cf      	beq.n	8013bca <ucdr_deserialize_uint16_t+0x46>
 8013c2a:	7d23      	ldrb	r3, [r4, #20]
 8013c2c:	68a2      	ldr	r2, [r4, #8]
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d015      	beq.n	8013c5e <ucdr_deserialize_uint16_t+0xda>
 8013c32:	7853      	ldrb	r3, [r2, #1]
 8013c34:	702b      	strb	r3, [r5, #0]
 8013c36:	68a3      	ldr	r3, [r4, #8]
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	706b      	strb	r3, [r5, #1]
 8013c3c:	e7bd      	b.n	8013bba <ucdr_deserialize_uint16_t+0x36>
 8013c3e:	881b      	ldrh	r3, [r3, #0]
 8013c40:	802b      	strh	r3, [r5, #0]
 8013c42:	e7ba      	b.n	8013bba <ucdr_deserialize_uint16_t+0x36>
 8013c44:	68a2      	ldr	r2, [r4, #8]
 8013c46:	6923      	ldr	r3, [r4, #16]
 8013c48:	7da0      	ldrb	r0, [r4, #22]
 8013c4a:	f884 8015 	strb.w	r8, [r4, #21]
 8013c4e:	1b92      	subs	r2, r2, r6
 8013c50:	1b9b      	subs	r3, r3, r6
 8013c52:	60a2      	str	r2, [r4, #8]
 8013c54:	6123      	str	r3, [r4, #16]
 8013c56:	f080 0001 	eor.w	r0, r0, #1
 8013c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c5e:	8813      	ldrh	r3, [r2, #0]
 8013c60:	802b      	strh	r3, [r5, #0]
 8013c62:	e7aa      	b.n	8013bba <ucdr_deserialize_uint16_t+0x36>
 8013c64:	4639      	mov	r1, r7
 8013c66:	4632      	mov	r2, r6
 8013c68:	4628      	mov	r0, r5
 8013c6a:	f00a fba2 	bl	801e3b2 <memcpy>
 8013c6e:	68a1      	ldr	r1, [r4, #8]
 8013c70:	464a      	mov	r2, r9
 8013c72:	19a8      	adds	r0, r5, r6
 8013c74:	f00a fb9d 	bl	801e3b2 <memcpy>
 8013c78:	e7c3      	b.n	8013c02 <ucdr_deserialize_uint16_t+0x7e>
 8013c7a:	bf00      	nop

08013c7c <ucdr_deserialize_endian_uint16_t>:
 8013c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c80:	460e      	mov	r6, r1
 8013c82:	2102      	movs	r1, #2
 8013c84:	4604      	mov	r4, r0
 8013c86:	4615      	mov	r5, r2
 8013c88:	f7fa fe88 	bl	800e99c <ucdr_buffer_alignment>
 8013c8c:	4601      	mov	r1, r0
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013c94:	f7fa fec6 	bl	800ea24 <ucdr_advance_buffer>
 8013c98:	2102      	movs	r1, #2
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	f7fa fe1e 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013ca0:	bb60      	cbnz	r0, 8013cfc <ucdr_deserialize_endian_uint16_t+0x80>
 8013ca2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8013ca6:	4547      	cmp	r7, r8
 8013ca8:	d923      	bls.n	8013cf2 <ucdr_deserialize_endian_uint16_t+0x76>
 8013caa:	6923      	ldr	r3, [r4, #16]
 8013cac:	60a7      	str	r7, [r4, #8]
 8013cae:	eba7 0708 	sub.w	r7, r7, r8
 8013cb2:	443b      	add	r3, r7
 8013cb4:	f1c7 0a02 	rsb	sl, r7, #2
 8013cb8:	6123      	str	r3, [r4, #16]
 8013cba:	4651      	mov	r1, sl
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	f7fa fe19 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d032      	beq.n	8013d2c <ucdr_deserialize_endian_uint16_t+0xb0>
 8013cc6:	2e01      	cmp	r6, #1
 8013cc8:	d03d      	beq.n	8013d46 <ucdr_deserialize_endian_uint16_t+0xca>
 8013cca:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013cce:	702b      	strb	r3, [r5, #0]
 8013cd0:	f898 3000 	ldrb.w	r3, [r8]
 8013cd4:	706b      	strb	r3, [r5, #1]
 8013cd6:	6923      	ldr	r3, [r4, #16]
 8013cd8:	68a2      	ldr	r2, [r4, #8]
 8013cda:	7da0      	ldrb	r0, [r4, #22]
 8013cdc:	2102      	movs	r1, #2
 8013cde:	3302      	adds	r3, #2
 8013ce0:	4452      	add	r2, sl
 8013ce2:	1bdb      	subs	r3, r3, r7
 8013ce4:	7561      	strb	r1, [r4, #21]
 8013ce6:	60a2      	str	r2, [r4, #8]
 8013ce8:	6123      	str	r3, [r4, #16]
 8013cea:	f080 0001 	eor.w	r0, r0, #1
 8013cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cf2:	2102      	movs	r1, #2
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	f7fa fdfd 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013cfa:	b178      	cbz	r0, 8013d1c <ucdr_deserialize_endian_uint16_t+0xa0>
 8013cfc:	2e01      	cmp	r6, #1
 8013cfe:	68a3      	ldr	r3, [r4, #8]
 8013d00:	d011      	beq.n	8013d26 <ucdr_deserialize_endian_uint16_t+0xaa>
 8013d02:	785b      	ldrb	r3, [r3, #1]
 8013d04:	702b      	strb	r3, [r5, #0]
 8013d06:	68a3      	ldr	r3, [r4, #8]
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	706b      	strb	r3, [r5, #1]
 8013d0c:	68a2      	ldr	r2, [r4, #8]
 8013d0e:	6923      	ldr	r3, [r4, #16]
 8013d10:	3202      	adds	r2, #2
 8013d12:	3302      	adds	r3, #2
 8013d14:	2102      	movs	r1, #2
 8013d16:	60a2      	str	r2, [r4, #8]
 8013d18:	6123      	str	r3, [r4, #16]
 8013d1a:	7561      	strb	r1, [r4, #21]
 8013d1c:	7da0      	ldrb	r0, [r4, #22]
 8013d1e:	f080 0001 	eor.w	r0, r0, #1
 8013d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	802b      	strh	r3, [r5, #0]
 8013d2a:	e7ef      	b.n	8013d0c <ucdr_deserialize_endian_uint16_t+0x90>
 8013d2c:	68a2      	ldr	r2, [r4, #8]
 8013d2e:	6923      	ldr	r3, [r4, #16]
 8013d30:	7da0      	ldrb	r0, [r4, #22]
 8013d32:	f884 9015 	strb.w	r9, [r4, #21]
 8013d36:	1bd2      	subs	r2, r2, r7
 8013d38:	1bdb      	subs	r3, r3, r7
 8013d3a:	60a2      	str	r2, [r4, #8]
 8013d3c:	6123      	str	r3, [r4, #16]
 8013d3e:	f080 0001 	eor.w	r0, r0, #1
 8013d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d46:	4641      	mov	r1, r8
 8013d48:	463a      	mov	r2, r7
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	f00a fb31 	bl	801e3b2 <memcpy>
 8013d50:	68a1      	ldr	r1, [r4, #8]
 8013d52:	4652      	mov	r2, sl
 8013d54:	19e8      	adds	r0, r5, r7
 8013d56:	f00a fb2c 	bl	801e3b2 <memcpy>
 8013d5a:	e7bc      	b.n	8013cd6 <ucdr_deserialize_endian_uint16_t+0x5a>

08013d5c <ucdr_serialize_uint32_t>:
 8013d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d60:	b082      	sub	sp, #8
 8013d62:	4604      	mov	r4, r0
 8013d64:	9101      	str	r1, [sp, #4]
 8013d66:	2104      	movs	r1, #4
 8013d68:	f7fa fe18 	bl	800e99c <ucdr_buffer_alignment>
 8013d6c:	4601      	mov	r1, r0
 8013d6e:	4620      	mov	r0, r4
 8013d70:	7d67      	ldrb	r7, [r4, #21]
 8013d72:	f7fa fe57 	bl	800ea24 <ucdr_advance_buffer>
 8013d76:	2104      	movs	r1, #4
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f7fa fdaf 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013d7e:	b300      	cbz	r0, 8013dc2 <ucdr_serialize_uint32_t+0x66>
 8013d80:	7d22      	ldrb	r2, [r4, #20]
 8013d82:	68a3      	ldr	r3, [r4, #8]
 8013d84:	2a01      	cmp	r2, #1
 8013d86:	d05d      	beq.n	8013e44 <ucdr_serialize_uint32_t+0xe8>
 8013d88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013d8c:	701a      	strb	r2, [r3, #0]
 8013d8e:	68a3      	ldr	r3, [r4, #8]
 8013d90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d94:	705a      	strb	r2, [r3, #1]
 8013d96:	68a3      	ldr	r3, [r4, #8]
 8013d98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013d9c:	709a      	strb	r2, [r3, #2]
 8013d9e:	68a3      	ldr	r3, [r4, #8]
 8013da0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013da4:	70da      	strb	r2, [r3, #3]
 8013da6:	68a2      	ldr	r2, [r4, #8]
 8013da8:	6923      	ldr	r3, [r4, #16]
 8013daa:	3204      	adds	r2, #4
 8013dac:	3304      	adds	r3, #4
 8013dae:	2104      	movs	r1, #4
 8013db0:	60a2      	str	r2, [r4, #8]
 8013db2:	6123      	str	r3, [r4, #16]
 8013db4:	7561      	strb	r1, [r4, #21]
 8013db6:	7da0      	ldrb	r0, [r4, #22]
 8013db8:	f080 0001 	eor.w	r0, r0, #1
 8013dbc:	b002      	add	sp, #8
 8013dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013dc6:	42ab      	cmp	r3, r5
 8013dc8:	d92e      	bls.n	8013e28 <ucdr_serialize_uint32_t+0xcc>
 8013dca:	1b5e      	subs	r6, r3, r5
 8013dcc:	60a3      	str	r3, [r4, #8]
 8013dce:	6923      	ldr	r3, [r4, #16]
 8013dd0:	f1c6 0804 	rsb	r8, r6, #4
 8013dd4:	4433      	add	r3, r6
 8013dd6:	6123      	str	r3, [r4, #16]
 8013dd8:	4641      	mov	r1, r8
 8013dda:	4620      	mov	r0, r4
 8013ddc:	f7fa fd8a 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013de0:	b398      	cbz	r0, 8013e4a <ucdr_serialize_uint32_t+0xee>
 8013de2:	7d23      	ldrb	r3, [r4, #20]
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d046      	beq.n	8013e76 <ucdr_serialize_uint32_t+0x11a>
 8013de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013dec:	702b      	strb	r3, [r5, #0]
 8013dee:	2e01      	cmp	r6, #1
 8013df0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013df4:	706b      	strb	r3, [r5, #1]
 8013df6:	d035      	beq.n	8013e64 <ucdr_serialize_uint32_t+0x108>
 8013df8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013dfc:	70ab      	strb	r3, [r5, #2]
 8013dfe:	2e02      	cmp	r6, #2
 8013e00:	d034      	beq.n	8013e6c <ucdr_serialize_uint32_t+0x110>
 8013e02:	3503      	adds	r5, #3
 8013e04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e08:	702b      	strb	r3, [r5, #0]
 8013e0a:	6923      	ldr	r3, [r4, #16]
 8013e0c:	68a2      	ldr	r2, [r4, #8]
 8013e0e:	7da0      	ldrb	r0, [r4, #22]
 8013e10:	3304      	adds	r3, #4
 8013e12:	4442      	add	r2, r8
 8013e14:	1b9b      	subs	r3, r3, r6
 8013e16:	2104      	movs	r1, #4
 8013e18:	f080 0001 	eor.w	r0, r0, #1
 8013e1c:	60a2      	str	r2, [r4, #8]
 8013e1e:	6123      	str	r3, [r4, #16]
 8013e20:	7561      	strb	r1, [r4, #21]
 8013e22:	b002      	add	sp, #8
 8013e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e28:	2104      	movs	r1, #4
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7fa fd62 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d0c0      	beq.n	8013db6 <ucdr_serialize_uint32_t+0x5a>
 8013e34:	7d23      	ldrb	r3, [r4, #20]
 8013e36:	68a2      	ldr	r2, [r4, #8]
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d019      	beq.n	8013e70 <ucdr_serialize_uint32_t+0x114>
 8013e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e40:	7013      	strb	r3, [r2, #0]
 8013e42:	e7a4      	b.n	8013d8e <ucdr_serialize_uint32_t+0x32>
 8013e44:	9a01      	ldr	r2, [sp, #4]
 8013e46:	601a      	str	r2, [r3, #0]
 8013e48:	e7ad      	b.n	8013da6 <ucdr_serialize_uint32_t+0x4a>
 8013e4a:	68a2      	ldr	r2, [r4, #8]
 8013e4c:	6923      	ldr	r3, [r4, #16]
 8013e4e:	7da0      	ldrb	r0, [r4, #22]
 8013e50:	7567      	strb	r7, [r4, #21]
 8013e52:	1b92      	subs	r2, r2, r6
 8013e54:	1b9b      	subs	r3, r3, r6
 8013e56:	f080 0001 	eor.w	r0, r0, #1
 8013e5a:	60a2      	str	r2, [r4, #8]
 8013e5c:	6123      	str	r3, [r4, #16]
 8013e5e:	b002      	add	sp, #8
 8013e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e64:	68a3      	ldr	r3, [r4, #8]
 8013e66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013e6a:	701a      	strb	r2, [r3, #0]
 8013e6c:	68a5      	ldr	r5, [r4, #8]
 8013e6e:	e7c9      	b.n	8013e04 <ucdr_serialize_uint32_t+0xa8>
 8013e70:	9b01      	ldr	r3, [sp, #4]
 8013e72:	6013      	str	r3, [r2, #0]
 8013e74:	e797      	b.n	8013da6 <ucdr_serialize_uint32_t+0x4a>
 8013e76:	4628      	mov	r0, r5
 8013e78:	ad01      	add	r5, sp, #4
 8013e7a:	4632      	mov	r2, r6
 8013e7c:	4629      	mov	r1, r5
 8013e7e:	f00a fa98 	bl	801e3b2 <memcpy>
 8013e82:	68a0      	ldr	r0, [r4, #8]
 8013e84:	4642      	mov	r2, r8
 8013e86:	19a9      	adds	r1, r5, r6
 8013e88:	f00a fa93 	bl	801e3b2 <memcpy>
 8013e8c:	e7bd      	b.n	8013e0a <ucdr_serialize_uint32_t+0xae>
 8013e8e:	bf00      	nop

08013e90 <ucdr_serialize_endian_uint32_t>:
 8013e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e94:	b083      	sub	sp, #12
 8013e96:	460d      	mov	r5, r1
 8013e98:	2104      	movs	r1, #4
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	9201      	str	r2, [sp, #4]
 8013e9e:	f7fa fd7d 	bl	800e99c <ucdr_buffer_alignment>
 8013ea2:	4601      	mov	r1, r0
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013eaa:	f7fa fdbb 	bl	800ea24 <ucdr_advance_buffer>
 8013eae:	2104      	movs	r1, #4
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	f7fa fd13 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d137      	bne.n	8013f2a <ucdr_serialize_endian_uint32_t+0x9a>
 8013eba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013ebe:	42b7      	cmp	r7, r6
 8013ec0:	d92e      	bls.n	8013f20 <ucdr_serialize_endian_uint32_t+0x90>
 8013ec2:	6923      	ldr	r3, [r4, #16]
 8013ec4:	60a7      	str	r7, [r4, #8]
 8013ec6:	1bbf      	subs	r7, r7, r6
 8013ec8:	443b      	add	r3, r7
 8013eca:	f1c7 0904 	rsb	r9, r7, #4
 8013ece:	6123      	str	r3, [r4, #16]
 8013ed0:	4649      	mov	r1, r9
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7fa fd0e 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	d049      	beq.n	8013f70 <ucdr_serialize_endian_uint32_t+0xe0>
 8013edc:	2d01      	cmp	r5, #1
 8013ede:	d05b      	beq.n	8013f98 <ucdr_serialize_endian_uint32_t+0x108>
 8013ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ee4:	7033      	strb	r3, [r6, #0]
 8013ee6:	2f01      	cmp	r7, #1
 8013ee8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013eec:	7073      	strb	r3, [r6, #1]
 8013eee:	d04d      	beq.n	8013f8c <ucdr_serialize_endian_uint32_t+0xfc>
 8013ef0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013ef4:	70b3      	strb	r3, [r6, #2]
 8013ef6:	2f02      	cmp	r7, #2
 8013ef8:	d04c      	beq.n	8013f94 <ucdr_serialize_endian_uint32_t+0x104>
 8013efa:	3603      	adds	r6, #3
 8013efc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013f00:	7033      	strb	r3, [r6, #0]
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	68a2      	ldr	r2, [r4, #8]
 8013f06:	7da0      	ldrb	r0, [r4, #22]
 8013f08:	3304      	adds	r3, #4
 8013f0a:	444a      	add	r2, r9
 8013f0c:	1bdb      	subs	r3, r3, r7
 8013f0e:	2104      	movs	r1, #4
 8013f10:	f080 0001 	eor.w	r0, r0, #1
 8013f14:	60a2      	str	r2, [r4, #8]
 8013f16:	6123      	str	r3, [r4, #16]
 8013f18:	7561      	strb	r1, [r4, #21]
 8013f1a:	b003      	add	sp, #12
 8013f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f20:	2104      	movs	r1, #4
 8013f22:	4620      	mov	r0, r4
 8013f24:	f7fa fce6 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8013f28:	b1c8      	cbz	r0, 8013f5e <ucdr_serialize_endian_uint32_t+0xce>
 8013f2a:	2d01      	cmp	r5, #1
 8013f2c:	68a3      	ldr	r3, [r4, #8]
 8013f2e:	d01c      	beq.n	8013f6a <ucdr_serialize_endian_uint32_t+0xda>
 8013f30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013f34:	701a      	strb	r2, [r3, #0]
 8013f36:	68a3      	ldr	r3, [r4, #8]
 8013f38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f3c:	705a      	strb	r2, [r3, #1]
 8013f3e:	68a3      	ldr	r3, [r4, #8]
 8013f40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f44:	709a      	strb	r2, [r3, #2]
 8013f46:	68a3      	ldr	r3, [r4, #8]
 8013f48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f4c:	70da      	strb	r2, [r3, #3]
 8013f4e:	68a2      	ldr	r2, [r4, #8]
 8013f50:	6923      	ldr	r3, [r4, #16]
 8013f52:	3204      	adds	r2, #4
 8013f54:	3304      	adds	r3, #4
 8013f56:	2104      	movs	r1, #4
 8013f58:	60a2      	str	r2, [r4, #8]
 8013f5a:	6123      	str	r3, [r4, #16]
 8013f5c:	7561      	strb	r1, [r4, #21]
 8013f5e:	7da0      	ldrb	r0, [r4, #22]
 8013f60:	f080 0001 	eor.w	r0, r0, #1
 8013f64:	b003      	add	sp, #12
 8013f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f6a:	9a01      	ldr	r2, [sp, #4]
 8013f6c:	601a      	str	r2, [r3, #0]
 8013f6e:	e7ee      	b.n	8013f4e <ucdr_serialize_endian_uint32_t+0xbe>
 8013f70:	68a2      	ldr	r2, [r4, #8]
 8013f72:	6923      	ldr	r3, [r4, #16]
 8013f74:	7da0      	ldrb	r0, [r4, #22]
 8013f76:	f884 8015 	strb.w	r8, [r4, #21]
 8013f7a:	1bd2      	subs	r2, r2, r7
 8013f7c:	1bdb      	subs	r3, r3, r7
 8013f7e:	f080 0001 	eor.w	r0, r0, #1
 8013f82:	60a2      	str	r2, [r4, #8]
 8013f84:	6123      	str	r3, [r4, #16]
 8013f86:	b003      	add	sp, #12
 8013f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f8c:	68a3      	ldr	r3, [r4, #8]
 8013f8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f92:	701a      	strb	r2, [r3, #0]
 8013f94:	68a6      	ldr	r6, [r4, #8]
 8013f96:	e7b1      	b.n	8013efc <ucdr_serialize_endian_uint32_t+0x6c>
 8013f98:	ad01      	add	r5, sp, #4
 8013f9a:	463a      	mov	r2, r7
 8013f9c:	4629      	mov	r1, r5
 8013f9e:	4630      	mov	r0, r6
 8013fa0:	f00a fa07 	bl	801e3b2 <memcpy>
 8013fa4:	68a0      	ldr	r0, [r4, #8]
 8013fa6:	464a      	mov	r2, r9
 8013fa8:	19e9      	adds	r1, r5, r7
 8013faa:	f00a fa02 	bl	801e3b2 <memcpy>
 8013fae:	e7a8      	b.n	8013f02 <ucdr_serialize_endian_uint32_t+0x72>

08013fb0 <ucdr_deserialize_uint32_t>:
 8013fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fb4:	460d      	mov	r5, r1
 8013fb6:	2104      	movs	r1, #4
 8013fb8:	4604      	mov	r4, r0
 8013fba:	f7fa fcef 	bl	800e99c <ucdr_buffer_alignment>
 8013fbe:	4601      	mov	r1, r0
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013fc6:	f7fa fd2d 	bl	800ea24 <ucdr_advance_buffer>
 8013fca:	2104      	movs	r1, #4
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f7fa fc85 	bl	800e8dc <ucdr_check_buffer_available_for>
 8013fd2:	b1d8      	cbz	r0, 801400c <ucdr_deserialize_uint32_t+0x5c>
 8013fd4:	7d22      	ldrb	r2, [r4, #20]
 8013fd6:	68a3      	ldr	r3, [r4, #8]
 8013fd8:	2a01      	cmp	r2, #1
 8013fda:	d052      	beq.n	8014082 <ucdr_deserialize_uint32_t+0xd2>
 8013fdc:	78db      	ldrb	r3, [r3, #3]
 8013fde:	702b      	strb	r3, [r5, #0]
 8013fe0:	68a3      	ldr	r3, [r4, #8]
 8013fe2:	789b      	ldrb	r3, [r3, #2]
 8013fe4:	706b      	strb	r3, [r5, #1]
 8013fe6:	68a3      	ldr	r3, [r4, #8]
 8013fe8:	785b      	ldrb	r3, [r3, #1]
 8013fea:	70ab      	strb	r3, [r5, #2]
 8013fec:	68a3      	ldr	r3, [r4, #8]
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	70eb      	strb	r3, [r5, #3]
 8013ff2:	68a2      	ldr	r2, [r4, #8]
 8013ff4:	6923      	ldr	r3, [r4, #16]
 8013ff6:	3204      	adds	r2, #4
 8013ff8:	3304      	adds	r3, #4
 8013ffa:	2104      	movs	r1, #4
 8013ffc:	60a2      	str	r2, [r4, #8]
 8013ffe:	6123      	str	r3, [r4, #16]
 8014000:	7561      	strb	r1, [r4, #21]
 8014002:	7da0      	ldrb	r0, [r4, #22]
 8014004:	f080 0001 	eor.w	r0, r0, #1
 8014008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801400c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014010:	42b7      	cmp	r7, r6
 8014012:	d92a      	bls.n	801406a <ucdr_deserialize_uint32_t+0xba>
 8014014:	6923      	ldr	r3, [r4, #16]
 8014016:	60a7      	str	r7, [r4, #8]
 8014018:	1bbf      	subs	r7, r7, r6
 801401a:	443b      	add	r3, r7
 801401c:	f1c7 0904 	rsb	r9, r7, #4
 8014020:	6123      	str	r3, [r4, #16]
 8014022:	4649      	mov	r1, r9
 8014024:	4620      	mov	r0, r4
 8014026:	f7fa fc65 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 801402a:	b368      	cbz	r0, 8014088 <ucdr_deserialize_uint32_t+0xd8>
 801402c:	7d23      	ldrb	r3, [r4, #20]
 801402e:	2b01      	cmp	r3, #1
 8014030:	d040      	beq.n	80140b4 <ucdr_deserialize_uint32_t+0x104>
 8014032:	78f3      	ldrb	r3, [r6, #3]
 8014034:	702b      	strb	r3, [r5, #0]
 8014036:	78b3      	ldrb	r3, [r6, #2]
 8014038:	706b      	strb	r3, [r5, #1]
 801403a:	2f01      	cmp	r7, #1
 801403c:	d031      	beq.n	80140a2 <ucdr_deserialize_uint32_t+0xf2>
 801403e:	7873      	ldrb	r3, [r6, #1]
 8014040:	70ab      	strb	r3, [r5, #2]
 8014042:	2f02      	cmp	r7, #2
 8014044:	f105 0503 	add.w	r5, r5, #3
 8014048:	d02f      	beq.n	80140aa <ucdr_deserialize_uint32_t+0xfa>
 801404a:	7833      	ldrb	r3, [r6, #0]
 801404c:	702b      	strb	r3, [r5, #0]
 801404e:	6923      	ldr	r3, [r4, #16]
 8014050:	68a2      	ldr	r2, [r4, #8]
 8014052:	7da0      	ldrb	r0, [r4, #22]
 8014054:	2104      	movs	r1, #4
 8014056:	3304      	adds	r3, #4
 8014058:	444a      	add	r2, r9
 801405a:	1bdb      	subs	r3, r3, r7
 801405c:	7561      	strb	r1, [r4, #21]
 801405e:	60a2      	str	r2, [r4, #8]
 8014060:	6123      	str	r3, [r4, #16]
 8014062:	f080 0001 	eor.w	r0, r0, #1
 8014066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801406a:	2104      	movs	r1, #4
 801406c:	4620      	mov	r0, r4
 801406e:	f7fa fc41 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014072:	2800      	cmp	r0, #0
 8014074:	d0c5      	beq.n	8014002 <ucdr_deserialize_uint32_t+0x52>
 8014076:	7d23      	ldrb	r3, [r4, #20]
 8014078:	68a2      	ldr	r2, [r4, #8]
 801407a:	2b01      	cmp	r3, #1
 801407c:	d017      	beq.n	80140ae <ucdr_deserialize_uint32_t+0xfe>
 801407e:	78d3      	ldrb	r3, [r2, #3]
 8014080:	e7ad      	b.n	8013fde <ucdr_deserialize_uint32_t+0x2e>
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	602b      	str	r3, [r5, #0]
 8014086:	e7b4      	b.n	8013ff2 <ucdr_deserialize_uint32_t+0x42>
 8014088:	68a2      	ldr	r2, [r4, #8]
 801408a:	6923      	ldr	r3, [r4, #16]
 801408c:	7da0      	ldrb	r0, [r4, #22]
 801408e:	f884 8015 	strb.w	r8, [r4, #21]
 8014092:	1bd2      	subs	r2, r2, r7
 8014094:	1bdb      	subs	r3, r3, r7
 8014096:	60a2      	str	r2, [r4, #8]
 8014098:	6123      	str	r3, [r4, #16]
 801409a:	f080 0001 	eor.w	r0, r0, #1
 801409e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140a2:	68a3      	ldr	r3, [r4, #8]
 80140a4:	785b      	ldrb	r3, [r3, #1]
 80140a6:	70ab      	strb	r3, [r5, #2]
 80140a8:	3503      	adds	r5, #3
 80140aa:	68a6      	ldr	r6, [r4, #8]
 80140ac:	e7cd      	b.n	801404a <ucdr_deserialize_uint32_t+0x9a>
 80140ae:	6813      	ldr	r3, [r2, #0]
 80140b0:	602b      	str	r3, [r5, #0]
 80140b2:	e79e      	b.n	8013ff2 <ucdr_deserialize_uint32_t+0x42>
 80140b4:	4631      	mov	r1, r6
 80140b6:	463a      	mov	r2, r7
 80140b8:	4628      	mov	r0, r5
 80140ba:	f00a f97a 	bl	801e3b2 <memcpy>
 80140be:	68a1      	ldr	r1, [r4, #8]
 80140c0:	464a      	mov	r2, r9
 80140c2:	19e8      	adds	r0, r5, r7
 80140c4:	f00a f975 	bl	801e3b2 <memcpy>
 80140c8:	e7c1      	b.n	801404e <ucdr_deserialize_uint32_t+0x9e>
 80140ca:	bf00      	nop

080140cc <ucdr_deserialize_endian_uint32_t>:
 80140cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140d0:	460e      	mov	r6, r1
 80140d2:	2104      	movs	r1, #4
 80140d4:	4604      	mov	r4, r0
 80140d6:	4615      	mov	r5, r2
 80140d8:	f7fa fc60 	bl	800e99c <ucdr_buffer_alignment>
 80140dc:	4601      	mov	r1, r0
 80140de:	4620      	mov	r0, r4
 80140e0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80140e4:	f7fa fc9e 	bl	800ea24 <ucdr_advance_buffer>
 80140e8:	2104      	movs	r1, #4
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7fa fbf6 	bl	800e8dc <ucdr_check_buffer_available_for>
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d137      	bne.n	8014164 <ucdr_deserialize_endian_uint32_t+0x98>
 80140f4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80140f8:	42bb      	cmp	r3, r7
 80140fa:	d92e      	bls.n	801415a <ucdr_deserialize_endian_uint32_t+0x8e>
 80140fc:	eba3 0807 	sub.w	r8, r3, r7
 8014100:	60a3      	str	r3, [r4, #8]
 8014102:	6923      	ldr	r3, [r4, #16]
 8014104:	f1c8 0a04 	rsb	sl, r8, #4
 8014108:	4443      	add	r3, r8
 801410a:	6123      	str	r3, [r4, #16]
 801410c:	4651      	mov	r1, sl
 801410e:	4620      	mov	r0, r4
 8014110:	f7fa fbf0 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014114:	2800      	cmp	r0, #0
 8014116:	d043      	beq.n	80141a0 <ucdr_deserialize_endian_uint32_t+0xd4>
 8014118:	2e01      	cmp	r6, #1
 801411a:	d056      	beq.n	80141ca <ucdr_deserialize_endian_uint32_t+0xfe>
 801411c:	78fb      	ldrb	r3, [r7, #3]
 801411e:	702b      	strb	r3, [r5, #0]
 8014120:	78bb      	ldrb	r3, [r7, #2]
 8014122:	706b      	strb	r3, [r5, #1]
 8014124:	f1b8 0f01 	cmp.w	r8, #1
 8014128:	d049      	beq.n	80141be <ucdr_deserialize_endian_uint32_t+0xf2>
 801412a:	787b      	ldrb	r3, [r7, #1]
 801412c:	70ab      	strb	r3, [r5, #2]
 801412e:	f1b8 0f02 	cmp.w	r8, #2
 8014132:	f105 0503 	add.w	r5, r5, #3
 8014136:	d046      	beq.n	80141c6 <ucdr_deserialize_endian_uint32_t+0xfa>
 8014138:	783b      	ldrb	r3, [r7, #0]
 801413a:	702b      	strb	r3, [r5, #0]
 801413c:	6923      	ldr	r3, [r4, #16]
 801413e:	68a2      	ldr	r2, [r4, #8]
 8014140:	7da0      	ldrb	r0, [r4, #22]
 8014142:	2104      	movs	r1, #4
 8014144:	3304      	adds	r3, #4
 8014146:	4452      	add	r2, sl
 8014148:	eba3 0308 	sub.w	r3, r3, r8
 801414c:	7561      	strb	r1, [r4, #21]
 801414e:	60a2      	str	r2, [r4, #8]
 8014150:	6123      	str	r3, [r4, #16]
 8014152:	f080 0001 	eor.w	r0, r0, #1
 8014156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801415a:	2104      	movs	r1, #4
 801415c:	4620      	mov	r0, r4
 801415e:	f7fa fbc9 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014162:	b1a8      	cbz	r0, 8014190 <ucdr_deserialize_endian_uint32_t+0xc4>
 8014164:	2e01      	cmp	r6, #1
 8014166:	68a3      	ldr	r3, [r4, #8]
 8014168:	d017      	beq.n	801419a <ucdr_deserialize_endian_uint32_t+0xce>
 801416a:	78db      	ldrb	r3, [r3, #3]
 801416c:	702b      	strb	r3, [r5, #0]
 801416e:	68a3      	ldr	r3, [r4, #8]
 8014170:	789b      	ldrb	r3, [r3, #2]
 8014172:	706b      	strb	r3, [r5, #1]
 8014174:	68a3      	ldr	r3, [r4, #8]
 8014176:	785b      	ldrb	r3, [r3, #1]
 8014178:	70ab      	strb	r3, [r5, #2]
 801417a:	68a3      	ldr	r3, [r4, #8]
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	70eb      	strb	r3, [r5, #3]
 8014180:	68a2      	ldr	r2, [r4, #8]
 8014182:	6923      	ldr	r3, [r4, #16]
 8014184:	3204      	adds	r2, #4
 8014186:	3304      	adds	r3, #4
 8014188:	2104      	movs	r1, #4
 801418a:	60a2      	str	r2, [r4, #8]
 801418c:	6123      	str	r3, [r4, #16]
 801418e:	7561      	strb	r1, [r4, #21]
 8014190:	7da0      	ldrb	r0, [r4, #22]
 8014192:	f080 0001 	eor.w	r0, r0, #1
 8014196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	602b      	str	r3, [r5, #0]
 801419e:	e7ef      	b.n	8014180 <ucdr_deserialize_endian_uint32_t+0xb4>
 80141a0:	68a2      	ldr	r2, [r4, #8]
 80141a2:	6923      	ldr	r3, [r4, #16]
 80141a4:	7da0      	ldrb	r0, [r4, #22]
 80141a6:	f884 9015 	strb.w	r9, [r4, #21]
 80141aa:	eba2 0208 	sub.w	r2, r2, r8
 80141ae:	eba3 0308 	sub.w	r3, r3, r8
 80141b2:	60a2      	str	r2, [r4, #8]
 80141b4:	6123      	str	r3, [r4, #16]
 80141b6:	f080 0001 	eor.w	r0, r0, #1
 80141ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141be:	68a3      	ldr	r3, [r4, #8]
 80141c0:	785b      	ldrb	r3, [r3, #1]
 80141c2:	70ab      	strb	r3, [r5, #2]
 80141c4:	3503      	adds	r5, #3
 80141c6:	68a7      	ldr	r7, [r4, #8]
 80141c8:	e7b6      	b.n	8014138 <ucdr_deserialize_endian_uint32_t+0x6c>
 80141ca:	4639      	mov	r1, r7
 80141cc:	4642      	mov	r2, r8
 80141ce:	4628      	mov	r0, r5
 80141d0:	f00a f8ef 	bl	801e3b2 <memcpy>
 80141d4:	68a1      	ldr	r1, [r4, #8]
 80141d6:	4652      	mov	r2, sl
 80141d8:	eb05 0008 	add.w	r0, r5, r8
 80141dc:	f00a f8e9 	bl	801e3b2 <memcpy>
 80141e0:	e7ac      	b.n	801413c <ucdr_deserialize_endian_uint32_t+0x70>
 80141e2:	bf00      	nop

080141e4 <ucdr_serialize_uint64_t>:
 80141e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e8:	2108      	movs	r1, #8
 80141ea:	b082      	sub	sp, #8
 80141ec:	4604      	mov	r4, r0
 80141ee:	e9cd 2300 	strd	r2, r3, [sp]
 80141f2:	f7fa fbd3 	bl	800e99c <ucdr_buffer_alignment>
 80141f6:	4601      	mov	r1, r0
 80141f8:	4620      	mov	r0, r4
 80141fa:	7d67      	ldrb	r7, [r4, #21]
 80141fc:	f7fa fc12 	bl	800ea24 <ucdr_advance_buffer>
 8014200:	2108      	movs	r1, #8
 8014202:	4620      	mov	r0, r4
 8014204:	f7fa fb6a 	bl	800e8dc <ucdr_check_buffer_available_for>
 8014208:	2800      	cmp	r0, #0
 801420a:	d14d      	bne.n	80142a8 <ucdr_serialize_uint64_t+0xc4>
 801420c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014210:	42ab      	cmp	r3, r5
 8014212:	d944      	bls.n	801429e <ucdr_serialize_uint64_t+0xba>
 8014214:	1b5e      	subs	r6, r3, r5
 8014216:	60a3      	str	r3, [r4, #8]
 8014218:	6923      	ldr	r3, [r4, #16]
 801421a:	f1c6 0808 	rsb	r8, r6, #8
 801421e:	4433      	add	r3, r6
 8014220:	6123      	str	r3, [r4, #16]
 8014222:	4641      	mov	r1, r8
 8014224:	4620      	mov	r0, r4
 8014226:	f7fa fb65 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 801422a:	2800      	cmp	r0, #0
 801422c:	d072      	beq.n	8014314 <ucdr_serialize_uint64_t+0x130>
 801422e:	7d23      	ldrb	r3, [r4, #20]
 8014230:	2b01      	cmp	r3, #1
 8014232:	f000 8092 	beq.w	801435a <ucdr_serialize_uint64_t+0x176>
 8014236:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801423a:	702b      	strb	r3, [r5, #0]
 801423c:	2e01      	cmp	r6, #1
 801423e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014242:	706b      	strb	r3, [r5, #1]
 8014244:	d073      	beq.n	801432e <ucdr_serialize_uint64_t+0x14a>
 8014246:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801424a:	70ab      	strb	r3, [r5, #2]
 801424c:	2e02      	cmp	r6, #2
 801424e:	d072      	beq.n	8014336 <ucdr_serialize_uint64_t+0x152>
 8014250:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014254:	70eb      	strb	r3, [r5, #3]
 8014256:	2e03      	cmp	r6, #3
 8014258:	d071      	beq.n	801433e <ucdr_serialize_uint64_t+0x15a>
 801425a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801425e:	712b      	strb	r3, [r5, #4]
 8014260:	2e04      	cmp	r6, #4
 8014262:	d070      	beq.n	8014346 <ucdr_serialize_uint64_t+0x162>
 8014264:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014268:	716b      	strb	r3, [r5, #5]
 801426a:	2e05      	cmp	r6, #5
 801426c:	d06f      	beq.n	801434e <ucdr_serialize_uint64_t+0x16a>
 801426e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014272:	71ab      	strb	r3, [r5, #6]
 8014274:	2e06      	cmp	r6, #6
 8014276:	d06e      	beq.n	8014356 <ucdr_serialize_uint64_t+0x172>
 8014278:	3507      	adds	r5, #7
 801427a:	f89d 3000 	ldrb.w	r3, [sp]
 801427e:	702b      	strb	r3, [r5, #0]
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	68a2      	ldr	r2, [r4, #8]
 8014284:	7da0      	ldrb	r0, [r4, #22]
 8014286:	3308      	adds	r3, #8
 8014288:	4442      	add	r2, r8
 801428a:	1b9b      	subs	r3, r3, r6
 801428c:	2108      	movs	r1, #8
 801428e:	f080 0001 	eor.w	r0, r0, #1
 8014292:	60a2      	str	r2, [r4, #8]
 8014294:	6123      	str	r3, [r4, #16]
 8014296:	7561      	strb	r1, [r4, #21]
 8014298:	b002      	add	sp, #8
 801429a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801429e:	2108      	movs	r1, #8
 80142a0:	4620      	mov	r0, r4
 80142a2:	f7fa fb27 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 80142a6:	b350      	cbz	r0, 80142fe <ucdr_serialize_uint64_t+0x11a>
 80142a8:	7d22      	ldrb	r2, [r4, #20]
 80142aa:	68a3      	ldr	r3, [r4, #8]
 80142ac:	2a01      	cmp	r2, #1
 80142ae:	d02c      	beq.n	801430a <ucdr_serialize_uint64_t+0x126>
 80142b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80142b4:	701a      	strb	r2, [r3, #0]
 80142b6:	68a3      	ldr	r3, [r4, #8]
 80142b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80142bc:	705a      	strb	r2, [r3, #1]
 80142be:	68a3      	ldr	r3, [r4, #8]
 80142c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80142c4:	709a      	strb	r2, [r3, #2]
 80142c6:	68a3      	ldr	r3, [r4, #8]
 80142c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80142cc:	70da      	strb	r2, [r3, #3]
 80142ce:	68a3      	ldr	r3, [r4, #8]
 80142d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80142d4:	711a      	strb	r2, [r3, #4]
 80142d6:	68a3      	ldr	r3, [r4, #8]
 80142d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80142dc:	715a      	strb	r2, [r3, #5]
 80142de:	68a3      	ldr	r3, [r4, #8]
 80142e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80142e4:	719a      	strb	r2, [r3, #6]
 80142e6:	68a3      	ldr	r3, [r4, #8]
 80142e8:	f89d 2000 	ldrb.w	r2, [sp]
 80142ec:	71da      	strb	r2, [r3, #7]
 80142ee:	68a2      	ldr	r2, [r4, #8]
 80142f0:	6923      	ldr	r3, [r4, #16]
 80142f2:	3208      	adds	r2, #8
 80142f4:	3308      	adds	r3, #8
 80142f6:	2108      	movs	r1, #8
 80142f8:	60a2      	str	r2, [r4, #8]
 80142fa:	6123      	str	r3, [r4, #16]
 80142fc:	7561      	strb	r1, [r4, #21]
 80142fe:	7da0      	ldrb	r0, [r4, #22]
 8014300:	f080 0001 	eor.w	r0, r0, #1
 8014304:	b002      	add	sp, #8
 8014306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801430e:	6019      	str	r1, [r3, #0]
 8014310:	605a      	str	r2, [r3, #4]
 8014312:	e7ec      	b.n	80142ee <ucdr_serialize_uint64_t+0x10a>
 8014314:	68a2      	ldr	r2, [r4, #8]
 8014316:	6923      	ldr	r3, [r4, #16]
 8014318:	7da0      	ldrb	r0, [r4, #22]
 801431a:	7567      	strb	r7, [r4, #21]
 801431c:	1b92      	subs	r2, r2, r6
 801431e:	1b9b      	subs	r3, r3, r6
 8014320:	f080 0001 	eor.w	r0, r0, #1
 8014324:	60a2      	str	r2, [r4, #8]
 8014326:	6123      	str	r3, [r4, #16]
 8014328:	b002      	add	sp, #8
 801432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801432e:	68a3      	ldr	r3, [r4, #8]
 8014330:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014334:	701a      	strb	r2, [r3, #0]
 8014336:	68a3      	ldr	r3, [r4, #8]
 8014338:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801433c:	701a      	strb	r2, [r3, #0]
 801433e:	68a3      	ldr	r3, [r4, #8]
 8014340:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014344:	701a      	strb	r2, [r3, #0]
 8014346:	68a3      	ldr	r3, [r4, #8]
 8014348:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801434c:	701a      	strb	r2, [r3, #0]
 801434e:	68a3      	ldr	r3, [r4, #8]
 8014350:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014354:	701a      	strb	r2, [r3, #0]
 8014356:	68a5      	ldr	r5, [r4, #8]
 8014358:	e78f      	b.n	801427a <ucdr_serialize_uint64_t+0x96>
 801435a:	4628      	mov	r0, r5
 801435c:	466d      	mov	r5, sp
 801435e:	4632      	mov	r2, r6
 8014360:	4629      	mov	r1, r5
 8014362:	f00a f826 	bl	801e3b2 <memcpy>
 8014366:	68a0      	ldr	r0, [r4, #8]
 8014368:	4642      	mov	r2, r8
 801436a:	19a9      	adds	r1, r5, r6
 801436c:	f00a f821 	bl	801e3b2 <memcpy>
 8014370:	e786      	b.n	8014280 <ucdr_serialize_uint64_t+0x9c>
 8014372:	bf00      	nop

08014374 <ucdr_serialize_int16_t>:
 8014374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014378:	b082      	sub	sp, #8
 801437a:	460b      	mov	r3, r1
 801437c:	2102      	movs	r1, #2
 801437e:	4604      	mov	r4, r0
 8014380:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014384:	f7fa fb0a 	bl	800e99c <ucdr_buffer_alignment>
 8014388:	4601      	mov	r1, r0
 801438a:	4620      	mov	r0, r4
 801438c:	7d67      	ldrb	r7, [r4, #21]
 801438e:	f7fa fb49 	bl	800ea24 <ucdr_advance_buffer>
 8014392:	2102      	movs	r1, #2
 8014394:	4620      	mov	r0, r4
 8014396:	f7fa faa1 	bl	800e8dc <ucdr_check_buffer_available_for>
 801439a:	b1c0      	cbz	r0, 80143ce <ucdr_serialize_int16_t+0x5a>
 801439c:	7d22      	ldrb	r2, [r4, #20]
 801439e:	68a3      	ldr	r3, [r4, #8]
 80143a0:	2a01      	cmp	r2, #1
 80143a2:	d04e      	beq.n	8014442 <ucdr_serialize_int16_t+0xce>
 80143a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80143a8:	701a      	strb	r2, [r3, #0]
 80143aa:	68a3      	ldr	r3, [r4, #8]
 80143ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80143b0:	705a      	strb	r2, [r3, #1]
 80143b2:	68a2      	ldr	r2, [r4, #8]
 80143b4:	6923      	ldr	r3, [r4, #16]
 80143b6:	3202      	adds	r2, #2
 80143b8:	3302      	adds	r3, #2
 80143ba:	2102      	movs	r1, #2
 80143bc:	60a2      	str	r2, [r4, #8]
 80143be:	6123      	str	r3, [r4, #16]
 80143c0:	7561      	strb	r1, [r4, #21]
 80143c2:	7da0      	ldrb	r0, [r4, #22]
 80143c4:	f080 0001 	eor.w	r0, r0, #1
 80143c8:	b002      	add	sp, #8
 80143ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80143d2:	42ab      	cmp	r3, r5
 80143d4:	d923      	bls.n	801441e <ucdr_serialize_int16_t+0xaa>
 80143d6:	1b5e      	subs	r6, r3, r5
 80143d8:	60a3      	str	r3, [r4, #8]
 80143da:	6923      	ldr	r3, [r4, #16]
 80143dc:	f1c6 0802 	rsb	r8, r6, #2
 80143e0:	4433      	add	r3, r6
 80143e2:	6123      	str	r3, [r4, #16]
 80143e4:	4641      	mov	r1, r8
 80143e6:	4620      	mov	r0, r4
 80143e8:	f7fa fa84 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 80143ec:	b368      	cbz	r0, 801444a <ucdr_serialize_int16_t+0xd6>
 80143ee:	7d23      	ldrb	r3, [r4, #20]
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d03b      	beq.n	801446c <ucdr_serialize_int16_t+0xf8>
 80143f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80143f8:	702b      	strb	r3, [r5, #0]
 80143fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80143fe:	706b      	strb	r3, [r5, #1]
 8014400:	6923      	ldr	r3, [r4, #16]
 8014402:	68a2      	ldr	r2, [r4, #8]
 8014404:	7da0      	ldrb	r0, [r4, #22]
 8014406:	3302      	adds	r3, #2
 8014408:	4442      	add	r2, r8
 801440a:	1b9b      	subs	r3, r3, r6
 801440c:	2102      	movs	r1, #2
 801440e:	f080 0001 	eor.w	r0, r0, #1
 8014412:	60a2      	str	r2, [r4, #8]
 8014414:	6123      	str	r3, [r4, #16]
 8014416:	7561      	strb	r1, [r4, #21]
 8014418:	b002      	add	sp, #8
 801441a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801441e:	2102      	movs	r1, #2
 8014420:	4620      	mov	r0, r4
 8014422:	f7fa fa67 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014426:	2800      	cmp	r0, #0
 8014428:	d0cb      	beq.n	80143c2 <ucdr_serialize_int16_t+0x4e>
 801442a:	7d23      	ldrb	r3, [r4, #20]
 801442c:	68a2      	ldr	r2, [r4, #8]
 801442e:	2b01      	cmp	r3, #1
 8014430:	d018      	beq.n	8014464 <ucdr_serialize_int16_t+0xf0>
 8014432:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014436:	7013      	strb	r3, [r2, #0]
 8014438:	68a3      	ldr	r3, [r4, #8]
 801443a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801443e:	705a      	strb	r2, [r3, #1]
 8014440:	e7b7      	b.n	80143b2 <ucdr_serialize_int16_t+0x3e>
 8014442:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014446:	801a      	strh	r2, [r3, #0]
 8014448:	e7b3      	b.n	80143b2 <ucdr_serialize_int16_t+0x3e>
 801444a:	68a2      	ldr	r2, [r4, #8]
 801444c:	6923      	ldr	r3, [r4, #16]
 801444e:	7da0      	ldrb	r0, [r4, #22]
 8014450:	7567      	strb	r7, [r4, #21]
 8014452:	1b92      	subs	r2, r2, r6
 8014454:	1b9b      	subs	r3, r3, r6
 8014456:	f080 0001 	eor.w	r0, r0, #1
 801445a:	60a2      	str	r2, [r4, #8]
 801445c:	6123      	str	r3, [r4, #16]
 801445e:	b002      	add	sp, #8
 8014460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014464:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014468:	8013      	strh	r3, [r2, #0]
 801446a:	e7a2      	b.n	80143b2 <ucdr_serialize_int16_t+0x3e>
 801446c:	4628      	mov	r0, r5
 801446e:	f10d 0506 	add.w	r5, sp, #6
 8014472:	4632      	mov	r2, r6
 8014474:	4629      	mov	r1, r5
 8014476:	f009 ff9c 	bl	801e3b2 <memcpy>
 801447a:	68a0      	ldr	r0, [r4, #8]
 801447c:	4642      	mov	r2, r8
 801447e:	19a9      	adds	r1, r5, r6
 8014480:	f009 ff97 	bl	801e3b2 <memcpy>
 8014484:	e7bc      	b.n	8014400 <ucdr_serialize_int16_t+0x8c>
 8014486:	bf00      	nop

08014488 <ucdr_deserialize_int16_t>:
 8014488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801448c:	460d      	mov	r5, r1
 801448e:	2102      	movs	r1, #2
 8014490:	4604      	mov	r4, r0
 8014492:	f7fa fa83 	bl	800e99c <ucdr_buffer_alignment>
 8014496:	4601      	mov	r1, r0
 8014498:	4620      	mov	r0, r4
 801449a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801449e:	f7fa fac1 	bl	800ea24 <ucdr_advance_buffer>
 80144a2:	2102      	movs	r1, #2
 80144a4:	4620      	mov	r0, r4
 80144a6:	f7fa fa19 	bl	800e8dc <ucdr_check_buffer_available_for>
 80144aa:	b1a8      	cbz	r0, 80144d8 <ucdr_deserialize_int16_t+0x50>
 80144ac:	7d22      	ldrb	r2, [r4, #20]
 80144ae:	68a3      	ldr	r3, [r4, #8]
 80144b0:	2a01      	cmp	r2, #1
 80144b2:	d046      	beq.n	8014542 <ucdr_deserialize_int16_t+0xba>
 80144b4:	785b      	ldrb	r3, [r3, #1]
 80144b6:	702b      	strb	r3, [r5, #0]
 80144b8:	68a3      	ldr	r3, [r4, #8]
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	706b      	strb	r3, [r5, #1]
 80144be:	68a2      	ldr	r2, [r4, #8]
 80144c0:	6923      	ldr	r3, [r4, #16]
 80144c2:	3202      	adds	r2, #2
 80144c4:	3302      	adds	r3, #2
 80144c6:	2102      	movs	r1, #2
 80144c8:	60a2      	str	r2, [r4, #8]
 80144ca:	6123      	str	r3, [r4, #16]
 80144cc:	7561      	strb	r1, [r4, #21]
 80144ce:	7da0      	ldrb	r0, [r4, #22]
 80144d0:	f080 0001 	eor.w	r0, r0, #1
 80144d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144d8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80144dc:	42be      	cmp	r6, r7
 80144de:	d920      	bls.n	8014522 <ucdr_deserialize_int16_t+0x9a>
 80144e0:	6923      	ldr	r3, [r4, #16]
 80144e2:	60a6      	str	r6, [r4, #8]
 80144e4:	1bf6      	subs	r6, r6, r7
 80144e6:	4433      	add	r3, r6
 80144e8:	f1c6 0902 	rsb	r9, r6, #2
 80144ec:	6123      	str	r3, [r4, #16]
 80144ee:	4649      	mov	r1, r9
 80144f0:	4620      	mov	r0, r4
 80144f2:	f7fa f9ff 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 80144f6:	b338      	cbz	r0, 8014548 <ucdr_deserialize_int16_t+0xc0>
 80144f8:	7d23      	ldrb	r3, [r4, #20]
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d034      	beq.n	8014568 <ucdr_deserialize_int16_t+0xe0>
 80144fe:	787b      	ldrb	r3, [r7, #1]
 8014500:	702b      	strb	r3, [r5, #0]
 8014502:	783b      	ldrb	r3, [r7, #0]
 8014504:	706b      	strb	r3, [r5, #1]
 8014506:	6923      	ldr	r3, [r4, #16]
 8014508:	68a2      	ldr	r2, [r4, #8]
 801450a:	7da0      	ldrb	r0, [r4, #22]
 801450c:	2102      	movs	r1, #2
 801450e:	3302      	adds	r3, #2
 8014510:	444a      	add	r2, r9
 8014512:	1b9b      	subs	r3, r3, r6
 8014514:	7561      	strb	r1, [r4, #21]
 8014516:	60a2      	str	r2, [r4, #8]
 8014518:	6123      	str	r3, [r4, #16]
 801451a:	f080 0001 	eor.w	r0, r0, #1
 801451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014522:	2102      	movs	r1, #2
 8014524:	4620      	mov	r0, r4
 8014526:	f7fa f9e5 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 801452a:	2800      	cmp	r0, #0
 801452c:	d0cf      	beq.n	80144ce <ucdr_deserialize_int16_t+0x46>
 801452e:	7d23      	ldrb	r3, [r4, #20]
 8014530:	68a2      	ldr	r2, [r4, #8]
 8014532:	2b01      	cmp	r3, #1
 8014534:	d015      	beq.n	8014562 <ucdr_deserialize_int16_t+0xda>
 8014536:	7853      	ldrb	r3, [r2, #1]
 8014538:	702b      	strb	r3, [r5, #0]
 801453a:	68a3      	ldr	r3, [r4, #8]
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	706b      	strb	r3, [r5, #1]
 8014540:	e7bd      	b.n	80144be <ucdr_deserialize_int16_t+0x36>
 8014542:	881b      	ldrh	r3, [r3, #0]
 8014544:	802b      	strh	r3, [r5, #0]
 8014546:	e7ba      	b.n	80144be <ucdr_deserialize_int16_t+0x36>
 8014548:	68a2      	ldr	r2, [r4, #8]
 801454a:	6923      	ldr	r3, [r4, #16]
 801454c:	7da0      	ldrb	r0, [r4, #22]
 801454e:	f884 8015 	strb.w	r8, [r4, #21]
 8014552:	1b92      	subs	r2, r2, r6
 8014554:	1b9b      	subs	r3, r3, r6
 8014556:	60a2      	str	r2, [r4, #8]
 8014558:	6123      	str	r3, [r4, #16]
 801455a:	f080 0001 	eor.w	r0, r0, #1
 801455e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014562:	8813      	ldrh	r3, [r2, #0]
 8014564:	802b      	strh	r3, [r5, #0]
 8014566:	e7aa      	b.n	80144be <ucdr_deserialize_int16_t+0x36>
 8014568:	4639      	mov	r1, r7
 801456a:	4632      	mov	r2, r6
 801456c:	4628      	mov	r0, r5
 801456e:	f009 ff20 	bl	801e3b2 <memcpy>
 8014572:	68a1      	ldr	r1, [r4, #8]
 8014574:	464a      	mov	r2, r9
 8014576:	19a8      	adds	r0, r5, r6
 8014578:	f009 ff1b 	bl	801e3b2 <memcpy>
 801457c:	e7c3      	b.n	8014506 <ucdr_deserialize_int16_t+0x7e>
 801457e:	bf00      	nop

08014580 <ucdr_serialize_int32_t>:
 8014580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014584:	b082      	sub	sp, #8
 8014586:	4604      	mov	r4, r0
 8014588:	9101      	str	r1, [sp, #4]
 801458a:	2104      	movs	r1, #4
 801458c:	f7fa fa06 	bl	800e99c <ucdr_buffer_alignment>
 8014590:	4601      	mov	r1, r0
 8014592:	4620      	mov	r0, r4
 8014594:	7d67      	ldrb	r7, [r4, #21]
 8014596:	f7fa fa45 	bl	800ea24 <ucdr_advance_buffer>
 801459a:	2104      	movs	r1, #4
 801459c:	4620      	mov	r0, r4
 801459e:	f7fa f99d 	bl	800e8dc <ucdr_check_buffer_available_for>
 80145a2:	b300      	cbz	r0, 80145e6 <ucdr_serialize_int32_t+0x66>
 80145a4:	7d22      	ldrb	r2, [r4, #20]
 80145a6:	68a3      	ldr	r3, [r4, #8]
 80145a8:	2a01      	cmp	r2, #1
 80145aa:	d05d      	beq.n	8014668 <ucdr_serialize_int32_t+0xe8>
 80145ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80145b0:	701a      	strb	r2, [r3, #0]
 80145b2:	68a3      	ldr	r3, [r4, #8]
 80145b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80145b8:	705a      	strb	r2, [r3, #1]
 80145ba:	68a3      	ldr	r3, [r4, #8]
 80145bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80145c0:	709a      	strb	r2, [r3, #2]
 80145c2:	68a3      	ldr	r3, [r4, #8]
 80145c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80145c8:	70da      	strb	r2, [r3, #3]
 80145ca:	68a2      	ldr	r2, [r4, #8]
 80145cc:	6923      	ldr	r3, [r4, #16]
 80145ce:	3204      	adds	r2, #4
 80145d0:	3304      	adds	r3, #4
 80145d2:	2104      	movs	r1, #4
 80145d4:	60a2      	str	r2, [r4, #8]
 80145d6:	6123      	str	r3, [r4, #16]
 80145d8:	7561      	strb	r1, [r4, #21]
 80145da:	7da0      	ldrb	r0, [r4, #22]
 80145dc:	f080 0001 	eor.w	r0, r0, #1
 80145e0:	b002      	add	sp, #8
 80145e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80145ea:	42ab      	cmp	r3, r5
 80145ec:	d92e      	bls.n	801464c <ucdr_serialize_int32_t+0xcc>
 80145ee:	1b5e      	subs	r6, r3, r5
 80145f0:	60a3      	str	r3, [r4, #8]
 80145f2:	6923      	ldr	r3, [r4, #16]
 80145f4:	f1c6 0804 	rsb	r8, r6, #4
 80145f8:	4433      	add	r3, r6
 80145fa:	6123      	str	r3, [r4, #16]
 80145fc:	4641      	mov	r1, r8
 80145fe:	4620      	mov	r0, r4
 8014600:	f7fa f978 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014604:	b398      	cbz	r0, 801466e <ucdr_serialize_int32_t+0xee>
 8014606:	7d23      	ldrb	r3, [r4, #20]
 8014608:	2b01      	cmp	r3, #1
 801460a:	d046      	beq.n	801469a <ucdr_serialize_int32_t+0x11a>
 801460c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014610:	702b      	strb	r3, [r5, #0]
 8014612:	2e01      	cmp	r6, #1
 8014614:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014618:	706b      	strb	r3, [r5, #1]
 801461a:	d035      	beq.n	8014688 <ucdr_serialize_int32_t+0x108>
 801461c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014620:	70ab      	strb	r3, [r5, #2]
 8014622:	2e02      	cmp	r6, #2
 8014624:	d034      	beq.n	8014690 <ucdr_serialize_int32_t+0x110>
 8014626:	3503      	adds	r5, #3
 8014628:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801462c:	702b      	strb	r3, [r5, #0]
 801462e:	6923      	ldr	r3, [r4, #16]
 8014630:	68a2      	ldr	r2, [r4, #8]
 8014632:	7da0      	ldrb	r0, [r4, #22]
 8014634:	3304      	adds	r3, #4
 8014636:	4442      	add	r2, r8
 8014638:	1b9b      	subs	r3, r3, r6
 801463a:	2104      	movs	r1, #4
 801463c:	f080 0001 	eor.w	r0, r0, #1
 8014640:	60a2      	str	r2, [r4, #8]
 8014642:	6123      	str	r3, [r4, #16]
 8014644:	7561      	strb	r1, [r4, #21]
 8014646:	b002      	add	sp, #8
 8014648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801464c:	2104      	movs	r1, #4
 801464e:	4620      	mov	r0, r4
 8014650:	f7fa f950 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014654:	2800      	cmp	r0, #0
 8014656:	d0c0      	beq.n	80145da <ucdr_serialize_int32_t+0x5a>
 8014658:	7d23      	ldrb	r3, [r4, #20]
 801465a:	68a2      	ldr	r2, [r4, #8]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d019      	beq.n	8014694 <ucdr_serialize_int32_t+0x114>
 8014660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014664:	7013      	strb	r3, [r2, #0]
 8014666:	e7a4      	b.n	80145b2 <ucdr_serialize_int32_t+0x32>
 8014668:	9a01      	ldr	r2, [sp, #4]
 801466a:	601a      	str	r2, [r3, #0]
 801466c:	e7ad      	b.n	80145ca <ucdr_serialize_int32_t+0x4a>
 801466e:	68a2      	ldr	r2, [r4, #8]
 8014670:	6923      	ldr	r3, [r4, #16]
 8014672:	7da0      	ldrb	r0, [r4, #22]
 8014674:	7567      	strb	r7, [r4, #21]
 8014676:	1b92      	subs	r2, r2, r6
 8014678:	1b9b      	subs	r3, r3, r6
 801467a:	f080 0001 	eor.w	r0, r0, #1
 801467e:	60a2      	str	r2, [r4, #8]
 8014680:	6123      	str	r3, [r4, #16]
 8014682:	b002      	add	sp, #8
 8014684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014688:	68a3      	ldr	r3, [r4, #8]
 801468a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801468e:	701a      	strb	r2, [r3, #0]
 8014690:	68a5      	ldr	r5, [r4, #8]
 8014692:	e7c9      	b.n	8014628 <ucdr_serialize_int32_t+0xa8>
 8014694:	9b01      	ldr	r3, [sp, #4]
 8014696:	6013      	str	r3, [r2, #0]
 8014698:	e797      	b.n	80145ca <ucdr_serialize_int32_t+0x4a>
 801469a:	4628      	mov	r0, r5
 801469c:	ad01      	add	r5, sp, #4
 801469e:	4632      	mov	r2, r6
 80146a0:	4629      	mov	r1, r5
 80146a2:	f009 fe86 	bl	801e3b2 <memcpy>
 80146a6:	68a0      	ldr	r0, [r4, #8]
 80146a8:	4642      	mov	r2, r8
 80146aa:	19a9      	adds	r1, r5, r6
 80146ac:	f009 fe81 	bl	801e3b2 <memcpy>
 80146b0:	e7bd      	b.n	801462e <ucdr_serialize_int32_t+0xae>
 80146b2:	bf00      	nop

080146b4 <ucdr_deserialize_int32_t>:
 80146b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146b8:	460d      	mov	r5, r1
 80146ba:	2104      	movs	r1, #4
 80146bc:	4604      	mov	r4, r0
 80146be:	f7fa f96d 	bl	800e99c <ucdr_buffer_alignment>
 80146c2:	4601      	mov	r1, r0
 80146c4:	4620      	mov	r0, r4
 80146c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80146ca:	f7fa f9ab 	bl	800ea24 <ucdr_advance_buffer>
 80146ce:	2104      	movs	r1, #4
 80146d0:	4620      	mov	r0, r4
 80146d2:	f7fa f903 	bl	800e8dc <ucdr_check_buffer_available_for>
 80146d6:	b1d8      	cbz	r0, 8014710 <ucdr_deserialize_int32_t+0x5c>
 80146d8:	7d22      	ldrb	r2, [r4, #20]
 80146da:	68a3      	ldr	r3, [r4, #8]
 80146dc:	2a01      	cmp	r2, #1
 80146de:	d052      	beq.n	8014786 <ucdr_deserialize_int32_t+0xd2>
 80146e0:	78db      	ldrb	r3, [r3, #3]
 80146e2:	702b      	strb	r3, [r5, #0]
 80146e4:	68a3      	ldr	r3, [r4, #8]
 80146e6:	789b      	ldrb	r3, [r3, #2]
 80146e8:	706b      	strb	r3, [r5, #1]
 80146ea:	68a3      	ldr	r3, [r4, #8]
 80146ec:	785b      	ldrb	r3, [r3, #1]
 80146ee:	70ab      	strb	r3, [r5, #2]
 80146f0:	68a3      	ldr	r3, [r4, #8]
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	70eb      	strb	r3, [r5, #3]
 80146f6:	68a2      	ldr	r2, [r4, #8]
 80146f8:	6923      	ldr	r3, [r4, #16]
 80146fa:	3204      	adds	r2, #4
 80146fc:	3304      	adds	r3, #4
 80146fe:	2104      	movs	r1, #4
 8014700:	60a2      	str	r2, [r4, #8]
 8014702:	6123      	str	r3, [r4, #16]
 8014704:	7561      	strb	r1, [r4, #21]
 8014706:	7da0      	ldrb	r0, [r4, #22]
 8014708:	f080 0001 	eor.w	r0, r0, #1
 801470c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014710:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014714:	42b7      	cmp	r7, r6
 8014716:	d92a      	bls.n	801476e <ucdr_deserialize_int32_t+0xba>
 8014718:	6923      	ldr	r3, [r4, #16]
 801471a:	60a7      	str	r7, [r4, #8]
 801471c:	1bbf      	subs	r7, r7, r6
 801471e:	443b      	add	r3, r7
 8014720:	f1c7 0904 	rsb	r9, r7, #4
 8014724:	6123      	str	r3, [r4, #16]
 8014726:	4649      	mov	r1, r9
 8014728:	4620      	mov	r0, r4
 801472a:	f7fa f8e3 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 801472e:	b368      	cbz	r0, 801478c <ucdr_deserialize_int32_t+0xd8>
 8014730:	7d23      	ldrb	r3, [r4, #20]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d040      	beq.n	80147b8 <ucdr_deserialize_int32_t+0x104>
 8014736:	78f3      	ldrb	r3, [r6, #3]
 8014738:	702b      	strb	r3, [r5, #0]
 801473a:	78b3      	ldrb	r3, [r6, #2]
 801473c:	706b      	strb	r3, [r5, #1]
 801473e:	2f01      	cmp	r7, #1
 8014740:	d031      	beq.n	80147a6 <ucdr_deserialize_int32_t+0xf2>
 8014742:	7873      	ldrb	r3, [r6, #1]
 8014744:	70ab      	strb	r3, [r5, #2]
 8014746:	2f02      	cmp	r7, #2
 8014748:	f105 0503 	add.w	r5, r5, #3
 801474c:	d02f      	beq.n	80147ae <ucdr_deserialize_int32_t+0xfa>
 801474e:	7833      	ldrb	r3, [r6, #0]
 8014750:	702b      	strb	r3, [r5, #0]
 8014752:	6923      	ldr	r3, [r4, #16]
 8014754:	68a2      	ldr	r2, [r4, #8]
 8014756:	7da0      	ldrb	r0, [r4, #22]
 8014758:	2104      	movs	r1, #4
 801475a:	3304      	adds	r3, #4
 801475c:	444a      	add	r2, r9
 801475e:	1bdb      	subs	r3, r3, r7
 8014760:	7561      	strb	r1, [r4, #21]
 8014762:	60a2      	str	r2, [r4, #8]
 8014764:	6123      	str	r3, [r4, #16]
 8014766:	f080 0001 	eor.w	r0, r0, #1
 801476a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801476e:	2104      	movs	r1, #4
 8014770:	4620      	mov	r0, r4
 8014772:	f7fa f8bf 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014776:	2800      	cmp	r0, #0
 8014778:	d0c5      	beq.n	8014706 <ucdr_deserialize_int32_t+0x52>
 801477a:	7d23      	ldrb	r3, [r4, #20]
 801477c:	68a2      	ldr	r2, [r4, #8]
 801477e:	2b01      	cmp	r3, #1
 8014780:	d017      	beq.n	80147b2 <ucdr_deserialize_int32_t+0xfe>
 8014782:	78d3      	ldrb	r3, [r2, #3]
 8014784:	e7ad      	b.n	80146e2 <ucdr_deserialize_int32_t+0x2e>
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	602b      	str	r3, [r5, #0]
 801478a:	e7b4      	b.n	80146f6 <ucdr_deserialize_int32_t+0x42>
 801478c:	68a2      	ldr	r2, [r4, #8]
 801478e:	6923      	ldr	r3, [r4, #16]
 8014790:	7da0      	ldrb	r0, [r4, #22]
 8014792:	f884 8015 	strb.w	r8, [r4, #21]
 8014796:	1bd2      	subs	r2, r2, r7
 8014798:	1bdb      	subs	r3, r3, r7
 801479a:	60a2      	str	r2, [r4, #8]
 801479c:	6123      	str	r3, [r4, #16]
 801479e:	f080 0001 	eor.w	r0, r0, #1
 80147a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147a6:	68a3      	ldr	r3, [r4, #8]
 80147a8:	785b      	ldrb	r3, [r3, #1]
 80147aa:	70ab      	strb	r3, [r5, #2]
 80147ac:	3503      	adds	r5, #3
 80147ae:	68a6      	ldr	r6, [r4, #8]
 80147b0:	e7cd      	b.n	801474e <ucdr_deserialize_int32_t+0x9a>
 80147b2:	6813      	ldr	r3, [r2, #0]
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	e79e      	b.n	80146f6 <ucdr_deserialize_int32_t+0x42>
 80147b8:	4631      	mov	r1, r6
 80147ba:	463a      	mov	r2, r7
 80147bc:	4628      	mov	r0, r5
 80147be:	f009 fdf8 	bl	801e3b2 <memcpy>
 80147c2:	68a1      	ldr	r1, [r4, #8]
 80147c4:	464a      	mov	r2, r9
 80147c6:	19e8      	adds	r0, r5, r7
 80147c8:	f009 fdf3 	bl	801e3b2 <memcpy>
 80147cc:	e7c1      	b.n	8014752 <ucdr_deserialize_int32_t+0x9e>
 80147ce:	bf00      	nop

080147d0 <ucdr_serialize_double>:
 80147d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d4:	2108      	movs	r1, #8
 80147d6:	b082      	sub	sp, #8
 80147d8:	4604      	mov	r4, r0
 80147da:	ed8d 0b00 	vstr	d0, [sp]
 80147de:	f7fa f8dd 	bl	800e99c <ucdr_buffer_alignment>
 80147e2:	4601      	mov	r1, r0
 80147e4:	4620      	mov	r0, r4
 80147e6:	7d67      	ldrb	r7, [r4, #21]
 80147e8:	f7fa f91c 	bl	800ea24 <ucdr_advance_buffer>
 80147ec:	2108      	movs	r1, #8
 80147ee:	4620      	mov	r0, r4
 80147f0:	f7fa f874 	bl	800e8dc <ucdr_check_buffer_available_for>
 80147f4:	2800      	cmp	r0, #0
 80147f6:	d14d      	bne.n	8014894 <ucdr_serialize_double+0xc4>
 80147f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80147fc:	42ab      	cmp	r3, r5
 80147fe:	d944      	bls.n	801488a <ucdr_serialize_double+0xba>
 8014800:	1b5e      	subs	r6, r3, r5
 8014802:	60a3      	str	r3, [r4, #8]
 8014804:	6923      	ldr	r3, [r4, #16]
 8014806:	f1c6 0808 	rsb	r8, r6, #8
 801480a:	4433      	add	r3, r6
 801480c:	6123      	str	r3, [r4, #16]
 801480e:	4641      	mov	r1, r8
 8014810:	4620      	mov	r0, r4
 8014812:	f7fa f86f 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014816:	2800      	cmp	r0, #0
 8014818:	d072      	beq.n	8014900 <ucdr_serialize_double+0x130>
 801481a:	7d23      	ldrb	r3, [r4, #20]
 801481c:	2b01      	cmp	r3, #1
 801481e:	f000 8092 	beq.w	8014946 <ucdr_serialize_double+0x176>
 8014822:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014826:	702b      	strb	r3, [r5, #0]
 8014828:	2e01      	cmp	r6, #1
 801482a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801482e:	706b      	strb	r3, [r5, #1]
 8014830:	d073      	beq.n	801491a <ucdr_serialize_double+0x14a>
 8014832:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014836:	70ab      	strb	r3, [r5, #2]
 8014838:	2e02      	cmp	r6, #2
 801483a:	d072      	beq.n	8014922 <ucdr_serialize_double+0x152>
 801483c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014840:	70eb      	strb	r3, [r5, #3]
 8014842:	2e03      	cmp	r6, #3
 8014844:	d071      	beq.n	801492a <ucdr_serialize_double+0x15a>
 8014846:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801484a:	712b      	strb	r3, [r5, #4]
 801484c:	2e04      	cmp	r6, #4
 801484e:	d070      	beq.n	8014932 <ucdr_serialize_double+0x162>
 8014850:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014854:	716b      	strb	r3, [r5, #5]
 8014856:	2e05      	cmp	r6, #5
 8014858:	d06f      	beq.n	801493a <ucdr_serialize_double+0x16a>
 801485a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801485e:	71ab      	strb	r3, [r5, #6]
 8014860:	2e06      	cmp	r6, #6
 8014862:	d06e      	beq.n	8014942 <ucdr_serialize_double+0x172>
 8014864:	3507      	adds	r5, #7
 8014866:	f89d 3000 	ldrb.w	r3, [sp]
 801486a:	702b      	strb	r3, [r5, #0]
 801486c:	6923      	ldr	r3, [r4, #16]
 801486e:	68a2      	ldr	r2, [r4, #8]
 8014870:	7da0      	ldrb	r0, [r4, #22]
 8014872:	3308      	adds	r3, #8
 8014874:	4442      	add	r2, r8
 8014876:	1b9b      	subs	r3, r3, r6
 8014878:	2108      	movs	r1, #8
 801487a:	f080 0001 	eor.w	r0, r0, #1
 801487e:	60a2      	str	r2, [r4, #8]
 8014880:	6123      	str	r3, [r4, #16]
 8014882:	7561      	strb	r1, [r4, #21]
 8014884:	b002      	add	sp, #8
 8014886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488a:	2108      	movs	r1, #8
 801488c:	4620      	mov	r0, r4
 801488e:	f7fa f831 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014892:	b350      	cbz	r0, 80148ea <ucdr_serialize_double+0x11a>
 8014894:	7d22      	ldrb	r2, [r4, #20]
 8014896:	68a3      	ldr	r3, [r4, #8]
 8014898:	2a01      	cmp	r2, #1
 801489a:	d02c      	beq.n	80148f6 <ucdr_serialize_double+0x126>
 801489c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80148a0:	701a      	strb	r2, [r3, #0]
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80148a8:	705a      	strb	r2, [r3, #1]
 80148aa:	68a3      	ldr	r3, [r4, #8]
 80148ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80148b0:	709a      	strb	r2, [r3, #2]
 80148b2:	68a3      	ldr	r3, [r4, #8]
 80148b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80148b8:	70da      	strb	r2, [r3, #3]
 80148ba:	68a3      	ldr	r3, [r4, #8]
 80148bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80148c0:	711a      	strb	r2, [r3, #4]
 80148c2:	68a3      	ldr	r3, [r4, #8]
 80148c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80148c8:	715a      	strb	r2, [r3, #5]
 80148ca:	68a3      	ldr	r3, [r4, #8]
 80148cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80148d0:	719a      	strb	r2, [r3, #6]
 80148d2:	68a3      	ldr	r3, [r4, #8]
 80148d4:	f89d 2000 	ldrb.w	r2, [sp]
 80148d8:	71da      	strb	r2, [r3, #7]
 80148da:	68a2      	ldr	r2, [r4, #8]
 80148dc:	6923      	ldr	r3, [r4, #16]
 80148de:	3208      	adds	r2, #8
 80148e0:	3308      	adds	r3, #8
 80148e2:	2108      	movs	r1, #8
 80148e4:	60a2      	str	r2, [r4, #8]
 80148e6:	6123      	str	r3, [r4, #16]
 80148e8:	7561      	strb	r1, [r4, #21]
 80148ea:	7da0      	ldrb	r0, [r4, #22]
 80148ec:	f080 0001 	eor.w	r0, r0, #1
 80148f0:	b002      	add	sp, #8
 80148f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80148fa:	6019      	str	r1, [r3, #0]
 80148fc:	605a      	str	r2, [r3, #4]
 80148fe:	e7ec      	b.n	80148da <ucdr_serialize_double+0x10a>
 8014900:	68a2      	ldr	r2, [r4, #8]
 8014902:	6923      	ldr	r3, [r4, #16]
 8014904:	7da0      	ldrb	r0, [r4, #22]
 8014906:	7567      	strb	r7, [r4, #21]
 8014908:	1b92      	subs	r2, r2, r6
 801490a:	1b9b      	subs	r3, r3, r6
 801490c:	f080 0001 	eor.w	r0, r0, #1
 8014910:	60a2      	str	r2, [r4, #8]
 8014912:	6123      	str	r3, [r4, #16]
 8014914:	b002      	add	sp, #8
 8014916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801491a:	68a3      	ldr	r3, [r4, #8]
 801491c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014920:	701a      	strb	r2, [r3, #0]
 8014922:	68a3      	ldr	r3, [r4, #8]
 8014924:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014928:	701a      	strb	r2, [r3, #0]
 801492a:	68a3      	ldr	r3, [r4, #8]
 801492c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014930:	701a      	strb	r2, [r3, #0]
 8014932:	68a3      	ldr	r3, [r4, #8]
 8014934:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014938:	701a      	strb	r2, [r3, #0]
 801493a:	68a3      	ldr	r3, [r4, #8]
 801493c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014940:	701a      	strb	r2, [r3, #0]
 8014942:	68a5      	ldr	r5, [r4, #8]
 8014944:	e78f      	b.n	8014866 <ucdr_serialize_double+0x96>
 8014946:	4628      	mov	r0, r5
 8014948:	466d      	mov	r5, sp
 801494a:	4632      	mov	r2, r6
 801494c:	4629      	mov	r1, r5
 801494e:	f009 fd30 	bl	801e3b2 <memcpy>
 8014952:	68a0      	ldr	r0, [r4, #8]
 8014954:	4642      	mov	r2, r8
 8014956:	19a9      	adds	r1, r5, r6
 8014958:	f009 fd2b 	bl	801e3b2 <memcpy>
 801495c:	e786      	b.n	801486c <ucdr_serialize_double+0x9c>
 801495e:	bf00      	nop

08014960 <ucdr_serialize_endian_double>:
 8014960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014964:	460e      	mov	r6, r1
 8014966:	b083      	sub	sp, #12
 8014968:	2108      	movs	r1, #8
 801496a:	4604      	mov	r4, r0
 801496c:	ed8d 0b00 	vstr	d0, [sp]
 8014970:	f7fa f814 	bl	800e99c <ucdr_buffer_alignment>
 8014974:	4601      	mov	r1, r0
 8014976:	4620      	mov	r0, r4
 8014978:	f894 8015 	ldrb.w	r8, [r4, #21]
 801497c:	f7fa f852 	bl	800ea24 <ucdr_advance_buffer>
 8014980:	2108      	movs	r1, #8
 8014982:	4620      	mov	r0, r4
 8014984:	f7f9 ffaa 	bl	800e8dc <ucdr_check_buffer_available_for>
 8014988:	2800      	cmp	r0, #0
 801498a:	d14c      	bne.n	8014a26 <ucdr_serialize_endian_double+0xc6>
 801498c:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8014990:	42bd      	cmp	r5, r7
 8014992:	d943      	bls.n	8014a1c <ucdr_serialize_endian_double+0xbc>
 8014994:	6923      	ldr	r3, [r4, #16]
 8014996:	60a5      	str	r5, [r4, #8]
 8014998:	1bed      	subs	r5, r5, r7
 801499a:	442b      	add	r3, r5
 801499c:	f1c5 0908 	rsb	r9, r5, #8
 80149a0:	6123      	str	r3, [r4, #16]
 80149a2:	4649      	mov	r1, r9
 80149a4:	4620      	mov	r0, r4
 80149a6:	f7f9 ffa5 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	d070      	beq.n	8014a90 <ucdr_serialize_endian_double+0x130>
 80149ae:	2e01      	cmp	r6, #1
 80149b0:	f000 8092 	beq.w	8014ad8 <ucdr_serialize_endian_double+0x178>
 80149b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80149b8:	703b      	strb	r3, [r7, #0]
 80149ba:	2d01      	cmp	r5, #1
 80149bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80149c0:	707b      	strb	r3, [r7, #1]
 80149c2:	d073      	beq.n	8014aac <ucdr_serialize_endian_double+0x14c>
 80149c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80149c8:	70bb      	strb	r3, [r7, #2]
 80149ca:	2d02      	cmp	r5, #2
 80149cc:	d072      	beq.n	8014ab4 <ucdr_serialize_endian_double+0x154>
 80149ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80149d2:	70fb      	strb	r3, [r7, #3]
 80149d4:	2d03      	cmp	r5, #3
 80149d6:	d071      	beq.n	8014abc <ucdr_serialize_endian_double+0x15c>
 80149d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80149dc:	713b      	strb	r3, [r7, #4]
 80149de:	2d04      	cmp	r5, #4
 80149e0:	d070      	beq.n	8014ac4 <ucdr_serialize_endian_double+0x164>
 80149e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80149e6:	717b      	strb	r3, [r7, #5]
 80149e8:	2d05      	cmp	r5, #5
 80149ea:	d06f      	beq.n	8014acc <ucdr_serialize_endian_double+0x16c>
 80149ec:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80149f0:	71bb      	strb	r3, [r7, #6]
 80149f2:	2d06      	cmp	r5, #6
 80149f4:	d06e      	beq.n	8014ad4 <ucdr_serialize_endian_double+0x174>
 80149f6:	3707      	adds	r7, #7
 80149f8:	f89d 3000 	ldrb.w	r3, [sp]
 80149fc:	703b      	strb	r3, [r7, #0]
 80149fe:	6923      	ldr	r3, [r4, #16]
 8014a00:	68a2      	ldr	r2, [r4, #8]
 8014a02:	7da0      	ldrb	r0, [r4, #22]
 8014a04:	3308      	adds	r3, #8
 8014a06:	444a      	add	r2, r9
 8014a08:	1b5b      	subs	r3, r3, r5
 8014a0a:	2108      	movs	r1, #8
 8014a0c:	f080 0001 	eor.w	r0, r0, #1
 8014a10:	60a2      	str	r2, [r4, #8]
 8014a12:	6123      	str	r3, [r4, #16]
 8014a14:	7561      	strb	r1, [r4, #21]
 8014a16:	b003      	add	sp, #12
 8014a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a1c:	2108      	movs	r1, #8
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f7f9 ff68 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014a24:	b348      	cbz	r0, 8014a7a <ucdr_serialize_endian_double+0x11a>
 8014a26:	2e01      	cmp	r6, #1
 8014a28:	68a3      	ldr	r3, [r4, #8]
 8014a2a:	d02c      	beq.n	8014a86 <ucdr_serialize_endian_double+0x126>
 8014a2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014a30:	701a      	strb	r2, [r3, #0]
 8014a32:	68a3      	ldr	r3, [r4, #8]
 8014a34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014a38:	705a      	strb	r2, [r3, #1]
 8014a3a:	68a3      	ldr	r3, [r4, #8]
 8014a3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014a40:	709a      	strb	r2, [r3, #2]
 8014a42:	68a3      	ldr	r3, [r4, #8]
 8014a44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014a48:	70da      	strb	r2, [r3, #3]
 8014a4a:	68a3      	ldr	r3, [r4, #8]
 8014a4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014a50:	711a      	strb	r2, [r3, #4]
 8014a52:	68a3      	ldr	r3, [r4, #8]
 8014a54:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014a58:	715a      	strb	r2, [r3, #5]
 8014a5a:	68a3      	ldr	r3, [r4, #8]
 8014a5c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014a60:	719a      	strb	r2, [r3, #6]
 8014a62:	68a3      	ldr	r3, [r4, #8]
 8014a64:	f89d 2000 	ldrb.w	r2, [sp]
 8014a68:	71da      	strb	r2, [r3, #7]
 8014a6a:	68a2      	ldr	r2, [r4, #8]
 8014a6c:	6923      	ldr	r3, [r4, #16]
 8014a6e:	3208      	adds	r2, #8
 8014a70:	3308      	adds	r3, #8
 8014a72:	2108      	movs	r1, #8
 8014a74:	60a2      	str	r2, [r4, #8]
 8014a76:	6123      	str	r3, [r4, #16]
 8014a78:	7561      	strb	r1, [r4, #21]
 8014a7a:	7da0      	ldrb	r0, [r4, #22]
 8014a7c:	f080 0001 	eor.w	r0, r0, #1
 8014a80:	b003      	add	sp, #12
 8014a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a8a:	6019      	str	r1, [r3, #0]
 8014a8c:	605a      	str	r2, [r3, #4]
 8014a8e:	e7ec      	b.n	8014a6a <ucdr_serialize_endian_double+0x10a>
 8014a90:	68a2      	ldr	r2, [r4, #8]
 8014a92:	6923      	ldr	r3, [r4, #16]
 8014a94:	7da0      	ldrb	r0, [r4, #22]
 8014a96:	f884 8015 	strb.w	r8, [r4, #21]
 8014a9a:	1b52      	subs	r2, r2, r5
 8014a9c:	1b5b      	subs	r3, r3, r5
 8014a9e:	f080 0001 	eor.w	r0, r0, #1
 8014aa2:	60a2      	str	r2, [r4, #8]
 8014aa4:	6123      	str	r3, [r4, #16]
 8014aa6:	b003      	add	sp, #12
 8014aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aac:	68a3      	ldr	r3, [r4, #8]
 8014aae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014ab2:	701a      	strb	r2, [r3, #0]
 8014ab4:	68a3      	ldr	r3, [r4, #8]
 8014ab6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014aba:	701a      	strb	r2, [r3, #0]
 8014abc:	68a3      	ldr	r3, [r4, #8]
 8014abe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014ac2:	701a      	strb	r2, [r3, #0]
 8014ac4:	68a3      	ldr	r3, [r4, #8]
 8014ac6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014aca:	701a      	strb	r2, [r3, #0]
 8014acc:	68a3      	ldr	r3, [r4, #8]
 8014ace:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014ad2:	701a      	strb	r2, [r3, #0]
 8014ad4:	68a7      	ldr	r7, [r4, #8]
 8014ad6:	e78f      	b.n	80149f8 <ucdr_serialize_endian_double+0x98>
 8014ad8:	466e      	mov	r6, sp
 8014ada:	462a      	mov	r2, r5
 8014adc:	4631      	mov	r1, r6
 8014ade:	4638      	mov	r0, r7
 8014ae0:	f009 fc67 	bl	801e3b2 <memcpy>
 8014ae4:	68a0      	ldr	r0, [r4, #8]
 8014ae6:	464a      	mov	r2, r9
 8014ae8:	1971      	adds	r1, r6, r5
 8014aea:	f009 fc62 	bl	801e3b2 <memcpy>
 8014aee:	e786      	b.n	80149fe <ucdr_serialize_endian_double+0x9e>

08014af0 <ucdr_deserialize_double>:
 8014af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014af4:	460d      	mov	r5, r1
 8014af6:	2108      	movs	r1, #8
 8014af8:	4604      	mov	r4, r0
 8014afa:	f7f9 ff4f 	bl	800e99c <ucdr_buffer_alignment>
 8014afe:	4601      	mov	r1, r0
 8014b00:	4620      	mov	r0, r4
 8014b02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014b06:	f7f9 ff8d 	bl	800ea24 <ucdr_advance_buffer>
 8014b0a:	2108      	movs	r1, #8
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f7f9 fee5 	bl	800e8dc <ucdr_check_buffer_available_for>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d147      	bne.n	8014ba6 <ucdr_deserialize_double+0xb6>
 8014b16:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014b1a:	42be      	cmp	r6, r7
 8014b1c:	d93e      	bls.n	8014b9c <ucdr_deserialize_double+0xac>
 8014b1e:	6923      	ldr	r3, [r4, #16]
 8014b20:	60a6      	str	r6, [r4, #8]
 8014b22:	1bf6      	subs	r6, r6, r7
 8014b24:	4433      	add	r3, r6
 8014b26:	f1c6 0908 	rsb	r9, r6, #8
 8014b2a:	6123      	str	r3, [r4, #16]
 8014b2c:	4649      	mov	r1, r9
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7f9 fee0 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d063      	beq.n	8014c00 <ucdr_deserialize_double+0x110>
 8014b38:	7d23      	ldrb	r3, [r4, #20]
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	f000 8083 	beq.w	8014c46 <ucdr_deserialize_double+0x156>
 8014b40:	79fb      	ldrb	r3, [r7, #7]
 8014b42:	702b      	strb	r3, [r5, #0]
 8014b44:	79bb      	ldrb	r3, [r7, #6]
 8014b46:	706b      	strb	r3, [r5, #1]
 8014b48:	2e01      	cmp	r6, #1
 8014b4a:	d066      	beq.n	8014c1a <ucdr_deserialize_double+0x12a>
 8014b4c:	797b      	ldrb	r3, [r7, #5]
 8014b4e:	70ab      	strb	r3, [r5, #2]
 8014b50:	2e02      	cmp	r6, #2
 8014b52:	f000 8089 	beq.w	8014c68 <ucdr_deserialize_double+0x178>
 8014b56:	793b      	ldrb	r3, [r7, #4]
 8014b58:	70eb      	strb	r3, [r5, #3]
 8014b5a:	2e03      	cmp	r6, #3
 8014b5c:	f000 8082 	beq.w	8014c64 <ucdr_deserialize_double+0x174>
 8014b60:	78fb      	ldrb	r3, [r7, #3]
 8014b62:	712b      	strb	r3, [r5, #4]
 8014b64:	2e04      	cmp	r6, #4
 8014b66:	d07b      	beq.n	8014c60 <ucdr_deserialize_double+0x170>
 8014b68:	78bb      	ldrb	r3, [r7, #2]
 8014b6a:	716b      	strb	r3, [r5, #5]
 8014b6c:	2e05      	cmp	r6, #5
 8014b6e:	d075      	beq.n	8014c5c <ucdr_deserialize_double+0x16c>
 8014b70:	787b      	ldrb	r3, [r7, #1]
 8014b72:	71ab      	strb	r3, [r5, #6]
 8014b74:	2e06      	cmp	r6, #6
 8014b76:	f105 0507 	add.w	r5, r5, #7
 8014b7a:	d062      	beq.n	8014c42 <ucdr_deserialize_double+0x152>
 8014b7c:	783b      	ldrb	r3, [r7, #0]
 8014b7e:	702b      	strb	r3, [r5, #0]
 8014b80:	6923      	ldr	r3, [r4, #16]
 8014b82:	68a2      	ldr	r2, [r4, #8]
 8014b84:	7da0      	ldrb	r0, [r4, #22]
 8014b86:	2108      	movs	r1, #8
 8014b88:	3308      	adds	r3, #8
 8014b8a:	444a      	add	r2, r9
 8014b8c:	1b9b      	subs	r3, r3, r6
 8014b8e:	7561      	strb	r1, [r4, #21]
 8014b90:	60a2      	str	r2, [r4, #8]
 8014b92:	6123      	str	r3, [r4, #16]
 8014b94:	f080 0001 	eor.w	r0, r0, #1
 8014b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b9c:	2108      	movs	r1, #8
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f7f9 fea8 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014ba4:	b310      	cbz	r0, 8014bec <ucdr_deserialize_double+0xfc>
 8014ba6:	7d22      	ldrb	r2, [r4, #20]
 8014ba8:	68a3      	ldr	r3, [r4, #8]
 8014baa:	2a01      	cmp	r2, #1
 8014bac:	d023      	beq.n	8014bf6 <ucdr_deserialize_double+0x106>
 8014bae:	79db      	ldrb	r3, [r3, #7]
 8014bb0:	702b      	strb	r3, [r5, #0]
 8014bb2:	68a3      	ldr	r3, [r4, #8]
 8014bb4:	799b      	ldrb	r3, [r3, #6]
 8014bb6:	706b      	strb	r3, [r5, #1]
 8014bb8:	68a3      	ldr	r3, [r4, #8]
 8014bba:	795b      	ldrb	r3, [r3, #5]
 8014bbc:	70ab      	strb	r3, [r5, #2]
 8014bbe:	68a3      	ldr	r3, [r4, #8]
 8014bc0:	791b      	ldrb	r3, [r3, #4]
 8014bc2:	70eb      	strb	r3, [r5, #3]
 8014bc4:	68a3      	ldr	r3, [r4, #8]
 8014bc6:	78db      	ldrb	r3, [r3, #3]
 8014bc8:	712b      	strb	r3, [r5, #4]
 8014bca:	68a3      	ldr	r3, [r4, #8]
 8014bcc:	789b      	ldrb	r3, [r3, #2]
 8014bce:	716b      	strb	r3, [r5, #5]
 8014bd0:	68a3      	ldr	r3, [r4, #8]
 8014bd2:	785b      	ldrb	r3, [r3, #1]
 8014bd4:	71ab      	strb	r3, [r5, #6]
 8014bd6:	68a3      	ldr	r3, [r4, #8]
 8014bd8:	781b      	ldrb	r3, [r3, #0]
 8014bda:	71eb      	strb	r3, [r5, #7]
 8014bdc:	68a2      	ldr	r2, [r4, #8]
 8014bde:	6923      	ldr	r3, [r4, #16]
 8014be0:	3208      	adds	r2, #8
 8014be2:	3308      	adds	r3, #8
 8014be4:	2108      	movs	r1, #8
 8014be6:	60a2      	str	r2, [r4, #8]
 8014be8:	6123      	str	r3, [r4, #16]
 8014bea:	7561      	strb	r1, [r4, #21]
 8014bec:	7da0      	ldrb	r0, [r4, #22]
 8014bee:	f080 0001 	eor.w	r0, r0, #1
 8014bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	606b      	str	r3, [r5, #4]
 8014bfc:	602a      	str	r2, [r5, #0]
 8014bfe:	e7ed      	b.n	8014bdc <ucdr_deserialize_double+0xec>
 8014c00:	68a2      	ldr	r2, [r4, #8]
 8014c02:	6923      	ldr	r3, [r4, #16]
 8014c04:	7da0      	ldrb	r0, [r4, #22]
 8014c06:	f884 8015 	strb.w	r8, [r4, #21]
 8014c0a:	1b92      	subs	r2, r2, r6
 8014c0c:	1b9b      	subs	r3, r3, r6
 8014c0e:	60a2      	str	r2, [r4, #8]
 8014c10:	6123      	str	r3, [r4, #16]
 8014c12:	f080 0001 	eor.w	r0, r0, #1
 8014c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c1a:	68a3      	ldr	r3, [r4, #8]
 8014c1c:	795b      	ldrb	r3, [r3, #5]
 8014c1e:	70ab      	strb	r3, [r5, #2]
 8014c20:	3503      	adds	r5, #3
 8014c22:	68a3      	ldr	r3, [r4, #8]
 8014c24:	791b      	ldrb	r3, [r3, #4]
 8014c26:	f805 3b01 	strb.w	r3, [r5], #1
 8014c2a:	68a3      	ldr	r3, [r4, #8]
 8014c2c:	78db      	ldrb	r3, [r3, #3]
 8014c2e:	f805 3b01 	strb.w	r3, [r5], #1
 8014c32:	68a3      	ldr	r3, [r4, #8]
 8014c34:	789b      	ldrb	r3, [r3, #2]
 8014c36:	f805 3b01 	strb.w	r3, [r5], #1
 8014c3a:	68a3      	ldr	r3, [r4, #8]
 8014c3c:	785b      	ldrb	r3, [r3, #1]
 8014c3e:	f805 3b01 	strb.w	r3, [r5], #1
 8014c42:	68a7      	ldr	r7, [r4, #8]
 8014c44:	e79a      	b.n	8014b7c <ucdr_deserialize_double+0x8c>
 8014c46:	4639      	mov	r1, r7
 8014c48:	4632      	mov	r2, r6
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f009 fbb1 	bl	801e3b2 <memcpy>
 8014c50:	68a1      	ldr	r1, [r4, #8]
 8014c52:	464a      	mov	r2, r9
 8014c54:	19a8      	adds	r0, r5, r6
 8014c56:	f009 fbac 	bl	801e3b2 <memcpy>
 8014c5a:	e791      	b.n	8014b80 <ucdr_deserialize_double+0x90>
 8014c5c:	3506      	adds	r5, #6
 8014c5e:	e7ec      	b.n	8014c3a <ucdr_deserialize_double+0x14a>
 8014c60:	3505      	adds	r5, #5
 8014c62:	e7e6      	b.n	8014c32 <ucdr_deserialize_double+0x142>
 8014c64:	3504      	adds	r5, #4
 8014c66:	e7e0      	b.n	8014c2a <ucdr_deserialize_double+0x13a>
 8014c68:	3503      	adds	r5, #3
 8014c6a:	e7da      	b.n	8014c22 <ucdr_deserialize_double+0x132>

08014c6c <ucdr_deserialize_endian_double>:
 8014c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c70:	460f      	mov	r7, r1
 8014c72:	2108      	movs	r1, #8
 8014c74:	4604      	mov	r4, r0
 8014c76:	4615      	mov	r5, r2
 8014c78:	f7f9 fe90 	bl	800e99c <ucdr_buffer_alignment>
 8014c7c:	4601      	mov	r1, r0
 8014c7e:	4620      	mov	r0, r4
 8014c80:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014c84:	f7f9 fece 	bl	800ea24 <ucdr_advance_buffer>
 8014c88:	2108      	movs	r1, #8
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	f7f9 fe26 	bl	800e8dc <ucdr_check_buffer_available_for>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	d14f      	bne.n	8014d34 <ucdr_deserialize_endian_double+0xc8>
 8014c94:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8014c98:	4546      	cmp	r6, r8
 8014c9a:	d946      	bls.n	8014d2a <ucdr_deserialize_endian_double+0xbe>
 8014c9c:	6923      	ldr	r3, [r4, #16]
 8014c9e:	60a6      	str	r6, [r4, #8]
 8014ca0:	eba6 0608 	sub.w	r6, r6, r8
 8014ca4:	4433      	add	r3, r6
 8014ca6:	f1c6 0a08 	rsb	sl, r6, #8
 8014caa:	6123      	str	r3, [r4, #16]
 8014cac:	4651      	mov	r1, sl
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f7f9 fe20 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d069      	beq.n	8014d8c <ucdr_deserialize_endian_double+0x120>
 8014cb8:	2f01      	cmp	r7, #1
 8014cba:	f000 808b 	beq.w	8014dd4 <ucdr_deserialize_endian_double+0x168>
 8014cbe:	f898 3007 	ldrb.w	r3, [r8, #7]
 8014cc2:	702b      	strb	r3, [r5, #0]
 8014cc4:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014cc8:	706b      	strb	r3, [r5, #1]
 8014cca:	2e01      	cmp	r6, #1
 8014ccc:	d06b      	beq.n	8014da6 <ucdr_deserialize_endian_double+0x13a>
 8014cce:	f898 3005 	ldrb.w	r3, [r8, #5]
 8014cd2:	70ab      	strb	r3, [r5, #2]
 8014cd4:	2e02      	cmp	r6, #2
 8014cd6:	f000 808e 	beq.w	8014df6 <ucdr_deserialize_endian_double+0x18a>
 8014cda:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014cde:	70eb      	strb	r3, [r5, #3]
 8014ce0:	2e03      	cmp	r6, #3
 8014ce2:	f000 8086 	beq.w	8014df2 <ucdr_deserialize_endian_double+0x186>
 8014ce6:	f898 3003 	ldrb.w	r3, [r8, #3]
 8014cea:	712b      	strb	r3, [r5, #4]
 8014cec:	2e04      	cmp	r6, #4
 8014cee:	d07e      	beq.n	8014dee <ucdr_deserialize_endian_double+0x182>
 8014cf0:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014cf4:	716b      	strb	r3, [r5, #5]
 8014cf6:	2e05      	cmp	r6, #5
 8014cf8:	d077      	beq.n	8014dea <ucdr_deserialize_endian_double+0x17e>
 8014cfa:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014cfe:	71ab      	strb	r3, [r5, #6]
 8014d00:	2e06      	cmp	r6, #6
 8014d02:	f105 0507 	add.w	r5, r5, #7
 8014d06:	d062      	beq.n	8014dce <ucdr_deserialize_endian_double+0x162>
 8014d08:	f898 3000 	ldrb.w	r3, [r8]
 8014d0c:	702b      	strb	r3, [r5, #0]
 8014d0e:	6923      	ldr	r3, [r4, #16]
 8014d10:	68a2      	ldr	r2, [r4, #8]
 8014d12:	7da0      	ldrb	r0, [r4, #22]
 8014d14:	2108      	movs	r1, #8
 8014d16:	3308      	adds	r3, #8
 8014d18:	4452      	add	r2, sl
 8014d1a:	1b9b      	subs	r3, r3, r6
 8014d1c:	7561      	strb	r1, [r4, #21]
 8014d1e:	60a2      	str	r2, [r4, #8]
 8014d20:	6123      	str	r3, [r4, #16]
 8014d22:	f080 0001 	eor.w	r0, r0, #1
 8014d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d2a:	2108      	movs	r1, #8
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	f7f9 fde1 	bl	800e8f4 <ucdr_check_final_buffer_behavior>
 8014d32:	b308      	cbz	r0, 8014d78 <ucdr_deserialize_endian_double+0x10c>
 8014d34:	2f01      	cmp	r7, #1
 8014d36:	68a3      	ldr	r3, [r4, #8]
 8014d38:	d023      	beq.n	8014d82 <ucdr_deserialize_endian_double+0x116>
 8014d3a:	79db      	ldrb	r3, [r3, #7]
 8014d3c:	702b      	strb	r3, [r5, #0]
 8014d3e:	68a3      	ldr	r3, [r4, #8]
 8014d40:	799b      	ldrb	r3, [r3, #6]
 8014d42:	706b      	strb	r3, [r5, #1]
 8014d44:	68a3      	ldr	r3, [r4, #8]
 8014d46:	795b      	ldrb	r3, [r3, #5]
 8014d48:	70ab      	strb	r3, [r5, #2]
 8014d4a:	68a3      	ldr	r3, [r4, #8]
 8014d4c:	791b      	ldrb	r3, [r3, #4]
 8014d4e:	70eb      	strb	r3, [r5, #3]
 8014d50:	68a3      	ldr	r3, [r4, #8]
 8014d52:	78db      	ldrb	r3, [r3, #3]
 8014d54:	712b      	strb	r3, [r5, #4]
 8014d56:	68a3      	ldr	r3, [r4, #8]
 8014d58:	789b      	ldrb	r3, [r3, #2]
 8014d5a:	716b      	strb	r3, [r5, #5]
 8014d5c:	68a3      	ldr	r3, [r4, #8]
 8014d5e:	785b      	ldrb	r3, [r3, #1]
 8014d60:	71ab      	strb	r3, [r5, #6]
 8014d62:	68a3      	ldr	r3, [r4, #8]
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	71eb      	strb	r3, [r5, #7]
 8014d68:	68a2      	ldr	r2, [r4, #8]
 8014d6a:	6923      	ldr	r3, [r4, #16]
 8014d6c:	3208      	adds	r2, #8
 8014d6e:	3308      	adds	r3, #8
 8014d70:	2108      	movs	r1, #8
 8014d72:	60a2      	str	r2, [r4, #8]
 8014d74:	6123      	str	r3, [r4, #16]
 8014d76:	7561      	strb	r1, [r4, #21]
 8014d78:	7da0      	ldrb	r0, [r4, #22]
 8014d7a:	f080 0001 	eor.w	r0, r0, #1
 8014d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	606b      	str	r3, [r5, #4]
 8014d88:	602a      	str	r2, [r5, #0]
 8014d8a:	e7ed      	b.n	8014d68 <ucdr_deserialize_endian_double+0xfc>
 8014d8c:	68a2      	ldr	r2, [r4, #8]
 8014d8e:	6923      	ldr	r3, [r4, #16]
 8014d90:	7da0      	ldrb	r0, [r4, #22]
 8014d92:	f884 9015 	strb.w	r9, [r4, #21]
 8014d96:	1b92      	subs	r2, r2, r6
 8014d98:	1b9b      	subs	r3, r3, r6
 8014d9a:	60a2      	str	r2, [r4, #8]
 8014d9c:	6123      	str	r3, [r4, #16]
 8014d9e:	f080 0001 	eor.w	r0, r0, #1
 8014da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014da6:	68a3      	ldr	r3, [r4, #8]
 8014da8:	795b      	ldrb	r3, [r3, #5]
 8014daa:	70ab      	strb	r3, [r5, #2]
 8014dac:	3503      	adds	r5, #3
 8014dae:	68a3      	ldr	r3, [r4, #8]
 8014db0:	791b      	ldrb	r3, [r3, #4]
 8014db2:	f805 3b01 	strb.w	r3, [r5], #1
 8014db6:	68a3      	ldr	r3, [r4, #8]
 8014db8:	78db      	ldrb	r3, [r3, #3]
 8014dba:	f805 3b01 	strb.w	r3, [r5], #1
 8014dbe:	68a3      	ldr	r3, [r4, #8]
 8014dc0:	789b      	ldrb	r3, [r3, #2]
 8014dc2:	f805 3b01 	strb.w	r3, [r5], #1
 8014dc6:	68a3      	ldr	r3, [r4, #8]
 8014dc8:	785b      	ldrb	r3, [r3, #1]
 8014dca:	f805 3b01 	strb.w	r3, [r5], #1
 8014dce:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8014dd2:	e799      	b.n	8014d08 <ucdr_deserialize_endian_double+0x9c>
 8014dd4:	4641      	mov	r1, r8
 8014dd6:	4632      	mov	r2, r6
 8014dd8:	4628      	mov	r0, r5
 8014dda:	f009 faea 	bl	801e3b2 <memcpy>
 8014dde:	68a1      	ldr	r1, [r4, #8]
 8014de0:	4652      	mov	r2, sl
 8014de2:	19a8      	adds	r0, r5, r6
 8014de4:	f009 fae5 	bl	801e3b2 <memcpy>
 8014de8:	e791      	b.n	8014d0e <ucdr_deserialize_endian_double+0xa2>
 8014dea:	3506      	adds	r5, #6
 8014dec:	e7eb      	b.n	8014dc6 <ucdr_deserialize_endian_double+0x15a>
 8014dee:	3505      	adds	r5, #5
 8014df0:	e7e5      	b.n	8014dbe <ucdr_deserialize_endian_double+0x152>
 8014df2:	3504      	adds	r5, #4
 8014df4:	e7df      	b.n	8014db6 <ucdr_deserialize_endian_double+0x14a>
 8014df6:	3503      	adds	r5, #3
 8014df8:	e7d9      	b.n	8014dae <ucdr_deserialize_endian_double+0x142>
 8014dfa:	bf00      	nop

08014dfc <uxr_buffer_delete_entity>:
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	2300      	movs	r3, #0
 8014e00:	b08e      	sub	sp, #56	@ 0x38
 8014e02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014e06:	2303      	movs	r3, #3
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	2204      	movs	r2, #4
 8014e0c:	ab06      	add	r3, sp, #24
 8014e0e:	4604      	mov	r4, r0
 8014e10:	f001 fb34 	bl	801647c <uxr_prepare_stream_to_write_submessage>
 8014e14:	b918      	cbnz	r0, 8014e1e <uxr_buffer_delete_entity+0x22>
 8014e16:	4604      	mov	r4, r0
 8014e18:	4620      	mov	r0, r4
 8014e1a:	b00e      	add	sp, #56	@ 0x38
 8014e1c:	bd10      	pop	{r4, pc}
 8014e1e:	9902      	ldr	r1, [sp, #8]
 8014e20:	aa05      	add	r2, sp, #20
 8014e22:	4620      	mov	r0, r4
 8014e24:	f001 fc64 	bl	80166f0 <uxr_init_base_object_request>
 8014e28:	a905      	add	r1, sp, #20
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	a806      	add	r0, sp, #24
 8014e2e:	f003 fad7 	bl	80183e0 <uxr_serialize_DELETE_Payload>
 8014e32:	4620      	mov	r0, r4
 8014e34:	b00e      	add	sp, #56	@ 0x38
 8014e36:	bd10      	pop	{r4, pc}

08014e38 <uxr_common_create_entity>:
 8014e38:	b510      	push	{r4, lr}
 8014e3a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014e3e:	b08c      	sub	sp, #48	@ 0x30
 8014e40:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014e44:	f1bc 0f01 	cmp.w	ip, #1
 8014e48:	bf08      	it	eq
 8014e4a:	f003 0201 	andeq.w	r2, r3, #1
 8014e4e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8014e52:	bf18      	it	ne
 8014e54:	2200      	movne	r2, #0
 8014e56:	330e      	adds	r3, #14
 8014e58:	441a      	add	r2, r3
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	e9cd 3100 	strd	r3, r1, [sp]
 8014e60:	b292      	uxth	r2, r2
 8014e62:	9903      	ldr	r1, [sp, #12]
 8014e64:	ab04      	add	r3, sp, #16
 8014e66:	4604      	mov	r4, r0
 8014e68:	f001 fb08 	bl	801647c <uxr_prepare_stream_to_write_submessage>
 8014e6c:	b918      	cbnz	r0, 8014e76 <uxr_common_create_entity+0x3e>
 8014e6e:	4604      	mov	r4, r0
 8014e70:	4620      	mov	r0, r4
 8014e72:	b00c      	add	sp, #48	@ 0x30
 8014e74:	bd10      	pop	{r4, pc}
 8014e76:	9902      	ldr	r1, [sp, #8]
 8014e78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	f001 fc38 	bl	80166f0 <uxr_init_base_object_request>
 8014e80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014e82:	4604      	mov	r4, r0
 8014e84:	a804      	add	r0, sp, #16
 8014e86:	f003 fa09 	bl	801829c <uxr_serialize_CREATE_Payload>
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	b00c      	add	sp, #48	@ 0x30
 8014e8e:	bd10      	pop	{r4, pc}

08014e90 <uxr_buffer_create_participant_bin>:
 8014e90:	b570      	push	{r4, r5, r6, lr}
 8014e92:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8014e96:	ac11      	add	r4, sp, #68	@ 0x44
 8014e98:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8014e9c:	2303      	movs	r3, #3
 8014e9e:	7223      	strb	r3, [r4, #8]
 8014ea0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8014ea2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8014ea6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	2100      	movs	r1, #0
 8014eae:	4605      	mov	r5, r0
 8014eb0:	7122      	strb	r2, [r4, #4]
 8014eb2:	f88d 1014 	strb.w	r1, [sp, #20]
 8014eb6:	b1cb      	cbz	r3, 8014eec <uxr_buffer_create_participant_bin+0x5c>
 8014eb8:	f88d 201c 	strb.w	r2, [sp, #28]
 8014ebc:	9308      	str	r3, [sp, #32]
 8014ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ec2:	a915      	add	r1, sp, #84	@ 0x54
 8014ec4:	a809      	add	r0, sp, #36	@ 0x24
 8014ec6:	f7f9 fd5d 	bl	800e984 <ucdr_init_buffer>
 8014eca:	a905      	add	r1, sp, #20
 8014ecc:	a809      	add	r0, sp, #36	@ 0x24
 8014ece:	f002 fded 	bl	8017aac <uxr_serialize_OBJK_DomainParticipant_Binary>
 8014ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ed4:	9600      	str	r6, [sp, #0]
 8014ed6:	9401      	str	r4, [sp, #4]
 8014ed8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014edc:	60e3      	str	r3, [r4, #12]
 8014ede:	4628      	mov	r0, r5
 8014ee0:	b29b      	uxth	r3, r3
 8014ee2:	f7ff ffa9 	bl	8014e38 <uxr_common_create_entity>
 8014ee6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8014eea:	bd70      	pop	{r4, r5, r6, pc}
 8014eec:	f88d 301c 	strb.w	r3, [sp, #28]
 8014ef0:	e7e5      	b.n	8014ebe <uxr_buffer_create_participant_bin+0x2e>
 8014ef2:	bf00      	nop

08014ef4 <uxr_buffer_create_topic_bin>:
 8014ef4:	b570      	push	{r4, r5, r6, lr}
 8014ef6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8014efa:	4605      	mov	r5, r0
 8014efc:	9105      	str	r1, [sp, #20]
 8014efe:	4618      	mov	r0, r3
 8014f00:	a997      	add	r1, sp, #604	@ 0x25c
 8014f02:	2302      	movs	r3, #2
 8014f04:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8014f08:	9204      	str	r2, [sp, #16]
 8014f0a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8014f0e:	f000 fa31 	bl	8015374 <uxr_object_id_to_raw>
 8014f12:	2303      	movs	r3, #3
 8014f14:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8014f18:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8014f1a:	9306      	str	r3, [sp, #24]
 8014f1c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8014f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f20:	2301      	movs	r3, #1
 8014f22:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	a917      	add	r1, sp, #92	@ 0x5c
 8014f2e:	a80b      	add	r0, sp, #44	@ 0x2c
 8014f30:	f88d 301c 	strb.w	r3, [sp, #28]
 8014f34:	f7f9 fd26 	bl	800e984 <ucdr_init_buffer>
 8014f38:	a906      	add	r1, sp, #24
 8014f3a:	a80b      	add	r0, sp, #44	@ 0x2c
 8014f3c:	f002 fdd8 	bl	8017af0 <uxr_serialize_OBJK_Topic_Binary>
 8014f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f42:	9316      	str	r3, [sp, #88]	@ 0x58
 8014f44:	ac13      	add	r4, sp, #76	@ 0x4c
 8014f46:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014f4a:	9600      	str	r6, [sp, #0]
 8014f4c:	9401      	str	r4, [sp, #4]
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	4628      	mov	r0, r5
 8014f52:	f7ff ff71 	bl	8014e38 <uxr_common_create_entity>
 8014f56:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8014f5a:	bd70      	pop	{r4, r5, r6, pc}

08014f5c <uxr_buffer_create_publisher_bin>:
 8014f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f5e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8014f62:	4605      	mov	r5, r0
 8014f64:	9105      	str	r1, [sp, #20]
 8014f66:	4618      	mov	r0, r3
 8014f68:	2603      	movs	r6, #3
 8014f6a:	a992      	add	r1, sp, #584	@ 0x248
 8014f6c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8014f70:	9204      	str	r2, [sp, #16]
 8014f72:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8014f76:	f000 f9fd 	bl	8015374 <uxr_object_id_to_raw>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014f80:	a912      	add	r1, sp, #72	@ 0x48
 8014f82:	a806      	add	r0, sp, #24
 8014f84:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014f88:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014f8c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8014f90:	f7f9 fcf8 	bl	800e984 <ucdr_init_buffer>
 8014f94:	a993      	add	r1, sp, #588	@ 0x24c
 8014f96:	a806      	add	r0, sp, #24
 8014f98:	f002 fe60 	bl	8017c5c <uxr_serialize_OBJK_Publisher_Binary>
 8014f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f9e:	9311      	str	r3, [sp, #68]	@ 0x44
 8014fa0:	ac0e      	add	r4, sp, #56	@ 0x38
 8014fa2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014fa6:	9700      	str	r7, [sp, #0]
 8014fa8:	9401      	str	r4, [sp, #4]
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	4628      	mov	r0, r5
 8014fae:	f7ff ff43 	bl	8014e38 <uxr_common_create_entity>
 8014fb2:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8014fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fb8 <uxr_buffer_create_subscriber_bin>:
 8014fb8:	b570      	push	{r4, r5, r6, lr}
 8014fba:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8014fbe:	4605      	mov	r5, r0
 8014fc0:	9105      	str	r1, [sp, #20]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	a992      	add	r1, sp, #584	@ 0x248
 8014fc6:	2304      	movs	r3, #4
 8014fc8:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8014fcc:	9204      	str	r2, [sp, #16]
 8014fce:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8014fd2:	f000 f9cf 	bl	8015374 <uxr_object_id_to_raw>
 8014fd6:	2203      	movs	r2, #3
 8014fd8:	2300      	movs	r3, #0
 8014fda:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 8014fde:	a912      	add	r1, sp, #72	@ 0x48
 8014fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014fe4:	a806      	add	r0, sp, #24
 8014fe6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014fea:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014fee:	f7f9 fcc9 	bl	800e984 <ucdr_init_buffer>
 8014ff2:	a993      	add	r1, sp, #588	@ 0x24c
 8014ff4:	a806      	add	r0, sp, #24
 8014ff6:	f002 fee3 	bl	8017dc0 <uxr_serialize_OBJK_Subscriber_Binary>
 8014ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ffc:	9311      	str	r3, [sp, #68]	@ 0x44
 8014ffe:	ac0e      	add	r4, sp, #56	@ 0x38
 8015000:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015004:	9600      	str	r6, [sp, #0]
 8015006:	9401      	str	r4, [sp, #4]
 8015008:	b29b      	uxth	r3, r3
 801500a:	4628      	mov	r0, r5
 801500c:	f7ff ff14 	bl	8014e38 <uxr_common_create_entity>
 8015010:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8015014:	bd70      	pop	{r4, r5, r6, pc}
 8015016:	bf00      	nop

08015018 <uxr_buffer_create_datawriter_bin>:
 8015018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801501a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801501e:	ac1d      	add	r4, sp, #116	@ 0x74
 8015020:	9105      	str	r1, [sp, #20]
 8015022:	4605      	mov	r5, r0
 8015024:	a9a1      	add	r1, sp, #644	@ 0x284
 8015026:	4618      	mov	r0, r3
 8015028:	2305      	movs	r3, #5
 801502a:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 801502e:	9204      	str	r2, [sp, #16]
 8015030:	7123      	strb	r3, [r4, #4]
 8015032:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8015036:	f000 f99d 	bl	8015374 <uxr_object_id_to_raw>
 801503a:	2303      	movs	r3, #3
 801503c:	a90e      	add	r1, sp, #56	@ 0x38
 801503e:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8015040:	7223      	strb	r3, [r4, #8]
 8015042:	f000 f997 	bl	8015374 <uxr_object_id_to_raw>
 8015046:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 801504a:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 801504e:	2200      	movs	r2, #0
 8015050:	3f00      	subs	r7, #0
 8015052:	fab3 f383 	clz	r3, r3
 8015056:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 801505a:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 801505e:	bf18      	it	ne
 8015060:	2701      	movne	r7, #1
 8015062:	095b      	lsrs	r3, r3, #5
 8015064:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8015068:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 801506c:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8015070:	2201      	movs	r2, #1
 8015072:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8015076:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801507a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 801507e:	b919      	cbnz	r1, 8015088 <uxr_buffer_create_datawriter_bin+0x70>
 8015080:	f043 0302 	orr.w	r3, r3, #2
 8015084:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015088:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 801508c:	2a01      	cmp	r2, #1
 801508e:	d022      	beq.n	80150d6 <uxr_buffer_create_datawriter_bin+0xbe>
 8015090:	2a03      	cmp	r2, #3
 8015092:	d01b      	beq.n	80150cc <uxr_buffer_create_datawriter_bin+0xb4>
 8015094:	b91a      	cbnz	r2, 801509e <uxr_buffer_create_datawriter_bin+0x86>
 8015096:	f043 0308 	orr.w	r3, r3, #8
 801509a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801509e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80150a2:	a921      	add	r1, sp, #132	@ 0x84
 80150a4:	a806      	add	r0, sp, #24
 80150a6:	f7f9 fc6d 	bl	800e984 <ucdr_init_buffer>
 80150aa:	a90e      	add	r1, sp, #56	@ 0x38
 80150ac:	a806      	add	r0, sp, #24
 80150ae:	f002 ff29 	bl	8017f04 <uxr_serialize_OBJK_DataWriter_Binary>
 80150b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80150b4:	9600      	str	r6, [sp, #0]
 80150b6:	9401      	str	r4, [sp, #4]
 80150b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80150bc:	60e3      	str	r3, [r4, #12]
 80150be:	4628      	mov	r0, r5
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	f7ff feb9 	bl	8014e38 <uxr_common_create_entity>
 80150c6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80150ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150cc:	f043 0320 	orr.w	r3, r3, #32
 80150d0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80150d4:	e7e3      	b.n	801509e <uxr_buffer_create_datawriter_bin+0x86>
 80150d6:	f043 0310 	orr.w	r3, r3, #16
 80150da:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80150de:	e7de      	b.n	801509e <uxr_buffer_create_datawriter_bin+0x86>

080150e0 <uxr_buffer_create_datareader_bin>:
 80150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150e2:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 80150e6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80150e8:	9105      	str	r1, [sp, #20]
 80150ea:	4605      	mov	r5, r0
 80150ec:	a9a3      	add	r1, sp, #652	@ 0x28c
 80150ee:	4618      	mov	r0, r3
 80150f0:	2306      	movs	r3, #6
 80150f2:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 80150f6:	9204      	str	r2, [sp, #16]
 80150f8:	7123      	strb	r3, [r4, #4]
 80150fa:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 80150fe:	f000 f939 	bl	8015374 <uxr_object_id_to_raw>
 8015102:	2303      	movs	r3, #3
 8015104:	a90e      	add	r1, sp, #56	@ 0x38
 8015106:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8015108:	7223      	strb	r3, [r4, #8]
 801510a:	f000 f933 	bl	8015374 <uxr_object_id_to_raw>
 801510e:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8015112:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8015116:	2200      	movs	r2, #0
 8015118:	3f00      	subs	r7, #0
 801511a:	fab3 f383 	clz	r3, r3
 801511e:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8015122:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 8015126:	bf18      	it	ne
 8015128:	2701      	movne	r7, #1
 801512a:	095b      	lsrs	r3, r3, #5
 801512c:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8015130:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8015134:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8015138:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 801513c:	2201      	movs	r2, #1
 801513e:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8015142:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015146:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 801514a:	b919      	cbnz	r1, 8015154 <uxr_buffer_create_datareader_bin+0x74>
 801514c:	f043 0302 	orr.w	r3, r3, #2
 8015150:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015154:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 8015158:	2a01      	cmp	r2, #1
 801515a:	d022      	beq.n	80151a2 <uxr_buffer_create_datareader_bin+0xc2>
 801515c:	2a03      	cmp	r2, #3
 801515e:	d01b      	beq.n	8015198 <uxr_buffer_create_datareader_bin+0xb8>
 8015160:	b91a      	cbnz	r2, 801516a <uxr_buffer_create_datareader_bin+0x8a>
 8015162:	f043 0308 	orr.w	r3, r3, #8
 8015166:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801516a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801516e:	a923      	add	r1, sp, #140	@ 0x8c
 8015170:	a806      	add	r0, sp, #24
 8015172:	f7f9 fc07 	bl	800e984 <ucdr_init_buffer>
 8015176:	a90e      	add	r1, sp, #56	@ 0x38
 8015178:	a806      	add	r0, sp, #24
 801517a:	f002 fe87 	bl	8017e8c <uxr_serialize_OBJK_DataReader_Binary>
 801517e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015180:	9600      	str	r6, [sp, #0]
 8015182:	9401      	str	r4, [sp, #4]
 8015184:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015188:	60e3      	str	r3, [r4, #12]
 801518a:	4628      	mov	r0, r5
 801518c:	b29b      	uxth	r3, r3
 801518e:	f7ff fe53 	bl	8014e38 <uxr_common_create_entity>
 8015192:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 8015196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015198:	f043 0320 	orr.w	r3, r3, #32
 801519c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80151a0:	e7e3      	b.n	801516a <uxr_buffer_create_datareader_bin+0x8a>
 80151a2:	f043 0310 	orr.w	r3, r3, #16
 80151a6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80151aa:	e7de      	b.n	801516a <uxr_buffer_create_datareader_bin+0x8a>

080151ac <get_custom_error>:
 80151ac:	4b01      	ldr	r3, [pc, #4]	@ (80151b4 <get_custom_error+0x8>)
 80151ae:	7818      	ldrb	r0, [r3, #0]
 80151b0:	4770      	bx	lr
 80151b2:	bf00      	nop
 80151b4:	2001f5ae 	.word	0x2001f5ae

080151b8 <recv_custom_msg>:
 80151b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151bc:	b089      	sub	sp, #36	@ 0x24
 80151be:	4693      	mov	fp, r2
 80151c0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80151c4:	9104      	str	r1, [sp, #16]
 80151c6:	2100      	movs	r1, #0
 80151c8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80151cc:	9305      	str	r3, [sp, #20]
 80151ce:	4604      	mov	r4, r0
 80151d0:	f88d 101e 	strb.w	r1, [sp, #30]
 80151d4:	b332      	cbz	r2, 8015224 <recv_custom_msg+0x6c>
 80151d6:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 80151da:	f10d 091f 	add.w	r9, sp, #31
 80151de:	f10d 0814 	add.w	r8, sp, #20
 80151e2:	f10d 071e 	add.w	r7, sp, #30
 80151e6:	f44f 7600 	mov.w	r6, #512	@ 0x200
 80151ea:	e004      	b.n	80151f6 <recv_custom_msg+0x3e>
 80151ec:	9b05      	ldr	r3, [sp, #20]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	dd10      	ble.n	8015214 <recv_custom_msg+0x5c>
 80151f2:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 80151f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80151fa:	e9cd 6700 	strd	r6, r7, [sp]
 80151fe:	4623      	mov	r3, r4
 8015200:	4622      	mov	r2, r4
 8015202:	4629      	mov	r1, r5
 8015204:	4650      	mov	r0, sl
 8015206:	f001 fc85 	bl	8016b14 <uxr_read_framed_msg>
 801520a:	2800      	cmp	r0, #0
 801520c:	d0ee      	beq.n	80151ec <recv_custom_msg+0x34>
 801520e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015212:	b1a3      	cbz	r3, 801523e <recv_custom_msg+0x86>
 8015214:	4b0e      	ldr	r3, [pc, #56]	@ (8015250 <recv_custom_msg+0x98>)
 8015216:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801521a:	701a      	strb	r2, [r3, #0]
 801521c:	2000      	movs	r0, #0
 801521e:	b009      	add	sp, #36	@ 0x24
 8015220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015224:	f10d 021f 	add.w	r2, sp, #31
 8015228:	9200      	str	r2, [sp, #0]
 801522a:	4601      	mov	r1, r0
 801522c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015230:	47a8      	blx	r5
 8015232:	2800      	cmp	r0, #0
 8015234:	d0ee      	beq.n	8015214 <recv_custom_msg+0x5c>
 8015236:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d1ea      	bne.n	8015214 <recv_custom_msg+0x5c>
 801523e:	9b04      	ldr	r3, [sp, #16]
 8015240:	f8cb 0000 	str.w	r0, [fp]
 8015244:	2001      	movs	r0, #1
 8015246:	601c      	str	r4, [r3, #0]
 8015248:	b009      	add	sp, #36	@ 0x24
 801524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801524e:	bf00      	nop
 8015250:	2001f5ae 	.word	0x2001f5ae

08015254 <send_custom_msg>:
 8015254:	b570      	push	{r4, r5, r6, lr}
 8015256:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801525a:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801525e:	b086      	sub	sp, #24
 8015260:	4616      	mov	r6, r2
 8015262:	b965      	cbnz	r5, 801527e <send_custom_msg+0x2a>
 8015264:	f10d 0317 	add.w	r3, sp, #23
 8015268:	47a0      	blx	r4
 801526a:	b108      	cbz	r0, 8015270 <send_custom_msg+0x1c>
 801526c:	42b0      	cmp	r0, r6
 801526e:	d014      	beq.n	801529a <send_custom_msg+0x46>
 8015270:	4b0b      	ldr	r3, [pc, #44]	@ (80152a0 <send_custom_msg+0x4c>)
 8015272:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015276:	701a      	strb	r2, [r3, #0]
 8015278:	2000      	movs	r0, #0
 801527a:	b006      	add	sp, #24
 801527c:	bd70      	pop	{r4, r5, r6, pc}
 801527e:	f10d 0217 	add.w	r2, sp, #23
 8015282:	9202      	str	r2, [sp, #8]
 8015284:	2200      	movs	r2, #0
 8015286:	e9cd 6200 	strd	r6, r2, [sp]
 801528a:	460b      	mov	r3, r1
 801528c:	4602      	mov	r2, r0
 801528e:	4621      	mov	r1, r4
 8015290:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8015294:	f001 fa60 	bl	8016758 <uxr_write_framed_msg>
 8015298:	e7e7      	b.n	801526a <send_custom_msg+0x16>
 801529a:	2001      	movs	r0, #1
 801529c:	b006      	add	sp, #24
 801529e:	bd70      	pop	{r4, r5, r6, pc}
 80152a0:	2001f5ae 	.word	0x2001f5ae

080152a4 <uxr_set_custom_transport_callbacks>:
 80152a4:	b410      	push	{r4}
 80152a6:	9c01      	ldr	r4, [sp, #4]
 80152a8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80152ac:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80152b0:	9b02      	ldr	r3, [sp, #8]
 80152b2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80152b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152ba:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80152be:	4770      	bx	lr

080152c0 <uxr_init_custom_transport>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80152c6:	b303      	cbz	r3, 801530a <uxr_init_custom_transport+0x4a>
 80152c8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80152cc:	4604      	mov	r4, r0
 80152ce:	b1e2      	cbz	r2, 801530a <uxr_init_custom_transport+0x4a>
 80152d0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80152d4:	b1ca      	cbz	r2, 801530a <uxr_init_custom_transport+0x4a>
 80152d6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80152da:	b1b2      	cbz	r2, 801530a <uxr_init_custom_transport+0x4a>
 80152dc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80152e0:	4798      	blx	r3
 80152e2:	4605      	mov	r5, r0
 80152e4:	b188      	cbz	r0, 801530a <uxr_init_custom_transport+0x4a>
 80152e6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80152ea:	b98b      	cbnz	r3, 8015310 <uxr_init_custom_transport+0x50>
 80152ec:	490b      	ldr	r1, [pc, #44]	@ (801531c <uxr_init_custom_transport+0x5c>)
 80152ee:	4b0c      	ldr	r3, [pc, #48]	@ (8015320 <uxr_init_custom_transport+0x60>)
 80152f0:	4a0c      	ldr	r2, [pc, #48]	@ (8015324 <uxr_init_custom_transport+0x64>)
 80152f2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80152f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80152fa:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80152fe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8015302:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8015306:	4628      	mov	r0, r5
 8015308:	bd38      	pop	{r3, r4, r5, pc}
 801530a:	2500      	movs	r5, #0
 801530c:	4628      	mov	r0, r5
 801530e:	bd38      	pop	{r3, r4, r5, pc}
 8015310:	2100      	movs	r1, #0
 8015312:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8015316:	f001 fa19 	bl	801674c <uxr_init_framing_io>
 801531a:	e7e7      	b.n	80152ec <uxr_init_custom_transport+0x2c>
 801531c:	08015255 	.word	0x08015255
 8015320:	080151b9 	.word	0x080151b9
 8015324:	080151ad 	.word	0x080151ad

08015328 <uxr_close_custom_transport>:
 8015328:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801532c:	4718      	bx	r3
 801532e:	bf00      	nop

08015330 <uxr_object_id>:
 8015330:	b082      	sub	sp, #8
 8015332:	2300      	movs	r3, #0
 8015334:	f88d 1006 	strb.w	r1, [sp, #6]
 8015338:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801533c:	f360 030f 	bfi	r3, r0, #0, #16
 8015340:	f362 431f 	bfi	r3, r2, #16, #16
 8015344:	4618      	mov	r0, r3
 8015346:	b002      	add	sp, #8
 8015348:	4770      	bx	lr
 801534a:	bf00      	nop

0801534c <uxr_object_id_from_raw>:
 801534c:	7843      	ldrb	r3, [r0, #1]
 801534e:	7801      	ldrb	r1, [r0, #0]
 8015350:	b082      	sub	sp, #8
 8015352:	f003 020f 	and.w	r2, r3, #15
 8015356:	f88d 2006 	strb.w	r2, [sp, #6]
 801535a:	091b      	lsrs	r3, r3, #4
 801535c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015360:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8015364:	2000      	movs	r0, #0
 8015366:	f363 000f 	bfi	r0, r3, #0, #16
 801536a:	f362 401f 	bfi	r0, r2, #16, #16
 801536e:	b002      	add	sp, #8
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop

08015374 <uxr_object_id_to_raw>:
 8015374:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8015378:	b082      	sub	sp, #8
 801537a:	f3c0 120b 	ubfx	r2, r0, #4, #12
 801537e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8015382:	700a      	strb	r2, [r1, #0]
 8015384:	704b      	strb	r3, [r1, #1]
 8015386:	b002      	add	sp, #8
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop

0801538c <uxr_buffer_request_data>:
 801538c:	b530      	push	{r4, r5, lr}
 801538e:	b095      	sub	sp, #84	@ 0x54
 8015390:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015394:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015396:	f88d 301c 	strb.w	r3, [sp, #28]
 801539a:	2200      	movs	r2, #0
 801539c:	2d00      	cmp	r5, #0
 801539e:	bf14      	ite	ne
 80153a0:	2101      	movne	r1, #1
 80153a2:	4611      	moveq	r1, r2
 80153a4:	4604      	mov	r4, r0
 80153a6:	f88d 201d 	strb.w	r2, [sp, #29]
 80153aa:	f88d 201e 	strb.w	r2, [sp, #30]
 80153ae:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80153b2:	d021      	beq.n	80153f8 <uxr_buffer_request_data+0x6c>
 80153b4:	682a      	ldr	r2, [r5, #0]
 80153b6:	686b      	ldr	r3, [r5, #4]
 80153b8:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80153bc:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80153c0:	2210      	movs	r2, #16
 80153c2:	2308      	movs	r3, #8
 80153c4:	2100      	movs	r1, #0
 80153c6:	e9cd 3100 	strd	r3, r1, [sp]
 80153ca:	4620      	mov	r0, r4
 80153cc:	9905      	ldr	r1, [sp, #20]
 80153ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80153d0:	f001 f854 	bl	801647c <uxr_prepare_stream_to_write_submessage>
 80153d4:	b918      	cbnz	r0, 80153de <uxr_buffer_request_data+0x52>
 80153d6:	4604      	mov	r4, r0
 80153d8:	4620      	mov	r0, r4
 80153da:	b015      	add	sp, #84	@ 0x54
 80153dc:	bd30      	pop	{r4, r5, pc}
 80153de:	9904      	ldr	r1, [sp, #16]
 80153e0:	aa06      	add	r2, sp, #24
 80153e2:	4620      	mov	r0, r4
 80153e4:	f001 f984 	bl	80166f0 <uxr_init_base_object_request>
 80153e8:	a906      	add	r1, sp, #24
 80153ea:	4604      	mov	r4, r0
 80153ec:	a80c      	add	r0, sp, #48	@ 0x30
 80153ee:	f003 f8a1 	bl	8018534 <uxr_serialize_READ_DATA_Payload>
 80153f2:	4620      	mov	r0, r4
 80153f4:	b015      	add	sp, #84	@ 0x54
 80153f6:	bd30      	pop	{r4, r5, pc}
 80153f8:	2208      	movs	r2, #8
 80153fa:	e7e2      	b.n	80153c2 <uxr_buffer_request_data+0x36>

080153fc <uxr_buffer_cancel_data>:
 80153fc:	b510      	push	{r4, lr}
 80153fe:	b094      	sub	sp, #80	@ 0x50
 8015400:	2300      	movs	r3, #0
 8015402:	9301      	str	r3, [sp, #4]
 8015404:	9205      	str	r2, [sp, #20]
 8015406:	f8ad 301c 	strh.w	r3, [sp, #28]
 801540a:	2201      	movs	r2, #1
 801540c:	f88d 301e 	strb.w	r3, [sp, #30]
 8015410:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015414:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015418:	2308      	movs	r3, #8
 801541a:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	2210      	movs	r2, #16
 8015422:	ab0c      	add	r3, sp, #48	@ 0x30
 8015424:	4604      	mov	r4, r0
 8015426:	f001 f829 	bl	801647c <uxr_prepare_stream_to_write_submessage>
 801542a:	b918      	cbnz	r0, 8015434 <uxr_buffer_cancel_data+0x38>
 801542c:	4604      	mov	r4, r0
 801542e:	4620      	mov	r0, r4
 8015430:	b014      	add	sp, #80	@ 0x50
 8015432:	bd10      	pop	{r4, pc}
 8015434:	9905      	ldr	r1, [sp, #20]
 8015436:	aa06      	add	r2, sp, #24
 8015438:	4620      	mov	r0, r4
 801543a:	f001 f959 	bl	80166f0 <uxr_init_base_object_request>
 801543e:	a906      	add	r1, sp, #24
 8015440:	4604      	mov	r4, r0
 8015442:	a80c      	add	r0, sp, #48	@ 0x30
 8015444:	f003 f876 	bl	8018534 <uxr_serialize_READ_DATA_Payload>
 8015448:	4620      	mov	r0, r4
 801544a:	b014      	add	sp, #80	@ 0x50
 801544c:	bd10      	pop	{r4, pc}
 801544e:	bf00      	nop

08015450 <read_submessage_format>:
 8015450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015454:	b095      	sub	sp, #84	@ 0x54
 8015456:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801545a:	b113      	cbz	r3, 8015462 <read_submessage_format+0x12>
 801545c:	b015      	add	sp, #84	@ 0x54
 801545e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015462:	460c      	mov	r4, r1
 8015464:	4616      	mov	r6, r2
 8015466:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801546a:	461d      	mov	r5, r3
 801546c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801546e:	9304      	str	r3, [sp, #16]
 8015470:	1a52      	subs	r2, r2, r1
 8015472:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015474:	9305      	str	r3, [sp, #20]
 8015476:	4680      	mov	r8, r0
 8015478:	a80c      	add	r0, sp, #48	@ 0x30
 801547a:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801547e:	f7f9 fa81 	bl	800e984 <ucdr_init_buffer>
 8015482:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015486:	a80c      	add	r0, sp, #48	@ 0x30
 8015488:	f7f9 fa50 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 801548c:	69e3      	ldr	r3, [r4, #28]
 801548e:	b35b      	cbz	r3, 80154e8 <read_submessage_format+0x98>
 8015490:	f1b9 0f07 	cmp.w	r9, #7
 8015494:	751d      	strb	r5, [r3, #20]
 8015496:	d043      	beq.n	8015520 <read_submessage_format+0xd0>
 8015498:	f1b9 0f08 	cmp.w	r9, #8
 801549c:	d032      	beq.n	8015504 <read_submessage_format+0xb4>
 801549e:	f1b9 0f06 	cmp.w	r9, #6
 80154a2:	d008      	beq.n	80154b6 <read_submessage_format+0x66>
 80154a4:	2201      	movs	r2, #1
 80154a6:	751a      	strb	r2, [r3, #20]
 80154a8:	4631      	mov	r1, r6
 80154aa:	4620      	mov	r0, r4
 80154ac:	f7f9 faba 	bl	800ea24 <ucdr_advance_buffer>
 80154b0:	b015      	add	sp, #84	@ 0x54
 80154b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154b6:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80154ba:	2d00      	cmp	r5, #0
 80154bc:	d0f2      	beq.n	80154a4 <read_submessage_format+0x54>
 80154be:	ab0c      	add	r3, sp, #48	@ 0x30
 80154c0:	e9cd 3600 	strd	r3, r6, [sp]
 80154c4:	2306      	movs	r3, #6
 80154c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80154ca:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 80154ce:	9302      	str	r3, [sp, #8]
 80154d0:	463a      	mov	r2, r7
 80154d2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80154d6:	4640      	mov	r0, r8
 80154d8:	47a8      	blx	r5
 80154da:	69e3      	ldr	r3, [r4, #28]
 80154dc:	2201      	movs	r2, #1
 80154de:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d1de      	bne.n	80154a4 <read_submessage_format+0x54>
 80154e6:	e7df      	b.n	80154a8 <read_submessage_format+0x58>
 80154e8:	f1b9 0f07 	cmp.w	r9, #7
 80154ec:	d032      	beq.n	8015554 <read_submessage_format+0x104>
 80154ee:	f1b9 0f08 	cmp.w	r9, #8
 80154f2:	d02a      	beq.n	801554a <read_submessage_format+0xfa>
 80154f4:	f1b9 0f06 	cmp.w	r9, #6
 80154f8:	d1d6      	bne.n	80154a8 <read_submessage_format+0x58>
 80154fa:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80154fe:	2d00      	cmp	r5, #0
 8015500:	d1dd      	bne.n	80154be <read_submessage_format+0x6e>
 8015502:	e7d1      	b.n	80154a8 <read_submessage_format+0x58>
 8015504:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8015508:	2a00      	cmp	r2, #0
 801550a:	d0cb      	beq.n	80154a4 <read_submessage_format+0x54>
 801550c:	a906      	add	r1, sp, #24
 801550e:	a80c      	add	r0, sp, #48	@ 0x30
 8015510:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015512:	f003 f8e3 	bl	80186dc <uxr_deserialize_SampleIdentity>
 8015516:	bb28      	cbnz	r0, 8015564 <read_submessage_format+0x114>
 8015518:	69e3      	ldr	r3, [r4, #28]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1c2      	bne.n	80154a4 <read_submessage_format+0x54>
 801551e:	e7c3      	b.n	80154a8 <read_submessage_format+0x58>
 8015520:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8015524:	b16a      	cbz	r2, 8015542 <read_submessage_format+0xf2>
 8015526:	a906      	add	r1, sp, #24
 8015528:	a80c      	add	r0, sp, #48	@ 0x30
 801552a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801552c:	f002 fdb6 	bl	801809c <uxr_deserialize_BaseObjectRequest>
 8015530:	2800      	cmp	r0, #0
 8015532:	d13a      	bne.n	80155aa <read_submessage_format+0x15a>
 8015534:	68a2      	ldr	r2, [r4, #8]
 8015536:	69e3      	ldr	r3, [r4, #28]
 8015538:	4432      	add	r2, r6
 801553a:	60a2      	str	r2, [r4, #8]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d1b1      	bne.n	80154a4 <read_submessage_format+0x54>
 8015540:	e7b2      	b.n	80154a8 <read_submessage_format+0x58>
 8015542:	68a2      	ldr	r2, [r4, #8]
 8015544:	4432      	add	r2, r6
 8015546:	60a2      	str	r2, [r4, #8]
 8015548:	e7ac      	b.n	80154a4 <read_submessage_format+0x54>
 801554a:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801554e:	2b00      	cmp	r3, #0
 8015550:	d1dc      	bne.n	801550c <read_submessage_format+0xbc>
 8015552:	e7a9      	b.n	80154a8 <read_submessage_format+0x58>
 8015554:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1e4      	bne.n	8015526 <read_submessage_format+0xd6>
 801555c:	68a3      	ldr	r3, [r4, #8]
 801555e:	4433      	add	r3, r6
 8015560:	60a3      	str	r3, [r4, #8]
 8015562:	e7a1      	b.n	80154a8 <read_submessage_format+0x58>
 8015564:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801556a:	1a52      	subs	r2, r2, r1
 801556c:	1aed      	subs	r5, r5, r3
 801556e:	a80c      	add	r0, sp, #48	@ 0x30
 8015570:	f7f9 fa08 	bl	800e984 <ucdr_init_buffer>
 8015574:	4435      	add	r5, r6
 8015576:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801557a:	a80c      	add	r0, sp, #48	@ 0x30
 801557c:	f7f9 f9d6 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 8015580:	b2ad      	uxth	r5, r5
 8015582:	ab0c      	add	r3, sp, #48	@ 0x30
 8015584:	9300      	str	r3, [sp, #0]
 8015586:	9501      	str	r5, [sp, #4]
 8015588:	2108      	movs	r1, #8
 801558a:	f88d 1016 	strb.w	r1, [sp, #22]
 801558e:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8015592:	9102      	str	r1, [sp, #8]
 8015594:	ab06      	add	r3, sp, #24
 8015596:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801559a:	9905      	ldr	r1, [sp, #20]
 801559c:	463a      	mov	r2, r7
 801559e:	4640      	mov	r0, r8
 80155a0:	47a8      	blx	r5
 80155a2:	2301      	movs	r3, #1
 80155a4:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80155a8:	e7b6      	b.n	8015518 <read_submessage_format+0xc8>
 80155aa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80155ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80155b0:	1a52      	subs	r2, r2, r1
 80155b2:	1aed      	subs	r5, r5, r3
 80155b4:	a80c      	add	r0, sp, #48	@ 0x30
 80155b6:	f7f9 f9e5 	bl	800e984 <ucdr_init_buffer>
 80155ba:	4435      	add	r5, r6
 80155bc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80155c0:	a80c      	add	r0, sp, #48	@ 0x30
 80155c2:	f7f9 f9b3 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 80155c6:	b2ad      	uxth	r5, r5
 80155c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80155ca:	9300      	str	r3, [sp, #0]
 80155cc:	9501      	str	r5, [sp, #4]
 80155ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80155d2:	2107      	movs	r1, #7
 80155d4:	f88d 1016 	strb.w	r1, [sp, #22]
 80155d8:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 80155dc:	9102      	str	r1, [sp, #8]
 80155de:	ba5b      	rev16	r3, r3
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 80155e6:	9905      	ldr	r1, [sp, #20]
 80155e8:	463a      	mov	r2, r7
 80155ea:	4640      	mov	r0, r8
 80155ec:	47a8      	blx	r5
 80155ee:	2301      	movs	r3, #1
 80155f0:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80155f4:	e79e      	b.n	8015534 <read_submessage_format+0xe4>
 80155f6:	bf00      	nop

080155f8 <on_get_fragmentation_info>:
 80155f8:	b500      	push	{lr}
 80155fa:	b08b      	sub	sp, #44	@ 0x2c
 80155fc:	4601      	mov	r1, r0
 80155fe:	2204      	movs	r2, #4
 8015600:	a802      	add	r0, sp, #8
 8015602:	f7f9 f9bf 	bl	800e984 <ucdr_init_buffer>
 8015606:	f10d 0305 	add.w	r3, sp, #5
 801560a:	f10d 0206 	add.w	r2, sp, #6
 801560e:	a901      	add	r1, sp, #4
 8015610:	a802      	add	r0, sp, #8
 8015612:	f001 fe37 	bl	8017284 <uxr_read_submessage_header>
 8015616:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801561a:	2b0d      	cmp	r3, #13
 801561c:	d003      	beq.n	8015626 <on_get_fragmentation_info+0x2e>
 801561e:	2000      	movs	r0, #0
 8015620:	b00b      	add	sp, #44	@ 0x2c
 8015622:	f85d fb04 	ldr.w	pc, [sp], #4
 8015626:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801562a:	f013 0f02 	tst.w	r3, #2
 801562e:	bf0c      	ite	eq
 8015630:	2001      	moveq	r0, #1
 8015632:	2002      	movne	r0, #2
 8015634:	b00b      	add	sp, #44	@ 0x2c
 8015636:	f85d fb04 	ldr.w	pc, [sp], #4
 801563a:	bf00      	nop

0801563c <read_submessage_get_info>:
 801563c:	b570      	push	{r4, r5, r6, lr}
 801563e:	2500      	movs	r5, #0
 8015640:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8015644:	4604      	mov	r4, r0
 8015646:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801564a:	460e      	mov	r6, r1
 801564c:	a810      	add	r0, sp, #64	@ 0x40
 801564e:	4629      	mov	r1, r5
 8015650:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8015654:	f008 fd7c 	bl	801e150 <memset>
 8015658:	a903      	add	r1, sp, #12
 801565a:	4630      	mov	r0, r6
 801565c:	f002 feac 	bl	80183b8 <uxr_deserialize_GET_INFO_Payload>
 8015660:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015664:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015668:	4620      	mov	r0, r4
 801566a:	f001 f839 	bl	80166e0 <uxr_session_header_offset>
 801566e:	462b      	mov	r3, r5
 8015670:	9000      	str	r0, [sp, #0]
 8015672:	220c      	movs	r2, #12
 8015674:	a905      	add	r1, sp, #20
 8015676:	a808      	add	r0, sp, #32
 8015678:	f7f9 f972 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801567c:	a910      	add	r1, sp, #64	@ 0x40
 801567e:	a808      	add	r0, sp, #32
 8015680:	f002 ff0c 	bl	801849c <uxr_serialize_INFO_Payload>
 8015684:	9b08      	ldr	r3, [sp, #32]
 8015686:	462a      	mov	r2, r5
 8015688:	4629      	mov	r1, r5
 801568a:	4620      	mov	r0, r4
 801568c:	f000 ffd4 	bl	8016638 <uxr_stamp_session_header>
 8015690:	a808      	add	r0, sp, #32
 8015692:	f7f9 f9a3 	bl	800e9dc <ucdr_buffer_length>
 8015696:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015698:	4602      	mov	r2, r0
 801569a:	a905      	add	r1, sp, #20
 801569c:	e9d3 0400 	ldrd	r0, r4, [r3]
 80156a0:	47a0      	blx	r4
 80156a2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80156a6:	bd70      	pop	{r4, r5, r6, pc}

080156a8 <write_submessage_acknack.isra.0>:
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	b092      	sub	sp, #72	@ 0x48
 80156ac:	4605      	mov	r5, r0
 80156ae:	460e      	mov	r6, r1
 80156b0:	4614      	mov	r4, r2
 80156b2:	f001 f815 	bl	80166e0 <uxr_session_header_offset>
 80156b6:	a905      	add	r1, sp, #20
 80156b8:	9000      	str	r0, [sp, #0]
 80156ba:	2300      	movs	r3, #0
 80156bc:	a80a      	add	r0, sp, #40	@ 0x28
 80156be:	2211      	movs	r2, #17
 80156c0:	f7f9 f94e 	bl	800e960 <ucdr_init_buffer_origin_offset>
 80156c4:	2318      	movs	r3, #24
 80156c6:	fb03 5404 	mla	r4, r3, r4, r5
 80156ca:	2205      	movs	r2, #5
 80156cc:	2300      	movs	r3, #0
 80156ce:	3450      	adds	r4, #80	@ 0x50
 80156d0:	210a      	movs	r1, #10
 80156d2:	a80a      	add	r0, sp, #40	@ 0x28
 80156d4:	f001 fdbc 	bl	8017250 <uxr_buffer_submessage_header>
 80156d8:	a903      	add	r1, sp, #12
 80156da:	4620      	mov	r0, r4
 80156dc:	f006 ffec 	bl	801c6b8 <uxr_compute_acknack>
 80156e0:	ba40      	rev16	r0, r0
 80156e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80156e6:	a903      	add	r1, sp, #12
 80156e8:	a80a      	add	r0, sp, #40	@ 0x28
 80156ea:	f88d 6010 	strb.w	r6, [sp, #16]
 80156ee:	f002 ff45 	bl	801857c <uxr_serialize_ACKNACK_Payload>
 80156f2:	2200      	movs	r2, #0
 80156f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156f6:	4611      	mov	r1, r2
 80156f8:	4628      	mov	r0, r5
 80156fa:	f000 ff9d 	bl	8016638 <uxr_stamp_session_header>
 80156fe:	a80a      	add	r0, sp, #40	@ 0x28
 8015700:	f7f9 f96c 	bl	800e9dc <ucdr_buffer_length>
 8015704:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8015706:	4602      	mov	r2, r0
 8015708:	a905      	add	r1, sp, #20
 801570a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801570e:	47a0      	blx	r4
 8015710:	b012      	add	sp, #72	@ 0x48
 8015712:	bd70      	pop	{r4, r5, r6, pc}
 8015714:	0000      	movs	r0, r0
	...

08015718 <uxr_init_session>:
 8015718:	b510      	push	{r4, lr}
 801571a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015750 <uxr_init_session+0x38>
 801571e:	2300      	movs	r3, #0
 8015720:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8015724:	4604      	mov	r4, r0
 8015726:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801572a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801572e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8015732:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8015736:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801573a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801573e:	2181      	movs	r1, #129	@ 0x81
 8015740:	f000 fede 	bl	8016500 <uxr_init_session_info>
 8015744:	f104 0008 	add.w	r0, r4, #8
 8015748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801574c:	f001 bc9c 	b.w	8017088 <uxr_init_stream_storage>
	...

08015758 <uxr_set_status_callback>:
 8015758:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801575c:	4770      	bx	lr
 801575e:	bf00      	nop

08015760 <uxr_set_topic_callback>:
 8015760:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop

08015768 <uxr_set_request_callback>:
 8015768:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop

08015770 <uxr_set_reply_callback>:
 8015770:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8015774:	4770      	bx	lr
 8015776:	bf00      	nop

08015778 <uxr_create_output_best_effort_stream>:
 8015778:	b570      	push	{r4, r5, r6, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	4604      	mov	r4, r0
 801577e:	460d      	mov	r5, r1
 8015780:	4616      	mov	r6, r2
 8015782:	f000 ffad 	bl	80166e0 <uxr_session_header_offset>
 8015786:	4632      	mov	r2, r6
 8015788:	4603      	mov	r3, r0
 801578a:	4629      	mov	r1, r5
 801578c:	f104 0008 	add.w	r0, r4, #8
 8015790:	b002      	add	sp, #8
 8015792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015796:	f001 bcc1 	b.w	801711c <uxr_add_output_best_effort_buffer>
 801579a:	bf00      	nop

0801579c <uxr_create_output_reliable_stream>:
 801579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801579e:	b085      	sub	sp, #20
 80157a0:	4604      	mov	r4, r0
 80157a2:	460d      	mov	r5, r1
 80157a4:	4616      	mov	r6, r2
 80157a6:	461f      	mov	r7, r3
 80157a8:	f000 ff9a 	bl	80166e0 <uxr_session_header_offset>
 80157ac:	463b      	mov	r3, r7
 80157ae:	9000      	str	r0, [sp, #0]
 80157b0:	4632      	mov	r2, r6
 80157b2:	4629      	mov	r1, r5
 80157b4:	f104 0008 	add.w	r0, r4, #8
 80157b8:	f001 fcc4 	bl	8017144 <uxr_add_output_reliable_buffer>
 80157bc:	b005      	add	sp, #20
 80157be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157c0 <uxr_create_input_best_effort_stream>:
 80157c0:	b082      	sub	sp, #8
 80157c2:	3008      	adds	r0, #8
 80157c4:	b002      	add	sp, #8
 80157c6:	f001 bcd7 	b.w	8017178 <uxr_add_input_best_effort_buffer>
 80157ca:	bf00      	nop

080157cc <uxr_create_input_reliable_stream>:
 80157cc:	b510      	push	{r4, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	4c03      	ldr	r4, [pc, #12]	@ (80157e0 <uxr_create_input_reliable_stream+0x14>)
 80157d2:	9400      	str	r4, [sp, #0]
 80157d4:	3008      	adds	r0, #8
 80157d6:	f001 fce5 	bl	80171a4 <uxr_add_input_reliable_buffer>
 80157da:	b004      	add	sp, #16
 80157dc:	bd10      	pop	{r4, pc}
 80157de:	bf00      	nop
 80157e0:	080155f9 	.word	0x080155f9

080157e4 <uxr_epoch_nanos>:
 80157e4:	b510      	push	{r4, lr}
 80157e6:	4604      	mov	r4, r0
 80157e8:	f001 fd92 	bl	8017310 <uxr_nanos>
 80157ec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80157f0:	1ac0      	subs	r0, r0, r3
 80157f2:	eb61 0102 	sbc.w	r1, r1, r2
 80157f6:	bd10      	pop	{r4, pc}

080157f8 <uxr_flash_output_streams>:
 80157f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157fc:	7e03      	ldrb	r3, [r0, #24]
 80157fe:	b084      	sub	sp, #16
 8015800:	4604      	mov	r4, r0
 8015802:	b373      	cbz	r3, 8015862 <uxr_flash_output_streams+0x6a>
 8015804:	2500      	movs	r5, #0
 8015806:	f100 0908 	add.w	r9, r0, #8
 801580a:	f10d 0802 	add.w	r8, sp, #2
 801580e:	4628      	mov	r0, r5
 8015810:	af03      	add	r7, sp, #12
 8015812:	ae02      	add	r6, sp, #8
 8015814:	e006      	b.n	8015824 <uxr_flash_output_streams+0x2c>
 8015816:	7e23      	ldrb	r3, [r4, #24]
 8015818:	3501      	adds	r5, #1
 801581a:	b2e8      	uxtb	r0, r5
 801581c:	4283      	cmp	r3, r0
 801581e:	f109 0910 	add.w	r9, r9, #16
 8015822:	d91e      	bls.n	8015862 <uxr_flash_output_streams+0x6a>
 8015824:	2201      	movs	r2, #1
 8015826:	4611      	mov	r1, r2
 8015828:	f001 fbf6 	bl	8017018 <uxr_stream_id>
 801582c:	4643      	mov	r3, r8
 801582e:	4684      	mov	ip, r0
 8015830:	463a      	mov	r2, r7
 8015832:	4631      	mov	r1, r6
 8015834:	4648      	mov	r0, r9
 8015836:	f8cd c004 	str.w	ip, [sp, #4]
 801583a:	f006 ffc1 	bl	801c7c0 <uxr_prepare_best_effort_buffer_to_send>
 801583e:	2800      	cmp	r0, #0
 8015840:	d0e9      	beq.n	8015816 <uxr_flash_output_streams+0x1e>
 8015842:	9b02      	ldr	r3, [sp, #8]
 8015844:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015848:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801584c:	4620      	mov	r0, r4
 801584e:	f000 fef3 	bl	8016638 <uxr_stamp_session_header>
 8015852:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015854:	9a03      	ldr	r2, [sp, #12]
 8015856:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801585a:	9902      	ldr	r1, [sp, #8]
 801585c:	6818      	ldr	r0, [r3, #0]
 801585e:	47d0      	blx	sl
 8015860:	e7d9      	b.n	8015816 <uxr_flash_output_streams+0x1e>
 8015862:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015866:	b37b      	cbz	r3, 80158c8 <uxr_flash_output_streams+0xd0>
 8015868:	f04f 0900 	mov.w	r9, #0
 801586c:	f104 0520 	add.w	r5, r4, #32
 8015870:	f10d 0802 	add.w	r8, sp, #2
 8015874:	af03      	add	r7, sp, #12
 8015876:	ae02      	add	r6, sp, #8
 8015878:	4648      	mov	r0, r9
 801587a:	2201      	movs	r2, #1
 801587c:	2102      	movs	r1, #2
 801587e:	f001 fbcb 	bl	8017018 <uxr_stream_id>
 8015882:	9001      	str	r0, [sp, #4]
 8015884:	e00e      	b.n	80158a4 <uxr_flash_output_streams+0xac>
 8015886:	9b02      	ldr	r3, [sp, #8]
 8015888:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801588c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015890:	4620      	mov	r0, r4
 8015892:	f000 fed1 	bl	8016638 <uxr_stamp_session_header>
 8015896:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015898:	9a03      	ldr	r2, [sp, #12]
 801589a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801589e:	9902      	ldr	r1, [sp, #8]
 80158a0:	6818      	ldr	r0, [r3, #0]
 80158a2:	47d0      	blx	sl
 80158a4:	4643      	mov	r3, r8
 80158a6:	463a      	mov	r2, r7
 80158a8:	4631      	mov	r1, r6
 80158aa:	4628      	mov	r0, r5
 80158ac:	f007 f99c 	bl	801cbe8 <uxr_prepare_next_reliable_buffer_to_send>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d1e8      	bne.n	8015886 <uxr_flash_output_streams+0x8e>
 80158b4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80158b8:	f109 0901 	add.w	r9, r9, #1
 80158bc:	fa5f f089 	uxtb.w	r0, r9
 80158c0:	4283      	cmp	r3, r0
 80158c2:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80158c6:	d8d8      	bhi.n	801587a <uxr_flash_output_streams+0x82>
 80158c8:	b004      	add	sp, #16
 80158ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ce:	bf00      	nop

080158d0 <read_submessage_info>:
 80158d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d4:	460d      	mov	r5, r1
 80158d6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80158da:	4669      	mov	r1, sp
 80158dc:	4607      	mov	r7, r0
 80158de:	4628      	mov	r0, r5
 80158e0:	f002 fc7a 	bl	80181d8 <uxr_deserialize_BaseObjectReply>
 80158e4:	a902      	add	r1, sp, #8
 80158e6:	4604      	mov	r4, r0
 80158e8:	4628      	mov	r0, r5
 80158ea:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80158ee:	f7fe f801 	bl	80138f4 <ucdr_deserialize_bool>
 80158f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80158f6:	4004      	ands	r4, r0
 80158f8:	b2e4      	uxtb	r4, r4
 80158fa:	b95b      	cbnz	r3, 8015914 <read_submessage_info+0x44>
 80158fc:	a987      	add	r1, sp, #540	@ 0x21c
 80158fe:	4628      	mov	r0, r5
 8015900:	f7fd fff8 	bl	80138f4 <ucdr_deserialize_bool>
 8015904:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8015908:	4606      	mov	r6, r0
 801590a:	b94b      	cbnz	r3, 8015920 <read_submessage_info+0x50>
 801590c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015914:	a903      	add	r1, sp, #12
 8015916:	4628      	mov	r0, r5
 8015918:	f002 fb20 	bl	8017f5c <uxr_deserialize_ObjectVariant>
 801591c:	4004      	ands	r4, r0
 801591e:	e7ed      	b.n	80158fc <read_submessage_info+0x2c>
 8015920:	a988      	add	r1, sp, #544	@ 0x220
 8015922:	4628      	mov	r0, r5
 8015924:	f7fe f814 	bl	8013950 <ucdr_deserialize_uint8_t>
 8015928:	4234      	tst	r4, r6
 801592a:	d0ef      	beq.n	801590c <read_submessage_info+0x3c>
 801592c:	2800      	cmp	r0, #0
 801592e:	d0ed      	beq.n	801590c <read_submessage_info+0x3c>
 8015930:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8015934:	2b0d      	cmp	r3, #13
 8015936:	d1e9      	bne.n	801590c <read_submessage_info+0x3c>
 8015938:	a98a      	add	r1, sp, #552	@ 0x228
 801593a:	4628      	mov	r0, r5
 801593c:	f7fe fda4 	bl	8014488 <ucdr_deserialize_int16_t>
 8015940:	b140      	cbz	r0, 8015954 <read_submessage_info+0x84>
 8015942:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8015946:	2b00      	cmp	r3, #0
 8015948:	dd07      	ble.n	801595a <read_submessage_info+0x8a>
 801594a:	f1b8 0f00 	cmp.w	r8, #0
 801594e:	bf0c      	ite	eq
 8015950:	2002      	moveq	r0, #2
 8015952:	2001      	movne	r0, #1
 8015954:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8015958:	e7d8      	b.n	801590c <read_submessage_info+0x3c>
 801595a:	2000      	movs	r0, #0
 801595c:	e7fa      	b.n	8015954 <read_submessage_info+0x84>
 801595e:	bf00      	nop

08015960 <read_submessage_list>:
 8015960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015964:	b097      	sub	sp, #92	@ 0x5c
 8015966:	4604      	mov	r4, r0
 8015968:	460d      	mov	r5, r1
 801596a:	9209      	str	r2, [sp, #36]	@ 0x24
 801596c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8015970:	aa0c      	add	r2, sp, #48	@ 0x30
 8015972:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8015976:	4628      	mov	r0, r5
 8015978:	f001 fc84 	bl	8017284 <uxr_read_submessage_header>
 801597c:	2800      	cmp	r0, #0
 801597e:	f000 812c 	beq.w	8015bda <read_submessage_list+0x27a>
 8015982:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8015986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015988:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 801598c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8015990:	3902      	subs	r1, #2
 8015992:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015996:	290d      	cmp	r1, #13
 8015998:	d8e8      	bhi.n	801596c <read_submessage_list+0xc>
 801599a:	a201      	add	r2, pc, #4	@ (adr r2, 80159a0 <read_submessage_list+0x40>)
 801599c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80159a0:	08015bd1 	.word	0x08015bd1
 80159a4:	0801596d 	.word	0x0801596d
 80159a8:	08015bc1 	.word	0x08015bc1
 80159ac:	08015b63 	.word	0x08015b63
 80159b0:	08015b59 	.word	0x08015b59
 80159b4:	0801596d 	.word	0x0801596d
 80159b8:	0801596d 	.word	0x0801596d
 80159bc:	08015add 	.word	0x08015add
 80159c0:	08015a75 	.word	0x08015a75
 80159c4:	08015a35 	.word	0x08015a35
 80159c8:	0801596d 	.word	0x0801596d
 80159cc:	0801596d 	.word	0x0801596d
 80159d0:	0801596d 	.word	0x0801596d
 80159d4:	080159d9 	.word	0x080159d9
 80159d8:	a910      	add	r1, sp, #64	@ 0x40
 80159da:	4628      	mov	r0, r5
 80159dc:	f002 fe2c 	bl	8018638 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80159e0:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80159e4:	2e00      	cmp	r6, #0
 80159e6:	f000 8100 	beq.w	8015bea <read_submessage_list+0x28a>
 80159ea:	f001 fc91 	bl	8017310 <uxr_nanos>
 80159ee:	f04f 0800 	mov.w	r8, #0
 80159f2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80159f4:	4602      	mov	r2, r0
 80159f6:	460b      	mov	r3, r1
 80159f8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80159fa:	4990      	ldr	r1, [pc, #576]	@ (8015c3c <read_submessage_list+0x2dc>)
 80159fc:	46c4      	mov	ip, r8
 80159fe:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8015a02:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8015a06:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015a08:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015a0a:	46c6      	mov	lr, r8
 8015a0c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8015a10:	46bc      	mov	ip, r7
 8015a12:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8015a16:	fbc0 7801 	smlal	r7, r8, r0, r1
 8015a1a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8015a1e:	e9cd 7800 	strd	r7, r8, [sp]
 8015a22:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8015a26:	9106      	str	r1, [sp, #24]
 8015a28:	4620      	mov	r0, r4
 8015a2a:	47b0      	blx	r6
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8015a32:	e79b      	b.n	801596c <read_submessage_list+0xc>
 8015a34:	a910      	add	r1, sp, #64	@ 0x40
 8015a36:	4628      	mov	r0, r5
 8015a38:	f002 fdde 	bl	80185f8 <uxr_deserialize_HEARTBEAT_Payload>
 8015a3c:	2100      	movs	r1, #0
 8015a3e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015a42:	f001 fb05 	bl	8017050 <uxr_stream_id_from_raw>
 8015a46:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015a4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015a4c:	4631      	mov	r1, r6
 8015a4e:	f104 0008 	add.w	r0, r4, #8
 8015a52:	f001 fbdd 	bl	8017210 <uxr_get_input_reliable_stream>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d088      	beq.n	801596c <read_submessage_list+0xc>
 8015a5a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8015a5e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8015a62:	f006 fe1d 	bl	801c6a0 <uxr_process_heartbeat>
 8015a66:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8015a6a:	4632      	mov	r2, r6
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	f7ff fe1b 	bl	80156a8 <write_submessage_acknack.isra.0>
 8015a72:	e77b      	b.n	801596c <read_submessage_list+0xc>
 8015a74:	a910      	add	r1, sp, #64	@ 0x40
 8015a76:	4628      	mov	r0, r5
 8015a78:	f002 fd96 	bl	80185a8 <uxr_deserialize_ACKNACK_Payload>
 8015a7c:	2100      	movs	r1, #0
 8015a7e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8015a82:	f001 fae5 	bl	8017050 <uxr_stream_id_from_raw>
 8015a86:	900d      	str	r0, [sp, #52]	@ 0x34
 8015a88:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8015a8c:	f104 0008 	add.w	r0, r4, #8
 8015a90:	f001 fbaa 	bl	80171e8 <uxr_get_output_reliable_stream>
 8015a94:	4606      	mov	r6, r0
 8015a96:	2800      	cmp	r0, #0
 8015a98:	f43f af68 	beq.w	801596c <read_submessage_list+0xc>
 8015a9c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8015aa0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015aa4:	ba49      	rev16	r1, r1
 8015aa6:	b289      	uxth	r1, r1
 8015aa8:	f007 f948 	bl	801cd3c <uxr_process_acknack>
 8015aac:	4630      	mov	r0, r6
 8015aae:	f007 f909 	bl	801ccc4 <uxr_begin_output_nack_buffer_it>
 8015ab2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015ab6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8015aba:	e005      	b.n	8015ac8 <read_submessage_list+0x168>
 8015abc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015abe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015ac0:	685f      	ldr	r7, [r3, #4]
 8015ac2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015ac4:	6818      	ldr	r0, [r3, #0]
 8015ac6:	47b8      	blx	r7
 8015ac8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8015acc:	aa0f      	add	r2, sp, #60	@ 0x3c
 8015ace:	4641      	mov	r1, r8
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	f007 f8f9 	bl	801ccc8 <uxr_next_reliable_nack_buffer_to_send>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d1f0      	bne.n	8015abc <read_submessage_list+0x15c>
 8015ada:	e747      	b.n	801596c <read_submessage_list+0xc>
 8015adc:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015ae0:	4641      	mov	r1, r8
 8015ae2:	900d      	str	r0, [sp, #52]	@ 0x34
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	f002 fad9 	bl	801809c <uxr_deserialize_BaseObjectRequest>
 8015aea:	3e04      	subs	r6, #4
 8015aec:	4640      	mov	r0, r8
 8015aee:	a90f      	add	r1, sp, #60	@ 0x3c
 8015af0:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8015af4:	f000 fe1a 	bl	801672c <uxr_parse_base_object_request>
 8015af8:	fa1f f886 	uxth.w	r8, r6
 8015afc:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8015b00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015b02:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8015b06:	9110      	str	r1, [sp, #64]	@ 0x40
 8015b08:	f007 070e 	and.w	r7, r7, #14
 8015b0c:	b136      	cbz	r6, 8015b1c <read_submessage_list+0x1bc>
 8015b0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015b12:	9300      	str	r3, [sp, #0]
 8015b14:	464a      	mov	r2, r9
 8015b16:	2300      	movs	r3, #0
 8015b18:	4620      	mov	r0, r4
 8015b1a:	47b0      	blx	r6
 8015b1c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8015b1e:	b16b      	cbz	r3, 8015b3c <read_submessage_list+0x1dc>
 8015b20:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015b22:	2100      	movs	r1, #0
 8015b24:	3802      	subs	r0, #2
 8015b26:	e002      	b.n	8015b2e <read_submessage_list+0x1ce>
 8015b28:	3101      	adds	r1, #1
 8015b2a:	428b      	cmp	r3, r1
 8015b2c:	d006      	beq.n	8015b3c <read_submessage_list+0x1dc>
 8015b2e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8015b32:	454e      	cmp	r6, r9
 8015b34:	d1f8      	bne.n	8015b28 <read_submessage_list+0x1c8>
 8015b36:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015b38:	2200      	movs	r2, #0
 8015b3a:	545a      	strb	r2, [r3, r1]
 8015b3c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8015b40:	9102      	str	r1, [sp, #8]
 8015b42:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015b44:	9101      	str	r1, [sp, #4]
 8015b46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015b48:	9100      	str	r1, [sp, #0]
 8015b4a:	463b      	mov	r3, r7
 8015b4c:	4642      	mov	r2, r8
 8015b4e:	4629      	mov	r1, r5
 8015b50:	4620      	mov	r0, r4
 8015b52:	f7ff fc7d 	bl	8015450 <read_submessage_format>
 8015b56:	e709      	b.n	801596c <read_submessage_list+0xc>
 8015b58:	4629      	mov	r1, r5
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	f7ff feb8 	bl	80158d0 <read_submessage_info>
 8015b60:	e704      	b.n	801596c <read_submessage_list+0xc>
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d03c      	beq.n	8015be0 <read_submessage_list+0x280>
 8015b66:	a910      	add	r1, sp, #64	@ 0x40
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f002 fc79 	bl	8018460 <uxr_deserialize_STATUS_Payload>
 8015b6e:	a90e      	add	r1, sp, #56	@ 0x38
 8015b70:	a810      	add	r0, sp, #64	@ 0x40
 8015b72:	aa0d      	add	r2, sp, #52	@ 0x34
 8015b74:	f000 fdda 	bl	801672c <uxr_parse_base_object_request>
 8015b78:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8015b7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015b7e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8015b82:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8015b86:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015b88:	b136      	cbz	r6, 8015b98 <read_submessage_list+0x238>
 8015b8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	463a      	mov	r2, r7
 8015b92:	4643      	mov	r3, r8
 8015b94:	4620      	mov	r0, r4
 8015b96:	47b0      	blx	r6
 8015b98:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8015b9a:	2a00      	cmp	r2, #0
 8015b9c:	f43f aee6 	beq.w	801596c <read_submessage_list+0xc>
 8015ba0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015ba2:	2100      	movs	r1, #0
 8015ba4:	3802      	subs	r0, #2
 8015ba6:	e003      	b.n	8015bb0 <read_submessage_list+0x250>
 8015ba8:	3101      	adds	r1, #1
 8015baa:	4291      	cmp	r1, r2
 8015bac:	f43f aede 	beq.w	801596c <read_submessage_list+0xc>
 8015bb0:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8015bb4:	42be      	cmp	r6, r7
 8015bb6:	d1f7      	bne.n	8015ba8 <read_submessage_list+0x248>
 8015bb8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8015bba:	f803 8001 	strb.w	r8, [r3, r1]
 8015bbe:	e6d5      	b.n	801596c <read_submessage_list+0xc>
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	f47f aed3 	bne.w	801596c <read_submessage_list+0xc>
 8015bc6:	4629      	mov	r1, r5
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f000 fcf7 	bl	80165bc <uxr_read_create_session_status>
 8015bce:	e6cd      	b.n	801596c <read_submessage_list+0xc>
 8015bd0:	4629      	mov	r1, r5
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ff fd32 	bl	801563c <read_submessage_get_info>
 8015bd8:	e6c8      	b.n	801596c <read_submessage_list+0xc>
 8015bda:	b017      	add	sp, #92	@ 0x5c
 8015bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015be0:	4629      	mov	r1, r5
 8015be2:	4620      	mov	r0, r4
 8015be4:	f000 fcf8 	bl	80165d8 <uxr_read_delete_session_status>
 8015be8:	e6c0      	b.n	801596c <read_submessage_list+0xc>
 8015bea:	f001 fb91 	bl	8017310 <uxr_nanos>
 8015bee:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8015bf2:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8015c3c <read_submessage_list+0x2dc>
 8015bf6:	4633      	mov	r3, r6
 8015bf8:	fbc7 230c 	smlal	r2, r3, r7, ip
 8015bfc:	1810      	adds	r0, r2, r0
 8015bfe:	eb43 0301 	adc.w	r3, r3, r1
 8015c02:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8015c06:	46b6      	mov	lr, r6
 8015c08:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 8015c0c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8015c10:	fbc1 760c 	smlal	r7, r6, r1, ip
 8015c14:	19d2      	adds	r2, r2, r7
 8015c16:	eb4e 0106 	adc.w	r1, lr, r6
 8015c1a:	1a80      	subs	r0, r0, r2
 8015c1c:	eb63 0301 	sbc.w	r3, r3, r1
 8015c20:	0fda      	lsrs	r2, r3, #31
 8015c22:	1812      	adds	r2, r2, r0
 8015c24:	f143 0300 	adc.w	r3, r3, #0
 8015c28:	0852      	lsrs	r2, r2, #1
 8015c2a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8015c2e:	105b      	asrs	r3, r3, #1
 8015c30:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8015c34:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8015c38:	e6f8      	b.n	8015a2c <read_submessage_list+0xcc>
 8015c3a:	bf00      	nop
 8015c3c:	3b9aca00 	.word	0x3b9aca00

08015c40 <listen_message_reliably>:
 8015c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c44:	f1b1 0b00 	subs.w	fp, r1, #0
 8015c48:	b09f      	sub	sp, #124	@ 0x7c
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	bfb8      	it	lt
 8015c4e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8015c52:	f001 fb43 	bl	80172dc <uxr_millis>
 8015c56:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015c5a:	9003      	str	r0, [sp, #12]
 8015c5c:	9104      	str	r1, [sp, #16]
 8015c5e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8015c62:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	f000 80a4 	beq.w	8015db4 <listen_message_reliably+0x174>
 8015c6c:	2500      	movs	r5, #0
 8015c6e:	e9cd b806 	strd	fp, r8, [sp, #24]
 8015c72:	f106 0420 	add.w	r4, r6, #32
 8015c76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015c7a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8015c7e:	4628      	mov	r0, r5
 8015c80:	e011      	b.n	8015ca6 <listen_message_reliably+0x66>
 8015c82:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015c86:	42ba      	cmp	r2, r7
 8015c88:	eb73 0109 	sbcs.w	r1, r3, r9
 8015c8c:	bfb8      	it	lt
 8015c8e:	4699      	movlt	r9, r3
 8015c90:	f105 0501 	add.w	r5, r5, #1
 8015c94:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015c98:	b2e8      	uxtb	r0, r5
 8015c9a:	bfb8      	it	lt
 8015c9c:	4617      	movlt	r7, r2
 8015c9e:	4283      	cmp	r3, r0
 8015ca0:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8015ca4:	d94a      	bls.n	8015d3c <listen_message_reliably+0xfc>
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	2102      	movs	r1, #2
 8015caa:	f001 f9b5 	bl	8017018 <uxr_stream_id>
 8015cae:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015cb2:	4601      	mov	r1, r0
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015cb8:	f006 ffd4 	bl	801cc64 <uxr_update_output_stream_heartbeat_timestamp>
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	d0e0      	beq.n	8015c82 <listen_message_reliably+0x42>
 8015cc0:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8015cc4:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8015cc8:	9305      	str	r3, [sp, #20]
 8015cca:	4630      	mov	r0, r6
 8015ccc:	f000 fd08 	bl	80166e0 <uxr_session_header_offset>
 8015cd0:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8015cd4:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8015cd8:	9000      	str	r0, [sp, #0]
 8015cda:	a90e      	add	r1, sp, #56	@ 0x38
 8015cdc:	4640      	mov	r0, r8
 8015cde:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	2211      	movs	r2, #17
 8015ce6:	f7f8 fe3b 	bl	800e960 <ucdr_init_buffer_origin_offset>
 8015cea:	2300      	movs	r3, #0
 8015cec:	2205      	movs	r2, #5
 8015cee:	210b      	movs	r1, #11
 8015cf0:	4640      	mov	r0, r8
 8015cf2:	f001 faad 	bl	8017250 <uxr_buffer_submessage_header>
 8015cf6:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8015cfa:	2101      	movs	r1, #1
 8015cfc:	f007 f874 	bl	801cde8 <uxr_seq_num_add>
 8015d00:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8015d04:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015d08:	4602      	mov	r2, r0
 8015d0a:	9b05      	ldr	r3, [sp, #20]
 8015d0c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8015d10:	a90c      	add	r1, sp, #48	@ 0x30
 8015d12:	4640      	mov	r0, r8
 8015d14:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8015d18:	f002 fc5a 	bl	80185d0 <uxr_serialize_HEARTBEAT_Payload>
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015d20:	4611      	mov	r1, r2
 8015d22:	4630      	mov	r0, r6
 8015d24:	f000 fc88 	bl	8016638 <uxr_stamp_session_header>
 8015d28:	4640      	mov	r0, r8
 8015d2a:	f7f8 fe57 	bl	800e9dc <ucdr_buffer_length>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8015d32:	a90e      	add	r1, sp, #56	@ 0x38
 8015d34:	e9d0 0300 	ldrd	r0, r3, [r0]
 8015d38:	4798      	blx	r3
 8015d3a:	e7a2      	b.n	8015c82 <listen_message_reliably+0x42>
 8015d3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015d40:	4599      	cmp	r9, r3
 8015d42:	bf08      	it	eq
 8015d44:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 8015d48:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8015d4c:	d032      	beq.n	8015db4 <listen_message_reliably+0x174>
 8015d4e:	9b03      	ldr	r3, [sp, #12]
 8015d50:	1aff      	subs	r7, r7, r3
 8015d52:	2f00      	cmp	r7, #0
 8015d54:	bf08      	it	eq
 8015d56:	2701      	moveq	r7, #1
 8015d58:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8015d5a:	455f      	cmp	r7, fp
 8015d5c:	bfa8      	it	ge
 8015d5e:	465f      	movge	r7, fp
 8015d60:	689c      	ldr	r4, [r3, #8]
 8015d62:	6818      	ldr	r0, [r3, #0]
 8015d64:	4642      	mov	r2, r8
 8015d66:	463b      	mov	r3, r7
 8015d68:	4651      	mov	r1, sl
 8015d6a:	47a0      	blx	r4
 8015d6c:	ebab 0b07 	sub.w	fp, fp, r7
 8015d70:	b958      	cbnz	r0, 8015d8a <listen_message_reliably+0x14a>
 8015d72:	f1bb 0f00 	cmp.w	fp, #0
 8015d76:	dd44      	ble.n	8015e02 <listen_message_reliably+0x1c2>
 8015d78:	f001 fab0 	bl	80172dc <uxr_millis>
 8015d7c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d03c      	beq.n	8015dfe <listen_message_reliably+0x1be>
 8015d84:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015d88:	e770      	b.n	8015c6c <listen_message_reliably+0x2c>
 8015d8a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8015d8e:	4604      	mov	r4, r0
 8015d90:	a80e      	add	r0, sp, #56	@ 0x38
 8015d92:	f7f8 fdf7 	bl	800e984 <ucdr_init_buffer>
 8015d96:	2500      	movs	r5, #0
 8015d98:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8015d9c:	aa08      	add	r2, sp, #32
 8015d9e:	a90e      	add	r1, sp, #56	@ 0x38
 8015da0:	4630      	mov	r0, r6
 8015da2:	f88d 5020 	strb.w	r5, [sp, #32]
 8015da6:	f000 fc5d 	bl	8016664 <uxr_read_session_header>
 8015daa:	b928      	cbnz	r0, 8015db8 <listen_message_reliably+0x178>
 8015dac:	4620      	mov	r0, r4
 8015dae:	b01f      	add	sp, #124	@ 0x7c
 8015db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015db4:	465f      	mov	r7, fp
 8015db6:	e7cc      	b.n	8015d52 <listen_message_reliably+0x112>
 8015db8:	4629      	mov	r1, r5
 8015dba:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8015dbe:	f001 f947 	bl	8017050 <uxr_stream_id_from_raw>
 8015dc2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015dc6:	2f01      	cmp	r7, #1
 8015dc8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8015dcc:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8015dd0:	fa5f f880 	uxtb.w	r8, r0
 8015dd4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8015dd8:	d050      	beq.n	8015e7c <listen_message_reliably+0x23c>
 8015dda:	2f02      	cmp	r7, #2
 8015ddc:	d016      	beq.n	8015e0c <listen_message_reliably+0x1cc>
 8015dde:	2f00      	cmp	r7, #0
 8015de0:	d1e4      	bne.n	8015dac <listen_message_reliably+0x16c>
 8015de2:	4639      	mov	r1, r7
 8015de4:	4638      	mov	r0, r7
 8015de6:	f001 f933 	bl	8017050 <uxr_stream_id_from_raw>
 8015dea:	a90e      	add	r1, sp, #56	@ 0x38
 8015dec:	4602      	mov	r2, r0
 8015dee:	4630      	mov	r0, r6
 8015df0:	920c      	str	r2, [sp, #48]	@ 0x30
 8015df2:	f7ff fdb5 	bl	8015960 <read_submessage_list>
 8015df6:	4620      	mov	r0, r4
 8015df8:	b01f      	add	sp, #124	@ 0x7c
 8015dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfe:	465f      	mov	r7, fp
 8015e00:	e7aa      	b.n	8015d58 <listen_message_reliably+0x118>
 8015e02:	4604      	mov	r4, r0
 8015e04:	4620      	mov	r0, r4
 8015e06:	b01f      	add	sp, #124	@ 0x7c
 8015e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	f106 0008 	add.w	r0, r6, #8
 8015e12:	f001 f9fd 	bl	8017210 <uxr_get_input_reliable_stream>
 8015e16:	4681      	mov	r9, r0
 8015e18:	b338      	cbz	r0, 8015e6a <listen_message_reliably+0x22a>
 8015e1a:	a80e      	add	r0, sp, #56	@ 0x38
 8015e1c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8015e20:	f7f8 fde0 	bl	800e9e4 <ucdr_buffer_remaining>
 8015e24:	4603      	mov	r3, r0
 8015e26:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8015e2a:	9000      	str	r0, [sp, #0]
 8015e2c:	465a      	mov	r2, fp
 8015e2e:	4651      	mov	r1, sl
 8015e30:	4648      	mov	r0, r9
 8015e32:	f006 fb43 	bl	801c4bc <uxr_receive_reliable_message>
 8015e36:	b1c0      	cbz	r0, 8015e6a <listen_message_reliably+0x22a>
 8015e38:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8015e3c:	b393      	cbz	r3, 8015ea4 <listen_message_reliably+0x264>
 8015e3e:	af16      	add	r7, sp, #88	@ 0x58
 8015e40:	f04f 0a02 	mov.w	sl, #2
 8015e44:	e00a      	b.n	8015e5c <listen_message_reliably+0x21c>
 8015e46:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8015e4a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8015e4e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8015e52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015e54:	4639      	mov	r1, r7
 8015e56:	4630      	mov	r0, r6
 8015e58:	f7ff fd82 	bl	8015960 <read_submessage_list>
 8015e5c:	2204      	movs	r2, #4
 8015e5e:	4639      	mov	r1, r7
 8015e60:	4648      	mov	r0, r9
 8015e62:	f006 fba5 	bl	801c5b0 <uxr_next_input_reliable_buffer_available>
 8015e66:	2800      	cmp	r0, #0
 8015e68:	d1ed      	bne.n	8015e46 <listen_message_reliably+0x206>
 8015e6a:	4630      	mov	r0, r6
 8015e6c:	462a      	mov	r2, r5
 8015e6e:	4641      	mov	r1, r8
 8015e70:	f7ff fc1a 	bl	80156a8 <write_submessage_acknack.isra.0>
 8015e74:	4620      	mov	r0, r4
 8015e76:	b01f      	add	sp, #124	@ 0x7c
 8015e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f106 0008 	add.w	r0, r6, #8
 8015e82:	f001 f9bb 	bl	80171fc <uxr_get_input_best_effort_stream>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	d090      	beq.n	8015dac <listen_message_reliably+0x16c>
 8015e8a:	4651      	mov	r1, sl
 8015e8c:	f006 fa86 	bl	801c39c <uxr_receive_best_effort_message>
 8015e90:	2800      	cmp	r0, #0
 8015e92:	d08b      	beq.n	8015dac <listen_message_reliably+0x16c>
 8015e94:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015e98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015e9a:	a90e      	add	r1, sp, #56	@ 0x38
 8015e9c:	4630      	mov	r0, r6
 8015e9e:	f7ff fd5f 	bl	8015960 <read_submessage_list>
 8015ea2:	e783      	b.n	8015dac <listen_message_reliably+0x16c>
 8015ea4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015ea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015eaa:	a90e      	add	r1, sp, #56	@ 0x38
 8015eac:	4630      	mov	r0, r6
 8015eae:	f7ff fd57 	bl	8015960 <read_submessage_list>
 8015eb2:	e7c4      	b.n	8015e3e <listen_message_reliably+0x1fe>

08015eb4 <uxr_run_session_timeout>:
 8015eb4:	b570      	push	{r4, r5, r6, lr}
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	460d      	mov	r5, r1
 8015eba:	f001 fa0f 	bl	80172dc <uxr_millis>
 8015ebe:	4606      	mov	r6, r0
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f7ff fc99 	bl	80157f8 <uxr_flash_output_streams>
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7ff feb9 	bl	8015c40 <listen_message_reliably>
 8015ece:	f001 fa05 	bl	80172dc <uxr_millis>
 8015ed2:	1b81      	subs	r1, r0, r6
 8015ed4:	1a69      	subs	r1, r5, r1
 8015ed6:	2900      	cmp	r1, #0
 8015ed8:	dcf6      	bgt.n	8015ec8 <uxr_run_session_timeout+0x14>
 8015eda:	f104 0008 	add.w	r0, r4, #8
 8015ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ee2:	f001 b99f 	b.w	8017224 <uxr_output_streams_confirmed>
 8015ee6:	bf00      	nop

08015ee8 <uxr_run_session_until_data>:
 8015ee8:	b570      	push	{r4, r5, r6, lr}
 8015eea:	4604      	mov	r4, r0
 8015eec:	460d      	mov	r5, r1
 8015eee:	f001 f9f5 	bl	80172dc <uxr_millis>
 8015ef2:	4606      	mov	r6, r0
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f7ff fc7f 	bl	80157f8 <uxr_flash_output_streams>
 8015efa:	2300      	movs	r3, #0
 8015efc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8015f00:	4629      	mov	r1, r5
 8015f02:	e005      	b.n	8015f10 <uxr_run_session_until_data+0x28>
 8015f04:	f001 f9ea 	bl	80172dc <uxr_millis>
 8015f08:	1b81      	subs	r1, r0, r6
 8015f0a:	1a69      	subs	r1, r5, r1
 8015f0c:	2900      	cmp	r1, #0
 8015f0e:	dd07      	ble.n	8015f20 <uxr_run_session_until_data+0x38>
 8015f10:	4620      	mov	r0, r4
 8015f12:	f7ff fe95 	bl	8015c40 <listen_message_reliably>
 8015f16:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015f1a:	2800      	cmp	r0, #0
 8015f1c:	d0f2      	beq.n	8015f04 <uxr_run_session_until_data+0x1c>
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}
 8015f20:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015f24:	bd70      	pop	{r4, r5, r6, pc}
 8015f26:	bf00      	nop

08015f28 <uxr_run_session_until_confirm_delivery>:
 8015f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f2c:	4606      	mov	r6, r0
 8015f2e:	460d      	mov	r5, r1
 8015f30:	f001 f9d4 	bl	80172dc <uxr_millis>
 8015f34:	4607      	mov	r7, r0
 8015f36:	4630      	mov	r0, r6
 8015f38:	f7ff fc5e 	bl	80157f8 <uxr_flash_output_streams>
 8015f3c:	2d00      	cmp	r5, #0
 8015f3e:	db16      	blt.n	8015f6e <uxr_run_session_until_confirm_delivery+0x46>
 8015f40:	462c      	mov	r4, r5
 8015f42:	f106 0808 	add.w	r8, r6, #8
 8015f46:	e008      	b.n	8015f5a <uxr_run_session_until_confirm_delivery+0x32>
 8015f48:	4621      	mov	r1, r4
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	f7ff fe78 	bl	8015c40 <listen_message_reliably>
 8015f50:	f001 f9c4 	bl	80172dc <uxr_millis>
 8015f54:	1bc1      	subs	r1, r0, r7
 8015f56:	1a6c      	subs	r4, r5, r1
 8015f58:	d404      	bmi.n	8015f64 <uxr_run_session_until_confirm_delivery+0x3c>
 8015f5a:	4640      	mov	r0, r8
 8015f5c:	f001 f962 	bl	8017224 <uxr_output_streams_confirmed>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d0f1      	beq.n	8015f48 <uxr_run_session_until_confirm_delivery+0x20>
 8015f64:	4640      	mov	r0, r8
 8015f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f6a:	f001 b95b 	b.w	8017224 <uxr_output_streams_confirmed>
 8015f6e:	f106 0808 	add.w	r8, r6, #8
 8015f72:	e7f7      	b.n	8015f64 <uxr_run_session_until_confirm_delivery+0x3c>

08015f74 <uxr_run_session_until_all_status>:
 8015f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f78:	9c08      	ldr	r4, [sp, #32]
 8015f7a:	4605      	mov	r5, r0
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	4690      	mov	r8, r2
 8015f80:	461e      	mov	r6, r3
 8015f82:	f7ff fc39 	bl	80157f8 <uxr_flash_output_streams>
 8015f86:	b124      	cbz	r4, 8015f92 <uxr_run_session_until_all_status+0x1e>
 8015f88:	4622      	mov	r2, r4
 8015f8a:	21ff      	movs	r1, #255	@ 0xff
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	f008 f8df 	bl	801e150 <memset>
 8015f92:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8015f96:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8015f98:	f001 f9a0 	bl	80172dc <uxr_millis>
 8015f9c:	4639      	mov	r1, r7
 8015f9e:	4681      	mov	r9, r0
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	f7ff fe4d 	bl	8015c40 <listen_message_reliably>
 8015fa6:	f001 f999 	bl	80172dc <uxr_millis>
 8015faa:	eba0 0109 	sub.w	r1, r0, r9
 8015fae:	1a79      	subs	r1, r7, r1
 8015fb0:	b36c      	cbz	r4, 801600e <uxr_run_session_until_all_status+0x9a>
 8015fb2:	1e70      	subs	r0, r6, #1
 8015fb4:	46c6      	mov	lr, r8
 8015fb6:	1902      	adds	r2, r0, r4
 8015fb8:	4684      	mov	ip, r0
 8015fba:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015fbe:	2bff      	cmp	r3, #255	@ 0xff
 8015fc0:	d007      	beq.n	8015fd2 <uxr_run_session_until_all_status+0x5e>
 8015fc2:	4594      	cmp	ip, r2
 8015fc4:	d00f      	beq.n	8015fe6 <uxr_run_session_until_all_status+0x72>
 8015fc6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015fca:	2bff      	cmp	r3, #255	@ 0xff
 8015fcc:	f10e 0e02 	add.w	lr, lr, #2
 8015fd0:	d1f7      	bne.n	8015fc2 <uxr_run_session_until_all_status+0x4e>
 8015fd2:	4594      	cmp	ip, r2
 8015fd4:	f8be 3000 	ldrh.w	r3, [lr]
 8015fd8:	d014      	beq.n	8016004 <uxr_run_session_until_all_status+0x90>
 8015fda:	f10e 0e02 	add.w	lr, lr, #2
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d0eb      	beq.n	8015fba <uxr_run_session_until_all_status+0x46>
 8015fe2:	2900      	cmp	r1, #0
 8015fe4:	dcdc      	bgt.n	8015fa0 <uxr_run_session_until_all_status+0x2c>
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8015fea:	e001      	b.n	8015ff0 <uxr_run_session_until_all_status+0x7c>
 8015fec:	2b01      	cmp	r3, #1
 8015fee:	d812      	bhi.n	8016016 <uxr_run_session_until_all_status+0xa2>
 8015ff0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015ff4:	4290      	cmp	r0, r2
 8015ff6:	d1f9      	bne.n	8015fec <uxr_run_session_until_all_status+0x78>
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	bf8c      	ite	hi
 8015ffc:	2000      	movhi	r0, #0
 8015ffe:	2001      	movls	r0, #1
 8016000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016004:	2900      	cmp	r1, #0
 8016006:	ddee      	ble.n	8015fe6 <uxr_run_session_until_all_status+0x72>
 8016008:	2b00      	cmp	r3, #0
 801600a:	d1c9      	bne.n	8015fa0 <uxr_run_session_until_all_status+0x2c>
 801600c:	e7eb      	b.n	8015fe6 <uxr_run_session_until_all_status+0x72>
 801600e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8016010:	2001      	movs	r0, #1
 8016012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016016:	2000      	movs	r0, #0
 8016018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801601c:	0000      	movs	r0, r0
	...

08016020 <uxr_sync_session>:
 8016020:	b570      	push	{r4, r5, r6, lr}
 8016022:	b092      	sub	sp, #72	@ 0x48
 8016024:	4604      	mov	r4, r0
 8016026:	460d      	mov	r5, r1
 8016028:	f000 fb5a 	bl	80166e0 <uxr_session_header_offset>
 801602c:	2214      	movs	r2, #20
 801602e:	eb0d 0102 	add.w	r1, sp, r2
 8016032:	9000      	str	r0, [sp, #0]
 8016034:	2300      	movs	r3, #0
 8016036:	a80a      	add	r0, sp, #40	@ 0x28
 8016038:	f7f8 fc92 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801603c:	2300      	movs	r3, #0
 801603e:	2208      	movs	r2, #8
 8016040:	210e      	movs	r1, #14
 8016042:	a80a      	add	r0, sp, #40	@ 0x28
 8016044:	f001 f904 	bl	8017250 <uxr_buffer_submessage_header>
 8016048:	f001 f962 	bl	8017310 <uxr_nanos>
 801604c:	a318      	add	r3, pc, #96	@ (adr r3, 80160b0 <uxr_sync_session+0x90>)
 801604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016052:	f7ea fe09 	bl	8000c68 <__aeabi_ldivmod>
 8016056:	a903      	add	r1, sp, #12
 8016058:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801605c:	a80a      	add	r0, sp, #40	@ 0x28
 801605e:	f002 fadd 	bl	801861c <uxr_serialize_TIMESTAMP_Payload>
 8016062:	2200      	movs	r2, #0
 8016064:	4611      	mov	r1, r2
 8016066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016068:	4620      	mov	r0, r4
 801606a:	f000 fae5 	bl	8016638 <uxr_stamp_session_header>
 801606e:	a80a      	add	r0, sp, #40	@ 0x28
 8016070:	f7f8 fcb4 	bl	800e9dc <ucdr_buffer_length>
 8016074:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016076:	4602      	mov	r2, r0
 8016078:	a905      	add	r1, sp, #20
 801607a:	e9d3 0600 	ldrd	r0, r6, [r3]
 801607e:	47b0      	blx	r6
 8016080:	f001 f92c 	bl	80172dc <uxr_millis>
 8016084:	2300      	movs	r3, #0
 8016086:	4606      	mov	r6, r0
 8016088:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801608c:	4629      	mov	r1, r5
 801608e:	e000      	b.n	8016092 <uxr_sync_session+0x72>
 8016090:	b950      	cbnz	r0, 80160a8 <uxr_sync_session+0x88>
 8016092:	4620      	mov	r0, r4
 8016094:	f7ff fdd4 	bl	8015c40 <listen_message_reliably>
 8016098:	f001 f920 	bl	80172dc <uxr_millis>
 801609c:	1b81      	subs	r1, r0, r6
 801609e:	1a69      	subs	r1, r5, r1
 80160a0:	2900      	cmp	r1, #0
 80160a2:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80160a6:	dcf3      	bgt.n	8016090 <uxr_sync_session+0x70>
 80160a8:	b012      	add	sp, #72	@ 0x48
 80160aa:	bd70      	pop	{r4, r5, r6, pc}
 80160ac:	f3af 8000 	nop.w
 80160b0:	3b9aca00 	.word	0x3b9aca00
 80160b4:	00000000 	.word	0x00000000

080160b8 <wait_session_status>:
 80160b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	4604      	mov	r4, r0
 80160be:	20ff      	movs	r0, #255	@ 0xff
 80160c0:	b09f      	sub	sp, #124	@ 0x7c
 80160c2:	7160      	strb	r0, [r4, #5]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	f000 80bb 	beq.w	8016240 <wait_session_status+0x188>
 80160ca:	4692      	mov	sl, r2
 80160cc:	469b      	mov	fp, r3
 80160ce:	f04f 0800 	mov.w	r8, #0
 80160d2:	9105      	str	r1, [sp, #20]
 80160d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80160d6:	9905      	ldr	r1, [sp, #20]
 80160d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80160dc:	4652      	mov	r2, sl
 80160de:	47a8      	blx	r5
 80160e0:	f001 f8fc 	bl	80172dc <uxr_millis>
 80160e4:	2700      	movs	r7, #0
 80160e6:	4605      	mov	r5, r0
 80160e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80160ec:	e009      	b.n	8016102 <wait_session_status+0x4a>
 80160ee:	f001 f8f5 	bl	80172dc <uxr_millis>
 80160f2:	1b43      	subs	r3, r0, r5
 80160f4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	7962      	ldrb	r2, [r4, #5]
 80160fc:	dd3d      	ble.n	801617a <wait_session_status+0xc2>
 80160fe:	2aff      	cmp	r2, #255	@ 0xff
 8016100:	d13b      	bne.n	801617a <wait_session_status+0xc2>
 8016102:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016104:	a90a      	add	r1, sp, #40	@ 0x28
 8016106:	6896      	ldr	r6, [r2, #8]
 8016108:	6810      	ldr	r0, [r2, #0]
 801610a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801610c:	47b0      	blx	r6
 801610e:	2800      	cmp	r0, #0
 8016110:	d0ed      	beq.n	80160ee <wait_session_status+0x36>
 8016112:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8016116:	a80e      	add	r0, sp, #56	@ 0x38
 8016118:	f7f8 fc34 	bl	800e984 <ucdr_init_buffer>
 801611c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8016120:	aa09      	add	r2, sp, #36	@ 0x24
 8016122:	a90e      	add	r1, sp, #56	@ 0x38
 8016124:	4620      	mov	r0, r4
 8016126:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 801612a:	f000 fa9b 	bl	8016664 <uxr_read_session_header>
 801612e:	2800      	cmp	r0, #0
 8016130:	d0dd      	beq.n	80160ee <wait_session_status+0x36>
 8016132:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8016136:	2100      	movs	r1, #0
 8016138:	f000 ff8a 	bl	8017050 <uxr_stream_id_from_raw>
 801613c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8016140:	9304      	str	r3, [sp, #16]
 8016142:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8016146:	b2c3      	uxtb	r3, r0
 8016148:	f1b9 0f01 	cmp.w	r9, #1
 801614c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8016150:	9303      	str	r3, [sp, #12]
 8016152:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016156:	d05d      	beq.n	8016214 <wait_session_status+0x15c>
 8016158:	f1b9 0f02 	cmp.w	r9, #2
 801615c:	d01a      	beq.n	8016194 <wait_session_status+0xdc>
 801615e:	f1b9 0f00 	cmp.w	r9, #0
 8016162:	d1c4      	bne.n	80160ee <wait_session_status+0x36>
 8016164:	4649      	mov	r1, r9
 8016166:	4648      	mov	r0, r9
 8016168:	f000 ff72 	bl	8017050 <uxr_stream_id_from_raw>
 801616c:	a90e      	add	r1, sp, #56	@ 0x38
 801616e:	4602      	mov	r2, r0
 8016170:	900d      	str	r0, [sp, #52]	@ 0x34
 8016172:	4620      	mov	r0, r4
 8016174:	f7ff fbf4 	bl	8015960 <read_submessage_list>
 8016178:	e7b9      	b.n	80160ee <wait_session_status+0x36>
 801617a:	f108 0801 	add.w	r8, r8, #1
 801617e:	45c3      	cmp	fp, r8
 8016180:	d001      	beq.n	8016186 <wait_session_status+0xce>
 8016182:	2aff      	cmp	r2, #255	@ 0xff
 8016184:	d0a6      	beq.n	80160d4 <wait_session_status+0x1c>
 8016186:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 801618a:	bf18      	it	ne
 801618c:	2001      	movne	r0, #1
 801618e:	b01f      	add	sp, #124	@ 0x7c
 8016190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016194:	4631      	mov	r1, r6
 8016196:	f104 0008 	add.w	r0, r4, #8
 801619a:	f001 f839 	bl	8017210 <uxr_get_input_reliable_stream>
 801619e:	9006      	str	r0, [sp, #24]
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d031      	beq.n	8016208 <wait_session_status+0x150>
 80161a4:	aa0e      	add	r2, sp, #56	@ 0x38
 80161a6:	4610      	mov	r0, r2
 80161a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80161aa:	9207      	str	r2, [sp, #28]
 80161ac:	f7f8 fc1a 	bl	800e9e4 <ucdr_buffer_remaining>
 80161b0:	4603      	mov	r3, r0
 80161b2:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 80161b6:	9000      	str	r0, [sp, #0]
 80161b8:	9a07      	ldr	r2, [sp, #28]
 80161ba:	9904      	ldr	r1, [sp, #16]
 80161bc:	9806      	ldr	r0, [sp, #24]
 80161be:	f006 f97d 	bl	801c4bc <uxr_receive_reliable_message>
 80161c2:	b308      	cbz	r0, 8016208 <wait_session_status+0x150>
 80161c4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d041      	beq.n	8016250 <wait_session_status+0x198>
 80161cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80161d0:	9507      	str	r5, [sp, #28]
 80161d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80161d6:	9d06      	ldr	r5, [sp, #24]
 80161d8:	f04f 0902 	mov.w	r9, #2
 80161dc:	e00a      	b.n	80161f4 <wait_session_status+0x13c>
 80161de:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 80161e2:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 80161e6:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 80161ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161ec:	a916      	add	r1, sp, #88	@ 0x58
 80161ee:	4620      	mov	r0, r4
 80161f0:	f7ff fbb6 	bl	8015960 <read_submessage_list>
 80161f4:	2204      	movs	r2, #4
 80161f6:	a916      	add	r1, sp, #88	@ 0x58
 80161f8:	4628      	mov	r0, r5
 80161fa:	f006 f9d9 	bl	801c5b0 <uxr_next_input_reliable_buffer_available>
 80161fe:	2800      	cmp	r0, #0
 8016200:	d1ed      	bne.n	80161de <wait_session_status+0x126>
 8016202:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016206:	9d07      	ldr	r5, [sp, #28]
 8016208:	9903      	ldr	r1, [sp, #12]
 801620a:	4632      	mov	r2, r6
 801620c:	4620      	mov	r0, r4
 801620e:	f7ff fa4b 	bl	80156a8 <write_submessage_acknack.isra.0>
 8016212:	e76c      	b.n	80160ee <wait_session_status+0x36>
 8016214:	4631      	mov	r1, r6
 8016216:	f104 0008 	add.w	r0, r4, #8
 801621a:	f000 ffef 	bl	80171fc <uxr_get_input_best_effort_stream>
 801621e:	2800      	cmp	r0, #0
 8016220:	f43f af65 	beq.w	80160ee <wait_session_status+0x36>
 8016224:	9904      	ldr	r1, [sp, #16]
 8016226:	f006 f8b9 	bl	801c39c <uxr_receive_best_effort_message>
 801622a:	2800      	cmp	r0, #0
 801622c:	f43f af5f 	beq.w	80160ee <wait_session_status+0x36>
 8016230:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8016234:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016236:	a90e      	add	r1, sp, #56	@ 0x38
 8016238:	4620      	mov	r0, r4
 801623a:	f7ff fb91 	bl	8015960 <read_submessage_list>
 801623e:	e756      	b.n	80160ee <wait_session_status+0x36>
 8016240:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016242:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016246:	47a0      	blx	r4
 8016248:	2001      	movs	r0, #1
 801624a:	b01f      	add	sp, #124	@ 0x7c
 801624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016250:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8016254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016256:	a90e      	add	r1, sp, #56	@ 0x38
 8016258:	4620      	mov	r0, r4
 801625a:	f7ff fb81 	bl	8015960 <read_submessage_list>
 801625e:	e7b5      	b.n	80161cc <wait_session_status+0x114>

08016260 <uxr_delete_session_retries>:
 8016260:	b530      	push	{r4, r5, lr}
 8016262:	b08f      	sub	sp, #60	@ 0x3c
 8016264:	4604      	mov	r4, r0
 8016266:	460d      	mov	r5, r1
 8016268:	f000 fa3a 	bl	80166e0 <uxr_session_header_offset>
 801626c:	2300      	movs	r3, #0
 801626e:	2210      	movs	r2, #16
 8016270:	9000      	str	r0, [sp, #0]
 8016272:	a902      	add	r1, sp, #8
 8016274:	a806      	add	r0, sp, #24
 8016276:	f7f8 fb73 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801627a:	a906      	add	r1, sp, #24
 801627c:	4620      	mov	r0, r4
 801627e:	f000 f981 	bl	8016584 <uxr_buffer_delete_session>
 8016282:	2200      	movs	r2, #0
 8016284:	4611      	mov	r1, r2
 8016286:	9b06      	ldr	r3, [sp, #24]
 8016288:	4620      	mov	r0, r4
 801628a:	f000 f9d5 	bl	8016638 <uxr_stamp_session_header>
 801628e:	a806      	add	r0, sp, #24
 8016290:	f7f8 fba4 	bl	800e9dc <ucdr_buffer_length>
 8016294:	462b      	mov	r3, r5
 8016296:	4602      	mov	r2, r0
 8016298:	a902      	add	r1, sp, #8
 801629a:	4620      	mov	r0, r4
 801629c:	f7ff ff0c 	bl	80160b8 <wait_session_status>
 80162a0:	b118      	cbz	r0, 80162aa <uxr_delete_session_retries+0x4a>
 80162a2:	7960      	ldrb	r0, [r4, #5]
 80162a4:	fab0 f080 	clz	r0, r0
 80162a8:	0940      	lsrs	r0, r0, #5
 80162aa:	b00f      	add	sp, #60	@ 0x3c
 80162ac:	bd30      	pop	{r4, r5, pc}
 80162ae:	bf00      	nop

080162b0 <uxr_create_session>:
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	f100 0308 	add.w	r3, r0, #8
 80162b8:	b0ab      	sub	sp, #172	@ 0xac
 80162ba:	4604      	mov	r4, r0
 80162bc:	4618      	mov	r0, r3
 80162be:	9303      	str	r3, [sp, #12]
 80162c0:	f000 feec 	bl	801709c <uxr_reset_stream_storage>
 80162c4:	4620      	mov	r0, r4
 80162c6:	f000 fa0b 	bl	80166e0 <uxr_session_header_offset>
 80162ca:	2300      	movs	r3, #0
 80162cc:	9000      	str	r0, [sp, #0]
 80162ce:	221c      	movs	r2, #28
 80162d0:	a90b      	add	r1, sp, #44	@ 0x2c
 80162d2:	a812      	add	r0, sp, #72	@ 0x48
 80162d4:	f7f8 fb44 	bl	800e960 <ucdr_init_buffer_origin_offset>
 80162d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80162da:	8a1a      	ldrh	r2, [r3, #16]
 80162dc:	3a04      	subs	r2, #4
 80162de:	b292      	uxth	r2, r2
 80162e0:	a912      	add	r1, sp, #72	@ 0x48
 80162e2:	4620      	mov	r0, r4
 80162e4:	f000 f924 	bl	8016530 <uxr_buffer_create_session>
 80162e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80162ea:	4620      	mov	r0, r4
 80162ec:	f000 f990 	bl	8016610 <uxr_stamp_create_session_header>
 80162f0:	a812      	add	r0, sp, #72	@ 0x48
 80162f2:	f7f8 fb73 	bl	800e9dc <ucdr_buffer_length>
 80162f6:	23ff      	movs	r3, #255	@ 0xff
 80162f8:	4683      	mov	fp, r0
 80162fa:	7163      	strb	r3, [r4, #5]
 80162fc:	f04f 080a 	mov.w	r8, #10
 8016300:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016302:	465a      	mov	r2, fp
 8016304:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016308:	a90b      	add	r1, sp, #44	@ 0x2c
 801630a:	47a8      	blx	r5
 801630c:	f000 ffe6 	bl	80172dc <uxr_millis>
 8016310:	2700      	movs	r7, #0
 8016312:	4605      	mov	r5, r0
 8016314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016318:	e009      	b.n	801632e <uxr_create_session+0x7e>
 801631a:	f000 ffdf 	bl	80172dc <uxr_millis>
 801631e:	1b43      	subs	r3, r0, r5
 8016320:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8016324:	2b00      	cmp	r3, #0
 8016326:	7962      	ldrb	r2, [r4, #5]
 8016328:	dd3d      	ble.n	80163a6 <uxr_create_session+0xf6>
 801632a:	2aff      	cmp	r2, #255	@ 0xff
 801632c:	d13b      	bne.n	80163a6 <uxr_create_session+0xf6>
 801632e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016330:	a907      	add	r1, sp, #28
 8016332:	6896      	ldr	r6, [r2, #8]
 8016334:	6810      	ldr	r0, [r2, #0]
 8016336:	aa08      	add	r2, sp, #32
 8016338:	47b0      	blx	r6
 801633a:	2800      	cmp	r0, #0
 801633c:	d0ed      	beq.n	801631a <uxr_create_session+0x6a>
 801633e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016342:	a81a      	add	r0, sp, #104	@ 0x68
 8016344:	f7f8 fb1e 	bl	800e984 <ucdr_init_buffer>
 8016348:	f10d 031a 	add.w	r3, sp, #26
 801634c:	aa06      	add	r2, sp, #24
 801634e:	a91a      	add	r1, sp, #104	@ 0x68
 8016350:	4620      	mov	r0, r4
 8016352:	f88d 7018 	strb.w	r7, [sp, #24]
 8016356:	f000 f985 	bl	8016664 <uxr_read_session_header>
 801635a:	2800      	cmp	r0, #0
 801635c:	d0dd      	beq.n	801631a <uxr_create_session+0x6a>
 801635e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016362:	2100      	movs	r1, #0
 8016364:	f000 fe74 	bl	8017050 <uxr_stream_id_from_raw>
 8016368:	f3c0 4907 	ubfx	r9, r0, #16, #8
 801636c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8016370:	9302      	str	r3, [sp, #8]
 8016372:	f1b9 0f01 	cmp.w	r9, #1
 8016376:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801637a:	fa5f fa80 	uxtb.w	sl, r0
 801637e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016382:	d056      	beq.n	8016432 <uxr_create_session+0x182>
 8016384:	f1b9 0f02 	cmp.w	r9, #2
 8016388:	d018      	beq.n	80163bc <uxr_create_session+0x10c>
 801638a:	f1b9 0f00 	cmp.w	r9, #0
 801638e:	d1c4      	bne.n	801631a <uxr_create_session+0x6a>
 8016390:	4649      	mov	r1, r9
 8016392:	4648      	mov	r0, r9
 8016394:	f000 fe5c 	bl	8017050 <uxr_stream_id_from_raw>
 8016398:	a91a      	add	r1, sp, #104	@ 0x68
 801639a:	4602      	mov	r2, r0
 801639c:	900a      	str	r0, [sp, #40]	@ 0x28
 801639e:	4620      	mov	r0, r4
 80163a0:	f7ff fade 	bl	8015960 <read_submessage_list>
 80163a4:	e7b9      	b.n	801631a <uxr_create_session+0x6a>
 80163a6:	f1b8 0801 	subs.w	r8, r8, #1
 80163aa:	d001      	beq.n	80163b0 <uxr_create_session+0x100>
 80163ac:	2aff      	cmp	r2, #255	@ 0xff
 80163ae:	d0a7      	beq.n	8016300 <uxr_create_session+0x50>
 80163b0:	2a00      	cmp	r2, #0
 80163b2:	d05b      	beq.n	801646c <uxr_create_session+0x1bc>
 80163b4:	2000      	movs	r0, #0
 80163b6:	b02b      	add	sp, #172	@ 0xac
 80163b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163bc:	9803      	ldr	r0, [sp, #12]
 80163be:	4631      	mov	r1, r6
 80163c0:	f000 ff26 	bl	8017210 <uxr_get_input_reliable_stream>
 80163c4:	9004      	str	r0, [sp, #16]
 80163c6:	b370      	cbz	r0, 8016426 <uxr_create_session+0x176>
 80163c8:	aa1a      	add	r2, sp, #104	@ 0x68
 80163ca:	4610      	mov	r0, r2
 80163cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80163ce:	9205      	str	r2, [sp, #20]
 80163d0:	f7f8 fb08 	bl	800e9e4 <ucdr_buffer_remaining>
 80163d4:	4603      	mov	r3, r0
 80163d6:	f10d 0019 	add.w	r0, sp, #25
 80163da:	9000      	str	r0, [sp, #0]
 80163dc:	9a05      	ldr	r2, [sp, #20]
 80163de:	9902      	ldr	r1, [sp, #8]
 80163e0:	9804      	ldr	r0, [sp, #16]
 80163e2:	f006 f86b 	bl	801c4bc <uxr_receive_reliable_message>
 80163e6:	b1f0      	cbz	r0, 8016426 <uxr_create_session+0x176>
 80163e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d035      	beq.n	801645c <uxr_create_session+0x1ac>
 80163f0:	f8cd b008 	str.w	fp, [sp, #8]
 80163f4:	f04f 0902 	mov.w	r9, #2
 80163f8:	f8dd b010 	ldr.w	fp, [sp, #16]
 80163fc:	e00a      	b.n	8016414 <uxr_create_session+0x164>
 80163fe:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8016402:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8016406:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801640a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801640c:	a922      	add	r1, sp, #136	@ 0x88
 801640e:	4620      	mov	r0, r4
 8016410:	f7ff faa6 	bl	8015960 <read_submessage_list>
 8016414:	2204      	movs	r2, #4
 8016416:	a922      	add	r1, sp, #136	@ 0x88
 8016418:	4658      	mov	r0, fp
 801641a:	f006 f8c9 	bl	801c5b0 <uxr_next_input_reliable_buffer_available>
 801641e:	2800      	cmp	r0, #0
 8016420:	d1ed      	bne.n	80163fe <uxr_create_session+0x14e>
 8016422:	f8dd b008 	ldr.w	fp, [sp, #8]
 8016426:	4632      	mov	r2, r6
 8016428:	4651      	mov	r1, sl
 801642a:	4620      	mov	r0, r4
 801642c:	f7ff f93c 	bl	80156a8 <write_submessage_acknack.isra.0>
 8016430:	e773      	b.n	801631a <uxr_create_session+0x6a>
 8016432:	9803      	ldr	r0, [sp, #12]
 8016434:	4631      	mov	r1, r6
 8016436:	f000 fee1 	bl	80171fc <uxr_get_input_best_effort_stream>
 801643a:	2800      	cmp	r0, #0
 801643c:	f43f af6d 	beq.w	801631a <uxr_create_session+0x6a>
 8016440:	9902      	ldr	r1, [sp, #8]
 8016442:	f005 ffab 	bl	801c39c <uxr_receive_best_effort_message>
 8016446:	2800      	cmp	r0, #0
 8016448:	f43f af67 	beq.w	801631a <uxr_create_session+0x6a>
 801644c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8016450:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016452:	a91a      	add	r1, sp, #104	@ 0x68
 8016454:	4620      	mov	r0, r4
 8016456:	f7ff fa83 	bl	8015960 <read_submessage_list>
 801645a:	e75e      	b.n	801631a <uxr_create_session+0x6a>
 801645c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8016460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016462:	a91a      	add	r1, sp, #104	@ 0x68
 8016464:	4620      	mov	r0, r4
 8016466:	f7ff fa7b 	bl	8015960 <read_submessage_list>
 801646a:	e7c1      	b.n	80163f0 <uxr_create_session+0x140>
 801646c:	9803      	ldr	r0, [sp, #12]
 801646e:	f000 fe15 	bl	801709c <uxr_reset_stream_storage>
 8016472:	2001      	movs	r0, #1
 8016474:	b02b      	add	sp, #172	@ 0xac
 8016476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801647a:	bf00      	nop

0801647c <uxr_prepare_stream_to_write_submessage>:
 801647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016480:	b082      	sub	sp, #8
 8016482:	4606      	mov	r6, r0
 8016484:	4610      	mov	r0, r2
 8016486:	4614      	mov	r4, r2
 8016488:	9101      	str	r1, [sp, #4]
 801648a:	461f      	mov	r7, r3
 801648c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8016490:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8016494:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8016498:	f000 ff1a 	bl	80172d0 <uxr_submessage_padding>
 801649c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80164a0:	1d21      	adds	r1, r4, #4
 80164a2:	2b01      	cmp	r3, #1
 80164a4:	eb01 0a00 	add.w	sl, r1, r0
 80164a8:	d012      	beq.n	80164d0 <uxr_prepare_stream_to_write_submessage+0x54>
 80164aa:	2b02      	cmp	r3, #2
 80164ac:	d003      	beq.n	80164b6 <uxr_prepare_stream_to_write_submessage+0x3a>
 80164ae:	2000      	movs	r0, #0
 80164b0:	b002      	add	sp, #8
 80164b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164b6:	4629      	mov	r1, r5
 80164b8:	f106 0008 	add.w	r0, r6, #8
 80164bc:	f000 fe94 	bl	80171e8 <uxr_get_output_reliable_stream>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d0f4      	beq.n	80164ae <uxr_prepare_stream_to_write_submessage+0x32>
 80164c4:	4651      	mov	r1, sl
 80164c6:	463a      	mov	r2, r7
 80164c8:	f006 fa28 	bl	801c91c <uxr_prepare_reliable_buffer_to_write>
 80164cc:	b968      	cbnz	r0, 80164ea <uxr_prepare_stream_to_write_submessage+0x6e>
 80164ce:	e7ee      	b.n	80164ae <uxr_prepare_stream_to_write_submessage+0x32>
 80164d0:	4629      	mov	r1, r5
 80164d2:	f106 0008 	add.w	r0, r6, #8
 80164d6:	f000 fe7f 	bl	80171d8 <uxr_get_output_best_effort_stream>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d0e7      	beq.n	80164ae <uxr_prepare_stream_to_write_submessage+0x32>
 80164de:	4651      	mov	r1, sl
 80164e0:	463a      	mov	r2, r7
 80164e2:	f006 f94d 	bl	801c780 <uxr_prepare_best_effort_buffer_to_write>
 80164e6:	2800      	cmp	r0, #0
 80164e8:	d0e1      	beq.n	80164ae <uxr_prepare_stream_to_write_submessage+0x32>
 80164ea:	464b      	mov	r3, r9
 80164ec:	b2a2      	uxth	r2, r4
 80164ee:	4641      	mov	r1, r8
 80164f0:	4638      	mov	r0, r7
 80164f2:	f000 fead 	bl	8017250 <uxr_buffer_submessage_header>
 80164f6:	2001      	movs	r0, #1
 80164f8:	b002      	add	sp, #8
 80164fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164fe:	bf00      	nop

08016500 <uxr_init_session_info>:
 8016500:	2300      	movs	r3, #0
 8016502:	f361 0307 	bfi	r3, r1, #0, #8
 8016506:	0e11      	lsrs	r1, r2, #24
 8016508:	f361 230f 	bfi	r3, r1, #8, #8
 801650c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8016510:	f361 4317 	bfi	r3, r1, #16, #8
 8016514:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8016518:	f361 631f 	bfi	r3, r1, #24, #8
 801651c:	f04f 0c09 	mov.w	ip, #9
 8016520:	21ff      	movs	r1, #255	@ 0xff
 8016522:	6003      	str	r3, [r0, #0]
 8016524:	7102      	strb	r2, [r0, #4]
 8016526:	f8a0 c006 	strh.w	ip, [r0, #6]
 801652a:	7141      	strb	r1, [r0, #5]
 801652c:	4770      	bx	lr
 801652e:	bf00      	nop

08016530 <uxr_buffer_create_session>:
 8016530:	b530      	push	{r4, r5, lr}
 8016532:	4d13      	ldr	r5, [pc, #76]	@ (8016580 <uxr_buffer_create_session+0x50>)
 8016534:	b089      	sub	sp, #36	@ 0x24
 8016536:	2300      	movs	r3, #0
 8016538:	9307      	str	r3, [sp, #28]
 801653a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801653e:	682a      	ldr	r2, [r5, #0]
 8016540:	9200      	str	r2, [sp, #0]
 8016542:	460c      	mov	r4, r1
 8016544:	2201      	movs	r2, #1
 8016546:	88a9      	ldrh	r1, [r5, #4]
 8016548:	9301      	str	r3, [sp, #4]
 801654a:	80c2      	strh	r2, [r0, #6]
 801654c:	f8ad 1006 	strh.w	r1, [sp, #6]
 8016550:	f8d0 1001 	ldr.w	r1, [r0, #1]
 8016554:	7800      	ldrb	r0, [r0, #0]
 8016556:	9303      	str	r3, [sp, #12]
 8016558:	f88d 2004 	strb.w	r2, [sp, #4]
 801655c:	9102      	str	r1, [sp, #8]
 801655e:	2210      	movs	r2, #16
 8016560:	4619      	mov	r1, r3
 8016562:	f88d 000c 	strb.w	r0, [sp, #12]
 8016566:	4620      	mov	r0, r4
 8016568:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801656c:	9306      	str	r3, [sp, #24]
 801656e:	f000 fe6f 	bl	8017250 <uxr_buffer_submessage_header>
 8016572:	4669      	mov	r1, sp
 8016574:	4620      	mov	r0, r4
 8016576:	f001 fe8f 	bl	8018298 <uxr_serialize_CREATE_CLIENT_Payload>
 801657a:	b009      	add	sp, #36	@ 0x24
 801657c:	bd30      	pop	{r4, r5, pc}
 801657e:	bf00      	nop
 8016580:	080205ec 	.word	0x080205ec

08016584 <uxr_buffer_delete_session>:
 8016584:	b510      	push	{r4, lr}
 8016586:	4a0c      	ldr	r2, [pc, #48]	@ (80165b8 <uxr_buffer_delete_session+0x34>)
 8016588:	b082      	sub	sp, #8
 801658a:	460c      	mov	r4, r1
 801658c:	2302      	movs	r3, #2
 801658e:	8911      	ldrh	r1, [r2, #8]
 8016590:	80c3      	strh	r3, [r0, #6]
 8016592:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8016596:	2300      	movs	r3, #0
 8016598:	2204      	movs	r2, #4
 801659a:	f8ad 1006 	strh.w	r1, [sp, #6]
 801659e:	4620      	mov	r0, r4
 80165a0:	2103      	movs	r1, #3
 80165a2:	f8ad c004 	strh.w	ip, [sp, #4]
 80165a6:	f000 fe53 	bl	8017250 <uxr_buffer_submessage_header>
 80165aa:	a901      	add	r1, sp, #4
 80165ac:	4620      	mov	r0, r4
 80165ae:	f001 ff17 	bl	80183e0 <uxr_serialize_DELETE_Payload>
 80165b2:	b002      	add	sp, #8
 80165b4:	bd10      	pop	{r4, pc}
 80165b6:	bf00      	nop
 80165b8:	080205ec 	.word	0x080205ec

080165bc <uxr_read_create_session_status>:
 80165bc:	b510      	push	{r4, lr}
 80165be:	460b      	mov	r3, r1
 80165c0:	b088      	sub	sp, #32
 80165c2:	4604      	mov	r4, r0
 80165c4:	a901      	add	r1, sp, #4
 80165c6:	4618      	mov	r0, r3
 80165c8:	f001 ff1a 	bl	8018400 <uxr_deserialize_STATUS_AGENT_Payload>
 80165cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80165d0:	7163      	strb	r3, [r4, #5]
 80165d2:	b008      	add	sp, #32
 80165d4:	bd10      	pop	{r4, pc}
 80165d6:	bf00      	nop

080165d8 <uxr_read_delete_session_status>:
 80165d8:	b510      	push	{r4, lr}
 80165da:	460b      	mov	r3, r1
 80165dc:	b082      	sub	sp, #8
 80165de:	4604      	mov	r4, r0
 80165e0:	4669      	mov	r1, sp
 80165e2:	4618      	mov	r0, r3
 80165e4:	f001 ff3c 	bl	8018460 <uxr_deserialize_STATUS_Payload>
 80165e8:	88e3      	ldrh	r3, [r4, #6]
 80165ea:	2b02      	cmp	r3, #2
 80165ec:	d001      	beq.n	80165f2 <uxr_read_delete_session_status+0x1a>
 80165ee:	b002      	add	sp, #8
 80165f0:	bd10      	pop	{r4, pc}
 80165f2:	f10d 0002 	add.w	r0, sp, #2
 80165f6:	f7fe fea9 	bl	801534c <uxr_object_id_from_raw>
 80165fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80165fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016606:	bf08      	it	eq
 8016608:	7162      	strbeq	r2, [r4, #5]
 801660a:	b002      	add	sp, #8
 801660c:	bd10      	pop	{r4, pc}
 801660e:	bf00      	nop

08016610 <uxr_stamp_create_session_header>:
 8016610:	b510      	push	{r4, lr}
 8016612:	2208      	movs	r2, #8
 8016614:	b08a      	sub	sp, #40	@ 0x28
 8016616:	4604      	mov	r4, r0
 8016618:	eb0d 0002 	add.w	r0, sp, r2
 801661c:	f7f8 f9b2 	bl	800e984 <ucdr_init_buffer>
 8016620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016624:	9400      	str	r4, [sp, #0]
 8016626:	2300      	movs	r3, #0
 8016628:	461a      	mov	r2, r3
 801662a:	a802      	add	r0, sp, #8
 801662c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8016630:	f001 f80c 	bl	801764c <uxr_serialize_message_header>
 8016634:	b00a      	add	sp, #40	@ 0x28
 8016636:	bd10      	pop	{r4, pc}

08016638 <uxr_stamp_session_header>:
 8016638:	b570      	push	{r4, r5, r6, lr}
 801663a:	4604      	mov	r4, r0
 801663c:	b08a      	sub	sp, #40	@ 0x28
 801663e:	4616      	mov	r6, r2
 8016640:	2208      	movs	r2, #8
 8016642:	eb0d 0002 	add.w	r0, sp, r2
 8016646:	460d      	mov	r5, r1
 8016648:	4619      	mov	r1, r3
 801664a:	f7f8 f99b 	bl	800e984 <ucdr_init_buffer>
 801664e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016652:	9400      	str	r4, [sp, #0]
 8016654:	4633      	mov	r3, r6
 8016656:	462a      	mov	r2, r5
 8016658:	a802      	add	r0, sp, #8
 801665a:	f000 fff7 	bl	801764c <uxr_serialize_message_header>
 801665e:	b00a      	add	sp, #40	@ 0x28
 8016660:	bd70      	pop	{r4, r5, r6, pc}
 8016662:	bf00      	nop

08016664 <uxr_read_session_header>:
 8016664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016666:	4607      	mov	r7, r0
 8016668:	b085      	sub	sp, #20
 801666a:	4608      	mov	r0, r1
 801666c:	460c      	mov	r4, r1
 801666e:	4615      	mov	r5, r2
 8016670:	461e      	mov	r6, r3
 8016672:	f7f8 f9b7 	bl	800e9e4 <ucdr_buffer_remaining>
 8016676:	2808      	cmp	r0, #8
 8016678:	d802      	bhi.n	8016680 <uxr_read_session_header+0x1c>
 801667a:	2000      	movs	r0, #0
 801667c:	b005      	add	sp, #20
 801667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016680:	ab03      	add	r3, sp, #12
 8016682:	9300      	str	r3, [sp, #0]
 8016684:	462a      	mov	r2, r5
 8016686:	4633      	mov	r3, r6
 8016688:	f10d 010b 	add.w	r1, sp, #11
 801668c:	4620      	mov	r0, r4
 801668e:	f000 fffb 	bl	8017688 <uxr_deserialize_message_header>
 8016692:	783a      	ldrb	r2, [r7, #0]
 8016694:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8016698:	4293      	cmp	r3, r2
 801669a:	d1ee      	bne.n	801667a <uxr_read_session_header+0x16>
 801669c:	061b      	lsls	r3, r3, #24
 801669e:	d41c      	bmi.n	80166da <uxr_read_session_header+0x76>
 80166a0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80166a4:	787b      	ldrb	r3, [r7, #1]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d003      	beq.n	80166b2 <uxr_read_session_header+0x4e>
 80166aa:	2001      	movs	r0, #1
 80166ac:	f080 0001 	eor.w	r0, r0, #1
 80166b0:	e7e4      	b.n	801667c <uxr_read_session_header+0x18>
 80166b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80166b6:	78bb      	ldrb	r3, [r7, #2]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	f107 0102 	add.w	r1, r7, #2
 80166be:	d1f4      	bne.n	80166aa <uxr_read_session_header+0x46>
 80166c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80166c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d1ee      	bne.n	80166aa <uxr_read_session_header+0x46>
 80166cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80166d0:	784b      	ldrb	r3, [r1, #1]
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d1e9      	bne.n	80166aa <uxr_read_session_header+0x46>
 80166d6:	2000      	movs	r0, #0
 80166d8:	e7e8      	b.n	80166ac <uxr_read_session_header+0x48>
 80166da:	2001      	movs	r0, #1
 80166dc:	e7ce      	b.n	801667c <uxr_read_session_header+0x18>
 80166de:	bf00      	nop

080166e0 <uxr_session_header_offset>:
 80166e0:	f990 3000 	ldrsb.w	r3, [r0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	bfb4      	ite	lt
 80166e8:	2004      	movlt	r0, #4
 80166ea:	2008      	movge	r0, #8
 80166ec:	4770      	bx	lr
 80166ee:	bf00      	nop

080166f0 <uxr_init_base_object_request>:
 80166f0:	b510      	push	{r4, lr}
 80166f2:	88c3      	ldrh	r3, [r0, #6]
 80166f4:	b082      	sub	sp, #8
 80166f6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80166fa:	9101      	str	r1, [sp, #4]
 80166fc:	f1a3 010a 	sub.w	r1, r3, #10
 8016700:	b289      	uxth	r1, r1
 8016702:	42a1      	cmp	r1, r4
 8016704:	d80e      	bhi.n	8016724 <uxr_init_base_object_request+0x34>
 8016706:	3301      	adds	r3, #1
 8016708:	b29c      	uxth	r4, r3
 801670a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801670e:	b2db      	uxtb	r3, r3
 8016710:	80c4      	strh	r4, [r0, #6]
 8016712:	9801      	ldr	r0, [sp, #4]
 8016714:	7011      	strb	r1, [r2, #0]
 8016716:	7053      	strb	r3, [r2, #1]
 8016718:	1c91      	adds	r1, r2, #2
 801671a:	f7fe fe2b 	bl	8015374 <uxr_object_id_to_raw>
 801671e:	4620      	mov	r0, r4
 8016720:	b002      	add	sp, #8
 8016722:	bd10      	pop	{r4, pc}
 8016724:	230a      	movs	r3, #10
 8016726:	2100      	movs	r1, #0
 8016728:	461c      	mov	r4, r3
 801672a:	e7f1      	b.n	8016710 <uxr_init_base_object_request+0x20>

0801672c <uxr_parse_base_object_request>:
 801672c:	b570      	push	{r4, r5, r6, lr}
 801672e:	4604      	mov	r4, r0
 8016730:	3002      	adds	r0, #2
 8016732:	460d      	mov	r5, r1
 8016734:	4616      	mov	r6, r2
 8016736:	f7fe fe09 	bl	801534c <uxr_object_id_from_raw>
 801673a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801673e:	8028      	strh	r0, [r5, #0]
 8016740:	806b      	strh	r3, [r5, #2]
 8016742:	8823      	ldrh	r3, [r4, #0]
 8016744:	ba5b      	rev16	r3, r3
 8016746:	8033      	strh	r3, [r6, #0]
 8016748:	bd70      	pop	{r4, r5, r6, pc}
 801674a:	bf00      	nop

0801674c <uxr_init_framing_io>:
 801674c:	2300      	movs	r3, #0
 801674e:	7041      	strb	r1, [r0, #1]
 8016750:	7003      	strb	r3, [r0, #0]
 8016752:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016754:	4770      	bx	lr
 8016756:	bf00      	nop

08016758 <uxr_write_framed_msg>:
 8016758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675c:	f890 c001 	ldrb.w	ip, [r0, #1]
 8016760:	4617      	mov	r7, r2
 8016762:	227e      	movs	r2, #126	@ 0x7e
 8016764:	b085      	sub	sp, #20
 8016766:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 801676a:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 801676e:	2a01      	cmp	r2, #1
 8016770:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8016774:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8016778:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801677c:	4604      	mov	r4, r0
 801677e:	460e      	mov	r6, r1
 8016780:	469a      	mov	sl, r3
 8016782:	f240 812e 	bls.w	80169e2 <uxr_write_framed_msg+0x28a>
 8016786:	2003      	movs	r0, #3
 8016788:	2102      	movs	r1, #2
 801678a:	f04f 0905 	mov.w	r9, #5
 801678e:	2204      	movs	r2, #4
 8016790:	4686      	mov	lr, r0
 8016792:	460b      	mov	r3, r1
 8016794:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8016798:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801679c:	f1bc 0f01 	cmp.w	ip, #1
 80167a0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80167a4:	4421      	add	r1, r4
 80167a6:	f240 8110 	bls.w	80169ca <uxr_write_framed_msg+0x272>
 80167aa:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80167ae:	fa5f fc8b 	uxtb.w	ip, fp
 80167b2:	f3cb 2107 	ubfx	r1, fp, #8, #8
 80167b6:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 80167ba:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 80167be:	f1be 0f01 	cmp.w	lr, #1
 80167c2:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 80167c6:	b2ed      	uxtb	r5, r5
 80167c8:	d94c      	bls.n	8016864 <uxr_write_framed_msg+0x10c>
 80167ca:	4420      	add	r0, r4
 80167cc:	2d01      	cmp	r5, #1
 80167ce:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80167d2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80167d6:	d95d      	bls.n	8016894 <uxr_write_framed_msg+0x13c>
 80167d8:	18a0      	adds	r0, r4, r2
 80167da:	3201      	adds	r2, #1
 80167dc:	b2d2      	uxtb	r2, r2
 80167de:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80167e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80167e6:	f1bb 0f00 	cmp.w	fp, #0
 80167ea:	f000 8108 	beq.w	80169fe <uxr_write_framed_msg+0x2a6>
 80167ee:	f04f 0c00 	mov.w	ip, #0
 80167f2:	4661      	mov	r1, ip
 80167f4:	46de      	mov	lr, fp
 80167f6:	46e3      	mov	fp, ip
 80167f8:	46d4      	mov	ip, sl
 80167fa:	468a      	mov	sl, r1
 80167fc:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8016a08 <uxr_write_framed_msg+0x2b0>
 8016800:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8016804:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016808:	2901      	cmp	r1, #1
 801680a:	d91b      	bls.n	8016844 <uxr_write_framed_msg+0xec>
 801680c:	2a29      	cmp	r2, #41	@ 0x29
 801680e:	d84e      	bhi.n	80168ae <uxr_write_framed_msg+0x156>
 8016810:	18a1      	adds	r1, r4, r2
 8016812:	3201      	adds	r2, #1
 8016814:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8016818:	b2d2      	uxtb	r2, r2
 801681a:	ea8b 0303 	eor.w	r3, fp, r3
 801681e:	b2db      	uxtb	r3, r3
 8016820:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016824:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8016828:	f10a 0a01 	add.w	sl, sl, #1
 801682c:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 8016830:	45d6      	cmp	lr, sl
 8016832:	d95a      	bls.n	80168ea <uxr_write_framed_msg+0x192>
 8016834:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8016838:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801683c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016840:	2901      	cmp	r1, #1
 8016842:	d8e3      	bhi.n	801680c <uxr_write_framed_msg+0xb4>
 8016844:	1c51      	adds	r1, r2, #1
 8016846:	b2c9      	uxtb	r1, r1
 8016848:	2929      	cmp	r1, #41	@ 0x29
 801684a:	d830      	bhi.n	80168ae <uxr_write_framed_msg+0x156>
 801684c:	18a1      	adds	r1, r4, r2
 801684e:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8016852:	3202      	adds	r2, #2
 8016854:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8016858:	f083 0020 	eor.w	r0, r3, #32
 801685c:	b2d2      	uxtb	r2, r2
 801685e:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 8016862:	e7da      	b.n	801681a <uxr_write_framed_msg+0xc2>
 8016864:	eb04 0e00 	add.w	lr, r4, r0
 8016868:	f08c 0c20 	eor.w	ip, ip, #32
 801686c:	1c82      	adds	r2, r0, #2
 801686e:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8016872:	b2d2      	uxtb	r2, r2
 8016874:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016878:	2d01      	cmp	r5, #1
 801687a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 801687e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016882:	d907      	bls.n	8016894 <uxr_write_framed_msg+0x13c>
 8016884:	4422      	add	r2, r4
 8016886:	3003      	adds	r0, #3
 8016888:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 801688c:	b2c2      	uxtb	r2, r0
 801688e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016892:	e7ac      	b.n	80167ee <uxr_write_framed_msg+0x96>
 8016894:	18a0      	adds	r0, r4, r2
 8016896:	f081 0120 	eor.w	r1, r1, #32
 801689a:	3202      	adds	r2, #2
 801689c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 80168a0:	b2d2      	uxtb	r2, r2
 80168a2:	217d      	movs	r1, #125	@ 0x7d
 80168a4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80168a8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80168ac:	e79f      	b.n	80167ee <uxr_write_framed_msg+0x96>
 80168ae:	e9cd ba00 	strd	fp, sl, [sp]
 80168b2:	2500      	movs	r5, #0
 80168b4:	46e2      	mov	sl, ip
 80168b6:	46f3      	mov	fp, lr
 80168b8:	e000      	b.n	80168bc <uxr_write_framed_msg+0x164>
 80168ba:	b190      	cbz	r0, 80168e2 <uxr_write_framed_msg+0x18a>
 80168bc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80168c0:	1b52      	subs	r2, r2, r5
 80168c2:	4643      	mov	r3, r8
 80168c4:	4421      	add	r1, r4
 80168c6:	4638      	mov	r0, r7
 80168c8:	47b0      	blx	r6
 80168ca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80168ce:	4405      	add	r5, r0
 80168d0:	4295      	cmp	r5, r2
 80168d2:	d3f2      	bcc.n	80168ba <uxr_write_framed_msg+0x162>
 80168d4:	46d4      	mov	ip, sl
 80168d6:	46de      	mov	lr, fp
 80168d8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80168dc:	f8dd b000 	ldr.w	fp, [sp]
 80168e0:	d06f      	beq.n	80169c2 <uxr_write_framed_msg+0x26a>
 80168e2:	2000      	movs	r0, #0
 80168e4:	b005      	add	sp, #20
 80168e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ea:	46dc      	mov	ip, fp
 80168ec:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80168f0:	f8ad c00c 	strh.w	ip, [sp, #12]
 80168f4:	46f3      	mov	fp, lr
 80168f6:	fa5f fc8c 	uxtb.w	ip, ip
 80168fa:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80168fe:	2b01      	cmp	r3, #1
 8016900:	f04f 0900 	mov.w	r9, #0
 8016904:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8016908:	d930      	bls.n	801696c <uxr_write_framed_msg+0x214>
 801690a:	2a29      	cmp	r2, #41	@ 0x29
 801690c:	d91c      	bls.n	8016948 <uxr_write_framed_msg+0x1f0>
 801690e:	2500      	movs	r5, #0
 8016910:	e001      	b.n	8016916 <uxr_write_framed_msg+0x1be>
 8016912:	2800      	cmp	r0, #0
 8016914:	d0e5      	beq.n	80168e2 <uxr_write_framed_msg+0x18a>
 8016916:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801691a:	1b52      	subs	r2, r2, r5
 801691c:	4643      	mov	r3, r8
 801691e:	4421      	add	r1, r4
 8016920:	4638      	mov	r0, r7
 8016922:	47b0      	blx	r6
 8016924:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016928:	4405      	add	r5, r0
 801692a:	4295      	cmp	r5, r2
 801692c:	d3f1      	bcc.n	8016912 <uxr_write_framed_msg+0x1ba>
 801692e:	d1d8      	bne.n	80168e2 <uxr_write_framed_msg+0x18a>
 8016930:	f109 0310 	add.w	r3, r9, #16
 8016934:	446b      	add	r3, sp
 8016936:	2200      	movs	r2, #0
 8016938:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 801693c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016940:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8016944:	2b01      	cmp	r3, #1
 8016946:	d911      	bls.n	801696c <uxr_write_framed_msg+0x214>
 8016948:	18a3      	adds	r3, r4, r2
 801694a:	3201      	adds	r2, #1
 801694c:	b2d2      	uxtb	r2, r2
 801694e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8016952:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016956:	f1b9 0f00 	cmp.w	r9, #0
 801695a:	d119      	bne.n	8016990 <uxr_write_framed_msg+0x238>
 801695c:	f89d c00d 	ldrb.w	ip, [sp, #13]
 8016960:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8016964:	2b01      	cmp	r3, #1
 8016966:	f04f 0901 	mov.w	r9, #1
 801696a:	d8ce      	bhi.n	801690a <uxr_write_framed_msg+0x1b2>
 801696c:	1c53      	adds	r3, r2, #1
 801696e:	b2db      	uxtb	r3, r3
 8016970:	2b29      	cmp	r3, #41	@ 0x29
 8016972:	d8cc      	bhi.n	801690e <uxr_write_framed_msg+0x1b6>
 8016974:	18a3      	adds	r3, r4, r2
 8016976:	3202      	adds	r2, #2
 8016978:	f08c 0c20 	eor.w	ip, ip, #32
 801697c:	b2d2      	uxtb	r2, r2
 801697e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8016982:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 8016986:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801698a:	f1b9 0f00 	cmp.w	r9, #0
 801698e:	d0e5      	beq.n	801695c <uxr_write_framed_msg+0x204>
 8016990:	2500      	movs	r5, #0
 8016992:	e001      	b.n	8016998 <uxr_write_framed_msg+0x240>
 8016994:	2800      	cmp	r0, #0
 8016996:	d0a4      	beq.n	80168e2 <uxr_write_framed_msg+0x18a>
 8016998:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801699c:	1b52      	subs	r2, r2, r5
 801699e:	4643      	mov	r3, r8
 80169a0:	4421      	add	r1, r4
 80169a2:	4638      	mov	r0, r7
 80169a4:	47b0      	blx	r6
 80169a6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80169aa:	4405      	add	r5, r0
 80169ac:	4295      	cmp	r5, r2
 80169ae:	d3f1      	bcc.n	8016994 <uxr_write_framed_msg+0x23c>
 80169b0:	d197      	bne.n	80168e2 <uxr_write_framed_msg+0x18a>
 80169b2:	2300      	movs	r3, #0
 80169b4:	fa1f f08b 	uxth.w	r0, fp
 80169b8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80169bc:	b005      	add	sp, #20
 80169be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c2:	2300      	movs	r3, #0
 80169c4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80169c8:	e732      	b.n	8016830 <uxr_write_framed_msg+0xd8>
 80169ca:	44a6      	add	lr, r4
 80169cc:	f085 0520 	eor.w	r5, r5, #32
 80169d0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80169d4:	4610      	mov	r0, r2
 80169d6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80169da:	464a      	mov	r2, r9
 80169dc:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 80169e0:	e6e5      	b.n	80167ae <uxr_write_framed_msg+0x56>
 80169e2:	f08c 0c20 	eor.w	ip, ip, #32
 80169e6:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 80169ea:	2103      	movs	r1, #3
 80169ec:	2004      	movs	r0, #4
 80169ee:	f04f 0906 	mov.w	r9, #6
 80169f2:	2205      	movs	r2, #5
 80169f4:	4686      	mov	lr, r0
 80169f6:	460b      	mov	r3, r1
 80169f8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80169fc:	e6ca      	b.n	8016794 <uxr_write_framed_msg+0x3c>
 80169fe:	f8ad b00c 	strh.w	fp, [sp, #12]
 8016a02:	46dc      	mov	ip, fp
 8016a04:	e779      	b.n	80168fa <uxr_write_framed_msg+0x1a2>
 8016a06:	bf00      	nop
 8016a08:	08021374 	.word	0x08021374

08016a0c <uxr_framing_read_transport>:
 8016a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a10:	4604      	mov	r4, r0
 8016a12:	b083      	sub	sp, #12
 8016a14:	461f      	mov	r7, r3
 8016a16:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8016a1a:	4689      	mov	r9, r1
 8016a1c:	4692      	mov	sl, r2
 8016a1e:	f000 fc5d 	bl	80172dc <uxr_millis>
 8016a22:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016a26:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8016a2a:	42b3      	cmp	r3, r6
 8016a2c:	4680      	mov	r8, r0
 8016a2e:	d062      	beq.n	8016af6 <uxr_framing_read_transport+0xea>
 8016a30:	d81c      	bhi.n	8016a6c <uxr_framing_read_transport+0x60>
 8016a32:	1e75      	subs	r5, r6, #1
 8016a34:	1aed      	subs	r5, r5, r3
 8016a36:	b2ed      	uxtb	r5, r5
 8016a38:	2600      	movs	r6, #0
 8016a3a:	455d      	cmp	r5, fp
 8016a3c:	d81f      	bhi.n	8016a7e <uxr_framing_read_transport+0x72>
 8016a3e:	19ab      	adds	r3, r5, r6
 8016a40:	455b      	cmp	r3, fp
 8016a42:	bf84      	itt	hi
 8016a44:	ebab 0b05 	subhi.w	fp, fp, r5
 8016a48:	fa5f f68b 	uxtbhi.w	r6, fp
 8016a4c:	b9e5      	cbnz	r5, 8016a88 <uxr_framing_read_transport+0x7c>
 8016a4e:	f04f 0b00 	mov.w	fp, #0
 8016a52:	f000 fc43 	bl	80172dc <uxr_millis>
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	eba0 0108 	sub.w	r1, r0, r8
 8016a5c:	1a5b      	subs	r3, r3, r1
 8016a5e:	4658      	mov	r0, fp
 8016a60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a64:	603b      	str	r3, [r7, #0]
 8016a66:	b003      	add	sp, #12
 8016a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a6c:	2e00      	cmp	r6, #0
 8016a6e:	d04a      	beq.n	8016b06 <uxr_framing_read_transport+0xfa>
 8016a70:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8016a74:	b2dd      	uxtb	r5, r3
 8016a76:	3e01      	subs	r6, #1
 8016a78:	455d      	cmp	r5, fp
 8016a7a:	b2f6      	uxtb	r6, r6
 8016a7c:	d9df      	bls.n	8016a3e <uxr_framing_read_transport+0x32>
 8016a7e:	fa5f f58b 	uxtb.w	r5, fp
 8016a82:	2600      	movs	r6, #0
 8016a84:	2d00      	cmp	r5, #0
 8016a86:	d0e2      	beq.n	8016a4e <uxr_framing_read_transport+0x42>
 8016a88:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016a8c:	3102      	adds	r1, #2
 8016a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	4421      	add	r1, r4
 8016a96:	462a      	mov	r2, r5
 8016a98:	4650      	mov	r0, sl
 8016a9a:	47c8      	blx	r9
 8016a9c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8016b10 <uxr_framing_read_transport+0x104>)
 8016aa2:	4403      	add	r3, r0
 8016aa4:	0859      	lsrs	r1, r3, #1
 8016aa6:	4683      	mov	fp, r0
 8016aa8:	fba2 0101 	umull	r0, r1, r2, r1
 8016aac:	0889      	lsrs	r1, r1, #2
 8016aae:	222a      	movs	r2, #42	@ 0x2a
 8016ab0:	fb02 3111 	mls	r1, r2, r1, r3
 8016ab4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016ab8:	f1bb 0f00 	cmp.w	fp, #0
 8016abc:	d0c7      	beq.n	8016a4e <uxr_framing_read_transport+0x42>
 8016abe:	45ab      	cmp	fp, r5
 8016ac0:	d1c7      	bne.n	8016a52 <uxr_framing_read_transport+0x46>
 8016ac2:	2e00      	cmp	r6, #0
 8016ac4:	d0c5      	beq.n	8016a52 <uxr_framing_read_transport+0x46>
 8016ac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	3102      	adds	r1, #2
 8016acc:	4632      	mov	r2, r6
 8016ace:	4421      	add	r1, r4
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	4650      	mov	r0, sl
 8016ad4:	47c8      	blx	r9
 8016ad6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016ada:	4a0d      	ldr	r2, [pc, #52]	@ (8016b10 <uxr_framing_read_transport+0x104>)
 8016adc:	4403      	add	r3, r0
 8016ade:	0859      	lsrs	r1, r3, #1
 8016ae0:	fba2 2101 	umull	r2, r1, r2, r1
 8016ae4:	0889      	lsrs	r1, r1, #2
 8016ae6:	222a      	movs	r2, #42	@ 0x2a
 8016ae8:	fb02 3311 	mls	r3, r2, r1, r3
 8016aec:	eb00 0b05 	add.w	fp, r0, r5
 8016af0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016af4:	e7ad      	b.n	8016a52 <uxr_framing_read_transport+0x46>
 8016af6:	2600      	movs	r6, #0
 8016af8:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8016afc:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8016afe:	d9be      	bls.n	8016a7e <uxr_framing_read_transport+0x72>
 8016b00:	2529      	movs	r5, #41	@ 0x29
 8016b02:	2102      	movs	r1, #2
 8016b04:	e7c3      	b.n	8016a8e <uxr_framing_read_transport+0x82>
 8016b06:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 8016b0a:	b2dd      	uxtb	r5, r3
 8016b0c:	e795      	b.n	8016a3a <uxr_framing_read_transport+0x2e>
 8016b0e:	bf00      	nop
 8016b10:	30c30c31 	.word	0x30c30c31

08016b14 <uxr_read_framed_msg>:
 8016b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b18:	461d      	mov	r5, r3
 8016b1a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8016b1e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8016b22:	b085      	sub	sp, #20
 8016b24:	459c      	cmp	ip, r3
 8016b26:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	460f      	mov	r7, r1
 8016b2e:	4616      	mov	r6, r2
 8016b30:	f000 81ae 	beq.w	8016e90 <uxr_read_framed_msg+0x37c>
 8016b34:	2000      	movs	r0, #0
 8016b36:	4639      	mov	r1, r7
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d138      	bne.n	8016bae <uxr_read_framed_msg+0x9a>
 8016b3c:	468a      	mov	sl, r1
 8016b3e:	7823      	ldrb	r3, [r4, #0]
 8016b40:	2b07      	cmp	r3, #7
 8016b42:	d8fd      	bhi.n	8016b40 <uxr_read_framed_msg+0x2c>
 8016b44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016b48:	0116013b 	.word	0x0116013b
 8016b4c:	00cd00f0 	.word	0x00cd00f0
 8016b50:	005a00a0 	.word	0x005a00a0
 8016b54:	00080037 	.word	0x00080037
 8016b58:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016b5c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016b60:	4290      	cmp	r0, r2
 8016b62:	f000 8167 	beq.w	8016e34 <uxr_read_framed_msg+0x320>
 8016b66:	18a3      	adds	r3, r4, r2
 8016b68:	1c57      	adds	r7, r2, #1
 8016b6a:	49c7      	ldr	r1, [pc, #796]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016b6c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8016b70:	087b      	lsrs	r3, r7, #1
 8016b72:	fba1 8303 	umull	r8, r3, r1, r3
 8016b76:	089b      	lsrs	r3, r3, #2
 8016b78:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016b7c:	fb08 7313 	mls	r3, r8, r3, r7
 8016b80:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8016b84:	b2df      	uxtb	r7, r3
 8016b86:	f000 81b2 	beq.w	8016eee <uxr_read_framed_msg+0x3da>
 8016b8a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8016b8e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8016b92:	f000 8220 	beq.w	8016fd6 <uxr_read_framed_msg+0x4c2>
 8016b96:	4661      	mov	r1, ip
 8016b98:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016b9a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016b9c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016ba0:	b29b      	uxth	r3, r3
 8016ba2:	2100      	movs	r1, #0
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016ba8:	7021      	strb	r1, [r4, #0]
 8016baa:	f000 8198 	beq.w	8016ede <uxr_read_framed_msg+0x3ca>
 8016bae:	2000      	movs	r0, #0
 8016bb0:	b005      	add	sp, #20
 8016bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bb6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016bba:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016bbe:	4297      	cmp	r7, r2
 8016bc0:	f000 8148 	beq.w	8016e54 <uxr_read_framed_msg+0x340>
 8016bc4:	18a3      	adds	r3, r4, r2
 8016bc6:	f102 0c01 	add.w	ip, r2, #1
 8016bca:	49af      	ldr	r1, [pc, #700]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016bcc:	7898      	ldrb	r0, [r3, #2]
 8016bce:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016bd2:	fba1 8303 	umull	r8, r3, r1, r3
 8016bd6:	089b      	lsrs	r3, r3, #2
 8016bd8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016bdc:	fb08 c313 	mls	r3, r8, r3, ip
 8016be0:	287d      	cmp	r0, #125	@ 0x7d
 8016be2:	fa5f fc83 	uxtb.w	ip, r3
 8016be6:	f000 8194 	beq.w	8016f12 <uxr_read_framed_msg+0x3fe>
 8016bea:	287e      	cmp	r0, #126	@ 0x7e
 8016bec:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016bf0:	f000 8200 	beq.w	8016ff4 <uxr_read_framed_msg+0x4e0>
 8016bf4:	2307      	movs	r3, #7
 8016bf6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016bf8:	7023      	strb	r3, [r4, #0]
 8016bfa:	e7a0      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016bfc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016bfe:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8016c00:	429f      	cmp	r7, r3
 8016c02:	f240 8164 	bls.w	8016ece <uxr_read_framed_msg+0x3ba>
 8016c06:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8016e88 <uxr_read_framed_msg+0x374>
 8016c0a:	f8cd a00c 	str.w	sl, [sp, #12]
 8016c0e:	212a      	movs	r1, #42	@ 0x2a
 8016c10:	e01f      	b.n	8016c52 <uxr_read_framed_msg+0x13e>
 8016c12:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016c16:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8016c1a:	f000 80ea 	beq.w	8016df2 <uxr_read_framed_msg+0x2de>
 8016c1e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016c22:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016c26:	f000 8142 	beq.w	8016eae <uxr_read_framed_msg+0x39a>
 8016c2a:	f805 e003 	strb.w	lr, [r5, r3]
 8016c2e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8016c30:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8016c32:	4f96      	ldr	r7, [pc, #600]	@ (8016e8c <uxr_read_framed_msg+0x378>)
 8016c34:	ea80 020e 	eor.w	r2, r0, lr
 8016c38:	b2d2      	uxtb	r2, r2
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8016c40:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016c48:	42bb      	cmp	r3, r7
 8016c4a:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016c4c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016c4e:	f080 80e7 	bcs.w	8016e20 <uxr_read_framed_msg+0x30c>
 8016c52:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8016c56:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016c5a:	f100 0c01 	add.w	ip, r0, #1
 8016c5e:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8016c62:	fba9 e20e 	umull	lr, r2, r9, lr
 8016c66:	0892      	lsrs	r2, r2, #2
 8016c68:	fb01 c212 	mls	r2, r1, r2, ip
 8016c6c:	4580      	cmp	r8, r0
 8016c6e:	eb04 0a00 	add.w	sl, r4, r0
 8016c72:	fa5f fc82 	uxtb.w	ip, r2
 8016c76:	d1cc      	bne.n	8016c12 <uxr_read_framed_msg+0xfe>
 8016c78:	42bb      	cmp	r3, r7
 8016c7a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016c7e:	f040 8128 	bne.w	8016ed2 <uxr_read_framed_msg+0x3be>
 8016c82:	2306      	movs	r3, #6
 8016c84:	7023      	strb	r3, [r4, #0]
 8016c86:	e75a      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016c88:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016c8c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016c90:	4297      	cmp	r7, r2
 8016c92:	f000 80cf 	beq.w	8016e34 <uxr_read_framed_msg+0x320>
 8016c96:	18a3      	adds	r3, r4, r2
 8016c98:	f102 0c01 	add.w	ip, r2, #1
 8016c9c:	497a      	ldr	r1, [pc, #488]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016c9e:	7898      	ldrb	r0, [r3, #2]
 8016ca0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016ca4:	fba1 8303 	umull	r8, r3, r1, r3
 8016ca8:	089b      	lsrs	r3, r3, #2
 8016caa:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016cae:	fb08 c313 	mls	r3, r8, r3, ip
 8016cb2:	287d      	cmp	r0, #125	@ 0x7d
 8016cb4:	fa5f fc83 	uxtb.w	ip, r3
 8016cb8:	f000 813d 	beq.w	8016f36 <uxr_read_framed_msg+0x422>
 8016cbc:	287e      	cmp	r0, #126	@ 0x7e
 8016cbe:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016cc2:	f000 8188 	beq.w	8016fd6 <uxr_read_framed_msg+0x4c2>
 8016cc6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016cc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016cca:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	428b      	cmp	r3, r1
 8016cd4:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016cd6:	8662      	strh	r2, [r4, #50]	@ 0x32
 8016cd8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8016cda:	f240 80f5 	bls.w	8016ec8 <uxr_read_framed_msg+0x3b4>
 8016cde:	7022      	strb	r2, [r4, #0]
 8016ce0:	e765      	b.n	8016bae <uxr_read_framed_msg+0x9a>
 8016ce2:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016ce6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016cea:	4297      	cmp	r7, r2
 8016cec:	f000 80b2 	beq.w	8016e54 <uxr_read_framed_msg+0x340>
 8016cf0:	18a3      	adds	r3, r4, r2
 8016cf2:	f102 0c01 	add.w	ip, r2, #1
 8016cf6:	4964      	ldr	r1, [pc, #400]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016cf8:	7898      	ldrb	r0, [r3, #2]
 8016cfa:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016cfe:	fba1 8303 	umull	r8, r3, r1, r3
 8016d02:	089b      	lsrs	r3, r3, #2
 8016d04:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016d08:	fb08 c313 	mls	r3, r8, r3, ip
 8016d0c:	287d      	cmp	r0, #125	@ 0x7d
 8016d0e:	fa5f fc83 	uxtb.w	ip, r3
 8016d12:	f000 813b 	beq.w	8016f8c <uxr_read_framed_msg+0x478>
 8016d16:	287e      	cmp	r0, #126	@ 0x7e
 8016d18:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016d1c:	f000 816a 	beq.w	8016ff4 <uxr_read_framed_msg+0x4e0>
 8016d20:	2304      	movs	r3, #4
 8016d22:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016d24:	7023      	strb	r3, [r4, #0]
 8016d26:	e70a      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016d28:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016d2c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016d30:	4297      	cmp	r7, r2
 8016d32:	f000 80c4 	beq.w	8016ebe <uxr_read_framed_msg+0x3aa>
 8016d36:	18a3      	adds	r3, r4, r2
 8016d38:	f102 0c01 	add.w	ip, r2, #1
 8016d3c:	4952      	ldr	r1, [pc, #328]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016d3e:	7898      	ldrb	r0, [r3, #2]
 8016d40:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016d44:	fba1 8303 	umull	r8, r3, r1, r3
 8016d48:	089b      	lsrs	r3, r3, #2
 8016d4a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016d4e:	fb08 c313 	mls	r3, r8, r3, ip
 8016d52:	287d      	cmp	r0, #125	@ 0x7d
 8016d54:	fa5f fc83 	uxtb.w	ip, r3
 8016d58:	f000 812b 	beq.w	8016fb2 <uxr_read_framed_msg+0x49e>
 8016d5c:	287e      	cmp	r0, #126	@ 0x7e
 8016d5e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016d62:	f000 8155 	beq.w	8017010 <uxr_read_framed_msg+0x4fc>
 8016d66:	7863      	ldrb	r3, [r4, #1]
 8016d68:	4283      	cmp	r3, r0
 8016d6a:	bf0c      	ite	eq
 8016d6c:	2303      	moveq	r3, #3
 8016d6e:	2300      	movne	r3, #0
 8016d70:	7023      	strb	r3, [r4, #0]
 8016d72:	e6e4      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016d74:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016d78:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	4290      	cmp	r0, r2
 8016d80:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8016d84:	d06b      	beq.n	8016e5e <uxr_read_framed_msg+0x34a>
 8016d86:	18a3      	adds	r3, r4, r2
 8016d88:	f102 0c01 	add.w	ip, r2, #1
 8016d8c:	493e      	ldr	r1, [pc, #248]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016d8e:	789f      	ldrb	r7, [r3, #2]
 8016d90:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016d94:	fba1 8303 	umull	r8, r3, r1, r3
 8016d98:	089b      	lsrs	r3, r3, #2
 8016d9a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016d9e:	fb08 c313 	mls	r3, r8, r3, ip
 8016da2:	2f7d      	cmp	r7, #125	@ 0x7d
 8016da4:	fa5f fc83 	uxtb.w	ip, r3
 8016da8:	f000 80d8 	beq.w	8016f5c <uxr_read_framed_msg+0x448>
 8016dac:	2f7e      	cmp	r7, #126	@ 0x7e
 8016dae:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016db2:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 8016db6:	d052      	beq.n	8016e5e <uxr_read_framed_msg+0x34a>
 8016db8:	2302      	movs	r3, #2
 8016dba:	7023      	strb	r3, [r4, #0]
 8016dbc:	e6bf      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016dbe:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016dc2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016dc6:	4930      	ldr	r1, [pc, #192]	@ (8016e88 <uxr_read_framed_msg+0x374>)
 8016dc8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016dcc:	e004      	b.n	8016dd8 <uxr_read_framed_msg+0x2c4>
 8016dce:	78bb      	ldrb	r3, [r7, #2]
 8016dd0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016dd4:	2b7e      	cmp	r3, #126	@ 0x7e
 8016dd6:	d02a      	beq.n	8016e2e <uxr_read_framed_msg+0x31a>
 8016dd8:	1c50      	adds	r0, r2, #1
 8016dda:	0843      	lsrs	r3, r0, #1
 8016ddc:	fba1 e303 	umull	lr, r3, r1, r3
 8016de0:	089b      	lsrs	r3, r3, #2
 8016de2:	fb0c 0013 	mls	r0, ip, r3, r0
 8016de6:	4590      	cmp	r8, r2
 8016de8:	eb04 0702 	add.w	r7, r4, r2
 8016dec:	b2c2      	uxtb	r2, r0
 8016dee:	d1ee      	bne.n	8016dce <uxr_read_framed_msg+0x2ba>
 8016df0:	e6dd      	b.n	8016bae <uxr_read_framed_msg+0x9a>
 8016df2:	3002      	adds	r0, #2
 8016df4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016df8:	eb04 0a02 	add.w	sl, r4, r2
 8016dfc:	fba9 e20e 	umull	lr, r2, r9, lr
 8016e00:	0892      	lsrs	r2, r2, #2
 8016e02:	45e0      	cmp	r8, ip
 8016e04:	fb01 0012 	mls	r0, r1, r2, r0
 8016e08:	f43f af36 	beq.w	8016c78 <uxr_read_framed_msg+0x164>
 8016e0c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016e10:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016e14:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016e18:	d049      	beq.n	8016eae <uxr_read_framed_msg+0x39a>
 8016e1a:	f08e 0e20 	eor.w	lr, lr, #32
 8016e1e:	e704      	b.n	8016c2a <uxr_read_framed_msg+0x116>
 8016e20:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016e24:	f43f af2d 	beq.w	8016c82 <uxr_read_framed_msg+0x16e>
 8016e28:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016e2c:	d151      	bne.n	8016ed2 <uxr_read_framed_msg+0x3be>
 8016e2e:	2301      	movs	r3, #1
 8016e30:	7023      	strb	r3, [r4, #0]
 8016e32:	e684      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016e34:	4651      	mov	r1, sl
 8016e36:	f8cd b000 	str.w	fp, [sp]
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e40:	9103      	str	r1, [sp, #12]
 8016e42:	4632      	mov	r2, r6
 8016e44:	4620      	mov	r0, r4
 8016e46:	f7ff fde1 	bl	8016a0c <uxr_framing_read_transport>
 8016e4a:	fab0 f080 	clz	r0, r0
 8016e4e:	9903      	ldr	r1, [sp, #12]
 8016e50:	0940      	lsrs	r0, r0, #5
 8016e52:	e671      	b.n	8016b38 <uxr_read_framed_msg+0x24>
 8016e54:	4651      	mov	r1, sl
 8016e56:	f8cd b000 	str.w	fp, [sp]
 8016e5a:	2302      	movs	r3, #2
 8016e5c:	e7ee      	b.n	8016e3c <uxr_read_framed_msg+0x328>
 8016e5e:	2304      	movs	r3, #4
 8016e60:	9301      	str	r3, [sp, #4]
 8016e62:	f8cd b000 	str.w	fp, [sp]
 8016e66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e68:	4632      	mov	r2, r6
 8016e6a:	4651      	mov	r1, sl
 8016e6c:	4620      	mov	r0, r4
 8016e6e:	f7ff fdcd 	bl	8016a0c <uxr_framing_read_transport>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	f47f ae63 	bne.w	8016b3e <uxr_read_framed_msg+0x2a>
 8016e78:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8016e7c:	387e      	subs	r0, #126	@ 0x7e
 8016e7e:	4651      	mov	r1, sl
 8016e80:	bf18      	it	ne
 8016e82:	2001      	movne	r0, #1
 8016e84:	e658      	b.n	8016b38 <uxr_read_framed_msg+0x24>
 8016e86:	bf00      	nop
 8016e88:	30c30c31 	.word	0x30c30c31
 8016e8c:	08021374 	.word	0x08021374
 8016e90:	2305      	movs	r3, #5
 8016e92:	9301      	str	r3, [sp, #4]
 8016e94:	f8cd b000 	str.w	fp, [sp]
 8016e98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e9a:	f7ff fdb7 	bl	8016a0c <uxr_framing_read_transport>
 8016e9e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016ea2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	f43f ae81 	beq.w	8016bae <uxr_read_framed_msg+0x9a>
 8016eac:	e642      	b.n	8016b34 <uxr_read_framed_msg+0x20>
 8016eae:	42bb      	cmp	r3, r7
 8016eb0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016eb4:	f43f aee5 	beq.w	8016c82 <uxr_read_framed_msg+0x16e>
 8016eb8:	2301      	movs	r3, #1
 8016eba:	7023      	strb	r3, [r4, #0]
 8016ebc:	e63f      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016ebe:	4651      	mov	r1, sl
 8016ec0:	f8cd b000 	str.w	fp, [sp]
 8016ec4:	2303      	movs	r3, #3
 8016ec6:	e7b9      	b.n	8016e3c <uxr_read_framed_msg+0x328>
 8016ec8:	2305      	movs	r3, #5
 8016eca:	7023      	strb	r3, [r4, #0]
 8016ecc:	e637      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016ece:	f43f aed8 	beq.w	8016c82 <uxr_read_framed_msg+0x16e>
 8016ed2:	1afb      	subs	r3, r7, r3
 8016ed4:	3302      	adds	r3, #2
 8016ed6:	e9cd b300 	strd	fp, r3, [sp]
 8016eda:	4651      	mov	r1, sl
 8016edc:	e7af      	b.n	8016e3e <uxr_read_framed_msg+0x32a>
 8016ede:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016ee0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016ee4:	7013      	strb	r3, [r2, #0]
 8016ee6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016ee8:	b005      	add	sp, #20
 8016eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eee:	4287      	cmp	r7, r0
 8016ef0:	d0a0      	beq.n	8016e34 <uxr_read_framed_msg+0x320>
 8016ef2:	4423      	add	r3, r4
 8016ef4:	3202      	adds	r2, #2
 8016ef6:	7898      	ldrb	r0, [r3, #2]
 8016ef8:	0853      	lsrs	r3, r2, #1
 8016efa:	fba1 e303 	umull	lr, r3, r1, r3
 8016efe:	089b      	lsrs	r3, r3, #2
 8016f00:	fb08 2213 	mls	r2, r8, r3, r2
 8016f04:	287e      	cmp	r0, #126	@ 0x7e
 8016f06:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f0a:	d064      	beq.n	8016fd6 <uxr_read_framed_msg+0x4c2>
 8016f0c:	f080 0120 	eor.w	r1, r0, #32
 8016f10:	e642      	b.n	8016b98 <uxr_read_framed_msg+0x84>
 8016f12:	45bc      	cmp	ip, r7
 8016f14:	d09e      	beq.n	8016e54 <uxr_read_framed_msg+0x340>
 8016f16:	4423      	add	r3, r4
 8016f18:	3202      	adds	r2, #2
 8016f1a:	7898      	ldrb	r0, [r3, #2]
 8016f1c:	0853      	lsrs	r3, r2, #1
 8016f1e:	fba1 e303 	umull	lr, r3, r1, r3
 8016f22:	089b      	lsrs	r3, r3, #2
 8016f24:	fb08 2213 	mls	r2, r8, r3, r2
 8016f28:	287e      	cmp	r0, #126	@ 0x7e
 8016f2a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f2e:	d061      	beq.n	8016ff4 <uxr_read_framed_msg+0x4e0>
 8016f30:	f080 0020 	eor.w	r0, r0, #32
 8016f34:	e65e      	b.n	8016bf4 <uxr_read_framed_msg+0xe0>
 8016f36:	4567      	cmp	r7, ip
 8016f38:	f43f af7c 	beq.w	8016e34 <uxr_read_framed_msg+0x320>
 8016f3c:	4423      	add	r3, r4
 8016f3e:	3202      	adds	r2, #2
 8016f40:	7898      	ldrb	r0, [r3, #2]
 8016f42:	0853      	lsrs	r3, r2, #1
 8016f44:	fba1 e303 	umull	lr, r3, r1, r3
 8016f48:	089b      	lsrs	r3, r3, #2
 8016f4a:	fb08 2213 	mls	r2, r8, r3, r2
 8016f4e:	287e      	cmp	r0, #126	@ 0x7e
 8016f50:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f54:	d03f      	beq.n	8016fd6 <uxr_read_framed_msg+0x4c2>
 8016f56:	f080 0020 	eor.w	r0, r0, #32
 8016f5a:	e6b4      	b.n	8016cc6 <uxr_read_framed_msg+0x1b2>
 8016f5c:	4560      	cmp	r0, ip
 8016f5e:	f43f af7e 	beq.w	8016e5e <uxr_read_framed_msg+0x34a>
 8016f62:	4423      	add	r3, r4
 8016f64:	3202      	adds	r2, #2
 8016f66:	7898      	ldrb	r0, [r3, #2]
 8016f68:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016f6c:	0853      	lsrs	r3, r2, #1
 8016f6e:	fba1 e303 	umull	lr, r3, r1, r3
 8016f72:	089b      	lsrs	r3, r3, #2
 8016f74:	fb08 2213 	mls	r2, r8, r3, r2
 8016f78:	287e      	cmp	r0, #126	@ 0x7e
 8016f7a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016f7e:	f43f af6e 	beq.w	8016e5e <uxr_read_framed_msg+0x34a>
 8016f82:	f080 0020 	eor.w	r0, r0, #32
 8016f86:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016f8a:	e715      	b.n	8016db8 <uxr_read_framed_msg+0x2a4>
 8016f8c:	4567      	cmp	r7, ip
 8016f8e:	f43f af61 	beq.w	8016e54 <uxr_read_framed_msg+0x340>
 8016f92:	4423      	add	r3, r4
 8016f94:	3202      	adds	r2, #2
 8016f96:	7898      	ldrb	r0, [r3, #2]
 8016f98:	0853      	lsrs	r3, r2, #1
 8016f9a:	fba1 e303 	umull	lr, r3, r1, r3
 8016f9e:	089b      	lsrs	r3, r3, #2
 8016fa0:	fb08 2213 	mls	r2, r8, r3, r2
 8016fa4:	287e      	cmp	r0, #126	@ 0x7e
 8016fa6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016faa:	d023      	beq.n	8016ff4 <uxr_read_framed_msg+0x4e0>
 8016fac:	f080 0020 	eor.w	r0, r0, #32
 8016fb0:	e6b6      	b.n	8016d20 <uxr_read_framed_msg+0x20c>
 8016fb2:	45bc      	cmp	ip, r7
 8016fb4:	d083      	beq.n	8016ebe <uxr_read_framed_msg+0x3aa>
 8016fb6:	4423      	add	r3, r4
 8016fb8:	3202      	adds	r2, #2
 8016fba:	7898      	ldrb	r0, [r3, #2]
 8016fbc:	0853      	lsrs	r3, r2, #1
 8016fbe:	fba1 e303 	umull	lr, r3, r1, r3
 8016fc2:	089b      	lsrs	r3, r3, #2
 8016fc4:	fb08 2213 	mls	r2, r8, r3, r2
 8016fc8:	287e      	cmp	r0, #126	@ 0x7e
 8016fca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016fce:	d01f      	beq.n	8017010 <uxr_read_framed_msg+0x4fc>
 8016fd0:	f080 0020 	eor.w	r0, r0, #32
 8016fd4:	e6c7      	b.n	8016d66 <uxr_read_framed_msg+0x252>
 8016fd6:	2701      	movs	r7, #1
 8016fd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016fda:	f8cd b000 	str.w	fp, [sp]
 8016fde:	9701      	str	r7, [sp, #4]
 8016fe0:	4632      	mov	r2, r6
 8016fe2:	4651      	mov	r1, sl
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	f7ff fd11 	bl	8016a0c <uxr_framing_read_transport>
 8016fea:	2800      	cmp	r0, #0
 8016fec:	f47f ada7 	bne.w	8016b3e <uxr_read_framed_msg+0x2a>
 8016ff0:	7027      	strb	r7, [r4, #0]
 8016ff2:	e5a4      	b.n	8016b3e <uxr_read_framed_msg+0x2a>
 8016ff4:	f8cd b000 	str.w	fp, [sp]
 8016ff8:	2302      	movs	r3, #2
 8016ffa:	9301      	str	r3, [sp, #4]
 8016ffc:	4632      	mov	r2, r6
 8016ffe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017000:	4651      	mov	r1, sl
 8017002:	4620      	mov	r0, r4
 8017004:	f7ff fd02 	bl	8016a0c <uxr_framing_read_transport>
 8017008:	2800      	cmp	r0, #0
 801700a:	f47f ad98 	bne.w	8016b3e <uxr_read_framed_msg+0x2a>
 801700e:	e70e      	b.n	8016e2e <uxr_read_framed_msg+0x31a>
 8017010:	f8cd b000 	str.w	fp, [sp]
 8017014:	2303      	movs	r3, #3
 8017016:	e7f0      	b.n	8016ffa <uxr_read_framed_msg+0x4e6>

08017018 <uxr_stream_id>:
 8017018:	2901      	cmp	r1, #1
 801701a:	b082      	sub	sp, #8
 801701c:	4603      	mov	r3, r0
 801701e:	d011      	beq.n	8017044 <uxr_stream_id+0x2c>
 8017020:	2902      	cmp	r1, #2
 8017022:	f04f 0c00 	mov.w	ip, #0
 8017026:	d00a      	beq.n	801703e <uxr_stream_id+0x26>
 8017028:	2000      	movs	r0, #0
 801702a:	f36c 0007 	bfi	r0, ip, #0, #8
 801702e:	f363 200f 	bfi	r0, r3, #8, #8
 8017032:	f361 4017 	bfi	r0, r1, #16, #8
 8017036:	f362 601f 	bfi	r0, r2, #24, #8
 801703a:	b002      	add	sp, #8
 801703c:	4770      	bx	lr
 801703e:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8017042:	e7f1      	b.n	8017028 <uxr_stream_id+0x10>
 8017044:	f100 0c01 	add.w	ip, r0, #1
 8017048:	fa5f fc8c 	uxtb.w	ip, ip
 801704c:	e7ec      	b.n	8017028 <uxr_stream_id+0x10>
 801704e:	bf00      	nop

08017050 <uxr_stream_id_from_raw>:
 8017050:	b082      	sub	sp, #8
 8017052:	4603      	mov	r3, r0
 8017054:	b130      	cbz	r0, 8017064 <uxr_stream_id_from_raw+0x14>
 8017056:	0602      	lsls	r2, r0, #24
 8017058:	d411      	bmi.n	801707e <uxr_stream_id_from_raw+0x2e>
 801705a:	1e42      	subs	r2, r0, #1
 801705c:	b2d2      	uxtb	r2, r2
 801705e:	f04f 0c01 	mov.w	ip, #1
 8017062:	e001      	b.n	8017068 <uxr_stream_id_from_raw+0x18>
 8017064:	4684      	mov	ip, r0
 8017066:	4602      	mov	r2, r0
 8017068:	2000      	movs	r0, #0
 801706a:	f363 0007 	bfi	r0, r3, #0, #8
 801706e:	f362 200f 	bfi	r0, r2, #8, #8
 8017072:	f36c 4017 	bfi	r0, ip, #16, #8
 8017076:	f361 601f 	bfi	r0, r1, #24, #8
 801707a:	b002      	add	sp, #8
 801707c:	4770      	bx	lr
 801707e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8017082:	f04f 0c02 	mov.w	ip, #2
 8017086:	e7ef      	b.n	8017068 <uxr_stream_id_from_raw+0x18>

08017088 <uxr_init_stream_storage>:
 8017088:	2300      	movs	r3, #0
 801708a:	7403      	strb	r3, [r0, #16]
 801708c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8017090:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8017094:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8017098:	4770      	bx	lr
 801709a:	bf00      	nop

0801709c <uxr_reset_stream_storage>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	7c03      	ldrb	r3, [r0, #16]
 80170a0:	4604      	mov	r4, r0
 80170a2:	b153      	cbz	r3, 80170ba <uxr_reset_stream_storage+0x1e>
 80170a4:	4606      	mov	r6, r0
 80170a6:	2500      	movs	r5, #0
 80170a8:	4630      	mov	r0, r6
 80170aa:	f005 fb63 	bl	801c774 <uxr_reset_output_best_effort_stream>
 80170ae:	7c23      	ldrb	r3, [r4, #16]
 80170b0:	3501      	adds	r5, #1
 80170b2:	42ab      	cmp	r3, r5
 80170b4:	f106 0610 	add.w	r6, r6, #16
 80170b8:	d8f6      	bhi.n	80170a8 <uxr_reset_stream_storage+0xc>
 80170ba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80170be:	b163      	cbz	r3, 80170da <uxr_reset_stream_storage+0x3e>
 80170c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80170c4:	2500      	movs	r5, #0
 80170c6:	4630      	mov	r0, r6
 80170c8:	f005 f964 	bl	801c394 <uxr_reset_input_best_effort_stream>
 80170cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80170d0:	3501      	adds	r5, #1
 80170d2:	42ab      	cmp	r3, r5
 80170d4:	f106 0602 	add.w	r6, r6, #2
 80170d8:	d8f5      	bhi.n	80170c6 <uxr_reset_stream_storage+0x2a>
 80170da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80170de:	b163      	cbz	r3, 80170fa <uxr_reset_stream_storage+0x5e>
 80170e0:	f104 0618 	add.w	r6, r4, #24
 80170e4:	2500      	movs	r5, #0
 80170e6:	4630      	mov	r0, r6
 80170e8:	f005 fbee 	bl	801c8c8 <uxr_reset_output_reliable_stream>
 80170ec:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80170f0:	3501      	adds	r5, #1
 80170f2:	42ab      	cmp	r3, r5
 80170f4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80170f8:	d8f5      	bhi.n	80170e6 <uxr_reset_stream_storage+0x4a>
 80170fa:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80170fe:	b163      	cbz	r3, 801711a <uxr_reset_stream_storage+0x7e>
 8017100:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8017104:	2500      	movs	r5, #0
 8017106:	4630      	mov	r0, r6
 8017108:	f005 f9b4 	bl	801c474 <uxr_reset_input_reliable_stream>
 801710c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017110:	3501      	adds	r5, #1
 8017112:	42ab      	cmp	r3, r5
 8017114:	f106 0618 	add.w	r6, r6, #24
 8017118:	d8f5      	bhi.n	8017106 <uxr_reset_stream_storage+0x6a>
 801711a:	bd70      	pop	{r4, r5, r6, pc}

0801711c <uxr_add_output_best_effort_buffer>:
 801711c:	b510      	push	{r4, lr}
 801711e:	7c04      	ldrb	r4, [r0, #16]
 8017120:	f104 0c01 	add.w	ip, r4, #1
 8017124:	b082      	sub	sp, #8
 8017126:	f880 c010 	strb.w	ip, [r0, #16]
 801712a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801712e:	f005 fb17 	bl	801c760 <uxr_init_output_best_effort_stream>
 8017132:	2201      	movs	r2, #1
 8017134:	4611      	mov	r1, r2
 8017136:	4620      	mov	r0, r4
 8017138:	b002      	add	sp, #8
 801713a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801713e:	f7ff bf6b 	b.w	8017018 <uxr_stream_id>
 8017142:	bf00      	nop

08017144 <uxr_add_output_reliable_buffer>:
 8017144:	b510      	push	{r4, lr}
 8017146:	b084      	sub	sp, #16
 8017148:	4684      	mov	ip, r0
 801714a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801714e:	9000      	str	r0, [sp, #0]
 8017150:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8017154:	2028      	movs	r0, #40	@ 0x28
 8017156:	fb00 c004 	mla	r0, r0, r4, ip
 801715a:	f104 0e01 	add.w	lr, r4, #1
 801715e:	3018      	adds	r0, #24
 8017160:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8017164:	f005 fb78 	bl	801c858 <uxr_init_output_reliable_stream>
 8017168:	2201      	movs	r2, #1
 801716a:	2102      	movs	r1, #2
 801716c:	4620      	mov	r0, r4
 801716e:	b004      	add	sp, #16
 8017170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017174:	f7ff bf50 	b.w	8017018 <uxr_stream_id>

08017178 <uxr_add_input_best_effort_buffer>:
 8017178:	b510      	push	{r4, lr}
 801717a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801717e:	1c62      	adds	r2, r4, #1
 8017180:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8017184:	b082      	sub	sp, #8
 8017186:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801718a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801718e:	f005 f8fd 	bl	801c38c <uxr_init_input_best_effort_stream>
 8017192:	2200      	movs	r2, #0
 8017194:	2101      	movs	r1, #1
 8017196:	4620      	mov	r0, r4
 8017198:	b002      	add	sp, #8
 801719a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801719e:	f7ff bf3b 	b.w	8017018 <uxr_stream_id>
 80171a2:	bf00      	nop

080171a4 <uxr_add_input_reliable_buffer>:
 80171a4:	b510      	push	{r4, lr}
 80171a6:	b084      	sub	sp, #16
 80171a8:	4684      	mov	ip, r0
 80171aa:	9806      	ldr	r0, [sp, #24]
 80171ac:	9000      	str	r0, [sp, #0]
 80171ae:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80171b2:	2018      	movs	r0, #24
 80171b4:	fb00 c004 	mla	r0, r0, r4, ip
 80171b8:	f104 0e01 	add.w	lr, r4, #1
 80171bc:	3048      	adds	r0, #72	@ 0x48
 80171be:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80171c2:	f005 f92b 	bl	801c41c <uxr_init_input_reliable_stream>
 80171c6:	2200      	movs	r2, #0
 80171c8:	2102      	movs	r1, #2
 80171ca:	4620      	mov	r0, r4
 80171cc:	b004      	add	sp, #16
 80171ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171d2:	f7ff bf21 	b.w	8017018 <uxr_stream_id>
 80171d6:	bf00      	nop

080171d8 <uxr_get_output_best_effort_stream>:
 80171d8:	7c03      	ldrb	r3, [r0, #16]
 80171da:	428b      	cmp	r3, r1
 80171dc:	bf8c      	ite	hi
 80171de:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80171e2:	2000      	movls	r0, #0
 80171e4:	4770      	bx	lr
 80171e6:	bf00      	nop

080171e8 <uxr_get_output_reliable_stream>:
 80171e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80171ec:	428b      	cmp	r3, r1
 80171ee:	bf83      	ittte	hi
 80171f0:	2328      	movhi	r3, #40	@ 0x28
 80171f2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80171f6:	3018      	addhi	r0, #24
 80171f8:	2000      	movls	r0, #0
 80171fa:	4770      	bx	lr

080171fc <uxr_get_input_best_effort_stream>:
 80171fc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8017200:	428b      	cmp	r3, r1
 8017202:	bf86      	itte	hi
 8017204:	3121      	addhi	r1, #33	@ 0x21
 8017206:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801720a:	2000      	movls	r0, #0
 801720c:	4770      	bx	lr
 801720e:	bf00      	nop

08017210 <uxr_get_input_reliable_stream>:
 8017210:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8017214:	428b      	cmp	r3, r1
 8017216:	bf83      	ittte	hi
 8017218:	2318      	movhi	r3, #24
 801721a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801721e:	3048      	addhi	r0, #72	@ 0x48
 8017220:	2000      	movls	r0, #0
 8017222:	4770      	bx	lr

08017224 <uxr_output_streams_confirmed>:
 8017224:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017228:	b183      	cbz	r3, 801724c <uxr_output_streams_confirmed+0x28>
 801722a:	b570      	push	{r4, r5, r6, lr}
 801722c:	4606      	mov	r6, r0
 801722e:	f100 0518 	add.w	r5, r0, #24
 8017232:	2400      	movs	r4, #0
 8017234:	e001      	b.n	801723a <uxr_output_streams_confirmed+0x16>
 8017236:	3528      	adds	r5, #40	@ 0x28
 8017238:	b138      	cbz	r0, 801724a <uxr_output_streams_confirmed+0x26>
 801723a:	4628      	mov	r0, r5
 801723c:	f005 fdac 	bl	801cd98 <uxr_is_output_up_to_date>
 8017240:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8017244:	3401      	adds	r4, #1
 8017246:	42a3      	cmp	r3, r4
 8017248:	d8f5      	bhi.n	8017236 <uxr_output_streams_confirmed+0x12>
 801724a:	bd70      	pop	{r4, r5, r6, pc}
 801724c:	2001      	movs	r0, #1
 801724e:	4770      	bx	lr

08017250 <uxr_buffer_submessage_header>:
 8017250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017252:	4604      	mov	r4, r0
 8017254:	460e      	mov	r6, r1
 8017256:	2104      	movs	r1, #4
 8017258:	4615      	mov	r5, r2
 801725a:	461f      	mov	r7, r3
 801725c:	f7f7 fbac 	bl	800e9b8 <ucdr_align_to>
 8017260:	2301      	movs	r3, #1
 8017262:	7523      	strb	r3, [r4, #20]
 8017264:	f047 0201 	orr.w	r2, r7, #1
 8017268:	462b      	mov	r3, r5
 801726a:	4631      	mov	r1, r6
 801726c:	4620      	mov	r0, r4
 801726e:	f000 fa2b 	bl	80176c8 <uxr_serialize_submessage_header>
 8017272:	4620      	mov	r0, r4
 8017274:	f7f7 fbb6 	bl	800e9e4 <ucdr_buffer_remaining>
 8017278:	42a8      	cmp	r0, r5
 801727a:	bf34      	ite	cc
 801727c:	2000      	movcc	r0, #0
 801727e:	2001      	movcs	r0, #1
 8017280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017282:	bf00      	nop

08017284 <uxr_read_submessage_header>:
 8017284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017288:	4604      	mov	r4, r0
 801728a:	460d      	mov	r5, r1
 801728c:	2104      	movs	r1, #4
 801728e:	4616      	mov	r6, r2
 8017290:	4698      	mov	r8, r3
 8017292:	f7f7 fb91 	bl	800e9b8 <ucdr_align_to>
 8017296:	4620      	mov	r0, r4
 8017298:	f7f7 fba4 	bl	800e9e4 <ucdr_buffer_remaining>
 801729c:	2803      	cmp	r0, #3
 801729e:	bf8c      	ite	hi
 80172a0:	2701      	movhi	r7, #1
 80172a2:	2700      	movls	r7, #0
 80172a4:	d802      	bhi.n	80172ac <uxr_read_submessage_header+0x28>
 80172a6:	4638      	mov	r0, r7
 80172a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172ac:	4633      	mov	r3, r6
 80172ae:	4642      	mov	r2, r8
 80172b0:	4620      	mov	r0, r4
 80172b2:	4629      	mov	r1, r5
 80172b4:	f000 fa1a 	bl	80176ec <uxr_deserialize_submessage_header>
 80172b8:	f898 3000 	ldrb.w	r3, [r8]
 80172bc:	f003 0201 	and.w	r2, r3, #1
 80172c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80172c4:	f888 3000 	strb.w	r3, [r8]
 80172c8:	7522      	strb	r2, [r4, #20]
 80172ca:	4638      	mov	r0, r7
 80172cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172d0 <uxr_submessage_padding>:
 80172d0:	f010 0003 	ands.w	r0, r0, #3
 80172d4:	bf18      	it	ne
 80172d6:	f1c0 0004 	rsbne	r0, r0, #4
 80172da:	4770      	bx	lr

080172dc <uxr_millis>:
 80172dc:	b510      	push	{r4, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	4669      	mov	r1, sp
 80172e2:	2001      	movs	r0, #1
 80172e4:	f7eb fe40 	bl	8002f68 <clock_gettime>
 80172e8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80172ec:	4b06      	ldr	r3, [pc, #24]	@ (8017308 <uxr_millis+0x2c>)
 80172ee:	fba0 0103 	umull	r0, r1, r0, r3
 80172f2:	1900      	adds	r0, r0, r4
 80172f4:	fb03 1102 	mla	r1, r3, r2, r1
 80172f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80172fc:	4a03      	ldr	r2, [pc, #12]	@ (801730c <uxr_millis+0x30>)
 80172fe:	2300      	movs	r3, #0
 8017300:	f7e9 fcb2 	bl	8000c68 <__aeabi_ldivmod>
 8017304:	b004      	add	sp, #16
 8017306:	bd10      	pop	{r4, pc}
 8017308:	3b9aca00 	.word	0x3b9aca00
 801730c:	000f4240 	.word	0x000f4240

08017310 <uxr_nanos>:
 8017310:	b510      	push	{r4, lr}
 8017312:	b084      	sub	sp, #16
 8017314:	4669      	mov	r1, sp
 8017316:	2001      	movs	r0, #1
 8017318:	f7eb fe26 	bl	8002f68 <clock_gettime>
 801731c:	4a06      	ldr	r2, [pc, #24]	@ (8017338 <uxr_nanos+0x28>)
 801731e:	9800      	ldr	r0, [sp, #0]
 8017320:	9902      	ldr	r1, [sp, #8]
 8017322:	9c01      	ldr	r4, [sp, #4]
 8017324:	fba0 0302 	umull	r0, r3, r0, r2
 8017328:	1840      	adds	r0, r0, r1
 801732a:	fb02 3304 	mla	r3, r2, r4, r3
 801732e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8017332:	b004      	add	sp, #16
 8017334:	bd10      	pop	{r4, pc}
 8017336:	bf00      	nop
 8017338:	3b9aca00 	.word	0x3b9aca00

0801733c <on_full_output_buffer_fragmented>:
 801733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017340:	460c      	mov	r4, r1
 8017342:	b08a      	sub	sp, #40	@ 0x28
 8017344:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8017348:	4606      	mov	r6, r0
 801734a:	f104 0008 	add.w	r0, r4, #8
 801734e:	f7ff ff4b 	bl	80171e8 <uxr_get_output_reliable_stream>
 8017352:	4605      	mov	r5, r0
 8017354:	f005 fd2a 	bl	801cdac <get_available_free_slots>
 8017358:	b968      	cbnz	r0, 8017376 <on_full_output_buffer_fragmented+0x3a>
 801735a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801735e:	4620      	mov	r0, r4
 8017360:	4798      	blx	r3
 8017362:	b918      	cbnz	r0, 801736c <on_full_output_buffer_fragmented+0x30>
 8017364:	2001      	movs	r0, #1
 8017366:	b00a      	add	sp, #40	@ 0x28
 8017368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801736c:	4628      	mov	r0, r5
 801736e:	f005 fd1d 	bl	801cdac <get_available_free_slots>
 8017372:	2800      	cmp	r0, #0
 8017374:	d0f6      	beq.n	8017364 <on_full_output_buffer_fragmented+0x28>
 8017376:	892a      	ldrh	r2, [r5, #8]
 8017378:	686b      	ldr	r3, [r5, #4]
 801737a:	fbb3 f8f2 	udiv	r8, r3, r2
 801737e:	89eb      	ldrh	r3, [r5, #14]
 8017380:	7b29      	ldrb	r1, [r5, #12]
 8017382:	fbb3 f0f2 	udiv	r0, r3, r2
 8017386:	fb02 3310 	mls	r3, r2, r0, r3
 801738a:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 801738e:	b29b      	uxth	r3, r3
 8017390:	fb08 f303 	mul.w	r3, r8, r3
 8017394:	31fc      	adds	r1, #252	@ 0xfc
 8017396:	f1a8 0804 	sub.w	r8, r8, #4
 801739a:	4441      	add	r1, r8
 801739c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80173a0:	b28f      	uxth	r7, r1
 80173a2:	6829      	ldr	r1, [r5, #0]
 80173a4:	3304      	adds	r3, #4
 80173a6:	1bd2      	subs	r2, r2, r7
 80173a8:	4419      	add	r1, r3
 80173aa:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 80173ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	4642      	mov	r2, r8
 80173b6:	2300      	movs	r3, #0
 80173b8:	a802      	add	r0, sp, #8
 80173ba:	f7f7 fad1 	bl	800e960 <ucdr_init_buffer_origin_offset>
 80173be:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80173c2:	f102 0308 	add.w	r3, r2, #8
 80173c6:	4543      	cmp	r3, r8
 80173c8:	d928      	bls.n	801741c <on_full_output_buffer_fragmented+0xe0>
 80173ca:	463a      	mov	r2, r7
 80173cc:	2300      	movs	r3, #0
 80173ce:	210d      	movs	r1, #13
 80173d0:	a802      	add	r0, sp, #8
 80173d2:	f7ff ff3d 	bl	8017250 <uxr_buffer_submessage_header>
 80173d6:	8929      	ldrh	r1, [r5, #8]
 80173d8:	89eb      	ldrh	r3, [r5, #14]
 80173da:	fbb3 f2f1 	udiv	r2, r3, r1
 80173de:	fb01 3312 	mls	r3, r1, r2, r3
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	686a      	ldr	r2, [r5, #4]
 80173e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80173ea:	fb02 f303 	mul.w	r3, r2, r3
 80173ee:	682a      	ldr	r2, [r5, #0]
 80173f0:	f842 8003 	str.w	r8, [r2, r3]
 80173f4:	89e8      	ldrh	r0, [r5, #14]
 80173f6:	2101      	movs	r1, #1
 80173f8:	f005 fcf6 	bl	801cde8 <uxr_seq_num_add>
 80173fc:	9904      	ldr	r1, [sp, #16]
 80173fe:	9a03      	ldr	r2, [sp, #12]
 8017400:	81e8      	strh	r0, [r5, #14]
 8017402:	1a52      	subs	r2, r2, r1
 8017404:	4630      	mov	r0, r6
 8017406:	f7f7 fabd 	bl	800e984 <ucdr_init_buffer>
 801740a:	4630      	mov	r0, r6
 801740c:	4910      	ldr	r1, [pc, #64]	@ (8017450 <on_full_output_buffer_fragmented+0x114>)
 801740e:	4622      	mov	r2, r4
 8017410:	f7f7 fa8c 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 8017414:	2000      	movs	r0, #0
 8017416:	b00a      	add	sp, #40	@ 0x28
 8017418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741c:	b292      	uxth	r2, r2
 801741e:	2302      	movs	r3, #2
 8017420:	210d      	movs	r1, #13
 8017422:	a802      	add	r0, sp, #8
 8017424:	f7ff ff14 	bl	8017250 <uxr_buffer_submessage_header>
 8017428:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801742c:	8928      	ldrh	r0, [r5, #8]
 801742e:	f103 0208 	add.w	r2, r3, #8
 8017432:	89eb      	ldrh	r3, [r5, #14]
 8017434:	fbb3 f1f0 	udiv	r1, r3, r0
 8017438:	fb00 3311 	mls	r3, r0, r1, r3
 801743c:	b29b      	uxth	r3, r3
 801743e:	6869      	ldr	r1, [r5, #4]
 8017440:	fbb1 f1f0 	udiv	r1, r1, r0
 8017444:	fb01 f303 	mul.w	r3, r1, r3
 8017448:	6829      	ldr	r1, [r5, #0]
 801744a:	50ca      	str	r2, [r1, r3]
 801744c:	e7d2      	b.n	80173f4 <on_full_output_buffer_fragmented+0xb8>
 801744e:	bf00      	nop
 8017450:	0801733d 	.word	0x0801733d

08017454 <uxr_prepare_output_stream>:
 8017454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017456:	b087      	sub	sp, #28
 8017458:	2707      	movs	r7, #7
 801745a:	9202      	str	r2, [sp, #8]
 801745c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801745e:	2500      	movs	r5, #0
 8017460:	3204      	adds	r2, #4
 8017462:	e9cd 7500 	strd	r7, r5, [sp]
 8017466:	461c      	mov	r4, r3
 8017468:	4606      	mov	r6, r0
 801746a:	f7ff f807 	bl	801647c <uxr_prepare_stream_to_write_submessage>
 801746e:	f080 0201 	eor.w	r2, r0, #1
 8017472:	b2d2      	uxtb	r2, r2
 8017474:	75a2      	strb	r2, [r4, #22]
 8017476:	b112      	cbz	r2, 801747e <uxr_prepare_output_stream+0x2a>
 8017478:	4628      	mov	r0, r5
 801747a:	b007      	add	sp, #28
 801747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801747e:	aa05      	add	r2, sp, #20
 8017480:	9902      	ldr	r1, [sp, #8]
 8017482:	4630      	mov	r0, r6
 8017484:	f7ff f934 	bl	80166f0 <uxr_init_base_object_request>
 8017488:	a905      	add	r1, sp, #20
 801748a:	4605      	mov	r5, r0
 801748c:	4620      	mov	r0, r4
 801748e:	f001 f865 	bl	801855c <uxr_serialize_WRITE_DATA_Payload_Data>
 8017492:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8017496:	69a6      	ldr	r6, [r4, #24]
 8017498:	69e7      	ldr	r7, [r4, #28]
 801749a:	1a52      	subs	r2, r2, r1
 801749c:	4620      	mov	r0, r4
 801749e:	f7f7 fa71 	bl	800e984 <ucdr_init_buffer>
 80174a2:	4620      	mov	r0, r4
 80174a4:	463a      	mov	r2, r7
 80174a6:	4631      	mov	r1, r6
 80174a8:	f7f7 fa40 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 80174ac:	4628      	mov	r0, r5
 80174ae:	b007      	add	sp, #28
 80174b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174b2:	bf00      	nop

080174b4 <uxr_prepare_output_stream_fragmented>:
 80174b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174b8:	b093      	sub	sp, #76	@ 0x4c
 80174ba:	4605      	mov	r5, r0
 80174bc:	9107      	str	r1, [sp, #28]
 80174be:	3008      	adds	r0, #8
 80174c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80174c4:	9303      	str	r3, [sp, #12]
 80174c6:	9206      	str	r2, [sp, #24]
 80174c8:	f7ff fe8e 	bl	80171e8 <uxr_get_output_reliable_stream>
 80174cc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80174d0:	2b01      	cmp	r3, #1
 80174d2:	f000 8095 	beq.w	8017600 <uxr_prepare_output_stream_fragmented+0x14c>
 80174d6:	4604      	mov	r4, r0
 80174d8:	2800      	cmp	r0, #0
 80174da:	f000 8091 	beq.w	8017600 <uxr_prepare_output_stream_fragmented+0x14c>
 80174de:	f005 fc65 	bl	801cdac <get_available_free_slots>
 80174e2:	2800      	cmp	r0, #0
 80174e4:	f000 8087 	beq.w	80175f6 <uxr_prepare_output_stream_fragmented+0x142>
 80174e8:	8922      	ldrh	r2, [r4, #8]
 80174ea:	89e7      	ldrh	r7, [r4, #14]
 80174ec:	fbb7 f3f2 	udiv	r3, r7, r2
 80174f0:	fb02 7313 	mls	r3, r2, r3, r7
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	6861      	ldr	r1, [r4, #4]
 80174f8:	fbb1 f1f2 	udiv	r1, r1, r2
 80174fc:	6822      	ldr	r2, [r4, #0]
 80174fe:	9105      	str	r1, [sp, #20]
 8017500:	fb01 f303 	mul.w	r3, r1, r3
 8017504:	3304      	adds	r3, #4
 8017506:	eb02 0903 	add.w	r9, r2, r3
 801750a:	7b23      	ldrb	r3, [r4, #12]
 801750c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017510:	4543      	cmp	r3, r8
 8017512:	f1a1 0b04 	sub.w	fp, r1, #4
 8017516:	d37f      	bcc.n	8017618 <uxr_prepare_output_stream_fragmented+0x164>
 8017518:	f1ab 0a04 	sub.w	sl, fp, #4
 801751c:	ebaa 0a03 	sub.w	sl, sl, r3
 8017520:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8017522:	f8cd 8000 	str.w	r8, [sp]
 8017526:	fa1f f38a 	uxth.w	r3, sl
 801752a:	9304      	str	r3, [sp, #16]
 801752c:	465a      	mov	r2, fp
 801752e:	2300      	movs	r3, #0
 8017530:	4649      	mov	r1, r9
 8017532:	a80a      	add	r0, sp, #40	@ 0x28
 8017534:	f7f7 fa14 	bl	800e960 <ucdr_init_buffer_origin_offset>
 8017538:	f106 0a08 	add.w	sl, r6, #8
 801753c:	45da      	cmp	sl, fp
 801753e:	bf2c      	ite	cs
 8017540:	2300      	movcs	r3, #0
 8017542:	2301      	movcc	r3, #1
 8017544:	9a04      	ldr	r2, [sp, #16]
 8017546:	005b      	lsls	r3, r3, #1
 8017548:	210d      	movs	r1, #13
 801754a:	a80a      	add	r0, sp, #40	@ 0x28
 801754c:	f7ff fe80 	bl	8017250 <uxr_buffer_submessage_header>
 8017550:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017554:	fbb7 f2fc 	udiv	r2, r7, ip
 8017558:	fb0c 7212 	mls	r2, ip, r2, r7
 801755c:	b292      	uxth	r2, r2
 801755e:	6863      	ldr	r3, [r4, #4]
 8017560:	fbb3 f3fc 	udiv	r3, r3, ip
 8017564:	fb02 f303 	mul.w	r3, r2, r3
 8017568:	6822      	ldr	r2, [r4, #0]
 801756a:	2101      	movs	r1, #1
 801756c:	f842 b003 	str.w	fp, [r2, r3]
 8017570:	4638      	mov	r0, r7
 8017572:	f005 fc39 	bl	801cde8 <uxr_seq_num_add>
 8017576:	9b05      	ldr	r3, [sp, #20]
 8017578:	9e03      	ldr	r6, [sp, #12]
 801757a:	f1a3 0208 	sub.w	r2, r3, #8
 801757e:	f108 0104 	add.w	r1, r8, #4
 8017582:	4607      	mov	r7, r0
 8017584:	eba2 0208 	sub.w	r2, r2, r8
 8017588:	4449      	add	r1, r9
 801758a:	4630      	mov	r0, r6
 801758c:	f7f7 f9fa 	bl	800e984 <ucdr_init_buffer>
 8017590:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017592:	81e7      	strh	r7, [r4, #14]
 8017594:	1d1a      	adds	r2, r3, #4
 8017596:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801759a:	bf28      	it	cs
 801759c:	2200      	movcs	r2, #0
 801759e:	2300      	movs	r3, #0
 80175a0:	b292      	uxth	r2, r2
 80175a2:	2107      	movs	r1, #7
 80175a4:	4630      	mov	r0, r6
 80175a6:	f7ff fe53 	bl	8017250 <uxr_buffer_submessage_header>
 80175aa:	9906      	ldr	r1, [sp, #24]
 80175ac:	aa09      	add	r2, sp, #36	@ 0x24
 80175ae:	4628      	mov	r0, r5
 80175b0:	f7ff f89e 	bl	80166f0 <uxr_init_base_object_request>
 80175b4:	4604      	mov	r4, r0
 80175b6:	b320      	cbz	r0, 8017602 <uxr_prepare_output_stream_fragmented+0x14e>
 80175b8:	9e03      	ldr	r6, [sp, #12]
 80175ba:	a909      	add	r1, sp, #36	@ 0x24
 80175bc:	4630      	mov	r0, r6
 80175be:	f000 ffcd 	bl	801855c <uxr_serialize_WRITE_DATA_Payload_Data>
 80175c2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80175c6:	4630      	mov	r0, r6
 80175c8:	1a52      	subs	r2, r2, r1
 80175ca:	f7f7 f9db 	bl	800e984 <ucdr_init_buffer>
 80175ce:	9b07      	ldr	r3, [sp, #28]
 80175d0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80175d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80175d6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80175da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80175dc:	491a      	ldr	r1, [pc, #104]	@ (8017648 <uxr_prepare_output_stream_fragmented+0x194>)
 80175de:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80175e2:	4630      	mov	r0, r6
 80175e4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80175e8:	462a      	mov	r2, r5
 80175ea:	f7f7 f99f 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 80175ee:	4620      	mov	r0, r4
 80175f0:	b013      	add	sp, #76	@ 0x4c
 80175f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80175f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80175fa:	4628      	mov	r0, r5
 80175fc:	4798      	blx	r3
 80175fe:	b920      	cbnz	r0, 801760a <uxr_prepare_output_stream_fragmented+0x156>
 8017600:	2400      	movs	r4, #0
 8017602:	4620      	mov	r0, r4
 8017604:	b013      	add	sp, #76	@ 0x4c
 8017606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801760a:	4620      	mov	r0, r4
 801760c:	f005 fbce 	bl	801cdac <get_available_free_slots>
 8017610:	2800      	cmp	r0, #0
 8017612:	f47f af69 	bne.w	80174e8 <uxr_prepare_output_stream_fragmented+0x34>
 8017616:	e7f3      	b.n	8017600 <uxr_prepare_output_stream_fragmented+0x14c>
 8017618:	4638      	mov	r0, r7
 801761a:	2101      	movs	r1, #1
 801761c:	f005 fbe4 	bl	801cde8 <uxr_seq_num_add>
 8017620:	8921      	ldrh	r1, [r4, #8]
 8017622:	fbb0 f2f1 	udiv	r2, r0, r1
 8017626:	fb01 0212 	mls	r2, r1, r2, r0
 801762a:	b292      	uxth	r2, r2
 801762c:	6863      	ldr	r3, [r4, #4]
 801762e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017632:	fb02 f303 	mul.w	r3, r2, r3
 8017636:	6822      	ldr	r2, [r4, #0]
 8017638:	3304      	adds	r3, #4
 801763a:	eb02 0903 	add.w	r9, r2, r3
 801763e:	4607      	mov	r7, r0
 8017640:	7b23      	ldrb	r3, [r4, #12]
 8017642:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017646:	e767      	b.n	8017518 <uxr_prepare_output_stream_fragmented+0x64>
 8017648:	0801733d 	.word	0x0801733d

0801764c <uxr_serialize_message_header>:
 801764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017650:	4617      	mov	r7, r2
 8017652:	4604      	mov	r4, r0
 8017654:	461e      	mov	r6, r3
 8017656:	460d      	mov	r5, r1
 8017658:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801765c:	f7fc f962 	bl	8013924 <ucdr_serialize_uint8_t>
 8017660:	4639      	mov	r1, r7
 8017662:	4620      	mov	r0, r4
 8017664:	f7fc f95e 	bl	8013924 <ucdr_serialize_uint8_t>
 8017668:	4632      	mov	r2, r6
 801766a:	2101      	movs	r1, #1
 801766c:	4620      	mov	r0, r4
 801766e:	f7fc fa0f 	bl	8013a90 <ucdr_serialize_endian_uint16_t>
 8017672:	062b      	lsls	r3, r5, #24
 8017674:	d501      	bpl.n	801767a <uxr_serialize_message_header+0x2e>
 8017676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801767a:	4641      	mov	r1, r8
 801767c:	4620      	mov	r0, r4
 801767e:	2204      	movs	r2, #4
 8017680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017684:	f7fb bf04 	b.w	8013490 <ucdr_serialize_array_uint8_t>

08017688 <uxr_deserialize_message_header>:
 8017688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801768c:	4617      	mov	r7, r2
 801768e:	4604      	mov	r4, r0
 8017690:	461e      	mov	r6, r3
 8017692:	460d      	mov	r5, r1
 8017694:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017698:	f7fc f95a 	bl	8013950 <ucdr_deserialize_uint8_t>
 801769c:	4639      	mov	r1, r7
 801769e:	4620      	mov	r0, r4
 80176a0:	f7fc f956 	bl	8013950 <ucdr_deserialize_uint8_t>
 80176a4:	4632      	mov	r2, r6
 80176a6:	2101      	movs	r1, #1
 80176a8:	4620      	mov	r0, r4
 80176aa:	f7fc fae7 	bl	8013c7c <ucdr_deserialize_endian_uint16_t>
 80176ae:	f995 3000 	ldrsb.w	r3, [r5]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	da01      	bge.n	80176ba <uxr_deserialize_message_header+0x32>
 80176b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ba:	4641      	mov	r1, r8
 80176bc:	4620      	mov	r0, r4
 80176be:	2204      	movs	r2, #4
 80176c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176c4:	f7fb bf48 	b.w	8013558 <ucdr_deserialize_array_uint8_t>

080176c8 <uxr_serialize_submessage_header>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	4616      	mov	r6, r2
 80176cc:	4604      	mov	r4, r0
 80176ce:	461d      	mov	r5, r3
 80176d0:	f7fc f928 	bl	8013924 <ucdr_serialize_uint8_t>
 80176d4:	4631      	mov	r1, r6
 80176d6:	4620      	mov	r0, r4
 80176d8:	f7fc f924 	bl	8013924 <ucdr_serialize_uint8_t>
 80176dc:	462a      	mov	r2, r5
 80176de:	4620      	mov	r0, r4
 80176e0:	2101      	movs	r1, #1
 80176e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176e6:	f7fc b9d3 	b.w	8013a90 <ucdr_serialize_endian_uint16_t>
 80176ea:	bf00      	nop

080176ec <uxr_deserialize_submessage_header>:
 80176ec:	b570      	push	{r4, r5, r6, lr}
 80176ee:	4616      	mov	r6, r2
 80176f0:	4604      	mov	r4, r0
 80176f2:	461d      	mov	r5, r3
 80176f4:	f7fc f92c 	bl	8013950 <ucdr_deserialize_uint8_t>
 80176f8:	4631      	mov	r1, r6
 80176fa:	4620      	mov	r0, r4
 80176fc:	f7fc f928 	bl	8013950 <ucdr_deserialize_uint8_t>
 8017700:	462a      	mov	r2, r5
 8017702:	4620      	mov	r0, r4
 8017704:	2101      	movs	r1, #1
 8017706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801770a:	f7fc bab7 	b.w	8013c7c <ucdr_deserialize_endian_uint16_t>
 801770e:	bf00      	nop

08017710 <uxr_serialize_CLIENT_Representation>:
 8017710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017714:	2204      	movs	r2, #4
 8017716:	460e      	mov	r6, r1
 8017718:	4605      	mov	r5, r0
 801771a:	f7fb feb9 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801771e:	2202      	movs	r2, #2
 8017720:	1d31      	adds	r1, r6, #4
 8017722:	4604      	mov	r4, r0
 8017724:	4628      	mov	r0, r5
 8017726:	f7fb feb3 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801772a:	2202      	movs	r2, #2
 801772c:	4004      	ands	r4, r0
 801772e:	1db1      	adds	r1, r6, #6
 8017730:	4628      	mov	r0, r5
 8017732:	f7fb fead 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8017736:	b2e4      	uxtb	r4, r4
 8017738:	2204      	movs	r2, #4
 801773a:	4004      	ands	r4, r0
 801773c:	f106 0108 	add.w	r1, r6, #8
 8017740:	4628      	mov	r0, r5
 8017742:	f7fb fea5 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8017746:	7b31      	ldrb	r1, [r6, #12]
 8017748:	ea00 0804 	and.w	r8, r0, r4
 801774c:	4628      	mov	r0, r5
 801774e:	f7fc f8e9 	bl	8013924 <ucdr_serialize_uint8_t>
 8017752:	7b71      	ldrb	r1, [r6, #13]
 8017754:	ea08 0800 	and.w	r8, r8, r0
 8017758:	4628      	mov	r0, r5
 801775a:	f7fc f8b5 	bl	80138c8 <ucdr_serialize_bool>
 801775e:	7b73      	ldrb	r3, [r6, #13]
 8017760:	ea08 0800 	and.w	r8, r8, r0
 8017764:	b93b      	cbnz	r3, 8017776 <uxr_serialize_CLIENT_Representation+0x66>
 8017766:	8bb1      	ldrh	r1, [r6, #28]
 8017768:	4628      	mov	r0, r5
 801776a:	f7fc f907 	bl	801397c <ucdr_serialize_uint16_t>
 801776e:	ea08 0000 	and.w	r0, r8, r0
 8017772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017776:	6931      	ldr	r1, [r6, #16]
 8017778:	4628      	mov	r0, r5
 801777a:	f7fc faef 	bl	8013d5c <ucdr_serialize_uint32_t>
 801777e:	6933      	ldr	r3, [r6, #16]
 8017780:	b1e3      	cbz	r3, 80177bc <uxr_serialize_CLIENT_Representation+0xac>
 8017782:	b1c0      	cbz	r0, 80177b6 <uxr_serialize_CLIENT_Representation+0xa6>
 8017784:	4637      	mov	r7, r6
 8017786:	f04f 0900 	mov.w	r9, #0
 801778a:	e001      	b.n	8017790 <uxr_serialize_CLIENT_Representation+0x80>
 801778c:	3708      	adds	r7, #8
 801778e:	b194      	cbz	r4, 80177b6 <uxr_serialize_CLIENT_Representation+0xa6>
 8017790:	6979      	ldr	r1, [r7, #20]
 8017792:	4628      	mov	r0, r5
 8017794:	f004 fde4 	bl	801c360 <ucdr_serialize_string>
 8017798:	69b9      	ldr	r1, [r7, #24]
 801779a:	4604      	mov	r4, r0
 801779c:	4628      	mov	r0, r5
 801779e:	f004 fddf 	bl	801c360 <ucdr_serialize_string>
 80177a2:	6933      	ldr	r3, [r6, #16]
 80177a4:	f109 0901 	add.w	r9, r9, #1
 80177a8:	4004      	ands	r4, r0
 80177aa:	4599      	cmp	r9, r3
 80177ac:	b2e4      	uxtb	r4, r4
 80177ae:	d3ed      	bcc.n	801778c <uxr_serialize_CLIENT_Representation+0x7c>
 80177b0:	ea08 0804 	and.w	r8, r8, r4
 80177b4:	e7d7      	b.n	8017766 <uxr_serialize_CLIENT_Representation+0x56>
 80177b6:	f04f 0800 	mov.w	r8, #0
 80177ba:	e7d4      	b.n	8017766 <uxr_serialize_CLIENT_Representation+0x56>
 80177bc:	ea08 0800 	and.w	r8, r8, r0
 80177c0:	e7d1      	b.n	8017766 <uxr_serialize_CLIENT_Representation+0x56>
 80177c2:	bf00      	nop

080177c4 <uxr_deserialize_CLIENT_Representation>:
 80177c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177c8:	2204      	movs	r2, #4
 80177ca:	460c      	mov	r4, r1
 80177cc:	4605      	mov	r5, r0
 80177ce:	f7fb fec3 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80177d2:	2202      	movs	r2, #2
 80177d4:	1d21      	adds	r1, r4, #4
 80177d6:	4606      	mov	r6, r0
 80177d8:	4628      	mov	r0, r5
 80177da:	f7fb febd 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80177de:	2202      	movs	r2, #2
 80177e0:	4006      	ands	r6, r0
 80177e2:	1da1      	adds	r1, r4, #6
 80177e4:	4628      	mov	r0, r5
 80177e6:	f7fb feb7 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80177ea:	b2f6      	uxtb	r6, r6
 80177ec:	2204      	movs	r2, #4
 80177ee:	4006      	ands	r6, r0
 80177f0:	f104 0108 	add.w	r1, r4, #8
 80177f4:	4628      	mov	r0, r5
 80177f6:	f7fb feaf 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80177fa:	f104 010c 	add.w	r1, r4, #12
 80177fe:	ea00 0706 	and.w	r7, r0, r6
 8017802:	4628      	mov	r0, r5
 8017804:	f7fc f8a4 	bl	8013950 <ucdr_deserialize_uint8_t>
 8017808:	f104 010d 	add.w	r1, r4, #13
 801780c:	4007      	ands	r7, r0
 801780e:	4628      	mov	r0, r5
 8017810:	f7fc f870 	bl	80138f4 <ucdr_deserialize_bool>
 8017814:	7b63      	ldrb	r3, [r4, #13]
 8017816:	4007      	ands	r7, r0
 8017818:	b93b      	cbnz	r3, 801782a <uxr_deserialize_CLIENT_Representation+0x66>
 801781a:	f104 011c 	add.w	r1, r4, #28
 801781e:	4628      	mov	r0, r5
 8017820:	f7fc f9b0 	bl	8013b84 <ucdr_deserialize_uint16_t>
 8017824:	4038      	ands	r0, r7
 8017826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801782a:	f104 0110 	add.w	r1, r4, #16
 801782e:	4628      	mov	r0, r5
 8017830:	f7fc fbbe 	bl	8013fb0 <ucdr_deserialize_uint32_t>
 8017834:	6923      	ldr	r3, [r4, #16]
 8017836:	2b01      	cmp	r3, #1
 8017838:	d903      	bls.n	8017842 <uxr_deserialize_CLIENT_Representation+0x7e>
 801783a:	2301      	movs	r3, #1
 801783c:	75ab      	strb	r3, [r5, #22]
 801783e:	2700      	movs	r7, #0
 8017840:	e7eb      	b.n	801781a <uxr_deserialize_CLIENT_Representation+0x56>
 8017842:	b30b      	cbz	r3, 8017888 <uxr_deserialize_CLIENT_Representation+0xc4>
 8017844:	2800      	cmp	r0, #0
 8017846:	d0fa      	beq.n	801783e <uxr_deserialize_CLIENT_Representation+0x7a>
 8017848:	46a0      	mov	r8, r4
 801784a:	f04f 0900 	mov.w	r9, #0
 801784e:	e003      	b.n	8017858 <uxr_deserialize_CLIENT_Representation+0x94>
 8017850:	f108 0808 	add.w	r8, r8, #8
 8017854:	2e00      	cmp	r6, #0
 8017856:	d0f2      	beq.n	801783e <uxr_deserialize_CLIENT_Representation+0x7a>
 8017858:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801785c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017860:	4628      	mov	r0, r5
 8017862:	f004 fd8b 	bl	801c37c <ucdr_deserialize_string>
 8017866:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801786a:	4606      	mov	r6, r0
 801786c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017870:	4628      	mov	r0, r5
 8017872:	f004 fd83 	bl	801c37c <ucdr_deserialize_string>
 8017876:	6923      	ldr	r3, [r4, #16]
 8017878:	f109 0901 	add.w	r9, r9, #1
 801787c:	4006      	ands	r6, r0
 801787e:	4599      	cmp	r9, r3
 8017880:	b2f6      	uxtb	r6, r6
 8017882:	d3e5      	bcc.n	8017850 <uxr_deserialize_CLIENT_Representation+0x8c>
 8017884:	4037      	ands	r7, r6
 8017886:	e7c8      	b.n	801781a <uxr_deserialize_CLIENT_Representation+0x56>
 8017888:	4007      	ands	r7, r0
 801788a:	e7c6      	b.n	801781a <uxr_deserialize_CLIENT_Representation+0x56>

0801788c <uxr_serialize_AGENT_Representation>:
 801788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017890:	2204      	movs	r2, #4
 8017892:	460f      	mov	r7, r1
 8017894:	4605      	mov	r5, r0
 8017896:	f7fb fdfb 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801789a:	2202      	movs	r2, #2
 801789c:	4604      	mov	r4, r0
 801789e:	1d39      	adds	r1, r7, #4
 80178a0:	4628      	mov	r0, r5
 80178a2:	f7fb fdf5 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80178a6:	4020      	ands	r0, r4
 80178a8:	2202      	movs	r2, #2
 80178aa:	b2c4      	uxtb	r4, r0
 80178ac:	1db9      	adds	r1, r7, #6
 80178ae:	4628      	mov	r0, r5
 80178b0:	f7fb fdee 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80178b4:	7a39      	ldrb	r1, [r7, #8]
 80178b6:	4004      	ands	r4, r0
 80178b8:	4628      	mov	r0, r5
 80178ba:	f7fc f805 	bl	80138c8 <ucdr_serialize_bool>
 80178be:	7a3b      	ldrb	r3, [r7, #8]
 80178c0:	ea00 0804 	and.w	r8, r0, r4
 80178c4:	b913      	cbnz	r3, 80178cc <uxr_serialize_AGENT_Representation+0x40>
 80178c6:	4640      	mov	r0, r8
 80178c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178cc:	68f9      	ldr	r1, [r7, #12]
 80178ce:	4628      	mov	r0, r5
 80178d0:	f7fc fa44 	bl	8013d5c <ucdr_serialize_uint32_t>
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	b303      	cbz	r3, 801791a <uxr_serialize_AGENT_Representation+0x8e>
 80178d8:	b1d0      	cbz	r0, 8017910 <uxr_serialize_AGENT_Representation+0x84>
 80178da:	463e      	mov	r6, r7
 80178dc:	f04f 0900 	mov.w	r9, #0
 80178e0:	e001      	b.n	80178e6 <uxr_serialize_AGENT_Representation+0x5a>
 80178e2:	3608      	adds	r6, #8
 80178e4:	b1a4      	cbz	r4, 8017910 <uxr_serialize_AGENT_Representation+0x84>
 80178e6:	6931      	ldr	r1, [r6, #16]
 80178e8:	4628      	mov	r0, r5
 80178ea:	f004 fd39 	bl	801c360 <ucdr_serialize_string>
 80178ee:	6971      	ldr	r1, [r6, #20]
 80178f0:	4604      	mov	r4, r0
 80178f2:	4628      	mov	r0, r5
 80178f4:	f004 fd34 	bl	801c360 <ucdr_serialize_string>
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	f109 0901 	add.w	r9, r9, #1
 80178fe:	4004      	ands	r4, r0
 8017900:	4599      	cmp	r9, r3
 8017902:	b2e4      	uxtb	r4, r4
 8017904:	d3ed      	bcc.n	80178e2 <uxr_serialize_AGENT_Representation+0x56>
 8017906:	ea08 0804 	and.w	r8, r8, r4
 801790a:	4640      	mov	r0, r8
 801790c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017910:	f04f 0800 	mov.w	r8, #0
 8017914:	4640      	mov	r0, r8
 8017916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801791a:	ea08 0800 	and.w	r8, r8, r0
 801791e:	e7d2      	b.n	80178c6 <uxr_serialize_AGENT_Representation+0x3a>

08017920 <uxr_serialize_DATAWRITER_Representation>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	460d      	mov	r5, r1
 8017924:	7809      	ldrb	r1, [r1, #0]
 8017926:	4606      	mov	r6, r0
 8017928:	f7fb fffc 	bl	8013924 <ucdr_serialize_uint8_t>
 801792c:	4604      	mov	r4, r0
 801792e:	b130      	cbz	r0, 801793e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017930:	782b      	ldrb	r3, [r5, #0]
 8017932:	2b02      	cmp	r3, #2
 8017934:	d00c      	beq.n	8017950 <uxr_serialize_DATAWRITER_Representation+0x30>
 8017936:	2b03      	cmp	r3, #3
 8017938:	d010      	beq.n	801795c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801793a:	2b01      	cmp	r3, #1
 801793c:	d008      	beq.n	8017950 <uxr_serialize_DATAWRITER_Representation+0x30>
 801793e:	2202      	movs	r2, #2
 8017940:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017944:	4630      	mov	r0, r6
 8017946:	f7fb fda3 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801794a:	4020      	ands	r0, r4
 801794c:	b2c0      	uxtb	r0, r0
 801794e:	bd70      	pop	{r4, r5, r6, pc}
 8017950:	6869      	ldr	r1, [r5, #4]
 8017952:	4630      	mov	r0, r6
 8017954:	f004 fd04 	bl	801c360 <ucdr_serialize_string>
 8017958:	4604      	mov	r4, r0
 801795a:	e7f0      	b.n	801793e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801795c:	4629      	mov	r1, r5
 801795e:	4630      	mov	r0, r6
 8017960:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017964:	3104      	adds	r1, #4
 8017966:	f7f7 f8ab 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 801796a:	4604      	mov	r4, r0
 801796c:	e7e7      	b.n	801793e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801796e:	bf00      	nop

08017970 <uxr_serialize_ObjectVariant.part.0>:
 8017970:	b570      	push	{r4, r5, r6, lr}
 8017972:	780b      	ldrb	r3, [r1, #0]
 8017974:	3b01      	subs	r3, #1
 8017976:	460c      	mov	r4, r1
 8017978:	4605      	mov	r5, r0
 801797a:	2b0d      	cmp	r3, #13
 801797c:	d816      	bhi.n	80179ac <uxr_serialize_ObjectVariant.part.0+0x3c>
 801797e:	e8df f003 	tbb	[pc, r3]
 8017982:	0733      	.short	0x0733
 8017984:	07071717 	.word	0x07071717
 8017988:	0c150707 	.word	0x0c150707
 801798c:	4c510c0c 	.word	0x4c510c0c
 8017990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017994:	3104      	adds	r1, #4
 8017996:	f7ff bfc3 	b.w	8017920 <uxr_serialize_DATAWRITER_Representation>
 801799a:	7909      	ldrb	r1, [r1, #4]
 801799c:	f7fb ffc2 	bl	8013924 <ucdr_serialize_uint8_t>
 80179a0:	b300      	cbz	r0, 80179e4 <uxr_serialize_ObjectVariant.part.0+0x74>
 80179a2:	7923      	ldrb	r3, [r4, #4]
 80179a4:	2b01      	cmp	r3, #1
 80179a6:	d042      	beq.n	8017a2e <uxr_serialize_ObjectVariant.part.0+0xbe>
 80179a8:	2b02      	cmp	r3, #2
 80179aa:	d040      	beq.n	8017a2e <uxr_serialize_ObjectVariant.part.0+0xbe>
 80179ac:	2001      	movs	r0, #1
 80179ae:	bd70      	pop	{r4, r5, r6, pc}
 80179b0:	7909      	ldrb	r1, [r1, #4]
 80179b2:	f7fb ffb7 	bl	8013924 <ucdr_serialize_uint8_t>
 80179b6:	4606      	mov	r6, r0
 80179b8:	b158      	cbz	r0, 80179d2 <uxr_serialize_ObjectVariant.part.0+0x62>
 80179ba:	7923      	ldrb	r3, [r4, #4]
 80179bc:	2b02      	cmp	r3, #2
 80179be:	d03c      	beq.n	8017a3a <uxr_serialize_ObjectVariant.part.0+0xca>
 80179c0:	2b03      	cmp	r3, #3
 80179c2:	d106      	bne.n	80179d2 <uxr_serialize_ObjectVariant.part.0+0x62>
 80179c4:	68a2      	ldr	r2, [r4, #8]
 80179c6:	f104 010c 	add.w	r1, r4, #12
 80179ca:	4628      	mov	r0, r5
 80179cc:	f7f7 f878 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 80179d0:	4606      	mov	r6, r0
 80179d2:	2202      	movs	r2, #2
 80179d4:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80179d8:	4628      	mov	r0, r5
 80179da:	f7fb fd59 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80179de:	4030      	ands	r0, r6
 80179e0:	b2c0      	uxtb	r0, r0
 80179e2:	bd70      	pop	{r4, r5, r6, pc}
 80179e4:	2000      	movs	r0, #0
 80179e6:	bd70      	pop	{r4, r5, r6, pc}
 80179e8:	7909      	ldrb	r1, [r1, #4]
 80179ea:	f7fb ff9b 	bl	8013924 <ucdr_serialize_uint8_t>
 80179ee:	4606      	mov	r6, r0
 80179f0:	b158      	cbz	r0, 8017a0a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80179f2:	7923      	ldrb	r3, [r4, #4]
 80179f4:	2b02      	cmp	r3, #2
 80179f6:	d003      	beq.n	8017a00 <uxr_serialize_ObjectVariant.part.0+0x90>
 80179f8:	2b03      	cmp	r3, #3
 80179fa:	d024      	beq.n	8017a46 <uxr_serialize_ObjectVariant.part.0+0xd6>
 80179fc:	2b01      	cmp	r3, #1
 80179fe:	d104      	bne.n	8017a0a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017a00:	68a1      	ldr	r1, [r4, #8]
 8017a02:	4628      	mov	r0, r5
 8017a04:	f004 fcac 	bl	801c360 <ucdr_serialize_string>
 8017a08:	4606      	mov	r6, r0
 8017a0a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8017a0e:	4628      	mov	r0, r5
 8017a10:	f7fc fcb0 	bl	8014374 <ucdr_serialize_int16_t>
 8017a14:	4030      	ands	r0, r6
 8017a16:	b2c0      	uxtb	r0, r0
 8017a18:	bd70      	pop	{r4, r5, r6, pc}
 8017a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a1e:	3104      	adds	r1, #4
 8017a20:	f7ff be76 	b.w	8017710 <uxr_serialize_CLIENT_Representation>
 8017a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a28:	3104      	adds	r1, #4
 8017a2a:	f7ff bf2f 	b.w	801788c <uxr_serialize_AGENT_Representation>
 8017a2e:	68a1      	ldr	r1, [r4, #8]
 8017a30:	4628      	mov	r0, r5
 8017a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a36:	f004 bc93 	b.w	801c360 <ucdr_serialize_string>
 8017a3a:	68a1      	ldr	r1, [r4, #8]
 8017a3c:	4628      	mov	r0, r5
 8017a3e:	f004 fc8f 	bl	801c360 <ucdr_serialize_string>
 8017a42:	4606      	mov	r6, r0
 8017a44:	e7c5      	b.n	80179d2 <uxr_serialize_ObjectVariant.part.0+0x62>
 8017a46:	68a2      	ldr	r2, [r4, #8]
 8017a48:	f104 010c 	add.w	r1, r4, #12
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	f7f7 f837 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 8017a52:	4606      	mov	r6, r0
 8017a54:	e7d9      	b.n	8017a0a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017a56:	bf00      	nop

08017a58 <uxr_deserialize_DATAWRITER_Representation>:
 8017a58:	b570      	push	{r4, r5, r6, lr}
 8017a5a:	4606      	mov	r6, r0
 8017a5c:	460d      	mov	r5, r1
 8017a5e:	f7fb ff77 	bl	8013950 <ucdr_deserialize_uint8_t>
 8017a62:	4604      	mov	r4, r0
 8017a64:	b130      	cbz	r0, 8017a74 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017a66:	782b      	ldrb	r3, [r5, #0]
 8017a68:	2b02      	cmp	r3, #2
 8017a6a:	d00c      	beq.n	8017a86 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017a6c:	2b03      	cmp	r3, #3
 8017a6e:	d012      	beq.n	8017a96 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d008      	beq.n	8017a86 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017a74:	2202      	movs	r2, #2
 8017a76:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	f7fb fd6c 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 8017a80:	4020      	ands	r0, r4
 8017a82:	b2c0      	uxtb	r0, r0
 8017a84:	bd70      	pop	{r4, r5, r6, pc}
 8017a86:	6869      	ldr	r1, [r5, #4]
 8017a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a8c:	4630      	mov	r0, r6
 8017a8e:	f004 fc75 	bl	801c37c <ucdr_deserialize_string>
 8017a92:	4604      	mov	r4, r0
 8017a94:	e7ee      	b.n	8017a74 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017a96:	1d2b      	adds	r3, r5, #4
 8017a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a9c:	f105 0108 	add.w	r1, r5, #8
 8017aa0:	4630      	mov	r0, r6
 8017aa2:	f7f7 f81f 	bl	800eae4 <ucdr_deserialize_sequence_uint8_t>
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	e7e4      	b.n	8017a74 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017aaa:	bf00      	nop

08017aac <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8017aac:	b570      	push	{r4, r5, r6, lr}
 8017aae:	460d      	mov	r5, r1
 8017ab0:	7809      	ldrb	r1, [r1, #0]
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	f7fb ff08 	bl	80138c8 <ucdr_serialize_bool>
 8017ab8:	782b      	ldrb	r3, [r5, #0]
 8017aba:	4604      	mov	r4, r0
 8017abc:	b94b      	cbnz	r3, 8017ad2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8017abe:	7a29      	ldrb	r1, [r5, #8]
 8017ac0:	4630      	mov	r0, r6
 8017ac2:	f7fb ff01 	bl	80138c8 <ucdr_serialize_bool>
 8017ac6:	7a2b      	ldrb	r3, [r5, #8]
 8017ac8:	4004      	ands	r4, r0
 8017aca:	b2e4      	uxtb	r4, r4
 8017acc:	b943      	cbnz	r3, 8017ae0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8017ace:	4620      	mov	r0, r4
 8017ad0:	bd70      	pop	{r4, r5, r6, pc}
 8017ad2:	6869      	ldr	r1, [r5, #4]
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	f004 fc43 	bl	801c360 <ucdr_serialize_string>
 8017ada:	4004      	ands	r4, r0
 8017adc:	b2e4      	uxtb	r4, r4
 8017ade:	e7ee      	b.n	8017abe <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017ae0:	68e9      	ldr	r1, [r5, #12]
 8017ae2:	4630      	mov	r0, r6
 8017ae4:	f004 fc3c 	bl	801c360 <ucdr_serialize_string>
 8017ae8:	4004      	ands	r4, r0
 8017aea:	4620      	mov	r0, r4
 8017aec:	bd70      	pop	{r4, r5, r6, pc}
 8017aee:	bf00      	nop

08017af0 <uxr_serialize_OBJK_Topic_Binary>:
 8017af0:	b570      	push	{r4, r5, r6, lr}
 8017af2:	460d      	mov	r5, r1
 8017af4:	6809      	ldr	r1, [r1, #0]
 8017af6:	4606      	mov	r6, r0
 8017af8:	f004 fc32 	bl	801c360 <ucdr_serialize_string>
 8017afc:	7929      	ldrb	r1, [r5, #4]
 8017afe:	4604      	mov	r4, r0
 8017b00:	4630      	mov	r0, r6
 8017b02:	f7fb fee1 	bl	80138c8 <ucdr_serialize_bool>
 8017b06:	792b      	ldrb	r3, [r5, #4]
 8017b08:	4004      	ands	r4, r0
 8017b0a:	b2e4      	uxtb	r4, r4
 8017b0c:	b943      	cbnz	r3, 8017b20 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8017b0e:	7b29      	ldrb	r1, [r5, #12]
 8017b10:	4630      	mov	r0, r6
 8017b12:	f7fb fed9 	bl	80138c8 <ucdr_serialize_bool>
 8017b16:	7b2b      	ldrb	r3, [r5, #12]
 8017b18:	4004      	ands	r4, r0
 8017b1a:	b93b      	cbnz	r3, 8017b2c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	bd70      	pop	{r4, r5, r6, pc}
 8017b20:	68a9      	ldr	r1, [r5, #8]
 8017b22:	4630      	mov	r0, r6
 8017b24:	f004 fc1c 	bl	801c360 <ucdr_serialize_string>
 8017b28:	4004      	ands	r4, r0
 8017b2a:	e7f0      	b.n	8017b0e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8017b2c:	6929      	ldr	r1, [r5, #16]
 8017b2e:	4630      	mov	r0, r6
 8017b30:	f004 fc16 	bl	801c360 <ucdr_serialize_string>
 8017b34:	4004      	ands	r4, r0
 8017b36:	b2e4      	uxtb	r4, r4
 8017b38:	4620      	mov	r0, r4
 8017b3a:	bd70      	pop	{r4, r5, r6, pc}

08017b3c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8017b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b40:	460c      	mov	r4, r1
 8017b42:	7809      	ldrb	r1, [r1, #0]
 8017b44:	4606      	mov	r6, r0
 8017b46:	f7fb febf 	bl	80138c8 <ucdr_serialize_bool>
 8017b4a:	7823      	ldrb	r3, [r4, #0]
 8017b4c:	4605      	mov	r5, r0
 8017b4e:	b96b      	cbnz	r3, 8017b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8017b50:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017b54:	4630      	mov	r0, r6
 8017b56:	f7fb feb7 	bl	80138c8 <ucdr_serialize_bool>
 8017b5a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017b5e:	4005      	ands	r5, r0
 8017b60:	b2ed      	uxtb	r5, r5
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d16a      	bne.n	8017c3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 8017b66:	4628      	mov	r0, r5
 8017b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b6c:	6861      	ldr	r1, [r4, #4]
 8017b6e:	4630      	mov	r0, r6
 8017b70:	f7fc f8f4 	bl	8013d5c <ucdr_serialize_uint32_t>
 8017b74:	6863      	ldr	r3, [r4, #4]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d06c      	beq.n	8017c54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	d068      	beq.n	8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b7e:	68a1      	ldr	r1, [r4, #8]
 8017b80:	4630      	mov	r0, r6
 8017b82:	f004 fbed 	bl	801c360 <ucdr_serialize_string>
 8017b86:	6862      	ldr	r2, [r4, #4]
 8017b88:	2a01      	cmp	r2, #1
 8017b8a:	d953      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	d05f      	beq.n	8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017b90:	68e1      	ldr	r1, [r4, #12]
 8017b92:	4630      	mov	r0, r6
 8017b94:	f004 fbe4 	bl	801c360 <ucdr_serialize_string>
 8017b98:	6862      	ldr	r2, [r4, #4]
 8017b9a:	2a02      	cmp	r2, #2
 8017b9c:	d94a      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	d056      	beq.n	8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017ba2:	6921      	ldr	r1, [r4, #16]
 8017ba4:	4630      	mov	r0, r6
 8017ba6:	f004 fbdb 	bl	801c360 <ucdr_serialize_string>
 8017baa:	6862      	ldr	r2, [r4, #4]
 8017bac:	2a03      	cmp	r2, #3
 8017bae:	d941      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d04d      	beq.n	8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017bb4:	6961      	ldr	r1, [r4, #20]
 8017bb6:	4630      	mov	r0, r6
 8017bb8:	f004 fbd2 	bl	801c360 <ucdr_serialize_string>
 8017bbc:	6862      	ldr	r2, [r4, #4]
 8017bbe:	2a04      	cmp	r2, #4
 8017bc0:	d938      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	d044      	beq.n	8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017bc6:	69a1      	ldr	r1, [r4, #24]
 8017bc8:	4630      	mov	r0, r6
 8017bca:	f004 fbc9 	bl	801c360 <ucdr_serialize_string>
 8017bce:	6862      	ldr	r2, [r4, #4]
 8017bd0:	2a05      	cmp	r2, #5
 8017bd2:	d92f      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	d03b      	beq.n	8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017bd8:	69e1      	ldr	r1, [r4, #28]
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f004 fbc0 	bl	801c360 <ucdr_serialize_string>
 8017be0:	6862      	ldr	r2, [r4, #4]
 8017be2:	2a06      	cmp	r2, #6
 8017be4:	d926      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017be6:	b398      	cbz	r0, 8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017be8:	6a21      	ldr	r1, [r4, #32]
 8017bea:	4630      	mov	r0, r6
 8017bec:	f004 fbb8 	bl	801c360 <ucdr_serialize_string>
 8017bf0:	6862      	ldr	r2, [r4, #4]
 8017bf2:	2a07      	cmp	r2, #7
 8017bf4:	d91e      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017bf6:	b358      	cbz	r0, 8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017bf8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	f004 fbb0 	bl	801c360 <ucdr_serialize_string>
 8017c00:	6862      	ldr	r2, [r4, #4]
 8017c02:	2a08      	cmp	r2, #8
 8017c04:	d916      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017c06:	b318      	cbz	r0, 8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017c08:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f004 fba8 	bl	801c360 <ucdr_serialize_string>
 8017c10:	6862      	ldr	r2, [r4, #4]
 8017c12:	2a09      	cmp	r2, #9
 8017c14:	d90e      	bls.n	8017c34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017c16:	b1d8      	cbz	r0, 8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017c18:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8017c1c:	2709      	movs	r7, #9
 8017c1e:	e000      	b.n	8017c22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8017c20:	b1b0      	cbz	r0, 8017c50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017c22:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8017c26:	4630      	mov	r0, r6
 8017c28:	f004 fb9a 	bl	801c360 <ucdr_serialize_string>
 8017c2c:	6862      	ldr	r2, [r4, #4]
 8017c2e:	3701      	adds	r7, #1
 8017c30:	4297      	cmp	r7, r2
 8017c32:	d3f5      	bcc.n	8017c20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8017c34:	ea05 0300 	and.w	r3, r5, r0
 8017c38:	b2dd      	uxtb	r5, r3
 8017c3a:	e789      	b.n	8017b50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017c3c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017c3e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017c42:	4630      	mov	r0, r6
 8017c44:	f7f6 ff3c 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 8017c48:	4005      	ands	r5, r0
 8017c4a:	4628      	mov	r0, r5
 8017c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c50:	2500      	movs	r5, #0
 8017c52:	e77d      	b.n	8017b50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017c54:	4028      	ands	r0, r5
 8017c56:	b2c5      	uxtb	r5, r0
 8017c58:	e77a      	b.n	8017b50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8017c5a:	bf00      	nop

08017c5c <uxr_serialize_OBJK_Publisher_Binary>:
 8017c5c:	b570      	push	{r4, r5, r6, lr}
 8017c5e:	460d      	mov	r5, r1
 8017c60:	7809      	ldrb	r1, [r1, #0]
 8017c62:	4606      	mov	r6, r0
 8017c64:	f7fb fe30 	bl	80138c8 <ucdr_serialize_bool>
 8017c68:	782b      	ldrb	r3, [r5, #0]
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	b94b      	cbnz	r3, 8017c82 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8017c6e:	7a29      	ldrb	r1, [r5, #8]
 8017c70:	4630      	mov	r0, r6
 8017c72:	f7fb fe29 	bl	80138c8 <ucdr_serialize_bool>
 8017c76:	7a2b      	ldrb	r3, [r5, #8]
 8017c78:	4004      	ands	r4, r0
 8017c7a:	b2e4      	uxtb	r4, r4
 8017c7c:	b943      	cbnz	r3, 8017c90 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8017c7e:	4620      	mov	r0, r4
 8017c80:	bd70      	pop	{r4, r5, r6, pc}
 8017c82:	6869      	ldr	r1, [r5, #4]
 8017c84:	4630      	mov	r0, r6
 8017c86:	f004 fb6b 	bl	801c360 <ucdr_serialize_string>
 8017c8a:	4004      	ands	r4, r0
 8017c8c:	b2e4      	uxtb	r4, r4
 8017c8e:	e7ee      	b.n	8017c6e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8017c90:	f105 010c 	add.w	r1, r5, #12
 8017c94:	4630      	mov	r0, r6
 8017c96:	f7ff ff51 	bl	8017b3c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8017c9a:	4004      	ands	r4, r0
 8017c9c:	4620      	mov	r0, r4
 8017c9e:	bd70      	pop	{r4, r5, r6, pc}

08017ca0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8017ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca4:	460c      	mov	r4, r1
 8017ca6:	7809      	ldrb	r1, [r1, #0]
 8017ca8:	4606      	mov	r6, r0
 8017caa:	f7fb fe0d 	bl	80138c8 <ucdr_serialize_bool>
 8017cae:	7823      	ldrb	r3, [r4, #0]
 8017cb0:	4605      	mov	r5, r0
 8017cb2:	b96b      	cbnz	r3, 8017cd0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8017cb4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017cb8:	4630      	mov	r0, r6
 8017cba:	f7fb fe05 	bl	80138c8 <ucdr_serialize_bool>
 8017cbe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017cc2:	4005      	ands	r5, r0
 8017cc4:	b2ed      	uxtb	r5, r5
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d16a      	bne.n	8017da0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 8017cca:	4628      	mov	r0, r5
 8017ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cd0:	6861      	ldr	r1, [r4, #4]
 8017cd2:	4630      	mov	r0, r6
 8017cd4:	f7fc f842 	bl	8013d5c <ucdr_serialize_uint32_t>
 8017cd8:	6863      	ldr	r3, [r4, #4]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d06c      	beq.n	8017db8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	d068      	beq.n	8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017ce2:	68a1      	ldr	r1, [r4, #8]
 8017ce4:	4630      	mov	r0, r6
 8017ce6:	f004 fb3b 	bl	801c360 <ucdr_serialize_string>
 8017cea:	6862      	ldr	r2, [r4, #4]
 8017cec:	2a01      	cmp	r2, #1
 8017cee:	d953      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d05f      	beq.n	8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017cf4:	68e1      	ldr	r1, [r4, #12]
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	f004 fb32 	bl	801c360 <ucdr_serialize_string>
 8017cfc:	6862      	ldr	r2, [r4, #4]
 8017cfe:	2a02      	cmp	r2, #2
 8017d00:	d94a      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d02:	2800      	cmp	r0, #0
 8017d04:	d056      	beq.n	8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d06:	6921      	ldr	r1, [r4, #16]
 8017d08:	4630      	mov	r0, r6
 8017d0a:	f004 fb29 	bl	801c360 <ucdr_serialize_string>
 8017d0e:	6862      	ldr	r2, [r4, #4]
 8017d10:	2a03      	cmp	r2, #3
 8017d12:	d941      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d14:	2800      	cmp	r0, #0
 8017d16:	d04d      	beq.n	8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d18:	6961      	ldr	r1, [r4, #20]
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f004 fb20 	bl	801c360 <ucdr_serialize_string>
 8017d20:	6862      	ldr	r2, [r4, #4]
 8017d22:	2a04      	cmp	r2, #4
 8017d24:	d938      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d26:	2800      	cmp	r0, #0
 8017d28:	d044      	beq.n	8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d2a:	69a1      	ldr	r1, [r4, #24]
 8017d2c:	4630      	mov	r0, r6
 8017d2e:	f004 fb17 	bl	801c360 <ucdr_serialize_string>
 8017d32:	6862      	ldr	r2, [r4, #4]
 8017d34:	2a05      	cmp	r2, #5
 8017d36:	d92f      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d03b      	beq.n	8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d3c:	69e1      	ldr	r1, [r4, #28]
 8017d3e:	4630      	mov	r0, r6
 8017d40:	f004 fb0e 	bl	801c360 <ucdr_serialize_string>
 8017d44:	6862      	ldr	r2, [r4, #4]
 8017d46:	2a06      	cmp	r2, #6
 8017d48:	d926      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d4a:	b398      	cbz	r0, 8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d4c:	6a21      	ldr	r1, [r4, #32]
 8017d4e:	4630      	mov	r0, r6
 8017d50:	f004 fb06 	bl	801c360 <ucdr_serialize_string>
 8017d54:	6862      	ldr	r2, [r4, #4]
 8017d56:	2a07      	cmp	r2, #7
 8017d58:	d91e      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d5a:	b358      	cbz	r0, 8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017d5e:	4630      	mov	r0, r6
 8017d60:	f004 fafe 	bl	801c360 <ucdr_serialize_string>
 8017d64:	6862      	ldr	r2, [r4, #4]
 8017d66:	2a08      	cmp	r2, #8
 8017d68:	d916      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d6a:	b318      	cbz	r0, 8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d6c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f004 faf6 	bl	801c360 <ucdr_serialize_string>
 8017d74:	6862      	ldr	r2, [r4, #4]
 8017d76:	2a09      	cmp	r2, #9
 8017d78:	d90e      	bls.n	8017d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017d7a:	b1d8      	cbz	r0, 8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d7c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8017d80:	2709      	movs	r7, #9
 8017d82:	e000      	b.n	8017d86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8017d84:	b1b0      	cbz	r0, 8017db4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017d86:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8017d8a:	4630      	mov	r0, r6
 8017d8c:	f004 fae8 	bl	801c360 <ucdr_serialize_string>
 8017d90:	6862      	ldr	r2, [r4, #4]
 8017d92:	3701      	adds	r7, #1
 8017d94:	4297      	cmp	r7, r2
 8017d96:	d3f5      	bcc.n	8017d84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8017d98:	ea05 0300 	and.w	r3, r5, r0
 8017d9c:	b2dd      	uxtb	r5, r3
 8017d9e:	e789      	b.n	8017cb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017da0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017da2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017da6:	4630      	mov	r0, r6
 8017da8:	f7f6 fe8a 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 8017dac:	4005      	ands	r5, r0
 8017dae:	4628      	mov	r0, r5
 8017db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017db4:	2500      	movs	r5, #0
 8017db6:	e77d      	b.n	8017cb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017db8:	4028      	ands	r0, r5
 8017dba:	b2c5      	uxtb	r5, r0
 8017dbc:	e77a      	b.n	8017cb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017dbe:	bf00      	nop

08017dc0 <uxr_serialize_OBJK_Subscriber_Binary>:
 8017dc0:	b570      	push	{r4, r5, r6, lr}
 8017dc2:	460d      	mov	r5, r1
 8017dc4:	7809      	ldrb	r1, [r1, #0]
 8017dc6:	4606      	mov	r6, r0
 8017dc8:	f7fb fd7e 	bl	80138c8 <ucdr_serialize_bool>
 8017dcc:	782b      	ldrb	r3, [r5, #0]
 8017dce:	4604      	mov	r4, r0
 8017dd0:	b94b      	cbnz	r3, 8017de6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8017dd2:	7a29      	ldrb	r1, [r5, #8]
 8017dd4:	4630      	mov	r0, r6
 8017dd6:	f7fb fd77 	bl	80138c8 <ucdr_serialize_bool>
 8017dda:	7a2b      	ldrb	r3, [r5, #8]
 8017ddc:	4004      	ands	r4, r0
 8017dde:	b2e4      	uxtb	r4, r4
 8017de0:	b943      	cbnz	r3, 8017df4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8017de2:	4620      	mov	r0, r4
 8017de4:	bd70      	pop	{r4, r5, r6, pc}
 8017de6:	6869      	ldr	r1, [r5, #4]
 8017de8:	4630      	mov	r0, r6
 8017dea:	f004 fab9 	bl	801c360 <ucdr_serialize_string>
 8017dee:	4004      	ands	r4, r0
 8017df0:	b2e4      	uxtb	r4, r4
 8017df2:	e7ee      	b.n	8017dd2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8017df4:	f105 010c 	add.w	r1, r5, #12
 8017df8:	4630      	mov	r0, r6
 8017dfa:	f7ff ff51 	bl	8017ca0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8017dfe:	4004      	ands	r4, r0
 8017e00:	4620      	mov	r0, r4
 8017e02:	bd70      	pop	{r4, r5, r6, pc}

08017e04 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8017e04:	b570      	push	{r4, r5, r6, lr}
 8017e06:	460d      	mov	r5, r1
 8017e08:	8809      	ldrh	r1, [r1, #0]
 8017e0a:	4606      	mov	r6, r0
 8017e0c:	f7fb fdb6 	bl	801397c <ucdr_serialize_uint16_t>
 8017e10:	78a9      	ldrb	r1, [r5, #2]
 8017e12:	4604      	mov	r4, r0
 8017e14:	4630      	mov	r0, r6
 8017e16:	f7fb fd57 	bl	80138c8 <ucdr_serialize_bool>
 8017e1a:	78ab      	ldrb	r3, [r5, #2]
 8017e1c:	4004      	ands	r4, r0
 8017e1e:	b2e4      	uxtb	r4, r4
 8017e20:	b9b3      	cbnz	r3, 8017e50 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8017e22:	79a9      	ldrb	r1, [r5, #6]
 8017e24:	4630      	mov	r0, r6
 8017e26:	f7fb fd4f 	bl	80138c8 <ucdr_serialize_bool>
 8017e2a:	79ab      	ldrb	r3, [r5, #6]
 8017e2c:	4004      	ands	r4, r0
 8017e2e:	bb33      	cbnz	r3, 8017e7e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8017e30:	7b29      	ldrb	r1, [r5, #12]
 8017e32:	4630      	mov	r0, r6
 8017e34:	f7fb fd48 	bl	80138c8 <ucdr_serialize_bool>
 8017e38:	7b2b      	ldrb	r3, [r5, #12]
 8017e3a:	4004      	ands	r4, r0
 8017e3c:	b9c3      	cbnz	r3, 8017e70 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8017e3e:	7d29      	ldrb	r1, [r5, #20]
 8017e40:	4630      	mov	r0, r6
 8017e42:	f7fb fd41 	bl	80138c8 <ucdr_serialize_bool>
 8017e46:	7d2b      	ldrb	r3, [r5, #20]
 8017e48:	4004      	ands	r4, r0
 8017e4a:	b93b      	cbnz	r3, 8017e5c <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	bd70      	pop	{r4, r5, r6, pc}
 8017e50:	88a9      	ldrh	r1, [r5, #4]
 8017e52:	4630      	mov	r0, r6
 8017e54:	f7fb fd92 	bl	801397c <ucdr_serialize_uint16_t>
 8017e58:	4004      	ands	r4, r0
 8017e5a:	e7e2      	b.n	8017e22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8017e5c:	69aa      	ldr	r2, [r5, #24]
 8017e5e:	f105 011c 	add.w	r1, r5, #28
 8017e62:	4630      	mov	r0, r6
 8017e64:	f7f6 fe2c 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 8017e68:	4004      	ands	r4, r0
 8017e6a:	b2e4      	uxtb	r4, r4
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	bd70      	pop	{r4, r5, r6, pc}
 8017e70:	6929      	ldr	r1, [r5, #16]
 8017e72:	4630      	mov	r0, r6
 8017e74:	f7fb ff72 	bl	8013d5c <ucdr_serialize_uint32_t>
 8017e78:	4004      	ands	r4, r0
 8017e7a:	b2e4      	uxtb	r4, r4
 8017e7c:	e7df      	b.n	8017e3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8017e7e:	68a9      	ldr	r1, [r5, #8]
 8017e80:	4630      	mov	r0, r6
 8017e82:	f7fb ff6b 	bl	8013d5c <ucdr_serialize_uint32_t>
 8017e86:	4004      	ands	r4, r0
 8017e88:	b2e4      	uxtb	r4, r4
 8017e8a:	e7d1      	b.n	8017e30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08017e8c <uxr_serialize_OBJK_DataReader_Binary>:
 8017e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e8e:	2202      	movs	r2, #2
 8017e90:	460c      	mov	r4, r1
 8017e92:	4606      	mov	r6, r0
 8017e94:	f7fb fafc 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8017e98:	78a1      	ldrb	r1, [r4, #2]
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	4630      	mov	r0, r6
 8017e9e:	f7fb fd13 	bl	80138c8 <ucdr_serialize_bool>
 8017ea2:	78a3      	ldrb	r3, [r4, #2]
 8017ea4:	4005      	ands	r5, r0
 8017ea6:	b2ed      	uxtb	r5, r5
 8017ea8:	b90b      	cbnz	r3, 8017eae <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8017eaa:	4628      	mov	r0, r5
 8017eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eae:	f104 0108 	add.w	r1, r4, #8
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	f7ff ffa6 	bl	8017e04 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017eb8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017ebc:	4607      	mov	r7, r0
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f7fb fd02 	bl	80138c8 <ucdr_serialize_bool>
 8017ec4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017ec8:	4007      	ands	r7, r0
 8017eca:	b2ff      	uxtb	r7, r7
 8017ecc:	b95b      	cbnz	r3, 8017ee6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8017ece:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	f7fb fcf8 	bl	80138c8 <ucdr_serialize_bool>
 8017ed8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017edc:	4007      	ands	r7, r0
 8017ede:	b94b      	cbnz	r3, 8017ef4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8017ee0:	403d      	ands	r5, r7
 8017ee2:	4628      	mov	r0, r5
 8017ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ee6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8017eea:	4630      	mov	r0, r6
 8017eec:	f7fc f97a 	bl	80141e4 <ucdr_serialize_uint64_t>
 8017ef0:	4007      	ands	r7, r0
 8017ef2:	e7ec      	b.n	8017ece <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8017ef4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f004 fa32 	bl	801c360 <ucdr_serialize_string>
 8017efc:	4007      	ands	r7, r0
 8017efe:	b2ff      	uxtb	r7, r7
 8017f00:	e7ee      	b.n	8017ee0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8017f02:	bf00      	nop

08017f04 <uxr_serialize_OBJK_DataWriter_Binary>:
 8017f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f06:	2202      	movs	r2, #2
 8017f08:	460d      	mov	r5, r1
 8017f0a:	4606      	mov	r6, r0
 8017f0c:	f7fb fac0 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8017f10:	78a9      	ldrb	r1, [r5, #2]
 8017f12:	4604      	mov	r4, r0
 8017f14:	4630      	mov	r0, r6
 8017f16:	f7fb fcd7 	bl	80138c8 <ucdr_serialize_bool>
 8017f1a:	78ab      	ldrb	r3, [r5, #2]
 8017f1c:	4004      	ands	r4, r0
 8017f1e:	b2e4      	uxtb	r4, r4
 8017f20:	b90b      	cbnz	r3, 8017f26 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8017f22:	4620      	mov	r0, r4
 8017f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f26:	f105 0108 	add.w	r1, r5, #8
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	f7ff ff6a 	bl	8017e04 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017f30:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8017f34:	4607      	mov	r7, r0
 8017f36:	4630      	mov	r0, r6
 8017f38:	f7fb fcc6 	bl	80138c8 <ucdr_serialize_bool>
 8017f3c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017f40:	4007      	ands	r7, r0
 8017f42:	b2ff      	uxtb	r7, r7
 8017f44:	b913      	cbnz	r3, 8017f4c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8017f46:	403c      	ands	r4, r7
 8017f48:	4620      	mov	r0, r4
 8017f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f4c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8017f50:	4630      	mov	r0, r6
 8017f52:	f7fc f947 	bl	80141e4 <ucdr_serialize_uint64_t>
 8017f56:	4007      	ands	r7, r0
 8017f58:	e7f5      	b.n	8017f46 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8017f5a:	bf00      	nop

08017f5c <uxr_deserialize_ObjectVariant>:
 8017f5c:	b570      	push	{r4, r5, r6, lr}
 8017f5e:	4605      	mov	r5, r0
 8017f60:	460e      	mov	r6, r1
 8017f62:	f7fb fcf5 	bl	8013950 <ucdr_deserialize_uint8_t>
 8017f66:	b168      	cbz	r0, 8017f84 <uxr_deserialize_ObjectVariant+0x28>
 8017f68:	7833      	ldrb	r3, [r6, #0]
 8017f6a:	3b01      	subs	r3, #1
 8017f6c:	4604      	mov	r4, r0
 8017f6e:	2b0d      	cmp	r3, #13
 8017f70:	d809      	bhi.n	8017f86 <uxr_deserialize_ObjectVariant+0x2a>
 8017f72:	e8df f003 	tbb	[pc, r3]
 8017f76:	0a64      	.short	0x0a64
 8017f78:	0a0a2323 	.word	0x0a0a2323
 8017f7c:	10080a0a 	.word	0x10080a0a
 8017f80:	5e411010 	.word	0x5e411010
 8017f84:	2400      	movs	r4, #0
 8017f86:	4620      	mov	r0, r4
 8017f88:	bd70      	pop	{r4, r5, r6, pc}
 8017f8a:	1d31      	adds	r1, r6, #4
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f92:	f7ff bd61 	b.w	8017a58 <uxr_deserialize_DATAWRITER_Representation>
 8017f96:	1d31      	adds	r1, r6, #4
 8017f98:	4628      	mov	r0, r5
 8017f9a:	f7fb fcd9 	bl	8013950 <ucdr_deserialize_uint8_t>
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	d0f0      	beq.n	8017f84 <uxr_deserialize_ObjectVariant+0x28>
 8017fa2:	7933      	ldrb	r3, [r6, #4]
 8017fa4:	2b01      	cmp	r3, #1
 8017fa6:	d001      	beq.n	8017fac <uxr_deserialize_ObjectVariant+0x50>
 8017fa8:	2b02      	cmp	r3, #2
 8017faa:	d1ec      	bne.n	8017f86 <uxr_deserialize_ObjectVariant+0x2a>
 8017fac:	68b1      	ldr	r1, [r6, #8]
 8017fae:	4628      	mov	r0, r5
 8017fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fb8:	f004 b9e0 	b.w	801c37c <ucdr_deserialize_string>
 8017fbc:	1d31      	adds	r1, r6, #4
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	f7fb fcc6 	bl	8013950 <ucdr_deserialize_uint8_t>
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	b170      	cbz	r0, 8017fe6 <uxr_deserialize_ObjectVariant+0x8a>
 8017fc8:	7933      	ldrb	r3, [r6, #4]
 8017fca:	2b02      	cmp	r3, #2
 8017fcc:	d053      	beq.n	8018076 <uxr_deserialize_ObjectVariant+0x11a>
 8017fce:	2b03      	cmp	r3, #3
 8017fd0:	d109      	bne.n	8017fe6 <uxr_deserialize_ObjectVariant+0x8a>
 8017fd2:	f106 0308 	add.w	r3, r6, #8
 8017fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017fda:	f106 010c 	add.w	r1, r6, #12
 8017fde:	4628      	mov	r0, r5
 8017fe0:	f7f6 fd80 	bl	800eae4 <ucdr_deserialize_sequence_uint8_t>
 8017fe4:	4604      	mov	r4, r0
 8017fe6:	2202      	movs	r2, #2
 8017fe8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017fec:	4628      	mov	r0, r5
 8017fee:	f7fb fab3 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 8017ff2:	4004      	ands	r4, r0
 8017ff4:	b2e4      	uxtb	r4, r4
 8017ff6:	e7c6      	b.n	8017f86 <uxr_deserialize_ObjectVariant+0x2a>
 8017ff8:	2204      	movs	r2, #4
 8017ffa:	18b1      	adds	r1, r6, r2
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	f7fb faab 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 8018002:	2202      	movs	r2, #2
 8018004:	f106 0108 	add.w	r1, r6, #8
 8018008:	4604      	mov	r4, r0
 801800a:	4628      	mov	r0, r5
 801800c:	f7fb faa4 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 8018010:	2202      	movs	r2, #2
 8018012:	4004      	ands	r4, r0
 8018014:	f106 010a 	add.w	r1, r6, #10
 8018018:	4628      	mov	r0, r5
 801801a:	f7fb fa9d 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801801e:	b2e4      	uxtb	r4, r4
 8018020:	4603      	mov	r3, r0
 8018022:	f106 010c 	add.w	r1, r6, #12
 8018026:	4628      	mov	r0, r5
 8018028:	401c      	ands	r4, r3
 801802a:	f7fb fc63 	bl	80138f4 <ucdr_deserialize_bool>
 801802e:	4004      	ands	r4, r0
 8018030:	e7a9      	b.n	8017f86 <uxr_deserialize_ObjectVariant+0x2a>
 8018032:	1d31      	adds	r1, r6, #4
 8018034:	4628      	mov	r0, r5
 8018036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801803a:	f7ff bbc3 	b.w	80177c4 <uxr_deserialize_CLIENT_Representation>
 801803e:	1d31      	adds	r1, r6, #4
 8018040:	4628      	mov	r0, r5
 8018042:	f7fb fc85 	bl	8013950 <ucdr_deserialize_uint8_t>
 8018046:	4604      	mov	r4, r0
 8018048:	b168      	cbz	r0, 8018066 <uxr_deserialize_ObjectVariant+0x10a>
 801804a:	7933      	ldrb	r3, [r6, #4]
 801804c:	2b02      	cmp	r3, #2
 801804e:	d003      	beq.n	8018058 <uxr_deserialize_ObjectVariant+0xfc>
 8018050:	2b03      	cmp	r3, #3
 8018052:	d018      	beq.n	8018086 <uxr_deserialize_ObjectVariant+0x12a>
 8018054:	2b01      	cmp	r3, #1
 8018056:	d106      	bne.n	8018066 <uxr_deserialize_ObjectVariant+0x10a>
 8018058:	68b1      	ldr	r1, [r6, #8]
 801805a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801805e:	4628      	mov	r0, r5
 8018060:	f004 f98c 	bl	801c37c <ucdr_deserialize_string>
 8018064:	4604      	mov	r4, r0
 8018066:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801806a:	4628      	mov	r0, r5
 801806c:	f7fc fa0c 	bl	8014488 <ucdr_deserialize_int16_t>
 8018070:	4004      	ands	r4, r0
 8018072:	b2e4      	uxtb	r4, r4
 8018074:	e787      	b.n	8017f86 <uxr_deserialize_ObjectVariant+0x2a>
 8018076:	68b1      	ldr	r1, [r6, #8]
 8018078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801807c:	4628      	mov	r0, r5
 801807e:	f004 f97d 	bl	801c37c <ucdr_deserialize_string>
 8018082:	4604      	mov	r4, r0
 8018084:	e7af      	b.n	8017fe6 <uxr_deserialize_ObjectVariant+0x8a>
 8018086:	f106 0308 	add.w	r3, r6, #8
 801808a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801808e:	f106 010c 	add.w	r1, r6, #12
 8018092:	4628      	mov	r0, r5
 8018094:	f7f6 fd26 	bl	800eae4 <ucdr_deserialize_sequence_uint8_t>
 8018098:	4604      	mov	r4, r0
 801809a:	e7e4      	b.n	8018066 <uxr_deserialize_ObjectVariant+0x10a>

0801809c <uxr_deserialize_BaseObjectRequest>:
 801809c:	b570      	push	{r4, r5, r6, lr}
 801809e:	2202      	movs	r2, #2
 80180a0:	4605      	mov	r5, r0
 80180a2:	460e      	mov	r6, r1
 80180a4:	f7fb fa58 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80180a8:	2202      	movs	r2, #2
 80180aa:	4604      	mov	r4, r0
 80180ac:	18b1      	adds	r1, r6, r2
 80180ae:	4628      	mov	r0, r5
 80180b0:	f7fb fa52 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80180b4:	4020      	ands	r0, r4
 80180b6:	b2c0      	uxtb	r0, r0
 80180b8:	bd70      	pop	{r4, r5, r6, pc}
 80180ba:	bf00      	nop

080180bc <uxr_serialize_ActivityInfoVariant>:
 80180bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180c0:	460d      	mov	r5, r1
 80180c2:	7809      	ldrb	r1, [r1, #0]
 80180c4:	4606      	mov	r6, r0
 80180c6:	f7fb fc2d 	bl	8013924 <ucdr_serialize_uint8_t>
 80180ca:	b130      	cbz	r0, 80180da <uxr_serialize_ActivityInfoVariant+0x1e>
 80180cc:	782b      	ldrb	r3, [r5, #0]
 80180ce:	2b06      	cmp	r3, #6
 80180d0:	d014      	beq.n	80180fc <uxr_serialize_ActivityInfoVariant+0x40>
 80180d2:	2b0d      	cmp	r3, #13
 80180d4:	d019      	beq.n	801810a <uxr_serialize_ActivityInfoVariant+0x4e>
 80180d6:	2b05      	cmp	r3, #5
 80180d8:	d001      	beq.n	80180de <uxr_serialize_ActivityInfoVariant+0x22>
 80180da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180de:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80180e2:	4630      	mov	r0, r6
 80180e4:	f7fc f946 	bl	8014374 <ucdr_serialize_int16_t>
 80180e8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80180ec:	4604      	mov	r4, r0
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7fc f878 	bl	80141e4 <ucdr_serialize_uint64_t>
 80180f4:	4020      	ands	r0, r4
 80180f6:	b2c0      	uxtb	r0, r0
 80180f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180fc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018100:	4630      	mov	r0, r6
 8018102:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018106:	f7fc b935 	b.w	8014374 <ucdr_serialize_int16_t>
 801810a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801810e:	4630      	mov	r0, r6
 8018110:	f7fc f930 	bl	8014374 <ucdr_serialize_int16_t>
 8018114:	68e9      	ldr	r1, [r5, #12]
 8018116:	4681      	mov	r9, r0
 8018118:	4630      	mov	r0, r6
 801811a:	f7fb fe1f 	bl	8013d5c <ucdr_serialize_uint32_t>
 801811e:	68eb      	ldr	r3, [r5, #12]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d051      	beq.n	80181c8 <uxr_serialize_ActivityInfoVariant+0x10c>
 8018124:	b1e8      	cbz	r0, 8018162 <uxr_serialize_ActivityInfoVariant+0xa6>
 8018126:	f105 0714 	add.w	r7, r5, #20
 801812a:	f04f 0800 	mov.w	r8, #0
 801812e:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8018132:	4630      	mov	r0, r6
 8018134:	f7fb fbf6 	bl	8013924 <ucdr_serialize_uint8_t>
 8018138:	b198      	cbz	r0, 8018162 <uxr_serialize_ActivityInfoVariant+0xa6>
 801813a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801813e:	2b03      	cmp	r3, #3
 8018140:	d839      	bhi.n	80181b6 <uxr_serialize_ActivityInfoVariant+0xfa>
 8018142:	e8df f003 	tbb	[pc, r3]
 8018146:	1e2b      	.short	0x1e2b
 8018148:	0211      	.short	0x0211
 801814a:	6839      	ldr	r1, [r7, #0]
 801814c:	4630      	mov	r0, r6
 801814e:	f004 f907 	bl	801c360 <ucdr_serialize_string>
 8018152:	68eb      	ldr	r3, [r5, #12]
 8018154:	f108 0801 	add.w	r8, r8, #1
 8018158:	4598      	cmp	r8, r3
 801815a:	d231      	bcs.n	80181c0 <uxr_serialize_ActivityInfoVariant+0x104>
 801815c:	3718      	adds	r7, #24
 801815e:	2800      	cmp	r0, #0
 8018160:	d1e5      	bne.n	801812e <uxr_serialize_ActivityInfoVariant+0x72>
 8018162:	2000      	movs	r0, #0
 8018164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018168:	2210      	movs	r2, #16
 801816a:	4639      	mov	r1, r7
 801816c:	4630      	mov	r0, r6
 801816e:	f7fb f98f 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8018172:	6939      	ldr	r1, [r7, #16]
 8018174:	4604      	mov	r4, r0
 8018176:	4630      	mov	r0, r6
 8018178:	f7fb fdf0 	bl	8013d5c <ucdr_serialize_uint32_t>
 801817c:	4020      	ands	r0, r4
 801817e:	b2c0      	uxtb	r0, r0
 8018180:	e7e7      	b.n	8018152 <uxr_serialize_ActivityInfoVariant+0x96>
 8018182:	2204      	movs	r2, #4
 8018184:	4639      	mov	r1, r7
 8018186:	4630      	mov	r0, r6
 8018188:	f7fb f982 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801818c:	88b9      	ldrh	r1, [r7, #4]
 801818e:	4604      	mov	r4, r0
 8018190:	4630      	mov	r0, r6
 8018192:	f7fb fbf3 	bl	801397c <ucdr_serialize_uint16_t>
 8018196:	4020      	ands	r0, r4
 8018198:	b2c0      	uxtb	r0, r0
 801819a:	e7da      	b.n	8018152 <uxr_serialize_ActivityInfoVariant+0x96>
 801819c:	2202      	movs	r2, #2
 801819e:	4639      	mov	r1, r7
 80181a0:	4630      	mov	r0, r6
 80181a2:	f7fb f975 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80181a6:	78b9      	ldrb	r1, [r7, #2]
 80181a8:	4604      	mov	r4, r0
 80181aa:	4630      	mov	r0, r6
 80181ac:	f7fb fbba 	bl	8013924 <ucdr_serialize_uint8_t>
 80181b0:	4020      	ands	r0, r4
 80181b2:	b2c0      	uxtb	r0, r0
 80181b4:	e7cd      	b.n	8018152 <uxr_serialize_ActivityInfoVariant+0x96>
 80181b6:	68eb      	ldr	r3, [r5, #12]
 80181b8:	f108 0801 	add.w	r8, r8, #1
 80181bc:	4598      	cmp	r8, r3
 80181be:	d308      	bcc.n	80181d2 <uxr_serialize_ActivityInfoVariant+0x116>
 80181c0:	ea09 0000 	and.w	r0, r9, r0
 80181c4:	b2c0      	uxtb	r0, r0
 80181c6:	e788      	b.n	80180da <uxr_serialize_ActivityInfoVariant+0x1e>
 80181c8:	ea09 0900 	and.w	r9, r9, r0
 80181cc:	fa5f f089 	uxtb.w	r0, r9
 80181d0:	e783      	b.n	80180da <uxr_serialize_ActivityInfoVariant+0x1e>
 80181d2:	3718      	adds	r7, #24
 80181d4:	e7ab      	b.n	801812e <uxr_serialize_ActivityInfoVariant+0x72>
 80181d6:	bf00      	nop

080181d8 <uxr_deserialize_BaseObjectReply>:
 80181d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181dc:	2202      	movs	r2, #2
 80181de:	4606      	mov	r6, r0
 80181e0:	460f      	mov	r7, r1
 80181e2:	f7fb f9b9 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80181e6:	2202      	movs	r2, #2
 80181e8:	18b9      	adds	r1, r7, r2
 80181ea:	4605      	mov	r5, r0
 80181ec:	4630      	mov	r0, r6
 80181ee:	f7fb f9b3 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80181f2:	1d39      	adds	r1, r7, #4
 80181f4:	4680      	mov	r8, r0
 80181f6:	4630      	mov	r0, r6
 80181f8:	f7fb fbaa 	bl	8013950 <ucdr_deserialize_uint8_t>
 80181fc:	1d79      	adds	r1, r7, #5
 80181fe:	4604      	mov	r4, r0
 8018200:	4630      	mov	r0, r6
 8018202:	f7fb fba5 	bl	8013950 <ucdr_deserialize_uint8_t>
 8018206:	ea05 0508 	and.w	r5, r5, r8
 801820a:	402c      	ands	r4, r5
 801820c:	4020      	ands	r0, r4
 801820e:	b2c0      	uxtb	r0, r0
 8018210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018214 <uxr_serialize_ReadSpecification>:
 8018214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	460d      	mov	r5, r1
 801821a:	7809      	ldrb	r1, [r1, #0]
 801821c:	4606      	mov	r6, r0
 801821e:	f7fb fb81 	bl	8013924 <ucdr_serialize_uint8_t>
 8018222:	7869      	ldrb	r1, [r5, #1]
 8018224:	4604      	mov	r4, r0
 8018226:	4630      	mov	r0, r6
 8018228:	f7fb fb7c 	bl	8013924 <ucdr_serialize_uint8_t>
 801822c:	78a9      	ldrb	r1, [r5, #2]
 801822e:	4004      	ands	r4, r0
 8018230:	4630      	mov	r0, r6
 8018232:	f7fb fb49 	bl	80138c8 <ucdr_serialize_bool>
 8018236:	78ab      	ldrb	r3, [r5, #2]
 8018238:	b2e4      	uxtb	r4, r4
 801823a:	4004      	ands	r4, r0
 801823c:	b94b      	cbnz	r3, 8018252 <uxr_serialize_ReadSpecification+0x3e>
 801823e:	7a29      	ldrb	r1, [r5, #8]
 8018240:	4630      	mov	r0, r6
 8018242:	f7fb fb41 	bl	80138c8 <ucdr_serialize_bool>
 8018246:	7a2b      	ldrb	r3, [r5, #8]
 8018248:	4004      	ands	r4, r0
 801824a:	b943      	cbnz	r3, 801825e <uxr_serialize_ReadSpecification+0x4a>
 801824c:	4620      	mov	r0, r4
 801824e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018252:	6869      	ldr	r1, [r5, #4]
 8018254:	4630      	mov	r0, r6
 8018256:	f004 f883 	bl	801c360 <ucdr_serialize_string>
 801825a:	4004      	ands	r4, r0
 801825c:	e7ef      	b.n	801823e <uxr_serialize_ReadSpecification+0x2a>
 801825e:	8969      	ldrh	r1, [r5, #10]
 8018260:	4630      	mov	r0, r6
 8018262:	f7fb fb8b 	bl	801397c <ucdr_serialize_uint16_t>
 8018266:	89a9      	ldrh	r1, [r5, #12]
 8018268:	4607      	mov	r7, r0
 801826a:	4630      	mov	r0, r6
 801826c:	f7fb fb86 	bl	801397c <ucdr_serialize_uint16_t>
 8018270:	89e9      	ldrh	r1, [r5, #14]
 8018272:	4007      	ands	r7, r0
 8018274:	4630      	mov	r0, r6
 8018276:	f7fb fb81 	bl	801397c <ucdr_serialize_uint16_t>
 801827a:	8a29      	ldrh	r1, [r5, #16]
 801827c:	4680      	mov	r8, r0
 801827e:	4630      	mov	r0, r6
 8018280:	f7fb fb7c 	bl	801397c <ucdr_serialize_uint16_t>
 8018284:	b2ff      	uxtb	r7, r7
 8018286:	ea04 0507 	and.w	r5, r4, r7
 801828a:	ea05 0508 	and.w	r5, r5, r8
 801828e:	ea00 0405 	and.w	r4, r0, r5
 8018292:	4620      	mov	r0, r4
 8018294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018298 <uxr_serialize_CREATE_CLIENT_Payload>:
 8018298:	f7ff ba3a 	b.w	8017710 <uxr_serialize_CLIENT_Representation>

0801829c <uxr_serialize_CREATE_Payload>:
 801829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829e:	2202      	movs	r2, #2
 80182a0:	4606      	mov	r6, r0
 80182a2:	460d      	mov	r5, r1
 80182a4:	f7fb f8f4 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80182a8:	2202      	movs	r2, #2
 80182aa:	18a9      	adds	r1, r5, r2
 80182ac:	4604      	mov	r4, r0
 80182ae:	4630      	mov	r0, r6
 80182b0:	f7fb f8ee 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80182b4:	7929      	ldrb	r1, [r5, #4]
 80182b6:	4607      	mov	r7, r0
 80182b8:	4630      	mov	r0, r6
 80182ba:	f7fb fb33 	bl	8013924 <ucdr_serialize_uint8_t>
 80182be:	b170      	cbz	r0, 80182de <uxr_serialize_CREATE_Payload+0x42>
 80182c0:	792b      	ldrb	r3, [r5, #4]
 80182c2:	403c      	ands	r4, r7
 80182c4:	3b01      	subs	r3, #1
 80182c6:	b2e4      	uxtb	r4, r4
 80182c8:	2b0d      	cmp	r3, #13
 80182ca:	d809      	bhi.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 80182cc:	e8df f003 	tbb	[pc, r3]
 80182d0:	23230a3e 	.word	0x23230a3e
 80182d4:	0a0a0a0a 	.word	0x0a0a0a0a
 80182d8:	12121208 	.word	0x12121208
 80182dc:	5f58      	.short	0x5f58
 80182de:	2400      	movs	r4, #0
 80182e0:	4620      	mov	r0, r4
 80182e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182e4:	f105 0108 	add.w	r1, r5, #8
 80182e8:	4630      	mov	r0, r6
 80182ea:	f7ff fb19 	bl	8017920 <uxr_serialize_DATAWRITER_Representation>
 80182ee:	4004      	ands	r4, r0
 80182f0:	4620      	mov	r0, r4
 80182f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182f4:	7a29      	ldrb	r1, [r5, #8]
 80182f6:	4630      	mov	r0, r6
 80182f8:	f7fb fb14 	bl	8013924 <ucdr_serialize_uint8_t>
 80182fc:	2800      	cmp	r0, #0
 80182fe:	d0ee      	beq.n	80182de <uxr_serialize_CREATE_Payload+0x42>
 8018300:	7a2b      	ldrb	r3, [r5, #8]
 8018302:	2b01      	cmp	r3, #1
 8018304:	d001      	beq.n	801830a <uxr_serialize_CREATE_Payload+0x6e>
 8018306:	2b02      	cmp	r3, #2
 8018308:	d1ea      	bne.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 801830a:	68e9      	ldr	r1, [r5, #12]
 801830c:	4630      	mov	r0, r6
 801830e:	f004 f827 	bl	801c360 <ucdr_serialize_string>
 8018312:	4004      	ands	r4, r0
 8018314:	e7e4      	b.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 8018316:	7a29      	ldrb	r1, [r5, #8]
 8018318:	4630      	mov	r0, r6
 801831a:	f7fb fb03 	bl	8013924 <ucdr_serialize_uint8_t>
 801831e:	4607      	mov	r7, r0
 8018320:	b158      	cbz	r0, 801833a <uxr_serialize_CREATE_Payload+0x9e>
 8018322:	7a2b      	ldrb	r3, [r5, #8]
 8018324:	2b02      	cmp	r3, #2
 8018326:	d039      	beq.n	801839c <uxr_serialize_CREATE_Payload+0x100>
 8018328:	2b03      	cmp	r3, #3
 801832a:	d106      	bne.n	801833a <uxr_serialize_CREATE_Payload+0x9e>
 801832c:	68ea      	ldr	r2, [r5, #12]
 801832e:	f105 0110 	add.w	r1, r5, #16
 8018332:	4630      	mov	r0, r6
 8018334:	f7f6 fbc4 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 8018338:	4607      	mov	r7, r0
 801833a:	2202      	movs	r2, #2
 801833c:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8018340:	4630      	mov	r0, r6
 8018342:	f7fb f8a5 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8018346:	4038      	ands	r0, r7
 8018348:	4004      	ands	r4, r0
 801834a:	e7c9      	b.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 801834c:	7a29      	ldrb	r1, [r5, #8]
 801834e:	4630      	mov	r0, r6
 8018350:	f7fb fae8 	bl	8013924 <ucdr_serialize_uint8_t>
 8018354:	4607      	mov	r7, r0
 8018356:	b158      	cbz	r0, 8018370 <uxr_serialize_CREATE_Payload+0xd4>
 8018358:	7a2b      	ldrb	r3, [r5, #8]
 801835a:	2b02      	cmp	r3, #2
 801835c:	d003      	beq.n	8018366 <uxr_serialize_CREATE_Payload+0xca>
 801835e:	2b03      	cmp	r3, #3
 8018360:	d022      	beq.n	80183a8 <uxr_serialize_CREATE_Payload+0x10c>
 8018362:	2b01      	cmp	r3, #1
 8018364:	d104      	bne.n	8018370 <uxr_serialize_CREATE_Payload+0xd4>
 8018366:	68e9      	ldr	r1, [r5, #12]
 8018368:	4630      	mov	r0, r6
 801836a:	f003 fff9 	bl	801c360 <ucdr_serialize_string>
 801836e:	4607      	mov	r7, r0
 8018370:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8018374:	4630      	mov	r0, r6
 8018376:	f7fb fffd 	bl	8014374 <ucdr_serialize_int16_t>
 801837a:	4038      	ands	r0, r7
 801837c:	4004      	ands	r4, r0
 801837e:	e7af      	b.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 8018380:	f105 0108 	add.w	r1, r5, #8
 8018384:	4630      	mov	r0, r6
 8018386:	f7ff fa81 	bl	801788c <uxr_serialize_AGENT_Representation>
 801838a:	4004      	ands	r4, r0
 801838c:	e7a8      	b.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 801838e:	f105 0108 	add.w	r1, r5, #8
 8018392:	4630      	mov	r0, r6
 8018394:	f7ff f9bc 	bl	8017710 <uxr_serialize_CLIENT_Representation>
 8018398:	4004      	ands	r4, r0
 801839a:	e7a1      	b.n	80182e0 <uxr_serialize_CREATE_Payload+0x44>
 801839c:	68e9      	ldr	r1, [r5, #12]
 801839e:	4630      	mov	r0, r6
 80183a0:	f003 ffde 	bl	801c360 <ucdr_serialize_string>
 80183a4:	4607      	mov	r7, r0
 80183a6:	e7c8      	b.n	801833a <uxr_serialize_CREATE_Payload+0x9e>
 80183a8:	68ea      	ldr	r2, [r5, #12]
 80183aa:	f105 0110 	add.w	r1, r5, #16
 80183ae:	4630      	mov	r0, r6
 80183b0:	f7f6 fb86 	bl	800eac0 <ucdr_serialize_sequence_uint8_t>
 80183b4:	4607      	mov	r7, r0
 80183b6:	e7db      	b.n	8018370 <uxr_serialize_CREATE_Payload+0xd4>

080183b8 <uxr_deserialize_GET_INFO_Payload>:
 80183b8:	b570      	push	{r4, r5, r6, lr}
 80183ba:	2202      	movs	r2, #2
 80183bc:	4605      	mov	r5, r0
 80183be:	460e      	mov	r6, r1
 80183c0:	f7fb f8ca 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80183c4:	2202      	movs	r2, #2
 80183c6:	18b1      	adds	r1, r6, r2
 80183c8:	4604      	mov	r4, r0
 80183ca:	4628      	mov	r0, r5
 80183cc:	f7fb f8c4 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80183d0:	1d31      	adds	r1, r6, #4
 80183d2:	4004      	ands	r4, r0
 80183d4:	4628      	mov	r0, r5
 80183d6:	f7fb fdeb 	bl	8013fb0 <ucdr_deserialize_uint32_t>
 80183da:	b2e4      	uxtb	r4, r4
 80183dc:	4020      	ands	r0, r4
 80183de:	bd70      	pop	{r4, r5, r6, pc}

080183e0 <uxr_serialize_DELETE_Payload>:
 80183e0:	b570      	push	{r4, r5, r6, lr}
 80183e2:	2202      	movs	r2, #2
 80183e4:	4605      	mov	r5, r0
 80183e6:	460e      	mov	r6, r1
 80183e8:	f7fb f852 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80183ec:	2202      	movs	r2, #2
 80183ee:	4604      	mov	r4, r0
 80183f0:	18b1      	adds	r1, r6, r2
 80183f2:	4628      	mov	r0, r5
 80183f4:	f7fb f84c 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80183f8:	4020      	ands	r0, r4
 80183fa:	b2c0      	uxtb	r0, r0
 80183fc:	bd70      	pop	{r4, r5, r6, pc}
 80183fe:	bf00      	nop

08018400 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018404:	4605      	mov	r5, r0
 8018406:	460e      	mov	r6, r1
 8018408:	f7fb faa2 	bl	8013950 <ucdr_deserialize_uint8_t>
 801840c:	1c71      	adds	r1, r6, #1
 801840e:	4604      	mov	r4, r0
 8018410:	4628      	mov	r0, r5
 8018412:	f7fb fa9d 	bl	8013950 <ucdr_deserialize_uint8_t>
 8018416:	2204      	movs	r2, #4
 8018418:	18b1      	adds	r1, r6, r2
 801841a:	4681      	mov	r9, r0
 801841c:	4628      	mov	r0, r5
 801841e:	f7fb f89b 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 8018422:	f106 0108 	add.w	r1, r6, #8
 8018426:	4680      	mov	r8, r0
 8018428:	2202      	movs	r2, #2
 801842a:	4628      	mov	r0, r5
 801842c:	f7fb f894 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 8018430:	2202      	movs	r2, #2
 8018432:	f106 010a 	add.w	r1, r6, #10
 8018436:	4607      	mov	r7, r0
 8018438:	4628      	mov	r0, r5
 801843a:	f7fb f88d 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801843e:	ea04 0409 	and.w	r4, r4, r9
 8018442:	4603      	mov	r3, r0
 8018444:	f106 010c 	add.w	r1, r6, #12
 8018448:	4628      	mov	r0, r5
 801844a:	b2e4      	uxtb	r4, r4
 801844c:	461d      	mov	r5, r3
 801844e:	ea04 0408 	and.w	r4, r4, r8
 8018452:	f7fb fa4f 	bl	80138f4 <ucdr_deserialize_bool>
 8018456:	4027      	ands	r7, r4
 8018458:	403d      	ands	r5, r7
 801845a:	4028      	ands	r0, r5
 801845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018460 <uxr_deserialize_STATUS_Payload>:
 8018460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018464:	2202      	movs	r2, #2
 8018466:	4606      	mov	r6, r0
 8018468:	460f      	mov	r7, r1
 801846a:	f7fb f875 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801846e:	2202      	movs	r2, #2
 8018470:	18b9      	adds	r1, r7, r2
 8018472:	4605      	mov	r5, r0
 8018474:	4630      	mov	r0, r6
 8018476:	f7fb f86f 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801847a:	1d39      	adds	r1, r7, #4
 801847c:	4680      	mov	r8, r0
 801847e:	4630      	mov	r0, r6
 8018480:	f7fb fa66 	bl	8013950 <ucdr_deserialize_uint8_t>
 8018484:	1d79      	adds	r1, r7, #5
 8018486:	4604      	mov	r4, r0
 8018488:	4630      	mov	r0, r6
 801848a:	f7fb fa61 	bl	8013950 <ucdr_deserialize_uint8_t>
 801848e:	ea05 0508 	and.w	r5, r5, r8
 8018492:	402c      	ands	r4, r5
 8018494:	4020      	ands	r0, r4
 8018496:	b2c0      	uxtb	r0, r0
 8018498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801849c <uxr_serialize_INFO_Payload>:
 801849c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184a0:	2202      	movs	r2, #2
 80184a2:	460c      	mov	r4, r1
 80184a4:	4605      	mov	r5, r0
 80184a6:	f7fa fff3 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80184aa:	2202      	movs	r2, #2
 80184ac:	18a1      	adds	r1, r4, r2
 80184ae:	4680      	mov	r8, r0
 80184b0:	4628      	mov	r0, r5
 80184b2:	f7fa ffed 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80184b6:	7921      	ldrb	r1, [r4, #4]
 80184b8:	4607      	mov	r7, r0
 80184ba:	4628      	mov	r0, r5
 80184bc:	f7fb fa32 	bl	8013924 <ucdr_serialize_uint8_t>
 80184c0:	7961      	ldrb	r1, [r4, #5]
 80184c2:	4606      	mov	r6, r0
 80184c4:	4628      	mov	r0, r5
 80184c6:	f7fb fa2d 	bl	8013924 <ucdr_serialize_uint8_t>
 80184ca:	ea08 0807 	and.w	r8, r8, r7
 80184ce:	ea06 0608 	and.w	r6, r6, r8
 80184d2:	ea00 0706 	and.w	r7, r0, r6
 80184d6:	7a21      	ldrb	r1, [r4, #8]
 80184d8:	4628      	mov	r0, r5
 80184da:	f7fb f9f5 	bl	80138c8 <ucdr_serialize_bool>
 80184de:	7a23      	ldrb	r3, [r4, #8]
 80184e0:	b2ff      	uxtb	r7, r7
 80184e2:	4606      	mov	r6, r0
 80184e4:	b96b      	cbnz	r3, 8018502 <uxr_serialize_INFO_Payload+0x66>
 80184e6:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80184ea:	4628      	mov	r0, r5
 80184ec:	f7fb f9ec 	bl	80138c8 <ucdr_serialize_bool>
 80184f0:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80184f4:	4030      	ands	r0, r6
 80184f6:	b2c6      	uxtb	r6, r0
 80184f8:	b983      	cbnz	r3, 801851c <uxr_serialize_INFO_Payload+0x80>
 80184fa:	ea06 0007 	and.w	r0, r6, r7
 80184fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018502:	7b21      	ldrb	r1, [r4, #12]
 8018504:	4628      	mov	r0, r5
 8018506:	f7fb fa0d 	bl	8013924 <ucdr_serialize_uint8_t>
 801850a:	b188      	cbz	r0, 8018530 <uxr_serialize_INFO_Payload+0x94>
 801850c:	f104 010c 	add.w	r1, r4, #12
 8018510:	4628      	mov	r0, r5
 8018512:	f7ff fa2d 	bl	8017970 <uxr_serialize_ObjectVariant.part.0>
 8018516:	4030      	ands	r0, r6
 8018518:	b2c6      	uxtb	r6, r0
 801851a:	e7e4      	b.n	80184e6 <uxr_serialize_INFO_Payload+0x4a>
 801851c:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8018520:	4628      	mov	r0, r5
 8018522:	f7ff fdcb 	bl	80180bc <uxr_serialize_ActivityInfoVariant>
 8018526:	4006      	ands	r6, r0
 8018528:	ea06 0007 	and.w	r0, r6, r7
 801852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018530:	4606      	mov	r6, r0
 8018532:	e7d8      	b.n	80184e6 <uxr_serialize_INFO_Payload+0x4a>

08018534 <uxr_serialize_READ_DATA_Payload>:
 8018534:	b570      	push	{r4, r5, r6, lr}
 8018536:	2202      	movs	r2, #2
 8018538:	4605      	mov	r5, r0
 801853a:	460e      	mov	r6, r1
 801853c:	f7fa ffa8 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8018540:	2202      	movs	r2, #2
 8018542:	18b1      	adds	r1, r6, r2
 8018544:	4604      	mov	r4, r0
 8018546:	4628      	mov	r0, r5
 8018548:	f7fa ffa2 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801854c:	1d31      	adds	r1, r6, #4
 801854e:	4004      	ands	r4, r0
 8018550:	4628      	mov	r0, r5
 8018552:	f7ff fe5f 	bl	8018214 <uxr_serialize_ReadSpecification>
 8018556:	b2e4      	uxtb	r4, r4
 8018558:	4020      	ands	r0, r4
 801855a:	bd70      	pop	{r4, r5, r6, pc}

0801855c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801855c:	b570      	push	{r4, r5, r6, lr}
 801855e:	2202      	movs	r2, #2
 8018560:	4605      	mov	r5, r0
 8018562:	460e      	mov	r6, r1
 8018564:	f7fa ff94 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8018568:	2202      	movs	r2, #2
 801856a:	4604      	mov	r4, r0
 801856c:	18b1      	adds	r1, r6, r2
 801856e:	4628      	mov	r0, r5
 8018570:	f7fa ff8e 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8018574:	4020      	ands	r0, r4
 8018576:	b2c0      	uxtb	r0, r0
 8018578:	bd70      	pop	{r4, r5, r6, pc}
 801857a:	bf00      	nop

0801857c <uxr_serialize_ACKNACK_Payload>:
 801857c:	b570      	push	{r4, r5, r6, lr}
 801857e:	460c      	mov	r4, r1
 8018580:	460e      	mov	r6, r1
 8018582:	f834 1b02 	ldrh.w	r1, [r4], #2
 8018586:	4605      	mov	r5, r0
 8018588:	f7fb f9f8 	bl	801397c <ucdr_serialize_uint16_t>
 801858c:	2202      	movs	r2, #2
 801858e:	4621      	mov	r1, r4
 8018590:	4604      	mov	r4, r0
 8018592:	4628      	mov	r0, r5
 8018594:	f7fa ff7c 	bl	8013490 <ucdr_serialize_array_uint8_t>
 8018598:	7931      	ldrb	r1, [r6, #4]
 801859a:	4004      	ands	r4, r0
 801859c:	4628      	mov	r0, r5
 801859e:	f7fb f9c1 	bl	8013924 <ucdr_serialize_uint8_t>
 80185a2:	b2e4      	uxtb	r4, r4
 80185a4:	4020      	ands	r0, r4
 80185a6:	bd70      	pop	{r4, r5, r6, pc}

080185a8 <uxr_deserialize_ACKNACK_Payload>:
 80185a8:	b570      	push	{r4, r5, r6, lr}
 80185aa:	4605      	mov	r5, r0
 80185ac:	460e      	mov	r6, r1
 80185ae:	f7fb fae9 	bl	8013b84 <ucdr_deserialize_uint16_t>
 80185b2:	2202      	movs	r2, #2
 80185b4:	18b1      	adds	r1, r6, r2
 80185b6:	4604      	mov	r4, r0
 80185b8:	4628      	mov	r0, r5
 80185ba:	f7fa ffcd 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80185be:	1d31      	adds	r1, r6, #4
 80185c0:	4004      	ands	r4, r0
 80185c2:	4628      	mov	r0, r5
 80185c4:	f7fb f9c4 	bl	8013950 <ucdr_deserialize_uint8_t>
 80185c8:	b2e4      	uxtb	r4, r4
 80185ca:	4020      	ands	r0, r4
 80185cc:	bd70      	pop	{r4, r5, r6, pc}
 80185ce:	bf00      	nop

080185d0 <uxr_serialize_HEARTBEAT_Payload>:
 80185d0:	b570      	push	{r4, r5, r6, lr}
 80185d2:	460d      	mov	r5, r1
 80185d4:	8809      	ldrh	r1, [r1, #0]
 80185d6:	4606      	mov	r6, r0
 80185d8:	f7fb f9d0 	bl	801397c <ucdr_serialize_uint16_t>
 80185dc:	8869      	ldrh	r1, [r5, #2]
 80185de:	4604      	mov	r4, r0
 80185e0:	4630      	mov	r0, r6
 80185e2:	f7fb f9cb 	bl	801397c <ucdr_serialize_uint16_t>
 80185e6:	7929      	ldrb	r1, [r5, #4]
 80185e8:	4004      	ands	r4, r0
 80185ea:	4630      	mov	r0, r6
 80185ec:	f7fb f99a 	bl	8013924 <ucdr_serialize_uint8_t>
 80185f0:	b2e4      	uxtb	r4, r4
 80185f2:	4020      	ands	r0, r4
 80185f4:	bd70      	pop	{r4, r5, r6, pc}
 80185f6:	bf00      	nop

080185f8 <uxr_deserialize_HEARTBEAT_Payload>:
 80185f8:	b570      	push	{r4, r5, r6, lr}
 80185fa:	4605      	mov	r5, r0
 80185fc:	460e      	mov	r6, r1
 80185fe:	f7fb fac1 	bl	8013b84 <ucdr_deserialize_uint16_t>
 8018602:	1cb1      	adds	r1, r6, #2
 8018604:	4604      	mov	r4, r0
 8018606:	4628      	mov	r0, r5
 8018608:	f7fb fabc 	bl	8013b84 <ucdr_deserialize_uint16_t>
 801860c:	1d31      	adds	r1, r6, #4
 801860e:	4004      	ands	r4, r0
 8018610:	4628      	mov	r0, r5
 8018612:	f7fb f99d 	bl	8013950 <ucdr_deserialize_uint8_t>
 8018616:	b2e4      	uxtb	r4, r4
 8018618:	4020      	ands	r0, r4
 801861a:	bd70      	pop	{r4, r5, r6, pc}

0801861c <uxr_serialize_TIMESTAMP_Payload>:
 801861c:	b570      	push	{r4, r5, r6, lr}
 801861e:	460d      	mov	r5, r1
 8018620:	6809      	ldr	r1, [r1, #0]
 8018622:	4606      	mov	r6, r0
 8018624:	f7fb ffac 	bl	8014580 <ucdr_serialize_int32_t>
 8018628:	6869      	ldr	r1, [r5, #4]
 801862a:	4604      	mov	r4, r0
 801862c:	4630      	mov	r0, r6
 801862e:	f7fb fb95 	bl	8013d5c <ucdr_serialize_uint32_t>
 8018632:	4020      	ands	r0, r4
 8018634:	b2c0      	uxtb	r0, r0
 8018636:	bd70      	pop	{r4, r5, r6, pc}

08018638 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8018638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801863c:	4605      	mov	r5, r0
 801863e:	460e      	mov	r6, r1
 8018640:	f7fc f838 	bl	80146b4 <ucdr_deserialize_int32_t>
 8018644:	1d31      	adds	r1, r6, #4
 8018646:	4607      	mov	r7, r0
 8018648:	4628      	mov	r0, r5
 801864a:	f7fb fcb1 	bl	8013fb0 <ucdr_deserialize_uint32_t>
 801864e:	f106 0108 	add.w	r1, r6, #8
 8018652:	4680      	mov	r8, r0
 8018654:	4628      	mov	r0, r5
 8018656:	f7fc f82d 	bl	80146b4 <ucdr_deserialize_int32_t>
 801865a:	f106 010c 	add.w	r1, r6, #12
 801865e:	4604      	mov	r4, r0
 8018660:	4628      	mov	r0, r5
 8018662:	f7fb fca5 	bl	8013fb0 <ucdr_deserialize_uint32_t>
 8018666:	ea07 0708 	and.w	r7, r7, r8
 801866a:	403c      	ands	r4, r7
 801866c:	f106 0110 	add.w	r1, r6, #16
 8018670:	4004      	ands	r4, r0
 8018672:	4628      	mov	r0, r5
 8018674:	f7fc f81e 	bl	80146b4 <ucdr_deserialize_int32_t>
 8018678:	f106 0114 	add.w	r1, r6, #20
 801867c:	4607      	mov	r7, r0
 801867e:	4628      	mov	r0, r5
 8018680:	f7fb fc96 	bl	8013fb0 <ucdr_deserialize_uint32_t>
 8018684:	b2e4      	uxtb	r4, r4
 8018686:	403c      	ands	r4, r7
 8018688:	4020      	ands	r0, r4
 801868a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801868e:	bf00      	nop

08018690 <uxr_serialize_SampleIdentity>:
 8018690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018694:	220c      	movs	r2, #12
 8018696:	4604      	mov	r4, r0
 8018698:	460d      	mov	r5, r1
 801869a:	f7fa fef9 	bl	8013490 <ucdr_serialize_array_uint8_t>
 801869e:	2203      	movs	r2, #3
 80186a0:	f105 010c 	add.w	r1, r5, #12
 80186a4:	4680      	mov	r8, r0
 80186a6:	4620      	mov	r0, r4
 80186a8:	f7fa fef2 	bl	8013490 <ucdr_serialize_array_uint8_t>
 80186ac:	7be9      	ldrb	r1, [r5, #15]
 80186ae:	4681      	mov	r9, r0
 80186b0:	4620      	mov	r0, r4
 80186b2:	f7fb f937 	bl	8013924 <ucdr_serialize_uint8_t>
 80186b6:	6929      	ldr	r1, [r5, #16]
 80186b8:	4607      	mov	r7, r0
 80186ba:	4620      	mov	r0, r4
 80186bc:	f7fb ff60 	bl	8014580 <ucdr_serialize_int32_t>
 80186c0:	6969      	ldr	r1, [r5, #20]
 80186c2:	4606      	mov	r6, r0
 80186c4:	4620      	mov	r0, r4
 80186c6:	f7fb fb49 	bl	8013d5c <ucdr_serialize_uint32_t>
 80186ca:	ea08 0809 	and.w	r8, r8, r9
 80186ce:	ea07 0708 	and.w	r7, r7, r8
 80186d2:	403e      	ands	r6, r7
 80186d4:	4030      	ands	r0, r6
 80186d6:	b2c0      	uxtb	r0, r0
 80186d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080186dc <uxr_deserialize_SampleIdentity>:
 80186dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186e0:	220c      	movs	r2, #12
 80186e2:	4604      	mov	r4, r0
 80186e4:	460d      	mov	r5, r1
 80186e6:	f7fa ff37 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80186ea:	2203      	movs	r2, #3
 80186ec:	f105 010c 	add.w	r1, r5, #12
 80186f0:	4680      	mov	r8, r0
 80186f2:	4620      	mov	r0, r4
 80186f4:	f7fa ff30 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 80186f8:	f105 010f 	add.w	r1, r5, #15
 80186fc:	4681      	mov	r9, r0
 80186fe:	4620      	mov	r0, r4
 8018700:	f7fb f926 	bl	8013950 <ucdr_deserialize_uint8_t>
 8018704:	f105 0110 	add.w	r1, r5, #16
 8018708:	4607      	mov	r7, r0
 801870a:	4620      	mov	r0, r4
 801870c:	f7fb ffd2 	bl	80146b4 <ucdr_deserialize_int32_t>
 8018710:	f105 0114 	add.w	r1, r5, #20
 8018714:	4606      	mov	r6, r0
 8018716:	4620      	mov	r0, r4
 8018718:	f7fb fc4a 	bl	8013fb0 <ucdr_deserialize_uint32_t>
 801871c:	ea08 0809 	and.w	r8, r8, r9
 8018720:	ea07 0708 	and.w	r7, r7, r8
 8018724:	403e      	ands	r6, r7
 8018726:	4030      	ands	r0, r6
 8018728:	b2c0      	uxtb	r0, r0
 801872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801872e:	bf00      	nop

08018730 <rcl_client_get_rmw_handle>:
 8018730:	b118      	cbz	r0, 801873a <rcl_client_get_rmw_handle+0xa>
 8018732:	6800      	ldr	r0, [r0, #0]
 8018734:	b108      	cbz	r0, 801873a <rcl_client_get_rmw_handle+0xa>
 8018736:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801873a:	4770      	bx	lr

0801873c <rcl_send_request>:
 801873c:	2800      	cmp	r0, #0
 801873e:	d048      	beq.n	80187d2 <rcl_send_request+0x96>
 8018740:	b570      	push	{r4, r5, r6, lr}
 8018742:	4604      	mov	r4, r0
 8018744:	6800      	ldr	r0, [r0, #0]
 8018746:	b08a      	sub	sp, #40	@ 0x28
 8018748:	b1c0      	cbz	r0, 801877c <rcl_send_request+0x40>
 801874a:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801874e:	b1ab      	cbz	r3, 801877c <rcl_send_request+0x40>
 8018750:	460e      	mov	r6, r1
 8018752:	b1b9      	cbz	r1, 8018784 <rcl_send_request+0x48>
 8018754:	4615      	mov	r5, r2
 8018756:	b1aa      	cbz	r2, 8018784 <rcl_send_request+0x48>
 8018758:	2105      	movs	r1, #5
 801875a:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801875e:	f7f8 fa09 	bl	8010b74 <__atomic_load_8>
 8018762:	6823      	ldr	r3, [r4, #0]
 8018764:	e9c5 0100 	strd	r0, r1, [r5]
 8018768:	462a      	mov	r2, r5
 801876a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801876e:	4631      	mov	r1, r6
 8018770:	f003 f918 	bl	801b9a4 <rmw_send_request>
 8018774:	b148      	cbz	r0, 801878a <rcl_send_request+0x4e>
 8018776:	2001      	movs	r0, #1
 8018778:	b00a      	add	sp, #40	@ 0x28
 801877a:	bd70      	pop	{r4, r5, r6, pc}
 801877c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8018780:	b00a      	add	sp, #40	@ 0x28
 8018782:	bd70      	pop	{r4, r5, r6, pc}
 8018784:	200b      	movs	r0, #11
 8018786:	b00a      	add	sp, #40	@ 0x28
 8018788:	bd70      	pop	{r4, r5, r6, pc}
 801878a:	6820      	ldr	r0, [r4, #0]
 801878c:	2305      	movs	r3, #5
 801878e:	9300      	str	r3, [sp, #0]
 8018790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018794:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8018798:	f7f8 fa58 	bl	8010c4c <__atomic_exchange_8>
 801879c:	6823      	ldr	r3, [r4, #0]
 801879e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80187a2:	b1a2      	cbz	r2, 80187ce <rcl_send_request+0x92>
 80187a4:	a905      	add	r1, sp, #20
 80187a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80187aa:	f003 f839 	bl	801b820 <rmw_get_gid_for_client>
 80187ae:	4601      	mov	r1, r0
 80187b0:	b990      	cbnz	r0, 80187d8 <rcl_send_request+0x9c>
 80187b2:	6822      	ldr	r2, [r4, #0]
 80187b4:	ab06      	add	r3, sp, #24
 80187b6:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80187ba:	9302      	str	r3, [sp, #8]
 80187bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80187c0:	4632      	mov	r2, r6
 80187c2:	e9cd 4500 	strd	r4, r5, [sp]
 80187c6:	f000 fdc3 	bl	8019350 <rcl_send_service_event_message>
 80187ca:	2800      	cmp	r0, #0
 80187cc:	d1d4      	bne.n	8018778 <rcl_send_request+0x3c>
 80187ce:	2000      	movs	r0, #0
 80187d0:	e7d2      	b.n	8018778 <rcl_send_request+0x3c>
 80187d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80187d6:	4770      	bx	lr
 80187d8:	f000 f878 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 80187dc:	e7cc      	b.n	8018778 <rcl_send_request+0x3c>
 80187de:	bf00      	nop

080187e0 <rcl_take_response>:
 80187e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187e2:	468e      	mov	lr, r1
 80187e4:	460c      	mov	r4, r1
 80187e6:	4617      	mov	r7, r2
 80187e8:	4605      	mov	r5, r0
 80187ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187ee:	b095      	sub	sp, #84	@ 0x54
 80187f0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80187f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80187fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018800:	2d00      	cmp	r5, #0
 8018802:	d044      	beq.n	801888e <rcl_take_response+0xae>
 8018804:	682b      	ldr	r3, [r5, #0]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d041      	beq.n	801888e <rcl_take_response+0xae>
 801880a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801880e:	2800      	cmp	r0, #0
 8018810:	d03d      	beq.n	801888e <rcl_take_response+0xae>
 8018812:	2f00      	cmp	r7, #0
 8018814:	d03e      	beq.n	8018894 <rcl_take_response+0xb4>
 8018816:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 80188b0 <rcl_take_response+0xd0>
 801881a:	2300      	movs	r3, #0
 801881c:	f88d 3013 	strb.w	r3, [sp, #19]
 8018820:	463a      	mov	r2, r7
 8018822:	f10d 0313 	add.w	r3, sp, #19
 8018826:	a90a      	add	r1, sp, #40	@ 0x28
 8018828:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801882c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8018830:	f003 f9b8 	bl	801bba4 <rmw_take_response>
 8018834:	4606      	mov	r6, r0
 8018836:	bb78      	cbnz	r0, 8018898 <rcl_take_response+0xb8>
 8018838:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801883c:	b373      	cbz	r3, 801889c <rcl_take_response+0xbc>
 801883e:	682b      	ldr	r3, [r5, #0]
 8018840:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8018844:	b1aa      	cbz	r2, 8018872 <rcl_take_response+0x92>
 8018846:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801884a:	a905      	add	r1, sp, #20
 801884c:	f002 ffe8 	bl	801b820 <rmw_get_gid_for_client>
 8018850:	bb38      	cbnz	r0, 80188a2 <rcl_take_response+0xc2>
 8018852:	682b      	ldr	r3, [r5, #0]
 8018854:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8018858:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 801885c:	ab06      	add	r3, sp, #24
 801885e:	ed8d 7b00 	vstr	d7, [sp]
 8018862:	463a      	mov	r2, r7
 8018864:	9302      	str	r3, [sp, #8]
 8018866:	2103      	movs	r1, #3
 8018868:	f000 fd72 	bl	8019350 <rcl_send_service_event_message>
 801886c:	2800      	cmp	r0, #0
 801886e:	bf18      	it	ne
 8018870:	4606      	movne	r6, r0
 8018872:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8018876:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801887a:	46a4      	mov	ip, r4
 801887c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018880:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018884:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018888:	4630      	mov	r0, r6
 801888a:	b015      	add	sp, #84	@ 0x54
 801888c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801888e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8018892:	e7ee      	b.n	8018872 <rcl_take_response+0x92>
 8018894:	260b      	movs	r6, #11
 8018896:	e7ec      	b.n	8018872 <rcl_take_response+0x92>
 8018898:	2601      	movs	r6, #1
 801889a:	e7ea      	b.n	8018872 <rcl_take_response+0x92>
 801889c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 80188a0:	e7e7      	b.n	8018872 <rcl_take_response+0x92>
 80188a2:	f000 f813 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 80188a6:	4606      	mov	r6, r0
 80188a8:	e7e3      	b.n	8018872 <rcl_take_response+0x92>
 80188aa:	bf00      	nop
 80188ac:	f3af 8000 	nop.w
	...

080188b8 <rcl_client_is_valid>:
 80188b8:	b130      	cbz	r0, 80188c8 <rcl_client_is_valid+0x10>
 80188ba:	6800      	ldr	r0, [r0, #0]
 80188bc:	b120      	cbz	r0, 80188c8 <rcl_client_is_valid+0x10>
 80188be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80188c2:	3800      	subs	r0, #0
 80188c4:	bf18      	it	ne
 80188c6:	2001      	movne	r0, #1
 80188c8:	4770      	bx	lr
 80188ca:	bf00      	nop

080188cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80188cc:	280b      	cmp	r0, #11
 80188ce:	dc0d      	bgt.n	80188ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80188d0:	2800      	cmp	r0, #0
 80188d2:	db09      	blt.n	80188e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80188d4:	280b      	cmp	r0, #11
 80188d6:	d807      	bhi.n	80188e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80188d8:	e8df f000 	tbb	[pc, r0]
 80188dc:	07060607 	.word	0x07060607
 80188e0:	06060606 	.word	0x06060606
 80188e4:	07070606 	.word	0x07070606
 80188e8:	2001      	movs	r0, #1
 80188ea:	4770      	bx	lr
 80188ec:	28cb      	cmp	r0, #203	@ 0xcb
 80188ee:	bf14      	ite	ne
 80188f0:	2001      	movne	r0, #1
 80188f2:	20cb      	moveq	r0, #203	@ 0xcb
 80188f4:	4770      	bx	lr
 80188f6:	bf00      	nop

080188f8 <rcl_get_zero_initialized_context>:
 80188f8:	4a03      	ldr	r2, [pc, #12]	@ (8018908 <rcl_get_zero_initialized_context+0x10>)
 80188fa:	4603      	mov	r3, r0
 80188fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018900:	e883 0003 	stmia.w	r3, {r0, r1}
 8018904:	4618      	mov	r0, r3
 8018906:	4770      	bx	lr
 8018908:	08021574 	.word	0x08021574

0801890c <rcl_context_is_valid>:
 801890c:	b118      	cbz	r0, 8018916 <rcl_context_is_valid+0xa>
 801890e:	6840      	ldr	r0, [r0, #4]
 8018910:	3800      	subs	r0, #0
 8018912:	bf18      	it	ne
 8018914:	2001      	movne	r0, #1
 8018916:	4770      	bx	lr

08018918 <__cleanup_context>:
 8018918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801891c:	4606      	mov	r6, r0
 801891e:	6800      	ldr	r0, [r0, #0]
 8018920:	2300      	movs	r3, #0
 8018922:	6073      	str	r3, [r6, #4]
 8018924:	2800      	cmp	r0, #0
 8018926:	d042      	beq.n	80189ae <__cleanup_context+0x96>
 8018928:	6943      	ldr	r3, [r0, #20]
 801892a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801892e:	6907      	ldr	r7, [r0, #16]
 8018930:	b39b      	cbz	r3, 801899a <__cleanup_context+0x82>
 8018932:	3014      	adds	r0, #20
 8018934:	f7f6 f97e 	bl	800ec34 <rcl_init_options_fini>
 8018938:	4680      	mov	r8, r0
 801893a:	2800      	cmp	r0, #0
 801893c:	d144      	bne.n	80189c8 <__cleanup_context+0xb0>
 801893e:	6830      	ldr	r0, [r6, #0]
 8018940:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018942:	b123      	cbz	r3, 801894e <__cleanup_context+0x36>
 8018944:	3028      	adds	r0, #40	@ 0x28
 8018946:	f7f8 ff67 	bl	8011818 <rmw_context_fini>
 801894a:	bbb8      	cbnz	r0, 80189bc <__cleanup_context+0xa4>
 801894c:	6830      	ldr	r0, [r6, #0]
 801894e:	6a03      	ldr	r3, [r0, #32]
 8018950:	b1db      	cbz	r3, 801898a <__cleanup_context+0x72>
 8018952:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8018956:	2a01      	cmp	r2, #1
 8018958:	f17c 0100 	sbcs.w	r1, ip, #0
 801895c:	db11      	blt.n	8018982 <__cleanup_context+0x6a>
 801895e:	2400      	movs	r4, #0
 8018960:	4625      	mov	r5, r4
 8018962:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018966:	4639      	mov	r1, r7
 8018968:	b1c8      	cbz	r0, 801899e <__cleanup_context+0x86>
 801896a:	47c8      	blx	r9
 801896c:	6833      	ldr	r3, [r6, #0]
 801896e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8018972:	3401      	adds	r4, #1
 8018974:	f145 0500 	adc.w	r5, r5, #0
 8018978:	4294      	cmp	r4, r2
 801897a:	eb75 010c 	sbcs.w	r1, r5, ip
 801897e:	6a1b      	ldr	r3, [r3, #32]
 8018980:	dbef      	blt.n	8018962 <__cleanup_context+0x4a>
 8018982:	4618      	mov	r0, r3
 8018984:	4639      	mov	r1, r7
 8018986:	47c8      	blx	r9
 8018988:	6830      	ldr	r0, [r6, #0]
 801898a:	4639      	mov	r1, r7
 801898c:	47c8      	blx	r9
 801898e:	2300      	movs	r3, #0
 8018990:	e9c6 3300 	strd	r3, r3, [r6]
 8018994:	4640      	mov	r0, r8
 8018996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801899a:	4698      	mov	r8, r3
 801899c:	e7d0      	b.n	8018940 <__cleanup_context+0x28>
 801899e:	3401      	adds	r4, #1
 80189a0:	f145 0500 	adc.w	r5, r5, #0
 80189a4:	4294      	cmp	r4, r2
 80189a6:	eb75 010c 	sbcs.w	r1, r5, ip
 80189aa:	dbda      	blt.n	8018962 <__cleanup_context+0x4a>
 80189ac:	e7e9      	b.n	8018982 <__cleanup_context+0x6a>
 80189ae:	4680      	mov	r8, r0
 80189b0:	2300      	movs	r3, #0
 80189b2:	e9c6 3300 	strd	r3, r3, [r6]
 80189b6:	4640      	mov	r0, r8
 80189b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189bc:	f1b8 0f00 	cmp.w	r8, #0
 80189c0:	d005      	beq.n	80189ce <__cleanup_context+0xb6>
 80189c2:	f7f8 f9ad 	bl	8010d20 <rcutils_reset_error>
 80189c6:	e7c1      	b.n	801894c <__cleanup_context+0x34>
 80189c8:	f7f8 f9aa 	bl	8010d20 <rcutils_reset_error>
 80189cc:	e7b7      	b.n	801893e <__cleanup_context+0x26>
 80189ce:	f7ff ff7d 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 80189d2:	4680      	mov	r8, r0
 80189d4:	e7f5      	b.n	80189c2 <__cleanup_context+0xaa>
 80189d6:	bf00      	nop

080189d8 <rcl_context_fini>:
 80189d8:	b178      	cbz	r0, 80189fa <rcl_context_fini+0x22>
 80189da:	b510      	push	{r4, lr}
 80189dc:	4604      	mov	r4, r0
 80189de:	6800      	ldr	r0, [r0, #0]
 80189e0:	b150      	cbz	r0, 80189f8 <rcl_context_fini+0x20>
 80189e2:	6863      	ldr	r3, [r4, #4]
 80189e4:	b93b      	cbnz	r3, 80189f6 <rcl_context_fini+0x1e>
 80189e6:	f7f8 f8b7 	bl	8010b58 <rcutils_allocator_is_valid>
 80189ea:	b120      	cbz	r0, 80189f6 <rcl_context_fini+0x1e>
 80189ec:	4620      	mov	r0, r4
 80189ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189f2:	f7ff bf91 	b.w	8018918 <__cleanup_context>
 80189f6:	200b      	movs	r0, #11
 80189f8:	bd10      	pop	{r4, pc}
 80189fa:	200b      	movs	r0, #11
 80189fc:	4770      	bx	lr
 80189fe:	bf00      	nop

08018a00 <rcl_get_zero_initialized_guard_condition>:
 8018a00:	4a03      	ldr	r2, [pc, #12]	@ (8018a10 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018a02:	4603      	mov	r3, r0
 8018a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a08:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	4770      	bx	lr
 8018a10:	0802157c 	.word	0x0802157c

08018a14 <rcl_guard_condition_init>:
 8018a14:	b082      	sub	sp, #8
 8018a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a18:	b087      	sub	sp, #28
 8018a1a:	ac0c      	add	r4, sp, #48	@ 0x30
 8018a1c:	e884 000c 	stmia.w	r4, {r2, r3}
 8018a20:	46a6      	mov	lr, r4
 8018a22:	460d      	mov	r5, r1
 8018a24:	4604      	mov	r4, r0
 8018a26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a2a:	f10d 0c04 	add.w	ip, sp, #4
 8018a2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a32:	f8de 3000 	ldr.w	r3, [lr]
 8018a36:	f8cc 3000 	str.w	r3, [ip]
 8018a3a:	a801      	add	r0, sp, #4
 8018a3c:	f7f8 f88c 	bl	8010b58 <rcutils_allocator_is_valid>
 8018a40:	b338      	cbz	r0, 8018a92 <rcl_guard_condition_init+0x7e>
 8018a42:	b334      	cbz	r4, 8018a92 <rcl_guard_condition_init+0x7e>
 8018a44:	6866      	ldr	r6, [r4, #4]
 8018a46:	b9ee      	cbnz	r6, 8018a84 <rcl_guard_condition_init+0x70>
 8018a48:	b31d      	cbz	r5, 8018a92 <rcl_guard_condition_init+0x7e>
 8018a4a:	4628      	mov	r0, r5
 8018a4c:	f7ff ff5e 	bl	801890c <rcl_context_is_valid>
 8018a50:	b308      	cbz	r0, 8018a96 <rcl_guard_condition_init+0x82>
 8018a52:	9b01      	ldr	r3, [sp, #4]
 8018a54:	9905      	ldr	r1, [sp, #20]
 8018a56:	201c      	movs	r0, #28
 8018a58:	4798      	blx	r3
 8018a5a:	4607      	mov	r7, r0
 8018a5c:	6060      	str	r0, [r4, #4]
 8018a5e:	b310      	cbz	r0, 8018aa6 <rcl_guard_condition_init+0x92>
 8018a60:	6828      	ldr	r0, [r5, #0]
 8018a62:	3028      	adds	r0, #40	@ 0x28
 8018a64:	f002 ff00 	bl	801b868 <rmw_create_guard_condition>
 8018a68:	6038      	str	r0, [r7, #0]
 8018a6a:	6860      	ldr	r0, [r4, #4]
 8018a6c:	6807      	ldr	r7, [r0, #0]
 8018a6e:	b1a7      	cbz	r7, 8018a9a <rcl_guard_condition_init+0x86>
 8018a70:	2301      	movs	r3, #1
 8018a72:	ac01      	add	r4, sp, #4
 8018a74:	7103      	strb	r3, [r0, #4]
 8018a76:	f100 0708 	add.w	r7, r0, #8
 8018a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018a7e:	6823      	ldr	r3, [r4, #0]
 8018a80:	603b      	str	r3, [r7, #0]
 8018a82:	e000      	b.n	8018a86 <rcl_guard_condition_init+0x72>
 8018a84:	2664      	movs	r6, #100	@ 0x64
 8018a86:	4630      	mov	r0, r6
 8018a88:	b007      	add	sp, #28
 8018a8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a8e:	b002      	add	sp, #8
 8018a90:	4770      	bx	lr
 8018a92:	260b      	movs	r6, #11
 8018a94:	e7f7      	b.n	8018a86 <rcl_guard_condition_init+0x72>
 8018a96:	2665      	movs	r6, #101	@ 0x65
 8018a98:	e7f5      	b.n	8018a86 <rcl_guard_condition_init+0x72>
 8018a9a:	9b02      	ldr	r3, [sp, #8]
 8018a9c:	9905      	ldr	r1, [sp, #20]
 8018a9e:	4798      	blx	r3
 8018aa0:	2601      	movs	r6, #1
 8018aa2:	6067      	str	r7, [r4, #4]
 8018aa4:	e7ef      	b.n	8018a86 <rcl_guard_condition_init+0x72>
 8018aa6:	260a      	movs	r6, #10
 8018aa8:	e7ed      	b.n	8018a86 <rcl_guard_condition_init+0x72>
 8018aaa:	bf00      	nop

08018aac <rcl_guard_condition_init_from_rmw>:
 8018aac:	b082      	sub	sp, #8
 8018aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ab2:	b086      	sub	sp, #24
 8018ab4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018ab8:	4604      	mov	r4, r0
 8018aba:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018abe:	460e      	mov	r6, r1
 8018ac0:	4617      	mov	r7, r2
 8018ac2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018ac6:	f10d 0e04 	add.w	lr, sp, #4
 8018aca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018ace:	f8dc 3000 	ldr.w	r3, [ip]
 8018ad2:	f8ce 3000 	str.w	r3, [lr]
 8018ad6:	a801      	add	r0, sp, #4
 8018ad8:	f7f8 f83e 	bl	8010b58 <rcutils_allocator_is_valid>
 8018adc:	b350      	cbz	r0, 8018b34 <rcl_guard_condition_init_from_rmw+0x88>
 8018ade:	b34c      	cbz	r4, 8018b34 <rcl_guard_condition_init_from_rmw+0x88>
 8018ae0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018ae4:	f1b8 0f00 	cmp.w	r8, #0
 8018ae8:	d11e      	bne.n	8018b28 <rcl_guard_condition_init_from_rmw+0x7c>
 8018aea:	b31f      	cbz	r7, 8018b34 <rcl_guard_condition_init_from_rmw+0x88>
 8018aec:	4638      	mov	r0, r7
 8018aee:	f7ff ff0d 	bl	801890c <rcl_context_is_valid>
 8018af2:	b328      	cbz	r0, 8018b40 <rcl_guard_condition_init_from_rmw+0x94>
 8018af4:	9b01      	ldr	r3, [sp, #4]
 8018af6:	9905      	ldr	r1, [sp, #20]
 8018af8:	201c      	movs	r0, #28
 8018afa:	4798      	blx	r3
 8018afc:	4605      	mov	r5, r0
 8018afe:	6060      	str	r0, [r4, #4]
 8018b00:	b358      	cbz	r0, 8018b5a <rcl_guard_condition_init_from_rmw+0xae>
 8018b02:	b1fe      	cbz	r6, 8018b44 <rcl_guard_condition_init_from_rmw+0x98>
 8018b04:	6006      	str	r6, [r0, #0]
 8018b06:	f880 8004 	strb.w	r8, [r0, #4]
 8018b0a:	ac01      	add	r4, sp, #4
 8018b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b0e:	f105 0c08 	add.w	ip, r5, #8
 8018b12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b16:	6823      	ldr	r3, [r4, #0]
 8018b18:	f8cc 3000 	str.w	r3, [ip]
 8018b1c:	2000      	movs	r0, #0
 8018b1e:	b006      	add	sp, #24
 8018b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b24:	b002      	add	sp, #8
 8018b26:	4770      	bx	lr
 8018b28:	2064      	movs	r0, #100	@ 0x64
 8018b2a:	b006      	add	sp, #24
 8018b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b30:	b002      	add	sp, #8
 8018b32:	4770      	bx	lr
 8018b34:	200b      	movs	r0, #11
 8018b36:	b006      	add	sp, #24
 8018b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b3c:	b002      	add	sp, #8
 8018b3e:	4770      	bx	lr
 8018b40:	2065      	movs	r0, #101	@ 0x65
 8018b42:	e7f2      	b.n	8018b2a <rcl_guard_condition_init_from_rmw+0x7e>
 8018b44:	6838      	ldr	r0, [r7, #0]
 8018b46:	3028      	adds	r0, #40	@ 0x28
 8018b48:	f002 fe8e 	bl	801b868 <rmw_create_guard_condition>
 8018b4c:	6028      	str	r0, [r5, #0]
 8018b4e:	6865      	ldr	r5, [r4, #4]
 8018b50:	682e      	ldr	r6, [r5, #0]
 8018b52:	b126      	cbz	r6, 8018b5e <rcl_guard_condition_init_from_rmw+0xb2>
 8018b54:	2301      	movs	r3, #1
 8018b56:	712b      	strb	r3, [r5, #4]
 8018b58:	e7d7      	b.n	8018b0a <rcl_guard_condition_init_from_rmw+0x5e>
 8018b5a:	200a      	movs	r0, #10
 8018b5c:	e7e5      	b.n	8018b2a <rcl_guard_condition_init_from_rmw+0x7e>
 8018b5e:	4628      	mov	r0, r5
 8018b60:	9b02      	ldr	r3, [sp, #8]
 8018b62:	9905      	ldr	r1, [sp, #20]
 8018b64:	4798      	blx	r3
 8018b66:	2001      	movs	r0, #1
 8018b68:	6066      	str	r6, [r4, #4]
 8018b6a:	e7de      	b.n	8018b2a <rcl_guard_condition_init_from_rmw+0x7e>

08018b6c <rcl_guard_condition_fini>:
 8018b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b6e:	b1d8      	cbz	r0, 8018ba8 <rcl_guard_condition_fini+0x3c>
 8018b70:	4604      	mov	r4, r0
 8018b72:	6840      	ldr	r0, [r0, #4]
 8018b74:	b158      	cbz	r0, 8018b8e <rcl_guard_condition_fini+0x22>
 8018b76:	6803      	ldr	r3, [r0, #0]
 8018b78:	68c6      	ldr	r6, [r0, #12]
 8018b7a:	6987      	ldr	r7, [r0, #24]
 8018b7c:	b153      	cbz	r3, 8018b94 <rcl_guard_condition_fini+0x28>
 8018b7e:	7905      	ldrb	r5, [r0, #4]
 8018b80:	b955      	cbnz	r5, 8018b98 <rcl_guard_condition_fini+0x2c>
 8018b82:	4639      	mov	r1, r7
 8018b84:	47b0      	blx	r6
 8018b86:	2300      	movs	r3, #0
 8018b88:	6063      	str	r3, [r4, #4]
 8018b8a:	4628      	mov	r0, r5
 8018b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b8e:	4605      	mov	r5, r0
 8018b90:	4628      	mov	r0, r5
 8018b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b94:	461d      	mov	r5, r3
 8018b96:	e7f4      	b.n	8018b82 <rcl_guard_condition_fini+0x16>
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f002 fe79 	bl	801b890 <rmw_destroy_guard_condition>
 8018b9e:	1e05      	subs	r5, r0, #0
 8018ba0:	bf18      	it	ne
 8018ba2:	2501      	movne	r5, #1
 8018ba4:	6860      	ldr	r0, [r4, #4]
 8018ba6:	e7ec      	b.n	8018b82 <rcl_guard_condition_fini+0x16>
 8018ba8:	250b      	movs	r5, #11
 8018baa:	4628      	mov	r0, r5
 8018bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bae:	bf00      	nop

08018bb0 <rcl_guard_condition_get_default_options>:
 8018bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bb2:	b087      	sub	sp, #28
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	4668      	mov	r0, sp
 8018bb8:	f7f7 ffa2 	bl	8010b00 <rcutils_get_default_allocator>
 8018bbc:	46ee      	mov	lr, sp
 8018bbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018bc2:	4c08      	ldr	r4, [pc, #32]	@ (8018be4 <rcl_guard_condition_get_default_options+0x34>)
 8018bc4:	46a4      	mov	ip, r4
 8018bc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bca:	4625      	mov	r5, r4
 8018bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bce:	4634      	mov	r4, r6
 8018bd0:	f8de 7000 	ldr.w	r7, [lr]
 8018bd4:	f8cc 7000 	str.w	r7, [ip]
 8018bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018bda:	4630      	mov	r0, r6
 8018bdc:	6027      	str	r7, [r4, #0]
 8018bde:	b007      	add	sp, #28
 8018be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018be2:	bf00      	nop
 8018be4:	2001f5b0 	.word	0x2001f5b0

08018be8 <rcl_trigger_guard_condition>:
 8018be8:	b148      	cbz	r0, 8018bfe <rcl_trigger_guard_condition+0x16>
 8018bea:	b508      	push	{r3, lr}
 8018bec:	6843      	ldr	r3, [r0, #4]
 8018bee:	b143      	cbz	r3, 8018c02 <rcl_trigger_guard_condition+0x1a>
 8018bf0:	6818      	ldr	r0, [r3, #0]
 8018bf2:	f003 f821 	bl	801bc38 <rmw_trigger_guard_condition>
 8018bf6:	3800      	subs	r0, #0
 8018bf8:	bf18      	it	ne
 8018bfa:	2001      	movne	r0, #1
 8018bfc:	bd08      	pop	{r3, pc}
 8018bfe:	200b      	movs	r0, #11
 8018c00:	4770      	bx	lr
 8018c02:	200b      	movs	r0, #11
 8018c04:	bd08      	pop	{r3, pc}
 8018c06:	bf00      	nop

08018c08 <rcl_guard_condition_get_rmw_handle>:
 8018c08:	b110      	cbz	r0, 8018c10 <rcl_guard_condition_get_rmw_handle+0x8>
 8018c0a:	6840      	ldr	r0, [r0, #4]
 8018c0c:	b100      	cbz	r0, 8018c10 <rcl_guard_condition_get_rmw_handle+0x8>
 8018c0e:	6800      	ldr	r0, [r0, #0]
 8018c10:	4770      	bx	lr
 8018c12:	bf00      	nop

08018c14 <rcl_init>:
 8018c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c18:	1e04      	subs	r4, r0, #0
 8018c1a:	b0a7      	sub	sp, #156	@ 0x9c
 8018c1c:	460d      	mov	r5, r1
 8018c1e:	4617      	mov	r7, r2
 8018c20:	461e      	mov	r6, r3
 8018c22:	dd13      	ble.n	8018c4c <rcl_init+0x38>
 8018c24:	b161      	cbz	r1, 8018c40 <rcl_init+0x2c>
 8018c26:	f1a1 0e04 	sub.w	lr, r1, #4
 8018c2a:	f04f 0c00 	mov.w	ip, #0
 8018c2e:	e001      	b.n	8018c34 <rcl_init+0x20>
 8018c30:	4564      	cmp	r4, ip
 8018c32:	d00d      	beq.n	8018c50 <rcl_init+0x3c>
 8018c34:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8018c38:	f10c 0c01 	add.w	ip, ip, #1
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	d1f7      	bne.n	8018c30 <rcl_init+0x1c>
 8018c40:	f04f 080b 	mov.w	r8, #11
 8018c44:	4640      	mov	r0, r8
 8018c46:	b027      	add	sp, #156	@ 0x9c
 8018c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c4c:	2900      	cmp	r1, #0
 8018c4e:	d1f7      	bne.n	8018c40 <rcl_init+0x2c>
 8018c50:	2f00      	cmp	r7, #0
 8018c52:	d0f5      	beq.n	8018c40 <rcl_init+0x2c>
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d0f2      	beq.n	8018c40 <rcl_init+0x2c>
 8018c5a:	469c      	mov	ip, r3
 8018c5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018c60:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 8018c64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018c68:	f8dc 3000 	ldr.w	r3, [ip]
 8018c6c:	f8ce 3000 	str.w	r3, [lr]
 8018c70:	a821      	add	r0, sp, #132	@ 0x84
 8018c72:	f7f7 ff71 	bl	8010b58 <rcutils_allocator_is_valid>
 8018c76:	2800      	cmp	r0, #0
 8018c78:	d0e2      	beq.n	8018c40 <rcl_init+0x2c>
 8018c7a:	2e00      	cmp	r6, #0
 8018c7c:	d0e0      	beq.n	8018c40 <rcl_init+0x2c>
 8018c7e:	6833      	ldr	r3, [r6, #0]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d176      	bne.n	8018d72 <rcl_init+0x15e>
 8018c84:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8018c88:	2198      	movs	r1, #152	@ 0x98
 8018c8a:	2001      	movs	r0, #1
 8018c8c:	4798      	blx	r3
 8018c8e:	4680      	mov	r8, r0
 8018c90:	6030      	str	r0, [r6, #0]
 8018c92:	2800      	cmp	r0, #0
 8018c94:	f000 80cc 	beq.w	8018e30 <rcl_init+0x21c>
 8018c98:	a802      	add	r0, sp, #8
 8018c9a:	f002 fb5b 	bl	801b354 <rmw_get_zero_initialized_context>
 8018c9e:	a902      	add	r1, sp, #8
 8018ca0:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8018ca4:	2270      	movs	r2, #112	@ 0x70
 8018ca6:	f005 fb84 	bl	801e3b2 <memcpy>
 8018caa:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 8018cae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018cb2:	f8d6 8000 	ldr.w	r8, [r6]
 8018cb6:	46c4      	mov	ip, r8
 8018cb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018cbc:	f8de 3000 	ldr.w	r3, [lr]
 8018cc0:	f8cc 3000 	str.w	r3, [ip]
 8018cc4:	f108 0114 	add.w	r1, r8, #20
 8018cc8:	4638      	mov	r0, r7
 8018cca:	f7f5 ffdd 	bl	800ec88 <rcl_init_options_copy>
 8018cce:	4680      	mov	r8, r0
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	d147      	bne.n	8018d64 <rcl_init+0x150>
 8018cd4:	f8d6 9000 	ldr.w	r9, [r6]
 8018cd8:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8018cdc:	f8c9 0020 	str.w	r0, [r9, #32]
 8018ce0:	f8c9 4018 	str.w	r4, [r9, #24]
 8018ce4:	f8c9 a01c 	str.w	sl, [r9, #28]
 8018ce8:	2c00      	cmp	r4, #0
 8018cea:	d04a      	beq.n	8018d82 <rcl_init+0x16e>
 8018cec:	2d00      	cmp	r5, #0
 8018cee:	d048      	beq.n	8018d82 <rcl_init+0x16e>
 8018cf0:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8018cf4:	2104      	movs	r1, #4
 8018cf6:	4620      	mov	r0, r4
 8018cf8:	4798      	blx	r3
 8018cfa:	f8c9 0020 	str.w	r0, [r9, #32]
 8018cfe:	f8d6 9000 	ldr.w	r9, [r6]
 8018d02:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8018d06:	f1bb 0f00 	cmp.w	fp, #0
 8018d0a:	d029      	beq.n	8018d60 <rcl_init+0x14c>
 8018d0c:	2c01      	cmp	r4, #1
 8018d0e:	f17a 0300 	sbcs.w	r3, sl, #0
 8018d12:	db36      	blt.n	8018d82 <rcl_init+0x16e>
 8018d14:	f04f 0800 	mov.w	r8, #0
 8018d18:	3d04      	subs	r5, #4
 8018d1a:	46c1      	mov	r9, r8
 8018d1c:	e00d      	b.n	8018d3a <rcl_init+0x126>
 8018d1e:	6829      	ldr	r1, [r5, #0]
 8018d20:	f005 fb47 	bl	801e3b2 <memcpy>
 8018d24:	f118 0801 	adds.w	r8, r8, #1
 8018d28:	f149 0900 	adc.w	r9, r9, #0
 8018d2c:	45ca      	cmp	sl, r9
 8018d2e:	bf08      	it	eq
 8018d30:	4544      	cmpeq	r4, r8
 8018d32:	d024      	beq.n	8018d7e <rcl_init+0x16a>
 8018d34:	6833      	ldr	r3, [r6, #0]
 8018d36:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8018d3a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8018d3e:	f7e7 facf 	bl	80002e0 <strlen>
 8018d42:	1c42      	adds	r2, r0, #1
 8018d44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018d46:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8018d48:	9201      	str	r2, [sp, #4]
 8018d4a:	4610      	mov	r0, r2
 8018d4c:	4798      	blx	r3
 8018d4e:	6833      	ldr	r3, [r6, #0]
 8018d50:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8018d54:	6a1b      	ldr	r3, [r3, #32]
 8018d56:	9a01      	ldr	r2, [sp, #4]
 8018d58:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	d1de      	bne.n	8018d1e <rcl_init+0x10a>
 8018d60:	f04f 080a 	mov.w	r8, #10
 8018d64:	4630      	mov	r0, r6
 8018d66:	f7ff fdd7 	bl	8018918 <__cleanup_context>
 8018d6a:	4640      	mov	r0, r8
 8018d6c:	b027      	add	sp, #156	@ 0x9c
 8018d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d72:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8018d76:	4640      	mov	r0, r8
 8018d78:	b027      	add	sp, #156	@ 0x9c
 8018d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7e:	f8d6 9000 	ldr.w	r9, [r6]
 8018d82:	4a40      	ldr	r2, [pc, #256]	@ (8018e84 <rcl_init+0x270>)
 8018d84:	6813      	ldr	r3, [r2, #0]
 8018d86:	3301      	adds	r3, #1
 8018d88:	d04d      	beq.n	8018e26 <rcl_init+0x212>
 8018d8a:	461d      	mov	r5, r3
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	4619      	mov	r1, r3
 8018d90:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8018d94:	6073      	str	r3, [r6, #4]
 8018d96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018d98:	6011      	str	r1, [r2, #0]
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8018da0:	d05e      	beq.n	8018e60 <rcl_init+0x24c>
 8018da2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d045      	beq.n	8018e36 <rcl_init+0x222>
 8018daa:	683a      	ldr	r2, [r7, #0]
 8018dac:	2b01      	cmp	r3, #1
 8018dae:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8018db2:	d04c      	beq.n	8018e4e <rcl_init+0x23a>
 8018db4:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8018db8:	2a00      	cmp	r2, #0
 8018dba:	d05c      	beq.n	8018e76 <rcl_init+0x262>
 8018dbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018dbe:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8018dc2:	b953      	cbnz	r3, 8018dda <rcl_init+0x1c6>
 8018dc4:	2801      	cmp	r0, #1
 8018dc6:	d008      	beq.n	8018dda <rcl_init+0x1c6>
 8018dc8:	a921      	add	r1, sp, #132	@ 0x84
 8018dca:	4628      	mov	r0, r5
 8018dcc:	f004 f876 	bl	801cebc <rcl_get_discovery_static_peers>
 8018dd0:	4680      	mov	r8, r0
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	d1c6      	bne.n	8018d64 <rcl_init+0x150>
 8018dd6:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8018dda:	f004 f865 	bl	801cea8 <rcl_automatic_discovery_range_to_string>
 8018dde:	6833      	ldr	r3, [r6, #0]
 8018de0:	695b      	ldr	r3, [r3, #20]
 8018de2:	aa20      	add	r2, sp, #128	@ 0x80
 8018de4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8018de6:	a91f      	add	r1, sp, #124	@ 0x7c
 8018de8:	f000 fd26 	bl	8019838 <rcl_validate_enclave_name>
 8018dec:	4680      	mov	r8, r0
 8018dee:	2800      	cmp	r0, #0
 8018df0:	d1b8      	bne.n	8018d64 <rcl_init+0x150>
 8018df2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018df4:	bb8b      	cbnz	r3, 8018e5a <rcl_init+0x246>
 8018df6:	6831      	ldr	r1, [r6, #0]
 8018df8:	694b      	ldr	r3, [r1, #20]
 8018dfa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8018dfc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8018e00:	f000 f9d4 	bl	80191ac <rcl_get_security_options_from_environment>
 8018e04:	4680      	mov	r8, r0
 8018e06:	2800      	cmp	r0, #0
 8018e08:	d1ac      	bne.n	8018d64 <rcl_init+0x150>
 8018e0a:	6831      	ldr	r1, [r6, #0]
 8018e0c:	6948      	ldr	r0, [r1, #20]
 8018e0e:	3128      	adds	r1, #40	@ 0x28
 8018e10:	3018      	adds	r0, #24
 8018e12:	f7f8 fb69 	bl	80114e8 <rmw_init>
 8018e16:	4680      	mov	r8, r0
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	f43f af13 	beq.w	8018c44 <rcl_init+0x30>
 8018e1e:	f7ff fd55 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 8018e22:	4680      	mov	r8, r0
 8018e24:	e79e      	b.n	8018d64 <rcl_init+0x150>
 8018e26:	2101      	movs	r1, #1
 8018e28:	4618      	mov	r0, r3
 8018e2a:	460d      	mov	r5, r1
 8018e2c:	460b      	mov	r3, r1
 8018e2e:	e7af      	b.n	8018d90 <rcl_init+0x17c>
 8018e30:	f04f 080a 	mov.w	r8, #10
 8018e34:	e706      	b.n	8018c44 <rcl_init+0x30>
 8018e36:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8018e3a:	f000 f843 	bl	8018ec4 <rcl_get_localhost_only>
 8018e3e:	4680      	mov	r8, r0
 8018e40:	2800      	cmp	r0, #0
 8018e42:	d18f      	bne.n	8018d64 <rcl_init+0x150>
 8018e44:	6832      	ldr	r2, [r6, #0]
 8018e46:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8018e4a:	6954      	ldr	r4, [r2, #20]
 8018e4c:	e7ad      	b.n	8018daa <rcl_init+0x196>
 8018e4e:	2002      	movs	r0, #2
 8018e50:	2300      	movs	r3, #0
 8018e52:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8018e56:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018e58:	e7bf      	b.n	8018dda <rcl_init+0x1c6>
 8018e5a:	f04f 0801 	mov.w	r8, #1
 8018e5e:	e781      	b.n	8018d64 <rcl_init+0x150>
 8018e60:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018e64:	f004 f894 	bl	801cf90 <rcl_get_default_domain_id>
 8018e68:	4680      	mov	r8, r0
 8018e6a:	2800      	cmp	r0, #0
 8018e6c:	f47f af7a 	bne.w	8018d64 <rcl_init+0x150>
 8018e70:	6833      	ldr	r3, [r6, #0]
 8018e72:	695c      	ldr	r4, [r3, #20]
 8018e74:	e795      	b.n	8018da2 <rcl_init+0x18e>
 8018e76:	4628      	mov	r0, r5
 8018e78:	f003 ffd4 	bl	801ce24 <rcl_get_automatic_discovery_range>
 8018e7c:	4680      	mov	r8, r0
 8018e7e:	2800      	cmp	r0, #0
 8018e80:	d09c      	beq.n	8018dbc <rcl_init+0x1a8>
 8018e82:	e76f      	b.n	8018d64 <rcl_init+0x150>
 8018e84:	2001f5c4 	.word	0x2001f5c4

08018e88 <rcl_shutdown>:
 8018e88:	b1a8      	cbz	r0, 8018eb6 <rcl_shutdown+0x2e>
 8018e8a:	6803      	ldr	r3, [r0, #0]
 8018e8c:	b510      	push	{r4, lr}
 8018e8e:	4604      	mov	r4, r0
 8018e90:	b173      	cbz	r3, 8018eb0 <rcl_shutdown+0x28>
 8018e92:	f7ff fd3b 	bl	801890c <rcl_context_is_valid>
 8018e96:	b140      	cbz	r0, 8018eaa <rcl_shutdown+0x22>
 8018e98:	6820      	ldr	r0, [r4, #0]
 8018e9a:	3028      	adds	r0, #40	@ 0x28
 8018e9c:	f7f8 fc58 	bl	8011750 <rmw_shutdown>
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	b958      	cbnz	r0, 8018ebc <rcl_shutdown+0x34>
 8018ea4:	6060      	str	r0, [r4, #4]
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	bd10      	pop	{r4, pc}
 8018eaa:	236a      	movs	r3, #106	@ 0x6a
 8018eac:	4618      	mov	r0, r3
 8018eae:	bd10      	pop	{r4, pc}
 8018eb0:	230b      	movs	r3, #11
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	bd10      	pop	{r4, pc}
 8018eb6:	230b      	movs	r3, #11
 8018eb8:	4618      	mov	r0, r3
 8018eba:	4770      	bx	lr
 8018ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ec0:	f7ff bd04 	b.w	80188cc <rcl_convert_rmw_ret_to_rcl_ret>

08018ec4 <rcl_get_localhost_only>:
 8018ec4:	b510      	push	{r4, lr}
 8018ec6:	b082      	sub	sp, #8
 8018ec8:	2300      	movs	r3, #0
 8018eca:	9301      	str	r3, [sp, #4]
 8018ecc:	b1b8      	cbz	r0, 8018efe <rcl_get_localhost_only+0x3a>
 8018ece:	4604      	mov	r4, r0
 8018ed0:	a901      	add	r1, sp, #4
 8018ed2:	480c      	ldr	r0, [pc, #48]	@ (8018f04 <rcl_get_localhost_only+0x40>)
 8018ed4:	f7f7 fef4 	bl	8010cc0 <rcutils_get_env>
 8018ed8:	b110      	cbz	r0, 8018ee0 <rcl_get_localhost_only+0x1c>
 8018eda:	2001      	movs	r0, #1
 8018edc:	b002      	add	sp, #8
 8018ede:	bd10      	pop	{r4, pc}
 8018ee0:	9b01      	ldr	r3, [sp, #4]
 8018ee2:	b10b      	cbz	r3, 8018ee8 <rcl_get_localhost_only+0x24>
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	b923      	cbnz	r3, 8018ef2 <rcl_get_localhost_only+0x2e>
 8018ee8:	2300      	movs	r3, #0
 8018eea:	7023      	strb	r3, [r4, #0]
 8018eec:	2000      	movs	r0, #0
 8018eee:	b002      	add	sp, #8
 8018ef0:	bd10      	pop	{r4, pc}
 8018ef2:	2b31      	cmp	r3, #49	@ 0x31
 8018ef4:	bf14      	ite	ne
 8018ef6:	2302      	movne	r3, #2
 8018ef8:	2301      	moveq	r3, #1
 8018efa:	7023      	strb	r3, [r4, #0]
 8018efc:	e7f6      	b.n	8018eec <rcl_get_localhost_only+0x28>
 8018efe:	200b      	movs	r0, #11
 8018f00:	b002      	add	sp, #8
 8018f02:	bd10      	pop	{r4, pc}
 8018f04:	08021584 	.word	0x08021584

08018f08 <rcl_node_resolve_name>:
 8018f08:	b082      	sub	sp, #8
 8018f0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f0e:	b091      	sub	sp, #68	@ 0x44
 8018f10:	ac1a      	add	r4, sp, #104	@ 0x68
 8018f12:	e884 000c 	stmia.w	r4, {r2, r3}
 8018f16:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d03a      	beq.n	8018f94 <rcl_node_resolve_name+0x8c>
 8018f1e:	460c      	mov	r4, r1
 8018f20:	4605      	mov	r5, r0
 8018f22:	f7f6 f8c1 	bl	800f0a8 <rcl_node_get_options>
 8018f26:	b370      	cbz	r0, 8018f86 <rcl_node_resolve_name+0x7e>
 8018f28:	4628      	mov	r0, r5
 8018f2a:	f7f6 f8ad 	bl	800f088 <rcl_node_get_name>
 8018f2e:	4681      	mov	r9, r0
 8018f30:	4628      	mov	r0, r5
 8018f32:	f7f6 f8b1 	bl	800f098 <rcl_node_get_namespace>
 8018f36:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8018f3a:	4607      	mov	r7, r0
 8018f3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f40:	ad0b      	add	r5, sp, #44	@ 0x2c
 8018f42:	46ac      	mov	ip, r5
 8018f44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f48:	f8de 3000 	ldr.w	r3, [lr]
 8018f4c:	f8cc 3000 	str.w	r3, [ip]
 8018f50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018f52:	b1fb      	cbz	r3, 8018f94 <rcl_node_resolve_name+0x8c>
 8018f54:	468a      	mov	sl, r1
 8018f56:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8018f5a:	f002 f8ab 	bl	801b0b4 <rcutils_get_zero_initialized_string_map>
 8018f5e:	ab10      	add	r3, sp, #64	@ 0x40
 8018f60:	9008      	str	r0, [sp, #32]
 8018f62:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8018f66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018f6a:	2100      	movs	r1, #0
 8018f6c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8018f70:	a808      	add	r0, sp, #32
 8018f72:	f002 f8f9 	bl	801b168 <rcutils_string_map_init>
 8018f76:	4606      	mov	r6, r0
 8018f78:	b170      	cbz	r0, 8018f98 <rcl_node_resolve_name+0x90>
 8018f7a:	f7f7 feb9 	bl	8010cf0 <rcutils_get_error_string>
 8018f7e:	f7f7 fecf 	bl	8010d20 <rcutils_reset_error>
 8018f82:	2e0a      	cmp	r6, #10
 8018f84:	d000      	beq.n	8018f88 <rcl_node_resolve_name+0x80>
 8018f86:	2601      	movs	r6, #1
 8018f88:	4630      	mov	r0, r6
 8018f8a:	b011      	add	sp, #68	@ 0x44
 8018f8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f90:	b002      	add	sp, #8
 8018f92:	4770      	bx	lr
 8018f94:	260b      	movs	r6, #11
 8018f96:	e7f7      	b.n	8018f88 <rcl_node_resolve_name+0x80>
 8018f98:	9009      	str	r0, [sp, #36]	@ 0x24
 8018f9a:	9007      	str	r0, [sp, #28]
 8018f9c:	a808      	add	r0, sp, #32
 8018f9e:	f004 f983 	bl	801d2a8 <rcl_get_default_topic_name_substitutions>
 8018fa2:	4606      	mov	r6, r0
 8018fa4:	b1b0      	cbz	r0, 8018fd4 <rcl_node_resolve_name+0xcc>
 8018fa6:	280a      	cmp	r0, #10
 8018fa8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018fac:	d000      	beq.n	8018fb0 <rcl_node_resolve_name+0xa8>
 8018fae:	2601      	movs	r6, #1
 8018fb0:	a808      	add	r0, sp, #32
 8018fb2:	f002 f917 	bl	801b1e4 <rcutils_string_map_fini>
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	d132      	bne.n	8019020 <rcl_node_resolve_name+0x118>
 8018fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018fbc:	4659      	mov	r1, fp
 8018fbe:	47d0      	blx	sl
 8018fc0:	4659      	mov	r1, fp
 8018fc2:	4648      	mov	r0, r9
 8018fc4:	47d0      	blx	sl
 8018fc6:	f1b8 0f00 	cmp.w	r8, #0
 8018fca:	d0dd      	beq.n	8018f88 <rcl_node_resolve_name+0x80>
 8018fcc:	2e67      	cmp	r6, #103	@ 0x67
 8018fce:	bf08      	it	eq
 8018fd0:	2668      	moveq	r6, #104	@ 0x68
 8018fd2:	e7d9      	b.n	8018f88 <rcl_node_resolve_name+0x80>
 8018fd4:	ab09      	add	r3, sp, #36	@ 0x24
 8018fd6:	9305      	str	r3, [sp, #20]
 8018fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fda:	46ec      	mov	ip, sp
 8018fdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fe0:	682b      	ldr	r3, [r5, #0]
 8018fe2:	f8cc 3000 	str.w	r3, [ip]
 8018fe6:	463a      	mov	r2, r7
 8018fe8:	4649      	mov	r1, r9
 8018fea:	4620      	mov	r0, r4
 8018fec:	ab08      	add	r3, sp, #32
 8018fee:	f003 fffd 	bl	801cfec <rcl_expand_topic_name>
 8018ff2:	4606      	mov	r6, r0
 8018ff4:	b9c8      	cbnz	r0, 801902a <rcl_node_resolve_name+0x122>
 8018ff6:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8018ffa:	9009      	str	r0, [sp, #36]	@ 0x24
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	a90a      	add	r1, sp, #40	@ 0x28
 8019000:	4648      	mov	r0, r9
 8019002:	f002 fa45 	bl	801b490 <rmw_validate_full_topic_name>
 8019006:	b998      	cbnz	r0, 8019030 <rcl_node_resolve_name+0x128>
 8019008:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801900a:	bb14      	cbnz	r4, 8019052 <rcl_node_resolve_name+0x14a>
 801900c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801900e:	a808      	add	r0, sp, #32
 8019010:	f8c3 9000 	str.w	r9, [r3]
 8019014:	f002 f8e6 	bl	801b1e4 <rcutils_string_map_fini>
 8019018:	4606      	mov	r6, r0
 801901a:	b978      	cbnz	r0, 801903c <rcl_node_resolve_name+0x134>
 801901c:	4681      	mov	r9, r0
 801901e:	e7cc      	b.n	8018fba <rcl_node_resolve_name+0xb2>
 8019020:	f7f7 fe66 	bl	8010cf0 <rcutils_get_error_string>
 8019024:	f7f7 fe7c 	bl	8010d20 <rcutils_reset_error>
 8019028:	e7c7      	b.n	8018fba <rcl_node_resolve_name+0xb2>
 801902a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801902e:	e7bf      	b.n	8018fb0 <rcl_node_resolve_name+0xa8>
 8019030:	f7f7 fe5e 	bl	8010cf0 <rcutils_get_error_string>
 8019034:	2601      	movs	r6, #1
 8019036:	f7f7 fe73 	bl	8010d20 <rcutils_reset_error>
 801903a:	e7b9      	b.n	8018fb0 <rcl_node_resolve_name+0xa8>
 801903c:	f7f7 fe58 	bl	8010cf0 <rcutils_get_error_string>
 8019040:	f7f7 fe6e 	bl	8010d20 <rcutils_reset_error>
 8019044:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019046:	4659      	mov	r1, fp
 8019048:	47d0      	blx	sl
 801904a:	4659      	mov	r1, fp
 801904c:	4620      	mov	r0, r4
 801904e:	47d0      	blx	sl
 8019050:	e799      	b.n	8018f86 <rcl_node_resolve_name+0x7e>
 8019052:	2667      	movs	r6, #103	@ 0x67
 8019054:	e7ac      	b.n	8018fb0 <rcl_node_resolve_name+0xa8>
 8019056:	bf00      	nop

08019058 <exact_match_lookup>:
 8019058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801905a:	f102 0708 	add.w	r7, r2, #8
 801905e:	460b      	mov	r3, r1
 8019060:	4614      	mov	r4, r2
 8019062:	4606      	mov	r6, r0
 8019064:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8019068:	b085      	sub	sp, #20
 801906a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801906e:	4618      	mov	r0, r3
 8019070:	4918      	ldr	r1, [pc, #96]	@ (80190d4 <exact_match_lookup+0x7c>)
 8019072:	e894 000c 	ldmia.w	r4, {r2, r3}
 8019076:	f001 ffa9 	bl	801afcc <rcutils_join_path>
 801907a:	7833      	ldrb	r3, [r6, #0]
 801907c:	2b2f      	cmp	r3, #47	@ 0x2f
 801907e:	4605      	mov	r5, r0
 8019080:	d022      	beq.n	80190c8 <exact_match_lookup+0x70>
 8019082:	f104 030c 	add.w	r3, r4, #12
 8019086:	e893 0003 	ldmia.w	r3, {r0, r1}
 801908a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801908e:	1c70      	adds	r0, r6, #1
 8019090:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019094:	f001 ffa0 	bl	801afd8 <rcutils_to_native_path>
 8019098:	4606      	mov	r6, r0
 801909a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801909e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80190a2:	4631      	mov	r1, r6
 80190a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80190a8:	4628      	mov	r0, r5
 80190aa:	f001 ff8f 	bl	801afcc <rcutils_join_path>
 80190ae:	6863      	ldr	r3, [r4, #4]
 80190b0:	6921      	ldr	r1, [r4, #16]
 80190b2:	4607      	mov	r7, r0
 80190b4:	4630      	mov	r0, r6
 80190b6:	4798      	blx	r3
 80190b8:	4628      	mov	r0, r5
 80190ba:	6863      	ldr	r3, [r4, #4]
 80190bc:	6921      	ldr	r1, [r4, #16]
 80190be:	4798      	blx	r3
 80190c0:	463d      	mov	r5, r7
 80190c2:	4628      	mov	r0, r5
 80190c4:	b005      	add	sp, #20
 80190c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190c8:	7873      	ldrb	r3, [r6, #1]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d1d9      	bne.n	8019082 <exact_match_lookup+0x2a>
 80190ce:	4628      	mov	r0, r5
 80190d0:	b005      	add	sp, #20
 80190d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190d4:	080215d4 	.word	0x080215d4

080190d8 <rcl_get_secure_root>:
 80190d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80190dc:	b085      	sub	sp, #20
 80190de:	b168      	cbz	r0, 80190fc <rcl_get_secure_root+0x24>
 80190e0:	4607      	mov	r7, r0
 80190e2:	4608      	mov	r0, r1
 80190e4:	460c      	mov	r4, r1
 80190e6:	f7f7 fd37 	bl	8010b58 <rcutils_allocator_is_valid>
 80190ea:	b138      	cbz	r0, 80190fc <rcl_get_secure_root+0x24>
 80190ec:	2300      	movs	r3, #0
 80190ee:	482d      	ldr	r0, [pc, #180]	@ (80191a4 <rcl_get_secure_root+0xcc>)
 80190f0:	9303      	str	r3, [sp, #12]
 80190f2:	a903      	add	r1, sp, #12
 80190f4:	f7f7 fde4 	bl	8010cc0 <rcutils_get_env>
 80190f8:	4605      	mov	r5, r0
 80190fa:	b120      	cbz	r0, 8019106 <rcl_get_secure_root+0x2e>
 80190fc:	2500      	movs	r5, #0
 80190fe:	4628      	mov	r0, r5
 8019100:	b005      	add	sp, #20
 8019102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019106:	9b03      	ldr	r3, [sp, #12]
 8019108:	781a      	ldrb	r2, [r3, #0]
 801910a:	2a00      	cmp	r2, #0
 801910c:	d0f6      	beq.n	80190fc <rcl_get_secure_root+0x24>
 801910e:	f104 090c 	add.w	r9, r4, #12
 8019112:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019116:	e88d 0003 	stmia.w	sp, {r0, r1}
 801911a:	4618      	mov	r0, r3
 801911c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019120:	f7f7 ff38 	bl	8010f94 <rcutils_strdup>
 8019124:	4680      	mov	r8, r0
 8019126:	2800      	cmp	r0, #0
 8019128:	d0e8      	beq.n	80190fc <rcl_get_secure_root+0x24>
 801912a:	481f      	ldr	r0, [pc, #124]	@ (80191a8 <rcl_get_secure_root+0xd0>)
 801912c:	9503      	str	r5, [sp, #12]
 801912e:	a903      	add	r1, sp, #12
 8019130:	f7f7 fdc6 	bl	8010cc0 <rcutils_get_env>
 8019134:	b160      	cbz	r0, 8019150 <rcl_get_secure_root+0x78>
 8019136:	2600      	movs	r6, #0
 8019138:	6863      	ldr	r3, [r4, #4]
 801913a:	6921      	ldr	r1, [r4, #16]
 801913c:	4630      	mov	r0, r6
 801913e:	4798      	blx	r3
 8019140:	4640      	mov	r0, r8
 8019142:	6863      	ldr	r3, [r4, #4]
 8019144:	6921      	ldr	r1, [r4, #16]
 8019146:	4798      	blx	r3
 8019148:	4628      	mov	r0, r5
 801914a:	b005      	add	sp, #20
 801914c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019150:	9b03      	ldr	r3, [sp, #12]
 8019152:	781e      	ldrb	r6, [r3, #0]
 8019154:	b1f6      	cbz	r6, 8019194 <rcl_get_secure_root+0xbc>
 8019156:	e899 0003 	ldmia.w	r9, {r0, r1}
 801915a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801915e:	4618      	mov	r0, r3
 8019160:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019164:	f7f7 ff16 	bl	8010f94 <rcutils_strdup>
 8019168:	4606      	mov	r6, r0
 801916a:	2800      	cmp	r0, #0
 801916c:	d0e3      	beq.n	8019136 <rcl_get_secure_root+0x5e>
 801916e:	4622      	mov	r2, r4
 8019170:	4641      	mov	r1, r8
 8019172:	f7ff ff71 	bl	8019058 <exact_match_lookup>
 8019176:	4605      	mov	r5, r0
 8019178:	2d00      	cmp	r5, #0
 801917a:	d0dd      	beq.n	8019138 <rcl_get_secure_root+0x60>
 801917c:	4628      	mov	r0, r5
 801917e:	f001 ff23 	bl	801afc8 <rcutils_is_directory>
 8019182:	4607      	mov	r7, r0
 8019184:	2800      	cmp	r0, #0
 8019186:	d1d7      	bne.n	8019138 <rcl_get_secure_root+0x60>
 8019188:	4628      	mov	r0, r5
 801918a:	6863      	ldr	r3, [r4, #4]
 801918c:	6921      	ldr	r1, [r4, #16]
 801918e:	4798      	blx	r3
 8019190:	463d      	mov	r5, r7
 8019192:	e7d1      	b.n	8019138 <rcl_get_secure_root+0x60>
 8019194:	4622      	mov	r2, r4
 8019196:	4638      	mov	r0, r7
 8019198:	4641      	mov	r1, r8
 801919a:	f7ff ff5d 	bl	8019058 <exact_match_lookup>
 801919e:	4605      	mov	r5, r0
 80191a0:	e7ea      	b.n	8019178 <rcl_get_secure_root+0xa0>
 80191a2:	bf00      	nop
 80191a4:	080215e0 	.word	0x080215e0
 80191a8:	080215f8 	.word	0x080215f8

080191ac <rcl_get_security_options_from_environment>:
 80191ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191ae:	b083      	sub	sp, #12
 80191b0:	2300      	movs	r3, #0
 80191b2:	4605      	mov	r5, r0
 80191b4:	460e      	mov	r6, r1
 80191b6:	481a      	ldr	r0, [pc, #104]	@ (8019220 <rcl_get_security_options_from_environment+0x74>)
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	a901      	add	r1, sp, #4
 80191bc:	4617      	mov	r7, r2
 80191be:	f7f7 fd7f 	bl	8010cc0 <rcutils_get_env>
 80191c2:	b110      	cbz	r0, 80191ca <rcl_get_security_options_from_environment+0x1e>
 80191c4:	2001      	movs	r0, #1
 80191c6:	b003      	add	sp, #12
 80191c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ca:	4604      	mov	r4, r0
 80191cc:	4915      	ldr	r1, [pc, #84]	@ (8019224 <rcl_get_security_options_from_environment+0x78>)
 80191ce:	9801      	ldr	r0, [sp, #4]
 80191d0:	f7e7 f826 	bl	8000220 <strcmp>
 80191d4:	b9b0      	cbnz	r0, 8019204 <rcl_get_security_options_from_environment+0x58>
 80191d6:	9001      	str	r0, [sp, #4]
 80191d8:	b1c7      	cbz	r7, 801920c <rcl_get_security_options_from_environment+0x60>
 80191da:	4813      	ldr	r0, [pc, #76]	@ (8019228 <rcl_get_security_options_from_environment+0x7c>)
 80191dc:	a901      	add	r1, sp, #4
 80191de:	f7f7 fd6f 	bl	8010cc0 <rcutils_get_env>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d1ee      	bne.n	80191c4 <rcl_get_security_options_from_environment+0x18>
 80191e6:	4911      	ldr	r1, [pc, #68]	@ (801922c <rcl_get_security_options_from_environment+0x80>)
 80191e8:	9801      	ldr	r0, [sp, #4]
 80191ea:	f7e7 f819 	bl	8000220 <strcmp>
 80191ee:	fab0 f080 	clz	r0, r0
 80191f2:	0940      	lsrs	r0, r0, #5
 80191f4:	7038      	strb	r0, [r7, #0]
 80191f6:	4631      	mov	r1, r6
 80191f8:	4628      	mov	r0, r5
 80191fa:	f7ff ff6d 	bl	80190d8 <rcl_get_secure_root>
 80191fe:	b138      	cbz	r0, 8019210 <rcl_get_security_options_from_environment+0x64>
 8019200:	6078      	str	r0, [r7, #4]
 8019202:	e000      	b.n	8019206 <rcl_get_security_options_from_environment+0x5a>
 8019204:	703c      	strb	r4, [r7, #0]
 8019206:	2000      	movs	r0, #0
 8019208:	b003      	add	sp, #12
 801920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801920c:	200b      	movs	r0, #11
 801920e:	e7da      	b.n	80191c6 <rcl_get_security_options_from_environment+0x1a>
 8019210:	7838      	ldrb	r0, [r7, #0]
 8019212:	f1a0 0001 	sub.w	r0, r0, #1
 8019216:	fab0 f080 	clz	r0, r0
 801921a:	0940      	lsrs	r0, r0, #5
 801921c:	e7d3      	b.n	80191c6 <rcl_get_security_options_from_environment+0x1a>
 801921e:	bf00      	nop
 8019220:	08021598 	.word	0x08021598
 8019224:	080215ac 	.word	0x080215ac
 8019228:	080215b4 	.word	0x080215b4
 801922c:	080215cc 	.word	0x080215cc

08019230 <rcl_service_get_rmw_handle>:
 8019230:	b118      	cbz	r0, 801923a <rcl_service_get_rmw_handle+0xa>
 8019232:	6800      	ldr	r0, [r0, #0]
 8019234:	b108      	cbz	r0, 801923a <rcl_service_get_rmw_handle+0xa>
 8019236:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801923a:	4770      	bx	lr

0801923c <rcl_take_request>:
 801923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801923e:	468e      	mov	lr, r1
 8019240:	460c      	mov	r4, r1
 8019242:	4617      	mov	r7, r2
 8019244:	4605      	mov	r5, r0
 8019246:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801924a:	b091      	sub	sp, #68	@ 0x44
 801924c:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8019250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019254:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019258:	e88c 0003 	stmia.w	ip, {r0, r1}
 801925c:	b30d      	cbz	r5, 80192a2 <rcl_take_request+0x66>
 801925e:	682b      	ldr	r3, [r5, #0]
 8019260:	b1fb      	cbz	r3, 80192a2 <rcl_take_request+0x66>
 8019262:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8019266:	b1e0      	cbz	r0, 80192a2 <rcl_take_request+0x66>
 8019268:	b397      	cbz	r7, 80192d0 <rcl_take_request+0x94>
 801926a:	2300      	movs	r3, #0
 801926c:	f88d 3017 	strb.w	r3, [sp, #23]
 8019270:	463a      	mov	r2, r7
 8019272:	f10d 0317 	add.w	r3, sp, #23
 8019276:	a906      	add	r1, sp, #24
 8019278:	f002 fbdc 	bl	801ba34 <rmw_take_request>
 801927c:	4606      	mov	r6, r0
 801927e:	b198      	cbz	r0, 80192a8 <rcl_take_request+0x6c>
 8019280:	280a      	cmp	r0, #10
 8019282:	bf18      	it	ne
 8019284:	2601      	movne	r6, #1
 8019286:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801928a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801928e:	46a6      	mov	lr, r4
 8019290:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019294:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8019298:	e88e 0003 	stmia.w	lr, {r0, r1}
 801929c:	4630      	mov	r0, r6
 801929e:	b011      	add	sp, #68	@ 0x44
 80192a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192a2:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80192a6:	e7ee      	b.n	8019286 <rcl_take_request+0x4a>
 80192a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80192ac:	b193      	cbz	r3, 80192d4 <rcl_take_request+0x98>
 80192ae:	682b      	ldr	r3, [r5, #0]
 80192b0:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 80192b4:	2800      	cmp	r0, #0
 80192b6:	d0e6      	beq.n	8019286 <rcl_take_request+0x4a>
 80192b8:	463a      	mov	r2, r7
 80192ba:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 80192be:	ab0a      	add	r3, sp, #40	@ 0x28
 80192c0:	e9cd 6700 	strd	r6, r7, [sp]
 80192c4:	9302      	str	r3, [sp, #8]
 80192c6:	2101      	movs	r1, #1
 80192c8:	f000 f842 	bl	8019350 <rcl_send_service_event_message>
 80192cc:	4606      	mov	r6, r0
 80192ce:	e7da      	b.n	8019286 <rcl_take_request+0x4a>
 80192d0:	260b      	movs	r6, #11
 80192d2:	e7d8      	b.n	8019286 <rcl_take_request+0x4a>
 80192d4:	f240 2659 	movw	r6, #601	@ 0x259
 80192d8:	e7d5      	b.n	8019286 <rcl_take_request+0x4a>
 80192da:	bf00      	nop

080192dc <rcl_send_response>:
 80192dc:	b350      	cbz	r0, 8019334 <rcl_send_response+0x58>
 80192de:	b570      	push	{r4, r5, r6, lr}
 80192e0:	6803      	ldr	r3, [r0, #0]
 80192e2:	b084      	sub	sp, #16
 80192e4:	4604      	mov	r4, r0
 80192e6:	b1cb      	cbz	r3, 801931c <rcl_send_response+0x40>
 80192e8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80192ec:	b1b0      	cbz	r0, 801931c <rcl_send_response+0x40>
 80192ee:	460e      	mov	r6, r1
 80192f0:	b1e9      	cbz	r1, 801932e <rcl_send_response+0x52>
 80192f2:	4615      	mov	r5, r2
 80192f4:	b1da      	cbz	r2, 801932e <rcl_send_response+0x52>
 80192f6:	f002 fbfb 	bl	801baf0 <rmw_send_response>
 80192fa:	b998      	cbnz	r0, 8019324 <rcl_send_response+0x48>
 80192fc:	6823      	ldr	r3, [r4, #0]
 80192fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8019302:	b16b      	cbz	r3, 8019320 <rcl_send_response+0x44>
 8019304:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8019308:	462a      	mov	r2, r5
 801930a:	e9cd 0100 	strd	r0, r1, [sp]
 801930e:	9602      	str	r6, [sp, #8]
 8019310:	2102      	movs	r1, #2
 8019312:	4618      	mov	r0, r3
 8019314:	f000 f81c 	bl	8019350 <rcl_send_service_event_message>
 8019318:	b004      	add	sp, #16
 801931a:	bd70      	pop	{r4, r5, r6, pc}
 801931c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8019320:	b004      	add	sp, #16
 8019322:	bd70      	pop	{r4, r5, r6, pc}
 8019324:	2802      	cmp	r0, #2
 8019326:	bf18      	it	ne
 8019328:	2001      	movne	r0, #1
 801932a:	b004      	add	sp, #16
 801932c:	bd70      	pop	{r4, r5, r6, pc}
 801932e:	200b      	movs	r0, #11
 8019330:	b004      	add	sp, #16
 8019332:	bd70      	pop	{r4, r5, r6, pc}
 8019334:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8019338:	4770      	bx	lr
 801933a:	bf00      	nop

0801933c <rcl_service_is_valid>:
 801933c:	b130      	cbz	r0, 801934c <rcl_service_is_valid+0x10>
 801933e:	6800      	ldr	r0, [r0, #0]
 8019340:	b120      	cbz	r0, 801934c <rcl_service_is_valid+0x10>
 8019342:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019346:	3800      	subs	r0, #0
 8019348:	bf18      	it	ne
 801934a:	2001      	movne	r0, #1
 801934c:	4770      	bx	lr
 801934e:	bf00      	nop

08019350 <rcl_send_service_event_message>:
 8019350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019352:	b093      	sub	sp, #76	@ 0x4c
 8019354:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019356:	b17a      	cbz	r2, 8019378 <rcl_send_service_event_message+0x28>
 8019358:	b176      	cbz	r6, 8019378 <rcl_send_service_event_message+0x28>
 801935a:	4604      	mov	r4, r0
 801935c:	b150      	cbz	r0, 8019374 <rcl_send_service_event_message+0x24>
 801935e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8019362:	b13b      	cbz	r3, 8019374 <rcl_send_service_event_message+0x24>
 8019364:	68c0      	ldr	r0, [r0, #12]
 8019366:	460f      	mov	r7, r1
 8019368:	4615      	mov	r5, r2
 801936a:	f000 f893 	bl	8019494 <rcl_clock_valid>
 801936e:	b108      	cbz	r0, 8019374 <rcl_send_service_event_message+0x24>
 8019370:	7a23      	ldrb	r3, [r4, #8]
 8019372:	b92b      	cbnz	r3, 8019380 <rcl_send_service_event_message+0x30>
 8019374:	2501      	movs	r5, #1
 8019376:	e000      	b.n	801937a <rcl_send_service_event_message+0x2a>
 8019378:	250b      	movs	r5, #11
 801937a:	4628      	mov	r0, r5
 801937c:	b013      	add	sp, #76	@ 0x4c
 801937e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019380:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8019384:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019388:	f10d 0c0c 	add.w	ip, sp, #12
 801938c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019390:	f8de 3000 	ldr.w	r3, [lr]
 8019394:	f8cc 3000 	str.w	r3, [ip]
 8019398:	a803      	add	r0, sp, #12
 801939a:	f7f7 fbdd 	bl	8010b58 <rcutils_allocator_is_valid>
 801939e:	2800      	cmp	r0, #0
 80193a0:	d0ea      	beq.n	8019378 <rcl_send_service_event_message+0x28>
 80193a2:	6820      	ldr	r0, [r4, #0]
 80193a4:	f7f6 f81e 	bl	800f3e4 <rcl_publisher_is_valid>
 80193a8:	2800      	cmp	r0, #0
 80193aa:	d045      	beq.n	8019438 <rcl_send_service_event_message+0xe8>
 80193ac:	4669      	mov	r1, sp
 80193ae:	68e0      	ldr	r0, [r4, #12]
 80193b0:	f000 f918 	bl	80195e4 <rcl_clock_get_now>
 80193b4:	4601      	mov	r1, r0
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d13b      	bne.n	8019432 <rcl_send_service_event_message+0xe2>
 80193ba:	2220      	movs	r2, #32
 80193bc:	eb0d 0002 	add.w	r0, sp, r2
 80193c0:	f004 fec6 	bl	801e150 <memset>
 80193c4:	a324      	add	r3, pc, #144	@ (adr r3, 8019458 <rcl_send_service_event_message+0x108>)
 80193c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80193ce:	f88d 7020 	strb.w	r7, [sp, #32]
 80193d2:	f7e7 fc49 	bl	8000c68 <__aeabi_ldivmod>
 80193d6:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 80193da:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 80193de:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80193e2:	7a23      	ldrb	r3, [r4, #8]
 80193e4:	6830      	ldr	r0, [r6, #0]
 80193e6:	6871      	ldr	r1, [r6, #4]
 80193e8:	68b2      	ldr	r2, [r6, #8]
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	68f3      	ldr	r3, [r6, #12]
 80193ee:	bf08      	it	eq
 80193f0:	2500      	moveq	r5, #0
 80193f2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80193f4:	2f01      	cmp	r7, #1
 80193f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80193f8:	d821      	bhi.n	801943e <rcl_send_service_event_message+0xee>
 80193fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80193fe:	462a      	mov	r2, r5
 8019400:	a808      	add	r0, sp, #32
 8019402:	699d      	ldr	r5, [r3, #24]
 8019404:	a903      	add	r1, sp, #12
 8019406:	2300      	movs	r3, #0
 8019408:	47a8      	blx	r5
 801940a:	4606      	mov	r6, r0
 801940c:	2e00      	cmp	r6, #0
 801940e:	d0b1      	beq.n	8019374 <rcl_send_service_event_message+0x24>
 8019410:	4631      	mov	r1, r6
 8019412:	6820      	ldr	r0, [r4, #0]
 8019414:	2200      	movs	r2, #0
 8019416:	f7f5 ffc1 	bl	800f39c <rcl_publish>
 801941a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801941e:	4605      	mov	r5, r0
 8019420:	69db      	ldr	r3, [r3, #28]
 8019422:	a903      	add	r1, sp, #12
 8019424:	4630      	mov	r0, r6
 8019426:	4798      	blx	r3
 8019428:	2d00      	cmp	r5, #0
 801942a:	d0a6      	beq.n	801937a <rcl_send_service_event_message+0x2a>
 801942c:	f7f7 fc78 	bl	8010d20 <rcutils_reset_error>
 8019430:	e7a3      	b.n	801937a <rcl_send_service_event_message+0x2a>
 8019432:	f7f7 fc75 	bl	8010d20 <rcutils_reset_error>
 8019436:	e79d      	b.n	8019374 <rcl_send_service_event_message+0x24>
 8019438:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801943c:	e79d      	b.n	801937a <rcl_send_service_event_message+0x2a>
 801943e:	1eb9      	subs	r1, r7, #2
 8019440:	2901      	cmp	r1, #1
 8019442:	d8f6      	bhi.n	8019432 <rcl_send_service_event_message+0xe2>
 8019444:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8019448:	462b      	mov	r3, r5
 801944a:	a808      	add	r0, sp, #32
 801944c:	6995      	ldr	r5, [r2, #24]
 801944e:	a903      	add	r1, sp, #12
 8019450:	2200      	movs	r2, #0
 8019452:	47a8      	blx	r5
 8019454:	4606      	mov	r6, r0
 8019456:	e7d9      	b.n	801940c <rcl_send_service_event_message+0xbc>
 8019458:	3b9aca00 	.word	0x3b9aca00
 801945c:	00000000 	.word	0x00000000

08019460 <rcl_get_system_time>:
 8019460:	4608      	mov	r0, r1
 8019462:	f7f7 bdf7 	b.w	8011054 <rcutils_system_time_now>
 8019466:	bf00      	nop

08019468 <rcl_get_steady_time>:
 8019468:	4608      	mov	r0, r1
 801946a:	f7f7 be1d 	b.w	80110a8 <rcutils_steady_time_now>
 801946e:	bf00      	nop

08019470 <rcl_get_ros_time>:
 8019470:	7a03      	ldrb	r3, [r0, #8]
 8019472:	b510      	push	{r4, lr}
 8019474:	460c      	mov	r4, r1
 8019476:	b143      	cbz	r3, 801948a <rcl_get_ros_time+0x1a>
 8019478:	2105      	movs	r1, #5
 801947a:	f7f7 fb7b 	bl	8010b74 <__atomic_load_8>
 801947e:	4602      	mov	r2, r0
 8019480:	460b      	mov	r3, r1
 8019482:	e9c4 2300 	strd	r2, r3, [r4]
 8019486:	2000      	movs	r0, #0
 8019488:	bd10      	pop	{r4, pc}
 801948a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801948e:	4608      	mov	r0, r1
 8019490:	f7f7 bde0 	b.w	8011054 <rcutils_system_time_now>

08019494 <rcl_clock_valid>:
 8019494:	b138      	cbz	r0, 80194a6 <rcl_clock_valid+0x12>
 8019496:	7803      	ldrb	r3, [r0, #0]
 8019498:	b123      	cbz	r3, 80194a4 <rcl_clock_valid+0x10>
 801949a:	68c0      	ldr	r0, [r0, #12]
 801949c:	3800      	subs	r0, #0
 801949e:	bf18      	it	ne
 80194a0:	2001      	movne	r0, #1
 80194a2:	4770      	bx	lr
 80194a4:	4618      	mov	r0, r3
 80194a6:	4770      	bx	lr

080194a8 <rcl_clock_init>:
 80194a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194aa:	4605      	mov	r5, r0
 80194ac:	4610      	mov	r0, r2
 80194ae:	4614      	mov	r4, r2
 80194b0:	460e      	mov	r6, r1
 80194b2:	f7f7 fb51 	bl	8010b58 <rcutils_allocator_is_valid>
 80194b6:	b128      	cbz	r0, 80194c4 <rcl_clock_init+0x1c>
 80194b8:	2d03      	cmp	r5, #3
 80194ba:	d803      	bhi.n	80194c4 <rcl_clock_init+0x1c>
 80194bc:	e8df f005 	tbb	[pc, r5]
 80194c0:	044c291a 	.word	0x044c291a
 80194c4:	200b      	movs	r0, #11
 80194c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194c8:	2e00      	cmp	r6, #0
 80194ca:	d0fb      	beq.n	80194c4 <rcl_clock_init+0x1c>
 80194cc:	2c00      	cmp	r4, #0
 80194ce:	d0f9      	beq.n	80194c4 <rcl_clock_init+0x1c>
 80194d0:	2300      	movs	r3, #0
 80194d2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80194d6:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801957c <rcl_clock_init+0xd4>
 80194da:	6133      	str	r3, [r6, #16]
 80194dc:	f106 0514 	add.w	r5, r6, #20
 80194e0:	2703      	movs	r7, #3
 80194e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	602b      	str	r3, [r5, #0]
 80194ea:	f8c6 c00c 	str.w	ip, [r6, #12]
 80194ee:	7037      	strb	r7, [r6, #0]
 80194f0:	2000      	movs	r0, #0
 80194f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194f4:	2e00      	cmp	r6, #0
 80194f6:	d0e5      	beq.n	80194c4 <rcl_clock_init+0x1c>
 80194f8:	2300      	movs	r3, #0
 80194fa:	7033      	strb	r3, [r6, #0]
 80194fc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019500:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8019504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019506:	f106 0514 	add.w	r5, r6, #20
 801950a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801950c:	6823      	ldr	r3, [r4, #0]
 801950e:	602b      	str	r3, [r5, #0]
 8019510:	e7ee      	b.n	80194f0 <rcl_clock_init+0x48>
 8019512:	2e00      	cmp	r6, #0
 8019514:	d0d6      	beq.n	80194c4 <rcl_clock_init+0x1c>
 8019516:	2c00      	cmp	r4, #0
 8019518:	d0d4      	beq.n	80194c4 <rcl_clock_init+0x1c>
 801951a:	2700      	movs	r7, #0
 801951c:	7037      	strb	r7, [r6, #0]
 801951e:	46a4      	mov	ip, r4
 8019520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019524:	f106 0514 	add.w	r5, r6, #20
 8019528:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801952c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8019530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019532:	f8dc 3000 	ldr.w	r3, [ip]
 8019536:	602b      	str	r3, [r5, #0]
 8019538:	6921      	ldr	r1, [r4, #16]
 801953a:	6823      	ldr	r3, [r4, #0]
 801953c:	2010      	movs	r0, #16
 801953e:	4798      	blx	r3
 8019540:	6130      	str	r0, [r6, #16]
 8019542:	b1b8      	cbz	r0, 8019574 <rcl_clock_init+0xcc>
 8019544:	2200      	movs	r2, #0
 8019546:	2300      	movs	r3, #0
 8019548:	e9c0 2300 	strd	r2, r3, [r0]
 801954c:	4a0a      	ldr	r2, [pc, #40]	@ (8019578 <rcl_clock_init+0xd0>)
 801954e:	7207      	strb	r7, [r0, #8]
 8019550:	2301      	movs	r3, #1
 8019552:	60f2      	str	r2, [r6, #12]
 8019554:	7033      	strb	r3, [r6, #0]
 8019556:	e7cb      	b.n	80194f0 <rcl_clock_init+0x48>
 8019558:	2e00      	cmp	r6, #0
 801955a:	d0b3      	beq.n	80194c4 <rcl_clock_init+0x1c>
 801955c:	2c00      	cmp	r4, #0
 801955e:	d0b1      	beq.n	80194c4 <rcl_clock_init+0x1c>
 8019560:	2300      	movs	r3, #0
 8019562:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019566:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8019580 <rcl_clock_init+0xd8>
 801956a:	6133      	str	r3, [r6, #16]
 801956c:	f106 0514 	add.w	r5, r6, #20
 8019570:	2702      	movs	r7, #2
 8019572:	e7b6      	b.n	80194e2 <rcl_clock_init+0x3a>
 8019574:	200a      	movs	r0, #10
 8019576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019578:	08019471 	.word	0x08019471
 801957c:	08019469 	.word	0x08019469
 8019580:	08019461 	.word	0x08019461

08019584 <rcl_clock_fini>:
 8019584:	b358      	cbz	r0, 80195de <rcl_clock_fini+0x5a>
 8019586:	b538      	push	{r3, r4, r5, lr}
 8019588:	4604      	mov	r4, r0
 801958a:	3014      	adds	r0, #20
 801958c:	f7f7 fae4 	bl	8010b58 <rcutils_allocator_is_valid>
 8019590:	b198      	cbz	r0, 80195ba <rcl_clock_fini+0x36>
 8019592:	7823      	ldrb	r3, [r4, #0]
 8019594:	2b02      	cmp	r3, #2
 8019596:	d005      	beq.n	80195a4 <rcl_clock_fini+0x20>
 8019598:	2b03      	cmp	r3, #3
 801959a:	d003      	beq.n	80195a4 <rcl_clock_fini+0x20>
 801959c:	2b01      	cmp	r3, #1
 801959e:	d00e      	beq.n	80195be <rcl_clock_fini+0x3a>
 80195a0:	200b      	movs	r0, #11
 80195a2:	bd38      	pop	{r3, r4, r5, pc}
 80195a4:	68a3      	ldr	r3, [r4, #8]
 80195a6:	b133      	cbz	r3, 80195b6 <rcl_clock_fini+0x32>
 80195a8:	2500      	movs	r5, #0
 80195aa:	69a3      	ldr	r3, [r4, #24]
 80195ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80195ae:	6860      	ldr	r0, [r4, #4]
 80195b0:	60a5      	str	r5, [r4, #8]
 80195b2:	4798      	blx	r3
 80195b4:	6065      	str	r5, [r4, #4]
 80195b6:	2000      	movs	r0, #0
 80195b8:	bd38      	pop	{r3, r4, r5, pc}
 80195ba:	2001      	movs	r0, #1
 80195bc:	bd38      	pop	{r3, r4, r5, pc}
 80195be:	68a3      	ldr	r3, [r4, #8]
 80195c0:	b133      	cbz	r3, 80195d0 <rcl_clock_fini+0x4c>
 80195c2:	2500      	movs	r5, #0
 80195c4:	69a3      	ldr	r3, [r4, #24]
 80195c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80195c8:	6860      	ldr	r0, [r4, #4]
 80195ca:	60a5      	str	r5, [r4, #8]
 80195cc:	4798      	blx	r3
 80195ce:	6065      	str	r5, [r4, #4]
 80195d0:	69a3      	ldr	r3, [r4, #24]
 80195d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80195d4:	6920      	ldr	r0, [r4, #16]
 80195d6:	4798      	blx	r3
 80195d8:	2300      	movs	r3, #0
 80195da:	6123      	str	r3, [r4, #16]
 80195dc:	e7eb      	b.n	80195b6 <rcl_clock_fini+0x32>
 80195de:	200b      	movs	r0, #11
 80195e0:	4770      	bx	lr
 80195e2:	bf00      	nop

080195e4 <rcl_clock_get_now>:
 80195e4:	b140      	cbz	r0, 80195f8 <rcl_clock_get_now+0x14>
 80195e6:	b139      	cbz	r1, 80195f8 <rcl_clock_get_now+0x14>
 80195e8:	7803      	ldrb	r3, [r0, #0]
 80195ea:	b11b      	cbz	r3, 80195f4 <rcl_clock_get_now+0x10>
 80195ec:	68c3      	ldr	r3, [r0, #12]
 80195ee:	b10b      	cbz	r3, 80195f4 <rcl_clock_get_now+0x10>
 80195f0:	6900      	ldr	r0, [r0, #16]
 80195f2:	4718      	bx	r3
 80195f4:	2001      	movs	r0, #1
 80195f6:	4770      	bx	lr
 80195f8:	200b      	movs	r0, #11
 80195fa:	4770      	bx	lr

080195fc <rcl_is_enabled_ros_time_override>:
 80195fc:	b158      	cbz	r0, 8019616 <rcl_is_enabled_ros_time_override+0x1a>
 80195fe:	b151      	cbz	r1, 8019616 <rcl_is_enabled_ros_time_override+0x1a>
 8019600:	7803      	ldrb	r3, [r0, #0]
 8019602:	2b01      	cmp	r3, #1
 8019604:	d105      	bne.n	8019612 <rcl_is_enabled_ros_time_override+0x16>
 8019606:	6902      	ldr	r2, [r0, #16]
 8019608:	b11a      	cbz	r2, 8019612 <rcl_is_enabled_ros_time_override+0x16>
 801960a:	7a13      	ldrb	r3, [r2, #8]
 801960c:	700b      	strb	r3, [r1, #0]
 801960e:	2000      	movs	r0, #0
 8019610:	4770      	bx	lr
 8019612:	2001      	movs	r0, #1
 8019614:	4770      	bx	lr
 8019616:	200b      	movs	r0, #11
 8019618:	4770      	bx	lr
 801961a:	bf00      	nop

0801961c <rcl_clock_add_jump_callback>:
 801961c:	b082      	sub	sp, #8
 801961e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019622:	a906      	add	r1, sp, #24
 8019624:	e881 000c 	stmia.w	r1, {r2, r3}
 8019628:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 801962c:	b320      	cbz	r0, 8019678 <rcl_clock_add_jump_callback+0x5c>
 801962e:	4605      	mov	r5, r0
 8019630:	3014      	adds	r0, #20
 8019632:	f7f7 fa91 	bl	8010b58 <rcutils_allocator_is_valid>
 8019636:	b1f8      	cbz	r0, 8019678 <rcl_clock_add_jump_callback+0x5c>
 8019638:	b1f7      	cbz	r7, 8019678 <rcl_clock_add_jump_callback+0x5c>
 801963a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801963c:	2b00      	cmp	r3, #0
 801963e:	db1b      	blt.n	8019678 <rcl_clock_add_jump_callback+0x5c>
 8019640:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8019644:	2a01      	cmp	r2, #1
 8019646:	f173 0300 	sbcs.w	r3, r3, #0
 801964a:	da15      	bge.n	8019678 <rcl_clock_add_jump_callback+0x5c>
 801964c:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8019650:	2c00      	cmp	r4, #0
 8019652:	d042      	beq.n	80196da <rcl_clock_add_jump_callback+0xbe>
 8019654:	4603      	mov	r3, r0
 8019656:	2200      	movs	r2, #0
 8019658:	e003      	b.n	8019662 <rcl_clock_add_jump_callback+0x46>
 801965a:	4294      	cmp	r4, r2
 801965c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8019660:	d011      	beq.n	8019686 <rcl_clock_add_jump_callback+0x6a>
 8019662:	6819      	ldr	r1, [r3, #0]
 8019664:	42b9      	cmp	r1, r7
 8019666:	f102 0201 	add.w	r2, r2, #1
 801966a:	d1f6      	bne.n	801965a <rcl_clock_add_jump_callback+0x3e>
 801966c:	6a19      	ldr	r1, [r3, #32]
 801966e:	42b1      	cmp	r1, r6
 8019670:	d1f3      	bne.n	801965a <rcl_clock_add_jump_callback+0x3e>
 8019672:	f04f 0e01 	mov.w	lr, #1
 8019676:	e001      	b.n	801967c <rcl_clock_add_jump_callback+0x60>
 8019678:	f04f 0e0b 	mov.w	lr, #11
 801967c:	4670      	mov	r0, lr
 801967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019682:	b002      	add	sp, #8
 8019684:	4770      	bx	lr
 8019686:	3401      	adds	r4, #1
 8019688:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801968c:	00e1      	lsls	r1, r4, #3
 801968e:	69eb      	ldr	r3, [r5, #28]
 8019690:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019692:	4798      	blx	r3
 8019694:	b1f0      	cbz	r0, 80196d4 <rcl_clock_add_jump_callback+0xb8>
 8019696:	68ab      	ldr	r3, [r5, #8]
 8019698:	6068      	str	r0, [r5, #4]
 801969a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801969e:	f10d 0c18 	add.w	ip, sp, #24
 80196a2:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 80196a6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 80196aa:	f103 0801 	add.w	r8, r3, #1
 80196ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80196b2:	f104 0708 	add.w	r7, r4, #8
 80196b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80196b8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80196bc:	f04f 0e00 	mov.w	lr, #0
 80196c0:	e887 0003 	stmia.w	r7, {r0, r1}
 80196c4:	6226      	str	r6, [r4, #32]
 80196c6:	4670      	mov	r0, lr
 80196c8:	f8c5 8008 	str.w	r8, [r5, #8]
 80196cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196d0:	b002      	add	sp, #8
 80196d2:	4770      	bx	lr
 80196d4:	f04f 0e0a 	mov.w	lr, #10
 80196d8:	e7d0      	b.n	801967c <rcl_clock_add_jump_callback+0x60>
 80196da:	2128      	movs	r1, #40	@ 0x28
 80196dc:	e7d7      	b.n	801968e <rcl_clock_add_jump_callback+0x72>
 80196de:	bf00      	nop

080196e0 <rcl_clock_remove_jump_callback>:
 80196e0:	2800      	cmp	r0, #0
 80196e2:	d05a      	beq.n	801979a <rcl_clock_remove_jump_callback+0xba>
 80196e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196e8:	4605      	mov	r5, r0
 80196ea:	3014      	adds	r0, #20
 80196ec:	460f      	mov	r7, r1
 80196ee:	4692      	mov	sl, r2
 80196f0:	f7f7 fa32 	bl	8010b58 <rcutils_allocator_is_valid>
 80196f4:	2800      	cmp	r0, #0
 80196f6:	d03f      	beq.n	8019778 <rcl_clock_remove_jump_callback+0x98>
 80196f8:	2f00      	cmp	r7, #0
 80196fa:	d03d      	beq.n	8019778 <rcl_clock_remove_jump_callback+0x98>
 80196fc:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8019700:	f1b8 0f00 	cmp.w	r8, #0
 8019704:	d00c      	beq.n	8019720 <rcl_clock_remove_jump_callback+0x40>
 8019706:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801970a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801970e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8019712:	464c      	mov	r4, r9
 8019714:	6823      	ldr	r3, [r4, #0]
 8019716:	42bb      	cmp	r3, r7
 8019718:	d005      	beq.n	8019726 <rcl_clock_remove_jump_callback+0x46>
 801971a:	3428      	adds	r4, #40	@ 0x28
 801971c:	42b4      	cmp	r4, r6
 801971e:	d1f9      	bne.n	8019714 <rcl_clock_remove_jump_callback+0x34>
 8019720:	2001      	movs	r0, #1
 8019722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019726:	6a23      	ldr	r3, [r4, #32]
 8019728:	3428      	adds	r4, #40	@ 0x28
 801972a:	42b4      	cmp	r4, r6
 801972c:	d02c      	beq.n	8019788 <rcl_clock_remove_jump_callback+0xa8>
 801972e:	4553      	cmp	r3, sl
 8019730:	d1f0      	bne.n	8019714 <rcl_clock_remove_jump_callback+0x34>
 8019732:	46a6      	mov	lr, r4
 8019734:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019738:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801973c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019740:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019748:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801974c:	3428      	adds	r4, #40	@ 0x28
 801974e:	42a6      	cmp	r6, r4
 8019750:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019754:	d1ed      	bne.n	8019732 <rcl_clock_remove_jump_callback+0x52>
 8019756:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801975a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801975c:	60ac      	str	r4, [r5, #8]
 801975e:	b174      	cbz	r4, 801977e <rcl_clock_remove_jump_callback+0x9e>
 8019760:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019764:	00e1      	lsls	r1, r4, #3
 8019766:	69eb      	ldr	r3, [r5, #28]
 8019768:	4648      	mov	r0, r9
 801976a:	4798      	blx	r3
 801976c:	4604      	mov	r4, r0
 801976e:	b1b0      	cbz	r0, 801979e <rcl_clock_remove_jump_callback+0xbe>
 8019770:	606c      	str	r4, [r5, #4]
 8019772:	2000      	movs	r0, #0
 8019774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019778:	200b      	movs	r0, #11
 801977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801977e:	69ab      	ldr	r3, [r5, #24]
 8019780:	4611      	mov	r1, r2
 8019782:	4648      	mov	r0, r9
 8019784:	4798      	blx	r3
 8019786:	e7f3      	b.n	8019770 <rcl_clock_remove_jump_callback+0x90>
 8019788:	4553      	cmp	r3, sl
 801978a:	d1c9      	bne.n	8019720 <rcl_clock_remove_jump_callback+0x40>
 801978c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8019790:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019792:	60ac      	str	r4, [r5, #8]
 8019794:	2c00      	cmp	r4, #0
 8019796:	d1e3      	bne.n	8019760 <rcl_clock_remove_jump_callback+0x80>
 8019798:	e7f1      	b.n	801977e <rcl_clock_remove_jump_callback+0x9e>
 801979a:	200b      	movs	r0, #11
 801979c:	4770      	bx	lr
 801979e:	200a      	movs	r0, #10
 80197a0:	e7eb      	b.n	801977a <rcl_clock_remove_jump_callback+0x9a>
 80197a2:	bf00      	nop

080197a4 <rcl_validate_enclave_name_with_size>:
 80197a4:	2800      	cmp	r0, #0
 80197a6:	d037      	beq.n	8019818 <rcl_validate_enclave_name_with_size+0x74>
 80197a8:	b570      	push	{r4, r5, r6, lr}
 80197aa:	4614      	mov	r4, r2
 80197ac:	b0c2      	sub	sp, #264	@ 0x108
 80197ae:	b342      	cbz	r2, 8019802 <rcl_validate_enclave_name_with_size+0x5e>
 80197b0:	461e      	mov	r6, r3
 80197b2:	466a      	mov	r2, sp
 80197b4:	ab01      	add	r3, sp, #4
 80197b6:	460d      	mov	r5, r1
 80197b8:	f7f7 fcf8 	bl	80111ac <rmw_validate_namespace_with_size>
 80197bc:	4684      	mov	ip, r0
 80197be:	bb28      	cbnz	r0, 801980c <rcl_validate_enclave_name_with_size+0x68>
 80197c0:	9b00      	ldr	r3, [sp, #0]
 80197c2:	b923      	cbnz	r3, 80197ce <rcl_validate_enclave_name_with_size+0x2a>
 80197c4:	2300      	movs	r3, #0
 80197c6:	6023      	str	r3, [r4, #0]
 80197c8:	4660      	mov	r0, ip
 80197ca:	b042      	add	sp, #264	@ 0x108
 80197cc:	bd70      	pop	{r4, r5, r6, pc}
 80197ce:	2b07      	cmp	r3, #7
 80197d0:	d00f      	beq.n	80197f2 <rcl_validate_enclave_name_with_size+0x4e>
 80197d2:	1e5a      	subs	r2, r3, #1
 80197d4:	2a05      	cmp	r2, #5
 80197d6:	d823      	bhi.n	8019820 <rcl_validate_enclave_name_with_size+0x7c>
 80197d8:	e8df f002 	tbb	[pc, r2]
 80197dc:	03030303 	.word	0x03030303
 80197e0:	0303      	.short	0x0303
 80197e2:	6023      	str	r3, [r4, #0]
 80197e4:	2e00      	cmp	r6, #0
 80197e6:	d0ef      	beq.n	80197c8 <rcl_validate_enclave_name_with_size+0x24>
 80197e8:	9b01      	ldr	r3, [sp, #4]
 80197ea:	6033      	str	r3, [r6, #0]
 80197ec:	4660      	mov	r0, ip
 80197ee:	b042      	add	sp, #264	@ 0x108
 80197f0:	bd70      	pop	{r4, r5, r6, pc}
 80197f2:	2dff      	cmp	r5, #255	@ 0xff
 80197f4:	d9e6      	bls.n	80197c4 <rcl_validate_enclave_name_with_size+0x20>
 80197f6:	6023      	str	r3, [r4, #0]
 80197f8:	2e00      	cmp	r6, #0
 80197fa:	d0e5      	beq.n	80197c8 <rcl_validate_enclave_name_with_size+0x24>
 80197fc:	23fe      	movs	r3, #254	@ 0xfe
 80197fe:	6033      	str	r3, [r6, #0]
 8019800:	e7e2      	b.n	80197c8 <rcl_validate_enclave_name_with_size+0x24>
 8019802:	f04f 0c0b 	mov.w	ip, #11
 8019806:	4660      	mov	r0, ip
 8019808:	b042      	add	sp, #264	@ 0x108
 801980a:	bd70      	pop	{r4, r5, r6, pc}
 801980c:	f7ff f85e 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 8019810:	4684      	mov	ip, r0
 8019812:	4660      	mov	r0, ip
 8019814:	b042      	add	sp, #264	@ 0x108
 8019816:	bd70      	pop	{r4, r5, r6, pc}
 8019818:	f04f 0c0b 	mov.w	ip, #11
 801981c:	4660      	mov	r0, ip
 801981e:	4770      	bx	lr
 8019820:	4a04      	ldr	r2, [pc, #16]	@ (8019834 <rcl_validate_enclave_name_with_size+0x90>)
 8019822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019826:	a802      	add	r0, sp, #8
 8019828:	f7f7 fb88 	bl	8010f3c <rcutils_snprintf>
 801982c:	f04f 0c01 	mov.w	ip, #1
 8019830:	e7ca      	b.n	80197c8 <rcl_validate_enclave_name_with_size+0x24>
 8019832:	bf00      	nop
 8019834:	08021618 	.word	0x08021618

08019838 <rcl_validate_enclave_name>:
 8019838:	b168      	cbz	r0, 8019856 <rcl_validate_enclave_name+0x1e>
 801983a:	b570      	push	{r4, r5, r6, lr}
 801983c:	460d      	mov	r5, r1
 801983e:	4616      	mov	r6, r2
 8019840:	4604      	mov	r4, r0
 8019842:	f7e6 fd4d 	bl	80002e0 <strlen>
 8019846:	4633      	mov	r3, r6
 8019848:	4601      	mov	r1, r0
 801984a:	462a      	mov	r2, r5
 801984c:	4620      	mov	r0, r4
 801984e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019852:	f7ff bfa7 	b.w	80197a4 <rcl_validate_enclave_name_with_size>
 8019856:	200b      	movs	r0, #11
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop

0801985c <rcl_get_zero_initialized_wait_set>:
 801985c:	b510      	push	{r4, lr}
 801985e:	4c08      	ldr	r4, [pc, #32]	@ (8019880 <rcl_get_zero_initialized_wait_set+0x24>)
 8019860:	4686      	mov	lr, r0
 8019862:	4684      	mov	ip, r0
 8019864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019866:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801986a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801986c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019872:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019876:	6823      	ldr	r3, [r4, #0]
 8019878:	f8cc 3000 	str.w	r3, [ip]
 801987c:	4670      	mov	r0, lr
 801987e:	bd10      	pop	{r4, pc}
 8019880:	08021678 	.word	0x08021678

08019884 <rcl_wait_set_is_valid>:
 8019884:	b118      	cbz	r0, 801988e <rcl_wait_set_is_valid+0xa>
 8019886:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019888:	3800      	subs	r0, #0
 801988a:	bf18      	it	ne
 801988c:	2001      	movne	r0, #1
 801988e:	4770      	bx	lr

08019890 <rcl_wait_set_fini>:
 8019890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019894:	b083      	sub	sp, #12
 8019896:	2800      	cmp	r0, #0
 8019898:	f000 8098 	beq.w	80199cc <rcl_wait_set_fini+0x13c>
 801989c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801989e:	4605      	mov	r5, r0
 80198a0:	2e00      	cmp	r6, #0
 80198a2:	f000 808f 	beq.w	80199c4 <rcl_wait_set_fini+0x134>
 80198a6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80198a8:	f002 fb62 	bl	801bf70 <rmw_destroy_wait_set>
 80198ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80198ae:	1e06      	subs	r6, r0, #0
 80198b0:	bf18      	it	ne
 80198b2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80198b6:	2c00      	cmp	r4, #0
 80198b8:	f000 8084 	beq.w	80199c4 <rcl_wait_set_fini+0x134>
 80198bc:	6828      	ldr	r0, [r5, #0]
 80198be:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 80198c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80198c6:	2700      	movs	r7, #0
 80198c8:	606f      	str	r7, [r5, #4]
 80198ca:	6027      	str	r7, [r4, #0]
 80198cc:	b118      	cbz	r0, 80198d6 <rcl_wait_set_fini+0x46>
 80198ce:	4649      	mov	r1, r9
 80198d0:	47c0      	blx	r8
 80198d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80198d4:	602f      	str	r7, [r5, #0]
 80198d6:	68a0      	ldr	r0, [r4, #8]
 80198d8:	b128      	cbz	r0, 80198e6 <rcl_wait_set_fini+0x56>
 80198da:	4649      	mov	r1, r9
 80198dc:	47c0      	blx	r8
 80198de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80198e0:	2300      	movs	r3, #0
 80198e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80198e6:	68a8      	ldr	r0, [r5, #8]
 80198e8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80198ea:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80198ec:	f04f 0800 	mov.w	r8, #0
 80198f0:	f8c5 800c 	str.w	r8, [r5, #12]
 80198f4:	f8c4 800c 	str.w	r8, [r4, #12]
 80198f8:	b128      	cbz	r0, 8019906 <rcl_wait_set_fini+0x76>
 80198fa:	47b8      	blx	r7
 80198fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80198fe:	f8c5 8008 	str.w	r8, [r5, #8]
 8019902:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8019904:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8019906:	6960      	ldr	r0, [r4, #20]
 8019908:	f04f 0800 	mov.w	r8, #0
 801990c:	f8c4 8010 	str.w	r8, [r4, #16]
 8019910:	b128      	cbz	r0, 801991e <rcl_wait_set_fini+0x8e>
 8019912:	47b8      	blx	r7
 8019914:	f8c4 8014 	str.w	r8, [r4, #20]
 8019918:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801991a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801991c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801991e:	6928      	ldr	r0, [r5, #16]
 8019920:	f04f 0800 	mov.w	r8, #0
 8019924:	f8c5 8014 	str.w	r8, [r5, #20]
 8019928:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 801992c:	b128      	cbz	r0, 801993a <rcl_wait_set_fini+0xaa>
 801992e:	47b8      	blx	r7
 8019930:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019932:	f8c5 8010 	str.w	r8, [r5, #16]
 8019936:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8019938:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801993a:	69a8      	ldr	r0, [r5, #24]
 801993c:	f04f 0800 	mov.w	r8, #0
 8019940:	f8c5 801c 	str.w	r8, [r5, #28]
 8019944:	f8c4 8018 	str.w	r8, [r4, #24]
 8019948:	b128      	cbz	r0, 8019956 <rcl_wait_set_fini+0xc6>
 801994a:	9101      	str	r1, [sp, #4]
 801994c:	47b8      	blx	r7
 801994e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019950:	9901      	ldr	r1, [sp, #4]
 8019952:	f8c5 8018 	str.w	r8, [r5, #24]
 8019956:	6a20      	ldr	r0, [r4, #32]
 8019958:	b120      	cbz	r0, 8019964 <rcl_wait_set_fini+0xd4>
 801995a:	47b8      	blx	r7
 801995c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801995e:	2300      	movs	r3, #0
 8019960:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8019964:	6a28      	ldr	r0, [r5, #32]
 8019966:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 801996a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801996e:	2700      	movs	r7, #0
 8019970:	626f      	str	r7, [r5, #36]	@ 0x24
 8019972:	6267      	str	r7, [r4, #36]	@ 0x24
 8019974:	b118      	cbz	r0, 801997e <rcl_wait_set_fini+0xee>
 8019976:	4649      	mov	r1, r9
 8019978:	47c0      	blx	r8
 801997a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801997c:	622f      	str	r7, [r5, #32]
 801997e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019980:	b128      	cbz	r0, 801998e <rcl_wait_set_fini+0xfe>
 8019982:	4649      	mov	r1, r9
 8019984:	47c0      	blx	r8
 8019986:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019988:	2300      	movs	r3, #0
 801998a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801998e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019990:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8019994:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019998:	2700      	movs	r7, #0
 801999a:	62ef      	str	r7, [r5, #44]	@ 0x2c
 801999c:	6327      	str	r7, [r4, #48]	@ 0x30
 801999e:	b118      	cbz	r0, 80199a8 <rcl_wait_set_fini+0x118>
 80199a0:	4649      	mov	r1, r9
 80199a2:	47c0      	blx	r8
 80199a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80199a6:	62af      	str	r7, [r5, #40]	@ 0x28
 80199a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80199aa:	b128      	cbz	r0, 80199b8 <rcl_wait_set_fini+0x128>
 80199ac:	4649      	mov	r1, r9
 80199ae:	47c0      	blx	r8
 80199b0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80199b2:	2300      	movs	r3, #0
 80199b4:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80199b8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80199ba:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80199bc:	4620      	mov	r0, r4
 80199be:	4798      	blx	r3
 80199c0:	2300      	movs	r3, #0
 80199c2:	632b      	str	r3, [r5, #48]	@ 0x30
 80199c4:	4630      	mov	r0, r6
 80199c6:	b003      	add	sp, #12
 80199c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199cc:	260b      	movs	r6, #11
 80199ce:	4630      	mov	r0, r6
 80199d0:	b003      	add	sp, #12
 80199d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199d6:	bf00      	nop

080199d8 <rcl_wait_set_add_subscription>:
 80199d8:	b318      	cbz	r0, 8019a22 <rcl_wait_set_add_subscription+0x4a>
 80199da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80199dc:	b570      	push	{r4, r5, r6, lr}
 80199de:	4604      	mov	r4, r0
 80199e0:	b30b      	cbz	r3, 8019a26 <rcl_wait_set_add_subscription+0x4e>
 80199e2:	b319      	cbz	r1, 8019a2c <rcl_wait_set_add_subscription+0x54>
 80199e4:	681d      	ldr	r5, [r3, #0]
 80199e6:	6840      	ldr	r0, [r0, #4]
 80199e8:	4285      	cmp	r5, r0
 80199ea:	d217      	bcs.n	8019a1c <rcl_wait_set_add_subscription+0x44>
 80199ec:	6820      	ldr	r0, [r4, #0]
 80199ee:	1c6e      	adds	r6, r5, #1
 80199f0:	601e      	str	r6, [r3, #0]
 80199f2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80199f6:	b102      	cbz	r2, 80199fa <rcl_wait_set_add_subscription+0x22>
 80199f8:	6015      	str	r5, [r2, #0]
 80199fa:	4608      	mov	r0, r1
 80199fc:	f7f5 fe9c 	bl	800f738 <rcl_subscription_get_rmw_handle>
 8019a00:	b150      	cbz	r0, 8019a18 <rcl_wait_set_add_subscription+0x40>
 8019a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a04:	6842      	ldr	r2, [r0, #4]
 8019a06:	689b      	ldr	r3, [r3, #8]
 8019a08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019a0c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019a0e:	6853      	ldr	r3, [r2, #4]
 8019a10:	3301      	adds	r3, #1
 8019a12:	2000      	movs	r0, #0
 8019a14:	6053      	str	r3, [r2, #4]
 8019a16:	bd70      	pop	{r4, r5, r6, pc}
 8019a18:	2001      	movs	r0, #1
 8019a1a:	bd70      	pop	{r4, r5, r6, pc}
 8019a1c:	f240 3086 	movw	r0, #902	@ 0x386
 8019a20:	bd70      	pop	{r4, r5, r6, pc}
 8019a22:	200b      	movs	r0, #11
 8019a24:	4770      	bx	lr
 8019a26:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019a2a:	bd70      	pop	{r4, r5, r6, pc}
 8019a2c:	200b      	movs	r0, #11
 8019a2e:	bd70      	pop	{r4, r5, r6, pc}

08019a30 <rcl_wait_set_clear>:
 8019a30:	2800      	cmp	r0, #0
 8019a32:	d074      	beq.n	8019b1e <rcl_wait_set_clear+0xee>
 8019a34:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019a36:	b510      	push	{r4, lr}
 8019a38:	4604      	mov	r4, r0
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d071      	beq.n	8019b22 <rcl_wait_set_clear+0xf2>
 8019a3e:	6800      	ldr	r0, [r0, #0]
 8019a40:	b138      	cbz	r0, 8019a52 <rcl_wait_set_clear+0x22>
 8019a42:	6862      	ldr	r2, [r4, #4]
 8019a44:	2100      	movs	r1, #0
 8019a46:	0092      	lsls	r2, r2, #2
 8019a48:	f004 fb82 	bl	801e150 <memset>
 8019a4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a4e:	2200      	movs	r2, #0
 8019a50:	601a      	str	r2, [r3, #0]
 8019a52:	68a0      	ldr	r0, [r4, #8]
 8019a54:	b138      	cbz	r0, 8019a66 <rcl_wait_set_clear+0x36>
 8019a56:	68e2      	ldr	r2, [r4, #12]
 8019a58:	2100      	movs	r1, #0
 8019a5a:	0092      	lsls	r2, r2, #2
 8019a5c:	f004 fb78 	bl	801e150 <memset>
 8019a60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a62:	2200      	movs	r2, #0
 8019a64:	60da      	str	r2, [r3, #12]
 8019a66:	69a0      	ldr	r0, [r4, #24]
 8019a68:	b138      	cbz	r0, 8019a7a <rcl_wait_set_clear+0x4a>
 8019a6a:	69e2      	ldr	r2, [r4, #28]
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	0092      	lsls	r2, r2, #2
 8019a70:	f004 fb6e 	bl	801e150 <memset>
 8019a74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a76:	2200      	movs	r2, #0
 8019a78:	619a      	str	r2, [r3, #24]
 8019a7a:	6a20      	ldr	r0, [r4, #32]
 8019a7c:	b138      	cbz	r0, 8019a8e <rcl_wait_set_clear+0x5e>
 8019a7e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8019a80:	2100      	movs	r1, #0
 8019a82:	0092      	lsls	r2, r2, #2
 8019a84:	f004 fb64 	bl	801e150 <memset>
 8019a88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a8a:	2200      	movs	r2, #0
 8019a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8019a8e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019a90:	b138      	cbz	r0, 8019aa2 <rcl_wait_set_clear+0x72>
 8019a92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019a94:	2100      	movs	r1, #0
 8019a96:	0092      	lsls	r2, r2, #2
 8019a98:	f004 fb5a 	bl	801e150 <memset>
 8019a9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8019aa2:	6920      	ldr	r0, [r4, #16]
 8019aa4:	b138      	cbz	r0, 8019ab6 <rcl_wait_set_clear+0x86>
 8019aa6:	6962      	ldr	r2, [r4, #20]
 8019aa8:	2100      	movs	r1, #0
 8019aaa:	0092      	lsls	r2, r2, #2
 8019aac:	f004 fb50 	bl	801e150 <memset>
 8019ab0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	641a      	str	r2, [r3, #64]	@ 0x40
 8019ab6:	6898      	ldr	r0, [r3, #8]
 8019ab8:	b138      	cbz	r0, 8019aca <rcl_wait_set_clear+0x9a>
 8019aba:	685a      	ldr	r2, [r3, #4]
 8019abc:	2100      	movs	r1, #0
 8019abe:	0092      	lsls	r2, r2, #2
 8019ac0:	f004 fb46 	bl	801e150 <memset>
 8019ac4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ac6:	2200      	movs	r2, #0
 8019ac8:	605a      	str	r2, [r3, #4]
 8019aca:	6958      	ldr	r0, [r3, #20]
 8019acc:	b138      	cbz	r0, 8019ade <rcl_wait_set_clear+0xae>
 8019ace:	691a      	ldr	r2, [r3, #16]
 8019ad0:	2100      	movs	r1, #0
 8019ad2:	0092      	lsls	r2, r2, #2
 8019ad4:	f004 fb3c 	bl	801e150 <memset>
 8019ad8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ada:	2200      	movs	r2, #0
 8019adc:	611a      	str	r2, [r3, #16]
 8019ade:	6a18      	ldr	r0, [r3, #32]
 8019ae0:	b138      	cbz	r0, 8019af2 <rcl_wait_set_clear+0xc2>
 8019ae2:	69da      	ldr	r2, [r3, #28]
 8019ae4:	2100      	movs	r1, #0
 8019ae6:	0092      	lsls	r2, r2, #2
 8019ae8:	f004 fb32 	bl	801e150 <memset>
 8019aec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019aee:	2200      	movs	r2, #0
 8019af0:	61da      	str	r2, [r3, #28]
 8019af2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019af4:	b138      	cbz	r0, 8019b06 <rcl_wait_set_clear+0xd6>
 8019af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019af8:	2100      	movs	r1, #0
 8019afa:	0092      	lsls	r2, r2, #2
 8019afc:	f004 fb28 	bl	801e150 <memset>
 8019b00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019b02:	2200      	movs	r2, #0
 8019b04:	629a      	str	r2, [r3, #40]	@ 0x28
 8019b06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8019b08:	b138      	cbz	r0, 8019b1a <rcl_wait_set_clear+0xea>
 8019b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019b0c:	2100      	movs	r1, #0
 8019b0e:	0092      	lsls	r2, r2, #2
 8019b10:	f004 fb1e 	bl	801e150 <memset>
 8019b14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019b16:	2200      	movs	r2, #0
 8019b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	bd10      	pop	{r4, pc}
 8019b1e:	200b      	movs	r0, #11
 8019b20:	4770      	bx	lr
 8019b22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019b26:	bd10      	pop	{r4, pc}

08019b28 <rcl_wait_set_resize>:
 8019b28:	2800      	cmp	r0, #0
 8019b2a:	f000 81a1 	beq.w	8019e70 <rcl_wait_set_resize+0x348>
 8019b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b32:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8019b36:	b083      	sub	sp, #12
 8019b38:	4604      	mov	r4, r0
 8019b3a:	f1ba 0f00 	cmp.w	sl, #0
 8019b3e:	f000 8199 	beq.w	8019e74 <rcl_wait_set_resize+0x34c>
 8019b42:	f04f 0800 	mov.w	r8, #0
 8019b46:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8019b4a:	461e      	mov	r6, r3
 8019b4c:	460f      	mov	r7, r1
 8019b4e:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8019b52:	4615      	mov	r5, r2
 8019b54:	f8c0 8004 	str.w	r8, [r0, #4]
 8019b58:	6800      	ldr	r0, [r0, #0]
 8019b5a:	f8ca 8000 	str.w	r8, [sl]
 8019b5e:	2900      	cmp	r1, #0
 8019b60:	f000 80cf 	beq.w	8019d02 <rcl_wait_set_resize+0x1da>
 8019b64:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8019b68:	464a      	mov	r2, r9
 8019b6a:	4651      	mov	r1, sl
 8019b6c:	9301      	str	r3, [sp, #4]
 8019b6e:	4798      	blx	r3
 8019b70:	9b01      	ldr	r3, [sp, #4]
 8019b72:	6020      	str	r0, [r4, #0]
 8019b74:	2800      	cmp	r0, #0
 8019b76:	f000 8109 	beq.w	8019d8c <rcl_wait_set_resize+0x264>
 8019b7a:	4652      	mov	r2, sl
 8019b7c:	4641      	mov	r1, r8
 8019b7e:	9301      	str	r3, [sp, #4]
 8019b80:	f004 fae6 	bl	801e150 <memset>
 8019b84:	6067      	str	r7, [r4, #4]
 8019b86:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8019b88:	9b01      	ldr	r3, [sp, #4]
 8019b8a:	68b8      	ldr	r0, [r7, #8]
 8019b8c:	f8c7 8004 	str.w	r8, [r7, #4]
 8019b90:	464a      	mov	r2, r9
 8019b92:	4651      	mov	r1, sl
 8019b94:	4798      	blx	r3
 8019b96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019b98:	60b8      	str	r0, [r7, #8]
 8019b9a:	689f      	ldr	r7, [r3, #8]
 8019b9c:	2f00      	cmp	r7, #0
 8019b9e:	f000 80f0 	beq.w	8019d82 <rcl_wait_set_resize+0x25a>
 8019ba2:	4652      	mov	r2, sl
 8019ba4:	4641      	mov	r1, r8
 8019ba6:	4638      	mov	r0, r7
 8019ba8:	f004 fad2 	bl	801e150 <memset>
 8019bac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019bb0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019bb4:	68a0      	ldr	r0, [r4, #8]
 8019bb6:	2700      	movs	r7, #0
 8019bb8:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8019bbc:	60e7      	str	r7, [r4, #12]
 8019bbe:	f8ca 700c 	str.w	r7, [sl, #12]
 8019bc2:	2d00      	cmp	r5, #0
 8019bc4:	f040 80b0 	bne.w	8019d28 <rcl_wait_set_resize+0x200>
 8019bc8:	b130      	cbz	r0, 8019bd8 <rcl_wait_set_resize+0xb0>
 8019bca:	4641      	mov	r1, r8
 8019bcc:	4790      	blx	r2
 8019bce:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019bd2:	60a5      	str	r5, [r4, #8]
 8019bd4:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019bd8:	f8da 0014 	ldr.w	r0, [sl, #20]
 8019bdc:	2700      	movs	r7, #0
 8019bde:	19ad      	adds	r5, r5, r6
 8019be0:	f8ca 7010 	str.w	r7, [sl, #16]
 8019be4:	f040 80b8 	bne.w	8019d58 <rcl_wait_set_resize+0x230>
 8019be8:	b148      	cbz	r0, 8019bfe <rcl_wait_set_resize+0xd6>
 8019bea:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8019bee:	4641      	mov	r1, r8
 8019bf0:	4798      	blx	r3
 8019bf2:	f8ca 5014 	str.w	r5, [sl, #20]
 8019bf6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019bfa:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019bfe:	6920      	ldr	r0, [r4, #16]
 8019c00:	2500      	movs	r5, #0
 8019c02:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019c06:	6165      	str	r5, [r4, #20]
 8019c08:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8019c0c:	2e00      	cmp	r6, #0
 8019c0e:	f040 80c1 	bne.w	8019d94 <rcl_wait_set_resize+0x26c>
 8019c12:	b140      	cbz	r0, 8019c26 <rcl_wait_set_resize+0xfe>
 8019c14:	4641      	mov	r1, r8
 8019c16:	47c8      	blx	r9
 8019c18:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019c1c:	6126      	str	r6, [r4, #16]
 8019c1e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019c22:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019c26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c28:	69a0      	ldr	r0, [r4, #24]
 8019c2a:	2500      	movs	r5, #0
 8019c2c:	61e5      	str	r5, [r4, #28]
 8019c2e:	f8ca 5018 	str.w	r5, [sl, #24]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	f040 80c2 	bne.w	8019dbc <rcl_wait_set_resize+0x294>
 8019c38:	b128      	cbz	r0, 8019c46 <rcl_wait_set_resize+0x11e>
 8019c3a:	4641      	mov	r1, r8
 8019c3c:	47c8      	blx	r9
 8019c3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c40:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019c44:	61a3      	str	r3, [r4, #24]
 8019c46:	f8da 0020 	ldr.w	r0, [sl, #32]
 8019c4a:	b130      	cbz	r0, 8019c5a <rcl_wait_set_resize+0x132>
 8019c4c:	4641      	mov	r1, r8
 8019c4e:	47c8      	blx	r9
 8019c50:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019c54:	2300      	movs	r3, #0
 8019c56:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8019c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019c5c:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8019c60:	6a20      	ldr	r0, [r4, #32]
 8019c62:	2500      	movs	r5, #0
 8019c64:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8019c68:	6265      	str	r5, [r4, #36]	@ 0x24
 8019c6a:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	f000 80c8 	beq.w	8019e04 <rcl_wait_set_resize+0x2dc>
 8019c74:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8019c78:	4632      	mov	r2, r6
 8019c7a:	4649      	mov	r1, r9
 8019c7c:	47c0      	blx	r8
 8019c7e:	6220      	str	r0, [r4, #32]
 8019c80:	2800      	cmp	r0, #0
 8019c82:	f000 8083 	beq.w	8019d8c <rcl_wait_set_resize+0x264>
 8019c86:	464a      	mov	r2, r9
 8019c88:	4629      	mov	r1, r5
 8019c8a:	f004 fa61 	bl	801e150 <memset>
 8019c8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019c94:	6263      	str	r3, [r4, #36]	@ 0x24
 8019c96:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8019c9a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8019c9e:	4632      	mov	r2, r6
 8019ca0:	4649      	mov	r1, r9
 8019ca2:	47c0      	blx	r8
 8019ca4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ca6:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8019caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	f000 80fb 	beq.w	8019ea8 <rcl_wait_set_resize+0x380>
 8019cb2:	464a      	mov	r2, r9
 8019cb4:	4629      	mov	r1, r5
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f004 fa4a 	bl	801e150 <memset>
 8019cbc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019cc2:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8019cc6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019cc8:	2500      	movs	r5, #0
 8019cca:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8019cce:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8019cd0:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	f040 80a9 	bne.w	8019e2c <rcl_wait_set_resize+0x304>
 8019cda:	b128      	cbz	r0, 8019ce8 <rcl_wait_set_resize+0x1c0>
 8019cdc:	4631      	mov	r1, r6
 8019cde:	47b8      	blx	r7
 8019ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ce2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019ce6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019ce8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8019cec:	b128      	cbz	r0, 8019cfa <rcl_wait_set_resize+0x1d2>
 8019cee:	4631      	mov	r1, r6
 8019cf0:	47b8      	blx	r7
 8019cf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8019cfa:	2000      	movs	r0, #0
 8019cfc:	b003      	add	sp, #12
 8019cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d02:	b120      	cbz	r0, 8019d0e <rcl_wait_set_resize+0x1e6>
 8019d04:	4649      	mov	r1, r9
 8019d06:	47d8      	blx	fp
 8019d08:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019d0c:	6027      	str	r7, [r4, #0]
 8019d0e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8019d12:	2800      	cmp	r0, #0
 8019d14:	f43f af4c 	beq.w	8019bb0 <rcl_wait_set_resize+0x88>
 8019d18:	4649      	mov	r1, r9
 8019d1a:	47d8      	blx	fp
 8019d1c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019d20:	2300      	movs	r3, #0
 8019d22:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8019d26:	e743      	b.n	8019bb0 <rcl_wait_set_resize+0x88>
 8019d28:	4642      	mov	r2, r8
 8019d2a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8019d2e:	4641      	mov	r1, r8
 8019d30:	4798      	blx	r3
 8019d32:	60a0      	str	r0, [r4, #8]
 8019d34:	b350      	cbz	r0, 8019d8c <rcl_wait_set_resize+0x264>
 8019d36:	4642      	mov	r2, r8
 8019d38:	4639      	mov	r1, r7
 8019d3a:	f004 fa09 	bl	801e150 <memset>
 8019d3e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019d42:	60e5      	str	r5, [r4, #12]
 8019d44:	2700      	movs	r7, #0
 8019d46:	19ad      	adds	r5, r5, r6
 8019d48:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019d4c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8019d50:	f8ca 7010 	str.w	r7, [sl, #16]
 8019d54:	f43f af48 	beq.w	8019be8 <rcl_wait_set_resize+0xc0>
 8019d58:	00ad      	lsls	r5, r5, #2
 8019d5a:	4642      	mov	r2, r8
 8019d5c:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8019d60:	4629      	mov	r1, r5
 8019d62:	4798      	blx	r3
 8019d64:	4680      	mov	r8, r0
 8019d66:	f8ca 0014 	str.w	r0, [sl, #20]
 8019d6a:	2800      	cmp	r0, #0
 8019d6c:	f000 8085 	beq.w	8019e7a <rcl_wait_set_resize+0x352>
 8019d70:	462a      	mov	r2, r5
 8019d72:	4639      	mov	r1, r7
 8019d74:	f004 f9ec 	bl	801e150 <memset>
 8019d78:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019d7c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019d80:	e73d      	b.n	8019bfe <rcl_wait_set_resize+0xd6>
 8019d82:	6820      	ldr	r0, [r4, #0]
 8019d84:	4649      	mov	r1, r9
 8019d86:	47d8      	blx	fp
 8019d88:	e9c4 7700 	strd	r7, r7, [r4]
 8019d8c:	200a      	movs	r0, #10
 8019d8e:	b003      	add	sp, #12
 8019d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d94:	4642      	mov	r2, r8
 8019d96:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8019d9a:	4641      	mov	r1, r8
 8019d9c:	47b8      	blx	r7
 8019d9e:	6120      	str	r0, [r4, #16]
 8019da0:	2800      	cmp	r0, #0
 8019da2:	d0f3      	beq.n	8019d8c <rcl_wait_set_resize+0x264>
 8019da4:	4642      	mov	r2, r8
 8019da6:	4629      	mov	r1, r5
 8019da8:	f004 f9d2 	bl	801e150 <memset>
 8019dac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019db0:	6166      	str	r6, [r4, #20]
 8019db2:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019db6:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019dba:	e734      	b.n	8019c26 <rcl_wait_set_resize+0xfe>
 8019dbc:	009e      	lsls	r6, r3, #2
 8019dbe:	4642      	mov	r2, r8
 8019dc0:	4631      	mov	r1, r6
 8019dc2:	47b8      	blx	r7
 8019dc4:	61a0      	str	r0, [r4, #24]
 8019dc6:	2800      	cmp	r0, #0
 8019dc8:	d0e0      	beq.n	8019d8c <rcl_wait_set_resize+0x264>
 8019dca:	4632      	mov	r2, r6
 8019dcc:	4629      	mov	r1, r5
 8019dce:	f004 f9bf 	bl	801e150 <memset>
 8019dd2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019dd8:	61e3      	str	r3, [r4, #28]
 8019dda:	f8da 0020 	ldr.w	r0, [sl, #32]
 8019dde:	f8ca 501c 	str.w	r5, [sl, #28]
 8019de2:	4642      	mov	r2, r8
 8019de4:	4631      	mov	r1, r6
 8019de6:	47b8      	blx	r7
 8019de8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019dea:	f8ca 0020 	str.w	r0, [sl, #32]
 8019dee:	6a1f      	ldr	r7, [r3, #32]
 8019df0:	2f00      	cmp	r7, #0
 8019df2:	d053      	beq.n	8019e9c <rcl_wait_set_resize+0x374>
 8019df4:	4632      	mov	r2, r6
 8019df6:	4629      	mov	r1, r5
 8019df8:	4638      	mov	r0, r7
 8019dfa:	f004 f9a9 	bl	801e150 <memset>
 8019dfe:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019e02:	e72a      	b.n	8019c5a <rcl_wait_set_resize+0x132>
 8019e04:	b128      	cbz	r0, 8019e12 <rcl_wait_set_resize+0x2ea>
 8019e06:	4631      	mov	r1, r6
 8019e08:	47b8      	blx	r7
 8019e0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019e10:	6223      	str	r3, [r4, #32]
 8019e12:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8019e16:	2800      	cmp	r0, #0
 8019e18:	f43f af52 	beq.w	8019cc0 <rcl_wait_set_resize+0x198>
 8019e1c:	4631      	mov	r1, r6
 8019e1e:	47b8      	blx	r7
 8019e20:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019e24:	2300      	movs	r3, #0
 8019e26:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8019e2a:	e749      	b.n	8019cc0 <rcl_wait_set_resize+0x198>
 8019e2c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8019e30:	4632      	mov	r2, r6
 8019e32:	4649      	mov	r1, r9
 8019e34:	47c0      	blx	r8
 8019e36:	62a0      	str	r0, [r4, #40]	@ 0x28
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	d0a7      	beq.n	8019d8c <rcl_wait_set_resize+0x264>
 8019e3c:	464a      	mov	r2, r9
 8019e3e:	4629      	mov	r1, r5
 8019e40:	f004 f986 	bl	801e150 <memset>
 8019e44:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019e48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019e4c:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8019e50:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8019e54:	4632      	mov	r2, r6
 8019e56:	4649      	mov	r1, r9
 8019e58:	47c0      	blx	r8
 8019e5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019e5c:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8019e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e62:	b34b      	cbz	r3, 8019eb8 <rcl_wait_set_resize+0x390>
 8019e64:	464a      	mov	r2, r9
 8019e66:	4629      	mov	r1, r5
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f004 f971 	bl	801e150 <memset>
 8019e6e:	e744      	b.n	8019cfa <rcl_wait_set_resize+0x1d2>
 8019e70:	200b      	movs	r0, #11
 8019e72:	4770      	bx	lr
 8019e74:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019e78:	e789      	b.n	8019d8e <rcl_wait_set_resize+0x266>
 8019e7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019e7c:	68a0      	ldr	r0, [r4, #8]
 8019e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019e80:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019e82:	4790      	blx	r2
 8019e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019e86:	6920      	ldr	r0, [r4, #16]
 8019e88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019e8a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019e8c:	f8c4 800c 	str.w	r8, [r4, #12]
 8019e90:	f8c4 8008 	str.w	r8, [r4, #8]
 8019e94:	4790      	blx	r2
 8019e96:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8019e9a:	e777      	b.n	8019d8c <rcl_wait_set_resize+0x264>
 8019e9c:	69a0      	ldr	r0, [r4, #24]
 8019e9e:	4641      	mov	r1, r8
 8019ea0:	47c8      	blx	r9
 8019ea2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8019ea6:	e771      	b.n	8019d8c <rcl_wait_set_resize+0x264>
 8019ea8:	6a20      	ldr	r0, [r4, #32]
 8019eaa:	9301      	str	r3, [sp, #4]
 8019eac:	4631      	mov	r1, r6
 8019eae:	47b8      	blx	r7
 8019eb0:	9b01      	ldr	r3, [sp, #4]
 8019eb2:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8019eb6:	e769      	b.n	8019d8c <rcl_wait_set_resize+0x264>
 8019eb8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019eba:	9301      	str	r3, [sp, #4]
 8019ebc:	4631      	mov	r1, r6
 8019ebe:	47b8      	blx	r7
 8019ec0:	9b01      	ldr	r3, [sp, #4]
 8019ec2:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8019ec6:	e761      	b.n	8019d8c <rcl_wait_set_resize+0x264>

08019ec8 <rcl_wait_set_init>:
 8019ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ecc:	b084      	sub	sp, #16
 8019ece:	4604      	mov	r4, r0
 8019ed0:	a810      	add	r0, sp, #64	@ 0x40
 8019ed2:	460d      	mov	r5, r1
 8019ed4:	4690      	mov	r8, r2
 8019ed6:	461f      	mov	r7, r3
 8019ed8:	f7f6 fe3e 	bl	8010b58 <rcutils_allocator_is_valid>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d06c      	beq.n	8019fba <rcl_wait_set_init+0xf2>
 8019ee0:	2c00      	cmp	r4, #0
 8019ee2:	d06a      	beq.n	8019fba <rcl_wait_set_init+0xf2>
 8019ee4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8019ee6:	b126      	cbz	r6, 8019ef2 <rcl_wait_set_init+0x2a>
 8019ee8:	2564      	movs	r5, #100	@ 0x64
 8019eea:	4628      	mov	r0, r5
 8019eec:	b004      	add	sp, #16
 8019eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ef2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d060      	beq.n	8019fba <rcl_wait_set_init+0xf2>
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7fe fd07 	bl	801890c <rcl_context_is_valid>
 8019efe:	2800      	cmp	r0, #0
 8019f00:	d060      	beq.n	8019fc4 <rcl_wait_set_init+0xfc>
 8019f02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019f04:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8019f06:	205c      	movs	r0, #92	@ 0x5c
 8019f08:	4798      	blx	r3
 8019f0a:	6320      	str	r0, [r4, #48]	@ 0x30
 8019f0c:	2800      	cmp	r0, #0
 8019f0e:	d063      	beq.n	8019fd8 <rcl_wait_set_init+0x110>
 8019f10:	4631      	mov	r1, r6
 8019f12:	225c      	movs	r2, #92	@ 0x5c
 8019f14:	f004 f91c 	bl	801e150 <memset>
 8019f18:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8019f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f1e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8019f22:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8019f26:	eb03 0e02 	add.w	lr, r3, r2
 8019f2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019f2c:	449e      	add	lr, r3
 8019f2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f30:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8019f34:	f8d3 a000 	ldr.w	sl, [r3]
 8019f38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019f3c:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8019f40:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8019f44:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8019f48:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8019f4c:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8019f50:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8019f54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019f56:	44c6      	add	lr, r8
 8019f58:	f8dc 3000 	ldr.w	r3, [ip]
 8019f5c:	6033      	str	r3, [r6, #0]
 8019f5e:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8019f62:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8019f66:	f001 fff9 	bl	801bf5c <rmw_create_wait_set>
 8019f6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019f6c:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8019f70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019f72:	b348      	cbz	r0, 8019fc8 <rcl_wait_set_init+0x100>
 8019f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f76:	9302      	str	r3, [sp, #8]
 8019f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f7a:	9301      	str	r3, [sp, #4]
 8019f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019f7e:	9300      	str	r3, [sp, #0]
 8019f80:	4629      	mov	r1, r5
 8019f82:	463b      	mov	r3, r7
 8019f84:	4642      	mov	r2, r8
 8019f86:	4620      	mov	r0, r4
 8019f88:	f7ff fdce 	bl	8019b28 <rcl_wait_set_resize>
 8019f8c:	4605      	mov	r5, r0
 8019f8e:	2800      	cmp	r0, #0
 8019f90:	d0ab      	beq.n	8019eea <rcl_wait_set_init+0x22>
 8019f92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019f94:	bb13      	cbnz	r3, 8019fdc <rcl_wait_set_init+0x114>
 8019f96:	2600      	movs	r6, #0
 8019f98:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8019f9c:	9600      	str	r6, [sp, #0]
 8019f9e:	4633      	mov	r3, r6
 8019fa0:	4632      	mov	r2, r6
 8019fa2:	4631      	mov	r1, r6
 8019fa4:	4620      	mov	r0, r4
 8019fa6:	f7ff fdbf 	bl	8019b28 <rcl_wait_set_resize>
 8019faa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019fac:	2800      	cmp	r0, #0
 8019fae:	d09c      	beq.n	8019eea <rcl_wait_set_init+0x22>
 8019fb0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8019fb2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8019fb4:	4798      	blx	r3
 8019fb6:	6326      	str	r6, [r4, #48]	@ 0x30
 8019fb8:	e797      	b.n	8019eea <rcl_wait_set_init+0x22>
 8019fba:	250b      	movs	r5, #11
 8019fbc:	4628      	mov	r0, r5
 8019fbe:	b004      	add	sp, #16
 8019fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fc4:	2565      	movs	r5, #101	@ 0x65
 8019fc6:	e790      	b.n	8019eea <rcl_wait_set_init+0x22>
 8019fc8:	2501      	movs	r5, #1
 8019fca:	f001 ffd1 	bl	801bf70 <rmw_destroy_wait_set>
 8019fce:	2800      	cmp	r0, #0
 8019fd0:	bf18      	it	ne
 8019fd2:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8019fd6:	e7de      	b.n	8019f96 <rcl_wait_set_init+0xce>
 8019fd8:	250a      	movs	r5, #10
 8019fda:	e786      	b.n	8019eea <rcl_wait_set_init+0x22>
 8019fdc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019fde:	e7f4      	b.n	8019fca <rcl_wait_set_init+0x102>

08019fe0 <rcl_wait_set_add_guard_condition>:
 8019fe0:	b318      	cbz	r0, 801a02a <rcl_wait_set_add_guard_condition+0x4a>
 8019fe2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019fe4:	b570      	push	{r4, r5, r6, lr}
 8019fe6:	4604      	mov	r4, r0
 8019fe8:	b30b      	cbz	r3, 801a02e <rcl_wait_set_add_guard_condition+0x4e>
 8019fea:	b319      	cbz	r1, 801a034 <rcl_wait_set_add_guard_condition+0x54>
 8019fec:	68dd      	ldr	r5, [r3, #12]
 8019fee:	68c0      	ldr	r0, [r0, #12]
 8019ff0:	4285      	cmp	r5, r0
 8019ff2:	d217      	bcs.n	801a024 <rcl_wait_set_add_guard_condition+0x44>
 8019ff4:	68a0      	ldr	r0, [r4, #8]
 8019ff6:	1c6e      	adds	r6, r5, #1
 8019ff8:	60de      	str	r6, [r3, #12]
 8019ffa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019ffe:	b102      	cbz	r2, 801a002 <rcl_wait_set_add_guard_condition+0x22>
 801a000:	6015      	str	r5, [r2, #0]
 801a002:	4608      	mov	r0, r1
 801a004:	f7fe fe00 	bl	8018c08 <rcl_guard_condition_get_rmw_handle>
 801a008:	b150      	cbz	r0, 801a020 <rcl_wait_set_add_guard_condition+0x40>
 801a00a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a00c:	6842      	ldr	r2, [r0, #4]
 801a00e:	695b      	ldr	r3, [r3, #20]
 801a010:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a014:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a016:	6913      	ldr	r3, [r2, #16]
 801a018:	3301      	adds	r3, #1
 801a01a:	2000      	movs	r0, #0
 801a01c:	6113      	str	r3, [r2, #16]
 801a01e:	bd70      	pop	{r4, r5, r6, pc}
 801a020:	2001      	movs	r0, #1
 801a022:	bd70      	pop	{r4, r5, r6, pc}
 801a024:	f240 3086 	movw	r0, #902	@ 0x386
 801a028:	bd70      	pop	{r4, r5, r6, pc}
 801a02a:	200b      	movs	r0, #11
 801a02c:	4770      	bx	lr
 801a02e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a032:	bd70      	pop	{r4, r5, r6, pc}
 801a034:	200b      	movs	r0, #11
 801a036:	bd70      	pop	{r4, r5, r6, pc}

0801a038 <rcl_wait_set_add_timer>:
 801a038:	b328      	cbz	r0, 801a086 <rcl_wait_set_add_timer+0x4e>
 801a03a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a03c:	b570      	push	{r4, r5, r6, lr}
 801a03e:	4604      	mov	r4, r0
 801a040:	b31b      	cbz	r3, 801a08a <rcl_wait_set_add_timer+0x52>
 801a042:	b329      	cbz	r1, 801a090 <rcl_wait_set_add_timer+0x58>
 801a044:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801a046:	6965      	ldr	r5, [r4, #20]
 801a048:	42a8      	cmp	r0, r5
 801a04a:	d219      	bcs.n	801a080 <rcl_wait_set_add_timer+0x48>
 801a04c:	6925      	ldr	r5, [r4, #16]
 801a04e:	1c46      	adds	r6, r0, #1
 801a050:	641e      	str	r6, [r3, #64]	@ 0x40
 801a052:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801a056:	b102      	cbz	r2, 801a05a <rcl_wait_set_add_timer+0x22>
 801a058:	6010      	str	r0, [r2, #0]
 801a05a:	4608      	mov	r0, r1
 801a05c:	f7f5 fdf0 	bl	800fc40 <rcl_timer_get_guard_condition>
 801a060:	b160      	cbz	r0, 801a07c <rcl_wait_set_add_timer+0x44>
 801a062:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a064:	68e3      	ldr	r3, [r4, #12]
 801a066:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801a068:	3b01      	subs	r3, #1
 801a06a:	441d      	add	r5, r3
 801a06c:	f7fe fdcc 	bl	8018c08 <rcl_guard_condition_get_rmw_handle>
 801a070:	b180      	cbz	r0, 801a094 <rcl_wait_set_add_timer+0x5c>
 801a072:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a074:	6842      	ldr	r2, [r0, #4]
 801a076:	695b      	ldr	r3, [r3, #20]
 801a078:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a07c:	2000      	movs	r0, #0
 801a07e:	bd70      	pop	{r4, r5, r6, pc}
 801a080:	f240 3086 	movw	r0, #902	@ 0x386
 801a084:	bd70      	pop	{r4, r5, r6, pc}
 801a086:	200b      	movs	r0, #11
 801a088:	4770      	bx	lr
 801a08a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a08e:	bd70      	pop	{r4, r5, r6, pc}
 801a090:	200b      	movs	r0, #11
 801a092:	bd70      	pop	{r4, r5, r6, pc}
 801a094:	2001      	movs	r0, #1
 801a096:	bd70      	pop	{r4, r5, r6, pc}

0801a098 <rcl_wait_set_add_client>:
 801a098:	b318      	cbz	r0, 801a0e2 <rcl_wait_set_add_client+0x4a>
 801a09a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a09c:	b570      	push	{r4, r5, r6, lr}
 801a09e:	4604      	mov	r4, r0
 801a0a0:	b30b      	cbz	r3, 801a0e6 <rcl_wait_set_add_client+0x4e>
 801a0a2:	b319      	cbz	r1, 801a0ec <rcl_wait_set_add_client+0x54>
 801a0a4:	699d      	ldr	r5, [r3, #24]
 801a0a6:	69c0      	ldr	r0, [r0, #28]
 801a0a8:	4285      	cmp	r5, r0
 801a0aa:	d217      	bcs.n	801a0dc <rcl_wait_set_add_client+0x44>
 801a0ac:	69a0      	ldr	r0, [r4, #24]
 801a0ae:	1c6e      	adds	r6, r5, #1
 801a0b0:	619e      	str	r6, [r3, #24]
 801a0b2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a0b6:	b102      	cbz	r2, 801a0ba <rcl_wait_set_add_client+0x22>
 801a0b8:	6015      	str	r5, [r2, #0]
 801a0ba:	4608      	mov	r0, r1
 801a0bc:	f7fe fb38 	bl	8018730 <rcl_client_get_rmw_handle>
 801a0c0:	b150      	cbz	r0, 801a0d8 <rcl_wait_set_add_client+0x40>
 801a0c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a0c4:	6842      	ldr	r2, [r0, #4]
 801a0c6:	6a1b      	ldr	r3, [r3, #32]
 801a0c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a0cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a0ce:	69d3      	ldr	r3, [r2, #28]
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	2000      	movs	r0, #0
 801a0d4:	61d3      	str	r3, [r2, #28]
 801a0d6:	bd70      	pop	{r4, r5, r6, pc}
 801a0d8:	2001      	movs	r0, #1
 801a0da:	bd70      	pop	{r4, r5, r6, pc}
 801a0dc:	f240 3086 	movw	r0, #902	@ 0x386
 801a0e0:	bd70      	pop	{r4, r5, r6, pc}
 801a0e2:	200b      	movs	r0, #11
 801a0e4:	4770      	bx	lr
 801a0e6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a0ea:	bd70      	pop	{r4, r5, r6, pc}
 801a0ec:	200b      	movs	r0, #11
 801a0ee:	bd70      	pop	{r4, r5, r6, pc}

0801a0f0 <rcl_wait_set_add_service>:
 801a0f0:	b318      	cbz	r0, 801a13a <rcl_wait_set_add_service+0x4a>
 801a0f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a0f4:	b570      	push	{r4, r5, r6, lr}
 801a0f6:	4604      	mov	r4, r0
 801a0f8:	b30b      	cbz	r3, 801a13e <rcl_wait_set_add_service+0x4e>
 801a0fa:	b319      	cbz	r1, 801a144 <rcl_wait_set_add_service+0x54>
 801a0fc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801a0fe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801a100:	4285      	cmp	r5, r0
 801a102:	d217      	bcs.n	801a134 <rcl_wait_set_add_service+0x44>
 801a104:	6a20      	ldr	r0, [r4, #32]
 801a106:	1c6e      	adds	r6, r5, #1
 801a108:	625e      	str	r6, [r3, #36]	@ 0x24
 801a10a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a10e:	b102      	cbz	r2, 801a112 <rcl_wait_set_add_service+0x22>
 801a110:	6015      	str	r5, [r2, #0]
 801a112:	4608      	mov	r0, r1
 801a114:	f7ff f88c 	bl	8019230 <rcl_service_get_rmw_handle>
 801a118:	b150      	cbz	r0, 801a130 <rcl_wait_set_add_service+0x40>
 801a11a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a11c:	6842      	ldr	r2, [r0, #4]
 801a11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a120:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a124:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a126:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801a128:	3301      	adds	r3, #1
 801a12a:	2000      	movs	r0, #0
 801a12c:	6293      	str	r3, [r2, #40]	@ 0x28
 801a12e:	bd70      	pop	{r4, r5, r6, pc}
 801a130:	2001      	movs	r0, #1
 801a132:	bd70      	pop	{r4, r5, r6, pc}
 801a134:	f240 3086 	movw	r0, #902	@ 0x386
 801a138:	bd70      	pop	{r4, r5, r6, pc}
 801a13a:	200b      	movs	r0, #11
 801a13c:	4770      	bx	lr
 801a13e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a142:	bd70      	pop	{r4, r5, r6, pc}
 801a144:	200b      	movs	r0, #11
 801a146:	bd70      	pop	{r4, r5, r6, pc}

0801a148 <rcl_wait>:
 801a148:	2800      	cmp	r0, #0
 801a14a:	f000 81d4 	beq.w	801a4f6 <rcl_wait+0x3ae>
 801a14e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a152:	ed2d 8b02 	vpush	{d8}
 801a156:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 801a158:	b099      	sub	sp, #100	@ 0x64
 801a15a:	4604      	mov	r4, r0
 801a15c:	2d00      	cmp	r5, #0
 801a15e:	f000 8178 	beq.w	801a452 <rcl_wait+0x30a>
 801a162:	461f      	mov	r7, r3
 801a164:	6843      	ldr	r3, [r0, #4]
 801a166:	4690      	mov	r8, r2
 801a168:	2b00      	cmp	r3, #0
 801a16a:	f000 809b 	beq.w	801a2a4 <rcl_wait+0x15c>
 801a16e:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 801a170:	2e00      	cmp	r6, #0
 801a172:	f000 80b2 	beq.w	801a2da <rcl_wait+0x192>
 801a176:	2100      	movs	r1, #0
 801a178:	468c      	mov	ip, r1
 801a17a:	460a      	mov	r2, r1
 801a17c:	46a6      	mov	lr, r4
 801a17e:	f8de 3010 	ldr.w	r3, [lr, #16]
 801a182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a186:	b173      	cbz	r3, 801a1a6 <rcl_wait+0x5e>
 801a188:	f8de 300c 	ldr.w	r3, [lr, #12]
 801a18c:	6968      	ldr	r0, [r5, #20]
 801a18e:	440b      	add	r3, r1
 801a190:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801a194:	b13c      	cbz	r4, 801a1a6 <rcl_wait+0x5e>
 801a196:	692b      	ldr	r3, [r5, #16]
 801a198:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 801a19c:	3301      	adds	r3, #1
 801a19e:	612b      	str	r3, [r5, #16]
 801a1a0:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 801a1a4:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 801a1a6:	3101      	adds	r1, #1
 801a1a8:	f14c 0c00 	adc.w	ip, ip, #0
 801a1ac:	42b1      	cmp	r1, r6
 801a1ae:	f17c 0300 	sbcs.w	r3, ip, #0
 801a1b2:	d3e4      	bcc.n	801a17e <rcl_wait+0x36>
 801a1b4:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 801a460 <rcl_wait+0x318>
 801a1b8:	ea58 0307 	orrs.w	r3, r8, r7
 801a1bc:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 801a1c0:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 801a1c4:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 801a1c8:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 801a1cc:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 801a1d0:	4674      	mov	r4, lr
 801a1d2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801a1d6:	f000 8094 	beq.w	801a302 <rcl_wait+0x1ba>
 801a1da:	2e00      	cmp	r6, #0
 801a1dc:	f000 8145 	beq.w	801a46a <rcl_wait+0x322>
 801a1e0:	2500      	movs	r5, #0
 801a1e2:	46bb      	mov	fp, r7
 801a1e4:	e02c      	b.n	801a240 <rcl_wait+0xf8>
 801a1e6:	6923      	ldr	r3, [r4, #16]
 801a1e8:	f853 0009 	ldr.w	r0, [r3, r9]
 801a1ec:	a908      	add	r1, sp, #32
 801a1ee:	ed8d 8b08 	vstr	d8, [sp, #32]
 801a1f2:	f7f5 fd03 	bl	800fbfc <rcl_timer_get_next_call_time>
 801a1f6:	f240 3321 	movw	r3, #801	@ 0x321
 801a1fa:	4298      	cmp	r0, r3
 801a1fc:	f000 80bb 	beq.w	801a376 <rcl_wait+0x22e>
 801a200:	2800      	cmp	r0, #0
 801a202:	d165      	bne.n	801a2d0 <rcl_wait+0x188>
 801a204:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 801a208:	7830      	ldrb	r0, [r6, #0]
 801a20a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a20c:	ab18      	add	r3, sp, #96	@ 0x60
 801a20e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801a212:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 801a216:	9205      	str	r2, [sp, #20]
 801a218:	f853 2c20 	ldr.w	r2, [r3, #-32]
 801a21c:	4297      	cmp	r7, r2
 801a21e:	9a05      	ldr	r2, [sp, #20]
 801a220:	eb71 0202 	sbcs.w	r2, r1, r2
 801a224:	da06      	bge.n	801a234 <rcl_wait+0xec>
 801a226:	e943 7108 	strd	r7, r1, [r3, #-32]
 801a22a:	ab18      	add	r3, sp, #96	@ 0x60
 801a22c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a230:	f840 6c30 	str.w	r6, [r0, #-48]
 801a234:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a236:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 801a238:	3501      	adds	r5, #1
 801a23a:	42b5      	cmp	r5, r6
 801a23c:	f080 8114 	bcs.w	801a468 <rcl_wait+0x320>
 801a240:	6923      	ldr	r3, [r4, #16]
 801a242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a246:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801a24a:	2800      	cmp	r0, #0
 801a24c:	d0f4      	beq.n	801a238 <rcl_wait+0xf0>
 801a24e:	a907      	add	r1, sp, #28
 801a250:	f7f5 fc00 	bl	800fa54 <rcl_timer_clock>
 801a254:	4603      	mov	r3, r0
 801a256:	2800      	cmp	r0, #0
 801a258:	f040 8141 	bne.w	801a4de <rcl_wait+0x396>
 801a25c:	9807      	ldr	r0, [sp, #28]
 801a25e:	7802      	ldrb	r2, [r0, #0]
 801a260:	2a01      	cmp	r2, #1
 801a262:	d1c0      	bne.n	801a1e6 <rcl_wait+0x9e>
 801a264:	f10d 011b 	add.w	r1, sp, #27
 801a268:	f88d 301b 	strb.w	r3, [sp, #27]
 801a26c:	f7ff f9c6 	bl	80195fc <rcl_is_enabled_ros_time_override>
 801a270:	4602      	mov	r2, r0
 801a272:	2800      	cmp	r0, #0
 801a274:	f040 8133 	bne.w	801a4de <rcl_wait+0x396>
 801a278:	6923      	ldr	r3, [r4, #16]
 801a27a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 801a27e:	f853 0009 	ldr.w	r0, [r3, r9]
 801a282:	2900      	cmp	r1, #0
 801a284:	d0b0      	beq.n	801a1e8 <rcl_wait+0xa0>
 801a286:	ae08      	add	r6, sp, #32
 801a288:	4631      	mov	r1, r6
 801a28a:	f88d 2020 	strb.w	r2, [sp, #32]
 801a28e:	f7f5 fc7b 	bl	800fb88 <rcl_timer_is_ready>
 801a292:	2800      	cmp	r0, #0
 801a294:	f040 8123 	bne.w	801a4de <rcl_wait+0x396>
 801a298:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d0c9      	beq.n	801a234 <rcl_wait+0xec>
 801a2a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a2a2:	e02f      	b.n	801a304 <rcl_wait+0x1bc>
 801a2a4:	68c3      	ldr	r3, [r0, #12]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	f47f af61 	bne.w	801a16e <rcl_wait+0x26>
 801a2ac:	6943      	ldr	r3, [r0, #20]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	f47f af5d 	bne.w	801a16e <rcl_wait+0x26>
 801a2b4:	69c3      	ldr	r3, [r0, #28]
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	f47f af59 	bne.w	801a16e <rcl_wait+0x26>
 801a2bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	f47f af55 	bne.w	801a16e <rcl_wait+0x26>
 801a2c4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f47f af51 	bne.w	801a16e <rcl_wait+0x26>
 801a2cc:	f240 3085 	movw	r0, #901	@ 0x385
 801a2d0:	b019      	add	sp, #100	@ 0x64
 801a2d2:	ecbd 8b02 	vpop	{d8}
 801a2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2da:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a2de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a2e2:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 801a2e6:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 801a2ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801a2ee:	ea58 0307 	orrs.w	r3, r8, r7
 801a2f2:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 801a2f6:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 801a2fa:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801a2fe:	f040 80b4 	bne.w	801a46a <rcl_wait+0x322>
 801a302:	ae08      	add	r6, sp, #32
 801a304:	2200      	movs	r2, #0
 801a306:	2300      	movs	r3, #0
 801a308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a30c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801a310:	9602      	str	r6, [sp, #8]
 801a312:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801a314:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 801a318:	e9cd 3200 	strd	r3, r2, [sp]
 801a31c:	f105 0110 	add.w	r1, r5, #16
 801a320:	f105 031c 	add.w	r3, r5, #28
 801a324:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 801a328:	1d28      	adds	r0, r5, #4
 801a32a:	f001 fc95 	bl	801bc58 <rmw_wait>
 801a32e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a332:	4680      	mov	r8, r0
 801a334:	b332      	cbz	r2, 801a384 <rcl_wait+0x23c>
 801a336:	2500      	movs	r5, #0
 801a338:	462f      	mov	r7, r5
 801a33a:	462e      	mov	r6, r5
 801a33c:	e007      	b.n	801a34e <rcl_wait+0x206>
 801a33e:	6922      	ldr	r2, [r4, #16]
 801a340:	f842 3009 	str.w	r3, [r2, r9]
 801a344:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a348:	3501      	adds	r5, #1
 801a34a:	4295      	cmp	r5, r2
 801a34c:	d21b      	bcs.n	801a386 <rcl_wait+0x23e>
 801a34e:	6920      	ldr	r0, [r4, #16]
 801a350:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801a354:	a907      	add	r1, sp, #28
 801a356:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801a35a:	2800      	cmp	r0, #0
 801a35c:	d0f4      	beq.n	801a348 <rcl_wait+0x200>
 801a35e:	f88d 601c 	strb.w	r6, [sp, #28]
 801a362:	f7f5 fc11 	bl	800fb88 <rcl_timer_is_ready>
 801a366:	2800      	cmp	r0, #0
 801a368:	d1b2      	bne.n	801a2d0 <rcl_wait+0x188>
 801a36a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d0e5      	beq.n	801a33e <rcl_wait+0x1f6>
 801a372:	461f      	mov	r7, r3
 801a374:	e7e6      	b.n	801a344 <rcl_wait+0x1fc>
 801a376:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a378:	6923      	ldr	r3, [r4, #16]
 801a37a:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 801a37c:	2200      	movs	r2, #0
 801a37e:	f843 2009 	str.w	r2, [r3, r9]
 801a382:	e759      	b.n	801a238 <rcl_wait+0xf0>
 801a384:	4617      	mov	r7, r2
 801a386:	f038 0002 	bics.w	r0, r8, #2
 801a38a:	f040 80a8 	bne.w	801a4de <rcl_wait+0x396>
 801a38e:	6866      	ldr	r6, [r4, #4]
 801a390:	4602      	mov	r2, r0
 801a392:	b91e      	cbnz	r6, 801a39c <rcl_wait+0x254>
 801a394:	e00d      	b.n	801a3b2 <rcl_wait+0x26a>
 801a396:	3201      	adds	r2, #1
 801a398:	4296      	cmp	r6, r2
 801a39a:	d00a      	beq.n	801a3b2 <rcl_wait+0x26a>
 801a39c:	6899      	ldr	r1, [r3, #8]
 801a39e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a3a2:	2900      	cmp	r1, #0
 801a3a4:	d1f7      	bne.n	801a396 <rcl_wait+0x24e>
 801a3a6:	6825      	ldr	r5, [r4, #0]
 801a3a8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a3ac:	3201      	adds	r2, #1
 801a3ae:	4296      	cmp	r6, r2
 801a3b0:	d1f4      	bne.n	801a39c <rcl_wait+0x254>
 801a3b2:	68e6      	ldr	r6, [r4, #12]
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	b91e      	cbnz	r6, 801a3c0 <rcl_wait+0x278>
 801a3b8:	e00d      	b.n	801a3d6 <rcl_wait+0x28e>
 801a3ba:	3201      	adds	r2, #1
 801a3bc:	42b2      	cmp	r2, r6
 801a3be:	d00a      	beq.n	801a3d6 <rcl_wait+0x28e>
 801a3c0:	6959      	ldr	r1, [r3, #20]
 801a3c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a3c6:	2900      	cmp	r1, #0
 801a3c8:	d1f7      	bne.n	801a3ba <rcl_wait+0x272>
 801a3ca:	68a5      	ldr	r5, [r4, #8]
 801a3cc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a3d0:	3201      	adds	r2, #1
 801a3d2:	42b2      	cmp	r2, r6
 801a3d4:	d1f4      	bne.n	801a3c0 <rcl_wait+0x278>
 801a3d6:	69e6      	ldr	r6, [r4, #28]
 801a3d8:	2200      	movs	r2, #0
 801a3da:	b91e      	cbnz	r6, 801a3e4 <rcl_wait+0x29c>
 801a3dc:	e00d      	b.n	801a3fa <rcl_wait+0x2b2>
 801a3de:	3201      	adds	r2, #1
 801a3e0:	4296      	cmp	r6, r2
 801a3e2:	d00a      	beq.n	801a3fa <rcl_wait+0x2b2>
 801a3e4:	6a19      	ldr	r1, [r3, #32]
 801a3e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a3ea:	2900      	cmp	r1, #0
 801a3ec:	d1f7      	bne.n	801a3de <rcl_wait+0x296>
 801a3ee:	69a5      	ldr	r5, [r4, #24]
 801a3f0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a3f4:	3201      	adds	r2, #1
 801a3f6:	4296      	cmp	r6, r2
 801a3f8:	d1f4      	bne.n	801a3e4 <rcl_wait+0x29c>
 801a3fa:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	b91e      	cbnz	r6, 801a408 <rcl_wait+0x2c0>
 801a400:	e00d      	b.n	801a41e <rcl_wait+0x2d6>
 801a402:	3201      	adds	r2, #1
 801a404:	42b2      	cmp	r2, r6
 801a406:	d00a      	beq.n	801a41e <rcl_wait+0x2d6>
 801a408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801a40a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a40e:	2900      	cmp	r1, #0
 801a410:	d1f7      	bne.n	801a402 <rcl_wait+0x2ba>
 801a412:	6a25      	ldr	r5, [r4, #32]
 801a414:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a418:	3201      	adds	r2, #1
 801a41a:	42b2      	cmp	r2, r6
 801a41c:	d1f4      	bne.n	801a408 <rcl_wait+0x2c0>
 801a41e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a420:	2200      	movs	r2, #0
 801a422:	b91e      	cbnz	r6, 801a42c <rcl_wait+0x2e4>
 801a424:	e00d      	b.n	801a442 <rcl_wait+0x2fa>
 801a426:	3201      	adds	r2, #1
 801a428:	42b2      	cmp	r2, r6
 801a42a:	d00a      	beq.n	801a442 <rcl_wait+0x2fa>
 801a42c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a42e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a432:	2900      	cmp	r1, #0
 801a434:	d1f7      	bne.n	801a426 <rcl_wait+0x2de>
 801a436:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 801a438:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a43c:	3201      	adds	r2, #1
 801a43e:	42b2      	cmp	r2, r6
 801a440:	d1f4      	bne.n	801a42c <rcl_wait+0x2e4>
 801a442:	f1b8 0f02 	cmp.w	r8, #2
 801a446:	f47f af43 	bne.w	801a2d0 <rcl_wait+0x188>
 801a44a:	f087 0701 	eor.w	r7, r7, #1
 801a44e:	0078      	lsls	r0, r7, #1
 801a450:	e73e      	b.n	801a2d0 <rcl_wait+0x188>
 801a452:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a456:	b019      	add	sp, #100	@ 0x64
 801a458:	ecbd 8b02 	vpop	{d8}
 801a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a460:	ffffffff 	.word	0xffffffff
 801a464:	7fffffff 	.word	0x7fffffff
 801a468:	465f      	mov	r7, fp
 801a46a:	f1b8 0f01 	cmp.w	r8, #1
 801a46e:	f177 0300 	sbcs.w	r3, r7, #0
 801a472:	db3a      	blt.n	801a4ea <rcl_wait+0x3a2>
 801a474:	2601      	movs	r6, #1
 801a476:	ad10      	add	r5, sp, #64	@ 0x40
 801a478:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 801a47c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801a480:	a908      	add	r1, sp, #32
 801a482:	b1a0      	cbz	r0, 801a4ae <rcl_wait+0x366>
 801a484:	f7ff f8ae 	bl	80195e4 <rcl_clock_get_now>
 801a488:	2800      	cmp	r0, #0
 801a48a:	f47f af21 	bne.w	801a2d0 <rcl_wait+0x188>
 801a48e:	9a08      	ldr	r2, [sp, #32]
 801a490:	68ab      	ldr	r3, [r5, #8]
 801a492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a494:	1a9b      	subs	r3, r3, r2
 801a496:	68ea      	ldr	r2, [r5, #12]
 801a498:	eb62 0201 	sbc.w	r2, r2, r1
 801a49c:	4598      	cmp	r8, r3
 801a49e:	eb77 0102 	sbcs.w	r1, r7, r2
 801a4a2:	bfba      	itte	lt
 801a4a4:	4643      	movlt	r3, r8
 801a4a6:	463a      	movlt	r2, r7
 801a4a8:	2601      	movge	r6, #1
 801a4aa:	4698      	mov	r8, r3
 801a4ac:	4617      	mov	r7, r2
 801a4ae:	3508      	adds	r5, #8
 801a4b0:	45a9      	cmp	r9, r5
 801a4b2:	d1e3      	bne.n	801a47c <rcl_wait+0x334>
 801a4b4:	2f00      	cmp	r7, #0
 801a4b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a4b8:	bfab      	itete	ge
 801a4ba:	4640      	movge	r0, r8
 801a4bc:	2000      	movlt	r0, #0
 801a4be:	4639      	movge	r1, r7
 801a4c0:	2100      	movlt	r1, #0
 801a4c2:	2e00      	cmp	r6, #0
 801a4c4:	f43f af24 	beq.w	801a310 <rcl_wait+0x1c8>
 801a4c8:	a30d      	add	r3, pc, #52	@ (adr r3, 801a500 <rcl_wait+0x3b8>)
 801a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ce:	f7e6 fbcb 	bl	8000c68 <__aeabi_ldivmod>
 801a4d2:	ae08      	add	r6, sp, #32
 801a4d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a4d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801a4dc:	e718      	b.n	801a310 <rcl_wait+0x1c8>
 801a4de:	2001      	movs	r0, #1
 801a4e0:	b019      	add	sp, #100	@ 0x64
 801a4e2:	ecbd 8b02 	vpop	{d8}
 801a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ea:	2600      	movs	r6, #0
 801a4ec:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801a4f0:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801a4f4:	e7bf      	b.n	801a476 <rcl_wait+0x32e>
 801a4f6:	200b      	movs	r0, #11
 801a4f8:	4770      	bx	lr
 801a4fa:	bf00      	nop
 801a4fc:	f3af 8000 	nop.w
 801a500:	3b9aca00 	.word	0x3b9aca00
 801a504:	00000000 	.word	0x00000000

0801a508 <rcl_action_take_goal_response>:
 801a508:	b3b0      	cbz	r0, 801a578 <rcl_action_take_goal_response+0x70>
 801a50a:	b570      	push	{r4, r5, r6, lr}
 801a50c:	4604      	mov	r4, r0
 801a50e:	6800      	ldr	r0, [r0, #0]
 801a510:	b368      	cbz	r0, 801a56e <rcl_action_take_goal_response+0x66>
 801a512:	460d      	mov	r5, r1
 801a514:	4616      	mov	r6, r2
 801a516:	f7fe f9cf 	bl	80188b8 <rcl_client_is_valid>
 801a51a:	b330      	cbz	r0, 801a56a <rcl_action_take_goal_response+0x62>
 801a51c:	6820      	ldr	r0, [r4, #0]
 801a51e:	3004      	adds	r0, #4
 801a520:	f7fe f9ca 	bl	80188b8 <rcl_client_is_valid>
 801a524:	b308      	cbz	r0, 801a56a <rcl_action_take_goal_response+0x62>
 801a526:	6820      	ldr	r0, [r4, #0]
 801a528:	3008      	adds	r0, #8
 801a52a:	f7fe f9c5 	bl	80188b8 <rcl_client_is_valid>
 801a52e:	b1e0      	cbz	r0, 801a56a <rcl_action_take_goal_response+0x62>
 801a530:	6820      	ldr	r0, [r4, #0]
 801a532:	300c      	adds	r0, #12
 801a534:	f7f5 f906 	bl	800f744 <rcl_subscription_is_valid>
 801a538:	b1b8      	cbz	r0, 801a56a <rcl_action_take_goal_response+0x62>
 801a53a:	6820      	ldr	r0, [r4, #0]
 801a53c:	3010      	adds	r0, #16
 801a53e:	f7f5 f901 	bl	800f744 <rcl_subscription_is_valid>
 801a542:	b190      	cbz	r0, 801a56a <rcl_action_take_goal_response+0x62>
 801a544:	b1b5      	cbz	r5, 801a574 <rcl_action_take_goal_response+0x6c>
 801a546:	b1ae      	cbz	r6, 801a574 <rcl_action_take_goal_response+0x6c>
 801a548:	6820      	ldr	r0, [r4, #0]
 801a54a:	4632      	mov	r2, r6
 801a54c:	4629      	mov	r1, r5
 801a54e:	f7fe f947 	bl	80187e0 <rcl_take_response>
 801a552:	b148      	cbz	r0, 801a568 <rcl_action_take_goal_response+0x60>
 801a554:	280a      	cmp	r0, #10
 801a556:	d007      	beq.n	801a568 <rcl_action_take_goal_response+0x60>
 801a558:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a55c:	f640 0337 	movw	r3, #2103	@ 0x837
 801a560:	4290      	cmp	r0, r2
 801a562:	bf0c      	ite	eq
 801a564:	4618      	moveq	r0, r3
 801a566:	2001      	movne	r0, #1
 801a568:	bd70      	pop	{r4, r5, r6, pc}
 801a56a:	f7f6 fbd9 	bl	8010d20 <rcutils_reset_error>
 801a56e:	f640 0036 	movw	r0, #2102	@ 0x836
 801a572:	bd70      	pop	{r4, r5, r6, pc}
 801a574:	200b      	movs	r0, #11
 801a576:	bd70      	pop	{r4, r5, r6, pc}
 801a578:	f640 0036 	movw	r0, #2102	@ 0x836
 801a57c:	4770      	bx	lr
 801a57e:	bf00      	nop

0801a580 <rcl_action_send_result_request>:
 801a580:	b378      	cbz	r0, 801a5e2 <rcl_action_send_result_request+0x62>
 801a582:	b570      	push	{r4, r5, r6, lr}
 801a584:	4604      	mov	r4, r0
 801a586:	6800      	ldr	r0, [r0, #0]
 801a588:	b330      	cbz	r0, 801a5d8 <rcl_action_send_result_request+0x58>
 801a58a:	460d      	mov	r5, r1
 801a58c:	4616      	mov	r6, r2
 801a58e:	f7fe f993 	bl	80188b8 <rcl_client_is_valid>
 801a592:	b1f8      	cbz	r0, 801a5d4 <rcl_action_send_result_request+0x54>
 801a594:	6820      	ldr	r0, [r4, #0]
 801a596:	3004      	adds	r0, #4
 801a598:	f7fe f98e 	bl	80188b8 <rcl_client_is_valid>
 801a59c:	b1d0      	cbz	r0, 801a5d4 <rcl_action_send_result_request+0x54>
 801a59e:	6820      	ldr	r0, [r4, #0]
 801a5a0:	3008      	adds	r0, #8
 801a5a2:	f7fe f989 	bl	80188b8 <rcl_client_is_valid>
 801a5a6:	b1a8      	cbz	r0, 801a5d4 <rcl_action_send_result_request+0x54>
 801a5a8:	6820      	ldr	r0, [r4, #0]
 801a5aa:	300c      	adds	r0, #12
 801a5ac:	f7f5 f8ca 	bl	800f744 <rcl_subscription_is_valid>
 801a5b0:	b180      	cbz	r0, 801a5d4 <rcl_action_send_result_request+0x54>
 801a5b2:	6820      	ldr	r0, [r4, #0]
 801a5b4:	3010      	adds	r0, #16
 801a5b6:	f7f5 f8c5 	bl	800f744 <rcl_subscription_is_valid>
 801a5ba:	b158      	cbz	r0, 801a5d4 <rcl_action_send_result_request+0x54>
 801a5bc:	b17d      	cbz	r5, 801a5de <rcl_action_send_result_request+0x5e>
 801a5be:	b176      	cbz	r6, 801a5de <rcl_action_send_result_request+0x5e>
 801a5c0:	6820      	ldr	r0, [r4, #0]
 801a5c2:	4632      	mov	r2, r6
 801a5c4:	4629      	mov	r1, r5
 801a5c6:	3008      	adds	r0, #8
 801a5c8:	f7fe f8b8 	bl	801873c <rcl_send_request>
 801a5cc:	3800      	subs	r0, #0
 801a5ce:	bf18      	it	ne
 801a5d0:	2001      	movne	r0, #1
 801a5d2:	bd70      	pop	{r4, r5, r6, pc}
 801a5d4:	f7f6 fba4 	bl	8010d20 <rcutils_reset_error>
 801a5d8:	f640 0036 	movw	r0, #2102	@ 0x836
 801a5dc:	bd70      	pop	{r4, r5, r6, pc}
 801a5de:	200b      	movs	r0, #11
 801a5e0:	bd70      	pop	{r4, r5, r6, pc}
 801a5e2:	f640 0036 	movw	r0, #2102	@ 0x836
 801a5e6:	4770      	bx	lr

0801a5e8 <rcl_action_take_result_response>:
 801a5e8:	2800      	cmp	r0, #0
 801a5ea:	d037      	beq.n	801a65c <rcl_action_take_result_response+0x74>
 801a5ec:	b570      	push	{r4, r5, r6, lr}
 801a5ee:	4604      	mov	r4, r0
 801a5f0:	6800      	ldr	r0, [r0, #0]
 801a5f2:	b370      	cbz	r0, 801a652 <rcl_action_take_result_response+0x6a>
 801a5f4:	460d      	mov	r5, r1
 801a5f6:	4616      	mov	r6, r2
 801a5f8:	f7fe f95e 	bl	80188b8 <rcl_client_is_valid>
 801a5fc:	b338      	cbz	r0, 801a64e <rcl_action_take_result_response+0x66>
 801a5fe:	6820      	ldr	r0, [r4, #0]
 801a600:	3004      	adds	r0, #4
 801a602:	f7fe f959 	bl	80188b8 <rcl_client_is_valid>
 801a606:	b310      	cbz	r0, 801a64e <rcl_action_take_result_response+0x66>
 801a608:	6820      	ldr	r0, [r4, #0]
 801a60a:	3008      	adds	r0, #8
 801a60c:	f7fe f954 	bl	80188b8 <rcl_client_is_valid>
 801a610:	b1e8      	cbz	r0, 801a64e <rcl_action_take_result_response+0x66>
 801a612:	6820      	ldr	r0, [r4, #0]
 801a614:	300c      	adds	r0, #12
 801a616:	f7f5 f895 	bl	800f744 <rcl_subscription_is_valid>
 801a61a:	b1c0      	cbz	r0, 801a64e <rcl_action_take_result_response+0x66>
 801a61c:	6820      	ldr	r0, [r4, #0]
 801a61e:	3010      	adds	r0, #16
 801a620:	f7f5 f890 	bl	800f744 <rcl_subscription_is_valid>
 801a624:	b198      	cbz	r0, 801a64e <rcl_action_take_result_response+0x66>
 801a626:	b1bd      	cbz	r5, 801a658 <rcl_action_take_result_response+0x70>
 801a628:	b1b6      	cbz	r6, 801a658 <rcl_action_take_result_response+0x70>
 801a62a:	6820      	ldr	r0, [r4, #0]
 801a62c:	4632      	mov	r2, r6
 801a62e:	4629      	mov	r1, r5
 801a630:	3008      	adds	r0, #8
 801a632:	f7fe f8d5 	bl	80187e0 <rcl_take_response>
 801a636:	b148      	cbz	r0, 801a64c <rcl_action_take_result_response+0x64>
 801a638:	280a      	cmp	r0, #10
 801a63a:	d007      	beq.n	801a64c <rcl_action_take_result_response+0x64>
 801a63c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a640:	f640 0337 	movw	r3, #2103	@ 0x837
 801a644:	4290      	cmp	r0, r2
 801a646:	bf0c      	ite	eq
 801a648:	4618      	moveq	r0, r3
 801a64a:	2001      	movne	r0, #1
 801a64c:	bd70      	pop	{r4, r5, r6, pc}
 801a64e:	f7f6 fb67 	bl	8010d20 <rcutils_reset_error>
 801a652:	f640 0036 	movw	r0, #2102	@ 0x836
 801a656:	bd70      	pop	{r4, r5, r6, pc}
 801a658:	200b      	movs	r0, #11
 801a65a:	bd70      	pop	{r4, r5, r6, pc}
 801a65c:	f640 0036 	movw	r0, #2102	@ 0x836
 801a660:	4770      	bx	lr
 801a662:	bf00      	nop

0801a664 <rcl_action_take_cancel_response>:
 801a664:	2800      	cmp	r0, #0
 801a666:	d037      	beq.n	801a6d8 <rcl_action_take_cancel_response+0x74>
 801a668:	b570      	push	{r4, r5, r6, lr}
 801a66a:	4604      	mov	r4, r0
 801a66c:	6800      	ldr	r0, [r0, #0]
 801a66e:	b370      	cbz	r0, 801a6ce <rcl_action_take_cancel_response+0x6a>
 801a670:	460d      	mov	r5, r1
 801a672:	4616      	mov	r6, r2
 801a674:	f7fe f920 	bl	80188b8 <rcl_client_is_valid>
 801a678:	b338      	cbz	r0, 801a6ca <rcl_action_take_cancel_response+0x66>
 801a67a:	6820      	ldr	r0, [r4, #0]
 801a67c:	3004      	adds	r0, #4
 801a67e:	f7fe f91b 	bl	80188b8 <rcl_client_is_valid>
 801a682:	b310      	cbz	r0, 801a6ca <rcl_action_take_cancel_response+0x66>
 801a684:	6820      	ldr	r0, [r4, #0]
 801a686:	3008      	adds	r0, #8
 801a688:	f7fe f916 	bl	80188b8 <rcl_client_is_valid>
 801a68c:	b1e8      	cbz	r0, 801a6ca <rcl_action_take_cancel_response+0x66>
 801a68e:	6820      	ldr	r0, [r4, #0]
 801a690:	300c      	adds	r0, #12
 801a692:	f7f5 f857 	bl	800f744 <rcl_subscription_is_valid>
 801a696:	b1c0      	cbz	r0, 801a6ca <rcl_action_take_cancel_response+0x66>
 801a698:	6820      	ldr	r0, [r4, #0]
 801a69a:	3010      	adds	r0, #16
 801a69c:	f7f5 f852 	bl	800f744 <rcl_subscription_is_valid>
 801a6a0:	b198      	cbz	r0, 801a6ca <rcl_action_take_cancel_response+0x66>
 801a6a2:	b1bd      	cbz	r5, 801a6d4 <rcl_action_take_cancel_response+0x70>
 801a6a4:	b1b6      	cbz	r6, 801a6d4 <rcl_action_take_cancel_response+0x70>
 801a6a6:	6820      	ldr	r0, [r4, #0]
 801a6a8:	4632      	mov	r2, r6
 801a6aa:	4629      	mov	r1, r5
 801a6ac:	3004      	adds	r0, #4
 801a6ae:	f7fe f897 	bl	80187e0 <rcl_take_response>
 801a6b2:	b148      	cbz	r0, 801a6c8 <rcl_action_take_cancel_response+0x64>
 801a6b4:	280a      	cmp	r0, #10
 801a6b6:	d007      	beq.n	801a6c8 <rcl_action_take_cancel_response+0x64>
 801a6b8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a6bc:	f640 0337 	movw	r3, #2103	@ 0x837
 801a6c0:	4290      	cmp	r0, r2
 801a6c2:	bf0c      	ite	eq
 801a6c4:	4618      	moveq	r0, r3
 801a6c6:	2001      	movne	r0, #1
 801a6c8:	bd70      	pop	{r4, r5, r6, pc}
 801a6ca:	f7f6 fb29 	bl	8010d20 <rcutils_reset_error>
 801a6ce:	f640 0036 	movw	r0, #2102	@ 0x836
 801a6d2:	bd70      	pop	{r4, r5, r6, pc}
 801a6d4:	200b      	movs	r0, #11
 801a6d6:	bd70      	pop	{r4, r5, r6, pc}
 801a6d8:	f640 0036 	movw	r0, #2102	@ 0x836
 801a6dc:	4770      	bx	lr
 801a6de:	bf00      	nop

0801a6e0 <rcl_action_take_feedback>:
 801a6e0:	2800      	cmp	r0, #0
 801a6e2:	d037      	beq.n	801a754 <rcl_action_take_feedback+0x74>
 801a6e4:	b530      	push	{r4, r5, lr}
 801a6e6:	4604      	mov	r4, r0
 801a6e8:	6800      	ldr	r0, [r0, #0]
 801a6ea:	b08f      	sub	sp, #60	@ 0x3c
 801a6ec:	b358      	cbz	r0, 801a746 <rcl_action_take_feedback+0x66>
 801a6ee:	460d      	mov	r5, r1
 801a6f0:	f7fe f8e2 	bl	80188b8 <rcl_client_is_valid>
 801a6f4:	b328      	cbz	r0, 801a742 <rcl_action_take_feedback+0x62>
 801a6f6:	6820      	ldr	r0, [r4, #0]
 801a6f8:	3004      	adds	r0, #4
 801a6fa:	f7fe f8dd 	bl	80188b8 <rcl_client_is_valid>
 801a6fe:	b300      	cbz	r0, 801a742 <rcl_action_take_feedback+0x62>
 801a700:	6820      	ldr	r0, [r4, #0]
 801a702:	3008      	adds	r0, #8
 801a704:	f7fe f8d8 	bl	80188b8 <rcl_client_is_valid>
 801a708:	b1d8      	cbz	r0, 801a742 <rcl_action_take_feedback+0x62>
 801a70a:	6820      	ldr	r0, [r4, #0]
 801a70c:	300c      	adds	r0, #12
 801a70e:	f7f5 f819 	bl	800f744 <rcl_subscription_is_valid>
 801a712:	b1b0      	cbz	r0, 801a742 <rcl_action_take_feedback+0x62>
 801a714:	6820      	ldr	r0, [r4, #0]
 801a716:	3010      	adds	r0, #16
 801a718:	f7f5 f814 	bl	800f744 <rcl_subscription_is_valid>
 801a71c:	b188      	cbz	r0, 801a742 <rcl_action_take_feedback+0x62>
 801a71e:	b1b5      	cbz	r5, 801a74e <rcl_action_take_feedback+0x6e>
 801a720:	6820      	ldr	r0, [r4, #0]
 801a722:	2300      	movs	r3, #0
 801a724:	466a      	mov	r2, sp
 801a726:	4629      	mov	r1, r5
 801a728:	300c      	adds	r0, #12
 801a72a:	f7f4 ffad 	bl	800f688 <rcl_take>
 801a72e:	b160      	cbz	r0, 801a74a <rcl_action_take_feedback+0x6a>
 801a730:	f240 1391 	movw	r3, #401	@ 0x191
 801a734:	4298      	cmp	r0, r3
 801a736:	d010      	beq.n	801a75a <rcl_action_take_feedback+0x7a>
 801a738:	280a      	cmp	r0, #10
 801a73a:	bf18      	it	ne
 801a73c:	2001      	movne	r0, #1
 801a73e:	b00f      	add	sp, #60	@ 0x3c
 801a740:	bd30      	pop	{r4, r5, pc}
 801a742:	f7f6 faed 	bl	8010d20 <rcutils_reset_error>
 801a746:	f640 0036 	movw	r0, #2102	@ 0x836
 801a74a:	b00f      	add	sp, #60	@ 0x3c
 801a74c:	bd30      	pop	{r4, r5, pc}
 801a74e:	200b      	movs	r0, #11
 801a750:	b00f      	add	sp, #60	@ 0x3c
 801a752:	bd30      	pop	{r4, r5, pc}
 801a754:	f640 0036 	movw	r0, #2102	@ 0x836
 801a758:	4770      	bx	lr
 801a75a:	f640 0037 	movw	r0, #2103	@ 0x837
 801a75e:	e7f4      	b.n	801a74a <rcl_action_take_feedback+0x6a>

0801a760 <rcl_action_wait_set_add_action_client>:
 801a760:	2800      	cmp	r0, #0
 801a762:	d045      	beq.n	801a7f0 <rcl_action_wait_set_add_action_client+0x90>
 801a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a766:	460c      	mov	r4, r1
 801a768:	2900      	cmp	r1, #0
 801a76a:	d03e      	beq.n	801a7ea <rcl_action_wait_set_add_action_client+0x8a>
 801a76c:	4605      	mov	r5, r0
 801a76e:	6808      	ldr	r0, [r1, #0]
 801a770:	2800      	cmp	r0, #0
 801a772:	d03a      	beq.n	801a7ea <rcl_action_wait_set_add_action_client+0x8a>
 801a774:	4617      	mov	r7, r2
 801a776:	461e      	mov	r6, r3
 801a778:	f7fe f89e 	bl	80188b8 <rcl_client_is_valid>
 801a77c:	b398      	cbz	r0, 801a7e6 <rcl_action_wait_set_add_action_client+0x86>
 801a77e:	6820      	ldr	r0, [r4, #0]
 801a780:	3004      	adds	r0, #4
 801a782:	f7fe f899 	bl	80188b8 <rcl_client_is_valid>
 801a786:	b370      	cbz	r0, 801a7e6 <rcl_action_wait_set_add_action_client+0x86>
 801a788:	6820      	ldr	r0, [r4, #0]
 801a78a:	3008      	adds	r0, #8
 801a78c:	f7fe f894 	bl	80188b8 <rcl_client_is_valid>
 801a790:	b348      	cbz	r0, 801a7e6 <rcl_action_wait_set_add_action_client+0x86>
 801a792:	6820      	ldr	r0, [r4, #0]
 801a794:	300c      	adds	r0, #12
 801a796:	f7f4 ffd5 	bl	800f744 <rcl_subscription_is_valid>
 801a79a:	b320      	cbz	r0, 801a7e6 <rcl_action_wait_set_add_action_client+0x86>
 801a79c:	6820      	ldr	r0, [r4, #0]
 801a79e:	3010      	adds	r0, #16
 801a7a0:	f7f4 ffd0 	bl	800f744 <rcl_subscription_is_valid>
 801a7a4:	b1f8      	cbz	r0, 801a7e6 <rcl_action_wait_set_add_action_client+0x86>
 801a7a6:	6821      	ldr	r1, [r4, #0]
 801a7a8:	4628      	mov	r0, r5
 801a7aa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801a7ae:	f7ff fc73 	bl	801a098 <rcl_wait_set_add_client>
 801a7b2:	b9b8      	cbnz	r0, 801a7e4 <rcl_action_wait_set_add_action_client+0x84>
 801a7b4:	6821      	ldr	r1, [r4, #0]
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801a7bc:	3104      	adds	r1, #4
 801a7be:	f7ff fc6b 	bl	801a098 <rcl_wait_set_add_client>
 801a7c2:	b978      	cbnz	r0, 801a7e4 <rcl_action_wait_set_add_action_client+0x84>
 801a7c4:	6821      	ldr	r1, [r4, #0]
 801a7c6:	4628      	mov	r0, r5
 801a7c8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801a7cc:	3108      	adds	r1, #8
 801a7ce:	f7ff fc63 	bl	801a098 <rcl_wait_set_add_client>
 801a7d2:	b938      	cbnz	r0, 801a7e4 <rcl_action_wait_set_add_action_client+0x84>
 801a7d4:	6821      	ldr	r1, [r4, #0]
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801a7dc:	310c      	adds	r1, #12
 801a7de:	f7ff f8fb 	bl	80199d8 <rcl_wait_set_add_subscription>
 801a7e2:	b140      	cbz	r0, 801a7f6 <rcl_action_wait_set_add_action_client+0x96>
 801a7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7e6:	f7f6 fa9b 	bl	8010d20 <rcutils_reset_error>
 801a7ea:	f640 0036 	movw	r0, #2102	@ 0x836
 801a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a7f4:	4770      	bx	lr
 801a7f6:	6821      	ldr	r1, [r4, #0]
 801a7f8:	4628      	mov	r0, r5
 801a7fa:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801a7fe:	3110      	adds	r1, #16
 801a800:	f7ff f8ea 	bl	80199d8 <rcl_wait_set_add_subscription>
 801a804:	2800      	cmp	r0, #0
 801a806:	d1ed      	bne.n	801a7e4 <rcl_action_wait_set_add_action_client+0x84>
 801a808:	b11f      	cbz	r7, 801a812 <rcl_action_wait_set_add_action_client+0xb2>
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801a810:	603b      	str	r3, [r7, #0]
 801a812:	2e00      	cmp	r6, #0
 801a814:	d0e6      	beq.n	801a7e4 <rcl_action_wait_set_add_action_client+0x84>
 801a816:	6823      	ldr	r3, [r4, #0]
 801a818:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801a81c:	6033      	str	r3, [r6, #0]
 801a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a820 <rcl_action_client_wait_set_get_entities_ready>:
 801a820:	2800      	cmp	r0, #0
 801a822:	f000 8089 	beq.w	801a938 <rcl_action_client_wait_set_get_entities_ready+0x118>
 801a826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a82a:	460c      	mov	r4, r1
 801a82c:	2900      	cmp	r1, #0
 801a82e:	d079      	beq.n	801a924 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801a830:	4605      	mov	r5, r0
 801a832:	6808      	ldr	r0, [r1, #0]
 801a834:	2800      	cmp	r0, #0
 801a836:	d075      	beq.n	801a924 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801a838:	4616      	mov	r6, r2
 801a83a:	461f      	mov	r7, r3
 801a83c:	f7fe f83c 	bl	80188b8 <rcl_client_is_valid>
 801a840:	2800      	cmp	r0, #0
 801a842:	d06d      	beq.n	801a920 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a844:	6820      	ldr	r0, [r4, #0]
 801a846:	3004      	adds	r0, #4
 801a848:	f7fe f836 	bl	80188b8 <rcl_client_is_valid>
 801a84c:	2800      	cmp	r0, #0
 801a84e:	d067      	beq.n	801a920 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a850:	6820      	ldr	r0, [r4, #0]
 801a852:	3008      	adds	r0, #8
 801a854:	f7fe f830 	bl	80188b8 <rcl_client_is_valid>
 801a858:	2800      	cmp	r0, #0
 801a85a:	d061      	beq.n	801a920 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a85c:	6820      	ldr	r0, [r4, #0]
 801a85e:	300c      	adds	r0, #12
 801a860:	f7f4 ff70 	bl	800f744 <rcl_subscription_is_valid>
 801a864:	2800      	cmp	r0, #0
 801a866:	d05b      	beq.n	801a920 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a868:	6820      	ldr	r0, [r4, #0]
 801a86a:	3010      	adds	r0, #16
 801a86c:	f7f4 ff6a 	bl	800f744 <rcl_subscription_is_valid>
 801a870:	2800      	cmp	r0, #0
 801a872:	d055      	beq.n	801a920 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a874:	2e00      	cmp	r6, #0
 801a876:	d05c      	beq.n	801a932 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a878:	2f00      	cmp	r7, #0
 801a87a:	d05a      	beq.n	801a932 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a87c:	9b06      	ldr	r3, [sp, #24]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d057      	beq.n	801a932 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a882:	9b07      	ldr	r3, [sp, #28]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d054      	beq.n	801a932 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a888:	9b08      	ldr	r3, [sp, #32]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d051      	beq.n	801a932 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a88e:	6823      	ldr	r3, [r4, #0]
 801a890:	686a      	ldr	r2, [r5, #4]
 801a892:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801a896:	428a      	cmp	r2, r1
 801a898:	d948      	bls.n	801a92c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a89a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801a89e:	4282      	cmp	r2, r0
 801a8a0:	d944      	bls.n	801a92c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a8a2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801a8a6:	69ea      	ldr	r2, [r5, #28]
 801a8a8:	42a2      	cmp	r2, r4
 801a8aa:	d93f      	bls.n	801a92c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a8ac:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 801a8b0:	4562      	cmp	r2, ip
 801a8b2:	d93b      	bls.n	801a92c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a8b4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 801a8b8:	4572      	cmp	r2, lr
 801a8ba:	d937      	bls.n	801a92c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a8bc:	69aa      	ldr	r2, [r5, #24]
 801a8be:	682d      	ldr	r5, [r5, #0]
 801a8c0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801a8c4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801a8c8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801a8cc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 801a8d0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801a8d4:	f103 0c0c 	add.w	ip, r3, #12
 801a8d8:	eba5 050c 	sub.w	r5, r5, ip
 801a8dc:	fab5 f585 	clz	r5, r5
 801a8e0:	096d      	lsrs	r5, r5, #5
 801a8e2:	7035      	strb	r5, [r6, #0]
 801a8e4:	f103 0510 	add.w	r5, r3, #16
 801a8e8:	1b64      	subs	r4, r4, r5
 801a8ea:	fab4 f484 	clz	r4, r4
 801a8ee:	0964      	lsrs	r4, r4, #5
 801a8f0:	703c      	strb	r4, [r7, #0]
 801a8f2:	eba3 0008 	sub.w	r0, r3, r8
 801a8f6:	1d1c      	adds	r4, r3, #4
 801a8f8:	3308      	adds	r3, #8
 801a8fa:	1ad3      	subs	r3, r2, r3
 801a8fc:	fab0 f080 	clz	r0, r0
 801a900:	9a06      	ldr	r2, [sp, #24]
 801a902:	0940      	lsrs	r0, r0, #5
 801a904:	1b09      	subs	r1, r1, r4
 801a906:	7010      	strb	r0, [r2, #0]
 801a908:	fab1 f181 	clz	r1, r1
 801a90c:	9a07      	ldr	r2, [sp, #28]
 801a90e:	0949      	lsrs	r1, r1, #5
 801a910:	7011      	strb	r1, [r2, #0]
 801a912:	fab3 f383 	clz	r3, r3
 801a916:	9a08      	ldr	r2, [sp, #32]
 801a918:	095b      	lsrs	r3, r3, #5
 801a91a:	2000      	movs	r0, #0
 801a91c:	7013      	strb	r3, [r2, #0]
 801a91e:	e003      	b.n	801a928 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801a920:	f7f6 f9fe 	bl	8010d20 <rcutils_reset_error>
 801a924:	f640 0036 	movw	r0, #2102	@ 0x836
 801a928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a92c:	2001      	movs	r0, #1
 801a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a932:	200b      	movs	r0, #11
 801a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a938:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a93c:	4770      	bx	lr
 801a93e:	bf00      	nop

0801a940 <rcl_action_take_goal_request>:
 801a940:	b3b0      	cbz	r0, 801a9b0 <rcl_action_take_goal_request+0x70>
 801a942:	b570      	push	{r4, r5, r6, lr}
 801a944:	4604      	mov	r4, r0
 801a946:	6800      	ldr	r0, [r0, #0]
 801a948:	b368      	cbz	r0, 801a9a6 <rcl_action_take_goal_request+0x66>
 801a94a:	460d      	mov	r5, r1
 801a94c:	4616      	mov	r6, r2
 801a94e:	f7fe fcf5 	bl	801933c <rcl_service_is_valid>
 801a952:	b330      	cbz	r0, 801a9a2 <rcl_action_take_goal_request+0x62>
 801a954:	6820      	ldr	r0, [r4, #0]
 801a956:	3004      	adds	r0, #4
 801a958:	f7fe fcf0 	bl	801933c <rcl_service_is_valid>
 801a95c:	b308      	cbz	r0, 801a9a2 <rcl_action_take_goal_request+0x62>
 801a95e:	6820      	ldr	r0, [r4, #0]
 801a960:	3008      	adds	r0, #8
 801a962:	f7fe fceb 	bl	801933c <rcl_service_is_valid>
 801a966:	b1e0      	cbz	r0, 801a9a2 <rcl_action_take_goal_request+0x62>
 801a968:	6820      	ldr	r0, [r4, #0]
 801a96a:	300c      	adds	r0, #12
 801a96c:	f7f4 fd3a 	bl	800f3e4 <rcl_publisher_is_valid>
 801a970:	b1b8      	cbz	r0, 801a9a2 <rcl_action_take_goal_request+0x62>
 801a972:	6820      	ldr	r0, [r4, #0]
 801a974:	3010      	adds	r0, #16
 801a976:	f7f4 fd35 	bl	800f3e4 <rcl_publisher_is_valid>
 801a97a:	b190      	cbz	r0, 801a9a2 <rcl_action_take_goal_request+0x62>
 801a97c:	b1b5      	cbz	r5, 801a9ac <rcl_action_take_goal_request+0x6c>
 801a97e:	b1ae      	cbz	r6, 801a9ac <rcl_action_take_goal_request+0x6c>
 801a980:	6820      	ldr	r0, [r4, #0]
 801a982:	4632      	mov	r2, r6
 801a984:	4629      	mov	r1, r5
 801a986:	f7fe fc59 	bl	801923c <rcl_take_request>
 801a98a:	b148      	cbz	r0, 801a9a0 <rcl_action_take_goal_request+0x60>
 801a98c:	280a      	cmp	r0, #10
 801a98e:	d007      	beq.n	801a9a0 <rcl_action_take_goal_request+0x60>
 801a990:	f240 2259 	movw	r2, #601	@ 0x259
 801a994:	f640 0399 	movw	r3, #2201	@ 0x899
 801a998:	4290      	cmp	r0, r2
 801a99a:	bf0c      	ite	eq
 801a99c:	4618      	moveq	r0, r3
 801a99e:	2001      	movne	r0, #1
 801a9a0:	bd70      	pop	{r4, r5, r6, pc}
 801a9a2:	f7f6 f9bd 	bl	8010d20 <rcutils_reset_error>
 801a9a6:	f640 0098 	movw	r0, #2200	@ 0x898
 801a9aa:	bd70      	pop	{r4, r5, r6, pc}
 801a9ac:	200b      	movs	r0, #11
 801a9ae:	bd70      	pop	{r4, r5, r6, pc}
 801a9b0:	f640 0098 	movw	r0, #2200	@ 0x898
 801a9b4:	4770      	bx	lr
 801a9b6:	bf00      	nop

0801a9b8 <rcl_action_send_goal_response>:
 801a9b8:	b378      	cbz	r0, 801aa1a <rcl_action_send_goal_response+0x62>
 801a9ba:	b570      	push	{r4, r5, r6, lr}
 801a9bc:	4604      	mov	r4, r0
 801a9be:	6800      	ldr	r0, [r0, #0]
 801a9c0:	b330      	cbz	r0, 801aa10 <rcl_action_send_goal_response+0x58>
 801a9c2:	460d      	mov	r5, r1
 801a9c4:	4616      	mov	r6, r2
 801a9c6:	f7fe fcb9 	bl	801933c <rcl_service_is_valid>
 801a9ca:	b1f8      	cbz	r0, 801aa0c <rcl_action_send_goal_response+0x54>
 801a9cc:	6820      	ldr	r0, [r4, #0]
 801a9ce:	3004      	adds	r0, #4
 801a9d0:	f7fe fcb4 	bl	801933c <rcl_service_is_valid>
 801a9d4:	b1d0      	cbz	r0, 801aa0c <rcl_action_send_goal_response+0x54>
 801a9d6:	6820      	ldr	r0, [r4, #0]
 801a9d8:	3008      	adds	r0, #8
 801a9da:	f7fe fcaf 	bl	801933c <rcl_service_is_valid>
 801a9de:	b1a8      	cbz	r0, 801aa0c <rcl_action_send_goal_response+0x54>
 801a9e0:	6820      	ldr	r0, [r4, #0]
 801a9e2:	300c      	adds	r0, #12
 801a9e4:	f7f4 fcfe 	bl	800f3e4 <rcl_publisher_is_valid>
 801a9e8:	b180      	cbz	r0, 801aa0c <rcl_action_send_goal_response+0x54>
 801a9ea:	6820      	ldr	r0, [r4, #0]
 801a9ec:	3010      	adds	r0, #16
 801a9ee:	f7f4 fcf9 	bl	800f3e4 <rcl_publisher_is_valid>
 801a9f2:	b158      	cbz	r0, 801aa0c <rcl_action_send_goal_response+0x54>
 801a9f4:	b17d      	cbz	r5, 801aa16 <rcl_action_send_goal_response+0x5e>
 801a9f6:	b176      	cbz	r6, 801aa16 <rcl_action_send_goal_response+0x5e>
 801a9f8:	6820      	ldr	r0, [r4, #0]
 801a9fa:	4632      	mov	r2, r6
 801a9fc:	4629      	mov	r1, r5
 801a9fe:	f7fe fc6d 	bl	80192dc <rcl_send_response>
 801aa02:	b110      	cbz	r0, 801aa0a <rcl_action_send_goal_response+0x52>
 801aa04:	2802      	cmp	r0, #2
 801aa06:	bf18      	it	ne
 801aa08:	2001      	movne	r0, #1
 801aa0a:	bd70      	pop	{r4, r5, r6, pc}
 801aa0c:	f7f6 f988 	bl	8010d20 <rcutils_reset_error>
 801aa10:	f640 0098 	movw	r0, #2200	@ 0x898
 801aa14:	bd70      	pop	{r4, r5, r6, pc}
 801aa16:	200b      	movs	r0, #11
 801aa18:	bd70      	pop	{r4, r5, r6, pc}
 801aa1a:	f640 0098 	movw	r0, #2200	@ 0x898
 801aa1e:	4770      	bx	lr

0801aa20 <rcl_action_take_result_request>:
 801aa20:	2800      	cmp	r0, #0
 801aa22:	d037      	beq.n	801aa94 <rcl_action_take_result_request+0x74>
 801aa24:	b570      	push	{r4, r5, r6, lr}
 801aa26:	4604      	mov	r4, r0
 801aa28:	6800      	ldr	r0, [r0, #0]
 801aa2a:	b370      	cbz	r0, 801aa8a <rcl_action_take_result_request+0x6a>
 801aa2c:	460d      	mov	r5, r1
 801aa2e:	4616      	mov	r6, r2
 801aa30:	f7fe fc84 	bl	801933c <rcl_service_is_valid>
 801aa34:	b338      	cbz	r0, 801aa86 <rcl_action_take_result_request+0x66>
 801aa36:	6820      	ldr	r0, [r4, #0]
 801aa38:	3004      	adds	r0, #4
 801aa3a:	f7fe fc7f 	bl	801933c <rcl_service_is_valid>
 801aa3e:	b310      	cbz	r0, 801aa86 <rcl_action_take_result_request+0x66>
 801aa40:	6820      	ldr	r0, [r4, #0]
 801aa42:	3008      	adds	r0, #8
 801aa44:	f7fe fc7a 	bl	801933c <rcl_service_is_valid>
 801aa48:	b1e8      	cbz	r0, 801aa86 <rcl_action_take_result_request+0x66>
 801aa4a:	6820      	ldr	r0, [r4, #0]
 801aa4c:	300c      	adds	r0, #12
 801aa4e:	f7f4 fcc9 	bl	800f3e4 <rcl_publisher_is_valid>
 801aa52:	b1c0      	cbz	r0, 801aa86 <rcl_action_take_result_request+0x66>
 801aa54:	6820      	ldr	r0, [r4, #0]
 801aa56:	3010      	adds	r0, #16
 801aa58:	f7f4 fcc4 	bl	800f3e4 <rcl_publisher_is_valid>
 801aa5c:	b198      	cbz	r0, 801aa86 <rcl_action_take_result_request+0x66>
 801aa5e:	b1bd      	cbz	r5, 801aa90 <rcl_action_take_result_request+0x70>
 801aa60:	b1b6      	cbz	r6, 801aa90 <rcl_action_take_result_request+0x70>
 801aa62:	6820      	ldr	r0, [r4, #0]
 801aa64:	4632      	mov	r2, r6
 801aa66:	4629      	mov	r1, r5
 801aa68:	3008      	adds	r0, #8
 801aa6a:	f7fe fbe7 	bl	801923c <rcl_take_request>
 801aa6e:	b148      	cbz	r0, 801aa84 <rcl_action_take_result_request+0x64>
 801aa70:	280a      	cmp	r0, #10
 801aa72:	d007      	beq.n	801aa84 <rcl_action_take_result_request+0x64>
 801aa74:	f240 2259 	movw	r2, #601	@ 0x259
 801aa78:	f640 0399 	movw	r3, #2201	@ 0x899
 801aa7c:	4290      	cmp	r0, r2
 801aa7e:	bf0c      	ite	eq
 801aa80:	4618      	moveq	r0, r3
 801aa82:	2001      	movne	r0, #1
 801aa84:	bd70      	pop	{r4, r5, r6, pc}
 801aa86:	f7f6 f94b 	bl	8010d20 <rcutils_reset_error>
 801aa8a:	f640 0098 	movw	r0, #2200	@ 0x898
 801aa8e:	bd70      	pop	{r4, r5, r6, pc}
 801aa90:	200b      	movs	r0, #11
 801aa92:	bd70      	pop	{r4, r5, r6, pc}
 801aa94:	f640 0098 	movw	r0, #2200	@ 0x898
 801aa98:	4770      	bx	lr
 801aa9a:	bf00      	nop

0801aa9c <rcl_action_take_cancel_request>:
 801aa9c:	2800      	cmp	r0, #0
 801aa9e:	d037      	beq.n	801ab10 <rcl_action_take_cancel_request+0x74>
 801aaa0:	b570      	push	{r4, r5, r6, lr}
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	6800      	ldr	r0, [r0, #0]
 801aaa6:	b370      	cbz	r0, 801ab06 <rcl_action_take_cancel_request+0x6a>
 801aaa8:	460d      	mov	r5, r1
 801aaaa:	4616      	mov	r6, r2
 801aaac:	f7fe fc46 	bl	801933c <rcl_service_is_valid>
 801aab0:	b338      	cbz	r0, 801ab02 <rcl_action_take_cancel_request+0x66>
 801aab2:	6820      	ldr	r0, [r4, #0]
 801aab4:	3004      	adds	r0, #4
 801aab6:	f7fe fc41 	bl	801933c <rcl_service_is_valid>
 801aaba:	b310      	cbz	r0, 801ab02 <rcl_action_take_cancel_request+0x66>
 801aabc:	6820      	ldr	r0, [r4, #0]
 801aabe:	3008      	adds	r0, #8
 801aac0:	f7fe fc3c 	bl	801933c <rcl_service_is_valid>
 801aac4:	b1e8      	cbz	r0, 801ab02 <rcl_action_take_cancel_request+0x66>
 801aac6:	6820      	ldr	r0, [r4, #0]
 801aac8:	300c      	adds	r0, #12
 801aaca:	f7f4 fc8b 	bl	800f3e4 <rcl_publisher_is_valid>
 801aace:	b1c0      	cbz	r0, 801ab02 <rcl_action_take_cancel_request+0x66>
 801aad0:	6820      	ldr	r0, [r4, #0]
 801aad2:	3010      	adds	r0, #16
 801aad4:	f7f4 fc86 	bl	800f3e4 <rcl_publisher_is_valid>
 801aad8:	b198      	cbz	r0, 801ab02 <rcl_action_take_cancel_request+0x66>
 801aada:	b1bd      	cbz	r5, 801ab0c <rcl_action_take_cancel_request+0x70>
 801aadc:	b1b6      	cbz	r6, 801ab0c <rcl_action_take_cancel_request+0x70>
 801aade:	6820      	ldr	r0, [r4, #0]
 801aae0:	4632      	mov	r2, r6
 801aae2:	4629      	mov	r1, r5
 801aae4:	3004      	adds	r0, #4
 801aae6:	f7fe fba9 	bl	801923c <rcl_take_request>
 801aaea:	b148      	cbz	r0, 801ab00 <rcl_action_take_cancel_request+0x64>
 801aaec:	280a      	cmp	r0, #10
 801aaee:	d007      	beq.n	801ab00 <rcl_action_take_cancel_request+0x64>
 801aaf0:	f240 2259 	movw	r2, #601	@ 0x259
 801aaf4:	f640 0399 	movw	r3, #2201	@ 0x899
 801aaf8:	4290      	cmp	r0, r2
 801aafa:	bf0c      	ite	eq
 801aafc:	4618      	moveq	r0, r3
 801aafe:	2001      	movne	r0, #1
 801ab00:	bd70      	pop	{r4, r5, r6, pc}
 801ab02:	f7f6 f90d 	bl	8010d20 <rcutils_reset_error>
 801ab06:	f640 0098 	movw	r0, #2200	@ 0x898
 801ab0a:	bd70      	pop	{r4, r5, r6, pc}
 801ab0c:	200b      	movs	r0, #11
 801ab0e:	bd70      	pop	{r4, r5, r6, pc}
 801ab10:	f640 0098 	movw	r0, #2200	@ 0x898
 801ab14:	4770      	bx	lr
 801ab16:	bf00      	nop

0801ab18 <rcl_action_send_cancel_response>:
 801ab18:	b380      	cbz	r0, 801ab7c <rcl_action_send_cancel_response+0x64>
 801ab1a:	b570      	push	{r4, r5, r6, lr}
 801ab1c:	4604      	mov	r4, r0
 801ab1e:	6800      	ldr	r0, [r0, #0]
 801ab20:	b338      	cbz	r0, 801ab72 <rcl_action_send_cancel_response+0x5a>
 801ab22:	460d      	mov	r5, r1
 801ab24:	4616      	mov	r6, r2
 801ab26:	f7fe fc09 	bl	801933c <rcl_service_is_valid>
 801ab2a:	b300      	cbz	r0, 801ab6e <rcl_action_send_cancel_response+0x56>
 801ab2c:	6820      	ldr	r0, [r4, #0]
 801ab2e:	3004      	adds	r0, #4
 801ab30:	f7fe fc04 	bl	801933c <rcl_service_is_valid>
 801ab34:	b1d8      	cbz	r0, 801ab6e <rcl_action_send_cancel_response+0x56>
 801ab36:	6820      	ldr	r0, [r4, #0]
 801ab38:	3008      	adds	r0, #8
 801ab3a:	f7fe fbff 	bl	801933c <rcl_service_is_valid>
 801ab3e:	b1b0      	cbz	r0, 801ab6e <rcl_action_send_cancel_response+0x56>
 801ab40:	6820      	ldr	r0, [r4, #0]
 801ab42:	300c      	adds	r0, #12
 801ab44:	f7f4 fc4e 	bl	800f3e4 <rcl_publisher_is_valid>
 801ab48:	b188      	cbz	r0, 801ab6e <rcl_action_send_cancel_response+0x56>
 801ab4a:	6820      	ldr	r0, [r4, #0]
 801ab4c:	3010      	adds	r0, #16
 801ab4e:	f7f4 fc49 	bl	800f3e4 <rcl_publisher_is_valid>
 801ab52:	b160      	cbz	r0, 801ab6e <rcl_action_send_cancel_response+0x56>
 801ab54:	b185      	cbz	r5, 801ab78 <rcl_action_send_cancel_response+0x60>
 801ab56:	b17e      	cbz	r6, 801ab78 <rcl_action_send_cancel_response+0x60>
 801ab58:	6820      	ldr	r0, [r4, #0]
 801ab5a:	4632      	mov	r2, r6
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	3004      	adds	r0, #4
 801ab60:	f7fe fbbc 	bl	80192dc <rcl_send_response>
 801ab64:	b110      	cbz	r0, 801ab6c <rcl_action_send_cancel_response+0x54>
 801ab66:	2802      	cmp	r0, #2
 801ab68:	bf18      	it	ne
 801ab6a:	2001      	movne	r0, #1
 801ab6c:	bd70      	pop	{r4, r5, r6, pc}
 801ab6e:	f7f6 f8d7 	bl	8010d20 <rcutils_reset_error>
 801ab72:	f640 0098 	movw	r0, #2200	@ 0x898
 801ab76:	bd70      	pop	{r4, r5, r6, pc}
 801ab78:	200b      	movs	r0, #11
 801ab7a:	bd70      	pop	{r4, r5, r6, pc}
 801ab7c:	f640 0098 	movw	r0, #2200	@ 0x898
 801ab80:	4770      	bx	lr
 801ab82:	bf00      	nop

0801ab84 <rcl_action_wait_set_add_action_server>:
 801ab84:	2800      	cmp	r0, #0
 801ab86:	d04d      	beq.n	801ac24 <rcl_action_wait_set_add_action_server+0xa0>
 801ab88:	b570      	push	{r4, r5, r6, lr}
 801ab8a:	460c      	mov	r4, r1
 801ab8c:	b159      	cbz	r1, 801aba6 <rcl_action_wait_set_add_action_server+0x22>
 801ab8e:	4605      	mov	r5, r0
 801ab90:	6808      	ldr	r0, [r1, #0]
 801ab92:	b140      	cbz	r0, 801aba6 <rcl_action_wait_set_add_action_server+0x22>
 801ab94:	4616      	mov	r6, r2
 801ab96:	f7fe fbd1 	bl	801933c <rcl_service_is_valid>
 801ab9a:	b120      	cbz	r0, 801aba6 <rcl_action_wait_set_add_action_server+0x22>
 801ab9c:	6820      	ldr	r0, [r4, #0]
 801ab9e:	3004      	adds	r0, #4
 801aba0:	f7fe fbcc 	bl	801933c <rcl_service_is_valid>
 801aba4:	b910      	cbnz	r0, 801abac <rcl_action_wait_set_add_action_server+0x28>
 801aba6:	f640 0098 	movw	r0, #2200	@ 0x898
 801abaa:	bd70      	pop	{r4, r5, r6, pc}
 801abac:	6820      	ldr	r0, [r4, #0]
 801abae:	3008      	adds	r0, #8
 801abb0:	f7fe fbc4 	bl	801933c <rcl_service_is_valid>
 801abb4:	2800      	cmp	r0, #0
 801abb6:	d0f6      	beq.n	801aba6 <rcl_action_wait_set_add_action_server+0x22>
 801abb8:	6820      	ldr	r0, [r4, #0]
 801abba:	300c      	adds	r0, #12
 801abbc:	f7f4 fc2a 	bl	800f414 <rcl_publisher_is_valid_except_context>
 801abc0:	2800      	cmp	r0, #0
 801abc2:	d0f0      	beq.n	801aba6 <rcl_action_wait_set_add_action_server+0x22>
 801abc4:	6820      	ldr	r0, [r4, #0]
 801abc6:	3010      	adds	r0, #16
 801abc8:	f7f4 fc24 	bl	800f414 <rcl_publisher_is_valid_except_context>
 801abcc:	2800      	cmp	r0, #0
 801abce:	d0ea      	beq.n	801aba6 <rcl_action_wait_set_add_action_server+0x22>
 801abd0:	6821      	ldr	r1, [r4, #0]
 801abd2:	4628      	mov	r0, r5
 801abd4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801abd8:	f7ff fa8a 	bl	801a0f0 <rcl_wait_set_add_service>
 801abdc:	2800      	cmp	r0, #0
 801abde:	d1e4      	bne.n	801abaa <rcl_action_wait_set_add_action_server+0x26>
 801abe0:	6821      	ldr	r1, [r4, #0]
 801abe2:	4628      	mov	r0, r5
 801abe4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801abe8:	3104      	adds	r1, #4
 801abea:	f7ff fa81 	bl	801a0f0 <rcl_wait_set_add_service>
 801abee:	2800      	cmp	r0, #0
 801abf0:	d1db      	bne.n	801abaa <rcl_action_wait_set_add_action_server+0x26>
 801abf2:	6821      	ldr	r1, [r4, #0]
 801abf4:	4628      	mov	r0, r5
 801abf6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801abfa:	3108      	adds	r1, #8
 801abfc:	f7ff fa78 	bl	801a0f0 <rcl_wait_set_add_service>
 801ac00:	2800      	cmp	r0, #0
 801ac02:	d1d2      	bne.n	801abaa <rcl_action_wait_set_add_action_server+0x26>
 801ac04:	6821      	ldr	r1, [r4, #0]
 801ac06:	4628      	mov	r0, r5
 801ac08:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801ac0c:	3114      	adds	r1, #20
 801ac0e:	f7ff fa13 	bl	801a038 <rcl_wait_set_add_timer>
 801ac12:	2800      	cmp	r0, #0
 801ac14:	d1c9      	bne.n	801abaa <rcl_action_wait_set_add_action_server+0x26>
 801ac16:	2e00      	cmp	r6, #0
 801ac18:	d0c7      	beq.n	801abaa <rcl_action_wait_set_add_action_server+0x26>
 801ac1a:	6823      	ldr	r3, [r4, #0]
 801ac1c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801ac20:	6033      	str	r3, [r6, #0]
 801ac22:	bd70      	pop	{r4, r5, r6, pc}
 801ac24:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop

0801ac2c <rcl_action_server_wait_set_get_entities_ready>:
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	d05a      	beq.n	801ace6 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac32:	460c      	mov	r4, r1
 801ac34:	b161      	cbz	r1, 801ac50 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801ac36:	4605      	mov	r5, r0
 801ac38:	6808      	ldr	r0, [r1, #0]
 801ac3a:	b148      	cbz	r0, 801ac50 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801ac3c:	4616      	mov	r6, r2
 801ac3e:	461f      	mov	r7, r3
 801ac40:	f7fe fb7c 	bl	801933c <rcl_service_is_valid>
 801ac44:	b120      	cbz	r0, 801ac50 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801ac46:	6820      	ldr	r0, [r4, #0]
 801ac48:	3004      	adds	r0, #4
 801ac4a:	f7fe fb77 	bl	801933c <rcl_service_is_valid>
 801ac4e:	b910      	cbnz	r0, 801ac56 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801ac50:	f640 0098 	movw	r0, #2200	@ 0x898
 801ac54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac56:	6820      	ldr	r0, [r4, #0]
 801ac58:	3008      	adds	r0, #8
 801ac5a:	f7fe fb6f 	bl	801933c <rcl_service_is_valid>
 801ac5e:	2800      	cmp	r0, #0
 801ac60:	d0f6      	beq.n	801ac50 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801ac62:	6820      	ldr	r0, [r4, #0]
 801ac64:	300c      	adds	r0, #12
 801ac66:	f7f4 fbd5 	bl	800f414 <rcl_publisher_is_valid_except_context>
 801ac6a:	2800      	cmp	r0, #0
 801ac6c:	d0f0      	beq.n	801ac50 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801ac6e:	6820      	ldr	r0, [r4, #0]
 801ac70:	3010      	adds	r0, #16
 801ac72:	f7f4 fbcf 	bl	800f414 <rcl_publisher_is_valid_except_context>
 801ac76:	2800      	cmp	r0, #0
 801ac78:	d0ea      	beq.n	801ac50 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801ac7a:	b3be      	cbz	r6, 801acec <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801ac7c:	b3b7      	cbz	r7, 801acec <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801ac7e:	9b06      	ldr	r3, [sp, #24]
 801ac80:	b3a3      	cbz	r3, 801acec <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801ac82:	9b07      	ldr	r3, [sp, #28]
 801ac84:	b393      	cbz	r3, 801acec <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801ac86:	6821      	ldr	r1, [r4, #0]
 801ac88:	692a      	ldr	r2, [r5, #16]
 801ac8a:	6a2c      	ldr	r4, [r5, #32]
 801ac8c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801ac90:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801ac94:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801ac98:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801ac9c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801aca0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801aca4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801aca8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801acac:	1a64      	subs	r4, r4, r1
 801acae:	fab4 f484 	clz	r4, r4
 801acb2:	0964      	lsrs	r4, r4, #5
 801acb4:	7034      	strb	r4, [r6, #0]
 801acb6:	1d0c      	adds	r4, r1, #4
 801acb8:	1b1b      	subs	r3, r3, r4
 801acba:	fab3 f383 	clz	r3, r3
 801acbe:	095b      	lsrs	r3, r3, #5
 801acc0:	f101 0408 	add.w	r4, r1, #8
 801acc4:	703b      	strb	r3, [r7, #0]
 801acc6:	f101 0314 	add.w	r3, r1, #20
 801acca:	1b01      	subs	r1, r0, r4
 801accc:	1ad3      	subs	r3, r2, r3
 801acce:	fab1 f181 	clz	r1, r1
 801acd2:	9a06      	ldr	r2, [sp, #24]
 801acd4:	0949      	lsrs	r1, r1, #5
 801acd6:	7011      	strb	r1, [r2, #0]
 801acd8:	fab3 f383 	clz	r3, r3
 801acdc:	9a07      	ldr	r2, [sp, #28]
 801acde:	095b      	lsrs	r3, r3, #5
 801ace0:	2000      	movs	r0, #0
 801ace2:	7013      	strb	r3, [r2, #0]
 801ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ace6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801acea:	4770      	bx	lr
 801acec:	200b      	movs	r0, #11
 801acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801acf0 <_execute_event_handler>:
 801acf0:	2002      	movs	r0, #2
 801acf2:	4770      	bx	lr

0801acf4 <_cancel_goal_event_handler>:
 801acf4:	2003      	movs	r0, #3
 801acf6:	4770      	bx	lr

0801acf8 <_succeed_event_handler>:
 801acf8:	2004      	movs	r0, #4
 801acfa:	4770      	bx	lr

0801acfc <_abort_event_handler>:
 801acfc:	2006      	movs	r0, #6
 801acfe:	4770      	bx	lr

0801ad00 <_canceled_event_handler>:
 801ad00:	2005      	movs	r0, #5
 801ad02:	4770      	bx	lr

0801ad04 <rcl_action_transition_goal_state>:
 801ad04:	fa5f fc80 	uxtb.w	ip, r0
 801ad08:	f1bc 0f06 	cmp.w	ip, #6
 801ad0c:	d80c      	bhi.n	801ad28 <rcl_action_transition_goal_state+0x24>
 801ad0e:	2904      	cmp	r1, #4
 801ad10:	d80a      	bhi.n	801ad28 <rcl_action_transition_goal_state+0x24>
 801ad12:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801ad16:	b410      	push	{r4}
 801ad18:	440b      	add	r3, r1
 801ad1a:	4c06      	ldr	r4, [pc, #24]	@ (801ad34 <rcl_action_transition_goal_state+0x30>)
 801ad1c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ad20:	b123      	cbz	r3, 801ad2c <rcl_action_transition_goal_state+0x28>
 801ad22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad26:	4718      	bx	r3
 801ad28:	2000      	movs	r0, #0
 801ad2a:	4770      	bx	lr
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad32:	4770      	bx	lr
 801ad34:	080216ac 	.word	0x080216ac

0801ad38 <rcl_action_get_zero_initialized_cancel_response>:
 801ad38:	b510      	push	{r4, lr}
 801ad3a:	4c07      	ldr	r4, [pc, #28]	@ (801ad58 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801ad3c:	4686      	mov	lr, r0
 801ad3e:	4684      	mov	ip, r0
 801ad40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad4c:	6823      	ldr	r3, [r4, #0]
 801ad4e:	f8cc 3000 	str.w	r3, [ip]
 801ad52:	4670      	mov	r0, lr
 801ad54:	bd10      	pop	{r4, pc}
 801ad56:	bf00      	nop
 801ad58:	08021738 	.word	0x08021738

0801ad5c <rclc_action_send_result_request>:
 801ad5c:	b1d0      	cbz	r0, 801ad94 <rclc_action_send_result_request+0x38>
 801ad5e:	b500      	push	{lr}
 801ad60:	4684      	mov	ip, r0
 801ad62:	b087      	sub	sp, #28
 801ad64:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801ad68:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801ad6c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801ad70:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801ad74:	f10d 0e08 	add.w	lr, sp, #8
 801ad78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ad7c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801ad80:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801ad84:	a902      	add	r1, sp, #8
 801ad86:	3010      	adds	r0, #16
 801ad88:	f7ff fbfa 	bl	801a580 <rcl_action_send_result_request>
 801ad8c:	b920      	cbnz	r0, 801ad98 <rclc_action_send_result_request+0x3c>
 801ad8e:	b007      	add	sp, #28
 801ad90:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad94:	200b      	movs	r0, #11
 801ad96:	4770      	bx	lr
 801ad98:	9001      	str	r0, [sp, #4]
 801ad9a:	f7f5 ffc1 	bl	8010d20 <rcutils_reset_error>
 801ad9e:	9801      	ldr	r0, [sp, #4]
 801ada0:	b007      	add	sp, #28
 801ada2:	f85d fb04 	ldr.w	pc, [sp], #4
 801ada6:	bf00      	nop

0801ada8 <rclc_action_take_goal_handle>:
 801ada8:	4603      	mov	r3, r0
 801adaa:	b158      	cbz	r0, 801adc4 <rclc_action_take_goal_handle+0x1c>
 801adac:	6880      	ldr	r0, [r0, #8]
 801adae:	b148      	cbz	r0, 801adc4 <rclc_action_take_goal_handle+0x1c>
 801adb0:	6801      	ldr	r1, [r0, #0]
 801adb2:	6099      	str	r1, [r3, #8]
 801adb4:	2200      	movs	r2, #0
 801adb6:	7202      	strb	r2, [r0, #8]
 801adb8:	68d9      	ldr	r1, [r3, #12]
 801adba:	6001      	str	r1, [r0, #0]
 801adbc:	6202      	str	r2, [r0, #32]
 801adbe:	8482      	strh	r2, [r0, #36]	@ 0x24
 801adc0:	60d8      	str	r0, [r3, #12]
 801adc2:	4770      	bx	lr
 801adc4:	4770      	bx	lr
 801adc6:	bf00      	nop

0801adc8 <rclc_action_remove_used_goal_handle>:
 801adc8:	b180      	cbz	r0, 801adec <rclc_action_remove_used_goal_handle+0x24>
 801adca:	b179      	cbz	r1, 801adec <rclc_action_remove_used_goal_handle+0x24>
 801adcc:	68c3      	ldr	r3, [r0, #12]
 801adce:	4299      	cmp	r1, r3
 801add0:	d00d      	beq.n	801adee <rclc_action_remove_used_goal_handle+0x26>
 801add2:	b12b      	cbz	r3, 801ade0 <rclc_action_remove_used_goal_handle+0x18>
 801add4:	681a      	ldr	r2, [r3, #0]
 801add6:	4291      	cmp	r1, r2
 801add8:	d003      	beq.n	801ade2 <rclc_action_remove_used_goal_handle+0x1a>
 801adda:	4613      	mov	r3, r2
 801addc:	2b00      	cmp	r3, #0
 801adde:	d1f9      	bne.n	801add4 <rclc_action_remove_used_goal_handle+0xc>
 801ade0:	4770      	bx	lr
 801ade2:	680a      	ldr	r2, [r1, #0]
 801ade4:	601a      	str	r2, [r3, #0]
 801ade6:	6883      	ldr	r3, [r0, #8]
 801ade8:	600b      	str	r3, [r1, #0]
 801adea:	6081      	str	r1, [r0, #8]
 801adec:	4770      	bx	lr
 801adee:	680b      	ldr	r3, [r1, #0]
 801adf0:	60c3      	str	r3, [r0, #12]
 801adf2:	e7f8      	b.n	801ade6 <rclc_action_remove_used_goal_handle+0x1e>

0801adf4 <rclc_action_find_goal_handle_by_uuid>:
 801adf4:	b538      	push	{r3, r4, r5, lr}
 801adf6:	b180      	cbz	r0, 801ae1a <rclc_action_find_goal_handle_by_uuid+0x26>
 801adf8:	460d      	mov	r5, r1
 801adfa:	b181      	cbz	r1, 801ae1e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801adfc:	68c4      	ldr	r4, [r0, #12]
 801adfe:	b914      	cbnz	r4, 801ae06 <rclc_action_find_goal_handle_by_uuid+0x12>
 801ae00:	e009      	b.n	801ae16 <rclc_action_find_goal_handle_by_uuid+0x22>
 801ae02:	6824      	ldr	r4, [r4, #0]
 801ae04:	b13c      	cbz	r4, 801ae16 <rclc_action_find_goal_handle_by_uuid+0x22>
 801ae06:	2210      	movs	r2, #16
 801ae08:	4629      	mov	r1, r5
 801ae0a:	f104 0009 	add.w	r0, r4, #9
 801ae0e:	f003 f975 	bl	801e0fc <memcmp>
 801ae12:	2800      	cmp	r0, #0
 801ae14:	d1f5      	bne.n	801ae02 <rclc_action_find_goal_handle_by_uuid+0xe>
 801ae16:	4620      	mov	r0, r4
 801ae18:	bd38      	pop	{r3, r4, r5, pc}
 801ae1a:	4604      	mov	r4, r0
 801ae1c:	e7fb      	b.n	801ae16 <rclc_action_find_goal_handle_by_uuid+0x22>
 801ae1e:	460c      	mov	r4, r1
 801ae20:	e7f9      	b.n	801ae16 <rclc_action_find_goal_handle_by_uuid+0x22>
 801ae22:	bf00      	nop

0801ae24 <rclc_action_find_first_handle_by_status>:
 801ae24:	b140      	cbz	r0, 801ae38 <rclc_action_find_first_handle_by_status+0x14>
 801ae26:	68c0      	ldr	r0, [r0, #12]
 801ae28:	b910      	cbnz	r0, 801ae30 <rclc_action_find_first_handle_by_status+0xc>
 801ae2a:	e005      	b.n	801ae38 <rclc_action_find_first_handle_by_status+0x14>
 801ae2c:	6800      	ldr	r0, [r0, #0]
 801ae2e:	b118      	cbz	r0, 801ae38 <rclc_action_find_first_handle_by_status+0x14>
 801ae30:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801ae34:	428b      	cmp	r3, r1
 801ae36:	d1f9      	bne.n	801ae2c <rclc_action_find_first_handle_by_status+0x8>
 801ae38:	4770      	bx	lr
 801ae3a:	bf00      	nop

0801ae3c <rclc_action_find_first_terminated_handle>:
 801ae3c:	b140      	cbz	r0, 801ae50 <rclc_action_find_first_terminated_handle+0x14>
 801ae3e:	68c0      	ldr	r0, [r0, #12]
 801ae40:	b910      	cbnz	r0, 801ae48 <rclc_action_find_first_terminated_handle+0xc>
 801ae42:	e005      	b.n	801ae50 <rclc_action_find_first_terminated_handle+0x14>
 801ae44:	6800      	ldr	r0, [r0, #0]
 801ae46:	b118      	cbz	r0, 801ae50 <rclc_action_find_first_terminated_handle+0x14>
 801ae48:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801ae4c:	2b03      	cmp	r3, #3
 801ae4e:	ddf9      	ble.n	801ae44 <rclc_action_find_first_terminated_handle+0x8>
 801ae50:	4770      	bx	lr
 801ae52:	bf00      	nop

0801ae54 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801ae54:	b170      	cbz	r0, 801ae74 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801ae56:	68c0      	ldr	r0, [r0, #12]
 801ae58:	b160      	cbz	r0, 801ae74 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801ae5a:	b410      	push	{r4}
 801ae5c:	e001      	b.n	801ae62 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801ae5e:	6800      	ldr	r0, [r0, #0]
 801ae60:	b128      	cbz	r0, 801ae6e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801ae62:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801ae66:	4299      	cmp	r1, r3
 801ae68:	bf08      	it	eq
 801ae6a:	4294      	cmpeq	r4, r2
 801ae6c:	d1f7      	bne.n	801ae5e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801ae6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae72:	4770      	bx	lr
 801ae74:	4770      	bx	lr
 801ae76:	bf00      	nop

0801ae78 <rclc_action_find_handle_by_result_request_sequence_number>:
 801ae78:	b170      	cbz	r0, 801ae98 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801ae7a:	68c0      	ldr	r0, [r0, #12]
 801ae7c:	b160      	cbz	r0, 801ae98 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801ae7e:	b410      	push	{r4}
 801ae80:	e001      	b.n	801ae86 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801ae82:	6800      	ldr	r0, [r0, #0]
 801ae84:	b128      	cbz	r0, 801ae92 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801ae86:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801ae8a:	4299      	cmp	r1, r3
 801ae8c:	bf08      	it	eq
 801ae8e:	4294      	cmpeq	r4, r2
 801ae90:	d1f7      	bne.n	801ae82 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801ae92:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae96:	4770      	bx	lr
 801ae98:	4770      	bx	lr
 801ae9a:	bf00      	nop

0801ae9c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801ae9c:	b170      	cbz	r0, 801aebc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801ae9e:	68c0      	ldr	r0, [r0, #12]
 801aea0:	b160      	cbz	r0, 801aebc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801aea2:	b410      	push	{r4}
 801aea4:	e001      	b.n	801aeaa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801aea6:	6800      	ldr	r0, [r0, #0]
 801aea8:	b128      	cbz	r0, 801aeb6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801aeaa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801aeae:	4299      	cmp	r1, r3
 801aeb0:	bf08      	it	eq
 801aeb2:	4294      	cmpeq	r4, r2
 801aeb4:	d1f7      	bne.n	801aea6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801aeb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aeba:	4770      	bx	lr
 801aebc:	4770      	bx	lr
 801aebe:	bf00      	nop

0801aec0 <rclc_action_find_first_handle_with_goal_response>:
 801aec0:	b140      	cbz	r0, 801aed4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801aec2:	68c0      	ldr	r0, [r0, #12]
 801aec4:	b910      	cbnz	r0, 801aecc <rclc_action_find_first_handle_with_goal_response+0xc>
 801aec6:	e005      	b.n	801aed4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801aec8:	6800      	ldr	r0, [r0, #0]
 801aeca:	b118      	cbz	r0, 801aed4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801aecc:	f890 3020 	ldrb.w	r3, [r0, #32]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d0f9      	beq.n	801aec8 <rclc_action_find_first_handle_with_goal_response+0x8>
 801aed4:	4770      	bx	lr
 801aed6:	bf00      	nop

0801aed8 <rclc_action_find_first_handle_with_result_response>:
 801aed8:	b140      	cbz	r0, 801aeec <rclc_action_find_first_handle_with_result_response+0x14>
 801aeda:	68c0      	ldr	r0, [r0, #12]
 801aedc:	b910      	cbnz	r0, 801aee4 <rclc_action_find_first_handle_with_result_response+0xc>
 801aede:	e005      	b.n	801aeec <rclc_action_find_first_handle_with_result_response+0x14>
 801aee0:	6800      	ldr	r0, [r0, #0]
 801aee2:	b118      	cbz	r0, 801aeec <rclc_action_find_first_handle_with_result_response+0x14>
 801aee4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d0f9      	beq.n	801aee0 <rclc_action_find_first_handle_with_result_response+0x8>
 801aeec:	4770      	bx	lr
 801aeee:	bf00      	nop

0801aef0 <rclc_action_server_response_goal_request>:
 801aef0:	b198      	cbz	r0, 801af1a <rclc_action_server_response_goal_request+0x2a>
 801aef2:	b510      	push	{r4, lr}
 801aef4:	6844      	ldr	r4, [r0, #4]
 801aef6:	b086      	sub	sp, #24
 801aef8:	2200      	movs	r2, #0
 801aefa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801aefe:	460b      	mov	r3, r1
 801af00:	9205      	str	r2, [sp, #20]
 801af02:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801af06:	aa03      	add	r2, sp, #12
 801af08:	f104 0010 	add.w	r0, r4, #16
 801af0c:	f88d 300c 	strb.w	r3, [sp, #12]
 801af10:	f7ff fd52 	bl	801a9b8 <rcl_action_send_goal_response>
 801af14:	b918      	cbnz	r0, 801af1e <rclc_action_server_response_goal_request+0x2e>
 801af16:	b006      	add	sp, #24
 801af18:	bd10      	pop	{r4, pc}
 801af1a:	200b      	movs	r0, #11
 801af1c:	4770      	bx	lr
 801af1e:	9001      	str	r0, [sp, #4]
 801af20:	f7f5 fefe 	bl	8010d20 <rcutils_reset_error>
 801af24:	9801      	ldr	r0, [sp, #4]
 801af26:	b006      	add	sp, #24
 801af28:	bd10      	pop	{r4, pc}
 801af2a:	bf00      	nop
 801af2c:	0000      	movs	r0, r0
	...

0801af30 <rclc_action_server_goal_cancel_accept>:
 801af30:	b310      	cbz	r0, 801af78 <rclc_action_server_goal_cancel_accept+0x48>
 801af32:	b510      	push	{r4, lr}
 801af34:	b090      	sub	sp, #64	@ 0x40
 801af36:	4604      	mov	r4, r0
 801af38:	a806      	add	r0, sp, #24
 801af3a:	f7ff fefd 	bl	801ad38 <rcl_action_get_zero_initialized_cancel_response>
 801af3e:	2300      	movs	r3, #0
 801af40:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801af44:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801af48:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801af4c:	f88d 3018 	strb.w	r3, [sp, #24]
 801af50:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801af54:	f8cd d01c 	str.w	sp, [sp, #28]
 801af58:	46ec      	mov	ip, sp
 801af5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af5e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801af80 <rclc_action_server_goal_cancel_accept+0x50>
 801af62:	6860      	ldr	r0, [r4, #4]
 801af64:	aa06      	add	r2, sp, #24
 801af66:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801af6a:	3010      	adds	r0, #16
 801af6c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801af70:	f7ff fdd2 	bl	801ab18 <rcl_action_send_cancel_response>
 801af74:	b010      	add	sp, #64	@ 0x40
 801af76:	bd10      	pop	{r4, pc}
 801af78:	200b      	movs	r0, #11
 801af7a:	4770      	bx	lr
 801af7c:	f3af 8000 	nop.w
 801af80:	00000001 	.word	0x00000001
 801af84:	00000001 	.word	0x00000001

0801af88 <rclc_action_server_goal_cancel_reject>:
 801af88:	b082      	sub	sp, #8
 801af8a:	b530      	push	{r4, r5, lr}
 801af8c:	b08b      	sub	sp, #44	@ 0x2c
 801af8e:	ac0e      	add	r4, sp, #56	@ 0x38
 801af90:	e884 000c 	stmia.w	r4, {r2, r3}
 801af94:	b188      	cbz	r0, 801afba <rclc_action_server_goal_cancel_reject+0x32>
 801af96:	4604      	mov	r4, r0
 801af98:	a801      	add	r0, sp, #4
 801af9a:	460d      	mov	r5, r1
 801af9c:	f7ff fecc 	bl	801ad38 <rcl_action_get_zero_initialized_cancel_response>
 801afa0:	aa01      	add	r2, sp, #4
 801afa2:	a90e      	add	r1, sp, #56	@ 0x38
 801afa4:	f104 0010 	add.w	r0, r4, #16
 801afa8:	f88d 5004 	strb.w	r5, [sp, #4]
 801afac:	f7ff fdb4 	bl	801ab18 <rcl_action_send_cancel_response>
 801afb0:	b00b      	add	sp, #44	@ 0x2c
 801afb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801afb6:	b002      	add	sp, #8
 801afb8:	4770      	bx	lr
 801afba:	200b      	movs	r0, #11
 801afbc:	b00b      	add	sp, #44	@ 0x2c
 801afbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801afc2:	b002      	add	sp, #8
 801afc4:	4770      	bx	lr
 801afc6:	bf00      	nop

0801afc8 <rcutils_is_directory>:
 801afc8:	2000      	movs	r0, #0
 801afca:	4770      	bx	lr

0801afcc <rcutils_join_path>:
 801afcc:	b082      	sub	sp, #8
 801afce:	e88d 000c 	stmia.w	sp, {r2, r3}
 801afd2:	2000      	movs	r0, #0
 801afd4:	b002      	add	sp, #8
 801afd6:	4770      	bx	lr

0801afd8 <rcutils_to_native_path>:
 801afd8:	b084      	sub	sp, #16
 801afda:	a801      	add	r0, sp, #4
 801afdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801afe0:	b004      	add	sp, #16
 801afe2:	2000      	movs	r0, #0
 801afe4:	4770      	bx	lr
 801afe6:	bf00      	nop

0801afe8 <rcutils_get_zero_initialized_string_array>:
 801afe8:	b570      	push	{r4, r5, r6, lr}
 801afea:	b086      	sub	sp, #24
 801afec:	4606      	mov	r6, r0
 801afee:	4668      	mov	r0, sp
 801aff0:	f7f5 fd78 	bl	8010ae4 <rcutils_get_zero_initialized_allocator>
 801aff4:	46ee      	mov	lr, sp
 801aff6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801affa:	4c09      	ldr	r4, [pc, #36]	@ (801b020 <rcutils_get_zero_initialized_string_array+0x38>)
 801affc:	f104 0508 	add.w	r5, r4, #8
 801b000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b002:	46a4      	mov	ip, r4
 801b004:	f8de 3000 	ldr.w	r3, [lr]
 801b008:	602b      	str	r3, [r5, #0]
 801b00a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b00e:	4634      	mov	r4, r6
 801b010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b012:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801b016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b01a:	4630      	mov	r0, r6
 801b01c:	b006      	add	sp, #24
 801b01e:	bd70      	pop	{r4, r5, r6, pc}
 801b020:	2001f5c8 	.word	0x2001f5c8

0801b024 <rcutils_string_array_init>:
 801b024:	b1da      	cbz	r2, 801b05e <rcutils_string_array_init+0x3a>
 801b026:	b570      	push	{r4, r5, r6, lr}
 801b028:	4605      	mov	r5, r0
 801b02a:	b1d0      	cbz	r0, 801b062 <rcutils_string_array_init+0x3e>
 801b02c:	460e      	mov	r6, r1
 801b02e:	4614      	mov	r4, r2
 801b030:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801b034:	6001      	str	r1, [r0, #0]
 801b036:	2104      	movs	r1, #4
 801b038:	4630      	mov	r0, r6
 801b03a:	4798      	blx	r3
 801b03c:	6068      	str	r0, [r5, #4]
 801b03e:	b150      	cbz	r0, 801b056 <rcutils_string_array_init+0x32>
 801b040:	46a4      	mov	ip, r4
 801b042:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b046:	f105 0408 	add.w	r4, r5, #8
 801b04a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b04c:	f8dc 3000 	ldr.w	r3, [ip]
 801b050:	6023      	str	r3, [r4, #0]
 801b052:	2000      	movs	r0, #0
 801b054:	bd70      	pop	{r4, r5, r6, pc}
 801b056:	2e00      	cmp	r6, #0
 801b058:	d0f2      	beq.n	801b040 <rcutils_string_array_init+0x1c>
 801b05a:	200a      	movs	r0, #10
 801b05c:	bd70      	pop	{r4, r5, r6, pc}
 801b05e:	200b      	movs	r0, #11
 801b060:	4770      	bx	lr
 801b062:	200b      	movs	r0, #11
 801b064:	bd70      	pop	{r4, r5, r6, pc}
 801b066:	bf00      	nop

0801b068 <rcutils_string_array_fini>:
 801b068:	b310      	cbz	r0, 801b0b0 <rcutils_string_array_fini+0x48>
 801b06a:	6843      	ldr	r3, [r0, #4]
 801b06c:	b570      	push	{r4, r5, r6, lr}
 801b06e:	4604      	mov	r4, r0
 801b070:	b1d3      	cbz	r3, 801b0a8 <rcutils_string_array_fini+0x40>
 801b072:	3008      	adds	r0, #8
 801b074:	f7f5 fd70 	bl	8010b58 <rcutils_allocator_is_valid>
 801b078:	b1c0      	cbz	r0, 801b0ac <rcutils_string_array_fini+0x44>
 801b07a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b07e:	b16b      	cbz	r3, 801b09c <rcutils_string_array_fini+0x34>
 801b080:	2500      	movs	r5, #0
 801b082:	462e      	mov	r6, r5
 801b084:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b088:	68e3      	ldr	r3, [r4, #12]
 801b08a:	69a1      	ldr	r1, [r4, #24]
 801b08c:	4798      	blx	r3
 801b08e:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b092:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801b096:	3501      	adds	r5, #1
 801b098:	42ab      	cmp	r3, r5
 801b09a:	d8f3      	bhi.n	801b084 <rcutils_string_array_fini+0x1c>
 801b09c:	68e3      	ldr	r3, [r4, #12]
 801b09e:	69a1      	ldr	r1, [r4, #24]
 801b0a0:	4798      	blx	r3
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	e9c4 3300 	strd	r3, r3, [r4]
 801b0a8:	2000      	movs	r0, #0
 801b0aa:	bd70      	pop	{r4, r5, r6, pc}
 801b0ac:	200b      	movs	r0, #11
 801b0ae:	bd70      	pop	{r4, r5, r6, pc}
 801b0b0:	200b      	movs	r0, #11
 801b0b2:	4770      	bx	lr

0801b0b4 <rcutils_get_zero_initialized_string_map>:
 801b0b4:	4b01      	ldr	r3, [pc, #4]	@ (801b0bc <rcutils_get_zero_initialized_string_map+0x8>)
 801b0b6:	2000      	movs	r0, #0
 801b0b8:	6018      	str	r0, [r3, #0]
 801b0ba:	4770      	bx	lr
 801b0bc:	2001f5e4 	.word	0x2001f5e4

0801b0c0 <rcutils_string_map_reserve>:
 801b0c0:	2800      	cmp	r0, #0
 801b0c2:	d04e      	beq.n	801b162 <rcutils_string_map_reserve+0xa2>
 801b0c4:	b530      	push	{r4, r5, lr}
 801b0c6:	6803      	ldr	r3, [r0, #0]
 801b0c8:	b087      	sub	sp, #28
 801b0ca:	4604      	mov	r4, r0
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d043      	beq.n	801b158 <rcutils_string_map_reserve+0x98>
 801b0d0:	f103 0c0c 	add.w	ip, r3, #12
 801b0d4:	460d      	mov	r5, r1
 801b0d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b0da:	f10d 0e04 	add.w	lr, sp, #4
 801b0de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b0e2:	f8dc 3000 	ldr.w	r3, [ip]
 801b0e6:	f8ce 3000 	str.w	r3, [lr]
 801b0ea:	a801      	add	r0, sp, #4
 801b0ec:	f7f5 fd34 	bl	8010b58 <rcutils_allocator_is_valid>
 801b0f0:	b308      	cbz	r0, 801b136 <rcutils_string_map_reserve+0x76>
 801b0f2:	6823      	ldr	r3, [r4, #0]
 801b0f4:	6899      	ldr	r1, [r3, #8]
 801b0f6:	42a9      	cmp	r1, r5
 801b0f8:	d829      	bhi.n	801b14e <rcutils_string_map_reserve+0x8e>
 801b0fa:	685a      	ldr	r2, [r3, #4]
 801b0fc:	42aa      	cmp	r2, r5
 801b0fe:	d024      	beq.n	801b14a <rcutils_string_map_reserve+0x8a>
 801b100:	b1e5      	cbz	r5, 801b13c <rcutils_string_map_reserve+0x7c>
 801b102:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801b106:	d22a      	bcs.n	801b15e <rcutils_string_map_reserve+0x9e>
 801b108:	6818      	ldr	r0, [r3, #0]
 801b10a:	9a05      	ldr	r2, [sp, #20]
 801b10c:	9b03      	ldr	r3, [sp, #12]
 801b10e:	00e9      	lsls	r1, r5, #3
 801b110:	4798      	blx	r3
 801b112:	b320      	cbz	r0, 801b15e <rcutils_string_map_reserve+0x9e>
 801b114:	6824      	ldr	r4, [r4, #0]
 801b116:	6861      	ldr	r1, [r4, #4]
 801b118:	6020      	str	r0, [r4, #0]
 801b11a:	42a9      	cmp	r1, r5
 801b11c:	d214      	bcs.n	801b148 <rcutils_string_map_reserve+0x88>
 801b11e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801b122:	1a69      	subs	r1, r5, r1
 801b124:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801b128:	2200      	movs	r2, #0
 801b12a:	e9c3 2200 	strd	r2, r2, [r3]
 801b12e:	3308      	adds	r3, #8
 801b130:	428b      	cmp	r3, r1
 801b132:	d1fa      	bne.n	801b12a <rcutils_string_map_reserve+0x6a>
 801b134:	e008      	b.n	801b148 <rcutils_string_map_reserve+0x88>
 801b136:	200b      	movs	r0, #11
 801b138:	b007      	add	sp, #28
 801b13a:	bd30      	pop	{r4, r5, pc}
 801b13c:	9a02      	ldr	r2, [sp, #8]
 801b13e:	9905      	ldr	r1, [sp, #20]
 801b140:	6818      	ldr	r0, [r3, #0]
 801b142:	4790      	blx	r2
 801b144:	6824      	ldr	r4, [r4, #0]
 801b146:	6025      	str	r5, [r4, #0]
 801b148:	6065      	str	r5, [r4, #4]
 801b14a:	2000      	movs	r0, #0
 801b14c:	e7f4      	b.n	801b138 <rcutils_string_map_reserve+0x78>
 801b14e:	4620      	mov	r0, r4
 801b150:	f7ff ffb6 	bl	801b0c0 <rcutils_string_map_reserve>
 801b154:	b007      	add	sp, #28
 801b156:	bd30      	pop	{r4, r5, pc}
 801b158:	201f      	movs	r0, #31
 801b15a:	b007      	add	sp, #28
 801b15c:	bd30      	pop	{r4, r5, pc}
 801b15e:	200a      	movs	r0, #10
 801b160:	e7ea      	b.n	801b138 <rcutils_string_map_reserve+0x78>
 801b162:	200b      	movs	r0, #11
 801b164:	4770      	bx	lr
 801b166:	bf00      	nop

0801b168 <rcutils_string_map_init>:
 801b168:	b082      	sub	sp, #8
 801b16a:	b570      	push	{r4, r5, r6, lr}
 801b16c:	ac04      	add	r4, sp, #16
 801b16e:	e884 000c 	stmia.w	r4, {r2, r3}
 801b172:	b378      	cbz	r0, 801b1d4 <rcutils_string_map_init+0x6c>
 801b174:	6806      	ldr	r6, [r0, #0]
 801b176:	4604      	mov	r4, r0
 801b178:	b12e      	cbz	r6, 801b186 <rcutils_string_map_init+0x1e>
 801b17a:	251e      	movs	r5, #30
 801b17c:	4628      	mov	r0, r5
 801b17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b182:	b002      	add	sp, #8
 801b184:	4770      	bx	lr
 801b186:	a804      	add	r0, sp, #16
 801b188:	460d      	mov	r5, r1
 801b18a:	f7f5 fce5 	bl	8010b58 <rcutils_allocator_is_valid>
 801b18e:	b308      	cbz	r0, 801b1d4 <rcutils_string_map_init+0x6c>
 801b190:	9b04      	ldr	r3, [sp, #16]
 801b192:	9908      	ldr	r1, [sp, #32]
 801b194:	2020      	movs	r0, #32
 801b196:	4798      	blx	r3
 801b198:	6020      	str	r0, [r4, #0]
 801b19a:	b308      	cbz	r0, 801b1e0 <rcutils_string_map_init+0x78>
 801b19c:	f10d 0e10 	add.w	lr, sp, #16
 801b1a0:	e9c0 6600 	strd	r6, r6, [r0]
 801b1a4:	6086      	str	r6, [r0, #8]
 801b1a6:	f100 0c0c 	add.w	ip, r0, #12
 801b1aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b1ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b1b2:	f8de 3000 	ldr.w	r3, [lr]
 801b1b6:	f8cc 3000 	str.w	r3, [ip]
 801b1ba:	4629      	mov	r1, r5
 801b1bc:	4620      	mov	r0, r4
 801b1be:	f7ff ff7f 	bl	801b0c0 <rcutils_string_map_reserve>
 801b1c2:	4605      	mov	r5, r0
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	d0d9      	beq.n	801b17c <rcutils_string_map_init+0x14>
 801b1c8:	9b05      	ldr	r3, [sp, #20]
 801b1ca:	9908      	ldr	r1, [sp, #32]
 801b1cc:	6820      	ldr	r0, [r4, #0]
 801b1ce:	4798      	blx	r3
 801b1d0:	6026      	str	r6, [r4, #0]
 801b1d2:	e7d3      	b.n	801b17c <rcutils_string_map_init+0x14>
 801b1d4:	250b      	movs	r5, #11
 801b1d6:	4628      	mov	r0, r5
 801b1d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b1dc:	b002      	add	sp, #8
 801b1de:	4770      	bx	lr
 801b1e0:	250a      	movs	r5, #10
 801b1e2:	e7cb      	b.n	801b17c <rcutils_string_map_init+0x14>

0801b1e4 <rcutils_string_map_fini>:
 801b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1e8:	b086      	sub	sp, #24
 801b1ea:	2800      	cmp	r0, #0
 801b1ec:	d04f      	beq.n	801b28e <rcutils_string_map_fini+0xaa>
 801b1ee:	6805      	ldr	r5, [r0, #0]
 801b1f0:	4606      	mov	r6, r0
 801b1f2:	2d00      	cmp	r5, #0
 801b1f4:	d046      	beq.n	801b284 <rcutils_string_map_fini+0xa0>
 801b1f6:	686b      	ldr	r3, [r5, #4]
 801b1f8:	b353      	cbz	r3, 801b250 <rcutils_string_map_fini+0x6c>
 801b1fa:	2400      	movs	r4, #0
 801b1fc:	682a      	ldr	r2, [r5, #0]
 801b1fe:	4627      	mov	r7, r4
 801b200:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801b204:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801b208:	b1f8      	cbz	r0, 801b24a <rcutils_string_map_fini+0x66>
 801b20a:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 801b20e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801b212:	4651      	mov	r1, sl
 801b214:	47c8      	blx	r9
 801b216:	682b      	ldr	r3, [r5, #0]
 801b218:	eb03 0208 	add.w	r2, r3, r8
 801b21c:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 801b220:	6850      	ldr	r0, [r2, #4]
 801b222:	4651      	mov	r1, sl
 801b224:	47c8      	blx	r9
 801b226:	682a      	ldr	r2, [r5, #0]
 801b228:	68ab      	ldr	r3, [r5, #8]
 801b22a:	4442      	add	r2, r8
 801b22c:	3b01      	subs	r3, #1
 801b22e:	6057      	str	r7, [r2, #4]
 801b230:	60ab      	str	r3, [r5, #8]
 801b232:	6835      	ldr	r5, [r6, #0]
 801b234:	686b      	ldr	r3, [r5, #4]
 801b236:	3401      	adds	r4, #1
 801b238:	429c      	cmp	r4, r3
 801b23a:	d209      	bcs.n	801b250 <rcutils_string_map_fini+0x6c>
 801b23c:	682a      	ldr	r2, [r5, #0]
 801b23e:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801b242:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801b246:	2800      	cmp	r0, #0
 801b248:	d1df      	bne.n	801b20a <rcutils_string_map_fini+0x26>
 801b24a:	3401      	adds	r4, #1
 801b24c:	42a3      	cmp	r3, r4
 801b24e:	d8d7      	bhi.n	801b200 <rcutils_string_map_fini+0x1c>
 801b250:	2100      	movs	r1, #0
 801b252:	4630      	mov	r0, r6
 801b254:	f7ff ff34 	bl	801b0c0 <rcutils_string_map_reserve>
 801b258:	4604      	mov	r4, r0
 801b25a:	b118      	cbz	r0, 801b264 <rcutils_string_map_fini+0x80>
 801b25c:	4620      	mov	r0, r4
 801b25e:	b006      	add	sp, #24
 801b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b264:	6835      	ldr	r5, [r6, #0]
 801b266:	350c      	adds	r5, #12
 801b268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b26a:	af01      	add	r7, sp, #4
 801b26c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b26e:	682b      	ldr	r3, [r5, #0]
 801b270:	603b      	str	r3, [r7, #0]
 801b272:	a801      	add	r0, sp, #4
 801b274:	f7f5 fc70 	bl	8010b58 <rcutils_allocator_is_valid>
 801b278:	b148      	cbz	r0, 801b28e <rcutils_string_map_fini+0xaa>
 801b27a:	9b02      	ldr	r3, [sp, #8]
 801b27c:	9905      	ldr	r1, [sp, #20]
 801b27e:	6830      	ldr	r0, [r6, #0]
 801b280:	4798      	blx	r3
 801b282:	6034      	str	r4, [r6, #0]
 801b284:	2400      	movs	r4, #0
 801b286:	4620      	mov	r0, r4
 801b288:	b006      	add	sp, #24
 801b28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b28e:	240b      	movs	r4, #11
 801b290:	4620      	mov	r0, r4
 801b292:	b006      	add	sp, #24
 801b294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b298 <rcutils_string_map_getn>:
 801b298:	b338      	cbz	r0, 801b2ea <rcutils_string_map_getn+0x52>
 801b29a:	6800      	ldr	r0, [r0, #0]
 801b29c:	b328      	cbz	r0, 801b2ea <rcutils_string_map_getn+0x52>
 801b29e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2a2:	460e      	mov	r6, r1
 801b2a4:	b1c1      	cbz	r1, 801b2d8 <rcutils_string_map_getn+0x40>
 801b2a6:	e9d0 9800 	ldrd	r9, r8, [r0]
 801b2aa:	f1b8 0f00 	cmp.w	r8, #0
 801b2ae:	d013      	beq.n	801b2d8 <rcutils_string_map_getn+0x40>
 801b2b0:	4617      	mov	r7, r2
 801b2b2:	2400      	movs	r4, #0
 801b2b4:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801b2b8:	4628      	mov	r0, r5
 801b2ba:	b155      	cbz	r5, 801b2d2 <rcutils_string_map_getn+0x3a>
 801b2bc:	f7e5 f810 	bl	80002e0 <strlen>
 801b2c0:	42b8      	cmp	r0, r7
 801b2c2:	4602      	mov	r2, r0
 801b2c4:	4629      	mov	r1, r5
 801b2c6:	bf38      	it	cc
 801b2c8:	463a      	movcc	r2, r7
 801b2ca:	4630      	mov	r0, r6
 801b2cc:	f002 ff55 	bl	801e17a <strncmp>
 801b2d0:	b128      	cbz	r0, 801b2de <rcutils_string_map_getn+0x46>
 801b2d2:	3401      	adds	r4, #1
 801b2d4:	45a0      	cmp	r8, r4
 801b2d6:	d1ed      	bne.n	801b2b4 <rcutils_string_map_getn+0x1c>
 801b2d8:	2000      	movs	r0, #0
 801b2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2de:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801b2e2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801b2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2ea:	4770      	bx	lr

0801b2ec <rmw_get_zero_initialized_discovery_options>:
 801b2ec:	b510      	push	{r4, lr}
 801b2ee:	2220      	movs	r2, #32
 801b2f0:	4604      	mov	r4, r0
 801b2f2:	2100      	movs	r1, #0
 801b2f4:	f002 ff2c 	bl	801e150 <memset>
 801b2f8:	4620      	mov	r0, r4
 801b2fa:	bd10      	pop	{r4, pc}

0801b2fc <rmw_discovery_options_init>:
 801b2fc:	b328      	cbz	r0, 801b34a <rmw_discovery_options_init+0x4e>
 801b2fe:	b570      	push	{r4, r5, r6, lr}
 801b300:	4604      	mov	r4, r0
 801b302:	4610      	mov	r0, r2
 801b304:	460e      	mov	r6, r1
 801b306:	4615      	mov	r5, r2
 801b308:	f7f5 fc26 	bl	8010b58 <rcutils_allocator_is_valid>
 801b30c:	b1d8      	cbz	r0, 801b346 <rmw_discovery_options_init+0x4a>
 801b30e:	68a3      	ldr	r3, [r4, #8]
 801b310:	b9cb      	cbnz	r3, 801b346 <rmw_discovery_options_init+0x4a>
 801b312:	6863      	ldr	r3, [r4, #4]
 801b314:	b9bb      	cbnz	r3, 801b346 <rmw_discovery_options_init+0x4a>
 801b316:	7823      	ldrb	r3, [r4, #0]
 801b318:	b90b      	cbnz	r3, 801b31e <rmw_discovery_options_init+0x22>
 801b31a:	2302      	movs	r3, #2
 801b31c:	7023      	strb	r3, [r4, #0]
 801b31e:	b186      	cbz	r6, 801b342 <rmw_discovery_options_init+0x46>
 801b320:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801b324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b328:	4630      	mov	r0, r6
 801b32a:	4798      	blx	r3
 801b32c:	6060      	str	r0, [r4, #4]
 801b32e:	b170      	cbz	r0, 801b34e <rmw_discovery_options_init+0x52>
 801b330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b332:	f104 0c0c 	add.w	ip, r4, #12
 801b336:	60a6      	str	r6, [r4, #8]
 801b338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b33c:	682b      	ldr	r3, [r5, #0]
 801b33e:	f8cc 3000 	str.w	r3, [ip]
 801b342:	2000      	movs	r0, #0
 801b344:	bd70      	pop	{r4, r5, r6, pc}
 801b346:	200b      	movs	r0, #11
 801b348:	bd70      	pop	{r4, r5, r6, pc}
 801b34a:	200b      	movs	r0, #11
 801b34c:	4770      	bx	lr
 801b34e:	200a      	movs	r0, #10
 801b350:	bd70      	pop	{r4, r5, r6, pc}
 801b352:	bf00      	nop

0801b354 <rmw_get_zero_initialized_context>:
 801b354:	b530      	push	{r4, r5, lr}
 801b356:	b097      	sub	sp, #92	@ 0x5c
 801b358:	4604      	mov	r4, r0
 801b35a:	4668      	mov	r0, sp
 801b35c:	f7f5 fece 	bl	80110fc <rmw_get_zero_initialized_init_options>
 801b360:	2300      	movs	r3, #0
 801b362:	2200      	movs	r2, #0
 801b364:	e9c4 2300 	strd	r2, r3, [r4]
 801b368:	2500      	movs	r5, #0
 801b36a:	4669      	mov	r1, sp
 801b36c:	2258      	movs	r2, #88	@ 0x58
 801b36e:	f104 0010 	add.w	r0, r4, #16
 801b372:	60a5      	str	r5, [r4, #8]
 801b374:	f003 f81d 	bl	801e3b2 <memcpy>
 801b378:	4620      	mov	r0, r4
 801b37a:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 801b37e:	b017      	add	sp, #92	@ 0x5c
 801b380:	bd30      	pop	{r4, r5, pc}
 801b382:	bf00      	nop

0801b384 <rmw_time_equal>:
 801b384:	b570      	push	{r4, r5, r6, lr}
 801b386:	b084      	sub	sp, #16
 801b388:	ac04      	add	r4, sp, #16
 801b38a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b38e:	4925      	ldr	r1, [pc, #148]	@ (801b424 <rmw_time_equal+0xa0>)
 801b390:	9c01      	ldr	r4, [sp, #4]
 801b392:	2202      	movs	r2, #2
 801b394:	4281      	cmp	r1, r0
 801b396:	41a2      	sbcs	r2, r4
 801b398:	d333      	bcc.n	801b402 <rmw_time_equal+0x7e>
 801b39a:	4603      	mov	r3, r0
 801b39c:	4822      	ldr	r0, [pc, #136]	@ (801b428 <rmw_time_equal+0xa4>)
 801b39e:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 801b3a2:	fba3 3200 	umull	r3, r2, r3, r0
 801b3a6:	fb00 2204 	mla	r2, r0, r4, r2
 801b3aa:	43de      	mvns	r6, r3
 801b3ac:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b3b0:	1a84      	subs	r4, r0, r2
 801b3b2:	428e      	cmp	r6, r1
 801b3b4:	41ac      	sbcs	r4, r5
 801b3b6:	d332      	bcc.n	801b41e <rmw_time_equal+0x9a>
 801b3b8:	eb11 0e03 	adds.w	lr, r1, r3
 801b3bc:	eb42 0005 	adc.w	r0, r2, r5
 801b3c0:	9b08      	ldr	r3, [sp, #32]
 801b3c2:	4918      	ldr	r1, [pc, #96]	@ (801b424 <rmw_time_equal+0xa0>)
 801b3c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b3c6:	2202      	movs	r2, #2
 801b3c8:	4299      	cmp	r1, r3
 801b3ca:	41aa      	sbcs	r2, r5
 801b3cc:	d31e      	bcc.n	801b40c <rmw_time_equal+0x88>
 801b3ce:	4c16      	ldr	r4, [pc, #88]	@ (801b428 <rmw_time_equal+0xa4>)
 801b3d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b3d2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b3d4:	fba3 3104 	umull	r3, r1, r3, r4
 801b3d8:	fb04 1105 	mla	r1, r4, r5, r1
 801b3dc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801b3e0:	43dd      	mvns	r5, r3
 801b3e2:	ebac 0401 	sub.w	r4, ip, r1
 801b3e6:	4295      	cmp	r5, r2
 801b3e8:	41b4      	sbcs	r4, r6
 801b3ea:	d314      	bcc.n	801b416 <rmw_time_equal+0x92>
 801b3ec:	18d2      	adds	r2, r2, r3
 801b3ee:	eb41 0306 	adc.w	r3, r1, r6
 801b3f2:	4283      	cmp	r3, r0
 801b3f4:	bf08      	it	eq
 801b3f6:	4572      	cmpeq	r2, lr
 801b3f8:	bf0c      	ite	eq
 801b3fa:	2001      	moveq	r0, #1
 801b3fc:	2000      	movne	r0, #0
 801b3fe:	b004      	add	sp, #16
 801b400:	bd70      	pop	{r4, r5, r6, pc}
 801b402:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801b406:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b40a:	e7d9      	b.n	801b3c0 <rmw_time_equal+0x3c>
 801b40c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b410:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b414:	e7ed      	b.n	801b3f2 <rmw_time_equal+0x6e>
 801b416:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b41a:	4663      	mov	r3, ip
 801b41c:	e7e9      	b.n	801b3f2 <rmw_time_equal+0x6e>
 801b41e:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801b422:	e7cd      	b.n	801b3c0 <rmw_time_equal+0x3c>
 801b424:	25c17d04 	.word	0x25c17d04
 801b428:	3b9aca00 	.word	0x3b9aca00

0801b42c <rmw_time_total_nsec>:
 801b42c:	b430      	push	{r4, r5}
 801b42e:	b084      	sub	sp, #16
 801b430:	ac04      	add	r4, sp, #16
 801b432:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b436:	4914      	ldr	r1, [pc, #80]	@ (801b488 <rmw_time_total_nsec+0x5c>)
 801b438:	9c01      	ldr	r4, [sp, #4]
 801b43a:	2202      	movs	r2, #2
 801b43c:	4281      	cmp	r1, r0
 801b43e:	41a2      	sbcs	r2, r4
 801b440:	d315      	bcc.n	801b46e <rmw_time_total_nsec+0x42>
 801b442:	4912      	ldr	r1, [pc, #72]	@ (801b48c <rmw_time_total_nsec+0x60>)
 801b444:	4603      	mov	r3, r0
 801b446:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 801b44a:	fba3 3201 	umull	r3, r2, r3, r1
 801b44e:	fb01 2204 	mla	r2, r1, r4, r2
 801b452:	ea6f 0c03 	mvn.w	ip, r3
 801b456:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b45a:	1a8c      	subs	r4, r1, r2
 801b45c:	4584      	cmp	ip, r0
 801b45e:	41ac      	sbcs	r4, r5
 801b460:	d30c      	bcc.n	801b47c <rmw_time_total_nsec+0x50>
 801b462:	1818      	adds	r0, r3, r0
 801b464:	eb42 0105 	adc.w	r1, r2, r5
 801b468:	b004      	add	sp, #16
 801b46a:	bc30      	pop	{r4, r5}
 801b46c:	4770      	bx	lr
 801b46e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b472:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b476:	b004      	add	sp, #16
 801b478:	bc30      	pop	{r4, r5}
 801b47a:	4770      	bx	lr
 801b47c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b480:	b004      	add	sp, #16
 801b482:	bc30      	pop	{r4, r5}
 801b484:	4770      	bx	lr
 801b486:	bf00      	nop
 801b488:	25c17d04 	.word	0x25c17d04
 801b48c:	3b9aca00 	.word	0x3b9aca00

0801b490 <rmw_validate_full_topic_name>:
 801b490:	2800      	cmp	r0, #0
 801b492:	d049      	beq.n	801b528 <rmw_validate_full_topic_name+0x98>
 801b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b498:	460e      	mov	r6, r1
 801b49a:	2900      	cmp	r1, #0
 801b49c:	d056      	beq.n	801b54c <rmw_validate_full_topic_name+0xbc>
 801b49e:	4615      	mov	r5, r2
 801b4a0:	4604      	mov	r4, r0
 801b4a2:	f7e4 ff1d 	bl	80002e0 <strlen>
 801b4a6:	b150      	cbz	r0, 801b4be <rmw_validate_full_topic_name+0x2e>
 801b4a8:	7823      	ldrb	r3, [r4, #0]
 801b4aa:	2b2f      	cmp	r3, #47	@ 0x2f
 801b4ac:	d00c      	beq.n	801b4c8 <rmw_validate_full_topic_name+0x38>
 801b4ae:	2302      	movs	r3, #2
 801b4b0:	6033      	str	r3, [r6, #0]
 801b4b2:	b10d      	cbz	r5, 801b4b8 <rmw_validate_full_topic_name+0x28>
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	602b      	str	r3, [r5, #0]
 801b4b8:	2000      	movs	r0, #0
 801b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4be:	2301      	movs	r3, #1
 801b4c0:	6033      	str	r3, [r6, #0]
 801b4c2:	2d00      	cmp	r5, #0
 801b4c4:	d1f6      	bne.n	801b4b4 <rmw_validate_full_topic_name+0x24>
 801b4c6:	e7f7      	b.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b4c8:	1e47      	subs	r7, r0, #1
 801b4ca:	5de3      	ldrb	r3, [r4, r7]
 801b4cc:	2b2f      	cmp	r3, #47	@ 0x2f
 801b4ce:	d03f      	beq.n	801b550 <rmw_validate_full_topic_name+0xc0>
 801b4d0:	1e63      	subs	r3, r4, #1
 801b4d2:	4621      	mov	r1, r4
 801b4d4:	eb03 0e00 	add.w	lr, r3, r0
 801b4d8:	469c      	mov	ip, r3
 801b4da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801b4de:	2a5f      	cmp	r2, #95	@ 0x5f
 801b4e0:	d006      	beq.n	801b4f0 <rmw_validate_full_topic_name+0x60>
 801b4e2:	d823      	bhi.n	801b52c <rmw_validate_full_topic_name+0x9c>
 801b4e4:	2a39      	cmp	r2, #57	@ 0x39
 801b4e6:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801b4ea:	d82b      	bhi.n	801b544 <rmw_validate_full_topic_name+0xb4>
 801b4ec:	2a2e      	cmp	r2, #46	@ 0x2e
 801b4ee:	d920      	bls.n	801b532 <rmw_validate_full_topic_name+0xa2>
 801b4f0:	4573      	cmp	r3, lr
 801b4f2:	d1f1      	bne.n	801b4d8 <rmw_validate_full_topic_name+0x48>
 801b4f4:	4c21      	ldr	r4, [pc, #132]	@ (801b57c <rmw_validate_full_topic_name+0xec>)
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	e003      	b.n	801b502 <rmw_validate_full_topic_name+0x72>
 801b4fa:	4298      	cmp	r0, r3
 801b4fc:	f101 0101 	add.w	r1, r1, #1
 801b500:	d02c      	beq.n	801b55c <rmw_validate_full_topic_name+0xcc>
 801b502:	429f      	cmp	r7, r3
 801b504:	f103 0301 	add.w	r3, r3, #1
 801b508:	d0f7      	beq.n	801b4fa <rmw_validate_full_topic_name+0x6a>
 801b50a:	780a      	ldrb	r2, [r1, #0]
 801b50c:	2a2f      	cmp	r2, #47	@ 0x2f
 801b50e:	d1f4      	bne.n	801b4fa <rmw_validate_full_topic_name+0x6a>
 801b510:	784a      	ldrb	r2, [r1, #1]
 801b512:	2a2f      	cmp	r2, #47	@ 0x2f
 801b514:	d02d      	beq.n	801b572 <rmw_validate_full_topic_name+0xe2>
 801b516:	5ca2      	ldrb	r2, [r4, r2]
 801b518:	0752      	lsls	r2, r2, #29
 801b51a:	d5ee      	bpl.n	801b4fa <rmw_validate_full_topic_name+0x6a>
 801b51c:	2206      	movs	r2, #6
 801b51e:	6032      	str	r2, [r6, #0]
 801b520:	2d00      	cmp	r5, #0
 801b522:	d0c9      	beq.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b524:	602b      	str	r3, [r5, #0]
 801b526:	e7c7      	b.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b528:	200b      	movs	r0, #11
 801b52a:	4770      	bx	lr
 801b52c:	3a61      	subs	r2, #97	@ 0x61
 801b52e:	2a19      	cmp	r2, #25
 801b530:	d9de      	bls.n	801b4f0 <rmw_validate_full_topic_name+0x60>
 801b532:	2304      	movs	r3, #4
 801b534:	6033      	str	r3, [r6, #0]
 801b536:	2d00      	cmp	r5, #0
 801b538:	d0be      	beq.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b53a:	f1c4 0401 	rsb	r4, r4, #1
 801b53e:	4464      	add	r4, ip
 801b540:	602c      	str	r4, [r5, #0]
 801b542:	e7b9      	b.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b544:	f1b8 0f19 	cmp.w	r8, #25
 801b548:	d9d2      	bls.n	801b4f0 <rmw_validate_full_topic_name+0x60>
 801b54a:	e7f2      	b.n	801b532 <rmw_validate_full_topic_name+0xa2>
 801b54c:	200b      	movs	r0, #11
 801b54e:	e7b4      	b.n	801b4ba <rmw_validate_full_topic_name+0x2a>
 801b550:	2303      	movs	r3, #3
 801b552:	6033      	str	r3, [r6, #0]
 801b554:	2d00      	cmp	r5, #0
 801b556:	d0af      	beq.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b558:	602f      	str	r7, [r5, #0]
 801b55a:	e7ad      	b.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b55c:	28f7      	cmp	r0, #247	@ 0xf7
 801b55e:	d802      	bhi.n	801b566 <rmw_validate_full_topic_name+0xd6>
 801b560:	2300      	movs	r3, #0
 801b562:	6033      	str	r3, [r6, #0]
 801b564:	e7a8      	b.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b566:	2307      	movs	r3, #7
 801b568:	6033      	str	r3, [r6, #0]
 801b56a:	2d00      	cmp	r5, #0
 801b56c:	d0a4      	beq.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b56e:	23f6      	movs	r3, #246	@ 0xf6
 801b570:	e7d8      	b.n	801b524 <rmw_validate_full_topic_name+0x94>
 801b572:	2205      	movs	r2, #5
 801b574:	6032      	str	r2, [r6, #0]
 801b576:	2d00      	cmp	r5, #0
 801b578:	d1d4      	bne.n	801b524 <rmw_validate_full_topic_name+0x94>
 801b57a:	e79d      	b.n	801b4b8 <rmw_validate_full_topic_name+0x28>
 801b57c:	08021b9a 	.word	0x08021b9a

0801b580 <on_status>:
 801b580:	b082      	sub	sp, #8
 801b582:	b002      	add	sp, #8
 801b584:	4770      	bx	lr
 801b586:	bf00      	nop

0801b588 <on_topic>:
 801b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b58c:	4a22      	ldr	r2, [pc, #136]	@ (801b618 <on_topic+0x90>)
 801b58e:	b094      	sub	sp, #80	@ 0x50
 801b590:	6812      	ldr	r2, [r2, #0]
 801b592:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b594:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b598:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b59c:	b3c2      	cbz	r2, 801b610 <on_topic+0x88>
 801b59e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b5a2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b5a6:	e001      	b.n	801b5ac <on_topic+0x24>
 801b5a8:	6852      	ldr	r2, [r2, #4]
 801b5aa:	b38a      	cbz	r2, 801b610 <on_topic+0x88>
 801b5ac:	6894      	ldr	r4, [r2, #8]
 801b5ae:	8aa3      	ldrh	r3, [r4, #20]
 801b5b0:	428b      	cmp	r3, r1
 801b5b2:	d1f9      	bne.n	801b5a8 <on_topic+0x20>
 801b5b4:	7da3      	ldrb	r3, [r4, #22]
 801b5b6:	4283      	cmp	r3, r0
 801b5b8:	d1f6      	bne.n	801b5a8 <on_topic+0x20>
 801b5ba:	2248      	movs	r2, #72	@ 0x48
 801b5bc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b5c0:	4668      	mov	r0, sp
 801b5c2:	f002 fef6 	bl	801e3b2 <memcpy>
 801b5c6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b5ca:	cb0c      	ldmia	r3, {r2, r3}
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	f7f7 f807 	bl	80125e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b5d2:	4607      	mov	r7, r0
 801b5d4:	b1e0      	cbz	r0, 801b610 <on_topic+0x88>
 801b5d6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b5da:	4632      	mov	r2, r6
 801b5dc:	4628      	mov	r0, r5
 801b5de:	f108 0110 	add.w	r1, r8, #16
 801b5e2:	f7f7 ffb9 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801b5e6:	b930      	cbnz	r0, 801b5f6 <on_topic+0x6e>
 801b5e8:	480c      	ldr	r0, [pc, #48]	@ (801b61c <on_topic+0x94>)
 801b5ea:	4639      	mov	r1, r7
 801b5ec:	b014      	add	sp, #80	@ 0x50
 801b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5f2:	f000 b8bd 	b.w	801b770 <put_memory>
 801b5f6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b5fa:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b5fe:	f7f6 fded 	bl	80121dc <rmw_uros_epoch_nanos>
 801b602:	2305      	movs	r3, #5
 801b604:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b608:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b60c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b610:	b014      	add	sp, #80	@ 0x50
 801b612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b616:	bf00      	nop
 801b618:	2001d618 	.word	0x2001d618
 801b61c:	2001ce68 	.word	0x2001ce68

0801b620 <on_request>:
 801b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b624:	4823      	ldr	r0, [pc, #140]	@ (801b6b4 <on_request+0x94>)
 801b626:	b094      	sub	sp, #80	@ 0x50
 801b628:	6800      	ldr	r0, [r0, #0]
 801b62a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b62c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b630:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b632:	2800      	cmp	r0, #0
 801b634:	d03b      	beq.n	801b6ae <on_request+0x8e>
 801b636:	461d      	mov	r5, r3
 801b638:	e001      	b.n	801b63e <on_request+0x1e>
 801b63a:	6840      	ldr	r0, [r0, #4]
 801b63c:	b3b8      	cbz	r0, 801b6ae <on_request+0x8e>
 801b63e:	6884      	ldr	r4, [r0, #8]
 801b640:	8b21      	ldrh	r1, [r4, #24]
 801b642:	4291      	cmp	r1, r2
 801b644:	d1f9      	bne.n	801b63a <on_request+0x1a>
 801b646:	2248      	movs	r2, #72	@ 0x48
 801b648:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b64c:	4668      	mov	r0, sp
 801b64e:	f002 feb0 	bl	801e3b2 <memcpy>
 801b652:	f104 0320 	add.w	r3, r4, #32
 801b656:	cb0c      	ldmia	r3, {r2, r3}
 801b658:	4620      	mov	r0, r4
 801b65a:	f7f6 ffc1 	bl	80125e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b65e:	4680      	mov	r8, r0
 801b660:	b328      	cbz	r0, 801b6ae <on_request+0x8e>
 801b662:	4638      	mov	r0, r7
 801b664:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b668:	4632      	mov	r2, r6
 801b66a:	f107 0110 	add.w	r1, r7, #16
 801b66e:	f7f7 ff73 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801b672:	b930      	cbnz	r0, 801b682 <on_request+0x62>
 801b674:	4810      	ldr	r0, [pc, #64]	@ (801b6b8 <on_request+0x98>)
 801b676:	4641      	mov	r1, r8
 801b678:	b014      	add	sp, #80	@ 0x50
 801b67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b67e:	f000 b877 	b.w	801b770 <put_memory>
 801b682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b684:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b688:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b68c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b690:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b694:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b698:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b69c:	f7f6 fd9e 	bl	80121dc <rmw_uros_epoch_nanos>
 801b6a0:	2303      	movs	r3, #3
 801b6a2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b6a6:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b6aa:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b6ae:	b014      	add	sp, #80	@ 0x50
 801b6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6b4:	2001d1d0 	.word	0x2001d1d0
 801b6b8:	2001ce68 	.word	0x2001ce68

0801b6bc <on_reply>:
 801b6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c0:	4821      	ldr	r0, [pc, #132]	@ (801b748 <on_reply+0x8c>)
 801b6c2:	b094      	sub	sp, #80	@ 0x50
 801b6c4:	6800      	ldr	r0, [r0, #0]
 801b6c6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b6c8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b6cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b6ce:	b3b8      	cbz	r0, 801b740 <on_reply+0x84>
 801b6d0:	461d      	mov	r5, r3
 801b6d2:	e001      	b.n	801b6d8 <on_reply+0x1c>
 801b6d4:	6840      	ldr	r0, [r0, #4]
 801b6d6:	b398      	cbz	r0, 801b740 <on_reply+0x84>
 801b6d8:	6884      	ldr	r4, [r0, #8]
 801b6da:	8b21      	ldrh	r1, [r4, #24]
 801b6dc:	4291      	cmp	r1, r2
 801b6de:	d1f9      	bne.n	801b6d4 <on_reply+0x18>
 801b6e0:	2248      	movs	r2, #72	@ 0x48
 801b6e2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b6e6:	4668      	mov	r0, sp
 801b6e8:	f002 fe63 	bl	801e3b2 <memcpy>
 801b6ec:	f104 0320 	add.w	r3, r4, #32
 801b6f0:	cb0c      	ldmia	r3, {r2, r3}
 801b6f2:	4620      	mov	r0, r4
 801b6f4:	f7f6 ff74 	bl	80125e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b6f8:	4680      	mov	r8, r0
 801b6fa:	b308      	cbz	r0, 801b740 <on_reply+0x84>
 801b6fc:	4638      	mov	r0, r7
 801b6fe:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b702:	4632      	mov	r2, r6
 801b704:	f107 0110 	add.w	r1, r7, #16
 801b708:	f7f7 ff26 	bl	8013558 <ucdr_deserialize_array_uint8_t>
 801b70c:	b930      	cbnz	r0, 801b71c <on_reply+0x60>
 801b70e:	480f      	ldr	r0, [pc, #60]	@ (801b74c <on_reply+0x90>)
 801b710:	4641      	mov	r1, r8
 801b712:	b014      	add	sp, #80	@ 0x50
 801b714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b718:	f000 b82a 	b.w	801b770 <put_memory>
 801b71c:	2200      	movs	r2, #0
 801b71e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b722:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b726:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b72a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b72e:	f7f6 fd55 	bl	80121dc <rmw_uros_epoch_nanos>
 801b732:	2304      	movs	r3, #4
 801b734:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b738:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b73c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b740:	b014      	add	sp, #80	@ 0x50
 801b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b746:	bf00      	nop
 801b748:	2001d0f8 	.word	0x2001d0f8
 801b74c:	2001ce68 	.word	0x2001ce68

0801b750 <get_memory>:
 801b750:	4603      	mov	r3, r0
 801b752:	6840      	ldr	r0, [r0, #4]
 801b754:	b158      	cbz	r0, 801b76e <get_memory+0x1e>
 801b756:	6842      	ldr	r2, [r0, #4]
 801b758:	605a      	str	r2, [r3, #4]
 801b75a:	b10a      	cbz	r2, 801b760 <get_memory+0x10>
 801b75c:	2100      	movs	r1, #0
 801b75e:	6011      	str	r1, [r2, #0]
 801b760:	681a      	ldr	r2, [r3, #0]
 801b762:	6042      	str	r2, [r0, #4]
 801b764:	b102      	cbz	r2, 801b768 <get_memory+0x18>
 801b766:	6010      	str	r0, [r2, #0]
 801b768:	2200      	movs	r2, #0
 801b76a:	6002      	str	r2, [r0, #0]
 801b76c:	6018      	str	r0, [r3, #0]
 801b76e:	4770      	bx	lr

0801b770 <put_memory>:
 801b770:	680b      	ldr	r3, [r1, #0]
 801b772:	b10b      	cbz	r3, 801b778 <put_memory+0x8>
 801b774:	684a      	ldr	r2, [r1, #4]
 801b776:	605a      	str	r2, [r3, #4]
 801b778:	684a      	ldr	r2, [r1, #4]
 801b77a:	b102      	cbz	r2, 801b77e <put_memory+0xe>
 801b77c:	6013      	str	r3, [r2, #0]
 801b77e:	6803      	ldr	r3, [r0, #0]
 801b780:	428b      	cmp	r3, r1
 801b782:	6843      	ldr	r3, [r0, #4]
 801b784:	bf08      	it	eq
 801b786:	6002      	streq	r2, [r0, #0]
 801b788:	604b      	str	r3, [r1, #4]
 801b78a:	b103      	cbz	r3, 801b78e <put_memory+0x1e>
 801b78c:	6019      	str	r1, [r3, #0]
 801b78e:	2300      	movs	r3, #0
 801b790:	600b      	str	r3, [r1, #0]
 801b792:	6041      	str	r1, [r0, #4]
 801b794:	4770      	bx	lr
 801b796:	bf00      	nop

0801b798 <rmw_destroy_client>:
 801b798:	b570      	push	{r4, r5, r6, lr}
 801b79a:	b128      	cbz	r0, 801b7a8 <rmw_destroy_client+0x10>
 801b79c:	4604      	mov	r4, r0
 801b79e:	6800      	ldr	r0, [r0, #0]
 801b7a0:	460d      	mov	r5, r1
 801b7a2:	f7f7 f8a1 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 801b7a6:	b910      	cbnz	r0, 801b7ae <rmw_destroy_client+0x16>
 801b7a8:	2401      	movs	r4, #1
 801b7aa:	4620      	mov	r0, r4
 801b7ac:	bd70      	pop	{r4, r5, r6, pc}
 801b7ae:	6863      	ldr	r3, [r4, #4]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d0f9      	beq.n	801b7a8 <rmw_destroy_client+0x10>
 801b7b4:	2d00      	cmp	r5, #0
 801b7b6:	d0f7      	beq.n	801b7a8 <rmw_destroy_client+0x10>
 801b7b8:	6828      	ldr	r0, [r5, #0]
 801b7ba:	f7f7 f895 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 801b7be:	2800      	cmp	r0, #0
 801b7c0:	d0f2      	beq.n	801b7a8 <rmw_destroy_client+0x10>
 801b7c2:	686e      	ldr	r6, [r5, #4]
 801b7c4:	2e00      	cmp	r6, #0
 801b7c6:	d0ef      	beq.n	801b7a8 <rmw_destroy_client+0x10>
 801b7c8:	6864      	ldr	r4, [r4, #4]
 801b7ca:	6932      	ldr	r2, [r6, #16]
 801b7cc:	6920      	ldr	r0, [r4, #16]
 801b7ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b7d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b7d6:	6819      	ldr	r1, [r3, #0]
 801b7d8:	f7f9 fe10 	bl	80153fc <uxr_buffer_cancel_data>
 801b7dc:	4602      	mov	r2, r0
 801b7de:	6920      	ldr	r0, [r4, #16]
 801b7e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b7e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b7e8:	f7f6 fff8 	bl	80127dc <run_xrce_session>
 801b7ec:	6920      	ldr	r0, [r4, #16]
 801b7ee:	6932      	ldr	r2, [r6, #16]
 801b7f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b7f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b7f8:	6819      	ldr	r1, [r3, #0]
 801b7fa:	f7f9 faff 	bl	8014dfc <uxr_buffer_delete_entity>
 801b7fe:	4602      	mov	r2, r0
 801b800:	6920      	ldr	r0, [r4, #16]
 801b802:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b806:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b80a:	f7f6 ffe7 	bl	80127dc <run_xrce_session>
 801b80e:	f080 0401 	eor.w	r4, r0, #1
 801b812:	b2e4      	uxtb	r4, r4
 801b814:	4628      	mov	r0, r5
 801b816:	0064      	lsls	r4, r4, #1
 801b818:	f7f6 fec0 	bl	801259c <rmw_uxrce_fini_client_memory>
 801b81c:	e7c5      	b.n	801b7aa <rmw_destroy_client+0x12>
 801b81e:	bf00      	nop

0801b820 <rmw_get_gid_for_client>:
 801b820:	b1a8      	cbz	r0, 801b84e <rmw_get_gid_for_client+0x2e>
 801b822:	b538      	push	{r3, r4, r5, lr}
 801b824:	460c      	mov	r4, r1
 801b826:	b1a1      	cbz	r1, 801b852 <rmw_get_gid_for_client+0x32>
 801b828:	4605      	mov	r5, r0
 801b82a:	6800      	ldr	r0, [r0, #0]
 801b82c:	b120      	cbz	r0, 801b838 <rmw_get_gid_for_client+0x18>
 801b82e:	4b0a      	ldr	r3, [pc, #40]	@ (801b858 <rmw_get_gid_for_client+0x38>)
 801b830:	6819      	ldr	r1, [r3, #0]
 801b832:	f7e4 fcf5 	bl	8000220 <strcmp>
 801b836:	b940      	cbnz	r0, 801b84a <rmw_get_gid_for_client+0x2a>
 801b838:	686b      	ldr	r3, [r5, #4]
 801b83a:	2000      	movs	r0, #0
 801b83c:	6060      	str	r0, [r4, #4]
 801b83e:	60a0      	str	r0, [r4, #8]
 801b840:	60e0      	str	r0, [r4, #12]
 801b842:	6120      	str	r0, [r4, #16]
 801b844:	691b      	ldr	r3, [r3, #16]
 801b846:	6063      	str	r3, [r4, #4]
 801b848:	bd38      	pop	{r3, r4, r5, pc}
 801b84a:	200c      	movs	r0, #12
 801b84c:	bd38      	pop	{r3, r4, r5, pc}
 801b84e:	200b      	movs	r0, #11
 801b850:	4770      	bx	lr
 801b852:	200b      	movs	r0, #11
 801b854:	bd38      	pop	{r3, r4, r5, pc}
 801b856:	bf00      	nop
 801b858:	08021774 	.word	0x08021774

0801b85c <rmw_get_implementation_identifier>:
 801b85c:	4b01      	ldr	r3, [pc, #4]	@ (801b864 <rmw_get_implementation_identifier+0x8>)
 801b85e:	6818      	ldr	r0, [r3, #0]
 801b860:	4770      	bx	lr
 801b862:	bf00      	nop
 801b864:	08021774 	.word	0x08021774

0801b868 <rmw_create_guard_condition>:
 801b868:	b538      	push	{r3, r4, r5, lr}
 801b86a:	4605      	mov	r5, r0
 801b86c:	4807      	ldr	r0, [pc, #28]	@ (801b88c <rmw_create_guard_condition+0x24>)
 801b86e:	f7ff ff6f 	bl	801b750 <get_memory>
 801b872:	b148      	cbz	r0, 801b888 <rmw_create_guard_condition+0x20>
 801b874:	6884      	ldr	r4, [r0, #8]
 801b876:	2300      	movs	r3, #0
 801b878:	7423      	strb	r3, [r4, #16]
 801b87a:	61e5      	str	r5, [r4, #28]
 801b87c:	f7ff ffee 	bl	801b85c <rmw_get_implementation_identifier>
 801b880:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b884:	f104 0014 	add.w	r0, r4, #20
 801b888:	bd38      	pop	{r3, r4, r5, pc}
 801b88a:	bf00      	nop
 801b88c:	2001ac40 	.word	0x2001ac40

0801b890 <rmw_destroy_guard_condition>:
 801b890:	b508      	push	{r3, lr}
 801b892:	4b08      	ldr	r3, [pc, #32]	@ (801b8b4 <rmw_destroy_guard_condition+0x24>)
 801b894:	6819      	ldr	r1, [r3, #0]
 801b896:	b911      	cbnz	r1, 801b89e <rmw_destroy_guard_condition+0xe>
 801b898:	e00a      	b.n	801b8b0 <rmw_destroy_guard_condition+0x20>
 801b89a:	6849      	ldr	r1, [r1, #4]
 801b89c:	b141      	cbz	r1, 801b8b0 <rmw_destroy_guard_condition+0x20>
 801b89e:	688b      	ldr	r3, [r1, #8]
 801b8a0:	3314      	adds	r3, #20
 801b8a2:	4298      	cmp	r0, r3
 801b8a4:	d1f9      	bne.n	801b89a <rmw_destroy_guard_condition+0xa>
 801b8a6:	4803      	ldr	r0, [pc, #12]	@ (801b8b4 <rmw_destroy_guard_condition+0x24>)
 801b8a8:	f7ff ff62 	bl	801b770 <put_memory>
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	bd08      	pop	{r3, pc}
 801b8b0:	2001      	movs	r0, #1
 801b8b2:	bd08      	pop	{r3, pc}
 801b8b4:	2001ac40 	.word	0x2001ac40

0801b8b8 <create_topic>:
 801b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8bc:	4604      	mov	r4, r0
 801b8be:	b084      	sub	sp, #16
 801b8c0:	4824      	ldr	r0, [pc, #144]	@ (801b954 <create_topic+0x9c>)
 801b8c2:	460f      	mov	r7, r1
 801b8c4:	4616      	mov	r6, r2
 801b8c6:	f7ff ff43 	bl	801b750 <get_memory>
 801b8ca:	2800      	cmp	r0, #0
 801b8cc:	d03c      	beq.n	801b948 <create_topic+0x90>
 801b8ce:	6923      	ldr	r3, [r4, #16]
 801b8d0:	6885      	ldr	r5, [r0, #8]
 801b8d2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801b95c <create_topic+0xa4>
 801b8d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b8da:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801b8de:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801b8e2:	1c42      	adds	r2, r0, #1
 801b8e4:	2102      	movs	r1, #2
 801b8e6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801b8ea:	f7f9 fd21 	bl	8015330 <uxr_object_id>
 801b8ee:	223c      	movs	r2, #60	@ 0x3c
 801b8f0:	6128      	str	r0, [r5, #16]
 801b8f2:	4641      	mov	r1, r8
 801b8f4:	4638      	mov	r0, r7
 801b8f6:	f7f6 ffdd 	bl	80128b4 <generate_topic_name>
 801b8fa:	b310      	cbz	r0, 801b942 <create_topic+0x8a>
 801b8fc:	4f16      	ldr	r7, [pc, #88]	@ (801b958 <create_topic+0xa0>)
 801b8fe:	4630      	mov	r0, r6
 801b900:	2264      	movs	r2, #100	@ 0x64
 801b902:	4639      	mov	r1, r7
 801b904:	f7f6 ffa6 	bl	8012854 <generate_type_name>
 801b908:	b1d8      	cbz	r0, 801b942 <create_topic+0x8a>
 801b90a:	6920      	ldr	r0, [r4, #16]
 801b90c:	2306      	movs	r3, #6
 801b90e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801b912:	f8cd 8000 	str.w	r8, [sp]
 801b916:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801b91a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b91e:	6811      	ldr	r1, [r2, #0]
 801b920:	6963      	ldr	r3, [r4, #20]
 801b922:	692a      	ldr	r2, [r5, #16]
 801b924:	f7f9 fae6 	bl	8014ef4 <uxr_buffer_create_topic_bin>
 801b928:	4602      	mov	r2, r0
 801b92a:	6920      	ldr	r0, [r4, #16]
 801b92c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801b930:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801b934:	f7f6 ff52 	bl	80127dc <run_xrce_session>
 801b938:	b118      	cbz	r0, 801b942 <create_topic+0x8a>
 801b93a:	4628      	mov	r0, r5
 801b93c:	b004      	add	sp, #16
 801b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b942:	4628      	mov	r0, r5
 801b944:	f7f6 fe40 	bl	80125c8 <rmw_uxrce_fini_topic_memory>
 801b948:	2500      	movs	r5, #0
 801b94a:	4628      	mov	r0, r5
 801b94c:	b004      	add	sp, #16
 801b94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b952:	bf00      	nop
 801b954:	2001d01c 	.word	0x2001d01c
 801b958:	2001f5e8 	.word	0x2001f5e8
 801b95c:	2001f64c 	.word	0x2001f64c

0801b960 <destroy_topic>:
 801b960:	b538      	push	{r3, r4, r5, lr}
 801b962:	6984      	ldr	r4, [r0, #24]
 801b964:	b1d4      	cbz	r4, 801b99c <destroy_topic+0x3c>
 801b966:	4605      	mov	r5, r0
 801b968:	6920      	ldr	r0, [r4, #16]
 801b96a:	692a      	ldr	r2, [r5, #16]
 801b96c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b970:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b974:	6819      	ldr	r1, [r3, #0]
 801b976:	f7f9 fa41 	bl	8014dfc <uxr_buffer_delete_entity>
 801b97a:	4602      	mov	r2, r0
 801b97c:	6920      	ldr	r0, [r4, #16]
 801b97e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b982:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b986:	f7f6 ff29 	bl	80127dc <run_xrce_session>
 801b98a:	f080 0401 	eor.w	r4, r0, #1
 801b98e:	b2e4      	uxtb	r4, r4
 801b990:	4628      	mov	r0, r5
 801b992:	0064      	lsls	r4, r4, #1
 801b994:	f7f6 fe18 	bl	80125c8 <rmw_uxrce_fini_topic_memory>
 801b998:	4620      	mov	r0, r4
 801b99a:	bd38      	pop	{r3, r4, r5, pc}
 801b99c:	2401      	movs	r4, #1
 801b99e:	4620      	mov	r0, r4
 801b9a0:	bd38      	pop	{r3, r4, r5, pc}
 801b9a2:	bf00      	nop

0801b9a4 <rmw_send_request>:
 801b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9a8:	4604      	mov	r4, r0
 801b9aa:	6800      	ldr	r0, [r0, #0]
 801b9ac:	b08a      	sub	sp, #40	@ 0x28
 801b9ae:	460e      	mov	r6, r1
 801b9b0:	4615      	mov	r5, r2
 801b9b2:	b128      	cbz	r0, 801b9c0 <rmw_send_request+0x1c>
 801b9b4:	4b1e      	ldr	r3, [pc, #120]	@ (801ba30 <rmw_send_request+0x8c>)
 801b9b6:	6819      	ldr	r1, [r3, #0]
 801b9b8:	f7e4 fc32 	bl	8000220 <strcmp>
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	d133      	bne.n	801ba28 <rmw_send_request+0x84>
 801b9c0:	6864      	ldr	r4, [r4, #4]
 801b9c2:	6963      	ldr	r3, [r4, #20]
 801b9c4:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801b9c6:	689b      	ldr	r3, [r3, #8]
 801b9c8:	4798      	blx	r3
 801b9ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b9ce:	4630      	mov	r0, r6
 801b9d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b9d4:	4798      	blx	r3
 801b9d6:	693b      	ldr	r3, [r7, #16]
 801b9d8:	9000      	str	r0, [sp, #0]
 801b9da:	6922      	ldr	r2, [r4, #16]
 801b9dc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801b9de:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801b9e2:	ab02      	add	r3, sp, #8
 801b9e4:	f7fb fd36 	bl	8017454 <uxr_prepare_output_stream>
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	6028      	str	r0, [r5, #0]
 801b9ec:	606b      	str	r3, [r5, #4]
 801b9ee:	b190      	cbz	r0, 801ba16 <rmw_send_request+0x72>
 801b9f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b9f4:	a902      	add	r1, sp, #8
 801b9f6:	4630      	mov	r0, r6
 801b9f8:	4798      	blx	r3
 801b9fa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801b9fe:	6938      	ldr	r0, [r7, #16]
 801ba00:	2b01      	cmp	r3, #1
 801ba02:	d00c      	beq.n	801ba1e <rmw_send_request+0x7a>
 801ba04:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801ba06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ba0a:	f7fa fa8d 	bl	8015f28 <uxr_run_session_until_confirm_delivery>
 801ba0e:	2000      	movs	r0, #0
 801ba10:	b00a      	add	sp, #40	@ 0x28
 801ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba16:	2001      	movs	r0, #1
 801ba18:	b00a      	add	sp, #40	@ 0x28
 801ba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ba22:	f7f9 fee9 	bl	80157f8 <uxr_flash_output_streams>
 801ba26:	e7f2      	b.n	801ba0e <rmw_send_request+0x6a>
 801ba28:	200c      	movs	r0, #12
 801ba2a:	b00a      	add	sp, #40	@ 0x28
 801ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba30:	08021774 	.word	0x08021774

0801ba34 <rmw_take_request>:
 801ba34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba38:	4605      	mov	r5, r0
 801ba3a:	6800      	ldr	r0, [r0, #0]
 801ba3c:	b089      	sub	sp, #36	@ 0x24
 801ba3e:	460c      	mov	r4, r1
 801ba40:	4690      	mov	r8, r2
 801ba42:	461e      	mov	r6, r3
 801ba44:	b128      	cbz	r0, 801ba52 <rmw_take_request+0x1e>
 801ba46:	4b28      	ldr	r3, [pc, #160]	@ (801bae8 <rmw_take_request+0xb4>)
 801ba48:	6819      	ldr	r1, [r3, #0]
 801ba4a:	f7e4 fbe9 	bl	8000220 <strcmp>
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d146      	bne.n	801bae0 <rmw_take_request+0xac>
 801ba52:	b10e      	cbz	r6, 801ba58 <rmw_take_request+0x24>
 801ba54:	2300      	movs	r3, #0
 801ba56:	7033      	strb	r3, [r6, #0]
 801ba58:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801ba5c:	f7f6 fe40 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801ba60:	4648      	mov	r0, r9
 801ba62:	f7f6 fe15 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ba66:	4607      	mov	r7, r0
 801ba68:	b3b0      	cbz	r0, 801bad8 <rmw_take_request+0xa4>
 801ba6a:	6885      	ldr	r5, [r0, #8]
 801ba6c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801ba70:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801ba74:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801ba78:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801ba7c:	7423      	strb	r3, [r4, #16]
 801ba7e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801ba82:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801ba86:	74e2      	strb	r2, [r4, #19]
 801ba88:	f8a4 3011 	strh.w	r3, [r4, #17]
 801ba8c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801ba90:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801ba94:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801ba98:	61e1      	str	r1, [r4, #28]
 801ba9a:	6162      	str	r2, [r4, #20]
 801ba9c:	61a3      	str	r3, [r4, #24]
 801ba9e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801baa2:	689b      	ldr	r3, [r3, #8]
 801baa4:	4798      	blx	r3
 801baa6:	6844      	ldr	r4, [r0, #4]
 801baa8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801baac:	f105 0110 	add.w	r1, r5, #16
 801bab0:	4668      	mov	r0, sp
 801bab2:	f7f2 ff67 	bl	800e984 <ucdr_init_buffer>
 801bab6:	68e3      	ldr	r3, [r4, #12]
 801bab8:	4641      	mov	r1, r8
 801baba:	4668      	mov	r0, sp
 801babc:	4798      	blx	r3
 801babe:	4639      	mov	r1, r7
 801bac0:	4604      	mov	r4, r0
 801bac2:	480a      	ldr	r0, [pc, #40]	@ (801baec <rmw_take_request+0xb8>)
 801bac4:	f7ff fe54 	bl	801b770 <put_memory>
 801bac8:	b106      	cbz	r6, 801bacc <rmw_take_request+0x98>
 801baca:	7034      	strb	r4, [r6, #0]
 801bacc:	f084 0001 	eor.w	r0, r4, #1
 801bad0:	b2c0      	uxtb	r0, r0
 801bad2:	b009      	add	sp, #36	@ 0x24
 801bad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bad8:	2001      	movs	r0, #1
 801bada:	b009      	add	sp, #36	@ 0x24
 801badc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bae0:	200c      	movs	r0, #12
 801bae2:	b009      	add	sp, #36	@ 0x24
 801bae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bae8:	08021774 	.word	0x08021774
 801baec:	2001ce68 	.word	0x2001ce68

0801baf0 <rmw_send_response>:
 801baf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baf2:	4605      	mov	r5, r0
 801baf4:	6800      	ldr	r0, [r0, #0]
 801baf6:	b091      	sub	sp, #68	@ 0x44
 801baf8:	460c      	mov	r4, r1
 801bafa:	4616      	mov	r6, r2
 801bafc:	b128      	cbz	r0, 801bb0a <rmw_send_response+0x1a>
 801bafe:	4b28      	ldr	r3, [pc, #160]	@ (801bba0 <rmw_send_response+0xb0>)
 801bb00:	6819      	ldr	r1, [r3, #0]
 801bb02:	f7e4 fb8d 	bl	8000220 <strcmp>
 801bb06:	2800      	cmp	r0, #0
 801bb08:	d141      	bne.n	801bb8e <rmw_send_response+0x9e>
 801bb0a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801bb0e:	9306      	str	r3, [sp, #24]
 801bb10:	4623      	mov	r3, r4
 801bb12:	9207      	str	r2, [sp, #28]
 801bb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb18:	686d      	ldr	r5, [r5, #4]
 801bb1a:	789b      	ldrb	r3, [r3, #2]
 801bb1c:	68a1      	ldr	r1, [r4, #8]
 801bb1e:	f88d 2017 	strb.w	r2, [sp, #23]
 801bb22:	f88d 3016 	strb.w	r3, [sp, #22]
 801bb26:	68e2      	ldr	r2, [r4, #12]
 801bb28:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801bb2c:	6860      	ldr	r0, [r4, #4]
 801bb2e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bb32:	ab02      	add	r3, sp, #8
 801bb34:	c307      	stmia	r3!, {r0, r1, r2}
 801bb36:	696b      	ldr	r3, [r5, #20]
 801bb38:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801bb3a:	68db      	ldr	r3, [r3, #12]
 801bb3c:	4798      	blx	r3
 801bb3e:	6844      	ldr	r4, [r0, #4]
 801bb40:	4630      	mov	r0, r6
 801bb42:	6923      	ldr	r3, [r4, #16]
 801bb44:	4798      	blx	r3
 801bb46:	f100 0318 	add.w	r3, r0, #24
 801bb4a:	6938      	ldr	r0, [r7, #16]
 801bb4c:	9300      	str	r3, [sp, #0]
 801bb4e:	692a      	ldr	r2, [r5, #16]
 801bb50:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801bb52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bb56:	ab08      	add	r3, sp, #32
 801bb58:	f7fb fc7c 	bl	8017454 <uxr_prepare_output_stream>
 801bb5c:	b910      	cbnz	r0, 801bb64 <rmw_send_response+0x74>
 801bb5e:	2001      	movs	r0, #1
 801bb60:	b011      	add	sp, #68	@ 0x44
 801bb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb64:	a902      	add	r1, sp, #8
 801bb66:	a808      	add	r0, sp, #32
 801bb68:	f7fc fd92 	bl	8018690 <uxr_serialize_SampleIdentity>
 801bb6c:	68a3      	ldr	r3, [r4, #8]
 801bb6e:	a908      	add	r1, sp, #32
 801bb70:	4630      	mov	r0, r6
 801bb72:	4798      	blx	r3
 801bb74:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801bb78:	6938      	ldr	r0, [r7, #16]
 801bb7a:	2b01      	cmp	r3, #1
 801bb7c:	d00a      	beq.n	801bb94 <rmw_send_response+0xa4>
 801bb7e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801bb80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bb84:	f7fa f9d0 	bl	8015f28 <uxr_run_session_until_confirm_delivery>
 801bb88:	2000      	movs	r0, #0
 801bb8a:	b011      	add	sp, #68	@ 0x44
 801bb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb8e:	200c      	movs	r0, #12
 801bb90:	b011      	add	sp, #68	@ 0x44
 801bb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bb98:	f7f9 fe2e 	bl	80157f8 <uxr_flash_output_streams>
 801bb9c:	e7f4      	b.n	801bb88 <rmw_send_response+0x98>
 801bb9e:	bf00      	nop
 801bba0:	08021774 	.word	0x08021774

0801bba4 <rmw_take_response>:
 801bba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bba8:	4604      	mov	r4, r0
 801bbaa:	6800      	ldr	r0, [r0, #0]
 801bbac:	b088      	sub	sp, #32
 801bbae:	4688      	mov	r8, r1
 801bbb0:	4617      	mov	r7, r2
 801bbb2:	461d      	mov	r5, r3
 801bbb4:	b120      	cbz	r0, 801bbc0 <rmw_take_response+0x1c>
 801bbb6:	4b1e      	ldr	r3, [pc, #120]	@ (801bc30 <rmw_take_response+0x8c>)
 801bbb8:	6819      	ldr	r1, [r3, #0]
 801bbba:	f7e4 fb31 	bl	8000220 <strcmp>
 801bbbe:	bb78      	cbnz	r0, 801bc20 <rmw_take_response+0x7c>
 801bbc0:	b10d      	cbz	r5, 801bbc6 <rmw_take_response+0x22>
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	702b      	strb	r3, [r5, #0]
 801bbc6:	6864      	ldr	r4, [r4, #4]
 801bbc8:	f7f6 fd8a 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801bbcc:	4620      	mov	r0, r4
 801bbce:	f7f6 fd5f 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bbd2:	4606      	mov	r6, r0
 801bbd4:	b340      	cbz	r0, 801bc28 <rmw_take_response+0x84>
 801bbd6:	6963      	ldr	r3, [r4, #20]
 801bbd8:	6884      	ldr	r4, [r0, #8]
 801bbda:	68db      	ldr	r3, [r3, #12]
 801bbdc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801bbe0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801bbe4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801bbe8:	4798      	blx	r3
 801bbea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801bbee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801bbf2:	f104 0110 	add.w	r1, r4, #16
 801bbf6:	4668      	mov	r0, sp
 801bbf8:	f7f2 fec4 	bl	800e984 <ucdr_init_buffer>
 801bbfc:	4639      	mov	r1, r7
 801bbfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bc02:	4668      	mov	r0, sp
 801bc04:	4798      	blx	r3
 801bc06:	4631      	mov	r1, r6
 801bc08:	4604      	mov	r4, r0
 801bc0a:	480a      	ldr	r0, [pc, #40]	@ (801bc34 <rmw_take_response+0x90>)
 801bc0c:	f7ff fdb0 	bl	801b770 <put_memory>
 801bc10:	b105      	cbz	r5, 801bc14 <rmw_take_response+0x70>
 801bc12:	702c      	strb	r4, [r5, #0]
 801bc14:	f084 0001 	eor.w	r0, r4, #1
 801bc18:	b2c0      	uxtb	r0, r0
 801bc1a:	b008      	add	sp, #32
 801bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc20:	200c      	movs	r0, #12
 801bc22:	b008      	add	sp, #32
 801bc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc28:	2001      	movs	r0, #1
 801bc2a:	b008      	add	sp, #32
 801bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc30:	08021774 	.word	0x08021774
 801bc34:	2001ce68 	.word	0x2001ce68

0801bc38 <rmw_trigger_guard_condition>:
 801bc38:	b160      	cbz	r0, 801bc54 <rmw_trigger_guard_condition+0x1c>
 801bc3a:	b510      	push	{r4, lr}
 801bc3c:	4604      	mov	r4, r0
 801bc3e:	6800      	ldr	r0, [r0, #0]
 801bc40:	f7f6 fe52 	bl	80128e8 <is_uxrce_rmw_identifier_valid>
 801bc44:	b908      	cbnz	r0, 801bc4a <rmw_trigger_guard_condition+0x12>
 801bc46:	2001      	movs	r0, #1
 801bc48:	bd10      	pop	{r4, pc}
 801bc4a:	6863      	ldr	r3, [r4, #4]
 801bc4c:	2201      	movs	r2, #1
 801bc4e:	741a      	strb	r2, [r3, #16]
 801bc50:	2000      	movs	r0, #0
 801bc52:	bd10      	pop	{r4, pc}
 801bc54:	2001      	movs	r0, #1
 801bc56:	4770      	bx	lr

0801bc58 <rmw_wait>:
 801bc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc5c:	b089      	sub	sp, #36	@ 0x24
 801bc5e:	4607      	mov	r7, r0
 801bc60:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bc62:	460e      	mov	r6, r1
 801bc64:	4698      	mov	r8, r3
 801bc66:	4691      	mov	r9, r2
 801bc68:	2a00      	cmp	r2, #0
 801bc6a:	f000 811e 	beq.w	801beaa <rmw_wait+0x252>
 801bc6e:	2c00      	cmp	r4, #0
 801bc70:	f000 80ef 	beq.w	801be52 <rmw_wait+0x1fa>
 801bc74:	4bb5      	ldr	r3, [pc, #724]	@ (801bf4c <rmw_wait+0x2f4>)
 801bc76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bc78:	ad04      	add	r5, sp, #16
 801bc7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801bc7e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bc82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bc86:	f7ff fb7d 	bl	801b384 <rmw_time_equal>
 801bc8a:	2800      	cmp	r0, #0
 801bc8c:	f000 811b 	beq.w	801bec6 <rmw_wait+0x26e>
 801bc90:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bc94:	f7f6 fd24 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801bc98:	4bad      	ldr	r3, [pc, #692]	@ (801bf50 <rmw_wait+0x2f8>)
 801bc9a:	681c      	ldr	r4, [r3, #0]
 801bc9c:	b14c      	cbz	r4, 801bcb2 <rmw_wait+0x5a>
 801bc9e:	4623      	mov	r3, r4
 801bca0:	2100      	movs	r1, #0
 801bca2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801bca6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bcaa:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d1f7      	bne.n	801bca2 <rmw_wait+0x4a>
 801bcb2:	f1b9 0f00 	cmp.w	r9, #0
 801bcb6:	d011      	beq.n	801bcdc <rmw_wait+0x84>
 801bcb8:	f8d9 1000 	ldr.w	r1, [r9]
 801bcbc:	b171      	cbz	r1, 801bcdc <rmw_wait+0x84>
 801bcbe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	2001      	movs	r0, #1
 801bcc6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bcca:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801bccc:	6912      	ldr	r2, [r2, #16]
 801bcce:	3301      	adds	r3, #1
 801bcd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bcd4:	4299      	cmp	r1, r3
 801bcd6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bcda:	d1f4      	bne.n	801bcc6 <rmw_wait+0x6e>
 801bcdc:	f1b8 0f00 	cmp.w	r8, #0
 801bce0:	f000 8109 	beq.w	801bef6 <rmw_wait+0x29e>
 801bce4:	f8d8 1000 	ldr.w	r1, [r8]
 801bce8:	2900      	cmp	r1, #0
 801bcea:	f000 8116 	beq.w	801bf1a <rmw_wait+0x2c2>
 801bcee:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	2001      	movs	r0, #1
 801bcf6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bcfa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801bcfc:	6912      	ldr	r2, [r2, #16]
 801bcfe:	3301      	adds	r3, #1
 801bd00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bd04:	4299      	cmp	r1, r3
 801bd06:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bd0a:	d1f4      	bne.n	801bcf6 <rmw_wait+0x9e>
 801bd0c:	2f00      	cmp	r7, #0
 801bd0e:	f000 8114 	beq.w	801bf3a <rmw_wait+0x2e2>
 801bd12:	6839      	ldr	r1, [r7, #0]
 801bd14:	b171      	cbz	r1, 801bd34 <rmw_wait+0xdc>
 801bd16:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	2001      	movs	r0, #1
 801bd1e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bd22:	6a12      	ldr	r2, [r2, #32]
 801bd24:	6912      	ldr	r2, [r2, #16]
 801bd26:	3301      	adds	r3, #1
 801bd28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801bd2c:	4299      	cmp	r1, r3
 801bd2e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801bd32:	d1f4      	bne.n	801bd1e <rmw_wait+0xc6>
 801bd34:	b344      	cbz	r4, 801bd88 <rmw_wait+0x130>
 801bd36:	4622      	mov	r2, r4
 801bd38:	2300      	movs	r3, #0
 801bd3a:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801bd3e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801bd42:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801bd46:	440b      	add	r3, r1
 801bd48:	b2db      	uxtb	r3, r3
 801bd4a:	2a00      	cmp	r2, #0
 801bd4c:	d1f5      	bne.n	801bd3a <rmw_wait+0xe2>
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d075      	beq.n	801be3e <rmw_wait+0x1e6>
 801bd52:	1c6a      	adds	r2, r5, #1
 801bd54:	d00d      	beq.n	801bd72 <rmw_wait+0x11a>
 801bd56:	ee07 5a90 	vmov	s15, r5
 801bd5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bd5e:	ee07 3a90 	vmov	s15, r3
 801bd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bd6a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801bd6e:	ee17 5a90 	vmov	r5, s15
 801bd72:	68a0      	ldr	r0, [r4, #8]
 801bd74:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801bd78:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	f040 808a 	bne.w	801be96 <rmw_wait+0x23e>
 801bd82:	6864      	ldr	r4, [r4, #4]
 801bd84:	2c00      	cmp	r4, #0
 801bd86:	d1f4      	bne.n	801bd72 <rmw_wait+0x11a>
 801bd88:	f1b9 0f00 	cmp.w	r9, #0
 801bd8c:	f000 80c3 	beq.w	801bf16 <rmw_wait+0x2be>
 801bd90:	f8d9 5000 	ldr.w	r5, [r9]
 801bd94:	b185      	cbz	r5, 801bdb8 <rmw_wait+0x160>
 801bd96:	2400      	movs	r4, #0
 801bd98:	4625      	mov	r5, r4
 801bd9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801bd9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bda2:	f7f6 fc75 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bda6:	2800      	cmp	r0, #0
 801bda8:	d06d      	beq.n	801be86 <rmw_wait+0x22e>
 801bdaa:	f8d9 3000 	ldr.w	r3, [r9]
 801bdae:	3401      	adds	r4, #1
 801bdb0:	42a3      	cmp	r3, r4
 801bdb2:	f04f 0501 	mov.w	r5, #1
 801bdb6:	d8f0      	bhi.n	801bd9a <rmw_wait+0x142>
 801bdb8:	f1b8 0f00 	cmp.w	r8, #0
 801bdbc:	d012      	beq.n	801bde4 <rmw_wait+0x18c>
 801bdbe:	f8d8 1000 	ldr.w	r1, [r8]
 801bdc2:	2400      	movs	r4, #0
 801bdc4:	b171      	cbz	r1, 801bde4 <rmw_wait+0x18c>
 801bdc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bdca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bdce:	f7f6 fc5f 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d047      	beq.n	801be66 <rmw_wait+0x20e>
 801bdd6:	f8d8 3000 	ldr.w	r3, [r8]
 801bdda:	3401      	adds	r4, #1
 801bddc:	42a3      	cmp	r3, r4
 801bdde:	f04f 0501 	mov.w	r5, #1
 801bde2:	d8f0      	bhi.n	801bdc6 <rmw_wait+0x16e>
 801bde4:	b17f      	cbz	r7, 801be06 <rmw_wait+0x1ae>
 801bde6:	683b      	ldr	r3, [r7, #0]
 801bde8:	2400      	movs	r4, #0
 801bdea:	b163      	cbz	r3, 801be06 <rmw_wait+0x1ae>
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bdf2:	f7f6 fc4d 	bl	8012690 <rmw_uxrce_find_static_input_buffer_by_owner>
 801bdf6:	2800      	cmp	r0, #0
 801bdf8:	d03d      	beq.n	801be76 <rmw_wait+0x21e>
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	3401      	adds	r4, #1
 801bdfe:	42a3      	cmp	r3, r4
 801be00:	f04f 0501 	mov.w	r5, #1
 801be04:	d8f2      	bhi.n	801bdec <rmw_wait+0x194>
 801be06:	b1a6      	cbz	r6, 801be32 <rmw_wait+0x1da>
 801be08:	6834      	ldr	r4, [r6, #0]
 801be0a:	b194      	cbz	r4, 801be32 <rmw_wait+0x1da>
 801be0c:	2300      	movs	r3, #0
 801be0e:	461f      	mov	r7, r3
 801be10:	e004      	b.n	801be1c <rmw_wait+0x1c4>
 801be12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801be16:	3301      	adds	r3, #1
 801be18:	429c      	cmp	r4, r3
 801be1a:	d00a      	beq.n	801be32 <rmw_wait+0x1da>
 801be1c:	6870      	ldr	r0, [r6, #4]
 801be1e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801be22:	7c0a      	ldrb	r2, [r1, #16]
 801be24:	2a00      	cmp	r2, #0
 801be26:	d0f4      	beq.n	801be12 <rmw_wait+0x1ba>
 801be28:	3301      	adds	r3, #1
 801be2a:	429c      	cmp	r4, r3
 801be2c:	740f      	strb	r7, [r1, #16]
 801be2e:	4615      	mov	r5, r2
 801be30:	d1f4      	bne.n	801be1c <rmw_wait+0x1c4>
 801be32:	f085 0001 	eor.w	r0, r5, #1
 801be36:	0040      	lsls	r0, r0, #1
 801be38:	b009      	add	sp, #36	@ 0x24
 801be3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be3e:	68a0      	ldr	r0, [r4, #8]
 801be40:	2100      	movs	r1, #0
 801be42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801be46:	f7fa f835 	bl	8015eb4 <uxr_run_session_timeout>
 801be4a:	6864      	ldr	r4, [r4, #4]
 801be4c:	2c00      	cmp	r4, #0
 801be4e:	d1f6      	bne.n	801be3e <rmw_wait+0x1e6>
 801be50:	e79a      	b.n	801bd88 <rmw_wait+0x130>
 801be52:	f7f6 fc45 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801be56:	4b3e      	ldr	r3, [pc, #248]	@ (801bf50 <rmw_wait+0x2f8>)
 801be58:	681c      	ldr	r4, [r3, #0]
 801be5a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801be5e:	2c00      	cmp	r4, #0
 801be60:	f47f af1d 	bne.w	801bc9e <rmw_wait+0x46>
 801be64:	e728      	b.n	801bcb8 <rmw_wait+0x60>
 801be66:	e9d8 3200 	ldrd	r3, r2, [r8]
 801be6a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801be6e:	3401      	adds	r4, #1
 801be70:	429c      	cmp	r4, r3
 801be72:	d3a8      	bcc.n	801bdc6 <rmw_wait+0x16e>
 801be74:	e7b6      	b.n	801bde4 <rmw_wait+0x18c>
 801be76:	e9d7 3200 	ldrd	r3, r2, [r7]
 801be7a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801be7e:	3401      	adds	r4, #1
 801be80:	42a3      	cmp	r3, r4
 801be82:	d8b3      	bhi.n	801bdec <rmw_wait+0x194>
 801be84:	e7bf      	b.n	801be06 <rmw_wait+0x1ae>
 801be86:	e9d9 3200 	ldrd	r3, r2, [r9]
 801be8a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801be8e:	3401      	adds	r4, #1
 801be90:	42a3      	cmp	r3, r4
 801be92:	d882      	bhi.n	801bd9a <rmw_wait+0x142>
 801be94:	e790      	b.n	801bdb8 <rmw_wait+0x160>
 801be96:	4629      	mov	r1, r5
 801be98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801be9c:	f7fa f824 	bl	8015ee8 <uxr_run_session_until_data>
 801bea0:	6864      	ldr	r4, [r4, #4]
 801bea2:	2c00      	cmp	r4, #0
 801bea4:	f47f af65 	bne.w	801bd72 <rmw_wait+0x11a>
 801bea8:	e76e      	b.n	801bd88 <rmw_wait+0x130>
 801beaa:	b1f3      	cbz	r3, 801beea <rmw_wait+0x292>
 801beac:	2c00      	cmp	r4, #0
 801beae:	f47f aee1 	bne.w	801bc74 <rmw_wait+0x1c>
 801beb2:	f7f6 fc15 	bl	80126e0 <rmw_uxrce_clean_expired_static_input_buffer>
 801beb6:	4b26      	ldr	r3, [pc, #152]	@ (801bf50 <rmw_wait+0x2f8>)
 801beb8:	681c      	ldr	r4, [r3, #0]
 801beba:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bebe:	2c00      	cmp	r4, #0
 801bec0:	f47f aeed 	bne.w	801bc9e <rmw_wait+0x46>
 801bec4:	e70a      	b.n	801bcdc <rmw_wait+0x84>
 801bec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801beca:	f7ff faaf 	bl	801b42c <rmw_time_total_nsec>
 801bece:	4a21      	ldr	r2, [pc, #132]	@ (801bf54 <rmw_wait+0x2fc>)
 801bed0:	2300      	movs	r3, #0
 801bed2:	f7e4 ff19 	bl	8000d08 <__aeabi_uldivmod>
 801bed6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801beda:	f171 0100 	sbcs.w	r1, r1, #0
 801bede:	4605      	mov	r5, r0
 801bee0:	f6ff aed8 	blt.w	801bc94 <rmw_wait+0x3c>
 801bee4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801bee8:	e6d4      	b.n	801bc94 <rmw_wait+0x3c>
 801beea:	2800      	cmp	r0, #0
 801beec:	d1de      	bne.n	801beac <rmw_wait+0x254>
 801beee:	2900      	cmp	r1, #0
 801bef0:	d1dc      	bne.n	801beac <rmw_wait+0x254>
 801bef2:	4608      	mov	r0, r1
 801bef4:	e7a0      	b.n	801be38 <rmw_wait+0x1e0>
 801bef6:	2f00      	cmp	r7, #0
 801bef8:	f47f af0b 	bne.w	801bd12 <rmw_wait+0xba>
 801befc:	2c00      	cmp	r4, #0
 801befe:	f47f af1a 	bne.w	801bd36 <rmw_wait+0xde>
 801bf02:	f1b9 0f00 	cmp.w	r9, #0
 801bf06:	d027      	beq.n	801bf58 <rmw_wait+0x300>
 801bf08:	f8d9 3000 	ldr.w	r3, [r9]
 801bf0c:	4625      	mov	r5, r4
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	f47f af41 	bne.w	801bd96 <rmw_wait+0x13e>
 801bf14:	e777      	b.n	801be06 <rmw_wait+0x1ae>
 801bf16:	464d      	mov	r5, r9
 801bf18:	e74e      	b.n	801bdb8 <rmw_wait+0x160>
 801bf1a:	2f00      	cmp	r7, #0
 801bf1c:	f47f aef9 	bne.w	801bd12 <rmw_wait+0xba>
 801bf20:	2c00      	cmp	r4, #0
 801bf22:	f47f af08 	bne.w	801bd36 <rmw_wait+0xde>
 801bf26:	f1b9 0f00 	cmp.w	r9, #0
 801bf2a:	d015      	beq.n	801bf58 <rmw_wait+0x300>
 801bf2c:	f8d9 3000 	ldr.w	r3, [r9]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	f47f af30 	bne.w	801bd96 <rmw_wait+0x13e>
 801bf36:	2500      	movs	r5, #0
 801bf38:	e743      	b.n	801bdc2 <rmw_wait+0x16a>
 801bf3a:	2c00      	cmp	r4, #0
 801bf3c:	f47f aefb 	bne.w	801bd36 <rmw_wait+0xde>
 801bf40:	f1b9 0f00 	cmp.w	r9, #0
 801bf44:	f47f af24 	bne.w	801bd90 <rmw_wait+0x138>
 801bf48:	e7f5      	b.n	801bf36 <rmw_wait+0x2de>
 801bf4a:	bf00      	nop
 801bf4c:	080205f8 	.word	0x080205f8
 801bf50:	2001f508 	.word	0x2001f508
 801bf54:	000f4240 	.word	0x000f4240
 801bf58:	464d      	mov	r5, r9
 801bf5a:	e754      	b.n	801be06 <rmw_wait+0x1ae>

0801bf5c <rmw_create_wait_set>:
 801bf5c:	b508      	push	{r3, lr}
 801bf5e:	4803      	ldr	r0, [pc, #12]	@ (801bf6c <rmw_create_wait_set+0x10>)
 801bf60:	f7ff fbf6 	bl	801b750 <get_memory>
 801bf64:	b108      	cbz	r0, 801bf6a <rmw_create_wait_set+0xe>
 801bf66:	6880      	ldr	r0, [r0, #8]
 801bf68:	3010      	adds	r0, #16
 801bf6a:	bd08      	pop	{r3, pc}
 801bf6c:	2001acc0 	.word	0x2001acc0

0801bf70 <rmw_destroy_wait_set>:
 801bf70:	b508      	push	{r3, lr}
 801bf72:	4b08      	ldr	r3, [pc, #32]	@ (801bf94 <rmw_destroy_wait_set+0x24>)
 801bf74:	6819      	ldr	r1, [r3, #0]
 801bf76:	b911      	cbnz	r1, 801bf7e <rmw_destroy_wait_set+0xe>
 801bf78:	e00a      	b.n	801bf90 <rmw_destroy_wait_set+0x20>
 801bf7a:	6849      	ldr	r1, [r1, #4]
 801bf7c:	b141      	cbz	r1, 801bf90 <rmw_destroy_wait_set+0x20>
 801bf7e:	688b      	ldr	r3, [r1, #8]
 801bf80:	3310      	adds	r3, #16
 801bf82:	4298      	cmp	r0, r3
 801bf84:	d1f9      	bne.n	801bf7a <rmw_destroy_wait_set+0xa>
 801bf86:	4803      	ldr	r0, [pc, #12]	@ (801bf94 <rmw_destroy_wait_set+0x24>)
 801bf88:	f7ff fbf2 	bl	801b770 <put_memory>
 801bf8c:	2000      	movs	r0, #0
 801bf8e:	bd08      	pop	{r3, pc}
 801bf90:	2001      	movs	r0, #1
 801bf92:	bd08      	pop	{r3, pc}
 801bf94:	2001acc0 	.word	0x2001acc0

0801bf98 <sensor_msgs__msg__Imu__get_type_hash>:
 801bf98:	4800      	ldr	r0, [pc, #0]	@ (801bf9c <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 801bf9a:	4770      	bx	lr
 801bf9c:	20000d18 	.word	0x20000d18

0801bfa0 <sensor_msgs__msg__Imu__get_type_description>:
 801bfa0:	b570      	push	{r4, r5, r6, lr}
 801bfa2:	4e15      	ldr	r6, [pc, #84]	@ (801bff8 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 801bfa4:	7835      	ldrb	r5, [r6, #0]
 801bfa6:	b10d      	cbz	r5, 801bfac <sensor_msgs__msg__Imu__get_type_description+0xc>
 801bfa8:	4814      	ldr	r0, [pc, #80]	@ (801bffc <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801bfaa:	bd70      	pop	{r4, r5, r6, pc}
 801bfac:	4628      	mov	r0, r5
 801bfae:	f7f6 fff9 	bl	8012fa4 <builtin_interfaces__msg__Time__get_type_description>
 801bfb2:	300c      	adds	r0, #12
 801bfb4:	c807      	ldmia	r0, {r0, r1, r2}
 801bfb6:	4c12      	ldr	r4, [pc, #72]	@ (801c000 <sensor_msgs__msg__Imu__get_type_description+0x60>)
 801bfb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bfbc:	4628      	mov	r0, r5
 801bfbe:	f000 f955 	bl	801c26c <geometry_msgs__msg__Quaternion__get_type_description>
 801bfc2:	300c      	adds	r0, #12
 801bfc4:	c807      	ldmia	r0, {r0, r1, r2}
 801bfc6:	f104 0318 	add.w	r3, r4, #24
 801bfca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bfce:	4628      	mov	r0, r5
 801bfd0:	f000 f994 	bl	801c2fc <geometry_msgs__msg__Vector3__get_type_description>
 801bfd4:	300c      	adds	r0, #12
 801bfd6:	c807      	ldmia	r0, {r0, r1, r2}
 801bfd8:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801bfdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bfe0:	4628      	mov	r0, r5
 801bfe2:	f000 f8c9 	bl	801c178 <std_msgs__msg__Header__get_type_description>
 801bfe6:	300c      	adds	r0, #12
 801bfe8:	c807      	ldmia	r0, {r0, r1, r2}
 801bfea:	3448      	adds	r4, #72	@ 0x48
 801bfec:	2301      	movs	r3, #1
 801bfee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bff2:	7033      	strb	r3, [r6, #0]
 801bff4:	4801      	ldr	r0, [pc, #4]	@ (801bffc <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801bff6:	bd70      	pop	{r4, r5, r6, pc}
 801bff8:	2001f73d 	.word	0x2001f73d
 801bffc:	080217a8 	.word	0x080217a8
 801c000:	20001208 	.word	0x20001208

0801c004 <sensor_msgs__msg__Imu__get_type_description_sources>:
 801c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c006:	4d26      	ldr	r5, [pc, #152]	@ (801c0a0 <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 801c008:	782f      	ldrb	r7, [r5, #0]
 801c00a:	b10f      	cbz	r7, 801c010 <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 801c00c:	4825      	ldr	r0, [pc, #148]	@ (801c0a4 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801c00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c010:	4e25      	ldr	r6, [pc, #148]	@ (801c0a8 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801c012:	4c26      	ldr	r4, [pc, #152]	@ (801c0ac <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 801c014:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c018:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c01a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c01c:	6833      	ldr	r3, [r6, #0]
 801c01e:	4626      	mov	r6, r4
 801c020:	4638      	mov	r0, r7
 801c022:	f846 3b04 	str.w	r3, [r6], #4
 801c026:	f7f6 ffc9 	bl	8012fbc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801c02a:	4684      	mov	ip, r0
 801c02c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c030:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c032:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c036:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c038:	4638      	mov	r0, r7
 801c03a:	f8dc 3000 	ldr.w	r3, [ip]
 801c03e:	6033      	str	r3, [r6, #0]
 801c040:	f000 f920 	bl	801c284 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801c044:	4684      	mov	ip, r0
 801c046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c04a:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 801c04e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c050:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c054:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c056:	4638      	mov	r0, r7
 801c058:	f8dc 3000 	ldr.w	r3, [ip]
 801c05c:	6033      	str	r3, [r6, #0]
 801c05e:	f000 f959 	bl	801c314 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801c062:	4684      	mov	ip, r0
 801c064:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c068:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801c06c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c06e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c072:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c074:	4638      	mov	r0, r7
 801c076:	f8dc 3000 	ldr.w	r3, [ip]
 801c07a:	6033      	str	r3, [r6, #0]
 801c07c:	f000 f894 	bl	801c1a8 <std_msgs__msg__Header__get_individual_type_description_source>
 801c080:	2301      	movs	r3, #1
 801c082:	4684      	mov	ip, r0
 801c084:	702b      	strb	r3, [r5, #0]
 801c086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c08a:	3470      	adds	r4, #112	@ 0x70
 801c08c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c08e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c094:	f8dc 3000 	ldr.w	r3, [ip]
 801c098:	4802      	ldr	r0, [pc, #8]	@ (801c0a4 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801c09a:	6023      	str	r3, [r4, #0]
 801c09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c09e:	bf00      	nop
 801c0a0:	2001f73c 	.word	0x2001f73c
 801c0a4:	08021778 	.word	0x08021778
 801c0a8:	08021784 	.word	0x08021784
 801c0ac:	2001f688 	.word	0x2001f688

0801c0b0 <sensor_msgs__msg__Imu__init>:
 801c0b0:	b3d8      	cbz	r0, 801c12a <sensor_msgs__msg__Imu__init+0x7a>
 801c0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0b4:	4604      	mov	r4, r0
 801c0b6:	f000 f8a3 	bl	801c200 <std_msgs__msg__Header__init>
 801c0ba:	b190      	cbz	r0, 801c0e2 <sensor_msgs__msg__Imu__init+0x32>
 801c0bc:	f104 0518 	add.w	r5, r4, #24
 801c0c0:	4628      	mov	r0, r5
 801c0c2:	f000 f901 	bl	801c2c8 <geometry_msgs__msg__Quaternion__init>
 801c0c6:	b358      	cbz	r0, 801c120 <sensor_msgs__msg__Imu__init+0x70>
 801c0c8:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 801c0cc:	4630      	mov	r0, r6
 801c0ce:	f000 f941 	bl	801c354 <geometry_msgs__msg__Vector3__init>
 801c0d2:	b1b8      	cbz	r0, 801c104 <sensor_msgs__msg__Imu__init+0x54>
 801c0d4:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 801c0d8:	4638      	mov	r0, r7
 801c0da:	f000 f93b 	bl	801c354 <geometry_msgs__msg__Vector3__init>
 801c0de:	b330      	cbz	r0, 801c12e <sensor_msgs__msg__Imu__init+0x7e>
 801c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0e2:	4620      	mov	r0, r4
 801c0e4:	f000 f8ac 	bl	801c240 <std_msgs__msg__Header__fini>
 801c0e8:	f104 0018 	add.w	r0, r4, #24
 801c0ec:	f000 f900 	bl	801c2f0 <geometry_msgs__msg__Quaternion__fini>
 801c0f0:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801c0f4:	f000 f932 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c0f8:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801c0fc:	f000 f92e 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c100:	2000      	movs	r0, #0
 801c102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c104:	4620      	mov	r0, r4
 801c106:	f000 f89b 	bl	801c240 <std_msgs__msg__Header__fini>
 801c10a:	4628      	mov	r0, r5
 801c10c:	f000 f8f0 	bl	801c2f0 <geometry_msgs__msg__Quaternion__fini>
 801c110:	4630      	mov	r0, r6
 801c112:	f000 f923 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c116:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801c11a:	f000 f91f 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c11e:	e7ef      	b.n	801c100 <sensor_msgs__msg__Imu__init+0x50>
 801c120:	4620      	mov	r0, r4
 801c122:	f000 f88d 	bl	801c240 <std_msgs__msg__Header__fini>
 801c126:	4628      	mov	r0, r5
 801c128:	e7e0      	b.n	801c0ec <sensor_msgs__msg__Imu__init+0x3c>
 801c12a:	2000      	movs	r0, #0
 801c12c:	4770      	bx	lr
 801c12e:	4620      	mov	r0, r4
 801c130:	f000 f886 	bl	801c240 <std_msgs__msg__Header__fini>
 801c134:	4628      	mov	r0, r5
 801c136:	f000 f8db 	bl	801c2f0 <geometry_msgs__msg__Quaternion__fini>
 801c13a:	4630      	mov	r0, r6
 801c13c:	f000 f90e 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c140:	4638      	mov	r0, r7
 801c142:	f000 f90b 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c146:	e7db      	b.n	801c100 <sensor_msgs__msg__Imu__init+0x50>

0801c148 <sensor_msgs__msg__Imu__fini>:
 801c148:	b188      	cbz	r0, 801c16e <sensor_msgs__msg__Imu__fini+0x26>
 801c14a:	b510      	push	{r4, lr}
 801c14c:	4604      	mov	r4, r0
 801c14e:	f000 f877 	bl	801c240 <std_msgs__msg__Header__fini>
 801c152:	f104 0018 	add.w	r0, r4, #24
 801c156:	f000 f8cb 	bl	801c2f0 <geometry_msgs__msg__Quaternion__fini>
 801c15a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801c15e:	f000 f8fd 	bl	801c35c <geometry_msgs__msg__Vector3__fini>
 801c162:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801c166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c16a:	f000 b8f7 	b.w	801c35c <geometry_msgs__msg__Vector3__fini>
 801c16e:	4770      	bx	lr

0801c170 <std_msgs__msg__Header__get_type_hash>:
 801c170:	4800      	ldr	r0, [pc, #0]	@ (801c174 <std_msgs__msg__Header__get_type_hash+0x4>)
 801c172:	4770      	bx	lr
 801c174:	20001568 	.word	0x20001568

0801c178 <std_msgs__msg__Header__get_type_description>:
 801c178:	b510      	push	{r4, lr}
 801c17a:	4c08      	ldr	r4, [pc, #32]	@ (801c19c <std_msgs__msg__Header__get_type_description+0x24>)
 801c17c:	7820      	ldrb	r0, [r4, #0]
 801c17e:	b108      	cbz	r0, 801c184 <std_msgs__msg__Header__get_type_description+0xc>
 801c180:	4807      	ldr	r0, [pc, #28]	@ (801c1a0 <std_msgs__msg__Header__get_type_description+0x28>)
 801c182:	bd10      	pop	{r4, pc}
 801c184:	f7f6 ff0e 	bl	8012fa4 <builtin_interfaces__msg__Time__get_type_description>
 801c188:	300c      	adds	r0, #12
 801c18a:	c807      	ldmia	r0, {r0, r1, r2}
 801c18c:	4b05      	ldr	r3, [pc, #20]	@ (801c1a4 <std_msgs__msg__Header__get_type_description+0x2c>)
 801c18e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c192:	2301      	movs	r3, #1
 801c194:	4802      	ldr	r0, [pc, #8]	@ (801c1a0 <std_msgs__msg__Header__get_type_description+0x28>)
 801c196:	7023      	strb	r3, [r4, #0]
 801c198:	bd10      	pop	{r4, pc}
 801c19a:	bf00      	nop
 801c19c:	2001f789 	.word	0x2001f789
 801c1a0:	080217fc 	.word	0x080217fc
 801c1a4:	200016e0 	.word	0x200016e0

0801c1a8 <std_msgs__msg__Header__get_individual_type_description_source>:
 801c1a8:	4800      	ldr	r0, [pc, #0]	@ (801c1ac <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 801c1aa:	4770      	bx	lr
 801c1ac:	080217d8 	.word	0x080217d8

0801c1b0 <std_msgs__msg__Header__get_type_description_sources>:
 801c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1b2:	4e0f      	ldr	r6, [pc, #60]	@ (801c1f0 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801c1b4:	7837      	ldrb	r7, [r6, #0]
 801c1b6:	b10f      	cbz	r7, 801c1bc <std_msgs__msg__Header__get_type_description_sources+0xc>
 801c1b8:	480e      	ldr	r0, [pc, #56]	@ (801c1f4 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801c1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1bc:	4d0e      	ldr	r5, [pc, #56]	@ (801c1f8 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 801c1be:	4c0f      	ldr	r4, [pc, #60]	@ (801c1fc <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 801c1c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1c8:	682b      	ldr	r3, [r5, #0]
 801c1ca:	f844 3b04 	str.w	r3, [r4], #4
 801c1ce:	4638      	mov	r0, r7
 801c1d0:	f7f6 fef4 	bl	8012fbc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801c1d4:	2301      	movs	r3, #1
 801c1d6:	4684      	mov	ip, r0
 801c1d8:	7033      	strb	r3, [r6, #0]
 801c1da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c1de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c1e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1e6:	f8dc 3000 	ldr.w	r3, [ip]
 801c1ea:	4802      	ldr	r0, [pc, #8]	@ (801c1f4 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801c1ec:	6023      	str	r3, [r4, #0]
 801c1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1f0:	2001f788 	.word	0x2001f788
 801c1f4:	080217cc 	.word	0x080217cc
 801c1f8:	080217d8 	.word	0x080217d8
 801c1fc:	2001f740 	.word	0x2001f740

0801c200 <std_msgs__msg__Header__init>:
 801c200:	b1d8      	cbz	r0, 801c23a <std_msgs__msg__Header__init+0x3a>
 801c202:	b538      	push	{r3, r4, r5, lr}
 801c204:	4604      	mov	r4, r0
 801c206:	f000 f827 	bl	801c258 <builtin_interfaces__msg__Time__init>
 801c20a:	b130      	cbz	r0, 801c21a <std_msgs__msg__Header__init+0x1a>
 801c20c:	f104 0508 	add.w	r5, r4, #8
 801c210:	4628      	mov	r0, r5
 801c212:	f001 f9f3 	bl	801d5fc <rosidl_runtime_c__String__init>
 801c216:	b148      	cbz	r0, 801c22c <std_msgs__msg__Header__init+0x2c>
 801c218:	bd38      	pop	{r3, r4, r5, pc}
 801c21a:	4620      	mov	r0, r4
 801c21c:	f000 f820 	bl	801c260 <builtin_interfaces__msg__Time__fini>
 801c220:	f104 0008 	add.w	r0, r4, #8
 801c224:	f001 fa04 	bl	801d630 <rosidl_runtime_c__String__fini>
 801c228:	2000      	movs	r0, #0
 801c22a:	bd38      	pop	{r3, r4, r5, pc}
 801c22c:	4620      	mov	r0, r4
 801c22e:	f000 f817 	bl	801c260 <builtin_interfaces__msg__Time__fini>
 801c232:	4628      	mov	r0, r5
 801c234:	f001 f9fc 	bl	801d630 <rosidl_runtime_c__String__fini>
 801c238:	e7f6      	b.n	801c228 <std_msgs__msg__Header__init+0x28>
 801c23a:	2000      	movs	r0, #0
 801c23c:	4770      	bx	lr
 801c23e:	bf00      	nop

0801c240 <std_msgs__msg__Header__fini>:
 801c240:	b148      	cbz	r0, 801c256 <std_msgs__msg__Header__fini+0x16>
 801c242:	b510      	push	{r4, lr}
 801c244:	4604      	mov	r4, r0
 801c246:	f000 f80b 	bl	801c260 <builtin_interfaces__msg__Time__fini>
 801c24a:	f104 0008 	add.w	r0, r4, #8
 801c24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c252:	f001 b9ed 	b.w	801d630 <rosidl_runtime_c__String__fini>
 801c256:	4770      	bx	lr

0801c258 <builtin_interfaces__msg__Time__init>:
 801c258:	3800      	subs	r0, #0
 801c25a:	bf18      	it	ne
 801c25c:	2001      	movne	r0, #1
 801c25e:	4770      	bx	lr

0801c260 <builtin_interfaces__msg__Time__fini>:
 801c260:	4770      	bx	lr
 801c262:	bf00      	nop

0801c264 <geometry_msgs__msg__Quaternion__get_type_hash>:
 801c264:	4800      	ldr	r0, [pc, #0]	@ (801c268 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801c266:	4770      	bx	lr
 801c268:	200017c4 	.word	0x200017c4

0801c26c <geometry_msgs__msg__Quaternion__get_type_description>:
 801c26c:	4b03      	ldr	r3, [pc, #12]	@ (801c27c <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801c26e:	781a      	ldrb	r2, [r3, #0]
 801c270:	b90a      	cbnz	r2, 801c276 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801c272:	2201      	movs	r2, #1
 801c274:	701a      	strb	r2, [r3, #0]
 801c276:	4802      	ldr	r0, [pc, #8]	@ (801c280 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 801c278:	4770      	bx	lr
 801c27a:	bf00      	nop
 801c27c:	2001f7b1 	.word	0x2001f7b1
 801c280:	08021850 	.word	0x08021850

0801c284 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 801c284:	4800      	ldr	r0, [pc, #0]	@ (801c288 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 801c286:	4770      	bx	lr
 801c288:	0802182c 	.word	0x0802182c

0801c28c <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 801c28c:	4b09      	ldr	r3, [pc, #36]	@ (801c2b4 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801c28e:	781a      	ldrb	r2, [r3, #0]
 801c290:	b96a      	cbnz	r2, 801c2ae <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801c292:	b430      	push	{r4, r5}
 801c294:	4d08      	ldr	r5, [pc, #32]	@ (801c2b8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 801c296:	4c09      	ldr	r4, [pc, #36]	@ (801c2bc <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 801c298:	2201      	movs	r2, #1
 801c29a:	701a      	strb	r2, [r3, #0]
 801c29c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c29e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c2a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c2a4:	682b      	ldr	r3, [r5, #0]
 801c2a6:	4806      	ldr	r0, [pc, #24]	@ (801c2c0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801c2a8:	6023      	str	r3, [r4, #0]
 801c2aa:	bc30      	pop	{r4, r5}
 801c2ac:	4770      	bx	lr
 801c2ae:	4804      	ldr	r0, [pc, #16]	@ (801c2c0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801c2b0:	4770      	bx	lr
 801c2b2:	bf00      	nop
 801c2b4:	2001f7b0 	.word	0x2001f7b0
 801c2b8:	0802182c 	.word	0x0802182c
 801c2bc:	2001f78c 	.word	0x2001f78c
 801c2c0:	08021820 	.word	0x08021820
 801c2c4:	00000000 	.word	0x00000000

0801c2c8 <geometry_msgs__msg__Quaternion__init>:
 801c2c8:	b160      	cbz	r0, 801c2e4 <geometry_msgs__msg__Quaternion__init+0x1c>
 801c2ca:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801c2e8 <geometry_msgs__msg__Quaternion__init+0x20>
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	e9c0 2300 	strd	r2, r3, [r0]
 801c2d6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c2da:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c2de:	ed80 7b06 	vstr	d7, [r0, #24]
 801c2e2:	2001      	movs	r0, #1
 801c2e4:	4770      	bx	lr
 801c2e6:	bf00      	nop
 801c2e8:	00000000 	.word	0x00000000
 801c2ec:	3ff00000 	.word	0x3ff00000

0801c2f0 <geometry_msgs__msg__Quaternion__fini>:
 801c2f0:	4770      	bx	lr
 801c2f2:	bf00      	nop

0801c2f4 <geometry_msgs__msg__Vector3__get_type_hash>:
 801c2f4:	4800      	ldr	r0, [pc, #0]	@ (801c2f8 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 801c2f6:	4770      	bx	lr
 801c2f8:	200019c0 	.word	0x200019c0

0801c2fc <geometry_msgs__msg__Vector3__get_type_description>:
 801c2fc:	4b03      	ldr	r3, [pc, #12]	@ (801c30c <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 801c2fe:	781a      	ldrb	r2, [r3, #0]
 801c300:	b90a      	cbnz	r2, 801c306 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 801c302:	2201      	movs	r2, #1
 801c304:	701a      	strb	r2, [r3, #0]
 801c306:	4802      	ldr	r0, [pc, #8]	@ (801c310 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 801c308:	4770      	bx	lr
 801c30a:	bf00      	nop
 801c30c:	2001f7d9 	.word	0x2001f7d9
 801c310:	080218a4 	.word	0x080218a4

0801c314 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 801c314:	4800      	ldr	r0, [pc, #0]	@ (801c318 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 801c316:	4770      	bx	lr
 801c318:	08021880 	.word	0x08021880

0801c31c <geometry_msgs__msg__Vector3__get_type_description_sources>:
 801c31c:	4b09      	ldr	r3, [pc, #36]	@ (801c344 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 801c31e:	781a      	ldrb	r2, [r3, #0]
 801c320:	b96a      	cbnz	r2, 801c33e <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 801c322:	b430      	push	{r4, r5}
 801c324:	4d08      	ldr	r5, [pc, #32]	@ (801c348 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 801c326:	4c09      	ldr	r4, [pc, #36]	@ (801c34c <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 801c328:	2201      	movs	r2, #1
 801c32a:	701a      	strb	r2, [r3, #0]
 801c32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c32e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c334:	682b      	ldr	r3, [r5, #0]
 801c336:	4806      	ldr	r0, [pc, #24]	@ (801c350 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 801c338:	6023      	str	r3, [r4, #0]
 801c33a:	bc30      	pop	{r4, r5}
 801c33c:	4770      	bx	lr
 801c33e:	4804      	ldr	r0, [pc, #16]	@ (801c350 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 801c340:	4770      	bx	lr
 801c342:	bf00      	nop
 801c344:	2001f7d8 	.word	0x2001f7d8
 801c348:	08021880 	.word	0x08021880
 801c34c:	2001f7b4 	.word	0x2001f7b4
 801c350:	08021874 	.word	0x08021874

0801c354 <geometry_msgs__msg__Vector3__init>:
 801c354:	3800      	subs	r0, #0
 801c356:	bf18      	it	ne
 801c358:	2001      	movne	r0, #1
 801c35a:	4770      	bx	lr

0801c35c <geometry_msgs__msg__Vector3__fini>:
 801c35c:	4770      	bx	lr
 801c35e:	bf00      	nop

0801c360 <ucdr_serialize_string>:
 801c360:	b538      	push	{r3, r4, r5, lr}
 801c362:	4605      	mov	r5, r0
 801c364:	4608      	mov	r0, r1
 801c366:	460c      	mov	r4, r1
 801c368:	f7e3 ffba 	bl	80002e0 <strlen>
 801c36c:	4621      	mov	r1, r4
 801c36e:	1c42      	adds	r2, r0, #1
 801c370:	4628      	mov	r0, r5
 801c372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c376:	f7f2 bb75 	b.w	800ea64 <ucdr_serialize_sequence_char>
 801c37a:	bf00      	nop

0801c37c <ucdr_deserialize_string>:
 801c37c:	b500      	push	{lr}
 801c37e:	b083      	sub	sp, #12
 801c380:	ab01      	add	r3, sp, #4
 801c382:	f7f2 fb81 	bl	800ea88 <ucdr_deserialize_sequence_char>
 801c386:	b003      	add	sp, #12
 801c388:	f85d fb04 	ldr.w	pc, [sp], #4

0801c38c <uxr_init_input_best_effort_stream>:
 801c38c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c390:	8003      	strh	r3, [r0, #0]
 801c392:	4770      	bx	lr

0801c394 <uxr_reset_input_best_effort_stream>:
 801c394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c398:	8003      	strh	r3, [r0, #0]
 801c39a:	4770      	bx	lr

0801c39c <uxr_receive_best_effort_message>:
 801c39c:	b538      	push	{r3, r4, r5, lr}
 801c39e:	4604      	mov	r4, r0
 801c3a0:	8800      	ldrh	r0, [r0, #0]
 801c3a2:	460d      	mov	r5, r1
 801c3a4:	f000 fd28 	bl	801cdf8 <uxr_seq_num_cmp>
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801c3b0:	bfb8      	it	lt
 801c3b2:	8025      	strhlt	r5, [r4, #0]
 801c3b4:	bd38      	pop	{r3, r4, r5, pc}
 801c3b6:	bf00      	nop

0801c3b8 <on_full_input_buffer>:
 801c3b8:	b570      	push	{r4, r5, r6, lr}
 801c3ba:	4605      	mov	r5, r0
 801c3bc:	460c      	mov	r4, r1
 801c3be:	682b      	ldr	r3, [r5, #0]
 801c3c0:	6809      	ldr	r1, [r1, #0]
 801c3c2:	8920      	ldrh	r0, [r4, #8]
 801c3c4:	6862      	ldr	r2, [r4, #4]
 801c3c6:	fbb2 f2f0 	udiv	r2, r2, r0
 801c3ca:	1a5b      	subs	r3, r3, r1
 801c3cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801c3d0:	3301      	adds	r3, #1
 801c3d2:	b29b      	uxth	r3, r3
 801c3d4:	fbb3 f6f0 	udiv	r6, r3, r0
 801c3d8:	fb00 3316 	mls	r3, r0, r6, r3
 801c3dc:	b29b      	uxth	r3, r3
 801c3de:	fb02 f303 	mul.w	r3, r2, r3
 801c3e2:	1d18      	adds	r0, r3, #4
 801c3e4:	4408      	add	r0, r1
 801c3e6:	7d26      	ldrb	r6, [r4, #20]
 801c3e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c3ec:	b116      	cbz	r6, 801c3f4 <on_full_input_buffer+0x3c>
 801c3ee:	2600      	movs	r6, #0
 801c3f0:	f840 6c04 	str.w	r6, [r0, #-4]
 801c3f4:	2a03      	cmp	r2, #3
 801c3f6:	d801      	bhi.n	801c3fc <on_full_input_buffer+0x44>
 801c3f8:	2001      	movs	r0, #1
 801c3fa:	bd70      	pop	{r4, r5, r6, pc}
 801c3fc:	3308      	adds	r3, #8
 801c3fe:	4419      	add	r1, r3
 801c400:	4628      	mov	r0, r5
 801c402:	692b      	ldr	r3, [r5, #16]
 801c404:	3a04      	subs	r2, #4
 801c406:	f7f2 fab5 	bl	800e974 <ucdr_init_buffer_origin>
 801c40a:	4628      	mov	r0, r5
 801c40c:	4902      	ldr	r1, [pc, #8]	@ (801c418 <on_full_input_buffer+0x60>)
 801c40e:	4622      	mov	r2, r4
 801c410:	f7f2 fa8c 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 801c414:	2000      	movs	r0, #0
 801c416:	bd70      	pop	{r4, r5, r6, pc}
 801c418:	0801c3b9 	.word	0x0801c3b9

0801c41c <uxr_init_input_reliable_stream>:
 801c41c:	b500      	push	{lr}
 801c41e:	e9c0 1200 	strd	r1, r2, [r0]
 801c422:	f04f 0e00 	mov.w	lr, #0
 801c426:	9a01      	ldr	r2, [sp, #4]
 801c428:	8103      	strh	r3, [r0, #8]
 801c42a:	6102      	str	r2, [r0, #16]
 801c42c:	f880 e014 	strb.w	lr, [r0, #20]
 801c430:	b1d3      	cbz	r3, 801c468 <uxr_init_input_reliable_stream+0x4c>
 801c432:	f8c1 e000 	str.w	lr, [r1]
 801c436:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c43a:	f1bc 0f01 	cmp.w	ip, #1
 801c43e:	d913      	bls.n	801c468 <uxr_init_input_reliable_stream+0x4c>
 801c440:	2301      	movs	r3, #1
 801c442:	fbb3 f1fc 	udiv	r1, r3, ip
 801c446:	fb0c 3111 	mls	r1, ip, r1, r3
 801c44a:	b289      	uxth	r1, r1
 801c44c:	6842      	ldr	r2, [r0, #4]
 801c44e:	fbb2 f2fc 	udiv	r2, r2, ip
 801c452:	fb01 f202 	mul.w	r2, r1, r2
 801c456:	6801      	ldr	r1, [r0, #0]
 801c458:	f841 e002 	str.w	lr, [r1, r2]
 801c45c:	3301      	adds	r3, #1
 801c45e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c462:	b29b      	uxth	r3, r3
 801c464:	459c      	cmp	ip, r3
 801c466:	d8ec      	bhi.n	801c442 <uxr_init_input_reliable_stream+0x26>
 801c468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c46c:	60c3      	str	r3, [r0, #12]
 801c46e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c472:	bf00      	nop

0801c474 <uxr_reset_input_reliable_stream>:
 801c474:	8901      	ldrh	r1, [r0, #8]
 801c476:	b1e9      	cbz	r1, 801c4b4 <uxr_reset_input_reliable_stream+0x40>
 801c478:	f04f 0c00 	mov.w	ip, #0
 801c47c:	b500      	push	{lr}
 801c47e:	4663      	mov	r3, ip
 801c480:	46e6      	mov	lr, ip
 801c482:	fbb3 f2f1 	udiv	r2, r3, r1
 801c486:	fb01 3312 	mls	r3, r1, r2, r3
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	6842      	ldr	r2, [r0, #4]
 801c48e:	fbb2 f2f1 	udiv	r2, r2, r1
 801c492:	fb03 f202 	mul.w	r2, r3, r2
 801c496:	6803      	ldr	r3, [r0, #0]
 801c498:	f843 e002 	str.w	lr, [r3, r2]
 801c49c:	f10c 0c01 	add.w	ip, ip, #1
 801c4a0:	8901      	ldrh	r1, [r0, #8]
 801c4a2:	fa1f f38c 	uxth.w	r3, ip
 801c4a6:	4299      	cmp	r1, r3
 801c4a8:	d8eb      	bhi.n	801c482 <uxr_reset_input_reliable_stream+0xe>
 801c4aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4ae:	60c3      	str	r3, [r0, #12]
 801c4b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801c4b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4b8:	60c3      	str	r3, [r0, #12]
 801c4ba:	4770      	bx	lr

0801c4bc <uxr_receive_reliable_message>:
 801c4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4c0:	4604      	mov	r4, r0
 801c4c2:	460d      	mov	r5, r1
 801c4c4:	8901      	ldrh	r1, [r0, #8]
 801c4c6:	8980      	ldrh	r0, [r0, #12]
 801c4c8:	4690      	mov	r8, r2
 801c4ca:	461f      	mov	r7, r3
 801c4cc:	f000 fc8c 	bl	801cde8 <uxr_seq_num_add>
 801c4d0:	4629      	mov	r1, r5
 801c4d2:	4606      	mov	r6, r0
 801c4d4:	89a0      	ldrh	r0, [r4, #12]
 801c4d6:	f000 fc8f 	bl	801cdf8 <uxr_seq_num_cmp>
 801c4da:	2800      	cmp	r0, #0
 801c4dc:	db0a      	blt.n	801c4f4 <uxr_receive_reliable_message+0x38>
 801c4de:	2600      	movs	r6, #0
 801c4e0:	89e0      	ldrh	r0, [r4, #14]
 801c4e2:	4629      	mov	r1, r5
 801c4e4:	f000 fc88 	bl	801cdf8 <uxr_seq_num_cmp>
 801c4e8:	2800      	cmp	r0, #0
 801c4ea:	bfb8      	it	lt
 801c4ec:	81e5      	strhlt	r5, [r4, #14]
 801c4ee:	4630      	mov	r0, r6
 801c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	4629      	mov	r1, r5
 801c4f8:	f000 fc7e 	bl	801cdf8 <uxr_seq_num_cmp>
 801c4fc:	2800      	cmp	r0, #0
 801c4fe:	dbee      	blt.n	801c4de <uxr_receive_reliable_message+0x22>
 801c500:	6923      	ldr	r3, [r4, #16]
 801c502:	4640      	mov	r0, r8
 801c504:	4798      	blx	r3
 801c506:	2101      	movs	r1, #1
 801c508:	4606      	mov	r6, r0
 801c50a:	89a0      	ldrh	r0, [r4, #12]
 801c50c:	f000 fc6c 	bl	801cde8 <uxr_seq_num_add>
 801c510:	b90e      	cbnz	r6, 801c516 <uxr_receive_reliable_message+0x5a>
 801c512:	4285      	cmp	r5, r0
 801c514:	d046      	beq.n	801c5a4 <uxr_receive_reliable_message+0xe8>
 801c516:	8921      	ldrh	r1, [r4, #8]
 801c518:	fbb5 f2f1 	udiv	r2, r5, r1
 801c51c:	fb01 5212 	mls	r2, r1, r2, r5
 801c520:	b292      	uxth	r2, r2
 801c522:	6863      	ldr	r3, [r4, #4]
 801c524:	6820      	ldr	r0, [r4, #0]
 801c526:	fbb3 f3f1 	udiv	r3, r3, r1
 801c52a:	fb02 f303 	mul.w	r3, r2, r3
 801c52e:	3304      	adds	r3, #4
 801c530:	4418      	add	r0, r3
 801c532:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d1d1      	bne.n	801c4de <uxr_receive_reliable_message+0x22>
 801c53a:	4641      	mov	r1, r8
 801c53c:	463a      	mov	r2, r7
 801c53e:	f001 ff38 	bl	801e3b2 <memcpy>
 801c542:	8921      	ldrh	r1, [r4, #8]
 801c544:	fbb5 f2f1 	udiv	r2, r5, r1
 801c548:	fb01 5212 	mls	r2, r1, r2, r5
 801c54c:	b292      	uxth	r2, r2
 801c54e:	6863      	ldr	r3, [r4, #4]
 801c550:	fbb3 f3f1 	udiv	r3, r3, r1
 801c554:	fb02 f303 	mul.w	r3, r2, r3
 801c558:	6822      	ldr	r2, [r4, #0]
 801c55a:	50d7      	str	r7, [r2, r3]
 801c55c:	9a06      	ldr	r2, [sp, #24]
 801c55e:	2301      	movs	r3, #1
 801c560:	7013      	strb	r3, [r2, #0]
 801c562:	2e00      	cmp	r6, #0
 801c564:	d0bb      	beq.n	801c4de <uxr_receive_reliable_message+0x22>
 801c566:	89a6      	ldrh	r6, [r4, #12]
 801c568:	2101      	movs	r1, #1
 801c56a:	4630      	mov	r0, r6
 801c56c:	f000 fc3c 	bl	801cde8 <uxr_seq_num_add>
 801c570:	8921      	ldrh	r1, [r4, #8]
 801c572:	fbb0 f2f1 	udiv	r2, r0, r1
 801c576:	fb01 0212 	mls	r2, r1, r2, r0
 801c57a:	b292      	uxth	r2, r2
 801c57c:	6863      	ldr	r3, [r4, #4]
 801c57e:	fbb3 f3f1 	udiv	r3, r3, r1
 801c582:	4606      	mov	r6, r0
 801c584:	fb02 f303 	mul.w	r3, r2, r3
 801c588:	6820      	ldr	r0, [r4, #0]
 801c58a:	3304      	adds	r3, #4
 801c58c:	4418      	add	r0, r3
 801c58e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d0a3      	beq.n	801c4de <uxr_receive_reliable_message+0x22>
 801c596:	6923      	ldr	r3, [r4, #16]
 801c598:	4798      	blx	r3
 801c59a:	2802      	cmp	r0, #2
 801c59c:	d005      	beq.n	801c5aa <uxr_receive_reliable_message+0xee>
 801c59e:	2801      	cmp	r0, #1
 801c5a0:	d0e2      	beq.n	801c568 <uxr_receive_reliable_message+0xac>
 801c5a2:	e79c      	b.n	801c4de <uxr_receive_reliable_message+0x22>
 801c5a4:	9b06      	ldr	r3, [sp, #24]
 801c5a6:	81a5      	strh	r5, [r4, #12]
 801c5a8:	701e      	strb	r6, [r3, #0]
 801c5aa:	2601      	movs	r6, #1
 801c5ac:	e798      	b.n	801c4e0 <uxr_receive_reliable_message+0x24>
 801c5ae:	bf00      	nop

0801c5b0 <uxr_next_input_reliable_buffer_available>:
 801c5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5b4:	4604      	mov	r4, r0
 801c5b6:	460f      	mov	r7, r1
 801c5b8:	8980      	ldrh	r0, [r0, #12]
 801c5ba:	2101      	movs	r1, #1
 801c5bc:	4690      	mov	r8, r2
 801c5be:	f000 fc13 	bl	801cde8 <uxr_seq_num_add>
 801c5c2:	8921      	ldrh	r1, [r4, #8]
 801c5c4:	fbb0 f2f1 	udiv	r2, r0, r1
 801c5c8:	fb01 0212 	mls	r2, r1, r2, r0
 801c5cc:	b292      	uxth	r2, r2
 801c5ce:	6863      	ldr	r3, [r4, #4]
 801c5d0:	6826      	ldr	r6, [r4, #0]
 801c5d2:	fbb3 f3f1 	udiv	r3, r3, r1
 801c5d6:	fb02 f303 	mul.w	r3, r2, r3
 801c5da:	3304      	adds	r3, #4
 801c5dc:	441e      	add	r6, r3
 801c5de:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c5e2:	f1b9 0f00 	cmp.w	r9, #0
 801c5e6:	d023      	beq.n	801c630 <uxr_next_input_reliable_buffer_available+0x80>
 801c5e8:	6923      	ldr	r3, [r4, #16]
 801c5ea:	4605      	mov	r5, r0
 801c5ec:	4630      	mov	r0, r6
 801c5ee:	4798      	blx	r3
 801c5f0:	4682      	mov	sl, r0
 801c5f2:	b300      	cbz	r0, 801c636 <uxr_next_input_reliable_buffer_available+0x86>
 801c5f4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c5f8:	2101      	movs	r1, #1
 801c5fa:	4650      	mov	r0, sl
 801c5fc:	f000 fbf4 	bl	801cde8 <uxr_seq_num_add>
 801c600:	8921      	ldrh	r1, [r4, #8]
 801c602:	fbb0 f2f1 	udiv	r2, r0, r1
 801c606:	4682      	mov	sl, r0
 801c608:	fb01 0212 	mls	r2, r1, r2, r0
 801c60c:	e9d4 0300 	ldrd	r0, r3, [r4]
 801c610:	b292      	uxth	r2, r2
 801c612:	fbb3 f3f1 	udiv	r3, r3, r1
 801c616:	fb02 f303 	mul.w	r3, r2, r3
 801c61a:	3304      	adds	r3, #4
 801c61c:	4418      	add	r0, r3
 801c61e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c622:	b12b      	cbz	r3, 801c630 <uxr_next_input_reliable_buffer_available+0x80>
 801c624:	6923      	ldr	r3, [r4, #16]
 801c626:	4798      	blx	r3
 801c628:	2802      	cmp	r0, #2
 801c62a:	d01b      	beq.n	801c664 <uxr_next_input_reliable_buffer_available+0xb4>
 801c62c:	2801      	cmp	r0, #1
 801c62e:	d0e3      	beq.n	801c5f8 <uxr_next_input_reliable_buffer_available+0x48>
 801c630:	2000      	movs	r0, #0
 801c632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c636:	464a      	mov	r2, r9
 801c638:	4631      	mov	r1, r6
 801c63a:	4638      	mov	r0, r7
 801c63c:	f7f2 f9a2 	bl	800e984 <ucdr_init_buffer>
 801c640:	8921      	ldrh	r1, [r4, #8]
 801c642:	fbb5 f2f1 	udiv	r2, r5, r1
 801c646:	fb01 5212 	mls	r2, r1, r2, r5
 801c64a:	b292      	uxth	r2, r2
 801c64c:	6863      	ldr	r3, [r4, #4]
 801c64e:	fbb3 f3f1 	udiv	r3, r3, r1
 801c652:	fb02 f303 	mul.w	r3, r2, r3
 801c656:	6822      	ldr	r2, [r4, #0]
 801c658:	f842 a003 	str.w	sl, [r2, r3]
 801c65c:	81a5      	strh	r5, [r4, #12]
 801c65e:	2001      	movs	r0, #1
 801c660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c664:	eb06 0108 	add.w	r1, r6, r8
 801c668:	8926      	ldrh	r6, [r4, #8]
 801c66a:	fbb5 f0f6 	udiv	r0, r5, r6
 801c66e:	fb06 5010 	mls	r0, r6, r0, r5
 801c672:	b280      	uxth	r0, r0
 801c674:	6863      	ldr	r3, [r4, #4]
 801c676:	fbb3 f3f6 	udiv	r3, r3, r6
 801c67a:	fb00 f303 	mul.w	r3, r0, r3
 801c67e:	6820      	ldr	r0, [r4, #0]
 801c680:	2500      	movs	r5, #0
 801c682:	50c5      	str	r5, [r0, r3]
 801c684:	eba9 0208 	sub.w	r2, r9, r8
 801c688:	4638      	mov	r0, r7
 801c68a:	f7f2 f97b 	bl	800e984 <ucdr_init_buffer>
 801c68e:	4903      	ldr	r1, [pc, #12]	@ (801c69c <uxr_next_input_reliable_buffer_available+0xec>)
 801c690:	4622      	mov	r2, r4
 801c692:	4638      	mov	r0, r7
 801c694:	f7f2 f94a 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 801c698:	4655      	mov	r5, sl
 801c69a:	e7df      	b.n	801c65c <uxr_next_input_reliable_buffer_available+0xac>
 801c69c:	0801c3b9 	.word	0x0801c3b9

0801c6a0 <uxr_process_heartbeat>:
 801c6a0:	b538      	push	{r3, r4, r5, lr}
 801c6a2:	4611      	mov	r1, r2
 801c6a4:	4604      	mov	r4, r0
 801c6a6:	89c0      	ldrh	r0, [r0, #14]
 801c6a8:	4615      	mov	r5, r2
 801c6aa:	f000 fba5 	bl	801cdf8 <uxr_seq_num_cmp>
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	bfb8      	it	lt
 801c6b2:	81e5      	strhlt	r5, [r4, #14]
 801c6b4:	bd38      	pop	{r3, r4, r5, pc}
 801c6b6:	bf00      	nop

0801c6b8 <uxr_compute_acknack>:
 801c6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6bc:	8903      	ldrh	r3, [r0, #8]
 801c6be:	8985      	ldrh	r5, [r0, #12]
 801c6c0:	4604      	mov	r4, r0
 801c6c2:	460e      	mov	r6, r1
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d048      	beq.n	801c75a <uxr_compute_acknack+0xa2>
 801c6c8:	4628      	mov	r0, r5
 801c6ca:	2701      	movs	r7, #1
 801c6cc:	e003      	b.n	801c6d6 <uxr_compute_acknack+0x1e>
 801c6ce:	4567      	cmp	r7, ip
 801c6d0:	d243      	bcs.n	801c75a <uxr_compute_acknack+0xa2>
 801c6d2:	89a0      	ldrh	r0, [r4, #12]
 801c6d4:	3701      	adds	r7, #1
 801c6d6:	b2b9      	uxth	r1, r7
 801c6d8:	f000 fb86 	bl	801cde8 <uxr_seq_num_add>
 801c6dc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c6e0:	fbb0 f2fc 	udiv	r2, r0, ip
 801c6e4:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c6e8:	fb0c 0212 	mls	r2, ip, r2, r0
 801c6ec:	b292      	uxth	r2, r2
 801c6ee:	fbb3 f3fc 	udiv	r3, r3, ip
 801c6f2:	fb02 f303 	mul.w	r3, r2, r3
 801c6f6:	58cb      	ldr	r3, [r1, r3]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d1e8      	bne.n	801c6ce <uxr_compute_acknack+0x16>
 801c6fc:	8030      	strh	r0, [r6, #0]
 801c6fe:	2101      	movs	r1, #1
 801c700:	89e5      	ldrh	r5, [r4, #14]
 801c702:	f000 fb75 	bl	801cdf0 <uxr_seq_num_sub>
 801c706:	4601      	mov	r1, r0
 801c708:	4628      	mov	r0, r5
 801c70a:	f000 fb71 	bl	801cdf0 <uxr_seq_num_sub>
 801c70e:	4605      	mov	r5, r0
 801c710:	4607      	mov	r7, r0
 801c712:	b1f8      	cbz	r0, 801c754 <uxr_compute_acknack+0x9c>
 801c714:	f04f 0900 	mov.w	r9, #0
 801c718:	464d      	mov	r5, r9
 801c71a:	f04f 0801 	mov.w	r8, #1
 801c71e:	fa1f f189 	uxth.w	r1, r9
 801c722:	8830      	ldrh	r0, [r6, #0]
 801c724:	f000 fb60 	bl	801cde8 <uxr_seq_num_add>
 801c728:	8921      	ldrh	r1, [r4, #8]
 801c72a:	fbb0 f3f1 	udiv	r3, r0, r1
 801c72e:	fb03 0011 	mls	r0, r3, r1, r0
 801c732:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c736:	b280      	uxth	r0, r0
 801c738:	fbb3 f3f1 	udiv	r3, r3, r1
 801c73c:	fb00 f303 	mul.w	r3, r0, r3
 801c740:	fa08 f109 	lsl.w	r1, r8, r9
 801c744:	58d3      	ldr	r3, [r2, r3]
 801c746:	f109 0901 	add.w	r9, r9, #1
 801c74a:	b90b      	cbnz	r3, 801c750 <uxr_compute_acknack+0x98>
 801c74c:	4329      	orrs	r1, r5
 801c74e:	b28d      	uxth	r5, r1
 801c750:	454f      	cmp	r7, r9
 801c752:	d1e4      	bne.n	801c71e <uxr_compute_acknack+0x66>
 801c754:	4628      	mov	r0, r5
 801c756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c75a:	4628      	mov	r0, r5
 801c75c:	e7ce      	b.n	801c6fc <uxr_compute_acknack+0x44>
 801c75e:	bf00      	nop

0801c760 <uxr_init_output_best_effort_stream>:
 801c760:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c764:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c768:	6001      	str	r1, [r0, #0]
 801c76a:	7303      	strb	r3, [r0, #12]
 801c76c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c770:	4770      	bx	lr
 801c772:	bf00      	nop

0801c774 <uxr_reset_output_best_effort_stream>:
 801c774:	7b02      	ldrb	r2, [r0, #12]
 801c776:	6042      	str	r2, [r0, #4]
 801c778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c77c:	81c3      	strh	r3, [r0, #14]
 801c77e:	4770      	bx	lr

0801c780 <uxr_prepare_best_effort_buffer_to_write>:
 801c780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c782:	4604      	mov	r4, r0
 801c784:	b083      	sub	sp, #12
 801c786:	6840      	ldr	r0, [r0, #4]
 801c788:	460d      	mov	r5, r1
 801c78a:	4616      	mov	r6, r2
 801c78c:	f7fa fda0 	bl	80172d0 <uxr_submessage_padding>
 801c790:	6863      	ldr	r3, [r4, #4]
 801c792:	4418      	add	r0, r3
 801c794:	68a3      	ldr	r3, [r4, #8]
 801c796:	1942      	adds	r2, r0, r5
 801c798:	4293      	cmp	r3, r2
 801c79a:	bf2c      	ite	cs
 801c79c:	2701      	movcs	r7, #1
 801c79e:	2700      	movcc	r7, #0
 801c7a0:	d202      	bcs.n	801c7a8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c7a2:	4638      	mov	r0, r7
 801c7a4:	b003      	add	sp, #12
 801c7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7a8:	9000      	str	r0, [sp, #0]
 801c7aa:	6821      	ldr	r1, [r4, #0]
 801c7ac:	4630      	mov	r0, r6
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	f7f2 f8d6 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801c7b4:	6863      	ldr	r3, [r4, #4]
 801c7b6:	4638      	mov	r0, r7
 801c7b8:	442b      	add	r3, r5
 801c7ba:	6063      	str	r3, [r4, #4]
 801c7bc:	b003      	add	sp, #12
 801c7be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7c0 <uxr_prepare_best_effort_buffer_to_send>:
 801c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7c4:	4604      	mov	r4, r0
 801c7c6:	461d      	mov	r5, r3
 801c7c8:	6840      	ldr	r0, [r0, #4]
 801c7ca:	7b23      	ldrb	r3, [r4, #12]
 801c7cc:	4298      	cmp	r0, r3
 801c7ce:	bf8c      	ite	hi
 801c7d0:	2601      	movhi	r6, #1
 801c7d2:	2600      	movls	r6, #0
 801c7d4:	d802      	bhi.n	801c7dc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c7d6:	4630      	mov	r0, r6
 801c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7dc:	4688      	mov	r8, r1
 801c7de:	89e0      	ldrh	r0, [r4, #14]
 801c7e0:	2101      	movs	r1, #1
 801c7e2:	4617      	mov	r7, r2
 801c7e4:	f000 fb00 	bl	801cde8 <uxr_seq_num_add>
 801c7e8:	6823      	ldr	r3, [r4, #0]
 801c7ea:	81e0      	strh	r0, [r4, #14]
 801c7ec:	8028      	strh	r0, [r5, #0]
 801c7ee:	f8c8 3000 	str.w	r3, [r8]
 801c7f2:	6863      	ldr	r3, [r4, #4]
 801c7f4:	603b      	str	r3, [r7, #0]
 801c7f6:	7b23      	ldrb	r3, [r4, #12]
 801c7f8:	6063      	str	r3, [r4, #4]
 801c7fa:	4630      	mov	r0, r6
 801c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c800 <on_full_output_buffer>:
 801c800:	b538      	push	{r3, r4, r5, lr}
 801c802:	460c      	mov	r4, r1
 801c804:	6803      	ldr	r3, [r0, #0]
 801c806:	6809      	ldr	r1, [r1, #0]
 801c808:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c80c:	6862      	ldr	r2, [r4, #4]
 801c80e:	fbb2 f2fc 	udiv	r2, r2, ip
 801c812:	1a5b      	subs	r3, r3, r1
 801c814:	fbb3 f3f2 	udiv	r3, r3, r2
 801c818:	3301      	adds	r3, #1
 801c81a:	b29b      	uxth	r3, r3
 801c81c:	fbb3 fefc 	udiv	lr, r3, ip
 801c820:	fb0c 331e 	mls	r3, ip, lr, r3
 801c824:	b29b      	uxth	r3, r3
 801c826:	fb02 f303 	mul.w	r3, r2, r3
 801c82a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801c82e:	58ca      	ldr	r2, [r1, r3]
 801c830:	4463      	add	r3, ip
 801c832:	eba2 020c 	sub.w	r2, r2, ip
 801c836:	3308      	adds	r3, #8
 801c838:	4605      	mov	r5, r0
 801c83a:	4419      	add	r1, r3
 801c83c:	3a04      	subs	r2, #4
 801c83e:	6903      	ldr	r3, [r0, #16]
 801c840:	f7f2 f898 	bl	800e974 <ucdr_init_buffer_origin>
 801c844:	4628      	mov	r0, r5
 801c846:	4903      	ldr	r1, [pc, #12]	@ (801c854 <on_full_output_buffer+0x54>)
 801c848:	4622      	mov	r2, r4
 801c84a:	f7f2 f86f 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 801c84e:	2000      	movs	r0, #0
 801c850:	bd38      	pop	{r3, r4, r5, pc}
 801c852:	bf00      	nop
 801c854:	0801c801 	.word	0x0801c801

0801c858 <uxr_init_output_reliable_stream>:
 801c858:	b410      	push	{r4}
 801c85a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801c85e:	8103      	strh	r3, [r0, #8]
 801c860:	e9c0 1200 	strd	r1, r2, [r0]
 801c864:	f880 c00c 	strb.w	ip, [r0, #12]
 801c868:	b1d3      	cbz	r3, 801c8a0 <uxr_init_output_reliable_stream+0x48>
 801c86a:	f8c1 c000 	str.w	ip, [r1]
 801c86e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c872:	f1bc 0f01 	cmp.w	ip, #1
 801c876:	d913      	bls.n	801c8a0 <uxr_init_output_reliable_stream+0x48>
 801c878:	2301      	movs	r3, #1
 801c87a:	fbb3 f1fc 	udiv	r1, r3, ip
 801c87e:	fb0c 3111 	mls	r1, ip, r1, r3
 801c882:	b289      	uxth	r1, r1
 801c884:	6842      	ldr	r2, [r0, #4]
 801c886:	6804      	ldr	r4, [r0, #0]
 801c888:	fbb2 f2fc 	udiv	r2, r2, ip
 801c88c:	fb01 f202 	mul.w	r2, r1, r2
 801c890:	7b01      	ldrb	r1, [r0, #12]
 801c892:	50a1      	str	r1, [r4, r2]
 801c894:	3301      	adds	r3, #1
 801c896:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c89a:	b29b      	uxth	r3, r3
 801c89c:	459c      	cmp	ip, r3
 801c89e:	d8ec      	bhi.n	801c87a <uxr_init_output_reliable_stream+0x22>
 801c8a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c8a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c8a8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c8ac:	4905      	ldr	r1, [pc, #20]	@ (801c8c4 <uxr_init_output_reliable_stream+0x6c>)
 801c8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8b2:	f8c0 100e 	str.w	r1, [r0, #14]
 801c8b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	8242      	strh	r2, [r0, #18]
 801c8be:	8403      	strh	r3, [r0, #32]
 801c8c0:	4770      	bx	lr
 801c8c2:	bf00      	nop
 801c8c4:	ffff0000 	.word	0xffff0000

0801c8c8 <uxr_reset_output_reliable_stream>:
 801c8c8:	8901      	ldrh	r1, [r0, #8]
 801c8ca:	b1b1      	cbz	r1, 801c8fa <uxr_reset_output_reliable_stream+0x32>
 801c8cc:	f04f 0c00 	mov.w	ip, #0
 801c8d0:	4663      	mov	r3, ip
 801c8d2:	fbb3 f2f1 	udiv	r2, r3, r1
 801c8d6:	fb01 3312 	mls	r3, r1, r2, r3
 801c8da:	b29b      	uxth	r3, r3
 801c8dc:	6842      	ldr	r2, [r0, #4]
 801c8de:	fbb2 f2f1 	udiv	r2, r2, r1
 801c8e2:	6801      	ldr	r1, [r0, #0]
 801c8e4:	fb03 f202 	mul.w	r2, r3, r2
 801c8e8:	7b03      	ldrb	r3, [r0, #12]
 801c8ea:	508b      	str	r3, [r1, r2]
 801c8ec:	f10c 0c01 	add.w	ip, ip, #1
 801c8f0:	8901      	ldrh	r1, [r0, #8]
 801c8f2:	fa1f f38c 	uxth.w	r3, ip
 801c8f6:	4299      	cmp	r1, r3
 801c8f8:	d8eb      	bhi.n	801c8d2 <uxr_reset_output_reliable_stream+0xa>
 801c8fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c8fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c902:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c906:	4904      	ldr	r1, [pc, #16]	@ (801c918 <uxr_reset_output_reliable_stream+0x50>)
 801c908:	f8c0 100e 	str.w	r1, [r0, #14]
 801c90c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c910:	2300      	movs	r3, #0
 801c912:	8242      	strh	r2, [r0, #18]
 801c914:	8403      	strh	r3, [r0, #32]
 801c916:	4770      	bx	lr
 801c918:	ffff0000 	.word	0xffff0000

0801c91c <uxr_prepare_reliable_buffer_to_write>:
 801c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c920:	4604      	mov	r4, r0
 801c922:	b091      	sub	sp, #68	@ 0x44
 801c924:	8900      	ldrh	r0, [r0, #8]
 801c926:	89e7      	ldrh	r7, [r4, #14]
 801c928:	6823      	ldr	r3, [r4, #0]
 801c92a:	9204      	str	r2, [sp, #16]
 801c92c:	fbb7 f2f0 	udiv	r2, r7, r0
 801c930:	fb00 7212 	mls	r2, r0, r2, r7
 801c934:	b292      	uxth	r2, r2
 801c936:	6865      	ldr	r5, [r4, #4]
 801c938:	fbb5 f5f0 	udiv	r5, r5, r0
 801c93c:	fb05 3202 	mla	r2, r5, r2, r3
 801c940:	3204      	adds	r2, #4
 801c942:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801c946:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801c94a:	9203      	str	r2, [sp, #12]
 801c94c:	4688      	mov	r8, r1
 801c94e:	f1a5 0904 	sub.w	r9, r5, #4
 801c952:	2800      	cmp	r0, #0
 801c954:	f000 8143 	beq.w	801cbde <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801c958:	2100      	movs	r1, #0
 801c95a:	460e      	mov	r6, r1
 801c95c:	b28a      	uxth	r2, r1
 801c95e:	fbb2 fcf0 	udiv	ip, r2, r0
 801c962:	fb00 221c 	mls	r2, r0, ip, r2
 801c966:	b292      	uxth	r2, r2
 801c968:	fb05 f202 	mul.w	r2, r5, r2
 801c96c:	3101      	adds	r1, #1
 801c96e:	589a      	ldr	r2, [r3, r2]
 801c970:	455a      	cmp	r2, fp
 801c972:	bf04      	itt	eq
 801c974:	3601      	addeq	r6, #1
 801c976:	b2b6      	uxtheq	r6, r6
 801c978:	4281      	cmp	r1, r0
 801c97a:	d1ef      	bne.n	801c95c <uxr_prepare_reliable_buffer_to_write+0x40>
 801c97c:	4650      	mov	r0, sl
 801c97e:	2104      	movs	r1, #4
 801c980:	9605      	str	r6, [sp, #20]
 801c982:	f7f2 f803 	bl	800e98c <ucdr_alignment>
 801c986:	4482      	add	sl, r0
 801c988:	eb0a 0208 	add.w	r2, sl, r8
 801c98c:	454a      	cmp	r2, r9
 801c98e:	f240 80ca 	bls.w	801cb26 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801c992:	7b22      	ldrb	r2, [r4, #12]
 801c994:	4442      	add	r2, r8
 801c996:	454a      	cmp	r2, r9
 801c998:	f240 80b2 	bls.w	801cb00 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801c99c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801c9a0:	32fc      	adds	r2, #252	@ 0xfc
 801c9a2:	fa1f f389 	uxth.w	r3, r9
 801c9a6:	441a      	add	r2, r3
 801c9a8:	b292      	uxth	r2, r2
 801c9aa:	fb06 fb02 	mul.w	fp, r6, r2
 801c9ae:	45c3      	cmp	fp, r8
 801c9b0:	9205      	str	r2, [sp, #20]
 801c9b2:	9206      	str	r2, [sp, #24]
 801c9b4:	f0c0 80b3 	bcc.w	801cb1e <uxr_prepare_reliable_buffer_to_write+0x202>
 801c9b8:	f10a 0204 	add.w	r2, sl, #4
 801c9bc:	454a      	cmp	r2, r9
 801c9be:	f080 80db 	bcs.w	801cb78 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801c9c2:	f1a3 0b04 	sub.w	fp, r3, #4
 801c9c6:	ebab 0b0a 	sub.w	fp, fp, sl
 801c9ca:	9b05      	ldr	r3, [sp, #20]
 801c9cc:	fa1f fb8b 	uxth.w	fp, fp
 801c9d0:	eba8 080b 	sub.w	r8, r8, fp
 801c9d4:	fbb8 fcf3 	udiv	ip, r8, r3
 801c9d8:	fb03 831c 	mls	r3, r3, ip, r8
 801c9dc:	fa1f fc8c 	uxth.w	ip, ip
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	f040 80c1 	bne.w	801cb68 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801c9e6:	45b4      	cmp	ip, r6
 801c9e8:	f200 8099 	bhi.w	801cb1e <uxr_prepare_reliable_buffer_to_write+0x202>
 801c9ec:	f10d 0820 	add.w	r8, sp, #32
 801c9f0:	f1bc 0f00 	cmp.w	ip, #0
 801c9f4:	d040      	beq.n	801ca78 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801c9f6:	f8cd a01c 	str.w	sl, [sp, #28]
 801c9fa:	2600      	movs	r6, #0
 801c9fc:	f8dd a014 	ldr.w	sl, [sp, #20]
 801ca00:	9505      	str	r5, [sp, #20]
 801ca02:	f10d 0820 	add.w	r8, sp, #32
 801ca06:	4665      	mov	r5, ip
 801ca08:	e000      	b.n	801ca0c <uxr_prepare_reliable_buffer_to_write+0xf0>
 801ca0a:	46d3      	mov	fp, sl
 801ca0c:	8921      	ldrh	r1, [r4, #8]
 801ca0e:	fbb7 f2f1 	udiv	r2, r7, r1
 801ca12:	fb01 7212 	mls	r2, r1, r2, r7
 801ca16:	b292      	uxth	r2, r2
 801ca18:	6863      	ldr	r3, [r4, #4]
 801ca1a:	fbb3 f3f1 	udiv	r3, r3, r1
 801ca1e:	6821      	ldr	r1, [r4, #0]
 801ca20:	fb02 f303 	mul.w	r3, r2, r3
 801ca24:	3304      	adds	r3, #4
 801ca26:	4419      	add	r1, r3
 801ca28:	4640      	mov	r0, r8
 801ca2a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801ca2e:	9200      	str	r2, [sp, #0]
 801ca30:	2300      	movs	r3, #0
 801ca32:	464a      	mov	r2, r9
 801ca34:	f7f1 ff94 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801ca38:	465a      	mov	r2, fp
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	210d      	movs	r1, #13
 801ca3e:	4640      	mov	r0, r8
 801ca40:	f7fa fc06 	bl	8017250 <uxr_buffer_submessage_header>
 801ca44:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ca48:	fbb7 f2fc 	udiv	r2, r7, ip
 801ca4c:	fb0c 7212 	mls	r2, ip, r2, r7
 801ca50:	b292      	uxth	r2, r2
 801ca52:	6863      	ldr	r3, [r4, #4]
 801ca54:	fbb3 f3fc 	udiv	r3, r3, ip
 801ca58:	fb02 f303 	mul.w	r3, r2, r3
 801ca5c:	6822      	ldr	r2, [r4, #0]
 801ca5e:	4638      	mov	r0, r7
 801ca60:	f842 9003 	str.w	r9, [r2, r3]
 801ca64:	2101      	movs	r1, #1
 801ca66:	f000 f9bf 	bl	801cde8 <uxr_seq_num_add>
 801ca6a:	3601      	adds	r6, #1
 801ca6c:	42ae      	cmp	r6, r5
 801ca6e:	4607      	mov	r7, r0
 801ca70:	d1cb      	bne.n	801ca0a <uxr_prepare_reliable_buffer_to_write+0xee>
 801ca72:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ca76:	9d05      	ldr	r5, [sp, #20]
 801ca78:	8920      	ldrh	r0, [r4, #8]
 801ca7a:	fbb7 f1f0 	udiv	r1, r7, r0
 801ca7e:	fb00 7111 	mls	r1, r0, r1, r7
 801ca82:	b289      	uxth	r1, r1
 801ca84:	6863      	ldr	r3, [r4, #4]
 801ca86:	fbb3 f3f0 	udiv	r3, r3, r0
 801ca8a:	fb01 f303 	mul.w	r3, r1, r3
 801ca8e:	6821      	ldr	r1, [r4, #0]
 801ca90:	3304      	adds	r3, #4
 801ca92:	4419      	add	r1, r3
 801ca94:	464a      	mov	r2, r9
 801ca96:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801ca9a:	9000      	str	r0, [sp, #0]
 801ca9c:	2300      	movs	r3, #0
 801ca9e:	4640      	mov	r0, r8
 801caa0:	f7f1 ff5e 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801caa4:	4640      	mov	r0, r8
 801caa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801caaa:	2302      	movs	r3, #2
 801caac:	fa1f f288 	uxth.w	r2, r8
 801cab0:	210d      	movs	r1, #13
 801cab2:	f7fa fbcd 	bl	8017250 <uxr_buffer_submessage_header>
 801cab6:	8926      	ldrh	r6, [r4, #8]
 801cab8:	9b03      	ldr	r3, [sp, #12]
 801caba:	7b20      	ldrb	r0, [r4, #12]
 801cabc:	f1a5 0208 	sub.w	r2, r5, #8
 801cac0:	f10a 0104 	add.w	r1, sl, #4
 801cac4:	fbb7 f5f6 	udiv	r5, r7, r6
 801cac8:	fb06 7515 	mls	r5, r6, r5, r7
 801cacc:	440b      	add	r3, r1
 801cace:	b2ad      	uxth	r5, r5
 801cad0:	4619      	mov	r1, r3
 801cad2:	3004      	adds	r0, #4
 801cad4:	6863      	ldr	r3, [r4, #4]
 801cad6:	fbb3 f3f6 	udiv	r3, r3, r6
 801cada:	fb05 f303 	mul.w	r3, r5, r3
 801cade:	6825      	ldr	r5, [r4, #0]
 801cae0:	4440      	add	r0, r8
 801cae2:	50e8      	str	r0, [r5, r3]
 801cae4:	9d04      	ldr	r5, [sp, #16]
 801cae6:	eba2 020a 	sub.w	r2, r2, sl
 801caea:	4628      	mov	r0, r5
 801caec:	f7f1 ff4a 	bl	800e984 <ucdr_init_buffer>
 801caf0:	493c      	ldr	r1, [pc, #240]	@ (801cbe4 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801caf2:	4622      	mov	r2, r4
 801caf4:	4628      	mov	r0, r5
 801caf6:	f7f1 ff19 	bl	800e92c <ucdr_set_on_full_buffer_callback>
 801cafa:	81e7      	strh	r7, [r4, #14]
 801cafc:	2001      	movs	r0, #1
 801cafe:	e00f      	b.n	801cb20 <uxr_prepare_reliable_buffer_to_write+0x204>
 801cb00:	2101      	movs	r1, #1
 801cb02:	89e0      	ldrh	r0, [r4, #14]
 801cb04:	f000 f970 	bl	801cde8 <uxr_seq_num_add>
 801cb08:	8921      	ldrh	r1, [r4, #8]
 801cb0a:	4605      	mov	r5, r0
 801cb0c:	8a60      	ldrh	r0, [r4, #18]
 801cb0e:	f000 f96b 	bl	801cde8 <uxr_seq_num_add>
 801cb12:	4601      	mov	r1, r0
 801cb14:	4628      	mov	r0, r5
 801cb16:	f000 f96f 	bl	801cdf8 <uxr_seq_num_cmp>
 801cb1a:	2800      	cmp	r0, #0
 801cb1c:	dd45      	ble.n	801cbaa <uxr_prepare_reliable_buffer_to_write+0x28e>
 801cb1e:	2000      	movs	r0, #0
 801cb20:	b011      	add	sp, #68	@ 0x44
 801cb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb26:	8921      	ldrh	r1, [r4, #8]
 801cb28:	8a60      	ldrh	r0, [r4, #18]
 801cb2a:	9205      	str	r2, [sp, #20]
 801cb2c:	f000 f95c 	bl	801cde8 <uxr_seq_num_add>
 801cb30:	4601      	mov	r1, r0
 801cb32:	4638      	mov	r0, r7
 801cb34:	f000 f960 	bl	801cdf8 <uxr_seq_num_cmp>
 801cb38:	2800      	cmp	r0, #0
 801cb3a:	9a05      	ldr	r2, [sp, #20]
 801cb3c:	dcef      	bgt.n	801cb1e <uxr_prepare_reliable_buffer_to_write+0x202>
 801cb3e:	8926      	ldrh	r6, [r4, #8]
 801cb40:	fbb7 f5f6 	udiv	r5, r7, r6
 801cb44:	fb06 7515 	mls	r5, r6, r5, r7
 801cb48:	b2ad      	uxth	r5, r5
 801cb4a:	6863      	ldr	r3, [r4, #4]
 801cb4c:	6824      	ldr	r4, [r4, #0]
 801cb4e:	fbb3 f3f6 	udiv	r3, r3, r6
 801cb52:	fb05 f303 	mul.w	r3, r5, r3
 801cb56:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801cb5a:	50e2      	str	r2, [r4, r3]
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	f8cd a000 	str.w	sl, [sp]
 801cb62:	f7f1 fefd 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801cb66:	e7c9      	b.n	801cafc <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801cb68:	f10c 0c01 	add.w	ip, ip, #1
 801cb6c:	fa1f fc8c 	uxth.w	ip, ip
 801cb70:	45b4      	cmp	ip, r6
 801cb72:	9306      	str	r3, [sp, #24]
 801cb74:	d8d3      	bhi.n	801cb1e <uxr_prepare_reliable_buffer_to_write+0x202>
 801cb76:	e739      	b.n	801c9ec <uxr_prepare_reliable_buffer_to_write+0xd0>
 801cb78:	4638      	mov	r0, r7
 801cb7a:	2101      	movs	r1, #1
 801cb7c:	9307      	str	r3, [sp, #28]
 801cb7e:	f000 f933 	bl	801cde8 <uxr_seq_num_add>
 801cb82:	8921      	ldrh	r1, [r4, #8]
 801cb84:	6862      	ldr	r2, [r4, #4]
 801cb86:	4607      	mov	r7, r0
 801cb88:	fbb0 f0f1 	udiv	r0, r0, r1
 801cb8c:	fb01 7010 	mls	r0, r1, r0, r7
 801cb90:	b280      	uxth	r0, r0
 801cb92:	fbb2 f1f1 	udiv	r1, r2, r1
 801cb96:	6822      	ldr	r2, [r4, #0]
 801cb98:	fb00 f101 	mul.w	r1, r0, r1
 801cb9c:	3104      	adds	r1, #4
 801cb9e:	1853      	adds	r3, r2, r1
 801cba0:	9303      	str	r3, [sp, #12]
 801cba2:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801cba6:	9b07      	ldr	r3, [sp, #28]
 801cba8:	e70b      	b.n	801c9c2 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801cbaa:	8921      	ldrh	r1, [r4, #8]
 801cbac:	fbb5 f2f1 	udiv	r2, r5, r1
 801cbb0:	fb01 5212 	mls	r2, r1, r2, r5
 801cbb4:	b292      	uxth	r2, r2
 801cbb6:	6863      	ldr	r3, [r4, #4]
 801cbb8:	fbb3 f3f1 	udiv	r3, r3, r1
 801cbbc:	6821      	ldr	r1, [r4, #0]
 801cbbe:	9804      	ldr	r0, [sp, #16]
 801cbc0:	fb02 f303 	mul.w	r3, r2, r3
 801cbc4:	3304      	adds	r3, #4
 801cbc6:	7b22      	ldrb	r2, [r4, #12]
 801cbc8:	4419      	add	r1, r3
 801cbca:	4442      	add	r2, r8
 801cbcc:	f841 2c04 	str.w	r2, [r1, #-4]
 801cbd0:	7b23      	ldrb	r3, [r4, #12]
 801cbd2:	9300      	str	r3, [sp, #0]
 801cbd4:	2300      	movs	r3, #0
 801cbd6:	f7f1 fec3 	bl	800e960 <ucdr_init_buffer_origin_offset>
 801cbda:	81e5      	strh	r5, [r4, #14]
 801cbdc:	e78e      	b.n	801cafc <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801cbde:	4606      	mov	r6, r0
 801cbe0:	e6cc      	b.n	801c97c <uxr_prepare_reliable_buffer_to_write+0x60>
 801cbe2:	bf00      	nop
 801cbe4:	0801c801 	.word	0x0801c801

0801cbe8 <uxr_prepare_next_reliable_buffer_to_send>:
 801cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbea:	4604      	mov	r4, r0
 801cbec:	460f      	mov	r7, r1
 801cbee:	8a00      	ldrh	r0, [r0, #16]
 801cbf0:	2101      	movs	r1, #1
 801cbf2:	4615      	mov	r5, r2
 801cbf4:	461e      	mov	r6, r3
 801cbf6:	f000 f8f7 	bl	801cde8 <uxr_seq_num_add>
 801cbfa:	8030      	strh	r0, [r6, #0]
 801cbfc:	8922      	ldrh	r2, [r4, #8]
 801cbfe:	fbb0 f3f2 	udiv	r3, r0, r2
 801cc02:	fb02 0c13 	mls	ip, r2, r3, r0
 801cc06:	fa1f fc8c 	uxth.w	ip, ip
 801cc0a:	6863      	ldr	r3, [r4, #4]
 801cc0c:	fbb3 f3f2 	udiv	r3, r3, r2
 801cc10:	fb0c fc03 	mul.w	ip, ip, r3
 801cc14:	6823      	ldr	r3, [r4, #0]
 801cc16:	89e1      	ldrh	r1, [r4, #14]
 801cc18:	f10c 0c04 	add.w	ip, ip, #4
 801cc1c:	4463      	add	r3, ip
 801cc1e:	603b      	str	r3, [r7, #0]
 801cc20:	6823      	ldr	r3, [r4, #0]
 801cc22:	4463      	add	r3, ip
 801cc24:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801cc28:	602b      	str	r3, [r5, #0]
 801cc2a:	f000 f8e5 	bl	801cdf8 <uxr_seq_num_cmp>
 801cc2e:	2800      	cmp	r0, #0
 801cc30:	dd01      	ble.n	801cc36 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801cc32:	2000      	movs	r0, #0
 801cc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc36:	7b23      	ldrb	r3, [r4, #12]
 801cc38:	682a      	ldr	r2, [r5, #0]
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	d9f9      	bls.n	801cc32 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801cc3e:	8a61      	ldrh	r1, [r4, #18]
 801cc40:	8a20      	ldrh	r0, [r4, #16]
 801cc42:	f000 f8d5 	bl	801cdf0 <uxr_seq_num_sub>
 801cc46:	8923      	ldrh	r3, [r4, #8]
 801cc48:	4283      	cmp	r3, r0
 801cc4a:	d0f2      	beq.n	801cc32 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801cc4c:	8830      	ldrh	r0, [r6, #0]
 801cc4e:	89e3      	ldrh	r3, [r4, #14]
 801cc50:	8220      	strh	r0, [r4, #16]
 801cc52:	4298      	cmp	r0, r3
 801cc54:	d001      	beq.n	801cc5a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801cc56:	2001      	movs	r0, #1
 801cc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc5a:	2101      	movs	r1, #1
 801cc5c:	f000 f8c4 	bl	801cde8 <uxr_seq_num_add>
 801cc60:	81e0      	strh	r0, [r4, #14]
 801cc62:	e7f8      	b.n	801cc56 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801cc64 <uxr_update_output_stream_heartbeat_timestamp>:
 801cc64:	b570      	push	{r4, r5, r6, lr}
 801cc66:	8a01      	ldrh	r1, [r0, #16]
 801cc68:	4604      	mov	r4, r0
 801cc6a:	8a40      	ldrh	r0, [r0, #18]
 801cc6c:	4615      	mov	r5, r2
 801cc6e:	461e      	mov	r6, r3
 801cc70:	f000 f8c2 	bl	801cdf8 <uxr_seq_num_cmp>
 801cc74:	2800      	cmp	r0, #0
 801cc76:	db07      	blt.n	801cc88 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801cc78:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801cc7c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801cc80:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801cc84:	2000      	movs	r0, #0
 801cc86:	bd70      	pop	{r4, r5, r6, pc}
 801cc88:	f894 3020 	ldrb.w	r3, [r4, #32]
 801cc8c:	b953      	cbnz	r3, 801cca4 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801cc8e:	2301      	movs	r3, #1
 801cc90:	f884 3020 	strb.w	r3, [r4, #32]
 801cc94:	3564      	adds	r5, #100	@ 0x64
 801cc96:	f04f 0000 	mov.w	r0, #0
 801cc9a:	f146 0600 	adc.w	r6, r6, #0
 801cc9e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801cca2:	bd70      	pop	{r4, r5, r6, pc}
 801cca4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801cca8:	428d      	cmp	r5, r1
 801ccaa:	eb76 0202 	sbcs.w	r2, r6, r2
 801ccae:	dbf1      	blt.n	801cc94 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ccb0:	3301      	adds	r3, #1
 801ccb2:	3564      	adds	r5, #100	@ 0x64
 801ccb4:	f884 3020 	strb.w	r3, [r4, #32]
 801ccb8:	f04f 0001 	mov.w	r0, #1
 801ccbc:	f146 0600 	adc.w	r6, r6, #0
 801ccc0:	e7ed      	b.n	801cc9e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801ccc2:	bf00      	nop

0801ccc4 <uxr_begin_output_nack_buffer_it>:
 801ccc4:	8a40      	ldrh	r0, [r0, #18]
 801ccc6:	4770      	bx	lr

0801ccc8 <uxr_next_reliable_nack_buffer_to_send>:
 801ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cccc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801ccd0:	f1b8 0f00 	cmp.w	r8, #0
 801ccd4:	d104      	bne.n	801cce0 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801ccd6:	f04f 0800 	mov.w	r8, #0
 801ccda:	4640      	mov	r0, r8
 801ccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cce0:	4604      	mov	r4, r0
 801cce2:	460e      	mov	r6, r1
 801cce4:	8818      	ldrh	r0, [r3, #0]
 801cce6:	4617      	mov	r7, r2
 801cce8:	461d      	mov	r5, r3
 801ccea:	e019      	b.n	801cd20 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801ccec:	8921      	ldrh	r1, [r4, #8]
 801ccee:	8828      	ldrh	r0, [r5, #0]
 801ccf0:	fbb0 fcf1 	udiv	ip, r0, r1
 801ccf4:	e9d4 3200 	ldrd	r3, r2, [r4]
 801ccf8:	fb01 0c1c 	mls	ip, r1, ip, r0
 801ccfc:	fa1f fc8c 	uxth.w	ip, ip
 801cd00:	fbb2 f2f1 	udiv	r2, r2, r1
 801cd04:	fb02 fc0c 	mul.w	ip, r2, ip
 801cd08:	f10c 0c04 	add.w	ip, ip, #4
 801cd0c:	4463      	add	r3, ip
 801cd0e:	6033      	str	r3, [r6, #0]
 801cd10:	6823      	ldr	r3, [r4, #0]
 801cd12:	4463      	add	r3, ip
 801cd14:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801cd18:	603b      	str	r3, [r7, #0]
 801cd1a:	7b22      	ldrb	r2, [r4, #12]
 801cd1c:	429a      	cmp	r2, r3
 801cd1e:	d1dc      	bne.n	801ccda <uxr_next_reliable_nack_buffer_to_send+0x12>
 801cd20:	2101      	movs	r1, #1
 801cd22:	f000 f861 	bl	801cde8 <uxr_seq_num_add>
 801cd26:	8028      	strh	r0, [r5, #0]
 801cd28:	8a21      	ldrh	r1, [r4, #16]
 801cd2a:	f000 f865 	bl	801cdf8 <uxr_seq_num_cmp>
 801cd2e:	2800      	cmp	r0, #0
 801cd30:	dddc      	ble.n	801ccec <uxr_next_reliable_nack_buffer_to_send+0x24>
 801cd32:	2300      	movs	r3, #0
 801cd34:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801cd38:	e7cd      	b.n	801ccd6 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801cd3a:	bf00      	nop

0801cd3c <uxr_process_acknack>:
 801cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd3e:	4604      	mov	r4, r0
 801cd40:	460e      	mov	r6, r1
 801cd42:	4610      	mov	r0, r2
 801cd44:	2101      	movs	r1, #1
 801cd46:	f000 f853 	bl	801cdf0 <uxr_seq_num_sub>
 801cd4a:	8a61      	ldrh	r1, [r4, #18]
 801cd4c:	f000 f850 	bl	801cdf0 <uxr_seq_num_sub>
 801cd50:	b1c0      	cbz	r0, 801cd84 <uxr_process_acknack+0x48>
 801cd52:	4605      	mov	r5, r0
 801cd54:	2700      	movs	r7, #0
 801cd56:	2101      	movs	r1, #1
 801cd58:	8a60      	ldrh	r0, [r4, #18]
 801cd5a:	f000 f845 	bl	801cde8 <uxr_seq_num_add>
 801cd5e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801cd62:	fbb0 f1fc 	udiv	r1, r0, ip
 801cd66:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cd6a:	fb0c 0111 	mls	r1, ip, r1, r0
 801cd6e:	b289      	uxth	r1, r1
 801cd70:	3701      	adds	r7, #1
 801cd72:	fbb3 f3fc 	udiv	r3, r3, ip
 801cd76:	fb01 f303 	mul.w	r3, r1, r3
 801cd7a:	42bd      	cmp	r5, r7
 801cd7c:	7b21      	ldrb	r1, [r4, #12]
 801cd7e:	8260      	strh	r0, [r4, #18]
 801cd80:	50d1      	str	r1, [r2, r3]
 801cd82:	d1e8      	bne.n	801cd56 <uxr_process_acknack+0x1a>
 801cd84:	3e00      	subs	r6, #0
 801cd86:	f04f 0300 	mov.w	r3, #0
 801cd8a:	bf18      	it	ne
 801cd8c:	2601      	movne	r6, #1
 801cd8e:	f884 3020 	strb.w	r3, [r4, #32]
 801cd92:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801cd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cd98 <uxr_is_output_up_to_date>:
 801cd98:	8a01      	ldrh	r1, [r0, #16]
 801cd9a:	8a40      	ldrh	r0, [r0, #18]
 801cd9c:	b508      	push	{r3, lr}
 801cd9e:	f000 f82b 	bl	801cdf8 <uxr_seq_num_cmp>
 801cda2:	fab0 f080 	clz	r0, r0
 801cda6:	0940      	lsrs	r0, r0, #5
 801cda8:	bd08      	pop	{r3, pc}
 801cdaa:	bf00      	nop

0801cdac <get_available_free_slots>:
 801cdac:	8901      	ldrh	r1, [r0, #8]
 801cdae:	b1c1      	cbz	r1, 801cde2 <get_available_free_slots+0x36>
 801cdb0:	b530      	push	{r4, r5, lr}
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	6843      	ldr	r3, [r0, #4]
 801cdb6:	6805      	ldr	r5, [r0, #0]
 801cdb8:	7b04      	ldrb	r4, [r0, #12]
 801cdba:	fbb3 fef1 	udiv	lr, r3, r1
 801cdbe:	4610      	mov	r0, r2
 801cdc0:	b293      	uxth	r3, r2
 801cdc2:	fbb3 fcf1 	udiv	ip, r3, r1
 801cdc6:	fb01 331c 	mls	r3, r1, ip, r3
 801cdca:	b29b      	uxth	r3, r3
 801cdcc:	fb0e f303 	mul.w	r3, lr, r3
 801cdd0:	3201      	adds	r2, #1
 801cdd2:	58eb      	ldr	r3, [r5, r3]
 801cdd4:	429c      	cmp	r4, r3
 801cdd6:	bf04      	itt	eq
 801cdd8:	3001      	addeq	r0, #1
 801cdda:	b280      	uxtheq	r0, r0
 801cddc:	4291      	cmp	r1, r2
 801cdde:	d1ef      	bne.n	801cdc0 <get_available_free_slots+0x14>
 801cde0:	bd30      	pop	{r4, r5, pc}
 801cde2:	4608      	mov	r0, r1
 801cde4:	4770      	bx	lr
 801cde6:	bf00      	nop

0801cde8 <uxr_seq_num_add>:
 801cde8:	4408      	add	r0, r1
 801cdea:	b280      	uxth	r0, r0
 801cdec:	4770      	bx	lr
 801cdee:	bf00      	nop

0801cdf0 <uxr_seq_num_sub>:
 801cdf0:	1a40      	subs	r0, r0, r1
 801cdf2:	b280      	uxth	r0, r0
 801cdf4:	4770      	bx	lr
 801cdf6:	bf00      	nop

0801cdf8 <uxr_seq_num_cmp>:
 801cdf8:	4288      	cmp	r0, r1
 801cdfa:	d010      	beq.n	801ce1e <uxr_seq_num_cmp+0x26>
 801cdfc:	d207      	bcs.n	801ce0e <uxr_seq_num_cmp+0x16>
 801cdfe:	1a09      	subs	r1, r1, r0
 801ce00:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801ce04:	bfb4      	ite	lt
 801ce06:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801ce0a:	2001      	movge	r0, #1
 801ce0c:	4770      	bx	lr
 801ce0e:	1a41      	subs	r1, r0, r1
 801ce10:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801ce14:	bfcc      	ite	gt
 801ce16:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801ce1a:	2001      	movle	r0, #1
 801ce1c:	4770      	bx	lr
 801ce1e:	2000      	movs	r0, #0
 801ce20:	4770      	bx	lr
 801ce22:	bf00      	nop

0801ce24 <rcl_get_automatic_discovery_range>:
 801ce24:	b530      	push	{r4, r5, lr}
 801ce26:	b083      	sub	sp, #12
 801ce28:	2300      	movs	r3, #0
 801ce2a:	9301      	str	r3, [sp, #4]
 801ce2c:	b1c0      	cbz	r0, 801ce60 <rcl_get_automatic_discovery_range+0x3c>
 801ce2e:	4604      	mov	r4, r0
 801ce30:	a901      	add	r1, sp, #4
 801ce32:	4818      	ldr	r0, [pc, #96]	@ (801ce94 <rcl_get_automatic_discovery_range+0x70>)
 801ce34:	f7f3 ff44 	bl	8010cc0 <rcutils_get_env>
 801ce38:	b110      	cbz	r0, 801ce40 <rcl_get_automatic_discovery_range+0x1c>
 801ce3a:	2001      	movs	r0, #1
 801ce3c:	b003      	add	sp, #12
 801ce3e:	bd30      	pop	{r4, r5, pc}
 801ce40:	9d01      	ldr	r5, [sp, #4]
 801ce42:	782b      	ldrb	r3, [r5, #0]
 801ce44:	b923      	cbnz	r3, 801ce50 <rcl_get_automatic_discovery_range+0x2c>
 801ce46:	2303      	movs	r3, #3
 801ce48:	7023      	strb	r3, [r4, #0]
 801ce4a:	2000      	movs	r0, #0
 801ce4c:	b003      	add	sp, #12
 801ce4e:	bd30      	pop	{r4, r5, pc}
 801ce50:	4911      	ldr	r1, [pc, #68]	@ (801ce98 <rcl_get_automatic_discovery_range+0x74>)
 801ce52:	4628      	mov	r0, r5
 801ce54:	f7e3 f9e4 	bl	8000220 <strcmp>
 801ce58:	b928      	cbnz	r0, 801ce66 <rcl_get_automatic_discovery_range+0x42>
 801ce5a:	2301      	movs	r3, #1
 801ce5c:	7023      	strb	r3, [r4, #0]
 801ce5e:	e7f4      	b.n	801ce4a <rcl_get_automatic_discovery_range+0x26>
 801ce60:	200b      	movs	r0, #11
 801ce62:	b003      	add	sp, #12
 801ce64:	bd30      	pop	{r4, r5, pc}
 801ce66:	490d      	ldr	r1, [pc, #52]	@ (801ce9c <rcl_get_automatic_discovery_range+0x78>)
 801ce68:	4628      	mov	r0, r5
 801ce6a:	f7e3 f9d9 	bl	8000220 <strcmp>
 801ce6e:	b168      	cbz	r0, 801ce8c <rcl_get_automatic_discovery_range+0x68>
 801ce70:	490b      	ldr	r1, [pc, #44]	@ (801cea0 <rcl_get_automatic_discovery_range+0x7c>)
 801ce72:	4628      	mov	r0, r5
 801ce74:	f7e3 f9d4 	bl	8000220 <strcmp>
 801ce78:	2800      	cmp	r0, #0
 801ce7a:	d0e4      	beq.n	801ce46 <rcl_get_automatic_discovery_range+0x22>
 801ce7c:	4909      	ldr	r1, [pc, #36]	@ (801cea4 <rcl_get_automatic_discovery_range+0x80>)
 801ce7e:	4628      	mov	r0, r5
 801ce80:	f7e3 f9ce 	bl	8000220 <strcmp>
 801ce84:	b910      	cbnz	r0, 801ce8c <rcl_get_automatic_discovery_range+0x68>
 801ce86:	2304      	movs	r3, #4
 801ce88:	7023      	strb	r3, [r4, #0]
 801ce8a:	e7de      	b.n	801ce4a <rcl_get_automatic_discovery_range+0x26>
 801ce8c:	2302      	movs	r3, #2
 801ce8e:	7023      	strb	r3, [r4, #0]
 801ce90:	e7db      	b.n	801ce4a <rcl_get_automatic_discovery_range+0x26>
 801ce92:	bf00      	nop
 801ce94:	080218c8 	.word	0x080218c8
 801ce98:	080218e8 	.word	0x080218e8
 801ce9c:	080218ec 	.word	0x080218ec
 801cea0:	080218f8 	.word	0x080218f8
 801cea4:	08021900 	.word	0x08021900

0801cea8 <rcl_automatic_discovery_range_to_string>:
 801cea8:	2804      	cmp	r0, #4
 801ceaa:	bf9a      	itte	ls
 801ceac:	4b02      	ldrls	r3, [pc, #8]	@ (801ceb8 <rcl_automatic_discovery_range_to_string+0x10>)
 801ceae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801ceb2:	2000      	movhi	r0, #0
 801ceb4:	4770      	bx	lr
 801ceb6:	bf00      	nop
 801ceb8:	080219f0 	.word	0x080219f0

0801cebc <rcl_get_discovery_static_peers>:
 801cebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cec0:	b08c      	sub	sp, #48	@ 0x30
 801cec2:	2300      	movs	r3, #0
 801cec4:	9304      	str	r3, [sp, #16]
 801cec6:	2800      	cmp	r0, #0
 801cec8:	d04e      	beq.n	801cf68 <rcl_get_discovery_static_peers+0xac>
 801ceca:	460d      	mov	r5, r1
 801cecc:	2900      	cmp	r1, #0
 801cece:	d04b      	beq.n	801cf68 <rcl_get_discovery_static_peers+0xac>
 801ced0:	4604      	mov	r4, r0
 801ced2:	a904      	add	r1, sp, #16
 801ced4:	482d      	ldr	r0, [pc, #180]	@ (801cf8c <rcl_get_discovery_static_peers+0xd0>)
 801ced6:	f7f3 fef3 	bl	8010cc0 <rcutils_get_env>
 801ceda:	b118      	cbz	r0, 801cee4 <rcl_get_discovery_static_peers+0x28>
 801cedc:	2001      	movs	r0, #1
 801cede:	b00c      	add	sp, #48	@ 0x30
 801cee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cee4:	9b04      	ldr	r3, [sp, #16]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d0f8      	beq.n	801cedc <rcl_get_discovery_static_peers+0x20>
 801ceea:	af05      	add	r7, sp, #20
 801ceec:	4638      	mov	r0, r7
 801ceee:	f7fe f87b 	bl	801afe8 <rcutils_get_zero_initialized_string_array>
 801cef2:	f105 0308 	add.w	r3, r5, #8
 801cef6:	9703      	str	r7, [sp, #12]
 801cef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cefc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801cf00:	9804      	ldr	r0, [sp, #16]
 801cf02:	e895 000c 	ldmia.w	r5, {r2, r3}
 801cf06:	213b      	movs	r1, #59	@ 0x3b
 801cf08:	f000 fac6 	bl	801d498 <rcutils_split>
 801cf0c:	2800      	cmp	r0, #0
 801cf0e:	d1e5      	bne.n	801cedc <rcl_get_discovery_static_peers+0x20>
 801cf10:	9905      	ldr	r1, [sp, #20]
 801cf12:	462a      	mov	r2, r5
 801cf14:	4620      	mov	r0, r4
 801cf16:	f7fe f9f1 	bl	801b2fc <rmw_discovery_options_init>
 801cf1a:	4606      	mov	r6, r0
 801cf1c:	bb90      	cbnz	r0, 801cf84 <rcl_get_discovery_static_peers+0xc8>
 801cf1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801cf22:	f1b9 0f00 	cmp.w	r9, #0
 801cf26:	d026      	beq.n	801cf76 <rcl_get_discovery_static_peers+0xba>
 801cf28:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cf2c:	4680      	mov	r8, r0
 801cf2e:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801cf32:	4628      	mov	r0, r5
 801cf34:	f7e3 f9d4 	bl	80002e0 <strlen>
 801cf38:	28ff      	cmp	r0, #255	@ 0xff
 801cf3a:	4629      	mov	r1, r5
 801cf3c:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801cf40:	d816      	bhi.n	801cf70 <rcl_get_discovery_static_peers+0xb4>
 801cf42:	6860      	ldr	r0, [r4, #4]
 801cf44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cf48:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801cf4c:	f001 f927 	bl	801e19e <strncpy>
 801cf50:	6863      	ldr	r3, [r4, #4]
 801cf52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801cf56:	3601      	adds	r6, #1
 801cf58:	442b      	add	r3, r5
 801cf5a:	454e      	cmp	r6, r9
 801cf5c:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801cf60:	d209      	bcs.n	801cf76 <rcl_get_discovery_static_peers+0xba>
 801cf62:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cf66:	e7e2      	b.n	801cf2e <rcl_get_discovery_static_peers+0x72>
 801cf68:	200b      	movs	r0, #11
 801cf6a:	b00c      	add	sp, #48	@ 0x30
 801cf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf70:	3601      	adds	r6, #1
 801cf72:	454e      	cmp	r6, r9
 801cf74:	d3db      	bcc.n	801cf2e <rcl_get_discovery_static_peers+0x72>
 801cf76:	4638      	mov	r0, r7
 801cf78:	f7fe f876 	bl	801b068 <rcutils_string_array_fini>
 801cf7c:	3800      	subs	r0, #0
 801cf7e:	bf18      	it	ne
 801cf80:	2001      	movne	r0, #1
 801cf82:	e7ac      	b.n	801cede <rcl_get_discovery_static_peers+0x22>
 801cf84:	f7fb fca2 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 801cf88:	e7a9      	b.n	801cede <rcl_get_discovery_static_peers+0x22>
 801cf8a:	bf00      	nop
 801cf8c:	08021910 	.word	0x08021910

0801cf90 <rcl_get_default_domain_id>:
 801cf90:	b530      	push	{r4, r5, lr}
 801cf92:	b083      	sub	sp, #12
 801cf94:	2300      	movs	r3, #0
 801cf96:	9300      	str	r3, [sp, #0]
 801cf98:	b1f0      	cbz	r0, 801cfd8 <rcl_get_default_domain_id+0x48>
 801cf9a:	4604      	mov	r4, r0
 801cf9c:	4669      	mov	r1, sp
 801cf9e:	4812      	ldr	r0, [pc, #72]	@ (801cfe8 <rcl_get_default_domain_id+0x58>)
 801cfa0:	f7f3 fe8e 	bl	8010cc0 <rcutils_get_env>
 801cfa4:	4602      	mov	r2, r0
 801cfa6:	b108      	cbz	r0, 801cfac <rcl_get_default_domain_id+0x1c>
 801cfa8:	2001      	movs	r0, #1
 801cfaa:	e004      	b.n	801cfb6 <rcl_get_default_domain_id+0x26>
 801cfac:	9800      	ldr	r0, [sp, #0]
 801cfae:	b108      	cbz	r0, 801cfb4 <rcl_get_default_domain_id+0x24>
 801cfb0:	7803      	ldrb	r3, [r0, #0]
 801cfb2:	b913      	cbnz	r3, 801cfba <rcl_get_default_domain_id+0x2a>
 801cfb4:	2000      	movs	r0, #0
 801cfb6:	b003      	add	sp, #12
 801cfb8:	bd30      	pop	{r4, r5, pc}
 801cfba:	a901      	add	r1, sp, #4
 801cfbc:	9201      	str	r2, [sp, #4]
 801cfbe:	f000 fdc3 	bl	801db48 <strtoul>
 801cfc2:	4605      	mov	r5, r0
 801cfc4:	b158      	cbz	r0, 801cfde <rcl_get_default_domain_id+0x4e>
 801cfc6:	1c43      	adds	r3, r0, #1
 801cfc8:	d104      	bne.n	801cfd4 <rcl_get_default_domain_id+0x44>
 801cfca:	f001 f9bd 	bl	801e348 <__errno>
 801cfce:	6803      	ldr	r3, [r0, #0]
 801cfd0:	2b22      	cmp	r3, #34	@ 0x22
 801cfd2:	d0e9      	beq.n	801cfa8 <rcl_get_default_domain_id+0x18>
 801cfd4:	6025      	str	r5, [r4, #0]
 801cfd6:	e7ed      	b.n	801cfb4 <rcl_get_default_domain_id+0x24>
 801cfd8:	200b      	movs	r0, #11
 801cfda:	b003      	add	sp, #12
 801cfdc:	bd30      	pop	{r4, r5, pc}
 801cfde:	9b01      	ldr	r3, [sp, #4]
 801cfe0:	781b      	ldrb	r3, [r3, #0]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d0f6      	beq.n	801cfd4 <rcl_get_default_domain_id+0x44>
 801cfe6:	e7df      	b.n	801cfa8 <rcl_get_default_domain_id+0x18>
 801cfe8:	08021a04 	.word	0x08021a04

0801cfec <rcl_expand_topic_name>:
 801cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff0:	b08b      	sub	sp, #44	@ 0x2c
 801cff2:	9306      	str	r3, [sp, #24]
 801cff4:	2800      	cmp	r0, #0
 801cff6:	f000 80ad 	beq.w	801d154 <rcl_expand_topic_name+0x168>
 801cffa:	460e      	mov	r6, r1
 801cffc:	2900      	cmp	r1, #0
 801cffe:	f000 80a9 	beq.w	801d154 <rcl_expand_topic_name+0x168>
 801d002:	4617      	mov	r7, r2
 801d004:	2a00      	cmp	r2, #0
 801d006:	f000 80a5 	beq.w	801d154 <rcl_expand_topic_name+0x168>
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	f000 80a2 	beq.w	801d154 <rcl_expand_topic_name+0x168>
 801d010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d012:	2b00      	cmp	r3, #0
 801d014:	f000 809e 	beq.w	801d154 <rcl_expand_topic_name+0x168>
 801d018:	2200      	movs	r2, #0
 801d01a:	a909      	add	r1, sp, #36	@ 0x24
 801d01c:	4680      	mov	r8, r0
 801d01e:	f000 f949 	bl	801d2b4 <rcl_validate_topic_name>
 801d022:	4605      	mov	r5, r0
 801d024:	2800      	cmp	r0, #0
 801d026:	f040 8096 	bne.w	801d156 <rcl_expand_topic_name+0x16a>
 801d02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	f040 809a 	bne.w	801d166 <rcl_expand_topic_name+0x17a>
 801d032:	4602      	mov	r2, r0
 801d034:	a909      	add	r1, sp, #36	@ 0x24
 801d036:	4630      	mov	r0, r6
 801d038:	f7f4 f916 	bl	8011268 <rmw_validate_node_name>
 801d03c:	2800      	cmp	r0, #0
 801d03e:	f040 808e 	bne.w	801d15e <rcl_expand_topic_name+0x172>
 801d042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d044:	2a00      	cmp	r2, #0
 801d046:	f040 8093 	bne.w	801d170 <rcl_expand_topic_name+0x184>
 801d04a:	a909      	add	r1, sp, #36	@ 0x24
 801d04c:	4638      	mov	r0, r7
 801d04e:	f7f4 f8ed 	bl	801122c <rmw_validate_namespace>
 801d052:	2800      	cmp	r0, #0
 801d054:	f040 8083 	bne.w	801d15e <rcl_expand_topic_name+0x172>
 801d058:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801d05a:	2d00      	cmp	r5, #0
 801d05c:	f040 80f4 	bne.w	801d248 <rcl_expand_topic_name+0x25c>
 801d060:	217b      	movs	r1, #123	@ 0x7b
 801d062:	4640      	mov	r0, r8
 801d064:	f001 f87c 	bl	801e160 <strchr>
 801d068:	f898 3000 	ldrb.w	r3, [r8]
 801d06c:	2b2f      	cmp	r3, #47	@ 0x2f
 801d06e:	4604      	mov	r4, r0
 801d070:	f000 809f 	beq.w	801d1b2 <rcl_expand_topic_name+0x1c6>
 801d074:	2b7e      	cmp	r3, #126	@ 0x7e
 801d076:	f040 80e9 	bne.w	801d24c <rcl_expand_topic_name+0x260>
 801d07a:	4638      	mov	r0, r7
 801d07c:	f7e3 f930 	bl	80002e0 <strlen>
 801d080:	4a82      	ldr	r2, [pc, #520]	@ (801d28c <rcl_expand_topic_name+0x2a0>)
 801d082:	4b83      	ldr	r3, [pc, #524]	@ (801d290 <rcl_expand_topic_name+0x2a4>)
 801d084:	2801      	cmp	r0, #1
 801d086:	bf08      	it	eq
 801d088:	4613      	moveq	r3, r2
 801d08a:	9302      	str	r3, [sp, #8]
 801d08c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d08e:	9300      	str	r3, [sp, #0]
 801d090:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801d094:	f108 0301 	add.w	r3, r8, #1
 801d098:	9305      	str	r3, [sp, #20]
 801d09a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d09e:	9301      	str	r3, [sp, #4]
 801d0a0:	ab14      	add	r3, sp, #80	@ 0x50
 801d0a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d0a4:	f7f3 fe58 	bl	8010d58 <rcutils_format_string_limit>
 801d0a8:	4682      	mov	sl, r0
 801d0aa:	2800      	cmp	r0, #0
 801d0ac:	f000 80d1 	beq.w	801d252 <rcl_expand_topic_name+0x266>
 801d0b0:	2c00      	cmp	r4, #0
 801d0b2:	f000 8085 	beq.w	801d1c0 <rcl_expand_topic_name+0x1d4>
 801d0b6:	217b      	movs	r1, #123	@ 0x7b
 801d0b8:	f001 f852 	bl	801e160 <strchr>
 801d0bc:	46d1      	mov	r9, sl
 801d0be:	4604      	mov	r4, r0
 801d0c0:	9507      	str	r5, [sp, #28]
 801d0c2:	464d      	mov	r5, r9
 801d0c4:	2c00      	cmp	r4, #0
 801d0c6:	f000 80a0 	beq.w	801d20a <rcl_expand_topic_name+0x21e>
 801d0ca:	217d      	movs	r1, #125	@ 0x7d
 801d0cc:	4628      	mov	r0, r5
 801d0ce:	f001 f847 	bl	801e160 <strchr>
 801d0d2:	eba0 0904 	sub.w	r9, r0, r4
 801d0d6:	f109 0b01 	add.w	fp, r9, #1
 801d0da:	486e      	ldr	r0, [pc, #440]	@ (801d294 <rcl_expand_topic_name+0x2a8>)
 801d0dc:	465a      	mov	r2, fp
 801d0de:	4621      	mov	r1, r4
 801d0e0:	f001 f84b 	bl	801e17a <strncmp>
 801d0e4:	2800      	cmp	r0, #0
 801d0e6:	d069      	beq.n	801d1bc <rcl_expand_topic_name+0x1d0>
 801d0e8:	486b      	ldr	r0, [pc, #428]	@ (801d298 <rcl_expand_topic_name+0x2ac>)
 801d0ea:	465a      	mov	r2, fp
 801d0ec:	4621      	mov	r1, r4
 801d0ee:	f001 f844 	bl	801e17a <strncmp>
 801d0f2:	b130      	cbz	r0, 801d102 <rcl_expand_topic_name+0x116>
 801d0f4:	4869      	ldr	r0, [pc, #420]	@ (801d29c <rcl_expand_topic_name+0x2b0>)
 801d0f6:	465a      	mov	r2, fp
 801d0f8:	4621      	mov	r1, r4
 801d0fa:	f001 f83e 	bl	801e17a <strncmp>
 801d0fe:	2800      	cmp	r0, #0
 801d100:	d138      	bne.n	801d174 <rcl_expand_topic_name+0x188>
 801d102:	46b9      	mov	r9, r7
 801d104:	ab16      	add	r3, sp, #88	@ 0x58
 801d106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d10a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801d10e:	ab14      	add	r3, sp, #80	@ 0x50
 801d110:	4620      	mov	r0, r4
 801d112:	cb0c      	ldmia	r3, {r2, r3}
 801d114:	4659      	mov	r1, fp
 801d116:	f7f3 ff73 	bl	8011000 <rcutils_strndup>
 801d11a:	4604      	mov	r4, r0
 801d11c:	2800      	cmp	r0, #0
 801d11e:	f000 809d 	beq.w	801d25c <rcl_expand_topic_name+0x270>
 801d122:	464a      	mov	r2, r9
 801d124:	4628      	mov	r0, r5
 801d126:	ab14      	add	r3, sp, #80	@ 0x50
 801d128:	4621      	mov	r1, r4
 801d12a:	f7f3 fe4f 	bl	8010dcc <rcutils_repl_str>
 801d12e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d130:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d132:	4605      	mov	r5, r0
 801d134:	4620      	mov	r0, r4
 801d136:	4798      	blx	r3
 801d138:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d13a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d13c:	4650      	mov	r0, sl
 801d13e:	4798      	blx	r3
 801d140:	2d00      	cmp	r5, #0
 801d142:	f000 8086 	beq.w	801d252 <rcl_expand_topic_name+0x266>
 801d146:	217b      	movs	r1, #123	@ 0x7b
 801d148:	4628      	mov	r0, r5
 801d14a:	f001 f809 	bl	801e160 <strchr>
 801d14e:	46aa      	mov	sl, r5
 801d150:	4604      	mov	r4, r0
 801d152:	e7b7      	b.n	801d0c4 <rcl_expand_topic_name+0xd8>
 801d154:	250b      	movs	r5, #11
 801d156:	4628      	mov	r0, r5
 801d158:	b00b      	add	sp, #44	@ 0x2c
 801d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d15e:	f7fb fbb5 	bl	80188cc <rcl_convert_rmw_ret_to_rcl_ret>
 801d162:	4605      	mov	r5, r0
 801d164:	e7f7      	b.n	801d156 <rcl_expand_topic_name+0x16a>
 801d166:	2567      	movs	r5, #103	@ 0x67
 801d168:	4628      	mov	r0, r5
 801d16a:	b00b      	add	sp, #44	@ 0x2c
 801d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d170:	25c9      	movs	r5, #201	@ 0xc9
 801d172:	e7f0      	b.n	801d156 <rcl_expand_topic_name+0x16a>
 801d174:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801d178:	9806      	ldr	r0, [sp, #24]
 801d17a:	1c61      	adds	r1, r4, #1
 801d17c:	f7fe f88c 	bl	801b298 <rcutils_string_map_getn>
 801d180:	4681      	mov	r9, r0
 801d182:	2800      	cmp	r0, #0
 801d184:	d1be      	bne.n	801d104 <rcl_expand_topic_name+0x118>
 801d186:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d188:	ab16      	add	r3, sp, #88	@ 0x58
 801d18a:	6010      	str	r0, [r2, #0]
 801d18c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d190:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801d194:	ab14      	add	r3, sp, #80	@ 0x50
 801d196:	cb0c      	ldmia	r3, {r2, r3}
 801d198:	4659      	mov	r1, fp
 801d19a:	4620      	mov	r0, r4
 801d19c:	f7f3 ff30 	bl	8011000 <rcutils_strndup>
 801d1a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d1a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d1a4:	4798      	blx	r3
 801d1a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d1a8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d1aa:	4650      	mov	r0, sl
 801d1ac:	4798      	blx	r3
 801d1ae:	2569      	movs	r5, #105	@ 0x69
 801d1b0:	e7d1      	b.n	801d156 <rcl_expand_topic_name+0x16a>
 801d1b2:	2800      	cmp	r0, #0
 801d1b4:	d059      	beq.n	801d26a <rcl_expand_topic_name+0x27e>
 801d1b6:	46c1      	mov	r9, r8
 801d1b8:	46aa      	mov	sl, r5
 801d1ba:	e781      	b.n	801d0c0 <rcl_expand_topic_name+0xd4>
 801d1bc:	46b1      	mov	r9, r6
 801d1be:	e7a1      	b.n	801d104 <rcl_expand_topic_name+0x118>
 801d1c0:	f89a 3000 	ldrb.w	r3, [sl]
 801d1c4:	2b2f      	cmp	r3, #47	@ 0x2f
 801d1c6:	d01c      	beq.n	801d202 <rcl_expand_topic_name+0x216>
 801d1c8:	4638      	mov	r0, r7
 801d1ca:	f7e3 f889 	bl	80002e0 <strlen>
 801d1ce:	4a34      	ldr	r2, [pc, #208]	@ (801d2a0 <rcl_expand_topic_name+0x2b4>)
 801d1d0:	4b34      	ldr	r3, [pc, #208]	@ (801d2a4 <rcl_expand_topic_name+0x2b8>)
 801d1d2:	f8cd a010 	str.w	sl, [sp, #16]
 801d1d6:	2801      	cmp	r0, #1
 801d1d8:	bf18      	it	ne
 801d1da:	4613      	movne	r3, r2
 801d1dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801d1e0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d1e4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d1e6:	9703      	str	r7, [sp, #12]
 801d1e8:	9200      	str	r2, [sp, #0]
 801d1ea:	ab14      	add	r3, sp, #80	@ 0x50
 801d1ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d1ee:	f7f3 fdb3 	bl	8010d58 <rcutils_format_string_limit>
 801d1f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d1f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d1f6:	4604      	mov	r4, r0
 801d1f8:	4650      	mov	r0, sl
 801d1fa:	4798      	blx	r3
 801d1fc:	46a2      	mov	sl, r4
 801d1fe:	4653      	mov	r3, sl
 801d200:	b33b      	cbz	r3, 801d252 <rcl_expand_topic_name+0x266>
 801d202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d204:	f8c3 a000 	str.w	sl, [r3]
 801d208:	e7a5      	b.n	801d156 <rcl_expand_topic_name+0x16a>
 801d20a:	4653      	mov	r3, sl
 801d20c:	9d07      	ldr	r5, [sp, #28]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d1d6      	bne.n	801d1c0 <rcl_expand_topic_name+0x1d4>
 801d212:	f898 3000 	ldrb.w	r3, [r8]
 801d216:	2b2f      	cmp	r3, #47	@ 0x2f
 801d218:	d0f3      	beq.n	801d202 <rcl_expand_topic_name+0x216>
 801d21a:	4638      	mov	r0, r7
 801d21c:	f7e3 f860 	bl	80002e0 <strlen>
 801d220:	4a1f      	ldr	r2, [pc, #124]	@ (801d2a0 <rcl_expand_topic_name+0x2b4>)
 801d222:	4b20      	ldr	r3, [pc, #128]	@ (801d2a4 <rcl_expand_topic_name+0x2b8>)
 801d224:	f8cd 8010 	str.w	r8, [sp, #16]
 801d228:	2801      	cmp	r0, #1
 801d22a:	bf18      	it	ne
 801d22c:	4613      	movne	r3, r2
 801d22e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801d232:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d236:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d238:	9703      	str	r7, [sp, #12]
 801d23a:	9200      	str	r2, [sp, #0]
 801d23c:	ab14      	add	r3, sp, #80	@ 0x50
 801d23e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d240:	f7f3 fd8a 	bl	8010d58 <rcutils_format_string_limit>
 801d244:	4682      	mov	sl, r0
 801d246:	e7da      	b.n	801d1fe <rcl_expand_topic_name+0x212>
 801d248:	25ca      	movs	r5, #202	@ 0xca
 801d24a:	e784      	b.n	801d156 <rcl_expand_topic_name+0x16a>
 801d24c:	2800      	cmp	r0, #0
 801d24e:	d1b2      	bne.n	801d1b6 <rcl_expand_topic_name+0x1ca>
 801d250:	e7e3      	b.n	801d21a <rcl_expand_topic_name+0x22e>
 801d252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d254:	2300      	movs	r3, #0
 801d256:	6013      	str	r3, [r2, #0]
 801d258:	250a      	movs	r5, #10
 801d25a:	e77c      	b.n	801d156 <rcl_expand_topic_name+0x16a>
 801d25c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801d260:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d262:	6014      	str	r4, [r2, #0]
 801d264:	4650      	mov	r0, sl
 801d266:	4798      	blx	r3
 801d268:	e7f6      	b.n	801d258 <rcl_expand_topic_name+0x26c>
 801d26a:	ab17      	add	r3, sp, #92	@ 0x5c
 801d26c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d270:	e88d 0003 	stmia.w	sp, {r0, r1}
 801d274:	ab14      	add	r3, sp, #80	@ 0x50
 801d276:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d278:	4640      	mov	r0, r8
 801d27a:	f7f3 fe8b 	bl	8010f94 <rcutils_strdup>
 801d27e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d280:	6018      	str	r0, [r3, #0]
 801d282:	2800      	cmp	r0, #0
 801d284:	f47f af67 	bne.w	801d156 <rcl_expand_topic_name+0x16a>
 801d288:	e7e6      	b.n	801d258 <rcl_expand_topic_name+0x26c>
 801d28a:	bf00      	nop
 801d28c:	08020f9c 	.word	0x08020f9c
 801d290:	08021a14 	.word	0x08021a14
 801d294:	08021a1c 	.word	0x08021a1c
 801d298:	08021a24 	.word	0x08021a24
 801d29c:	08021a2c 	.word	0x08021a2c
 801d2a0:	08020a14 	.word	0x08020a14
 801d2a4:	08020a0c 	.word	0x08020a0c

0801d2a8 <rcl_get_default_topic_name_substitutions>:
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	bf0c      	ite	eq
 801d2ac:	200b      	moveq	r0, #11
 801d2ae:	2000      	movne	r0, #0
 801d2b0:	4770      	bx	lr
 801d2b2:	bf00      	nop

0801d2b4 <rcl_validate_topic_name>:
 801d2b4:	2800      	cmp	r0, #0
 801d2b6:	d06b      	beq.n	801d390 <rcl_validate_topic_name+0xdc>
 801d2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2bc:	460d      	mov	r5, r1
 801d2be:	2900      	cmp	r1, #0
 801d2c0:	d06d      	beq.n	801d39e <rcl_validate_topic_name+0xea>
 801d2c2:	4616      	mov	r6, r2
 801d2c4:	4604      	mov	r4, r0
 801d2c6:	f7e3 f80b 	bl	80002e0 <strlen>
 801d2ca:	b190      	cbz	r0, 801d2f2 <rcl_validate_topic_name+0x3e>
 801d2cc:	7821      	ldrb	r1, [r4, #0]
 801d2ce:	4a71      	ldr	r2, [pc, #452]	@ (801d494 <rcl_validate_topic_name+0x1e0>)
 801d2d0:	5c53      	ldrb	r3, [r2, r1]
 801d2d2:	f013 0304 	ands.w	r3, r3, #4
 801d2d6:	d15d      	bne.n	801d394 <rcl_validate_topic_name+0xe0>
 801d2d8:	1e47      	subs	r7, r0, #1
 801d2da:	f814 c007 	ldrb.w	ip, [r4, r7]
 801d2de:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801d2e2:	d10d      	bne.n	801d300 <rcl_validate_topic_name+0x4c>
 801d2e4:	2302      	movs	r3, #2
 801d2e6:	602b      	str	r3, [r5, #0]
 801d2e8:	b146      	cbz	r6, 801d2fc <rcl_validate_topic_name+0x48>
 801d2ea:	6037      	str	r7, [r6, #0]
 801d2ec:	2000      	movs	r0, #0
 801d2ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2f2:	2301      	movs	r3, #1
 801d2f4:	602b      	str	r3, [r5, #0]
 801d2f6:	b10e      	cbz	r6, 801d2fc <rcl_validate_topic_name+0x48>
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	6033      	str	r3, [r6, #0]
 801d2fc:	2000      	movs	r0, #0
 801d2fe:	e7f6      	b.n	801d2ee <rcl_validate_topic_name+0x3a>
 801d300:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801d304:	469a      	mov	sl, r3
 801d306:	469e      	mov	lr, r3
 801d308:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801d30c:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801d310:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801d314:	d85b      	bhi.n	801d3ce <rcl_validate_topic_name+0x11a>
 801d316:	e8df f00c 	tbb	[pc, ip]
 801d31a:	4463      	.short	0x4463
 801d31c:	44444444 	.word	0x44444444
 801d320:	44444444 	.word	0x44444444
 801d324:	5a5a5a44 	.word	0x5a5a5a44
 801d328:	5a5a5a5a 	.word	0x5a5a5a5a
 801d32c:	44444444 	.word	0x44444444
 801d330:	44444444 	.word	0x44444444
 801d334:	44444444 	.word	0x44444444
 801d338:	44444444 	.word	0x44444444
 801d33c:	44444444 	.word	0x44444444
 801d340:	44444444 	.word	0x44444444
 801d344:	5a5a4444 	.word	0x5a5a4444
 801d348:	5a2e5a5a 	.word	0x5a2e5a5a
 801d34c:	44444444 	.word	0x44444444
 801d350:	44444444 	.word	0x44444444
 801d354:	44444444 	.word	0x44444444
 801d358:	44444444 	.word	0x44444444
 801d35c:	44444444 	.word	0x44444444
 801d360:	44444444 	.word	0x44444444
 801d364:	5a284444 	.word	0x5a284444
 801d368:	6b73      	.short	0x6b73
 801d36a:	f1ba 0f00 	cmp.w	sl, #0
 801d36e:	d13a      	bne.n	801d3e6 <rcl_validate_topic_name+0x132>
 801d370:	4673      	mov	r3, lr
 801d372:	f04f 0a01 	mov.w	sl, #1
 801d376:	f10e 0e01 	add.w	lr, lr, #1
 801d37a:	4570      	cmp	r0, lr
 801d37c:	d1c4      	bne.n	801d308 <rcl_validate_topic_name+0x54>
 801d37e:	f1ba 0f00 	cmp.w	sl, #0
 801d382:	d048      	beq.n	801d416 <rcl_validate_topic_name+0x162>
 801d384:	2205      	movs	r2, #5
 801d386:	602a      	str	r2, [r5, #0]
 801d388:	2e00      	cmp	r6, #0
 801d38a:	d0b7      	beq.n	801d2fc <rcl_validate_topic_name+0x48>
 801d38c:	6033      	str	r3, [r6, #0]
 801d38e:	e7b5      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d390:	200b      	movs	r0, #11
 801d392:	4770      	bx	lr
 801d394:	2304      	movs	r3, #4
 801d396:	602b      	str	r3, [r5, #0]
 801d398:	2e00      	cmp	r6, #0
 801d39a:	d1ad      	bne.n	801d2f8 <rcl_validate_topic_name+0x44>
 801d39c:	e7ae      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d39e:	200b      	movs	r0, #11
 801d3a0:	e7a5      	b.n	801d2ee <rcl_validate_topic_name+0x3a>
 801d3a2:	f812 c009 	ldrb.w	ip, [r2, r9]
 801d3a6:	f01c 0f04 	tst.w	ip, #4
 801d3aa:	d0e4      	beq.n	801d376 <rcl_validate_topic_name+0xc2>
 801d3ac:	f1ba 0f00 	cmp.w	sl, #0
 801d3b0:	d0e1      	beq.n	801d376 <rcl_validate_topic_name+0xc2>
 801d3b2:	f1be 0f00 	cmp.w	lr, #0
 801d3b6:	d0de      	beq.n	801d376 <rcl_validate_topic_name+0xc2>
 801d3b8:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801d3bc:	4563      	cmp	r3, ip
 801d3be:	d1da      	bne.n	801d376 <rcl_validate_topic_name+0xc2>
 801d3c0:	2309      	movs	r3, #9
 801d3c2:	602b      	str	r3, [r5, #0]
 801d3c4:	2e00      	cmp	r6, #0
 801d3c6:	d099      	beq.n	801d2fc <rcl_validate_topic_name+0x48>
 801d3c8:	f8c6 e000 	str.w	lr, [r6]
 801d3cc:	e796      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d3ce:	f1ba 0f00 	cmp.w	sl, #0
 801d3d2:	bf0c      	ite	eq
 801d3d4:	2303      	moveq	r3, #3
 801d3d6:	2308      	movne	r3, #8
 801d3d8:	602b      	str	r3, [r5, #0]
 801d3da:	2e00      	cmp	r6, #0
 801d3dc:	d1f4      	bne.n	801d3c8 <rcl_validate_topic_name+0x114>
 801d3de:	e78d      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d3e0:	f1ba 0f00 	cmp.w	sl, #0
 801d3e4:	d0c7      	beq.n	801d376 <rcl_validate_topic_name+0xc2>
 801d3e6:	2308      	movs	r3, #8
 801d3e8:	602b      	str	r3, [r5, #0]
 801d3ea:	2e00      	cmp	r6, #0
 801d3ec:	d1ec      	bne.n	801d3c8 <rcl_validate_topic_name+0x114>
 801d3ee:	e785      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d3f0:	f1be 0f00 	cmp.w	lr, #0
 801d3f4:	d0bf      	beq.n	801d376 <rcl_validate_topic_name+0xc2>
 801d3f6:	2306      	movs	r3, #6
 801d3f8:	602b      	str	r3, [r5, #0]
 801d3fa:	2e00      	cmp	r6, #0
 801d3fc:	d1e4      	bne.n	801d3c8 <rcl_validate_topic_name+0x114>
 801d3fe:	e77d      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d400:	f1ba 0f00 	cmp.w	sl, #0
 801d404:	d104      	bne.n	801d410 <rcl_validate_topic_name+0x15c>
 801d406:	2305      	movs	r3, #5
 801d408:	602b      	str	r3, [r5, #0]
 801d40a:	2e00      	cmp	r6, #0
 801d40c:	d1dc      	bne.n	801d3c8 <rcl_validate_topic_name+0x114>
 801d40e:	e775      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d410:	f04f 0a00 	mov.w	sl, #0
 801d414:	e7af      	b.n	801d376 <rcl_validate_topic_name+0xc2>
 801d416:	297e      	cmp	r1, #126	@ 0x7e
 801d418:	d01d      	beq.n	801d456 <rcl_validate_topic_name+0x1a2>
 801d41a:	2101      	movs	r1, #1
 801d41c:	e006      	b.n	801d42c <rcl_validate_topic_name+0x178>
 801d41e:	458e      	cmp	lr, r1
 801d420:	f104 0401 	add.w	r4, r4, #1
 801d424:	f101 0301 	add.w	r3, r1, #1
 801d428:	d912      	bls.n	801d450 <rcl_validate_topic_name+0x19c>
 801d42a:	4619      	mov	r1, r3
 801d42c:	4557      	cmp	r7, sl
 801d42e:	f10a 0a01 	add.w	sl, sl, #1
 801d432:	d0f4      	beq.n	801d41e <rcl_validate_topic_name+0x16a>
 801d434:	7823      	ldrb	r3, [r4, #0]
 801d436:	2b2f      	cmp	r3, #47	@ 0x2f
 801d438:	d1f1      	bne.n	801d41e <rcl_validate_topic_name+0x16a>
 801d43a:	7863      	ldrb	r3, [r4, #1]
 801d43c:	5cd3      	ldrb	r3, [r2, r3]
 801d43e:	075b      	lsls	r3, r3, #29
 801d440:	d5ed      	bpl.n	801d41e <rcl_validate_topic_name+0x16a>
 801d442:	2304      	movs	r3, #4
 801d444:	602b      	str	r3, [r5, #0]
 801d446:	2e00      	cmp	r6, #0
 801d448:	f43f af58 	beq.w	801d2fc <rcl_validate_topic_name+0x48>
 801d44c:	6031      	str	r1, [r6, #0]
 801d44e:	e755      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d450:	2300      	movs	r3, #0
 801d452:	602b      	str	r3, [r5, #0]
 801d454:	e752      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d456:	4653      	mov	r3, sl
 801d458:	2101      	movs	r1, #1
 801d45a:	e00a      	b.n	801d472 <rcl_validate_topic_name+0x1be>
 801d45c:	2b01      	cmp	r3, #1
 801d45e:	d012      	beq.n	801d486 <rcl_validate_topic_name+0x1d2>
 801d460:	458e      	cmp	lr, r1
 801d462:	f103 0301 	add.w	r3, r3, #1
 801d466:	f104 0401 	add.w	r4, r4, #1
 801d46a:	f101 0001 	add.w	r0, r1, #1
 801d46e:	d9ef      	bls.n	801d450 <rcl_validate_topic_name+0x19c>
 801d470:	4601      	mov	r1, r0
 801d472:	429f      	cmp	r7, r3
 801d474:	d0f4      	beq.n	801d460 <rcl_validate_topic_name+0x1ac>
 801d476:	7820      	ldrb	r0, [r4, #0]
 801d478:	282f      	cmp	r0, #47	@ 0x2f
 801d47a:	d1ef      	bne.n	801d45c <rcl_validate_topic_name+0x1a8>
 801d47c:	7860      	ldrb	r0, [r4, #1]
 801d47e:	5c10      	ldrb	r0, [r2, r0]
 801d480:	0740      	lsls	r0, r0, #29
 801d482:	d5ed      	bpl.n	801d460 <rcl_validate_topic_name+0x1ac>
 801d484:	e7dd      	b.n	801d442 <rcl_validate_topic_name+0x18e>
 801d486:	2207      	movs	r2, #7
 801d488:	602a      	str	r2, [r5, #0]
 801d48a:	2e00      	cmp	r6, #0
 801d48c:	f47f af7e 	bne.w	801d38c <rcl_validate_topic_name+0xd8>
 801d490:	e734      	b.n	801d2fc <rcl_validate_topic_name+0x48>
 801d492:	bf00      	nop
 801d494:	08021b9a 	.word	0x08021b9a

0801d498 <rcutils_split>:
 801d498:	b082      	sub	sp, #8
 801d49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d49e:	b08b      	sub	sp, #44	@ 0x2c
 801d4a0:	ac14      	add	r4, sp, #80	@ 0x50
 801d4a2:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801d4a4:	e884 000c 	stmia.w	r4, {r2, r3}
 801d4a8:	2f00      	cmp	r7, #0
 801d4aa:	f000 809f 	beq.w	801d5ec <rcutils_split+0x154>
 801d4ae:	4606      	mov	r6, r0
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	d071      	beq.n	801d598 <rcutils_split+0x100>
 801d4b4:	7804      	ldrb	r4, [r0, #0]
 801d4b6:	2c00      	cmp	r4, #0
 801d4b8:	d06e      	beq.n	801d598 <rcutils_split+0x100>
 801d4ba:	460d      	mov	r5, r1
 801d4bc:	f7e2 ff10 	bl	80002e0 <strlen>
 801d4c0:	1833      	adds	r3, r6, r0
 801d4c2:	1b64      	subs	r4, r4, r5
 801d4c4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d4c8:	4680      	mov	r8, r0
 801d4ca:	fab4 f484 	clz	r4, r4
 801d4ce:	0964      	lsrs	r4, r4, #5
 801d4d0:	42ab      	cmp	r3, r5
 801d4d2:	bf08      	it	eq
 801d4d4:	f1a8 0801 	subeq.w	r8, r8, #1
 801d4d8:	4544      	cmp	r4, r8
 801d4da:	d278      	bcs.n	801d5ce <rcutils_split+0x136>
 801d4dc:	1933      	adds	r3, r6, r4
 801d4de:	eb06 0008 	add.w	r0, r6, r8
 801d4e2:	2101      	movs	r1, #1
 801d4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4e8:	42aa      	cmp	r2, r5
 801d4ea:	bf08      	it	eq
 801d4ec:	3101      	addeq	r1, #1
 801d4ee:	4283      	cmp	r3, r0
 801d4f0:	d1f8      	bne.n	801d4e4 <rcutils_split+0x4c>
 801d4f2:	aa14      	add	r2, sp, #80	@ 0x50
 801d4f4:	4638      	mov	r0, r7
 801d4f6:	f7fd fd95 	bl	801b024 <rcutils_string_array_init>
 801d4fa:	4681      	mov	r9, r0
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d159      	bne.n	801d5b4 <rcutils_split+0x11c>
 801d500:	687a      	ldr	r2, [r7, #4]
 801d502:	46a2      	mov	sl, r4
 801d504:	e002      	b.n	801d50c <rcutils_split+0x74>
 801d506:	3401      	adds	r4, #1
 801d508:	4544      	cmp	r4, r8
 801d50a:	d222      	bcs.n	801d552 <rcutils_split+0xba>
 801d50c:	5d33      	ldrb	r3, [r6, r4]
 801d50e:	42ab      	cmp	r3, r5
 801d510:	d1f9      	bne.n	801d506 <rcutils_split+0x6e>
 801d512:	4554      	cmp	r4, sl
 801d514:	eba4 0b0a 	sub.w	fp, r4, sl
 801d518:	d037      	beq.n	801d58a <rcutils_split+0xf2>
 801d51a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d51c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d51e:	9201      	str	r2, [sp, #4]
 801d520:	f10b 0002 	add.w	r0, fp, #2
 801d524:	4798      	blx	r3
 801d526:	9a01      	ldr	r2, [sp, #4]
 801d528:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801d52c:	687a      	ldr	r2, [r7, #4]
 801d52e:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801d532:	eb06 030a 	add.w	r3, r6, sl
 801d536:	f10b 0101 	add.w	r1, fp, #1
 801d53a:	2800      	cmp	r0, #0
 801d53c:	d038      	beq.n	801d5b0 <rcutils_split+0x118>
 801d53e:	4a2e      	ldr	r2, [pc, #184]	@ (801d5f8 <rcutils_split+0x160>)
 801d540:	f000 fc98 	bl	801de74 <sniprintf>
 801d544:	687a      	ldr	r2, [r7, #4]
 801d546:	f109 0901 	add.w	r9, r9, #1
 801d54a:	3401      	adds	r4, #1
 801d54c:	4544      	cmp	r4, r8
 801d54e:	46a2      	mov	sl, r4
 801d550:	d3dc      	bcc.n	801d50c <rcutils_split+0x74>
 801d552:	4554      	cmp	r4, sl
 801d554:	d043      	beq.n	801d5de <rcutils_split+0x146>
 801d556:	eba4 040a 	sub.w	r4, r4, sl
 801d55a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d55c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d55e:	9201      	str	r2, [sp, #4]
 801d560:	1ca0      	adds	r0, r4, #2
 801d562:	4798      	blx	r3
 801d564:	9a01      	ldr	r2, [sp, #4]
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801d56c:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801d570:	b300      	cbz	r0, 801d5b4 <rcutils_split+0x11c>
 801d572:	4a21      	ldr	r2, [pc, #132]	@ (801d5f8 <rcutils_split+0x160>)
 801d574:	eb06 030a 	add.w	r3, r6, sl
 801d578:	1c61      	adds	r1, r4, #1
 801d57a:	f000 fc7b 	bl	801de74 <sniprintf>
 801d57e:	2000      	movs	r0, #0
 801d580:	b00b      	add	sp, #44	@ 0x2c
 801d582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d586:	b002      	add	sp, #8
 801d588:	4770      	bx	lr
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	3b01      	subs	r3, #1
 801d58e:	2100      	movs	r1, #0
 801d590:	603b      	str	r3, [r7, #0]
 801d592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d596:	e7d8      	b.n	801d54a <rcutils_split+0xb2>
 801d598:	a802      	add	r0, sp, #8
 801d59a:	ac02      	add	r4, sp, #8
 801d59c:	f7fd fd24 	bl	801afe8 <rcutils_get_zero_initialized_string_array>
 801d5a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d5a2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d5a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d5a8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801d5ac:	2000      	movs	r0, #0
 801d5ae:	e7e7      	b.n	801d580 <rcutils_split+0xe8>
 801d5b0:	f8c7 9000 	str.w	r9, [r7]
 801d5b4:	4638      	mov	r0, r7
 801d5b6:	f7fd fd57 	bl	801b068 <rcutils_string_array_fini>
 801d5ba:	b928      	cbnz	r0, 801d5c8 <rcutils_split+0x130>
 801d5bc:	200a      	movs	r0, #10
 801d5be:	b00b      	add	sp, #44	@ 0x2c
 801d5c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5c4:	b002      	add	sp, #8
 801d5c6:	4770      	bx	lr
 801d5c8:	f7f3 fbaa 	bl	8010d20 <rcutils_reset_error>
 801d5cc:	e7f6      	b.n	801d5bc <rcutils_split+0x124>
 801d5ce:	aa14      	add	r2, sp, #80	@ 0x50
 801d5d0:	2101      	movs	r1, #1
 801d5d2:	4638      	mov	r0, r7
 801d5d4:	f7fd fd26 	bl	801b024 <rcutils_string_array_init>
 801d5d8:	2800      	cmp	r0, #0
 801d5da:	d1eb      	bne.n	801d5b4 <rcutils_split+0x11c>
 801d5dc:	687a      	ldr	r2, [r7, #4]
 801d5de:	683b      	ldr	r3, [r7, #0]
 801d5e0:	3b01      	subs	r3, #1
 801d5e2:	2100      	movs	r1, #0
 801d5e4:	603b      	str	r3, [r7, #0]
 801d5e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d5ea:	e7df      	b.n	801d5ac <rcutils_split+0x114>
 801d5ec:	200b      	movs	r0, #11
 801d5ee:	b00b      	add	sp, #44	@ 0x2c
 801d5f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5f4:	b002      	add	sp, #8
 801d5f6:	4770      	bx	lr
 801d5f8:	08020fa0 	.word	0x08020fa0

0801d5fc <rosidl_runtime_c__String__init>:
 801d5fc:	b1b0      	cbz	r0, 801d62c <rosidl_runtime_c__String__init+0x30>
 801d5fe:	b510      	push	{r4, lr}
 801d600:	b086      	sub	sp, #24
 801d602:	4604      	mov	r4, r0
 801d604:	a801      	add	r0, sp, #4
 801d606:	f7f3 fa7b 	bl	8010b00 <rcutils_get_default_allocator>
 801d60a:	9b01      	ldr	r3, [sp, #4]
 801d60c:	9905      	ldr	r1, [sp, #20]
 801d60e:	2001      	movs	r0, #1
 801d610:	4798      	blx	r3
 801d612:	6020      	str	r0, [r4, #0]
 801d614:	b138      	cbz	r0, 801d626 <rosidl_runtime_c__String__init+0x2a>
 801d616:	2200      	movs	r2, #0
 801d618:	2301      	movs	r3, #1
 801d61a:	7002      	strb	r2, [r0, #0]
 801d61c:	4618      	mov	r0, r3
 801d61e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801d622:	b006      	add	sp, #24
 801d624:	bd10      	pop	{r4, pc}
 801d626:	2000      	movs	r0, #0
 801d628:	b006      	add	sp, #24
 801d62a:	bd10      	pop	{r4, pc}
 801d62c:	2000      	movs	r0, #0
 801d62e:	4770      	bx	lr

0801d630 <rosidl_runtime_c__String__fini>:
 801d630:	b320      	cbz	r0, 801d67c <rosidl_runtime_c__String__fini+0x4c>
 801d632:	b510      	push	{r4, lr}
 801d634:	6803      	ldr	r3, [r0, #0]
 801d636:	b086      	sub	sp, #24
 801d638:	4604      	mov	r4, r0
 801d63a:	b173      	cbz	r3, 801d65a <rosidl_runtime_c__String__fini+0x2a>
 801d63c:	6883      	ldr	r3, [r0, #8]
 801d63e:	b1f3      	cbz	r3, 801d67e <rosidl_runtime_c__String__fini+0x4e>
 801d640:	a801      	add	r0, sp, #4
 801d642:	f7f3 fa5d 	bl	8010b00 <rcutils_get_default_allocator>
 801d646:	9b02      	ldr	r3, [sp, #8]
 801d648:	9905      	ldr	r1, [sp, #20]
 801d64a:	6820      	ldr	r0, [r4, #0]
 801d64c:	4798      	blx	r3
 801d64e:	2300      	movs	r3, #0
 801d650:	e9c4 3300 	strd	r3, r3, [r4]
 801d654:	60a3      	str	r3, [r4, #8]
 801d656:	b006      	add	sp, #24
 801d658:	bd10      	pop	{r4, pc}
 801d65a:	6843      	ldr	r3, [r0, #4]
 801d65c:	b9db      	cbnz	r3, 801d696 <rosidl_runtime_c__String__fini+0x66>
 801d65e:	6883      	ldr	r3, [r0, #8]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d0f8      	beq.n	801d656 <rosidl_runtime_c__String__fini+0x26>
 801d664:	4b12      	ldr	r3, [pc, #72]	@ (801d6b0 <rosidl_runtime_c__String__fini+0x80>)
 801d666:	4813      	ldr	r0, [pc, #76]	@ (801d6b4 <rosidl_runtime_c__String__fini+0x84>)
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	2251      	movs	r2, #81	@ 0x51
 801d66c:	68db      	ldr	r3, [r3, #12]
 801d66e:	2101      	movs	r1, #1
 801d670:	f000 fb82 	bl	801dd78 <fwrite>
 801d674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d678:	f000 f83e 	bl	801d6f8 <exit>
 801d67c:	4770      	bx	lr
 801d67e:	4b0c      	ldr	r3, [pc, #48]	@ (801d6b0 <rosidl_runtime_c__String__fini+0x80>)
 801d680:	480d      	ldr	r0, [pc, #52]	@ (801d6b8 <rosidl_runtime_c__String__fini+0x88>)
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	224c      	movs	r2, #76	@ 0x4c
 801d686:	68db      	ldr	r3, [r3, #12]
 801d688:	2101      	movs	r1, #1
 801d68a:	f000 fb75 	bl	801dd78 <fwrite>
 801d68e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d692:	f000 f831 	bl	801d6f8 <exit>
 801d696:	4b06      	ldr	r3, [pc, #24]	@ (801d6b0 <rosidl_runtime_c__String__fini+0x80>)
 801d698:	4808      	ldr	r0, [pc, #32]	@ (801d6bc <rosidl_runtime_c__String__fini+0x8c>)
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	224e      	movs	r2, #78	@ 0x4e
 801d69e:	68db      	ldr	r3, [r3, #12]
 801d6a0:	2101      	movs	r1, #1
 801d6a2:	f000 fb69 	bl	801dd78 <fwrite>
 801d6a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d6aa:	f000 f825 	bl	801d6f8 <exit>
 801d6ae:	bf00      	nop
 801d6b0:	20001bf4 	.word	0x20001bf4
 801d6b4:	08021ad8 	.word	0x08021ad8
 801d6b8:	08021a38 	.word	0x08021a38
 801d6bc:	08021a88 	.word	0x08021a88

0801d6c0 <calloc>:
 801d6c0:	4b02      	ldr	r3, [pc, #8]	@ (801d6cc <calloc+0xc>)
 801d6c2:	460a      	mov	r2, r1
 801d6c4:	4601      	mov	r1, r0
 801d6c6:	6818      	ldr	r0, [r3, #0]
 801d6c8:	f000 b802 	b.w	801d6d0 <_calloc_r>
 801d6cc:	20001bf4 	.word	0x20001bf4

0801d6d0 <_calloc_r>:
 801d6d0:	b570      	push	{r4, r5, r6, lr}
 801d6d2:	fba1 5402 	umull	r5, r4, r1, r2
 801d6d6:	b93c      	cbnz	r4, 801d6e8 <_calloc_r+0x18>
 801d6d8:	4629      	mov	r1, r5
 801d6da:	f000 f899 	bl	801d810 <_malloc_r>
 801d6de:	4606      	mov	r6, r0
 801d6e0:	b928      	cbnz	r0, 801d6ee <_calloc_r+0x1e>
 801d6e2:	2600      	movs	r6, #0
 801d6e4:	4630      	mov	r0, r6
 801d6e6:	bd70      	pop	{r4, r5, r6, pc}
 801d6e8:	220c      	movs	r2, #12
 801d6ea:	6002      	str	r2, [r0, #0]
 801d6ec:	e7f9      	b.n	801d6e2 <_calloc_r+0x12>
 801d6ee:	462a      	mov	r2, r5
 801d6f0:	4621      	mov	r1, r4
 801d6f2:	f000 fd2d 	bl	801e150 <memset>
 801d6f6:	e7f5      	b.n	801d6e4 <_calloc_r+0x14>

0801d6f8 <exit>:
 801d6f8:	b508      	push	{r3, lr}
 801d6fa:	4b06      	ldr	r3, [pc, #24]	@ (801d714 <exit+0x1c>)
 801d6fc:	4604      	mov	r4, r0
 801d6fe:	b113      	cbz	r3, 801d706 <exit+0xe>
 801d700:	2100      	movs	r1, #0
 801d702:	f3af 8000 	nop.w
 801d706:	4b04      	ldr	r3, [pc, #16]	@ (801d718 <exit+0x20>)
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	b103      	cbz	r3, 801d70e <exit+0x16>
 801d70c:	4798      	blx	r3
 801d70e:	4620      	mov	r0, r4
 801d710:	f7e6 f910 	bl	8003934 <_exit>
 801d714:	00000000 	.word	0x00000000
 801d718:	2001f91c 	.word	0x2001f91c

0801d71c <getenv>:
 801d71c:	b507      	push	{r0, r1, r2, lr}
 801d71e:	4b04      	ldr	r3, [pc, #16]	@ (801d730 <getenv+0x14>)
 801d720:	4601      	mov	r1, r0
 801d722:	aa01      	add	r2, sp, #4
 801d724:	6818      	ldr	r0, [r3, #0]
 801d726:	f000 f805 	bl	801d734 <_findenv_r>
 801d72a:	b003      	add	sp, #12
 801d72c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d730:	20001bf4 	.word	0x20001bf4

0801d734 <_findenv_r>:
 801d734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d738:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d7a8 <_findenv_r+0x74>
 801d73c:	4606      	mov	r6, r0
 801d73e:	4689      	mov	r9, r1
 801d740:	4617      	mov	r7, r2
 801d742:	f000 fe63 	bl	801e40c <__env_lock>
 801d746:	f8da 4000 	ldr.w	r4, [sl]
 801d74a:	b134      	cbz	r4, 801d75a <_findenv_r+0x26>
 801d74c:	464b      	mov	r3, r9
 801d74e:	4698      	mov	r8, r3
 801d750:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d754:	b13a      	cbz	r2, 801d766 <_findenv_r+0x32>
 801d756:	2a3d      	cmp	r2, #61	@ 0x3d
 801d758:	d1f9      	bne.n	801d74e <_findenv_r+0x1a>
 801d75a:	4630      	mov	r0, r6
 801d75c:	f000 fe5c 	bl	801e418 <__env_unlock>
 801d760:	2000      	movs	r0, #0
 801d762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d766:	eba8 0809 	sub.w	r8, r8, r9
 801d76a:	46a3      	mov	fp, r4
 801d76c:	f854 0b04 	ldr.w	r0, [r4], #4
 801d770:	2800      	cmp	r0, #0
 801d772:	d0f2      	beq.n	801d75a <_findenv_r+0x26>
 801d774:	4642      	mov	r2, r8
 801d776:	4649      	mov	r1, r9
 801d778:	f000 fcff 	bl	801e17a <strncmp>
 801d77c:	2800      	cmp	r0, #0
 801d77e:	d1f4      	bne.n	801d76a <_findenv_r+0x36>
 801d780:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d784:	eb03 0508 	add.w	r5, r3, r8
 801d788:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d78c:	2b3d      	cmp	r3, #61	@ 0x3d
 801d78e:	d1ec      	bne.n	801d76a <_findenv_r+0x36>
 801d790:	f8da 3000 	ldr.w	r3, [sl]
 801d794:	ebab 0303 	sub.w	r3, fp, r3
 801d798:	109b      	asrs	r3, r3, #2
 801d79a:	4630      	mov	r0, r6
 801d79c:	603b      	str	r3, [r7, #0]
 801d79e:	f000 fe3b 	bl	801e418 <__env_unlock>
 801d7a2:	1c68      	adds	r0, r5, #1
 801d7a4:	e7dd      	b.n	801d762 <_findenv_r+0x2e>
 801d7a6:	bf00      	nop
 801d7a8:	20000018 	.word	0x20000018

0801d7ac <malloc>:
 801d7ac:	4b02      	ldr	r3, [pc, #8]	@ (801d7b8 <malloc+0xc>)
 801d7ae:	4601      	mov	r1, r0
 801d7b0:	6818      	ldr	r0, [r3, #0]
 801d7b2:	f000 b82d 	b.w	801d810 <_malloc_r>
 801d7b6:	bf00      	nop
 801d7b8:	20001bf4 	.word	0x20001bf4

0801d7bc <free>:
 801d7bc:	4b02      	ldr	r3, [pc, #8]	@ (801d7c8 <free+0xc>)
 801d7be:	4601      	mov	r1, r0
 801d7c0:	6818      	ldr	r0, [r3, #0]
 801d7c2:	f000 be2f 	b.w	801e424 <_free_r>
 801d7c6:	bf00      	nop
 801d7c8:	20001bf4 	.word	0x20001bf4

0801d7cc <sbrk_aligned>:
 801d7cc:	b570      	push	{r4, r5, r6, lr}
 801d7ce:	4e0f      	ldr	r6, [pc, #60]	@ (801d80c <sbrk_aligned+0x40>)
 801d7d0:	460c      	mov	r4, r1
 801d7d2:	6831      	ldr	r1, [r6, #0]
 801d7d4:	4605      	mov	r5, r0
 801d7d6:	b911      	cbnz	r1, 801d7de <sbrk_aligned+0x12>
 801d7d8:	f000 fd94 	bl	801e304 <_sbrk_r>
 801d7dc:	6030      	str	r0, [r6, #0]
 801d7de:	4621      	mov	r1, r4
 801d7e0:	4628      	mov	r0, r5
 801d7e2:	f000 fd8f 	bl	801e304 <_sbrk_r>
 801d7e6:	1c43      	adds	r3, r0, #1
 801d7e8:	d103      	bne.n	801d7f2 <sbrk_aligned+0x26>
 801d7ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d7ee:	4620      	mov	r0, r4
 801d7f0:	bd70      	pop	{r4, r5, r6, pc}
 801d7f2:	1cc4      	adds	r4, r0, #3
 801d7f4:	f024 0403 	bic.w	r4, r4, #3
 801d7f8:	42a0      	cmp	r0, r4
 801d7fa:	d0f8      	beq.n	801d7ee <sbrk_aligned+0x22>
 801d7fc:	1a21      	subs	r1, r4, r0
 801d7fe:	4628      	mov	r0, r5
 801d800:	f000 fd80 	bl	801e304 <_sbrk_r>
 801d804:	3001      	adds	r0, #1
 801d806:	d1f2      	bne.n	801d7ee <sbrk_aligned+0x22>
 801d808:	e7ef      	b.n	801d7ea <sbrk_aligned+0x1e>
 801d80a:	bf00      	nop
 801d80c:	2001f7dc 	.word	0x2001f7dc

0801d810 <_malloc_r>:
 801d810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d814:	1ccd      	adds	r5, r1, #3
 801d816:	f025 0503 	bic.w	r5, r5, #3
 801d81a:	3508      	adds	r5, #8
 801d81c:	2d0c      	cmp	r5, #12
 801d81e:	bf38      	it	cc
 801d820:	250c      	movcc	r5, #12
 801d822:	2d00      	cmp	r5, #0
 801d824:	4606      	mov	r6, r0
 801d826:	db01      	blt.n	801d82c <_malloc_r+0x1c>
 801d828:	42a9      	cmp	r1, r5
 801d82a:	d904      	bls.n	801d836 <_malloc_r+0x26>
 801d82c:	230c      	movs	r3, #12
 801d82e:	6033      	str	r3, [r6, #0]
 801d830:	2000      	movs	r0, #0
 801d832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d90c <_malloc_r+0xfc>
 801d83a:	f000 f869 	bl	801d910 <__malloc_lock>
 801d83e:	f8d8 3000 	ldr.w	r3, [r8]
 801d842:	461c      	mov	r4, r3
 801d844:	bb44      	cbnz	r4, 801d898 <_malloc_r+0x88>
 801d846:	4629      	mov	r1, r5
 801d848:	4630      	mov	r0, r6
 801d84a:	f7ff ffbf 	bl	801d7cc <sbrk_aligned>
 801d84e:	1c43      	adds	r3, r0, #1
 801d850:	4604      	mov	r4, r0
 801d852:	d158      	bne.n	801d906 <_malloc_r+0xf6>
 801d854:	f8d8 4000 	ldr.w	r4, [r8]
 801d858:	4627      	mov	r7, r4
 801d85a:	2f00      	cmp	r7, #0
 801d85c:	d143      	bne.n	801d8e6 <_malloc_r+0xd6>
 801d85e:	2c00      	cmp	r4, #0
 801d860:	d04b      	beq.n	801d8fa <_malloc_r+0xea>
 801d862:	6823      	ldr	r3, [r4, #0]
 801d864:	4639      	mov	r1, r7
 801d866:	4630      	mov	r0, r6
 801d868:	eb04 0903 	add.w	r9, r4, r3
 801d86c:	f000 fd4a 	bl	801e304 <_sbrk_r>
 801d870:	4581      	cmp	r9, r0
 801d872:	d142      	bne.n	801d8fa <_malloc_r+0xea>
 801d874:	6821      	ldr	r1, [r4, #0]
 801d876:	1a6d      	subs	r5, r5, r1
 801d878:	4629      	mov	r1, r5
 801d87a:	4630      	mov	r0, r6
 801d87c:	f7ff ffa6 	bl	801d7cc <sbrk_aligned>
 801d880:	3001      	adds	r0, #1
 801d882:	d03a      	beq.n	801d8fa <_malloc_r+0xea>
 801d884:	6823      	ldr	r3, [r4, #0]
 801d886:	442b      	add	r3, r5
 801d888:	6023      	str	r3, [r4, #0]
 801d88a:	f8d8 3000 	ldr.w	r3, [r8]
 801d88e:	685a      	ldr	r2, [r3, #4]
 801d890:	bb62      	cbnz	r2, 801d8ec <_malloc_r+0xdc>
 801d892:	f8c8 7000 	str.w	r7, [r8]
 801d896:	e00f      	b.n	801d8b8 <_malloc_r+0xa8>
 801d898:	6822      	ldr	r2, [r4, #0]
 801d89a:	1b52      	subs	r2, r2, r5
 801d89c:	d420      	bmi.n	801d8e0 <_malloc_r+0xd0>
 801d89e:	2a0b      	cmp	r2, #11
 801d8a0:	d917      	bls.n	801d8d2 <_malloc_r+0xc2>
 801d8a2:	1961      	adds	r1, r4, r5
 801d8a4:	42a3      	cmp	r3, r4
 801d8a6:	6025      	str	r5, [r4, #0]
 801d8a8:	bf18      	it	ne
 801d8aa:	6059      	strne	r1, [r3, #4]
 801d8ac:	6863      	ldr	r3, [r4, #4]
 801d8ae:	bf08      	it	eq
 801d8b0:	f8c8 1000 	streq.w	r1, [r8]
 801d8b4:	5162      	str	r2, [r4, r5]
 801d8b6:	604b      	str	r3, [r1, #4]
 801d8b8:	4630      	mov	r0, r6
 801d8ba:	f000 f82f 	bl	801d91c <__malloc_unlock>
 801d8be:	f104 000b 	add.w	r0, r4, #11
 801d8c2:	1d23      	adds	r3, r4, #4
 801d8c4:	f020 0007 	bic.w	r0, r0, #7
 801d8c8:	1ac2      	subs	r2, r0, r3
 801d8ca:	bf1c      	itt	ne
 801d8cc:	1a1b      	subne	r3, r3, r0
 801d8ce:	50a3      	strne	r3, [r4, r2]
 801d8d0:	e7af      	b.n	801d832 <_malloc_r+0x22>
 801d8d2:	6862      	ldr	r2, [r4, #4]
 801d8d4:	42a3      	cmp	r3, r4
 801d8d6:	bf0c      	ite	eq
 801d8d8:	f8c8 2000 	streq.w	r2, [r8]
 801d8dc:	605a      	strne	r2, [r3, #4]
 801d8de:	e7eb      	b.n	801d8b8 <_malloc_r+0xa8>
 801d8e0:	4623      	mov	r3, r4
 801d8e2:	6864      	ldr	r4, [r4, #4]
 801d8e4:	e7ae      	b.n	801d844 <_malloc_r+0x34>
 801d8e6:	463c      	mov	r4, r7
 801d8e8:	687f      	ldr	r7, [r7, #4]
 801d8ea:	e7b6      	b.n	801d85a <_malloc_r+0x4a>
 801d8ec:	461a      	mov	r2, r3
 801d8ee:	685b      	ldr	r3, [r3, #4]
 801d8f0:	42a3      	cmp	r3, r4
 801d8f2:	d1fb      	bne.n	801d8ec <_malloc_r+0xdc>
 801d8f4:	2300      	movs	r3, #0
 801d8f6:	6053      	str	r3, [r2, #4]
 801d8f8:	e7de      	b.n	801d8b8 <_malloc_r+0xa8>
 801d8fa:	230c      	movs	r3, #12
 801d8fc:	6033      	str	r3, [r6, #0]
 801d8fe:	4630      	mov	r0, r6
 801d900:	f000 f80c 	bl	801d91c <__malloc_unlock>
 801d904:	e794      	b.n	801d830 <_malloc_r+0x20>
 801d906:	6005      	str	r5, [r0, #0]
 801d908:	e7d6      	b.n	801d8b8 <_malloc_r+0xa8>
 801d90a:	bf00      	nop
 801d90c:	2001f7e0 	.word	0x2001f7e0

0801d910 <__malloc_lock>:
 801d910:	4801      	ldr	r0, [pc, #4]	@ (801d918 <__malloc_lock+0x8>)
 801d912:	f000 bd44 	b.w	801e39e <__retarget_lock_acquire_recursive>
 801d916:	bf00      	nop
 801d918:	2001f925 	.word	0x2001f925

0801d91c <__malloc_unlock>:
 801d91c:	4801      	ldr	r0, [pc, #4]	@ (801d924 <__malloc_unlock+0x8>)
 801d91e:	f000 bd3f 	b.w	801e3a0 <__retarget_lock_release_recursive>
 801d922:	bf00      	nop
 801d924:	2001f925 	.word	0x2001f925

0801d928 <srand>:
 801d928:	b538      	push	{r3, r4, r5, lr}
 801d92a:	4b10      	ldr	r3, [pc, #64]	@ (801d96c <srand+0x44>)
 801d92c:	681d      	ldr	r5, [r3, #0]
 801d92e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d930:	4604      	mov	r4, r0
 801d932:	b9b3      	cbnz	r3, 801d962 <srand+0x3a>
 801d934:	2018      	movs	r0, #24
 801d936:	f7ff ff39 	bl	801d7ac <malloc>
 801d93a:	4602      	mov	r2, r0
 801d93c:	6328      	str	r0, [r5, #48]	@ 0x30
 801d93e:	b920      	cbnz	r0, 801d94a <srand+0x22>
 801d940:	4b0b      	ldr	r3, [pc, #44]	@ (801d970 <srand+0x48>)
 801d942:	480c      	ldr	r0, [pc, #48]	@ (801d974 <srand+0x4c>)
 801d944:	2146      	movs	r1, #70	@ 0x46
 801d946:	f000 fd43 	bl	801e3d0 <__assert_func>
 801d94a:	490b      	ldr	r1, [pc, #44]	@ (801d978 <srand+0x50>)
 801d94c:	4b0b      	ldr	r3, [pc, #44]	@ (801d97c <srand+0x54>)
 801d94e:	e9c0 1300 	strd	r1, r3, [r0]
 801d952:	4b0b      	ldr	r3, [pc, #44]	@ (801d980 <srand+0x58>)
 801d954:	6083      	str	r3, [r0, #8]
 801d956:	230b      	movs	r3, #11
 801d958:	8183      	strh	r3, [r0, #12]
 801d95a:	2100      	movs	r1, #0
 801d95c:	2001      	movs	r0, #1
 801d95e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d962:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d964:	2200      	movs	r2, #0
 801d966:	611c      	str	r4, [r3, #16]
 801d968:	615a      	str	r2, [r3, #20]
 801d96a:	bd38      	pop	{r3, r4, r5, pc}
 801d96c:	20001bf4 	.word	0x20001bf4
 801d970:	08021b2a 	.word	0x08021b2a
 801d974:	08021b41 	.word	0x08021b41
 801d978:	abcd330e 	.word	0xabcd330e
 801d97c:	e66d1234 	.word	0xe66d1234
 801d980:	0005deec 	.word	0x0005deec

0801d984 <rand>:
 801d984:	4b16      	ldr	r3, [pc, #88]	@ (801d9e0 <rand+0x5c>)
 801d986:	b510      	push	{r4, lr}
 801d988:	681c      	ldr	r4, [r3, #0]
 801d98a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d98c:	b9b3      	cbnz	r3, 801d9bc <rand+0x38>
 801d98e:	2018      	movs	r0, #24
 801d990:	f7ff ff0c 	bl	801d7ac <malloc>
 801d994:	4602      	mov	r2, r0
 801d996:	6320      	str	r0, [r4, #48]	@ 0x30
 801d998:	b920      	cbnz	r0, 801d9a4 <rand+0x20>
 801d99a:	4b12      	ldr	r3, [pc, #72]	@ (801d9e4 <rand+0x60>)
 801d99c:	4812      	ldr	r0, [pc, #72]	@ (801d9e8 <rand+0x64>)
 801d99e:	2152      	movs	r1, #82	@ 0x52
 801d9a0:	f000 fd16 	bl	801e3d0 <__assert_func>
 801d9a4:	4911      	ldr	r1, [pc, #68]	@ (801d9ec <rand+0x68>)
 801d9a6:	4b12      	ldr	r3, [pc, #72]	@ (801d9f0 <rand+0x6c>)
 801d9a8:	e9c0 1300 	strd	r1, r3, [r0]
 801d9ac:	4b11      	ldr	r3, [pc, #68]	@ (801d9f4 <rand+0x70>)
 801d9ae:	6083      	str	r3, [r0, #8]
 801d9b0:	230b      	movs	r3, #11
 801d9b2:	8183      	strh	r3, [r0, #12]
 801d9b4:	2100      	movs	r1, #0
 801d9b6:	2001      	movs	r0, #1
 801d9b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d9bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d9be:	480e      	ldr	r0, [pc, #56]	@ (801d9f8 <rand+0x74>)
 801d9c0:	690b      	ldr	r3, [r1, #16]
 801d9c2:	694c      	ldr	r4, [r1, #20]
 801d9c4:	4a0d      	ldr	r2, [pc, #52]	@ (801d9fc <rand+0x78>)
 801d9c6:	4358      	muls	r0, r3
 801d9c8:	fb02 0004 	mla	r0, r2, r4, r0
 801d9cc:	fba3 3202 	umull	r3, r2, r3, r2
 801d9d0:	3301      	adds	r3, #1
 801d9d2:	eb40 0002 	adc.w	r0, r0, r2
 801d9d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d9da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d9de:	bd10      	pop	{r4, pc}
 801d9e0:	20001bf4 	.word	0x20001bf4
 801d9e4:	08021b2a 	.word	0x08021b2a
 801d9e8:	08021b41 	.word	0x08021b41
 801d9ec:	abcd330e 	.word	0xabcd330e
 801d9f0:	e66d1234 	.word	0xe66d1234
 801d9f4:	0005deec 	.word	0x0005deec
 801d9f8:	5851f42d 	.word	0x5851f42d
 801d9fc:	4c957f2d 	.word	0x4c957f2d

0801da00 <realloc>:
 801da00:	4b02      	ldr	r3, [pc, #8]	@ (801da0c <realloc+0xc>)
 801da02:	460a      	mov	r2, r1
 801da04:	4601      	mov	r1, r0
 801da06:	6818      	ldr	r0, [r3, #0]
 801da08:	f000 b802 	b.w	801da10 <_realloc_r>
 801da0c:	20001bf4 	.word	0x20001bf4

0801da10 <_realloc_r>:
 801da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da14:	4680      	mov	r8, r0
 801da16:	4615      	mov	r5, r2
 801da18:	460c      	mov	r4, r1
 801da1a:	b921      	cbnz	r1, 801da26 <_realloc_r+0x16>
 801da1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801da20:	4611      	mov	r1, r2
 801da22:	f7ff bef5 	b.w	801d810 <_malloc_r>
 801da26:	b92a      	cbnz	r2, 801da34 <_realloc_r+0x24>
 801da28:	f000 fcfc 	bl	801e424 <_free_r>
 801da2c:	2400      	movs	r4, #0
 801da2e:	4620      	mov	r0, r4
 801da30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da34:	f000 fd40 	bl	801e4b8 <_malloc_usable_size_r>
 801da38:	4285      	cmp	r5, r0
 801da3a:	4606      	mov	r6, r0
 801da3c:	d802      	bhi.n	801da44 <_realloc_r+0x34>
 801da3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801da42:	d8f4      	bhi.n	801da2e <_realloc_r+0x1e>
 801da44:	4629      	mov	r1, r5
 801da46:	4640      	mov	r0, r8
 801da48:	f7ff fee2 	bl	801d810 <_malloc_r>
 801da4c:	4607      	mov	r7, r0
 801da4e:	2800      	cmp	r0, #0
 801da50:	d0ec      	beq.n	801da2c <_realloc_r+0x1c>
 801da52:	42b5      	cmp	r5, r6
 801da54:	462a      	mov	r2, r5
 801da56:	4621      	mov	r1, r4
 801da58:	bf28      	it	cs
 801da5a:	4632      	movcs	r2, r6
 801da5c:	f000 fca9 	bl	801e3b2 <memcpy>
 801da60:	4621      	mov	r1, r4
 801da62:	4640      	mov	r0, r8
 801da64:	f000 fcde 	bl	801e424 <_free_r>
 801da68:	463c      	mov	r4, r7
 801da6a:	e7e0      	b.n	801da2e <_realloc_r+0x1e>

0801da6c <_strtoul_l.constprop.0>:
 801da6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da70:	4e34      	ldr	r6, [pc, #208]	@ (801db44 <_strtoul_l.constprop.0+0xd8>)
 801da72:	4686      	mov	lr, r0
 801da74:	460d      	mov	r5, r1
 801da76:	4628      	mov	r0, r5
 801da78:	f815 4b01 	ldrb.w	r4, [r5], #1
 801da7c:	5d37      	ldrb	r7, [r6, r4]
 801da7e:	f017 0708 	ands.w	r7, r7, #8
 801da82:	d1f8      	bne.n	801da76 <_strtoul_l.constprop.0+0xa>
 801da84:	2c2d      	cmp	r4, #45	@ 0x2d
 801da86:	d12f      	bne.n	801dae8 <_strtoul_l.constprop.0+0x7c>
 801da88:	782c      	ldrb	r4, [r5, #0]
 801da8a:	2701      	movs	r7, #1
 801da8c:	1c85      	adds	r5, r0, #2
 801da8e:	f033 0010 	bics.w	r0, r3, #16
 801da92:	d109      	bne.n	801daa8 <_strtoul_l.constprop.0+0x3c>
 801da94:	2c30      	cmp	r4, #48	@ 0x30
 801da96:	d12c      	bne.n	801daf2 <_strtoul_l.constprop.0+0x86>
 801da98:	7828      	ldrb	r0, [r5, #0]
 801da9a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801da9e:	2858      	cmp	r0, #88	@ 0x58
 801daa0:	d127      	bne.n	801daf2 <_strtoul_l.constprop.0+0x86>
 801daa2:	786c      	ldrb	r4, [r5, #1]
 801daa4:	2310      	movs	r3, #16
 801daa6:	3502      	adds	r5, #2
 801daa8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801daac:	2600      	movs	r6, #0
 801daae:	fbb8 f8f3 	udiv	r8, r8, r3
 801dab2:	fb03 f908 	mul.w	r9, r3, r8
 801dab6:	ea6f 0909 	mvn.w	r9, r9
 801daba:	4630      	mov	r0, r6
 801dabc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801dac0:	f1bc 0f09 	cmp.w	ip, #9
 801dac4:	d81c      	bhi.n	801db00 <_strtoul_l.constprop.0+0x94>
 801dac6:	4664      	mov	r4, ip
 801dac8:	42a3      	cmp	r3, r4
 801daca:	dd2a      	ble.n	801db22 <_strtoul_l.constprop.0+0xb6>
 801dacc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801dad0:	d007      	beq.n	801dae2 <_strtoul_l.constprop.0+0x76>
 801dad2:	4580      	cmp	r8, r0
 801dad4:	d322      	bcc.n	801db1c <_strtoul_l.constprop.0+0xb0>
 801dad6:	d101      	bne.n	801dadc <_strtoul_l.constprop.0+0x70>
 801dad8:	45a1      	cmp	r9, r4
 801dada:	db1f      	blt.n	801db1c <_strtoul_l.constprop.0+0xb0>
 801dadc:	fb00 4003 	mla	r0, r0, r3, r4
 801dae0:	2601      	movs	r6, #1
 801dae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dae6:	e7e9      	b.n	801dabc <_strtoul_l.constprop.0+0x50>
 801dae8:	2c2b      	cmp	r4, #43	@ 0x2b
 801daea:	bf04      	itt	eq
 801daec:	782c      	ldrbeq	r4, [r5, #0]
 801daee:	1c85      	addeq	r5, r0, #2
 801daf0:	e7cd      	b.n	801da8e <_strtoul_l.constprop.0+0x22>
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d1d8      	bne.n	801daa8 <_strtoul_l.constprop.0+0x3c>
 801daf6:	2c30      	cmp	r4, #48	@ 0x30
 801daf8:	bf0c      	ite	eq
 801dafa:	2308      	moveq	r3, #8
 801dafc:	230a      	movne	r3, #10
 801dafe:	e7d3      	b.n	801daa8 <_strtoul_l.constprop.0+0x3c>
 801db00:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801db04:	f1bc 0f19 	cmp.w	ip, #25
 801db08:	d801      	bhi.n	801db0e <_strtoul_l.constprop.0+0xa2>
 801db0a:	3c37      	subs	r4, #55	@ 0x37
 801db0c:	e7dc      	b.n	801dac8 <_strtoul_l.constprop.0+0x5c>
 801db0e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801db12:	f1bc 0f19 	cmp.w	ip, #25
 801db16:	d804      	bhi.n	801db22 <_strtoul_l.constprop.0+0xb6>
 801db18:	3c57      	subs	r4, #87	@ 0x57
 801db1a:	e7d5      	b.n	801dac8 <_strtoul_l.constprop.0+0x5c>
 801db1c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801db20:	e7df      	b.n	801dae2 <_strtoul_l.constprop.0+0x76>
 801db22:	1c73      	adds	r3, r6, #1
 801db24:	d106      	bne.n	801db34 <_strtoul_l.constprop.0+0xc8>
 801db26:	2322      	movs	r3, #34	@ 0x22
 801db28:	f8ce 3000 	str.w	r3, [lr]
 801db2c:	4630      	mov	r0, r6
 801db2e:	b932      	cbnz	r2, 801db3e <_strtoul_l.constprop.0+0xd2>
 801db30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db34:	b107      	cbz	r7, 801db38 <_strtoul_l.constprop.0+0xcc>
 801db36:	4240      	negs	r0, r0
 801db38:	2a00      	cmp	r2, #0
 801db3a:	d0f9      	beq.n	801db30 <_strtoul_l.constprop.0+0xc4>
 801db3c:	b106      	cbz	r6, 801db40 <_strtoul_l.constprop.0+0xd4>
 801db3e:	1e69      	subs	r1, r5, #1
 801db40:	6011      	str	r1, [r2, #0]
 801db42:	e7f5      	b.n	801db30 <_strtoul_l.constprop.0+0xc4>
 801db44:	08021b9a 	.word	0x08021b9a

0801db48 <strtoul>:
 801db48:	4613      	mov	r3, r2
 801db4a:	460a      	mov	r2, r1
 801db4c:	4601      	mov	r1, r0
 801db4e:	4802      	ldr	r0, [pc, #8]	@ (801db58 <strtoul+0x10>)
 801db50:	6800      	ldr	r0, [r0, #0]
 801db52:	f7ff bf8b 	b.w	801da6c <_strtoul_l.constprop.0>
 801db56:	bf00      	nop
 801db58:	20001bf4 	.word	0x20001bf4

0801db5c <std>:
 801db5c:	2300      	movs	r3, #0
 801db5e:	b510      	push	{r4, lr}
 801db60:	4604      	mov	r4, r0
 801db62:	e9c0 3300 	strd	r3, r3, [r0]
 801db66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801db6a:	6083      	str	r3, [r0, #8]
 801db6c:	8181      	strh	r1, [r0, #12]
 801db6e:	6643      	str	r3, [r0, #100]	@ 0x64
 801db70:	81c2      	strh	r2, [r0, #14]
 801db72:	6183      	str	r3, [r0, #24]
 801db74:	4619      	mov	r1, r3
 801db76:	2208      	movs	r2, #8
 801db78:	305c      	adds	r0, #92	@ 0x5c
 801db7a:	f000 fae9 	bl	801e150 <memset>
 801db7e:	4b0d      	ldr	r3, [pc, #52]	@ (801dbb4 <std+0x58>)
 801db80:	6263      	str	r3, [r4, #36]	@ 0x24
 801db82:	4b0d      	ldr	r3, [pc, #52]	@ (801dbb8 <std+0x5c>)
 801db84:	62a3      	str	r3, [r4, #40]	@ 0x28
 801db86:	4b0d      	ldr	r3, [pc, #52]	@ (801dbbc <std+0x60>)
 801db88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801db8a:	4b0d      	ldr	r3, [pc, #52]	@ (801dbc0 <std+0x64>)
 801db8c:	6323      	str	r3, [r4, #48]	@ 0x30
 801db8e:	4b0d      	ldr	r3, [pc, #52]	@ (801dbc4 <std+0x68>)
 801db90:	6224      	str	r4, [r4, #32]
 801db92:	429c      	cmp	r4, r3
 801db94:	d006      	beq.n	801dba4 <std+0x48>
 801db96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801db9a:	4294      	cmp	r4, r2
 801db9c:	d002      	beq.n	801dba4 <std+0x48>
 801db9e:	33d0      	adds	r3, #208	@ 0xd0
 801dba0:	429c      	cmp	r4, r3
 801dba2:	d105      	bne.n	801dbb0 <std+0x54>
 801dba4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbac:	f000 bbf6 	b.w	801e39c <__retarget_lock_init_recursive>
 801dbb0:	bd10      	pop	{r4, pc}
 801dbb2:	bf00      	nop
 801dbb4:	0801dedd 	.word	0x0801dedd
 801dbb8:	0801deff 	.word	0x0801deff
 801dbbc:	0801df37 	.word	0x0801df37
 801dbc0:	0801df5b 	.word	0x0801df5b
 801dbc4:	2001f7e4 	.word	0x2001f7e4

0801dbc8 <stdio_exit_handler>:
 801dbc8:	4a02      	ldr	r2, [pc, #8]	@ (801dbd4 <stdio_exit_handler+0xc>)
 801dbca:	4903      	ldr	r1, [pc, #12]	@ (801dbd8 <stdio_exit_handler+0x10>)
 801dbcc:	4803      	ldr	r0, [pc, #12]	@ (801dbdc <stdio_exit_handler+0x14>)
 801dbce:	f000 b869 	b.w	801dca4 <_fwalk_sglue>
 801dbd2:	bf00      	nop
 801dbd4:	20001be8 	.word	0x20001be8
 801dbd8:	0801ee21 	.word	0x0801ee21
 801dbdc:	20001bf8 	.word	0x20001bf8

0801dbe0 <cleanup_stdio>:
 801dbe0:	6841      	ldr	r1, [r0, #4]
 801dbe2:	4b0c      	ldr	r3, [pc, #48]	@ (801dc14 <cleanup_stdio+0x34>)
 801dbe4:	4299      	cmp	r1, r3
 801dbe6:	b510      	push	{r4, lr}
 801dbe8:	4604      	mov	r4, r0
 801dbea:	d001      	beq.n	801dbf0 <cleanup_stdio+0x10>
 801dbec:	f001 f918 	bl	801ee20 <_fflush_r>
 801dbf0:	68a1      	ldr	r1, [r4, #8]
 801dbf2:	4b09      	ldr	r3, [pc, #36]	@ (801dc18 <cleanup_stdio+0x38>)
 801dbf4:	4299      	cmp	r1, r3
 801dbf6:	d002      	beq.n	801dbfe <cleanup_stdio+0x1e>
 801dbf8:	4620      	mov	r0, r4
 801dbfa:	f001 f911 	bl	801ee20 <_fflush_r>
 801dbfe:	68e1      	ldr	r1, [r4, #12]
 801dc00:	4b06      	ldr	r3, [pc, #24]	@ (801dc1c <cleanup_stdio+0x3c>)
 801dc02:	4299      	cmp	r1, r3
 801dc04:	d004      	beq.n	801dc10 <cleanup_stdio+0x30>
 801dc06:	4620      	mov	r0, r4
 801dc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc0c:	f001 b908 	b.w	801ee20 <_fflush_r>
 801dc10:	bd10      	pop	{r4, pc}
 801dc12:	bf00      	nop
 801dc14:	2001f7e4 	.word	0x2001f7e4
 801dc18:	2001f84c 	.word	0x2001f84c
 801dc1c:	2001f8b4 	.word	0x2001f8b4

0801dc20 <global_stdio_init.part.0>:
 801dc20:	b510      	push	{r4, lr}
 801dc22:	4b0b      	ldr	r3, [pc, #44]	@ (801dc50 <global_stdio_init.part.0+0x30>)
 801dc24:	4c0b      	ldr	r4, [pc, #44]	@ (801dc54 <global_stdio_init.part.0+0x34>)
 801dc26:	4a0c      	ldr	r2, [pc, #48]	@ (801dc58 <global_stdio_init.part.0+0x38>)
 801dc28:	601a      	str	r2, [r3, #0]
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	2104      	movs	r1, #4
 801dc30:	f7ff ff94 	bl	801db5c <std>
 801dc34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dc38:	2201      	movs	r2, #1
 801dc3a:	2109      	movs	r1, #9
 801dc3c:	f7ff ff8e 	bl	801db5c <std>
 801dc40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dc44:	2202      	movs	r2, #2
 801dc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc4a:	2112      	movs	r1, #18
 801dc4c:	f7ff bf86 	b.w	801db5c <std>
 801dc50:	2001f91c 	.word	0x2001f91c
 801dc54:	2001f7e4 	.word	0x2001f7e4
 801dc58:	0801dbc9 	.word	0x0801dbc9

0801dc5c <__sfp_lock_acquire>:
 801dc5c:	4801      	ldr	r0, [pc, #4]	@ (801dc64 <__sfp_lock_acquire+0x8>)
 801dc5e:	f000 bb9e 	b.w	801e39e <__retarget_lock_acquire_recursive>
 801dc62:	bf00      	nop
 801dc64:	2001f926 	.word	0x2001f926

0801dc68 <__sfp_lock_release>:
 801dc68:	4801      	ldr	r0, [pc, #4]	@ (801dc70 <__sfp_lock_release+0x8>)
 801dc6a:	f000 bb99 	b.w	801e3a0 <__retarget_lock_release_recursive>
 801dc6e:	bf00      	nop
 801dc70:	2001f926 	.word	0x2001f926

0801dc74 <__sinit>:
 801dc74:	b510      	push	{r4, lr}
 801dc76:	4604      	mov	r4, r0
 801dc78:	f7ff fff0 	bl	801dc5c <__sfp_lock_acquire>
 801dc7c:	6a23      	ldr	r3, [r4, #32]
 801dc7e:	b11b      	cbz	r3, 801dc88 <__sinit+0x14>
 801dc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc84:	f7ff bff0 	b.w	801dc68 <__sfp_lock_release>
 801dc88:	4b04      	ldr	r3, [pc, #16]	@ (801dc9c <__sinit+0x28>)
 801dc8a:	6223      	str	r3, [r4, #32]
 801dc8c:	4b04      	ldr	r3, [pc, #16]	@ (801dca0 <__sinit+0x2c>)
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d1f5      	bne.n	801dc80 <__sinit+0xc>
 801dc94:	f7ff ffc4 	bl	801dc20 <global_stdio_init.part.0>
 801dc98:	e7f2      	b.n	801dc80 <__sinit+0xc>
 801dc9a:	bf00      	nop
 801dc9c:	0801dbe1 	.word	0x0801dbe1
 801dca0:	2001f91c 	.word	0x2001f91c

0801dca4 <_fwalk_sglue>:
 801dca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dca8:	4607      	mov	r7, r0
 801dcaa:	4688      	mov	r8, r1
 801dcac:	4614      	mov	r4, r2
 801dcae:	2600      	movs	r6, #0
 801dcb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dcb4:	f1b9 0901 	subs.w	r9, r9, #1
 801dcb8:	d505      	bpl.n	801dcc6 <_fwalk_sglue+0x22>
 801dcba:	6824      	ldr	r4, [r4, #0]
 801dcbc:	2c00      	cmp	r4, #0
 801dcbe:	d1f7      	bne.n	801dcb0 <_fwalk_sglue+0xc>
 801dcc0:	4630      	mov	r0, r6
 801dcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcc6:	89ab      	ldrh	r3, [r5, #12]
 801dcc8:	2b01      	cmp	r3, #1
 801dcca:	d907      	bls.n	801dcdc <_fwalk_sglue+0x38>
 801dccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dcd0:	3301      	adds	r3, #1
 801dcd2:	d003      	beq.n	801dcdc <_fwalk_sglue+0x38>
 801dcd4:	4629      	mov	r1, r5
 801dcd6:	4638      	mov	r0, r7
 801dcd8:	47c0      	blx	r8
 801dcda:	4306      	orrs	r6, r0
 801dcdc:	3568      	adds	r5, #104	@ 0x68
 801dcde:	e7e9      	b.n	801dcb4 <_fwalk_sglue+0x10>

0801dce0 <_fwrite_r>:
 801dce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dce4:	9c08      	ldr	r4, [sp, #32]
 801dce6:	468a      	mov	sl, r1
 801dce8:	4690      	mov	r8, r2
 801dcea:	fb02 f903 	mul.w	r9, r2, r3
 801dcee:	4606      	mov	r6, r0
 801dcf0:	b118      	cbz	r0, 801dcfa <_fwrite_r+0x1a>
 801dcf2:	6a03      	ldr	r3, [r0, #32]
 801dcf4:	b90b      	cbnz	r3, 801dcfa <_fwrite_r+0x1a>
 801dcf6:	f7ff ffbd 	bl	801dc74 <__sinit>
 801dcfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dcfc:	07dd      	lsls	r5, r3, #31
 801dcfe:	d405      	bmi.n	801dd0c <_fwrite_r+0x2c>
 801dd00:	89a3      	ldrh	r3, [r4, #12]
 801dd02:	0598      	lsls	r0, r3, #22
 801dd04:	d402      	bmi.n	801dd0c <_fwrite_r+0x2c>
 801dd06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd08:	f000 fb49 	bl	801e39e <__retarget_lock_acquire_recursive>
 801dd0c:	89a3      	ldrh	r3, [r4, #12]
 801dd0e:	0719      	lsls	r1, r3, #28
 801dd10:	d516      	bpl.n	801dd40 <_fwrite_r+0x60>
 801dd12:	6923      	ldr	r3, [r4, #16]
 801dd14:	b1a3      	cbz	r3, 801dd40 <_fwrite_r+0x60>
 801dd16:	2500      	movs	r5, #0
 801dd18:	454d      	cmp	r5, r9
 801dd1a:	d01f      	beq.n	801dd5c <_fwrite_r+0x7c>
 801dd1c:	68a7      	ldr	r7, [r4, #8]
 801dd1e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801dd22:	3f01      	subs	r7, #1
 801dd24:	2f00      	cmp	r7, #0
 801dd26:	60a7      	str	r7, [r4, #8]
 801dd28:	da04      	bge.n	801dd34 <_fwrite_r+0x54>
 801dd2a:	69a3      	ldr	r3, [r4, #24]
 801dd2c:	429f      	cmp	r7, r3
 801dd2e:	db0f      	blt.n	801dd50 <_fwrite_r+0x70>
 801dd30:	290a      	cmp	r1, #10
 801dd32:	d00d      	beq.n	801dd50 <_fwrite_r+0x70>
 801dd34:	6823      	ldr	r3, [r4, #0]
 801dd36:	1c5a      	adds	r2, r3, #1
 801dd38:	6022      	str	r2, [r4, #0]
 801dd3a:	7019      	strb	r1, [r3, #0]
 801dd3c:	3501      	adds	r5, #1
 801dd3e:	e7eb      	b.n	801dd18 <_fwrite_r+0x38>
 801dd40:	4621      	mov	r1, r4
 801dd42:	4630      	mov	r0, r6
 801dd44:	f000 f984 	bl	801e050 <__swsetup_r>
 801dd48:	2800      	cmp	r0, #0
 801dd4a:	d0e4      	beq.n	801dd16 <_fwrite_r+0x36>
 801dd4c:	2500      	movs	r5, #0
 801dd4e:	e005      	b.n	801dd5c <_fwrite_r+0x7c>
 801dd50:	4622      	mov	r2, r4
 801dd52:	4630      	mov	r0, r6
 801dd54:	f000 f93e 	bl	801dfd4 <__swbuf_r>
 801dd58:	3001      	adds	r0, #1
 801dd5a:	d1ef      	bne.n	801dd3c <_fwrite_r+0x5c>
 801dd5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd5e:	07da      	lsls	r2, r3, #31
 801dd60:	d405      	bmi.n	801dd6e <_fwrite_r+0x8e>
 801dd62:	89a3      	ldrh	r3, [r4, #12]
 801dd64:	059b      	lsls	r3, r3, #22
 801dd66:	d402      	bmi.n	801dd6e <_fwrite_r+0x8e>
 801dd68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd6a:	f000 fb19 	bl	801e3a0 <__retarget_lock_release_recursive>
 801dd6e:	fbb5 f0f8 	udiv	r0, r5, r8
 801dd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801dd78 <fwrite>:
 801dd78:	b507      	push	{r0, r1, r2, lr}
 801dd7a:	9300      	str	r3, [sp, #0]
 801dd7c:	4613      	mov	r3, r2
 801dd7e:	460a      	mov	r2, r1
 801dd80:	4601      	mov	r1, r0
 801dd82:	4803      	ldr	r0, [pc, #12]	@ (801dd90 <fwrite+0x18>)
 801dd84:	6800      	ldr	r0, [r0, #0]
 801dd86:	f7ff ffab 	bl	801dce0 <_fwrite_r>
 801dd8a:	b003      	add	sp, #12
 801dd8c:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd90:	20001bf4 	.word	0x20001bf4

0801dd94 <iprintf>:
 801dd94:	b40f      	push	{r0, r1, r2, r3}
 801dd96:	b507      	push	{r0, r1, r2, lr}
 801dd98:	4906      	ldr	r1, [pc, #24]	@ (801ddb4 <iprintf+0x20>)
 801dd9a:	ab04      	add	r3, sp, #16
 801dd9c:	6808      	ldr	r0, [r1, #0]
 801dd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dda2:	6881      	ldr	r1, [r0, #8]
 801dda4:	9301      	str	r3, [sp, #4]
 801dda6:	f000 fd11 	bl	801e7cc <_vfiprintf_r>
 801ddaa:	b003      	add	sp, #12
 801ddac:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddb0:	b004      	add	sp, #16
 801ddb2:	4770      	bx	lr
 801ddb4:	20001bf4 	.word	0x20001bf4

0801ddb8 <_puts_r>:
 801ddb8:	6a03      	ldr	r3, [r0, #32]
 801ddba:	b570      	push	{r4, r5, r6, lr}
 801ddbc:	6884      	ldr	r4, [r0, #8]
 801ddbe:	4605      	mov	r5, r0
 801ddc0:	460e      	mov	r6, r1
 801ddc2:	b90b      	cbnz	r3, 801ddc8 <_puts_r+0x10>
 801ddc4:	f7ff ff56 	bl	801dc74 <__sinit>
 801ddc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddca:	07db      	lsls	r3, r3, #31
 801ddcc:	d405      	bmi.n	801ddda <_puts_r+0x22>
 801ddce:	89a3      	ldrh	r3, [r4, #12]
 801ddd0:	0598      	lsls	r0, r3, #22
 801ddd2:	d402      	bmi.n	801ddda <_puts_r+0x22>
 801ddd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddd6:	f000 fae2 	bl	801e39e <__retarget_lock_acquire_recursive>
 801ddda:	89a3      	ldrh	r3, [r4, #12]
 801dddc:	0719      	lsls	r1, r3, #28
 801ddde:	d502      	bpl.n	801dde6 <_puts_r+0x2e>
 801dde0:	6923      	ldr	r3, [r4, #16]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d135      	bne.n	801de52 <_puts_r+0x9a>
 801dde6:	4621      	mov	r1, r4
 801dde8:	4628      	mov	r0, r5
 801ddea:	f000 f931 	bl	801e050 <__swsetup_r>
 801ddee:	b380      	cbz	r0, 801de52 <_puts_r+0x9a>
 801ddf0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ddf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddf6:	07da      	lsls	r2, r3, #31
 801ddf8:	d405      	bmi.n	801de06 <_puts_r+0x4e>
 801ddfa:	89a3      	ldrh	r3, [r4, #12]
 801ddfc:	059b      	lsls	r3, r3, #22
 801ddfe:	d402      	bmi.n	801de06 <_puts_r+0x4e>
 801de00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de02:	f000 facd 	bl	801e3a0 <__retarget_lock_release_recursive>
 801de06:	4628      	mov	r0, r5
 801de08:	bd70      	pop	{r4, r5, r6, pc}
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	da04      	bge.n	801de18 <_puts_r+0x60>
 801de0e:	69a2      	ldr	r2, [r4, #24]
 801de10:	429a      	cmp	r2, r3
 801de12:	dc17      	bgt.n	801de44 <_puts_r+0x8c>
 801de14:	290a      	cmp	r1, #10
 801de16:	d015      	beq.n	801de44 <_puts_r+0x8c>
 801de18:	6823      	ldr	r3, [r4, #0]
 801de1a:	1c5a      	adds	r2, r3, #1
 801de1c:	6022      	str	r2, [r4, #0]
 801de1e:	7019      	strb	r1, [r3, #0]
 801de20:	68a3      	ldr	r3, [r4, #8]
 801de22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801de26:	3b01      	subs	r3, #1
 801de28:	60a3      	str	r3, [r4, #8]
 801de2a:	2900      	cmp	r1, #0
 801de2c:	d1ed      	bne.n	801de0a <_puts_r+0x52>
 801de2e:	2b00      	cmp	r3, #0
 801de30:	da11      	bge.n	801de56 <_puts_r+0x9e>
 801de32:	4622      	mov	r2, r4
 801de34:	210a      	movs	r1, #10
 801de36:	4628      	mov	r0, r5
 801de38:	f000 f8cc 	bl	801dfd4 <__swbuf_r>
 801de3c:	3001      	adds	r0, #1
 801de3e:	d0d7      	beq.n	801ddf0 <_puts_r+0x38>
 801de40:	250a      	movs	r5, #10
 801de42:	e7d7      	b.n	801ddf4 <_puts_r+0x3c>
 801de44:	4622      	mov	r2, r4
 801de46:	4628      	mov	r0, r5
 801de48:	f000 f8c4 	bl	801dfd4 <__swbuf_r>
 801de4c:	3001      	adds	r0, #1
 801de4e:	d1e7      	bne.n	801de20 <_puts_r+0x68>
 801de50:	e7ce      	b.n	801ddf0 <_puts_r+0x38>
 801de52:	3e01      	subs	r6, #1
 801de54:	e7e4      	b.n	801de20 <_puts_r+0x68>
 801de56:	6823      	ldr	r3, [r4, #0]
 801de58:	1c5a      	adds	r2, r3, #1
 801de5a:	6022      	str	r2, [r4, #0]
 801de5c:	220a      	movs	r2, #10
 801de5e:	701a      	strb	r2, [r3, #0]
 801de60:	e7ee      	b.n	801de40 <_puts_r+0x88>
	...

0801de64 <puts>:
 801de64:	4b02      	ldr	r3, [pc, #8]	@ (801de70 <puts+0xc>)
 801de66:	4601      	mov	r1, r0
 801de68:	6818      	ldr	r0, [r3, #0]
 801de6a:	f7ff bfa5 	b.w	801ddb8 <_puts_r>
 801de6e:	bf00      	nop
 801de70:	20001bf4 	.word	0x20001bf4

0801de74 <sniprintf>:
 801de74:	b40c      	push	{r2, r3}
 801de76:	b530      	push	{r4, r5, lr}
 801de78:	4b17      	ldr	r3, [pc, #92]	@ (801ded8 <sniprintf+0x64>)
 801de7a:	1e0c      	subs	r4, r1, #0
 801de7c:	681d      	ldr	r5, [r3, #0]
 801de7e:	b09d      	sub	sp, #116	@ 0x74
 801de80:	da08      	bge.n	801de94 <sniprintf+0x20>
 801de82:	238b      	movs	r3, #139	@ 0x8b
 801de84:	602b      	str	r3, [r5, #0]
 801de86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801de8a:	b01d      	add	sp, #116	@ 0x74
 801de8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de90:	b002      	add	sp, #8
 801de92:	4770      	bx	lr
 801de94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801de98:	f8ad 3014 	strh.w	r3, [sp, #20]
 801de9c:	bf14      	ite	ne
 801de9e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801dea2:	4623      	moveq	r3, r4
 801dea4:	9304      	str	r3, [sp, #16]
 801dea6:	9307      	str	r3, [sp, #28]
 801dea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801deac:	9002      	str	r0, [sp, #8]
 801deae:	9006      	str	r0, [sp, #24]
 801deb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801deb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801deb6:	ab21      	add	r3, sp, #132	@ 0x84
 801deb8:	a902      	add	r1, sp, #8
 801deba:	4628      	mov	r0, r5
 801debc:	9301      	str	r3, [sp, #4]
 801debe:	f000 fb5f 	bl	801e580 <_svfiprintf_r>
 801dec2:	1c43      	adds	r3, r0, #1
 801dec4:	bfbc      	itt	lt
 801dec6:	238b      	movlt	r3, #139	@ 0x8b
 801dec8:	602b      	strlt	r3, [r5, #0]
 801deca:	2c00      	cmp	r4, #0
 801decc:	d0dd      	beq.n	801de8a <sniprintf+0x16>
 801dece:	9b02      	ldr	r3, [sp, #8]
 801ded0:	2200      	movs	r2, #0
 801ded2:	701a      	strb	r2, [r3, #0]
 801ded4:	e7d9      	b.n	801de8a <sniprintf+0x16>
 801ded6:	bf00      	nop
 801ded8:	20001bf4 	.word	0x20001bf4

0801dedc <__sread>:
 801dedc:	b510      	push	{r4, lr}
 801dede:	460c      	mov	r4, r1
 801dee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dee4:	f000 f9fc 	bl	801e2e0 <_read_r>
 801dee8:	2800      	cmp	r0, #0
 801deea:	bfab      	itete	ge
 801deec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801deee:	89a3      	ldrhlt	r3, [r4, #12]
 801def0:	181b      	addge	r3, r3, r0
 801def2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801def6:	bfac      	ite	ge
 801def8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801defa:	81a3      	strhlt	r3, [r4, #12]
 801defc:	bd10      	pop	{r4, pc}

0801defe <__swrite>:
 801defe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df02:	461f      	mov	r7, r3
 801df04:	898b      	ldrh	r3, [r1, #12]
 801df06:	05db      	lsls	r3, r3, #23
 801df08:	4605      	mov	r5, r0
 801df0a:	460c      	mov	r4, r1
 801df0c:	4616      	mov	r6, r2
 801df0e:	d505      	bpl.n	801df1c <__swrite+0x1e>
 801df10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df14:	2302      	movs	r3, #2
 801df16:	2200      	movs	r2, #0
 801df18:	f000 f9d0 	bl	801e2bc <_lseek_r>
 801df1c:	89a3      	ldrh	r3, [r4, #12]
 801df1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801df26:	81a3      	strh	r3, [r4, #12]
 801df28:	4632      	mov	r2, r6
 801df2a:	463b      	mov	r3, r7
 801df2c:	4628      	mov	r0, r5
 801df2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df32:	f000 b9f7 	b.w	801e324 <_write_r>

0801df36 <__sseek>:
 801df36:	b510      	push	{r4, lr}
 801df38:	460c      	mov	r4, r1
 801df3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df3e:	f000 f9bd 	bl	801e2bc <_lseek_r>
 801df42:	1c43      	adds	r3, r0, #1
 801df44:	89a3      	ldrh	r3, [r4, #12]
 801df46:	bf15      	itete	ne
 801df48:	6560      	strne	r0, [r4, #84]	@ 0x54
 801df4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801df4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801df52:	81a3      	strheq	r3, [r4, #12]
 801df54:	bf18      	it	ne
 801df56:	81a3      	strhne	r3, [r4, #12]
 801df58:	bd10      	pop	{r4, pc}

0801df5a <__sclose>:
 801df5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df5e:	f000 b947 	b.w	801e1f0 <_close_r>

0801df62 <_vsniprintf_r>:
 801df62:	b530      	push	{r4, r5, lr}
 801df64:	4614      	mov	r4, r2
 801df66:	2c00      	cmp	r4, #0
 801df68:	b09b      	sub	sp, #108	@ 0x6c
 801df6a:	4605      	mov	r5, r0
 801df6c:	461a      	mov	r2, r3
 801df6e:	da05      	bge.n	801df7c <_vsniprintf_r+0x1a>
 801df70:	238b      	movs	r3, #139	@ 0x8b
 801df72:	6003      	str	r3, [r0, #0]
 801df74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df78:	b01b      	add	sp, #108	@ 0x6c
 801df7a:	bd30      	pop	{r4, r5, pc}
 801df7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801df80:	f8ad 300c 	strh.w	r3, [sp, #12]
 801df84:	bf14      	ite	ne
 801df86:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801df8a:	4623      	moveq	r3, r4
 801df8c:	9302      	str	r3, [sp, #8]
 801df8e:	9305      	str	r3, [sp, #20]
 801df90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801df94:	9100      	str	r1, [sp, #0]
 801df96:	9104      	str	r1, [sp, #16]
 801df98:	f8ad 300e 	strh.w	r3, [sp, #14]
 801df9c:	4669      	mov	r1, sp
 801df9e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dfa0:	f000 faee 	bl	801e580 <_svfiprintf_r>
 801dfa4:	1c43      	adds	r3, r0, #1
 801dfa6:	bfbc      	itt	lt
 801dfa8:	238b      	movlt	r3, #139	@ 0x8b
 801dfaa:	602b      	strlt	r3, [r5, #0]
 801dfac:	2c00      	cmp	r4, #0
 801dfae:	d0e3      	beq.n	801df78 <_vsniprintf_r+0x16>
 801dfb0:	9b00      	ldr	r3, [sp, #0]
 801dfb2:	2200      	movs	r2, #0
 801dfb4:	701a      	strb	r2, [r3, #0]
 801dfb6:	e7df      	b.n	801df78 <_vsniprintf_r+0x16>

0801dfb8 <vsniprintf>:
 801dfb8:	b507      	push	{r0, r1, r2, lr}
 801dfba:	9300      	str	r3, [sp, #0]
 801dfbc:	4613      	mov	r3, r2
 801dfbe:	460a      	mov	r2, r1
 801dfc0:	4601      	mov	r1, r0
 801dfc2:	4803      	ldr	r0, [pc, #12]	@ (801dfd0 <vsniprintf+0x18>)
 801dfc4:	6800      	ldr	r0, [r0, #0]
 801dfc6:	f7ff ffcc 	bl	801df62 <_vsniprintf_r>
 801dfca:	b003      	add	sp, #12
 801dfcc:	f85d fb04 	ldr.w	pc, [sp], #4
 801dfd0:	20001bf4 	.word	0x20001bf4

0801dfd4 <__swbuf_r>:
 801dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfd6:	460e      	mov	r6, r1
 801dfd8:	4614      	mov	r4, r2
 801dfda:	4605      	mov	r5, r0
 801dfdc:	b118      	cbz	r0, 801dfe6 <__swbuf_r+0x12>
 801dfde:	6a03      	ldr	r3, [r0, #32]
 801dfe0:	b90b      	cbnz	r3, 801dfe6 <__swbuf_r+0x12>
 801dfe2:	f7ff fe47 	bl	801dc74 <__sinit>
 801dfe6:	69a3      	ldr	r3, [r4, #24]
 801dfe8:	60a3      	str	r3, [r4, #8]
 801dfea:	89a3      	ldrh	r3, [r4, #12]
 801dfec:	071a      	lsls	r2, r3, #28
 801dfee:	d501      	bpl.n	801dff4 <__swbuf_r+0x20>
 801dff0:	6923      	ldr	r3, [r4, #16]
 801dff2:	b943      	cbnz	r3, 801e006 <__swbuf_r+0x32>
 801dff4:	4621      	mov	r1, r4
 801dff6:	4628      	mov	r0, r5
 801dff8:	f000 f82a 	bl	801e050 <__swsetup_r>
 801dffc:	b118      	cbz	r0, 801e006 <__swbuf_r+0x32>
 801dffe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801e002:	4638      	mov	r0, r7
 801e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e006:	6823      	ldr	r3, [r4, #0]
 801e008:	6922      	ldr	r2, [r4, #16]
 801e00a:	1a98      	subs	r0, r3, r2
 801e00c:	6963      	ldr	r3, [r4, #20]
 801e00e:	b2f6      	uxtb	r6, r6
 801e010:	4283      	cmp	r3, r0
 801e012:	4637      	mov	r7, r6
 801e014:	dc05      	bgt.n	801e022 <__swbuf_r+0x4e>
 801e016:	4621      	mov	r1, r4
 801e018:	4628      	mov	r0, r5
 801e01a:	f000 ff01 	bl	801ee20 <_fflush_r>
 801e01e:	2800      	cmp	r0, #0
 801e020:	d1ed      	bne.n	801dffe <__swbuf_r+0x2a>
 801e022:	68a3      	ldr	r3, [r4, #8]
 801e024:	3b01      	subs	r3, #1
 801e026:	60a3      	str	r3, [r4, #8]
 801e028:	6823      	ldr	r3, [r4, #0]
 801e02a:	1c5a      	adds	r2, r3, #1
 801e02c:	6022      	str	r2, [r4, #0]
 801e02e:	701e      	strb	r6, [r3, #0]
 801e030:	6962      	ldr	r2, [r4, #20]
 801e032:	1c43      	adds	r3, r0, #1
 801e034:	429a      	cmp	r2, r3
 801e036:	d004      	beq.n	801e042 <__swbuf_r+0x6e>
 801e038:	89a3      	ldrh	r3, [r4, #12]
 801e03a:	07db      	lsls	r3, r3, #31
 801e03c:	d5e1      	bpl.n	801e002 <__swbuf_r+0x2e>
 801e03e:	2e0a      	cmp	r6, #10
 801e040:	d1df      	bne.n	801e002 <__swbuf_r+0x2e>
 801e042:	4621      	mov	r1, r4
 801e044:	4628      	mov	r0, r5
 801e046:	f000 feeb 	bl	801ee20 <_fflush_r>
 801e04a:	2800      	cmp	r0, #0
 801e04c:	d0d9      	beq.n	801e002 <__swbuf_r+0x2e>
 801e04e:	e7d6      	b.n	801dffe <__swbuf_r+0x2a>

0801e050 <__swsetup_r>:
 801e050:	b538      	push	{r3, r4, r5, lr}
 801e052:	4b29      	ldr	r3, [pc, #164]	@ (801e0f8 <__swsetup_r+0xa8>)
 801e054:	4605      	mov	r5, r0
 801e056:	6818      	ldr	r0, [r3, #0]
 801e058:	460c      	mov	r4, r1
 801e05a:	b118      	cbz	r0, 801e064 <__swsetup_r+0x14>
 801e05c:	6a03      	ldr	r3, [r0, #32]
 801e05e:	b90b      	cbnz	r3, 801e064 <__swsetup_r+0x14>
 801e060:	f7ff fe08 	bl	801dc74 <__sinit>
 801e064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e068:	0719      	lsls	r1, r3, #28
 801e06a:	d422      	bmi.n	801e0b2 <__swsetup_r+0x62>
 801e06c:	06da      	lsls	r2, r3, #27
 801e06e:	d407      	bmi.n	801e080 <__swsetup_r+0x30>
 801e070:	2209      	movs	r2, #9
 801e072:	602a      	str	r2, [r5, #0]
 801e074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e078:	81a3      	strh	r3, [r4, #12]
 801e07a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e07e:	e033      	b.n	801e0e8 <__swsetup_r+0x98>
 801e080:	0758      	lsls	r0, r3, #29
 801e082:	d512      	bpl.n	801e0aa <__swsetup_r+0x5a>
 801e084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e086:	b141      	cbz	r1, 801e09a <__swsetup_r+0x4a>
 801e088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e08c:	4299      	cmp	r1, r3
 801e08e:	d002      	beq.n	801e096 <__swsetup_r+0x46>
 801e090:	4628      	mov	r0, r5
 801e092:	f000 f9c7 	bl	801e424 <_free_r>
 801e096:	2300      	movs	r3, #0
 801e098:	6363      	str	r3, [r4, #52]	@ 0x34
 801e09a:	89a3      	ldrh	r3, [r4, #12]
 801e09c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e0a0:	81a3      	strh	r3, [r4, #12]
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	6063      	str	r3, [r4, #4]
 801e0a6:	6923      	ldr	r3, [r4, #16]
 801e0a8:	6023      	str	r3, [r4, #0]
 801e0aa:	89a3      	ldrh	r3, [r4, #12]
 801e0ac:	f043 0308 	orr.w	r3, r3, #8
 801e0b0:	81a3      	strh	r3, [r4, #12]
 801e0b2:	6923      	ldr	r3, [r4, #16]
 801e0b4:	b94b      	cbnz	r3, 801e0ca <__swsetup_r+0x7a>
 801e0b6:	89a3      	ldrh	r3, [r4, #12]
 801e0b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e0bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e0c0:	d003      	beq.n	801e0ca <__swsetup_r+0x7a>
 801e0c2:	4621      	mov	r1, r4
 801e0c4:	4628      	mov	r0, r5
 801e0c6:	f000 ff0b 	bl	801eee0 <__smakebuf_r>
 801e0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0ce:	f013 0201 	ands.w	r2, r3, #1
 801e0d2:	d00a      	beq.n	801e0ea <__swsetup_r+0x9a>
 801e0d4:	2200      	movs	r2, #0
 801e0d6:	60a2      	str	r2, [r4, #8]
 801e0d8:	6962      	ldr	r2, [r4, #20]
 801e0da:	4252      	negs	r2, r2
 801e0dc:	61a2      	str	r2, [r4, #24]
 801e0de:	6922      	ldr	r2, [r4, #16]
 801e0e0:	b942      	cbnz	r2, 801e0f4 <__swsetup_r+0xa4>
 801e0e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e0e6:	d1c5      	bne.n	801e074 <__swsetup_r+0x24>
 801e0e8:	bd38      	pop	{r3, r4, r5, pc}
 801e0ea:	0799      	lsls	r1, r3, #30
 801e0ec:	bf58      	it	pl
 801e0ee:	6962      	ldrpl	r2, [r4, #20]
 801e0f0:	60a2      	str	r2, [r4, #8]
 801e0f2:	e7f4      	b.n	801e0de <__swsetup_r+0x8e>
 801e0f4:	2000      	movs	r0, #0
 801e0f6:	e7f7      	b.n	801e0e8 <__swsetup_r+0x98>
 801e0f8:	20001bf4 	.word	0x20001bf4

0801e0fc <memcmp>:
 801e0fc:	b510      	push	{r4, lr}
 801e0fe:	3901      	subs	r1, #1
 801e100:	4402      	add	r2, r0
 801e102:	4290      	cmp	r0, r2
 801e104:	d101      	bne.n	801e10a <memcmp+0xe>
 801e106:	2000      	movs	r0, #0
 801e108:	e005      	b.n	801e116 <memcmp+0x1a>
 801e10a:	7803      	ldrb	r3, [r0, #0]
 801e10c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e110:	42a3      	cmp	r3, r4
 801e112:	d001      	beq.n	801e118 <memcmp+0x1c>
 801e114:	1b18      	subs	r0, r3, r4
 801e116:	bd10      	pop	{r4, pc}
 801e118:	3001      	adds	r0, #1
 801e11a:	e7f2      	b.n	801e102 <memcmp+0x6>

0801e11c <memmove>:
 801e11c:	4288      	cmp	r0, r1
 801e11e:	b510      	push	{r4, lr}
 801e120:	eb01 0402 	add.w	r4, r1, r2
 801e124:	d902      	bls.n	801e12c <memmove+0x10>
 801e126:	4284      	cmp	r4, r0
 801e128:	4623      	mov	r3, r4
 801e12a:	d807      	bhi.n	801e13c <memmove+0x20>
 801e12c:	1e43      	subs	r3, r0, #1
 801e12e:	42a1      	cmp	r1, r4
 801e130:	d008      	beq.n	801e144 <memmove+0x28>
 801e132:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e136:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e13a:	e7f8      	b.n	801e12e <memmove+0x12>
 801e13c:	4402      	add	r2, r0
 801e13e:	4601      	mov	r1, r0
 801e140:	428a      	cmp	r2, r1
 801e142:	d100      	bne.n	801e146 <memmove+0x2a>
 801e144:	bd10      	pop	{r4, pc}
 801e146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e14e:	e7f7      	b.n	801e140 <memmove+0x24>

0801e150 <memset>:
 801e150:	4402      	add	r2, r0
 801e152:	4603      	mov	r3, r0
 801e154:	4293      	cmp	r3, r2
 801e156:	d100      	bne.n	801e15a <memset+0xa>
 801e158:	4770      	bx	lr
 801e15a:	f803 1b01 	strb.w	r1, [r3], #1
 801e15e:	e7f9      	b.n	801e154 <memset+0x4>

0801e160 <strchr>:
 801e160:	b2c9      	uxtb	r1, r1
 801e162:	4603      	mov	r3, r0
 801e164:	4618      	mov	r0, r3
 801e166:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e16a:	b112      	cbz	r2, 801e172 <strchr+0x12>
 801e16c:	428a      	cmp	r2, r1
 801e16e:	d1f9      	bne.n	801e164 <strchr+0x4>
 801e170:	4770      	bx	lr
 801e172:	2900      	cmp	r1, #0
 801e174:	bf18      	it	ne
 801e176:	2000      	movne	r0, #0
 801e178:	4770      	bx	lr

0801e17a <strncmp>:
 801e17a:	b510      	push	{r4, lr}
 801e17c:	b16a      	cbz	r2, 801e19a <strncmp+0x20>
 801e17e:	3901      	subs	r1, #1
 801e180:	1884      	adds	r4, r0, r2
 801e182:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e186:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e18a:	429a      	cmp	r2, r3
 801e18c:	d103      	bne.n	801e196 <strncmp+0x1c>
 801e18e:	42a0      	cmp	r0, r4
 801e190:	d001      	beq.n	801e196 <strncmp+0x1c>
 801e192:	2a00      	cmp	r2, #0
 801e194:	d1f5      	bne.n	801e182 <strncmp+0x8>
 801e196:	1ad0      	subs	r0, r2, r3
 801e198:	bd10      	pop	{r4, pc}
 801e19a:	4610      	mov	r0, r2
 801e19c:	e7fc      	b.n	801e198 <strncmp+0x1e>

0801e19e <strncpy>:
 801e19e:	b510      	push	{r4, lr}
 801e1a0:	3901      	subs	r1, #1
 801e1a2:	4603      	mov	r3, r0
 801e1a4:	b132      	cbz	r2, 801e1b4 <strncpy+0x16>
 801e1a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e1aa:	f803 4b01 	strb.w	r4, [r3], #1
 801e1ae:	3a01      	subs	r2, #1
 801e1b0:	2c00      	cmp	r4, #0
 801e1b2:	d1f7      	bne.n	801e1a4 <strncpy+0x6>
 801e1b4:	441a      	add	r2, r3
 801e1b6:	2100      	movs	r1, #0
 801e1b8:	4293      	cmp	r3, r2
 801e1ba:	d100      	bne.n	801e1be <strncpy+0x20>
 801e1bc:	bd10      	pop	{r4, pc}
 801e1be:	f803 1b01 	strb.w	r1, [r3], #1
 801e1c2:	e7f9      	b.n	801e1b8 <strncpy+0x1a>

0801e1c4 <strstr>:
 801e1c4:	780a      	ldrb	r2, [r1, #0]
 801e1c6:	b570      	push	{r4, r5, r6, lr}
 801e1c8:	b96a      	cbnz	r2, 801e1e6 <strstr+0x22>
 801e1ca:	bd70      	pop	{r4, r5, r6, pc}
 801e1cc:	429a      	cmp	r2, r3
 801e1ce:	d109      	bne.n	801e1e4 <strstr+0x20>
 801e1d0:	460c      	mov	r4, r1
 801e1d2:	4605      	mov	r5, r0
 801e1d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d0f6      	beq.n	801e1ca <strstr+0x6>
 801e1dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e1e0:	429e      	cmp	r6, r3
 801e1e2:	d0f7      	beq.n	801e1d4 <strstr+0x10>
 801e1e4:	3001      	adds	r0, #1
 801e1e6:	7803      	ldrb	r3, [r0, #0]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d1ef      	bne.n	801e1cc <strstr+0x8>
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	e7ec      	b.n	801e1ca <strstr+0x6>

0801e1f0 <_close_r>:
 801e1f0:	b538      	push	{r3, r4, r5, lr}
 801e1f2:	4d06      	ldr	r5, [pc, #24]	@ (801e20c <_close_r+0x1c>)
 801e1f4:	2300      	movs	r3, #0
 801e1f6:	4604      	mov	r4, r0
 801e1f8:	4608      	mov	r0, r1
 801e1fa:	602b      	str	r3, [r5, #0]
 801e1fc:	f7e5 fbc2 	bl	8003984 <_close>
 801e200:	1c43      	adds	r3, r0, #1
 801e202:	d102      	bne.n	801e20a <_close_r+0x1a>
 801e204:	682b      	ldr	r3, [r5, #0]
 801e206:	b103      	cbz	r3, 801e20a <_close_r+0x1a>
 801e208:	6023      	str	r3, [r4, #0]
 801e20a:	bd38      	pop	{r3, r4, r5, pc}
 801e20c:	2001f920 	.word	0x2001f920

0801e210 <_reclaim_reent>:
 801e210:	4b29      	ldr	r3, [pc, #164]	@ (801e2b8 <_reclaim_reent+0xa8>)
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	4283      	cmp	r3, r0
 801e216:	b570      	push	{r4, r5, r6, lr}
 801e218:	4604      	mov	r4, r0
 801e21a:	d04b      	beq.n	801e2b4 <_reclaim_reent+0xa4>
 801e21c:	69c3      	ldr	r3, [r0, #28]
 801e21e:	b1ab      	cbz	r3, 801e24c <_reclaim_reent+0x3c>
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	b16b      	cbz	r3, 801e240 <_reclaim_reent+0x30>
 801e224:	2500      	movs	r5, #0
 801e226:	69e3      	ldr	r3, [r4, #28]
 801e228:	68db      	ldr	r3, [r3, #12]
 801e22a:	5959      	ldr	r1, [r3, r5]
 801e22c:	2900      	cmp	r1, #0
 801e22e:	d13b      	bne.n	801e2a8 <_reclaim_reent+0x98>
 801e230:	3504      	adds	r5, #4
 801e232:	2d80      	cmp	r5, #128	@ 0x80
 801e234:	d1f7      	bne.n	801e226 <_reclaim_reent+0x16>
 801e236:	69e3      	ldr	r3, [r4, #28]
 801e238:	4620      	mov	r0, r4
 801e23a:	68d9      	ldr	r1, [r3, #12]
 801e23c:	f000 f8f2 	bl	801e424 <_free_r>
 801e240:	69e3      	ldr	r3, [r4, #28]
 801e242:	6819      	ldr	r1, [r3, #0]
 801e244:	b111      	cbz	r1, 801e24c <_reclaim_reent+0x3c>
 801e246:	4620      	mov	r0, r4
 801e248:	f000 f8ec 	bl	801e424 <_free_r>
 801e24c:	6961      	ldr	r1, [r4, #20]
 801e24e:	b111      	cbz	r1, 801e256 <_reclaim_reent+0x46>
 801e250:	4620      	mov	r0, r4
 801e252:	f000 f8e7 	bl	801e424 <_free_r>
 801e256:	69e1      	ldr	r1, [r4, #28]
 801e258:	b111      	cbz	r1, 801e260 <_reclaim_reent+0x50>
 801e25a:	4620      	mov	r0, r4
 801e25c:	f000 f8e2 	bl	801e424 <_free_r>
 801e260:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e262:	b111      	cbz	r1, 801e26a <_reclaim_reent+0x5a>
 801e264:	4620      	mov	r0, r4
 801e266:	f000 f8dd 	bl	801e424 <_free_r>
 801e26a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e26c:	b111      	cbz	r1, 801e274 <_reclaim_reent+0x64>
 801e26e:	4620      	mov	r0, r4
 801e270:	f000 f8d8 	bl	801e424 <_free_r>
 801e274:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e276:	b111      	cbz	r1, 801e27e <_reclaim_reent+0x6e>
 801e278:	4620      	mov	r0, r4
 801e27a:	f000 f8d3 	bl	801e424 <_free_r>
 801e27e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e280:	b111      	cbz	r1, 801e288 <_reclaim_reent+0x78>
 801e282:	4620      	mov	r0, r4
 801e284:	f000 f8ce 	bl	801e424 <_free_r>
 801e288:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e28a:	b111      	cbz	r1, 801e292 <_reclaim_reent+0x82>
 801e28c:	4620      	mov	r0, r4
 801e28e:	f000 f8c9 	bl	801e424 <_free_r>
 801e292:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e294:	b111      	cbz	r1, 801e29c <_reclaim_reent+0x8c>
 801e296:	4620      	mov	r0, r4
 801e298:	f000 f8c4 	bl	801e424 <_free_r>
 801e29c:	6a23      	ldr	r3, [r4, #32]
 801e29e:	b14b      	cbz	r3, 801e2b4 <_reclaim_reent+0xa4>
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e2a6:	4718      	bx	r3
 801e2a8:	680e      	ldr	r6, [r1, #0]
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	f000 f8ba 	bl	801e424 <_free_r>
 801e2b0:	4631      	mov	r1, r6
 801e2b2:	e7bb      	b.n	801e22c <_reclaim_reent+0x1c>
 801e2b4:	bd70      	pop	{r4, r5, r6, pc}
 801e2b6:	bf00      	nop
 801e2b8:	20001bf4 	.word	0x20001bf4

0801e2bc <_lseek_r>:
 801e2bc:	b538      	push	{r3, r4, r5, lr}
 801e2be:	4d07      	ldr	r5, [pc, #28]	@ (801e2dc <_lseek_r+0x20>)
 801e2c0:	4604      	mov	r4, r0
 801e2c2:	4608      	mov	r0, r1
 801e2c4:	4611      	mov	r1, r2
 801e2c6:	2200      	movs	r2, #0
 801e2c8:	602a      	str	r2, [r5, #0]
 801e2ca:	461a      	mov	r2, r3
 801e2cc:	f7e5 fb81 	bl	80039d2 <_lseek>
 801e2d0:	1c43      	adds	r3, r0, #1
 801e2d2:	d102      	bne.n	801e2da <_lseek_r+0x1e>
 801e2d4:	682b      	ldr	r3, [r5, #0]
 801e2d6:	b103      	cbz	r3, 801e2da <_lseek_r+0x1e>
 801e2d8:	6023      	str	r3, [r4, #0]
 801e2da:	bd38      	pop	{r3, r4, r5, pc}
 801e2dc:	2001f920 	.word	0x2001f920

0801e2e0 <_read_r>:
 801e2e0:	b538      	push	{r3, r4, r5, lr}
 801e2e2:	4d07      	ldr	r5, [pc, #28]	@ (801e300 <_read_r+0x20>)
 801e2e4:	4604      	mov	r4, r0
 801e2e6:	4608      	mov	r0, r1
 801e2e8:	4611      	mov	r1, r2
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	602a      	str	r2, [r5, #0]
 801e2ee:	461a      	mov	r2, r3
 801e2f0:	f7e5 fb2b 	bl	800394a <_read>
 801e2f4:	1c43      	adds	r3, r0, #1
 801e2f6:	d102      	bne.n	801e2fe <_read_r+0x1e>
 801e2f8:	682b      	ldr	r3, [r5, #0]
 801e2fa:	b103      	cbz	r3, 801e2fe <_read_r+0x1e>
 801e2fc:	6023      	str	r3, [r4, #0]
 801e2fe:	bd38      	pop	{r3, r4, r5, pc}
 801e300:	2001f920 	.word	0x2001f920

0801e304 <_sbrk_r>:
 801e304:	b538      	push	{r3, r4, r5, lr}
 801e306:	4d06      	ldr	r5, [pc, #24]	@ (801e320 <_sbrk_r+0x1c>)
 801e308:	2300      	movs	r3, #0
 801e30a:	4604      	mov	r4, r0
 801e30c:	4608      	mov	r0, r1
 801e30e:	602b      	str	r3, [r5, #0]
 801e310:	f7e5 fb6c 	bl	80039ec <_sbrk>
 801e314:	1c43      	adds	r3, r0, #1
 801e316:	d102      	bne.n	801e31e <_sbrk_r+0x1a>
 801e318:	682b      	ldr	r3, [r5, #0]
 801e31a:	b103      	cbz	r3, 801e31e <_sbrk_r+0x1a>
 801e31c:	6023      	str	r3, [r4, #0]
 801e31e:	bd38      	pop	{r3, r4, r5, pc}
 801e320:	2001f920 	.word	0x2001f920

0801e324 <_write_r>:
 801e324:	b538      	push	{r3, r4, r5, lr}
 801e326:	4d07      	ldr	r5, [pc, #28]	@ (801e344 <_write_r+0x20>)
 801e328:	4604      	mov	r4, r0
 801e32a:	4608      	mov	r0, r1
 801e32c:	4611      	mov	r1, r2
 801e32e:	2200      	movs	r2, #0
 801e330:	602a      	str	r2, [r5, #0]
 801e332:	461a      	mov	r2, r3
 801e334:	f7e3 ffce 	bl	80022d4 <_write>
 801e338:	1c43      	adds	r3, r0, #1
 801e33a:	d102      	bne.n	801e342 <_write_r+0x1e>
 801e33c:	682b      	ldr	r3, [r5, #0]
 801e33e:	b103      	cbz	r3, 801e342 <_write_r+0x1e>
 801e340:	6023      	str	r3, [r4, #0]
 801e342:	bd38      	pop	{r3, r4, r5, pc}
 801e344:	2001f920 	.word	0x2001f920

0801e348 <__errno>:
 801e348:	4b01      	ldr	r3, [pc, #4]	@ (801e350 <__errno+0x8>)
 801e34a:	6818      	ldr	r0, [r3, #0]
 801e34c:	4770      	bx	lr
 801e34e:	bf00      	nop
 801e350:	20001bf4 	.word	0x20001bf4

0801e354 <__libc_init_array>:
 801e354:	b570      	push	{r4, r5, r6, lr}
 801e356:	4d0d      	ldr	r5, [pc, #52]	@ (801e38c <__libc_init_array+0x38>)
 801e358:	4c0d      	ldr	r4, [pc, #52]	@ (801e390 <__libc_init_array+0x3c>)
 801e35a:	1b64      	subs	r4, r4, r5
 801e35c:	10a4      	asrs	r4, r4, #2
 801e35e:	2600      	movs	r6, #0
 801e360:	42a6      	cmp	r6, r4
 801e362:	d109      	bne.n	801e378 <__libc_init_array+0x24>
 801e364:	4d0b      	ldr	r5, [pc, #44]	@ (801e394 <__libc_init_array+0x40>)
 801e366:	4c0c      	ldr	r4, [pc, #48]	@ (801e398 <__libc_init_array+0x44>)
 801e368:	f001 ff8a 	bl	8020280 <_init>
 801e36c:	1b64      	subs	r4, r4, r5
 801e36e:	10a4      	asrs	r4, r4, #2
 801e370:	2600      	movs	r6, #0
 801e372:	42a6      	cmp	r6, r4
 801e374:	d105      	bne.n	801e382 <__libc_init_array+0x2e>
 801e376:	bd70      	pop	{r4, r5, r6, pc}
 801e378:	f855 3b04 	ldr.w	r3, [r5], #4
 801e37c:	4798      	blx	r3
 801e37e:	3601      	adds	r6, #1
 801e380:	e7ee      	b.n	801e360 <__libc_init_array+0xc>
 801e382:	f855 3b04 	ldr.w	r3, [r5], #4
 801e386:	4798      	blx	r3
 801e388:	3601      	adds	r6, #1
 801e38a:	e7f2      	b.n	801e372 <__libc_init_array+0x1e>
 801e38c:	08021d88 	.word	0x08021d88
 801e390:	08021d88 	.word	0x08021d88
 801e394:	08021d88 	.word	0x08021d88
 801e398:	08021d94 	.word	0x08021d94

0801e39c <__retarget_lock_init_recursive>:
 801e39c:	4770      	bx	lr

0801e39e <__retarget_lock_acquire_recursive>:
 801e39e:	4770      	bx	lr

0801e3a0 <__retarget_lock_release_recursive>:
 801e3a0:	4770      	bx	lr

0801e3a2 <strcpy>:
 801e3a2:	4603      	mov	r3, r0
 801e3a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3a8:	f803 2b01 	strb.w	r2, [r3], #1
 801e3ac:	2a00      	cmp	r2, #0
 801e3ae:	d1f9      	bne.n	801e3a4 <strcpy+0x2>
 801e3b0:	4770      	bx	lr

0801e3b2 <memcpy>:
 801e3b2:	440a      	add	r2, r1
 801e3b4:	4291      	cmp	r1, r2
 801e3b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e3ba:	d100      	bne.n	801e3be <memcpy+0xc>
 801e3bc:	4770      	bx	lr
 801e3be:	b510      	push	{r4, lr}
 801e3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e3c8:	4291      	cmp	r1, r2
 801e3ca:	d1f9      	bne.n	801e3c0 <memcpy+0xe>
 801e3cc:	bd10      	pop	{r4, pc}
	...

0801e3d0 <__assert_func>:
 801e3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e3d2:	4614      	mov	r4, r2
 801e3d4:	461a      	mov	r2, r3
 801e3d6:	4b09      	ldr	r3, [pc, #36]	@ (801e3fc <__assert_func+0x2c>)
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	4605      	mov	r5, r0
 801e3dc:	68d8      	ldr	r0, [r3, #12]
 801e3de:	b954      	cbnz	r4, 801e3f6 <__assert_func+0x26>
 801e3e0:	4b07      	ldr	r3, [pc, #28]	@ (801e400 <__assert_func+0x30>)
 801e3e2:	461c      	mov	r4, r3
 801e3e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e3e8:	9100      	str	r1, [sp, #0]
 801e3ea:	462b      	mov	r3, r5
 801e3ec:	4905      	ldr	r1, [pc, #20]	@ (801e404 <__assert_func+0x34>)
 801e3ee:	f000 fd3f 	bl	801ee70 <fiprintf>
 801e3f2:	f000 fdd3 	bl	801ef9c <abort>
 801e3f6:	4b04      	ldr	r3, [pc, #16]	@ (801e408 <__assert_func+0x38>)
 801e3f8:	e7f4      	b.n	801e3e4 <__assert_func+0x14>
 801e3fa:	bf00      	nop
 801e3fc:	20001bf4 	.word	0x20001bf4
 801e400:	08021cd5 	.word	0x08021cd5
 801e404:	08021ca7 	.word	0x08021ca7
 801e408:	08021c9a 	.word	0x08021c9a

0801e40c <__env_lock>:
 801e40c:	4801      	ldr	r0, [pc, #4]	@ (801e414 <__env_lock+0x8>)
 801e40e:	f7ff bfc6 	b.w	801e39e <__retarget_lock_acquire_recursive>
 801e412:	bf00      	nop
 801e414:	2001f924 	.word	0x2001f924

0801e418 <__env_unlock>:
 801e418:	4801      	ldr	r0, [pc, #4]	@ (801e420 <__env_unlock+0x8>)
 801e41a:	f7ff bfc1 	b.w	801e3a0 <__retarget_lock_release_recursive>
 801e41e:	bf00      	nop
 801e420:	2001f924 	.word	0x2001f924

0801e424 <_free_r>:
 801e424:	b538      	push	{r3, r4, r5, lr}
 801e426:	4605      	mov	r5, r0
 801e428:	2900      	cmp	r1, #0
 801e42a:	d041      	beq.n	801e4b0 <_free_r+0x8c>
 801e42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e430:	1f0c      	subs	r4, r1, #4
 801e432:	2b00      	cmp	r3, #0
 801e434:	bfb8      	it	lt
 801e436:	18e4      	addlt	r4, r4, r3
 801e438:	f7ff fa6a 	bl	801d910 <__malloc_lock>
 801e43c:	4a1d      	ldr	r2, [pc, #116]	@ (801e4b4 <_free_r+0x90>)
 801e43e:	6813      	ldr	r3, [r2, #0]
 801e440:	b933      	cbnz	r3, 801e450 <_free_r+0x2c>
 801e442:	6063      	str	r3, [r4, #4]
 801e444:	6014      	str	r4, [r2, #0]
 801e446:	4628      	mov	r0, r5
 801e448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e44c:	f7ff ba66 	b.w	801d91c <__malloc_unlock>
 801e450:	42a3      	cmp	r3, r4
 801e452:	d908      	bls.n	801e466 <_free_r+0x42>
 801e454:	6820      	ldr	r0, [r4, #0]
 801e456:	1821      	adds	r1, r4, r0
 801e458:	428b      	cmp	r3, r1
 801e45a:	bf01      	itttt	eq
 801e45c:	6819      	ldreq	r1, [r3, #0]
 801e45e:	685b      	ldreq	r3, [r3, #4]
 801e460:	1809      	addeq	r1, r1, r0
 801e462:	6021      	streq	r1, [r4, #0]
 801e464:	e7ed      	b.n	801e442 <_free_r+0x1e>
 801e466:	461a      	mov	r2, r3
 801e468:	685b      	ldr	r3, [r3, #4]
 801e46a:	b10b      	cbz	r3, 801e470 <_free_r+0x4c>
 801e46c:	42a3      	cmp	r3, r4
 801e46e:	d9fa      	bls.n	801e466 <_free_r+0x42>
 801e470:	6811      	ldr	r1, [r2, #0]
 801e472:	1850      	adds	r0, r2, r1
 801e474:	42a0      	cmp	r0, r4
 801e476:	d10b      	bne.n	801e490 <_free_r+0x6c>
 801e478:	6820      	ldr	r0, [r4, #0]
 801e47a:	4401      	add	r1, r0
 801e47c:	1850      	adds	r0, r2, r1
 801e47e:	4283      	cmp	r3, r0
 801e480:	6011      	str	r1, [r2, #0]
 801e482:	d1e0      	bne.n	801e446 <_free_r+0x22>
 801e484:	6818      	ldr	r0, [r3, #0]
 801e486:	685b      	ldr	r3, [r3, #4]
 801e488:	6053      	str	r3, [r2, #4]
 801e48a:	4408      	add	r0, r1
 801e48c:	6010      	str	r0, [r2, #0]
 801e48e:	e7da      	b.n	801e446 <_free_r+0x22>
 801e490:	d902      	bls.n	801e498 <_free_r+0x74>
 801e492:	230c      	movs	r3, #12
 801e494:	602b      	str	r3, [r5, #0]
 801e496:	e7d6      	b.n	801e446 <_free_r+0x22>
 801e498:	6820      	ldr	r0, [r4, #0]
 801e49a:	1821      	adds	r1, r4, r0
 801e49c:	428b      	cmp	r3, r1
 801e49e:	bf04      	itt	eq
 801e4a0:	6819      	ldreq	r1, [r3, #0]
 801e4a2:	685b      	ldreq	r3, [r3, #4]
 801e4a4:	6063      	str	r3, [r4, #4]
 801e4a6:	bf04      	itt	eq
 801e4a8:	1809      	addeq	r1, r1, r0
 801e4aa:	6021      	streq	r1, [r4, #0]
 801e4ac:	6054      	str	r4, [r2, #4]
 801e4ae:	e7ca      	b.n	801e446 <_free_r+0x22>
 801e4b0:	bd38      	pop	{r3, r4, r5, pc}
 801e4b2:	bf00      	nop
 801e4b4:	2001f7e0 	.word	0x2001f7e0

0801e4b8 <_malloc_usable_size_r>:
 801e4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e4bc:	1f18      	subs	r0, r3, #4
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	bfbc      	itt	lt
 801e4c2:	580b      	ldrlt	r3, [r1, r0]
 801e4c4:	18c0      	addlt	r0, r0, r3
 801e4c6:	4770      	bx	lr

0801e4c8 <__ssputs_r>:
 801e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4cc:	688e      	ldr	r6, [r1, #8]
 801e4ce:	461f      	mov	r7, r3
 801e4d0:	42be      	cmp	r6, r7
 801e4d2:	680b      	ldr	r3, [r1, #0]
 801e4d4:	4682      	mov	sl, r0
 801e4d6:	460c      	mov	r4, r1
 801e4d8:	4690      	mov	r8, r2
 801e4da:	d82d      	bhi.n	801e538 <__ssputs_r+0x70>
 801e4dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e4e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e4e4:	d026      	beq.n	801e534 <__ssputs_r+0x6c>
 801e4e6:	6965      	ldr	r5, [r4, #20]
 801e4e8:	6909      	ldr	r1, [r1, #16]
 801e4ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e4ee:	eba3 0901 	sub.w	r9, r3, r1
 801e4f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e4f6:	1c7b      	adds	r3, r7, #1
 801e4f8:	444b      	add	r3, r9
 801e4fa:	106d      	asrs	r5, r5, #1
 801e4fc:	429d      	cmp	r5, r3
 801e4fe:	bf38      	it	cc
 801e500:	461d      	movcc	r5, r3
 801e502:	0553      	lsls	r3, r2, #21
 801e504:	d527      	bpl.n	801e556 <__ssputs_r+0x8e>
 801e506:	4629      	mov	r1, r5
 801e508:	f7ff f982 	bl	801d810 <_malloc_r>
 801e50c:	4606      	mov	r6, r0
 801e50e:	b360      	cbz	r0, 801e56a <__ssputs_r+0xa2>
 801e510:	6921      	ldr	r1, [r4, #16]
 801e512:	464a      	mov	r2, r9
 801e514:	f7ff ff4d 	bl	801e3b2 <memcpy>
 801e518:	89a3      	ldrh	r3, [r4, #12]
 801e51a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e522:	81a3      	strh	r3, [r4, #12]
 801e524:	6126      	str	r6, [r4, #16]
 801e526:	6165      	str	r5, [r4, #20]
 801e528:	444e      	add	r6, r9
 801e52a:	eba5 0509 	sub.w	r5, r5, r9
 801e52e:	6026      	str	r6, [r4, #0]
 801e530:	60a5      	str	r5, [r4, #8]
 801e532:	463e      	mov	r6, r7
 801e534:	42be      	cmp	r6, r7
 801e536:	d900      	bls.n	801e53a <__ssputs_r+0x72>
 801e538:	463e      	mov	r6, r7
 801e53a:	6820      	ldr	r0, [r4, #0]
 801e53c:	4632      	mov	r2, r6
 801e53e:	4641      	mov	r1, r8
 801e540:	f7ff fdec 	bl	801e11c <memmove>
 801e544:	68a3      	ldr	r3, [r4, #8]
 801e546:	1b9b      	subs	r3, r3, r6
 801e548:	60a3      	str	r3, [r4, #8]
 801e54a:	6823      	ldr	r3, [r4, #0]
 801e54c:	4433      	add	r3, r6
 801e54e:	6023      	str	r3, [r4, #0]
 801e550:	2000      	movs	r0, #0
 801e552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e556:	462a      	mov	r2, r5
 801e558:	f7ff fa5a 	bl	801da10 <_realloc_r>
 801e55c:	4606      	mov	r6, r0
 801e55e:	2800      	cmp	r0, #0
 801e560:	d1e0      	bne.n	801e524 <__ssputs_r+0x5c>
 801e562:	6921      	ldr	r1, [r4, #16]
 801e564:	4650      	mov	r0, sl
 801e566:	f7ff ff5d 	bl	801e424 <_free_r>
 801e56a:	230c      	movs	r3, #12
 801e56c:	f8ca 3000 	str.w	r3, [sl]
 801e570:	89a3      	ldrh	r3, [r4, #12]
 801e572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e576:	81a3      	strh	r3, [r4, #12]
 801e578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e57c:	e7e9      	b.n	801e552 <__ssputs_r+0x8a>
	...

0801e580 <_svfiprintf_r>:
 801e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e584:	4698      	mov	r8, r3
 801e586:	898b      	ldrh	r3, [r1, #12]
 801e588:	061b      	lsls	r3, r3, #24
 801e58a:	b09d      	sub	sp, #116	@ 0x74
 801e58c:	4607      	mov	r7, r0
 801e58e:	460d      	mov	r5, r1
 801e590:	4614      	mov	r4, r2
 801e592:	d510      	bpl.n	801e5b6 <_svfiprintf_r+0x36>
 801e594:	690b      	ldr	r3, [r1, #16]
 801e596:	b973      	cbnz	r3, 801e5b6 <_svfiprintf_r+0x36>
 801e598:	2140      	movs	r1, #64	@ 0x40
 801e59a:	f7ff f939 	bl	801d810 <_malloc_r>
 801e59e:	6028      	str	r0, [r5, #0]
 801e5a0:	6128      	str	r0, [r5, #16]
 801e5a2:	b930      	cbnz	r0, 801e5b2 <_svfiprintf_r+0x32>
 801e5a4:	230c      	movs	r3, #12
 801e5a6:	603b      	str	r3, [r7, #0]
 801e5a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e5ac:	b01d      	add	sp, #116	@ 0x74
 801e5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5b2:	2340      	movs	r3, #64	@ 0x40
 801e5b4:	616b      	str	r3, [r5, #20]
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e5ba:	2320      	movs	r3, #32
 801e5bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 801e5c4:	2330      	movs	r3, #48	@ 0x30
 801e5c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e764 <_svfiprintf_r+0x1e4>
 801e5ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e5ce:	f04f 0901 	mov.w	r9, #1
 801e5d2:	4623      	mov	r3, r4
 801e5d4:	469a      	mov	sl, r3
 801e5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e5da:	b10a      	cbz	r2, 801e5e0 <_svfiprintf_r+0x60>
 801e5dc:	2a25      	cmp	r2, #37	@ 0x25
 801e5de:	d1f9      	bne.n	801e5d4 <_svfiprintf_r+0x54>
 801e5e0:	ebba 0b04 	subs.w	fp, sl, r4
 801e5e4:	d00b      	beq.n	801e5fe <_svfiprintf_r+0x7e>
 801e5e6:	465b      	mov	r3, fp
 801e5e8:	4622      	mov	r2, r4
 801e5ea:	4629      	mov	r1, r5
 801e5ec:	4638      	mov	r0, r7
 801e5ee:	f7ff ff6b 	bl	801e4c8 <__ssputs_r>
 801e5f2:	3001      	adds	r0, #1
 801e5f4:	f000 80a7 	beq.w	801e746 <_svfiprintf_r+0x1c6>
 801e5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5fa:	445a      	add	r2, fp
 801e5fc:	9209      	str	r2, [sp, #36]	@ 0x24
 801e5fe:	f89a 3000 	ldrb.w	r3, [sl]
 801e602:	2b00      	cmp	r3, #0
 801e604:	f000 809f 	beq.w	801e746 <_svfiprintf_r+0x1c6>
 801e608:	2300      	movs	r3, #0
 801e60a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e612:	f10a 0a01 	add.w	sl, sl, #1
 801e616:	9304      	str	r3, [sp, #16]
 801e618:	9307      	str	r3, [sp, #28]
 801e61a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e61e:	931a      	str	r3, [sp, #104]	@ 0x68
 801e620:	4654      	mov	r4, sl
 801e622:	2205      	movs	r2, #5
 801e624:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e628:	484e      	ldr	r0, [pc, #312]	@ (801e764 <_svfiprintf_r+0x1e4>)
 801e62a:	f7e1 fe09 	bl	8000240 <memchr>
 801e62e:	9a04      	ldr	r2, [sp, #16]
 801e630:	b9d8      	cbnz	r0, 801e66a <_svfiprintf_r+0xea>
 801e632:	06d0      	lsls	r0, r2, #27
 801e634:	bf44      	itt	mi
 801e636:	2320      	movmi	r3, #32
 801e638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e63c:	0711      	lsls	r1, r2, #28
 801e63e:	bf44      	itt	mi
 801e640:	232b      	movmi	r3, #43	@ 0x2b
 801e642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e646:	f89a 3000 	ldrb.w	r3, [sl]
 801e64a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e64c:	d015      	beq.n	801e67a <_svfiprintf_r+0xfa>
 801e64e:	9a07      	ldr	r2, [sp, #28]
 801e650:	4654      	mov	r4, sl
 801e652:	2000      	movs	r0, #0
 801e654:	f04f 0c0a 	mov.w	ip, #10
 801e658:	4621      	mov	r1, r4
 801e65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e65e:	3b30      	subs	r3, #48	@ 0x30
 801e660:	2b09      	cmp	r3, #9
 801e662:	d94b      	bls.n	801e6fc <_svfiprintf_r+0x17c>
 801e664:	b1b0      	cbz	r0, 801e694 <_svfiprintf_r+0x114>
 801e666:	9207      	str	r2, [sp, #28]
 801e668:	e014      	b.n	801e694 <_svfiprintf_r+0x114>
 801e66a:	eba0 0308 	sub.w	r3, r0, r8
 801e66e:	fa09 f303 	lsl.w	r3, r9, r3
 801e672:	4313      	orrs	r3, r2
 801e674:	9304      	str	r3, [sp, #16]
 801e676:	46a2      	mov	sl, r4
 801e678:	e7d2      	b.n	801e620 <_svfiprintf_r+0xa0>
 801e67a:	9b03      	ldr	r3, [sp, #12]
 801e67c:	1d19      	adds	r1, r3, #4
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	9103      	str	r1, [sp, #12]
 801e682:	2b00      	cmp	r3, #0
 801e684:	bfbb      	ittet	lt
 801e686:	425b      	neglt	r3, r3
 801e688:	f042 0202 	orrlt.w	r2, r2, #2
 801e68c:	9307      	strge	r3, [sp, #28]
 801e68e:	9307      	strlt	r3, [sp, #28]
 801e690:	bfb8      	it	lt
 801e692:	9204      	strlt	r2, [sp, #16]
 801e694:	7823      	ldrb	r3, [r4, #0]
 801e696:	2b2e      	cmp	r3, #46	@ 0x2e
 801e698:	d10a      	bne.n	801e6b0 <_svfiprintf_r+0x130>
 801e69a:	7863      	ldrb	r3, [r4, #1]
 801e69c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e69e:	d132      	bne.n	801e706 <_svfiprintf_r+0x186>
 801e6a0:	9b03      	ldr	r3, [sp, #12]
 801e6a2:	1d1a      	adds	r2, r3, #4
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	9203      	str	r2, [sp, #12]
 801e6a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e6ac:	3402      	adds	r4, #2
 801e6ae:	9305      	str	r3, [sp, #20]
 801e6b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e774 <_svfiprintf_r+0x1f4>
 801e6b4:	7821      	ldrb	r1, [r4, #0]
 801e6b6:	2203      	movs	r2, #3
 801e6b8:	4650      	mov	r0, sl
 801e6ba:	f7e1 fdc1 	bl	8000240 <memchr>
 801e6be:	b138      	cbz	r0, 801e6d0 <_svfiprintf_r+0x150>
 801e6c0:	9b04      	ldr	r3, [sp, #16]
 801e6c2:	eba0 000a 	sub.w	r0, r0, sl
 801e6c6:	2240      	movs	r2, #64	@ 0x40
 801e6c8:	4082      	lsls	r2, r0
 801e6ca:	4313      	orrs	r3, r2
 801e6cc:	3401      	adds	r4, #1
 801e6ce:	9304      	str	r3, [sp, #16]
 801e6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6d4:	4824      	ldr	r0, [pc, #144]	@ (801e768 <_svfiprintf_r+0x1e8>)
 801e6d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e6da:	2206      	movs	r2, #6
 801e6dc:	f7e1 fdb0 	bl	8000240 <memchr>
 801e6e0:	2800      	cmp	r0, #0
 801e6e2:	d036      	beq.n	801e752 <_svfiprintf_r+0x1d2>
 801e6e4:	4b21      	ldr	r3, [pc, #132]	@ (801e76c <_svfiprintf_r+0x1ec>)
 801e6e6:	bb1b      	cbnz	r3, 801e730 <_svfiprintf_r+0x1b0>
 801e6e8:	9b03      	ldr	r3, [sp, #12]
 801e6ea:	3307      	adds	r3, #7
 801e6ec:	f023 0307 	bic.w	r3, r3, #7
 801e6f0:	3308      	adds	r3, #8
 801e6f2:	9303      	str	r3, [sp, #12]
 801e6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6f6:	4433      	add	r3, r6
 801e6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e6fa:	e76a      	b.n	801e5d2 <_svfiprintf_r+0x52>
 801e6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801e700:	460c      	mov	r4, r1
 801e702:	2001      	movs	r0, #1
 801e704:	e7a8      	b.n	801e658 <_svfiprintf_r+0xd8>
 801e706:	2300      	movs	r3, #0
 801e708:	3401      	adds	r4, #1
 801e70a:	9305      	str	r3, [sp, #20]
 801e70c:	4619      	mov	r1, r3
 801e70e:	f04f 0c0a 	mov.w	ip, #10
 801e712:	4620      	mov	r0, r4
 801e714:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e718:	3a30      	subs	r2, #48	@ 0x30
 801e71a:	2a09      	cmp	r2, #9
 801e71c:	d903      	bls.n	801e726 <_svfiprintf_r+0x1a6>
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d0c6      	beq.n	801e6b0 <_svfiprintf_r+0x130>
 801e722:	9105      	str	r1, [sp, #20]
 801e724:	e7c4      	b.n	801e6b0 <_svfiprintf_r+0x130>
 801e726:	fb0c 2101 	mla	r1, ip, r1, r2
 801e72a:	4604      	mov	r4, r0
 801e72c:	2301      	movs	r3, #1
 801e72e:	e7f0      	b.n	801e712 <_svfiprintf_r+0x192>
 801e730:	ab03      	add	r3, sp, #12
 801e732:	9300      	str	r3, [sp, #0]
 801e734:	462a      	mov	r2, r5
 801e736:	4b0e      	ldr	r3, [pc, #56]	@ (801e770 <_svfiprintf_r+0x1f0>)
 801e738:	a904      	add	r1, sp, #16
 801e73a:	4638      	mov	r0, r7
 801e73c:	f3af 8000 	nop.w
 801e740:	1c42      	adds	r2, r0, #1
 801e742:	4606      	mov	r6, r0
 801e744:	d1d6      	bne.n	801e6f4 <_svfiprintf_r+0x174>
 801e746:	89ab      	ldrh	r3, [r5, #12]
 801e748:	065b      	lsls	r3, r3, #25
 801e74a:	f53f af2d 	bmi.w	801e5a8 <_svfiprintf_r+0x28>
 801e74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e750:	e72c      	b.n	801e5ac <_svfiprintf_r+0x2c>
 801e752:	ab03      	add	r3, sp, #12
 801e754:	9300      	str	r3, [sp, #0]
 801e756:	462a      	mov	r2, r5
 801e758:	4b05      	ldr	r3, [pc, #20]	@ (801e770 <_svfiprintf_r+0x1f0>)
 801e75a:	a904      	add	r1, sp, #16
 801e75c:	4638      	mov	r0, r7
 801e75e:	f000 f9bb 	bl	801ead8 <_printf_i>
 801e762:	e7ed      	b.n	801e740 <_svfiprintf_r+0x1c0>
 801e764:	08021cd6 	.word	0x08021cd6
 801e768:	08021ce0 	.word	0x08021ce0
 801e76c:	00000000 	.word	0x00000000
 801e770:	0801e4c9 	.word	0x0801e4c9
 801e774:	08021cdc 	.word	0x08021cdc

0801e778 <__sfputc_r>:
 801e778:	6893      	ldr	r3, [r2, #8]
 801e77a:	3b01      	subs	r3, #1
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	b410      	push	{r4}
 801e780:	6093      	str	r3, [r2, #8]
 801e782:	da08      	bge.n	801e796 <__sfputc_r+0x1e>
 801e784:	6994      	ldr	r4, [r2, #24]
 801e786:	42a3      	cmp	r3, r4
 801e788:	db01      	blt.n	801e78e <__sfputc_r+0x16>
 801e78a:	290a      	cmp	r1, #10
 801e78c:	d103      	bne.n	801e796 <__sfputc_r+0x1e>
 801e78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e792:	f7ff bc1f 	b.w	801dfd4 <__swbuf_r>
 801e796:	6813      	ldr	r3, [r2, #0]
 801e798:	1c58      	adds	r0, r3, #1
 801e79a:	6010      	str	r0, [r2, #0]
 801e79c:	7019      	strb	r1, [r3, #0]
 801e79e:	4608      	mov	r0, r1
 801e7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7a4:	4770      	bx	lr

0801e7a6 <__sfputs_r>:
 801e7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7a8:	4606      	mov	r6, r0
 801e7aa:	460f      	mov	r7, r1
 801e7ac:	4614      	mov	r4, r2
 801e7ae:	18d5      	adds	r5, r2, r3
 801e7b0:	42ac      	cmp	r4, r5
 801e7b2:	d101      	bne.n	801e7b8 <__sfputs_r+0x12>
 801e7b4:	2000      	movs	r0, #0
 801e7b6:	e007      	b.n	801e7c8 <__sfputs_r+0x22>
 801e7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7bc:	463a      	mov	r2, r7
 801e7be:	4630      	mov	r0, r6
 801e7c0:	f7ff ffda 	bl	801e778 <__sfputc_r>
 801e7c4:	1c43      	adds	r3, r0, #1
 801e7c6:	d1f3      	bne.n	801e7b0 <__sfputs_r+0xa>
 801e7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e7cc <_vfiprintf_r>:
 801e7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7d0:	460d      	mov	r5, r1
 801e7d2:	b09d      	sub	sp, #116	@ 0x74
 801e7d4:	4614      	mov	r4, r2
 801e7d6:	4698      	mov	r8, r3
 801e7d8:	4606      	mov	r6, r0
 801e7da:	b118      	cbz	r0, 801e7e4 <_vfiprintf_r+0x18>
 801e7dc:	6a03      	ldr	r3, [r0, #32]
 801e7de:	b90b      	cbnz	r3, 801e7e4 <_vfiprintf_r+0x18>
 801e7e0:	f7ff fa48 	bl	801dc74 <__sinit>
 801e7e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e7e6:	07d9      	lsls	r1, r3, #31
 801e7e8:	d405      	bmi.n	801e7f6 <_vfiprintf_r+0x2a>
 801e7ea:	89ab      	ldrh	r3, [r5, #12]
 801e7ec:	059a      	lsls	r2, r3, #22
 801e7ee:	d402      	bmi.n	801e7f6 <_vfiprintf_r+0x2a>
 801e7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e7f2:	f7ff fdd4 	bl	801e39e <__retarget_lock_acquire_recursive>
 801e7f6:	89ab      	ldrh	r3, [r5, #12]
 801e7f8:	071b      	lsls	r3, r3, #28
 801e7fa:	d501      	bpl.n	801e800 <_vfiprintf_r+0x34>
 801e7fc:	692b      	ldr	r3, [r5, #16]
 801e7fe:	b99b      	cbnz	r3, 801e828 <_vfiprintf_r+0x5c>
 801e800:	4629      	mov	r1, r5
 801e802:	4630      	mov	r0, r6
 801e804:	f7ff fc24 	bl	801e050 <__swsetup_r>
 801e808:	b170      	cbz	r0, 801e828 <_vfiprintf_r+0x5c>
 801e80a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e80c:	07dc      	lsls	r4, r3, #31
 801e80e:	d504      	bpl.n	801e81a <_vfiprintf_r+0x4e>
 801e810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e814:	b01d      	add	sp, #116	@ 0x74
 801e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e81a:	89ab      	ldrh	r3, [r5, #12]
 801e81c:	0598      	lsls	r0, r3, #22
 801e81e:	d4f7      	bmi.n	801e810 <_vfiprintf_r+0x44>
 801e820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e822:	f7ff fdbd 	bl	801e3a0 <__retarget_lock_release_recursive>
 801e826:	e7f3      	b.n	801e810 <_vfiprintf_r+0x44>
 801e828:	2300      	movs	r3, #0
 801e82a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e82c:	2320      	movs	r3, #32
 801e82e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e832:	f8cd 800c 	str.w	r8, [sp, #12]
 801e836:	2330      	movs	r3, #48	@ 0x30
 801e838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e9e8 <_vfiprintf_r+0x21c>
 801e83c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e840:	f04f 0901 	mov.w	r9, #1
 801e844:	4623      	mov	r3, r4
 801e846:	469a      	mov	sl, r3
 801e848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e84c:	b10a      	cbz	r2, 801e852 <_vfiprintf_r+0x86>
 801e84e:	2a25      	cmp	r2, #37	@ 0x25
 801e850:	d1f9      	bne.n	801e846 <_vfiprintf_r+0x7a>
 801e852:	ebba 0b04 	subs.w	fp, sl, r4
 801e856:	d00b      	beq.n	801e870 <_vfiprintf_r+0xa4>
 801e858:	465b      	mov	r3, fp
 801e85a:	4622      	mov	r2, r4
 801e85c:	4629      	mov	r1, r5
 801e85e:	4630      	mov	r0, r6
 801e860:	f7ff ffa1 	bl	801e7a6 <__sfputs_r>
 801e864:	3001      	adds	r0, #1
 801e866:	f000 80a7 	beq.w	801e9b8 <_vfiprintf_r+0x1ec>
 801e86a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e86c:	445a      	add	r2, fp
 801e86e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e870:	f89a 3000 	ldrb.w	r3, [sl]
 801e874:	2b00      	cmp	r3, #0
 801e876:	f000 809f 	beq.w	801e9b8 <_vfiprintf_r+0x1ec>
 801e87a:	2300      	movs	r3, #0
 801e87c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e884:	f10a 0a01 	add.w	sl, sl, #1
 801e888:	9304      	str	r3, [sp, #16]
 801e88a:	9307      	str	r3, [sp, #28]
 801e88c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e890:	931a      	str	r3, [sp, #104]	@ 0x68
 801e892:	4654      	mov	r4, sl
 801e894:	2205      	movs	r2, #5
 801e896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e89a:	4853      	ldr	r0, [pc, #332]	@ (801e9e8 <_vfiprintf_r+0x21c>)
 801e89c:	f7e1 fcd0 	bl	8000240 <memchr>
 801e8a0:	9a04      	ldr	r2, [sp, #16]
 801e8a2:	b9d8      	cbnz	r0, 801e8dc <_vfiprintf_r+0x110>
 801e8a4:	06d1      	lsls	r1, r2, #27
 801e8a6:	bf44      	itt	mi
 801e8a8:	2320      	movmi	r3, #32
 801e8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8ae:	0713      	lsls	r3, r2, #28
 801e8b0:	bf44      	itt	mi
 801e8b2:	232b      	movmi	r3, #43	@ 0x2b
 801e8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8b8:	f89a 3000 	ldrb.w	r3, [sl]
 801e8bc:	2b2a      	cmp	r3, #42	@ 0x2a
 801e8be:	d015      	beq.n	801e8ec <_vfiprintf_r+0x120>
 801e8c0:	9a07      	ldr	r2, [sp, #28]
 801e8c2:	4654      	mov	r4, sl
 801e8c4:	2000      	movs	r0, #0
 801e8c6:	f04f 0c0a 	mov.w	ip, #10
 801e8ca:	4621      	mov	r1, r4
 801e8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e8d0:	3b30      	subs	r3, #48	@ 0x30
 801e8d2:	2b09      	cmp	r3, #9
 801e8d4:	d94b      	bls.n	801e96e <_vfiprintf_r+0x1a2>
 801e8d6:	b1b0      	cbz	r0, 801e906 <_vfiprintf_r+0x13a>
 801e8d8:	9207      	str	r2, [sp, #28]
 801e8da:	e014      	b.n	801e906 <_vfiprintf_r+0x13a>
 801e8dc:	eba0 0308 	sub.w	r3, r0, r8
 801e8e0:	fa09 f303 	lsl.w	r3, r9, r3
 801e8e4:	4313      	orrs	r3, r2
 801e8e6:	9304      	str	r3, [sp, #16]
 801e8e8:	46a2      	mov	sl, r4
 801e8ea:	e7d2      	b.n	801e892 <_vfiprintf_r+0xc6>
 801e8ec:	9b03      	ldr	r3, [sp, #12]
 801e8ee:	1d19      	adds	r1, r3, #4
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	9103      	str	r1, [sp, #12]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	bfbb      	ittet	lt
 801e8f8:	425b      	neglt	r3, r3
 801e8fa:	f042 0202 	orrlt.w	r2, r2, #2
 801e8fe:	9307      	strge	r3, [sp, #28]
 801e900:	9307      	strlt	r3, [sp, #28]
 801e902:	bfb8      	it	lt
 801e904:	9204      	strlt	r2, [sp, #16]
 801e906:	7823      	ldrb	r3, [r4, #0]
 801e908:	2b2e      	cmp	r3, #46	@ 0x2e
 801e90a:	d10a      	bne.n	801e922 <_vfiprintf_r+0x156>
 801e90c:	7863      	ldrb	r3, [r4, #1]
 801e90e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e910:	d132      	bne.n	801e978 <_vfiprintf_r+0x1ac>
 801e912:	9b03      	ldr	r3, [sp, #12]
 801e914:	1d1a      	adds	r2, r3, #4
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	9203      	str	r2, [sp, #12]
 801e91a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e91e:	3402      	adds	r4, #2
 801e920:	9305      	str	r3, [sp, #20]
 801e922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e9f8 <_vfiprintf_r+0x22c>
 801e926:	7821      	ldrb	r1, [r4, #0]
 801e928:	2203      	movs	r2, #3
 801e92a:	4650      	mov	r0, sl
 801e92c:	f7e1 fc88 	bl	8000240 <memchr>
 801e930:	b138      	cbz	r0, 801e942 <_vfiprintf_r+0x176>
 801e932:	9b04      	ldr	r3, [sp, #16]
 801e934:	eba0 000a 	sub.w	r0, r0, sl
 801e938:	2240      	movs	r2, #64	@ 0x40
 801e93a:	4082      	lsls	r2, r0
 801e93c:	4313      	orrs	r3, r2
 801e93e:	3401      	adds	r4, #1
 801e940:	9304      	str	r3, [sp, #16]
 801e942:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e946:	4829      	ldr	r0, [pc, #164]	@ (801e9ec <_vfiprintf_r+0x220>)
 801e948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e94c:	2206      	movs	r2, #6
 801e94e:	f7e1 fc77 	bl	8000240 <memchr>
 801e952:	2800      	cmp	r0, #0
 801e954:	d03f      	beq.n	801e9d6 <_vfiprintf_r+0x20a>
 801e956:	4b26      	ldr	r3, [pc, #152]	@ (801e9f0 <_vfiprintf_r+0x224>)
 801e958:	bb1b      	cbnz	r3, 801e9a2 <_vfiprintf_r+0x1d6>
 801e95a:	9b03      	ldr	r3, [sp, #12]
 801e95c:	3307      	adds	r3, #7
 801e95e:	f023 0307 	bic.w	r3, r3, #7
 801e962:	3308      	adds	r3, #8
 801e964:	9303      	str	r3, [sp, #12]
 801e966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e968:	443b      	add	r3, r7
 801e96a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e96c:	e76a      	b.n	801e844 <_vfiprintf_r+0x78>
 801e96e:	fb0c 3202 	mla	r2, ip, r2, r3
 801e972:	460c      	mov	r4, r1
 801e974:	2001      	movs	r0, #1
 801e976:	e7a8      	b.n	801e8ca <_vfiprintf_r+0xfe>
 801e978:	2300      	movs	r3, #0
 801e97a:	3401      	adds	r4, #1
 801e97c:	9305      	str	r3, [sp, #20]
 801e97e:	4619      	mov	r1, r3
 801e980:	f04f 0c0a 	mov.w	ip, #10
 801e984:	4620      	mov	r0, r4
 801e986:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e98a:	3a30      	subs	r2, #48	@ 0x30
 801e98c:	2a09      	cmp	r2, #9
 801e98e:	d903      	bls.n	801e998 <_vfiprintf_r+0x1cc>
 801e990:	2b00      	cmp	r3, #0
 801e992:	d0c6      	beq.n	801e922 <_vfiprintf_r+0x156>
 801e994:	9105      	str	r1, [sp, #20]
 801e996:	e7c4      	b.n	801e922 <_vfiprintf_r+0x156>
 801e998:	fb0c 2101 	mla	r1, ip, r1, r2
 801e99c:	4604      	mov	r4, r0
 801e99e:	2301      	movs	r3, #1
 801e9a0:	e7f0      	b.n	801e984 <_vfiprintf_r+0x1b8>
 801e9a2:	ab03      	add	r3, sp, #12
 801e9a4:	9300      	str	r3, [sp, #0]
 801e9a6:	462a      	mov	r2, r5
 801e9a8:	4b12      	ldr	r3, [pc, #72]	@ (801e9f4 <_vfiprintf_r+0x228>)
 801e9aa:	a904      	add	r1, sp, #16
 801e9ac:	4630      	mov	r0, r6
 801e9ae:	f3af 8000 	nop.w
 801e9b2:	4607      	mov	r7, r0
 801e9b4:	1c78      	adds	r0, r7, #1
 801e9b6:	d1d6      	bne.n	801e966 <_vfiprintf_r+0x19a>
 801e9b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e9ba:	07d9      	lsls	r1, r3, #31
 801e9bc:	d405      	bmi.n	801e9ca <_vfiprintf_r+0x1fe>
 801e9be:	89ab      	ldrh	r3, [r5, #12]
 801e9c0:	059a      	lsls	r2, r3, #22
 801e9c2:	d402      	bmi.n	801e9ca <_vfiprintf_r+0x1fe>
 801e9c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e9c6:	f7ff fceb 	bl	801e3a0 <__retarget_lock_release_recursive>
 801e9ca:	89ab      	ldrh	r3, [r5, #12]
 801e9cc:	065b      	lsls	r3, r3, #25
 801e9ce:	f53f af1f 	bmi.w	801e810 <_vfiprintf_r+0x44>
 801e9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e9d4:	e71e      	b.n	801e814 <_vfiprintf_r+0x48>
 801e9d6:	ab03      	add	r3, sp, #12
 801e9d8:	9300      	str	r3, [sp, #0]
 801e9da:	462a      	mov	r2, r5
 801e9dc:	4b05      	ldr	r3, [pc, #20]	@ (801e9f4 <_vfiprintf_r+0x228>)
 801e9de:	a904      	add	r1, sp, #16
 801e9e0:	4630      	mov	r0, r6
 801e9e2:	f000 f879 	bl	801ead8 <_printf_i>
 801e9e6:	e7e4      	b.n	801e9b2 <_vfiprintf_r+0x1e6>
 801e9e8:	08021cd6 	.word	0x08021cd6
 801e9ec:	08021ce0 	.word	0x08021ce0
 801e9f0:	00000000 	.word	0x00000000
 801e9f4:	0801e7a7 	.word	0x0801e7a7
 801e9f8:	08021cdc 	.word	0x08021cdc

0801e9fc <_printf_common>:
 801e9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea00:	4616      	mov	r6, r2
 801ea02:	4698      	mov	r8, r3
 801ea04:	688a      	ldr	r2, [r1, #8]
 801ea06:	690b      	ldr	r3, [r1, #16]
 801ea08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ea0c:	4293      	cmp	r3, r2
 801ea0e:	bfb8      	it	lt
 801ea10:	4613      	movlt	r3, r2
 801ea12:	6033      	str	r3, [r6, #0]
 801ea14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ea18:	4607      	mov	r7, r0
 801ea1a:	460c      	mov	r4, r1
 801ea1c:	b10a      	cbz	r2, 801ea22 <_printf_common+0x26>
 801ea1e:	3301      	adds	r3, #1
 801ea20:	6033      	str	r3, [r6, #0]
 801ea22:	6823      	ldr	r3, [r4, #0]
 801ea24:	0699      	lsls	r1, r3, #26
 801ea26:	bf42      	ittt	mi
 801ea28:	6833      	ldrmi	r3, [r6, #0]
 801ea2a:	3302      	addmi	r3, #2
 801ea2c:	6033      	strmi	r3, [r6, #0]
 801ea2e:	6825      	ldr	r5, [r4, #0]
 801ea30:	f015 0506 	ands.w	r5, r5, #6
 801ea34:	d106      	bne.n	801ea44 <_printf_common+0x48>
 801ea36:	f104 0a19 	add.w	sl, r4, #25
 801ea3a:	68e3      	ldr	r3, [r4, #12]
 801ea3c:	6832      	ldr	r2, [r6, #0]
 801ea3e:	1a9b      	subs	r3, r3, r2
 801ea40:	42ab      	cmp	r3, r5
 801ea42:	dc26      	bgt.n	801ea92 <_printf_common+0x96>
 801ea44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ea48:	6822      	ldr	r2, [r4, #0]
 801ea4a:	3b00      	subs	r3, #0
 801ea4c:	bf18      	it	ne
 801ea4e:	2301      	movne	r3, #1
 801ea50:	0692      	lsls	r2, r2, #26
 801ea52:	d42b      	bmi.n	801eaac <_printf_common+0xb0>
 801ea54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ea58:	4641      	mov	r1, r8
 801ea5a:	4638      	mov	r0, r7
 801ea5c:	47c8      	blx	r9
 801ea5e:	3001      	adds	r0, #1
 801ea60:	d01e      	beq.n	801eaa0 <_printf_common+0xa4>
 801ea62:	6823      	ldr	r3, [r4, #0]
 801ea64:	6922      	ldr	r2, [r4, #16]
 801ea66:	f003 0306 	and.w	r3, r3, #6
 801ea6a:	2b04      	cmp	r3, #4
 801ea6c:	bf02      	ittt	eq
 801ea6e:	68e5      	ldreq	r5, [r4, #12]
 801ea70:	6833      	ldreq	r3, [r6, #0]
 801ea72:	1aed      	subeq	r5, r5, r3
 801ea74:	68a3      	ldr	r3, [r4, #8]
 801ea76:	bf0c      	ite	eq
 801ea78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ea7c:	2500      	movne	r5, #0
 801ea7e:	4293      	cmp	r3, r2
 801ea80:	bfc4      	itt	gt
 801ea82:	1a9b      	subgt	r3, r3, r2
 801ea84:	18ed      	addgt	r5, r5, r3
 801ea86:	2600      	movs	r6, #0
 801ea88:	341a      	adds	r4, #26
 801ea8a:	42b5      	cmp	r5, r6
 801ea8c:	d11a      	bne.n	801eac4 <_printf_common+0xc8>
 801ea8e:	2000      	movs	r0, #0
 801ea90:	e008      	b.n	801eaa4 <_printf_common+0xa8>
 801ea92:	2301      	movs	r3, #1
 801ea94:	4652      	mov	r2, sl
 801ea96:	4641      	mov	r1, r8
 801ea98:	4638      	mov	r0, r7
 801ea9a:	47c8      	blx	r9
 801ea9c:	3001      	adds	r0, #1
 801ea9e:	d103      	bne.n	801eaa8 <_printf_common+0xac>
 801eaa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eaa8:	3501      	adds	r5, #1
 801eaaa:	e7c6      	b.n	801ea3a <_printf_common+0x3e>
 801eaac:	18e1      	adds	r1, r4, r3
 801eaae:	1c5a      	adds	r2, r3, #1
 801eab0:	2030      	movs	r0, #48	@ 0x30
 801eab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801eab6:	4422      	add	r2, r4
 801eab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801eabc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801eac0:	3302      	adds	r3, #2
 801eac2:	e7c7      	b.n	801ea54 <_printf_common+0x58>
 801eac4:	2301      	movs	r3, #1
 801eac6:	4622      	mov	r2, r4
 801eac8:	4641      	mov	r1, r8
 801eaca:	4638      	mov	r0, r7
 801eacc:	47c8      	blx	r9
 801eace:	3001      	adds	r0, #1
 801ead0:	d0e6      	beq.n	801eaa0 <_printf_common+0xa4>
 801ead2:	3601      	adds	r6, #1
 801ead4:	e7d9      	b.n	801ea8a <_printf_common+0x8e>
	...

0801ead8 <_printf_i>:
 801ead8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eadc:	7e0f      	ldrb	r7, [r1, #24]
 801eade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801eae0:	2f78      	cmp	r7, #120	@ 0x78
 801eae2:	4691      	mov	r9, r2
 801eae4:	4680      	mov	r8, r0
 801eae6:	460c      	mov	r4, r1
 801eae8:	469a      	mov	sl, r3
 801eaea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801eaee:	d807      	bhi.n	801eb00 <_printf_i+0x28>
 801eaf0:	2f62      	cmp	r7, #98	@ 0x62
 801eaf2:	d80a      	bhi.n	801eb0a <_printf_i+0x32>
 801eaf4:	2f00      	cmp	r7, #0
 801eaf6:	f000 80d2 	beq.w	801ec9e <_printf_i+0x1c6>
 801eafa:	2f58      	cmp	r7, #88	@ 0x58
 801eafc:	f000 80b9 	beq.w	801ec72 <_printf_i+0x19a>
 801eb00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eb04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801eb08:	e03a      	b.n	801eb80 <_printf_i+0xa8>
 801eb0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801eb0e:	2b15      	cmp	r3, #21
 801eb10:	d8f6      	bhi.n	801eb00 <_printf_i+0x28>
 801eb12:	a101      	add	r1, pc, #4	@ (adr r1, 801eb18 <_printf_i+0x40>)
 801eb14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801eb18:	0801eb71 	.word	0x0801eb71
 801eb1c:	0801eb85 	.word	0x0801eb85
 801eb20:	0801eb01 	.word	0x0801eb01
 801eb24:	0801eb01 	.word	0x0801eb01
 801eb28:	0801eb01 	.word	0x0801eb01
 801eb2c:	0801eb01 	.word	0x0801eb01
 801eb30:	0801eb85 	.word	0x0801eb85
 801eb34:	0801eb01 	.word	0x0801eb01
 801eb38:	0801eb01 	.word	0x0801eb01
 801eb3c:	0801eb01 	.word	0x0801eb01
 801eb40:	0801eb01 	.word	0x0801eb01
 801eb44:	0801ec85 	.word	0x0801ec85
 801eb48:	0801ebaf 	.word	0x0801ebaf
 801eb4c:	0801ec3f 	.word	0x0801ec3f
 801eb50:	0801eb01 	.word	0x0801eb01
 801eb54:	0801eb01 	.word	0x0801eb01
 801eb58:	0801eca7 	.word	0x0801eca7
 801eb5c:	0801eb01 	.word	0x0801eb01
 801eb60:	0801ebaf 	.word	0x0801ebaf
 801eb64:	0801eb01 	.word	0x0801eb01
 801eb68:	0801eb01 	.word	0x0801eb01
 801eb6c:	0801ec47 	.word	0x0801ec47
 801eb70:	6833      	ldr	r3, [r6, #0]
 801eb72:	1d1a      	adds	r2, r3, #4
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	6032      	str	r2, [r6, #0]
 801eb78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eb7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801eb80:	2301      	movs	r3, #1
 801eb82:	e09d      	b.n	801ecc0 <_printf_i+0x1e8>
 801eb84:	6833      	ldr	r3, [r6, #0]
 801eb86:	6820      	ldr	r0, [r4, #0]
 801eb88:	1d19      	adds	r1, r3, #4
 801eb8a:	6031      	str	r1, [r6, #0]
 801eb8c:	0606      	lsls	r6, r0, #24
 801eb8e:	d501      	bpl.n	801eb94 <_printf_i+0xbc>
 801eb90:	681d      	ldr	r5, [r3, #0]
 801eb92:	e003      	b.n	801eb9c <_printf_i+0xc4>
 801eb94:	0645      	lsls	r5, r0, #25
 801eb96:	d5fb      	bpl.n	801eb90 <_printf_i+0xb8>
 801eb98:	f9b3 5000 	ldrsh.w	r5, [r3]
 801eb9c:	2d00      	cmp	r5, #0
 801eb9e:	da03      	bge.n	801eba8 <_printf_i+0xd0>
 801eba0:	232d      	movs	r3, #45	@ 0x2d
 801eba2:	426d      	negs	r5, r5
 801eba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eba8:	4859      	ldr	r0, [pc, #356]	@ (801ed10 <_printf_i+0x238>)
 801ebaa:	230a      	movs	r3, #10
 801ebac:	e011      	b.n	801ebd2 <_printf_i+0xfa>
 801ebae:	6821      	ldr	r1, [r4, #0]
 801ebb0:	6833      	ldr	r3, [r6, #0]
 801ebb2:	0608      	lsls	r0, r1, #24
 801ebb4:	f853 5b04 	ldr.w	r5, [r3], #4
 801ebb8:	d402      	bmi.n	801ebc0 <_printf_i+0xe8>
 801ebba:	0649      	lsls	r1, r1, #25
 801ebbc:	bf48      	it	mi
 801ebbe:	b2ad      	uxthmi	r5, r5
 801ebc0:	2f6f      	cmp	r7, #111	@ 0x6f
 801ebc2:	4853      	ldr	r0, [pc, #332]	@ (801ed10 <_printf_i+0x238>)
 801ebc4:	6033      	str	r3, [r6, #0]
 801ebc6:	bf14      	ite	ne
 801ebc8:	230a      	movne	r3, #10
 801ebca:	2308      	moveq	r3, #8
 801ebcc:	2100      	movs	r1, #0
 801ebce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ebd2:	6866      	ldr	r6, [r4, #4]
 801ebd4:	60a6      	str	r6, [r4, #8]
 801ebd6:	2e00      	cmp	r6, #0
 801ebd8:	bfa2      	ittt	ge
 801ebda:	6821      	ldrge	r1, [r4, #0]
 801ebdc:	f021 0104 	bicge.w	r1, r1, #4
 801ebe0:	6021      	strge	r1, [r4, #0]
 801ebe2:	b90d      	cbnz	r5, 801ebe8 <_printf_i+0x110>
 801ebe4:	2e00      	cmp	r6, #0
 801ebe6:	d04b      	beq.n	801ec80 <_printf_i+0x1a8>
 801ebe8:	4616      	mov	r6, r2
 801ebea:	fbb5 f1f3 	udiv	r1, r5, r3
 801ebee:	fb03 5711 	mls	r7, r3, r1, r5
 801ebf2:	5dc7      	ldrb	r7, [r0, r7]
 801ebf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ebf8:	462f      	mov	r7, r5
 801ebfa:	42bb      	cmp	r3, r7
 801ebfc:	460d      	mov	r5, r1
 801ebfe:	d9f4      	bls.n	801ebea <_printf_i+0x112>
 801ec00:	2b08      	cmp	r3, #8
 801ec02:	d10b      	bne.n	801ec1c <_printf_i+0x144>
 801ec04:	6823      	ldr	r3, [r4, #0]
 801ec06:	07df      	lsls	r7, r3, #31
 801ec08:	d508      	bpl.n	801ec1c <_printf_i+0x144>
 801ec0a:	6923      	ldr	r3, [r4, #16]
 801ec0c:	6861      	ldr	r1, [r4, #4]
 801ec0e:	4299      	cmp	r1, r3
 801ec10:	bfde      	ittt	le
 801ec12:	2330      	movle	r3, #48	@ 0x30
 801ec14:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ec18:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801ec1c:	1b92      	subs	r2, r2, r6
 801ec1e:	6122      	str	r2, [r4, #16]
 801ec20:	f8cd a000 	str.w	sl, [sp]
 801ec24:	464b      	mov	r3, r9
 801ec26:	aa03      	add	r2, sp, #12
 801ec28:	4621      	mov	r1, r4
 801ec2a:	4640      	mov	r0, r8
 801ec2c:	f7ff fee6 	bl	801e9fc <_printf_common>
 801ec30:	3001      	adds	r0, #1
 801ec32:	d14a      	bne.n	801ecca <_printf_i+0x1f2>
 801ec34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ec38:	b004      	add	sp, #16
 801ec3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec3e:	6823      	ldr	r3, [r4, #0]
 801ec40:	f043 0320 	orr.w	r3, r3, #32
 801ec44:	6023      	str	r3, [r4, #0]
 801ec46:	4833      	ldr	r0, [pc, #204]	@ (801ed14 <_printf_i+0x23c>)
 801ec48:	2778      	movs	r7, #120	@ 0x78
 801ec4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ec4e:	6823      	ldr	r3, [r4, #0]
 801ec50:	6831      	ldr	r1, [r6, #0]
 801ec52:	061f      	lsls	r7, r3, #24
 801ec54:	f851 5b04 	ldr.w	r5, [r1], #4
 801ec58:	d402      	bmi.n	801ec60 <_printf_i+0x188>
 801ec5a:	065f      	lsls	r7, r3, #25
 801ec5c:	bf48      	it	mi
 801ec5e:	b2ad      	uxthmi	r5, r5
 801ec60:	6031      	str	r1, [r6, #0]
 801ec62:	07d9      	lsls	r1, r3, #31
 801ec64:	bf44      	itt	mi
 801ec66:	f043 0320 	orrmi.w	r3, r3, #32
 801ec6a:	6023      	strmi	r3, [r4, #0]
 801ec6c:	b11d      	cbz	r5, 801ec76 <_printf_i+0x19e>
 801ec6e:	2310      	movs	r3, #16
 801ec70:	e7ac      	b.n	801ebcc <_printf_i+0xf4>
 801ec72:	4827      	ldr	r0, [pc, #156]	@ (801ed10 <_printf_i+0x238>)
 801ec74:	e7e9      	b.n	801ec4a <_printf_i+0x172>
 801ec76:	6823      	ldr	r3, [r4, #0]
 801ec78:	f023 0320 	bic.w	r3, r3, #32
 801ec7c:	6023      	str	r3, [r4, #0]
 801ec7e:	e7f6      	b.n	801ec6e <_printf_i+0x196>
 801ec80:	4616      	mov	r6, r2
 801ec82:	e7bd      	b.n	801ec00 <_printf_i+0x128>
 801ec84:	6833      	ldr	r3, [r6, #0]
 801ec86:	6825      	ldr	r5, [r4, #0]
 801ec88:	6961      	ldr	r1, [r4, #20]
 801ec8a:	1d18      	adds	r0, r3, #4
 801ec8c:	6030      	str	r0, [r6, #0]
 801ec8e:	062e      	lsls	r6, r5, #24
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	d501      	bpl.n	801ec98 <_printf_i+0x1c0>
 801ec94:	6019      	str	r1, [r3, #0]
 801ec96:	e002      	b.n	801ec9e <_printf_i+0x1c6>
 801ec98:	0668      	lsls	r0, r5, #25
 801ec9a:	d5fb      	bpl.n	801ec94 <_printf_i+0x1bc>
 801ec9c:	8019      	strh	r1, [r3, #0]
 801ec9e:	2300      	movs	r3, #0
 801eca0:	6123      	str	r3, [r4, #16]
 801eca2:	4616      	mov	r6, r2
 801eca4:	e7bc      	b.n	801ec20 <_printf_i+0x148>
 801eca6:	6833      	ldr	r3, [r6, #0]
 801eca8:	1d1a      	adds	r2, r3, #4
 801ecaa:	6032      	str	r2, [r6, #0]
 801ecac:	681e      	ldr	r6, [r3, #0]
 801ecae:	6862      	ldr	r2, [r4, #4]
 801ecb0:	2100      	movs	r1, #0
 801ecb2:	4630      	mov	r0, r6
 801ecb4:	f7e1 fac4 	bl	8000240 <memchr>
 801ecb8:	b108      	cbz	r0, 801ecbe <_printf_i+0x1e6>
 801ecba:	1b80      	subs	r0, r0, r6
 801ecbc:	6060      	str	r0, [r4, #4]
 801ecbe:	6863      	ldr	r3, [r4, #4]
 801ecc0:	6123      	str	r3, [r4, #16]
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ecc8:	e7aa      	b.n	801ec20 <_printf_i+0x148>
 801ecca:	6923      	ldr	r3, [r4, #16]
 801eccc:	4632      	mov	r2, r6
 801ecce:	4649      	mov	r1, r9
 801ecd0:	4640      	mov	r0, r8
 801ecd2:	47d0      	blx	sl
 801ecd4:	3001      	adds	r0, #1
 801ecd6:	d0ad      	beq.n	801ec34 <_printf_i+0x15c>
 801ecd8:	6823      	ldr	r3, [r4, #0]
 801ecda:	079b      	lsls	r3, r3, #30
 801ecdc:	d413      	bmi.n	801ed06 <_printf_i+0x22e>
 801ecde:	68e0      	ldr	r0, [r4, #12]
 801ece0:	9b03      	ldr	r3, [sp, #12]
 801ece2:	4298      	cmp	r0, r3
 801ece4:	bfb8      	it	lt
 801ece6:	4618      	movlt	r0, r3
 801ece8:	e7a6      	b.n	801ec38 <_printf_i+0x160>
 801ecea:	2301      	movs	r3, #1
 801ecec:	4632      	mov	r2, r6
 801ecee:	4649      	mov	r1, r9
 801ecf0:	4640      	mov	r0, r8
 801ecf2:	47d0      	blx	sl
 801ecf4:	3001      	adds	r0, #1
 801ecf6:	d09d      	beq.n	801ec34 <_printf_i+0x15c>
 801ecf8:	3501      	adds	r5, #1
 801ecfa:	68e3      	ldr	r3, [r4, #12]
 801ecfc:	9903      	ldr	r1, [sp, #12]
 801ecfe:	1a5b      	subs	r3, r3, r1
 801ed00:	42ab      	cmp	r3, r5
 801ed02:	dcf2      	bgt.n	801ecea <_printf_i+0x212>
 801ed04:	e7eb      	b.n	801ecde <_printf_i+0x206>
 801ed06:	2500      	movs	r5, #0
 801ed08:	f104 0619 	add.w	r6, r4, #25
 801ed0c:	e7f5      	b.n	801ecfa <_printf_i+0x222>
 801ed0e:	bf00      	nop
 801ed10:	08021ce7 	.word	0x08021ce7
 801ed14:	08021cf8 	.word	0x08021cf8

0801ed18 <__sflush_r>:
 801ed18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ed1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed20:	0716      	lsls	r6, r2, #28
 801ed22:	4605      	mov	r5, r0
 801ed24:	460c      	mov	r4, r1
 801ed26:	d454      	bmi.n	801edd2 <__sflush_r+0xba>
 801ed28:	684b      	ldr	r3, [r1, #4]
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	dc02      	bgt.n	801ed34 <__sflush_r+0x1c>
 801ed2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	dd48      	ble.n	801edc6 <__sflush_r+0xae>
 801ed34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed36:	2e00      	cmp	r6, #0
 801ed38:	d045      	beq.n	801edc6 <__sflush_r+0xae>
 801ed3a:	2300      	movs	r3, #0
 801ed3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ed40:	682f      	ldr	r7, [r5, #0]
 801ed42:	6a21      	ldr	r1, [r4, #32]
 801ed44:	602b      	str	r3, [r5, #0]
 801ed46:	d030      	beq.n	801edaa <__sflush_r+0x92>
 801ed48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ed4a:	89a3      	ldrh	r3, [r4, #12]
 801ed4c:	0759      	lsls	r1, r3, #29
 801ed4e:	d505      	bpl.n	801ed5c <__sflush_r+0x44>
 801ed50:	6863      	ldr	r3, [r4, #4]
 801ed52:	1ad2      	subs	r2, r2, r3
 801ed54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ed56:	b10b      	cbz	r3, 801ed5c <__sflush_r+0x44>
 801ed58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ed5a:	1ad2      	subs	r2, r2, r3
 801ed5c:	2300      	movs	r3, #0
 801ed5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed60:	6a21      	ldr	r1, [r4, #32]
 801ed62:	4628      	mov	r0, r5
 801ed64:	47b0      	blx	r6
 801ed66:	1c43      	adds	r3, r0, #1
 801ed68:	89a3      	ldrh	r3, [r4, #12]
 801ed6a:	d106      	bne.n	801ed7a <__sflush_r+0x62>
 801ed6c:	6829      	ldr	r1, [r5, #0]
 801ed6e:	291d      	cmp	r1, #29
 801ed70:	d82b      	bhi.n	801edca <__sflush_r+0xb2>
 801ed72:	4a2a      	ldr	r2, [pc, #168]	@ (801ee1c <__sflush_r+0x104>)
 801ed74:	410a      	asrs	r2, r1
 801ed76:	07d6      	lsls	r6, r2, #31
 801ed78:	d427      	bmi.n	801edca <__sflush_r+0xb2>
 801ed7a:	2200      	movs	r2, #0
 801ed7c:	6062      	str	r2, [r4, #4]
 801ed7e:	04d9      	lsls	r1, r3, #19
 801ed80:	6922      	ldr	r2, [r4, #16]
 801ed82:	6022      	str	r2, [r4, #0]
 801ed84:	d504      	bpl.n	801ed90 <__sflush_r+0x78>
 801ed86:	1c42      	adds	r2, r0, #1
 801ed88:	d101      	bne.n	801ed8e <__sflush_r+0x76>
 801ed8a:	682b      	ldr	r3, [r5, #0]
 801ed8c:	b903      	cbnz	r3, 801ed90 <__sflush_r+0x78>
 801ed8e:	6560      	str	r0, [r4, #84]	@ 0x54
 801ed90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed92:	602f      	str	r7, [r5, #0]
 801ed94:	b1b9      	cbz	r1, 801edc6 <__sflush_r+0xae>
 801ed96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ed9a:	4299      	cmp	r1, r3
 801ed9c:	d002      	beq.n	801eda4 <__sflush_r+0x8c>
 801ed9e:	4628      	mov	r0, r5
 801eda0:	f7ff fb40 	bl	801e424 <_free_r>
 801eda4:	2300      	movs	r3, #0
 801eda6:	6363      	str	r3, [r4, #52]	@ 0x34
 801eda8:	e00d      	b.n	801edc6 <__sflush_r+0xae>
 801edaa:	2301      	movs	r3, #1
 801edac:	4628      	mov	r0, r5
 801edae:	47b0      	blx	r6
 801edb0:	4602      	mov	r2, r0
 801edb2:	1c50      	adds	r0, r2, #1
 801edb4:	d1c9      	bne.n	801ed4a <__sflush_r+0x32>
 801edb6:	682b      	ldr	r3, [r5, #0]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d0c6      	beq.n	801ed4a <__sflush_r+0x32>
 801edbc:	2b1d      	cmp	r3, #29
 801edbe:	d001      	beq.n	801edc4 <__sflush_r+0xac>
 801edc0:	2b16      	cmp	r3, #22
 801edc2:	d11e      	bne.n	801ee02 <__sflush_r+0xea>
 801edc4:	602f      	str	r7, [r5, #0]
 801edc6:	2000      	movs	r0, #0
 801edc8:	e022      	b.n	801ee10 <__sflush_r+0xf8>
 801edca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801edce:	b21b      	sxth	r3, r3
 801edd0:	e01b      	b.n	801ee0a <__sflush_r+0xf2>
 801edd2:	690f      	ldr	r7, [r1, #16]
 801edd4:	2f00      	cmp	r7, #0
 801edd6:	d0f6      	beq.n	801edc6 <__sflush_r+0xae>
 801edd8:	0793      	lsls	r3, r2, #30
 801edda:	680e      	ldr	r6, [r1, #0]
 801eddc:	bf08      	it	eq
 801edde:	694b      	ldreq	r3, [r1, #20]
 801ede0:	600f      	str	r7, [r1, #0]
 801ede2:	bf18      	it	ne
 801ede4:	2300      	movne	r3, #0
 801ede6:	eba6 0807 	sub.w	r8, r6, r7
 801edea:	608b      	str	r3, [r1, #8]
 801edec:	f1b8 0f00 	cmp.w	r8, #0
 801edf0:	dde9      	ble.n	801edc6 <__sflush_r+0xae>
 801edf2:	6a21      	ldr	r1, [r4, #32]
 801edf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801edf6:	4643      	mov	r3, r8
 801edf8:	463a      	mov	r2, r7
 801edfa:	4628      	mov	r0, r5
 801edfc:	47b0      	blx	r6
 801edfe:	2800      	cmp	r0, #0
 801ee00:	dc08      	bgt.n	801ee14 <__sflush_r+0xfc>
 801ee02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee0a:	81a3      	strh	r3, [r4, #12]
 801ee0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ee10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee14:	4407      	add	r7, r0
 801ee16:	eba8 0800 	sub.w	r8, r8, r0
 801ee1a:	e7e7      	b.n	801edec <__sflush_r+0xd4>
 801ee1c:	dfbffffe 	.word	0xdfbffffe

0801ee20 <_fflush_r>:
 801ee20:	b538      	push	{r3, r4, r5, lr}
 801ee22:	690b      	ldr	r3, [r1, #16]
 801ee24:	4605      	mov	r5, r0
 801ee26:	460c      	mov	r4, r1
 801ee28:	b913      	cbnz	r3, 801ee30 <_fflush_r+0x10>
 801ee2a:	2500      	movs	r5, #0
 801ee2c:	4628      	mov	r0, r5
 801ee2e:	bd38      	pop	{r3, r4, r5, pc}
 801ee30:	b118      	cbz	r0, 801ee3a <_fflush_r+0x1a>
 801ee32:	6a03      	ldr	r3, [r0, #32]
 801ee34:	b90b      	cbnz	r3, 801ee3a <_fflush_r+0x1a>
 801ee36:	f7fe ff1d 	bl	801dc74 <__sinit>
 801ee3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d0f3      	beq.n	801ee2a <_fflush_r+0xa>
 801ee42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ee44:	07d0      	lsls	r0, r2, #31
 801ee46:	d404      	bmi.n	801ee52 <_fflush_r+0x32>
 801ee48:	0599      	lsls	r1, r3, #22
 801ee4a:	d402      	bmi.n	801ee52 <_fflush_r+0x32>
 801ee4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee4e:	f7ff faa6 	bl	801e39e <__retarget_lock_acquire_recursive>
 801ee52:	4628      	mov	r0, r5
 801ee54:	4621      	mov	r1, r4
 801ee56:	f7ff ff5f 	bl	801ed18 <__sflush_r>
 801ee5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ee5c:	07da      	lsls	r2, r3, #31
 801ee5e:	4605      	mov	r5, r0
 801ee60:	d4e4      	bmi.n	801ee2c <_fflush_r+0xc>
 801ee62:	89a3      	ldrh	r3, [r4, #12]
 801ee64:	059b      	lsls	r3, r3, #22
 801ee66:	d4e1      	bmi.n	801ee2c <_fflush_r+0xc>
 801ee68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee6a:	f7ff fa99 	bl	801e3a0 <__retarget_lock_release_recursive>
 801ee6e:	e7dd      	b.n	801ee2c <_fflush_r+0xc>

0801ee70 <fiprintf>:
 801ee70:	b40e      	push	{r1, r2, r3}
 801ee72:	b503      	push	{r0, r1, lr}
 801ee74:	4601      	mov	r1, r0
 801ee76:	ab03      	add	r3, sp, #12
 801ee78:	4805      	ldr	r0, [pc, #20]	@ (801ee90 <fiprintf+0x20>)
 801ee7a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee7e:	6800      	ldr	r0, [r0, #0]
 801ee80:	9301      	str	r3, [sp, #4]
 801ee82:	f7ff fca3 	bl	801e7cc <_vfiprintf_r>
 801ee86:	b002      	add	sp, #8
 801ee88:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee8c:	b003      	add	sp, #12
 801ee8e:	4770      	bx	lr
 801ee90:	20001bf4 	.word	0x20001bf4

0801ee94 <__swhatbuf_r>:
 801ee94:	b570      	push	{r4, r5, r6, lr}
 801ee96:	460c      	mov	r4, r1
 801ee98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee9c:	2900      	cmp	r1, #0
 801ee9e:	b096      	sub	sp, #88	@ 0x58
 801eea0:	4615      	mov	r5, r2
 801eea2:	461e      	mov	r6, r3
 801eea4:	da0d      	bge.n	801eec2 <__swhatbuf_r+0x2e>
 801eea6:	89a3      	ldrh	r3, [r4, #12]
 801eea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801eeac:	f04f 0100 	mov.w	r1, #0
 801eeb0:	bf14      	ite	ne
 801eeb2:	2340      	movne	r3, #64	@ 0x40
 801eeb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801eeb8:	2000      	movs	r0, #0
 801eeba:	6031      	str	r1, [r6, #0]
 801eebc:	602b      	str	r3, [r5, #0]
 801eebe:	b016      	add	sp, #88	@ 0x58
 801eec0:	bd70      	pop	{r4, r5, r6, pc}
 801eec2:	466a      	mov	r2, sp
 801eec4:	f000 f848 	bl	801ef58 <_fstat_r>
 801eec8:	2800      	cmp	r0, #0
 801eeca:	dbec      	blt.n	801eea6 <__swhatbuf_r+0x12>
 801eecc:	9901      	ldr	r1, [sp, #4]
 801eece:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801eed2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801eed6:	4259      	negs	r1, r3
 801eed8:	4159      	adcs	r1, r3
 801eeda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eede:	e7eb      	b.n	801eeb8 <__swhatbuf_r+0x24>

0801eee0 <__smakebuf_r>:
 801eee0:	898b      	ldrh	r3, [r1, #12]
 801eee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eee4:	079d      	lsls	r5, r3, #30
 801eee6:	4606      	mov	r6, r0
 801eee8:	460c      	mov	r4, r1
 801eeea:	d507      	bpl.n	801eefc <__smakebuf_r+0x1c>
 801eeec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eef0:	6023      	str	r3, [r4, #0]
 801eef2:	6123      	str	r3, [r4, #16]
 801eef4:	2301      	movs	r3, #1
 801eef6:	6163      	str	r3, [r4, #20]
 801eef8:	b003      	add	sp, #12
 801eefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eefc:	ab01      	add	r3, sp, #4
 801eefe:	466a      	mov	r2, sp
 801ef00:	f7ff ffc8 	bl	801ee94 <__swhatbuf_r>
 801ef04:	9f00      	ldr	r7, [sp, #0]
 801ef06:	4605      	mov	r5, r0
 801ef08:	4639      	mov	r1, r7
 801ef0a:	4630      	mov	r0, r6
 801ef0c:	f7fe fc80 	bl	801d810 <_malloc_r>
 801ef10:	b948      	cbnz	r0, 801ef26 <__smakebuf_r+0x46>
 801ef12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef16:	059a      	lsls	r2, r3, #22
 801ef18:	d4ee      	bmi.n	801eef8 <__smakebuf_r+0x18>
 801ef1a:	f023 0303 	bic.w	r3, r3, #3
 801ef1e:	f043 0302 	orr.w	r3, r3, #2
 801ef22:	81a3      	strh	r3, [r4, #12]
 801ef24:	e7e2      	b.n	801eeec <__smakebuf_r+0xc>
 801ef26:	89a3      	ldrh	r3, [r4, #12]
 801ef28:	6020      	str	r0, [r4, #0]
 801ef2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ef2e:	81a3      	strh	r3, [r4, #12]
 801ef30:	9b01      	ldr	r3, [sp, #4]
 801ef32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ef36:	b15b      	cbz	r3, 801ef50 <__smakebuf_r+0x70>
 801ef38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef3c:	4630      	mov	r0, r6
 801ef3e:	f000 f81d 	bl	801ef7c <_isatty_r>
 801ef42:	b128      	cbz	r0, 801ef50 <__smakebuf_r+0x70>
 801ef44:	89a3      	ldrh	r3, [r4, #12]
 801ef46:	f023 0303 	bic.w	r3, r3, #3
 801ef4a:	f043 0301 	orr.w	r3, r3, #1
 801ef4e:	81a3      	strh	r3, [r4, #12]
 801ef50:	89a3      	ldrh	r3, [r4, #12]
 801ef52:	431d      	orrs	r5, r3
 801ef54:	81a5      	strh	r5, [r4, #12]
 801ef56:	e7cf      	b.n	801eef8 <__smakebuf_r+0x18>

0801ef58 <_fstat_r>:
 801ef58:	b538      	push	{r3, r4, r5, lr}
 801ef5a:	4d07      	ldr	r5, [pc, #28]	@ (801ef78 <_fstat_r+0x20>)
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	4604      	mov	r4, r0
 801ef60:	4608      	mov	r0, r1
 801ef62:	4611      	mov	r1, r2
 801ef64:	602b      	str	r3, [r5, #0]
 801ef66:	f7e4 fd19 	bl	800399c <_fstat>
 801ef6a:	1c43      	adds	r3, r0, #1
 801ef6c:	d102      	bne.n	801ef74 <_fstat_r+0x1c>
 801ef6e:	682b      	ldr	r3, [r5, #0]
 801ef70:	b103      	cbz	r3, 801ef74 <_fstat_r+0x1c>
 801ef72:	6023      	str	r3, [r4, #0]
 801ef74:	bd38      	pop	{r3, r4, r5, pc}
 801ef76:	bf00      	nop
 801ef78:	2001f920 	.word	0x2001f920

0801ef7c <_isatty_r>:
 801ef7c:	b538      	push	{r3, r4, r5, lr}
 801ef7e:	4d06      	ldr	r5, [pc, #24]	@ (801ef98 <_isatty_r+0x1c>)
 801ef80:	2300      	movs	r3, #0
 801ef82:	4604      	mov	r4, r0
 801ef84:	4608      	mov	r0, r1
 801ef86:	602b      	str	r3, [r5, #0]
 801ef88:	f7e4 fd18 	bl	80039bc <_isatty>
 801ef8c:	1c43      	adds	r3, r0, #1
 801ef8e:	d102      	bne.n	801ef96 <_isatty_r+0x1a>
 801ef90:	682b      	ldr	r3, [r5, #0]
 801ef92:	b103      	cbz	r3, 801ef96 <_isatty_r+0x1a>
 801ef94:	6023      	str	r3, [r4, #0]
 801ef96:	bd38      	pop	{r3, r4, r5, pc}
 801ef98:	2001f920 	.word	0x2001f920

0801ef9c <abort>:
 801ef9c:	b508      	push	{r3, lr}
 801ef9e:	2006      	movs	r0, #6
 801efa0:	f000 f82c 	bl	801effc <raise>
 801efa4:	2001      	movs	r0, #1
 801efa6:	f7e4 fcc5 	bl	8003934 <_exit>

0801efaa <_raise_r>:
 801efaa:	291f      	cmp	r1, #31
 801efac:	b538      	push	{r3, r4, r5, lr}
 801efae:	4605      	mov	r5, r0
 801efb0:	460c      	mov	r4, r1
 801efb2:	d904      	bls.n	801efbe <_raise_r+0x14>
 801efb4:	2316      	movs	r3, #22
 801efb6:	6003      	str	r3, [r0, #0]
 801efb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801efbc:	bd38      	pop	{r3, r4, r5, pc}
 801efbe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801efc0:	b112      	cbz	r2, 801efc8 <_raise_r+0x1e>
 801efc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801efc6:	b94b      	cbnz	r3, 801efdc <_raise_r+0x32>
 801efc8:	4628      	mov	r0, r5
 801efca:	f000 f831 	bl	801f030 <_getpid_r>
 801efce:	4622      	mov	r2, r4
 801efd0:	4601      	mov	r1, r0
 801efd2:	4628      	mov	r0, r5
 801efd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801efd8:	f000 b818 	b.w	801f00c <_kill_r>
 801efdc:	2b01      	cmp	r3, #1
 801efde:	d00a      	beq.n	801eff6 <_raise_r+0x4c>
 801efe0:	1c59      	adds	r1, r3, #1
 801efe2:	d103      	bne.n	801efec <_raise_r+0x42>
 801efe4:	2316      	movs	r3, #22
 801efe6:	6003      	str	r3, [r0, #0]
 801efe8:	2001      	movs	r0, #1
 801efea:	e7e7      	b.n	801efbc <_raise_r+0x12>
 801efec:	2100      	movs	r1, #0
 801efee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801eff2:	4620      	mov	r0, r4
 801eff4:	4798      	blx	r3
 801eff6:	2000      	movs	r0, #0
 801eff8:	e7e0      	b.n	801efbc <_raise_r+0x12>
	...

0801effc <raise>:
 801effc:	4b02      	ldr	r3, [pc, #8]	@ (801f008 <raise+0xc>)
 801effe:	4601      	mov	r1, r0
 801f000:	6818      	ldr	r0, [r3, #0]
 801f002:	f7ff bfd2 	b.w	801efaa <_raise_r>
 801f006:	bf00      	nop
 801f008:	20001bf4 	.word	0x20001bf4

0801f00c <_kill_r>:
 801f00c:	b538      	push	{r3, r4, r5, lr}
 801f00e:	4d07      	ldr	r5, [pc, #28]	@ (801f02c <_kill_r+0x20>)
 801f010:	2300      	movs	r3, #0
 801f012:	4604      	mov	r4, r0
 801f014:	4608      	mov	r0, r1
 801f016:	4611      	mov	r1, r2
 801f018:	602b      	str	r3, [r5, #0]
 801f01a:	f7e4 fc7b 	bl	8003914 <_kill>
 801f01e:	1c43      	adds	r3, r0, #1
 801f020:	d102      	bne.n	801f028 <_kill_r+0x1c>
 801f022:	682b      	ldr	r3, [r5, #0]
 801f024:	b103      	cbz	r3, 801f028 <_kill_r+0x1c>
 801f026:	6023      	str	r3, [r4, #0]
 801f028:	bd38      	pop	{r3, r4, r5, pc}
 801f02a:	bf00      	nop
 801f02c:	2001f920 	.word	0x2001f920

0801f030 <_getpid_r>:
 801f030:	f7e4 bc68 	b.w	8003904 <_getpid>

0801f034 <pow>:
 801f034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f036:	ed2d 8b02 	vpush	{d8}
 801f03a:	eeb0 8a40 	vmov.f32	s16, s0
 801f03e:	eef0 8a60 	vmov.f32	s17, s1
 801f042:	ec55 4b11 	vmov	r4, r5, d1
 801f046:	f000 fb1b 	bl	801f680 <__ieee754_pow>
 801f04a:	4622      	mov	r2, r4
 801f04c:	462b      	mov	r3, r5
 801f04e:	4620      	mov	r0, r4
 801f050:	4629      	mov	r1, r5
 801f052:	ec57 6b10 	vmov	r6, r7, d0
 801f056:	f7e1 fda1 	bl	8000b9c <__aeabi_dcmpun>
 801f05a:	2800      	cmp	r0, #0
 801f05c:	d13b      	bne.n	801f0d6 <pow+0xa2>
 801f05e:	ec51 0b18 	vmov	r0, r1, d8
 801f062:	2200      	movs	r2, #0
 801f064:	2300      	movs	r3, #0
 801f066:	f7e1 fd67 	bl	8000b38 <__aeabi_dcmpeq>
 801f06a:	b1b8      	cbz	r0, 801f09c <pow+0x68>
 801f06c:	2200      	movs	r2, #0
 801f06e:	2300      	movs	r3, #0
 801f070:	4620      	mov	r0, r4
 801f072:	4629      	mov	r1, r5
 801f074:	f7e1 fd60 	bl	8000b38 <__aeabi_dcmpeq>
 801f078:	2800      	cmp	r0, #0
 801f07a:	d146      	bne.n	801f10a <pow+0xd6>
 801f07c:	ec45 4b10 	vmov	d0, r4, r5
 801f080:	f000 fa16 	bl	801f4b0 <finite>
 801f084:	b338      	cbz	r0, 801f0d6 <pow+0xa2>
 801f086:	2200      	movs	r2, #0
 801f088:	2300      	movs	r3, #0
 801f08a:	4620      	mov	r0, r4
 801f08c:	4629      	mov	r1, r5
 801f08e:	f7e1 fd5d 	bl	8000b4c <__aeabi_dcmplt>
 801f092:	b300      	cbz	r0, 801f0d6 <pow+0xa2>
 801f094:	f7ff f958 	bl	801e348 <__errno>
 801f098:	2322      	movs	r3, #34	@ 0x22
 801f09a:	e01b      	b.n	801f0d4 <pow+0xa0>
 801f09c:	ec47 6b10 	vmov	d0, r6, r7
 801f0a0:	f000 fa06 	bl	801f4b0 <finite>
 801f0a4:	b9e0      	cbnz	r0, 801f0e0 <pow+0xac>
 801f0a6:	eeb0 0a48 	vmov.f32	s0, s16
 801f0aa:	eef0 0a68 	vmov.f32	s1, s17
 801f0ae:	f000 f9ff 	bl	801f4b0 <finite>
 801f0b2:	b1a8      	cbz	r0, 801f0e0 <pow+0xac>
 801f0b4:	ec45 4b10 	vmov	d0, r4, r5
 801f0b8:	f000 f9fa 	bl	801f4b0 <finite>
 801f0bc:	b180      	cbz	r0, 801f0e0 <pow+0xac>
 801f0be:	4632      	mov	r2, r6
 801f0c0:	463b      	mov	r3, r7
 801f0c2:	4630      	mov	r0, r6
 801f0c4:	4639      	mov	r1, r7
 801f0c6:	f7e1 fd69 	bl	8000b9c <__aeabi_dcmpun>
 801f0ca:	2800      	cmp	r0, #0
 801f0cc:	d0e2      	beq.n	801f094 <pow+0x60>
 801f0ce:	f7ff f93b 	bl	801e348 <__errno>
 801f0d2:	2321      	movs	r3, #33	@ 0x21
 801f0d4:	6003      	str	r3, [r0, #0]
 801f0d6:	ecbd 8b02 	vpop	{d8}
 801f0da:	ec47 6b10 	vmov	d0, r6, r7
 801f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	4630      	mov	r0, r6
 801f0e6:	4639      	mov	r1, r7
 801f0e8:	f7e1 fd26 	bl	8000b38 <__aeabi_dcmpeq>
 801f0ec:	2800      	cmp	r0, #0
 801f0ee:	d0f2      	beq.n	801f0d6 <pow+0xa2>
 801f0f0:	eeb0 0a48 	vmov.f32	s0, s16
 801f0f4:	eef0 0a68 	vmov.f32	s1, s17
 801f0f8:	f000 f9da 	bl	801f4b0 <finite>
 801f0fc:	2800      	cmp	r0, #0
 801f0fe:	d0ea      	beq.n	801f0d6 <pow+0xa2>
 801f100:	ec45 4b10 	vmov	d0, r4, r5
 801f104:	f000 f9d4 	bl	801f4b0 <finite>
 801f108:	e7c3      	b.n	801f092 <pow+0x5e>
 801f10a:	4f01      	ldr	r7, [pc, #4]	@ (801f110 <pow+0xdc>)
 801f10c:	2600      	movs	r6, #0
 801f10e:	e7e2      	b.n	801f0d6 <pow+0xa2>
 801f110:	3ff00000 	.word	0x3ff00000

0801f114 <sqrt>:
 801f114:	b538      	push	{r3, r4, r5, lr}
 801f116:	ed2d 8b02 	vpush	{d8}
 801f11a:	ec55 4b10 	vmov	r4, r5, d0
 801f11e:	f000 f9d3 	bl	801f4c8 <__ieee754_sqrt>
 801f122:	4622      	mov	r2, r4
 801f124:	462b      	mov	r3, r5
 801f126:	4620      	mov	r0, r4
 801f128:	4629      	mov	r1, r5
 801f12a:	eeb0 8a40 	vmov.f32	s16, s0
 801f12e:	eef0 8a60 	vmov.f32	s17, s1
 801f132:	f7e1 fd33 	bl	8000b9c <__aeabi_dcmpun>
 801f136:	b990      	cbnz	r0, 801f15e <sqrt+0x4a>
 801f138:	2200      	movs	r2, #0
 801f13a:	2300      	movs	r3, #0
 801f13c:	4620      	mov	r0, r4
 801f13e:	4629      	mov	r1, r5
 801f140:	f7e1 fd04 	bl	8000b4c <__aeabi_dcmplt>
 801f144:	b158      	cbz	r0, 801f15e <sqrt+0x4a>
 801f146:	f7ff f8ff 	bl	801e348 <__errno>
 801f14a:	2321      	movs	r3, #33	@ 0x21
 801f14c:	6003      	str	r3, [r0, #0]
 801f14e:	2200      	movs	r2, #0
 801f150:	2300      	movs	r3, #0
 801f152:	4610      	mov	r0, r2
 801f154:	4619      	mov	r1, r3
 801f156:	f7e1 fbb1 	bl	80008bc <__aeabi_ddiv>
 801f15a:	ec41 0b18 	vmov	d8, r0, r1
 801f15e:	eeb0 0a48 	vmov.f32	s0, s16
 801f162:	eef0 0a68 	vmov.f32	s1, s17
 801f166:	ecbd 8b02 	vpop	{d8}
 801f16a:	bd38      	pop	{r3, r4, r5, pc}
 801f16c:	0000      	movs	r0, r0
	...

0801f170 <atan>:
 801f170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f174:	ec55 4b10 	vmov	r4, r5, d0
 801f178:	4bbf      	ldr	r3, [pc, #764]	@ (801f478 <atan+0x308>)
 801f17a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801f17e:	429e      	cmp	r6, r3
 801f180:	46ab      	mov	fp, r5
 801f182:	d918      	bls.n	801f1b6 <atan+0x46>
 801f184:	4bbd      	ldr	r3, [pc, #756]	@ (801f47c <atan+0x30c>)
 801f186:	429e      	cmp	r6, r3
 801f188:	d801      	bhi.n	801f18e <atan+0x1e>
 801f18a:	d109      	bne.n	801f1a0 <atan+0x30>
 801f18c:	b144      	cbz	r4, 801f1a0 <atan+0x30>
 801f18e:	4622      	mov	r2, r4
 801f190:	462b      	mov	r3, r5
 801f192:	4620      	mov	r0, r4
 801f194:	4629      	mov	r1, r5
 801f196:	f7e1 f8b1 	bl	80002fc <__adddf3>
 801f19a:	4604      	mov	r4, r0
 801f19c:	460d      	mov	r5, r1
 801f19e:	e006      	b.n	801f1ae <atan+0x3e>
 801f1a0:	f1bb 0f00 	cmp.w	fp, #0
 801f1a4:	f340 812b 	ble.w	801f3fe <atan+0x28e>
 801f1a8:	a597      	add	r5, pc, #604	@ (adr r5, 801f408 <atan+0x298>)
 801f1aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f1ae:	ec45 4b10 	vmov	d0, r4, r5
 801f1b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b6:	4bb2      	ldr	r3, [pc, #712]	@ (801f480 <atan+0x310>)
 801f1b8:	429e      	cmp	r6, r3
 801f1ba:	d813      	bhi.n	801f1e4 <atan+0x74>
 801f1bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801f1c0:	429e      	cmp	r6, r3
 801f1c2:	d80c      	bhi.n	801f1de <atan+0x6e>
 801f1c4:	a392      	add	r3, pc, #584	@ (adr r3, 801f410 <atan+0x2a0>)
 801f1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ca:	4620      	mov	r0, r4
 801f1cc:	4629      	mov	r1, r5
 801f1ce:	f7e1 f895 	bl	80002fc <__adddf3>
 801f1d2:	4bac      	ldr	r3, [pc, #688]	@ (801f484 <atan+0x314>)
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	f7e1 fcd7 	bl	8000b88 <__aeabi_dcmpgt>
 801f1da:	2800      	cmp	r0, #0
 801f1dc:	d1e7      	bne.n	801f1ae <atan+0x3e>
 801f1de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801f1e2:	e029      	b.n	801f238 <atan+0xc8>
 801f1e4:	f000 f95c 	bl	801f4a0 <fabs>
 801f1e8:	4ba7      	ldr	r3, [pc, #668]	@ (801f488 <atan+0x318>)
 801f1ea:	429e      	cmp	r6, r3
 801f1ec:	ec55 4b10 	vmov	r4, r5, d0
 801f1f0:	f200 80bc 	bhi.w	801f36c <atan+0x1fc>
 801f1f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801f1f8:	429e      	cmp	r6, r3
 801f1fa:	f200 809e 	bhi.w	801f33a <atan+0x1ca>
 801f1fe:	4622      	mov	r2, r4
 801f200:	462b      	mov	r3, r5
 801f202:	4620      	mov	r0, r4
 801f204:	4629      	mov	r1, r5
 801f206:	f7e1 f879 	bl	80002fc <__adddf3>
 801f20a:	4b9e      	ldr	r3, [pc, #632]	@ (801f484 <atan+0x314>)
 801f20c:	2200      	movs	r2, #0
 801f20e:	f7e1 f873 	bl	80002f8 <__aeabi_dsub>
 801f212:	2200      	movs	r2, #0
 801f214:	4606      	mov	r6, r0
 801f216:	460f      	mov	r7, r1
 801f218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f21c:	4620      	mov	r0, r4
 801f21e:	4629      	mov	r1, r5
 801f220:	f7e1 f86c 	bl	80002fc <__adddf3>
 801f224:	4602      	mov	r2, r0
 801f226:	460b      	mov	r3, r1
 801f228:	4630      	mov	r0, r6
 801f22a:	4639      	mov	r1, r7
 801f22c:	f7e1 fb46 	bl	80008bc <__aeabi_ddiv>
 801f230:	f04f 0a00 	mov.w	sl, #0
 801f234:	4604      	mov	r4, r0
 801f236:	460d      	mov	r5, r1
 801f238:	4622      	mov	r2, r4
 801f23a:	462b      	mov	r3, r5
 801f23c:	4620      	mov	r0, r4
 801f23e:	4629      	mov	r1, r5
 801f240:	f7e1 fa12 	bl	8000668 <__aeabi_dmul>
 801f244:	4602      	mov	r2, r0
 801f246:	460b      	mov	r3, r1
 801f248:	4680      	mov	r8, r0
 801f24a:	4689      	mov	r9, r1
 801f24c:	f7e1 fa0c 	bl	8000668 <__aeabi_dmul>
 801f250:	a371      	add	r3, pc, #452	@ (adr r3, 801f418 <atan+0x2a8>)
 801f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f256:	4606      	mov	r6, r0
 801f258:	460f      	mov	r7, r1
 801f25a:	f7e1 fa05 	bl	8000668 <__aeabi_dmul>
 801f25e:	a370      	add	r3, pc, #448	@ (adr r3, 801f420 <atan+0x2b0>)
 801f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f264:	f7e1 f84a 	bl	80002fc <__adddf3>
 801f268:	4632      	mov	r2, r6
 801f26a:	463b      	mov	r3, r7
 801f26c:	f7e1 f9fc 	bl	8000668 <__aeabi_dmul>
 801f270:	a36d      	add	r3, pc, #436	@ (adr r3, 801f428 <atan+0x2b8>)
 801f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f276:	f7e1 f841 	bl	80002fc <__adddf3>
 801f27a:	4632      	mov	r2, r6
 801f27c:	463b      	mov	r3, r7
 801f27e:	f7e1 f9f3 	bl	8000668 <__aeabi_dmul>
 801f282:	a36b      	add	r3, pc, #428	@ (adr r3, 801f430 <atan+0x2c0>)
 801f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f288:	f7e1 f838 	bl	80002fc <__adddf3>
 801f28c:	4632      	mov	r2, r6
 801f28e:	463b      	mov	r3, r7
 801f290:	f7e1 f9ea 	bl	8000668 <__aeabi_dmul>
 801f294:	a368      	add	r3, pc, #416	@ (adr r3, 801f438 <atan+0x2c8>)
 801f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f29a:	f7e1 f82f 	bl	80002fc <__adddf3>
 801f29e:	4632      	mov	r2, r6
 801f2a0:	463b      	mov	r3, r7
 801f2a2:	f7e1 f9e1 	bl	8000668 <__aeabi_dmul>
 801f2a6:	a366      	add	r3, pc, #408	@ (adr r3, 801f440 <atan+0x2d0>)
 801f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ac:	f7e1 f826 	bl	80002fc <__adddf3>
 801f2b0:	4642      	mov	r2, r8
 801f2b2:	464b      	mov	r3, r9
 801f2b4:	f7e1 f9d8 	bl	8000668 <__aeabi_dmul>
 801f2b8:	a363      	add	r3, pc, #396	@ (adr r3, 801f448 <atan+0x2d8>)
 801f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2be:	4680      	mov	r8, r0
 801f2c0:	4689      	mov	r9, r1
 801f2c2:	4630      	mov	r0, r6
 801f2c4:	4639      	mov	r1, r7
 801f2c6:	f7e1 f9cf 	bl	8000668 <__aeabi_dmul>
 801f2ca:	a361      	add	r3, pc, #388	@ (adr r3, 801f450 <atan+0x2e0>)
 801f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2d0:	f7e1 f812 	bl	80002f8 <__aeabi_dsub>
 801f2d4:	4632      	mov	r2, r6
 801f2d6:	463b      	mov	r3, r7
 801f2d8:	f7e1 f9c6 	bl	8000668 <__aeabi_dmul>
 801f2dc:	a35e      	add	r3, pc, #376	@ (adr r3, 801f458 <atan+0x2e8>)
 801f2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2e2:	f7e1 f809 	bl	80002f8 <__aeabi_dsub>
 801f2e6:	4632      	mov	r2, r6
 801f2e8:	463b      	mov	r3, r7
 801f2ea:	f7e1 f9bd 	bl	8000668 <__aeabi_dmul>
 801f2ee:	a35c      	add	r3, pc, #368	@ (adr r3, 801f460 <atan+0x2f0>)
 801f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2f4:	f7e1 f800 	bl	80002f8 <__aeabi_dsub>
 801f2f8:	4632      	mov	r2, r6
 801f2fa:	463b      	mov	r3, r7
 801f2fc:	f7e1 f9b4 	bl	8000668 <__aeabi_dmul>
 801f300:	a359      	add	r3, pc, #356	@ (adr r3, 801f468 <atan+0x2f8>)
 801f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f306:	f7e0 fff7 	bl	80002f8 <__aeabi_dsub>
 801f30a:	4632      	mov	r2, r6
 801f30c:	463b      	mov	r3, r7
 801f30e:	f7e1 f9ab 	bl	8000668 <__aeabi_dmul>
 801f312:	4602      	mov	r2, r0
 801f314:	460b      	mov	r3, r1
 801f316:	4640      	mov	r0, r8
 801f318:	4649      	mov	r1, r9
 801f31a:	f7e0 ffef 	bl	80002fc <__adddf3>
 801f31e:	4622      	mov	r2, r4
 801f320:	462b      	mov	r3, r5
 801f322:	f7e1 f9a1 	bl	8000668 <__aeabi_dmul>
 801f326:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801f32a:	4602      	mov	r2, r0
 801f32c:	460b      	mov	r3, r1
 801f32e:	d148      	bne.n	801f3c2 <atan+0x252>
 801f330:	4620      	mov	r0, r4
 801f332:	4629      	mov	r1, r5
 801f334:	f7e0 ffe0 	bl	80002f8 <__aeabi_dsub>
 801f338:	e72f      	b.n	801f19a <atan+0x2a>
 801f33a:	4b52      	ldr	r3, [pc, #328]	@ (801f484 <atan+0x314>)
 801f33c:	2200      	movs	r2, #0
 801f33e:	4620      	mov	r0, r4
 801f340:	4629      	mov	r1, r5
 801f342:	f7e0 ffd9 	bl	80002f8 <__aeabi_dsub>
 801f346:	4b4f      	ldr	r3, [pc, #316]	@ (801f484 <atan+0x314>)
 801f348:	4606      	mov	r6, r0
 801f34a:	460f      	mov	r7, r1
 801f34c:	2200      	movs	r2, #0
 801f34e:	4620      	mov	r0, r4
 801f350:	4629      	mov	r1, r5
 801f352:	f7e0 ffd3 	bl	80002fc <__adddf3>
 801f356:	4602      	mov	r2, r0
 801f358:	460b      	mov	r3, r1
 801f35a:	4630      	mov	r0, r6
 801f35c:	4639      	mov	r1, r7
 801f35e:	f7e1 faad 	bl	80008bc <__aeabi_ddiv>
 801f362:	f04f 0a01 	mov.w	sl, #1
 801f366:	4604      	mov	r4, r0
 801f368:	460d      	mov	r5, r1
 801f36a:	e765      	b.n	801f238 <atan+0xc8>
 801f36c:	4b47      	ldr	r3, [pc, #284]	@ (801f48c <atan+0x31c>)
 801f36e:	429e      	cmp	r6, r3
 801f370:	d21c      	bcs.n	801f3ac <atan+0x23c>
 801f372:	4b47      	ldr	r3, [pc, #284]	@ (801f490 <atan+0x320>)
 801f374:	2200      	movs	r2, #0
 801f376:	4620      	mov	r0, r4
 801f378:	4629      	mov	r1, r5
 801f37a:	f7e0 ffbd 	bl	80002f8 <__aeabi_dsub>
 801f37e:	4b44      	ldr	r3, [pc, #272]	@ (801f490 <atan+0x320>)
 801f380:	4606      	mov	r6, r0
 801f382:	460f      	mov	r7, r1
 801f384:	2200      	movs	r2, #0
 801f386:	4620      	mov	r0, r4
 801f388:	4629      	mov	r1, r5
 801f38a:	f7e1 f96d 	bl	8000668 <__aeabi_dmul>
 801f38e:	4b3d      	ldr	r3, [pc, #244]	@ (801f484 <atan+0x314>)
 801f390:	2200      	movs	r2, #0
 801f392:	f7e0 ffb3 	bl	80002fc <__adddf3>
 801f396:	4602      	mov	r2, r0
 801f398:	460b      	mov	r3, r1
 801f39a:	4630      	mov	r0, r6
 801f39c:	4639      	mov	r1, r7
 801f39e:	f7e1 fa8d 	bl	80008bc <__aeabi_ddiv>
 801f3a2:	f04f 0a02 	mov.w	sl, #2
 801f3a6:	4604      	mov	r4, r0
 801f3a8:	460d      	mov	r5, r1
 801f3aa:	e745      	b.n	801f238 <atan+0xc8>
 801f3ac:	4622      	mov	r2, r4
 801f3ae:	462b      	mov	r3, r5
 801f3b0:	4938      	ldr	r1, [pc, #224]	@ (801f494 <atan+0x324>)
 801f3b2:	2000      	movs	r0, #0
 801f3b4:	f7e1 fa82 	bl	80008bc <__aeabi_ddiv>
 801f3b8:	f04f 0a03 	mov.w	sl, #3
 801f3bc:	4604      	mov	r4, r0
 801f3be:	460d      	mov	r5, r1
 801f3c0:	e73a      	b.n	801f238 <atan+0xc8>
 801f3c2:	4b35      	ldr	r3, [pc, #212]	@ (801f498 <atan+0x328>)
 801f3c4:	4e35      	ldr	r6, [pc, #212]	@ (801f49c <atan+0x32c>)
 801f3c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ce:	f7e0 ff93 	bl	80002f8 <__aeabi_dsub>
 801f3d2:	4622      	mov	r2, r4
 801f3d4:	462b      	mov	r3, r5
 801f3d6:	f7e0 ff8f 	bl	80002f8 <__aeabi_dsub>
 801f3da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801f3de:	4602      	mov	r2, r0
 801f3e0:	460b      	mov	r3, r1
 801f3e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 801f3e6:	f7e0 ff87 	bl	80002f8 <__aeabi_dsub>
 801f3ea:	f1bb 0f00 	cmp.w	fp, #0
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	460d      	mov	r5, r1
 801f3f2:	f6bf aedc 	bge.w	801f1ae <atan+0x3e>
 801f3f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f3fa:	461d      	mov	r5, r3
 801f3fc:	e6d7      	b.n	801f1ae <atan+0x3e>
 801f3fe:	a51c      	add	r5, pc, #112	@ (adr r5, 801f470 <atan+0x300>)
 801f400:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f404:	e6d3      	b.n	801f1ae <atan+0x3e>
 801f406:	bf00      	nop
 801f408:	54442d18 	.word	0x54442d18
 801f40c:	3ff921fb 	.word	0x3ff921fb
 801f410:	8800759c 	.word	0x8800759c
 801f414:	7e37e43c 	.word	0x7e37e43c
 801f418:	e322da11 	.word	0xe322da11
 801f41c:	3f90ad3a 	.word	0x3f90ad3a
 801f420:	24760deb 	.word	0x24760deb
 801f424:	3fa97b4b 	.word	0x3fa97b4b
 801f428:	a0d03d51 	.word	0xa0d03d51
 801f42c:	3fb10d66 	.word	0x3fb10d66
 801f430:	c54c206e 	.word	0xc54c206e
 801f434:	3fb745cd 	.word	0x3fb745cd
 801f438:	920083ff 	.word	0x920083ff
 801f43c:	3fc24924 	.word	0x3fc24924
 801f440:	5555550d 	.word	0x5555550d
 801f444:	3fd55555 	.word	0x3fd55555
 801f448:	2c6a6c2f 	.word	0x2c6a6c2f
 801f44c:	bfa2b444 	.word	0xbfa2b444
 801f450:	52defd9a 	.word	0x52defd9a
 801f454:	3fadde2d 	.word	0x3fadde2d
 801f458:	af749a6d 	.word	0xaf749a6d
 801f45c:	3fb3b0f2 	.word	0x3fb3b0f2
 801f460:	fe231671 	.word	0xfe231671
 801f464:	3fbc71c6 	.word	0x3fbc71c6
 801f468:	9998ebc4 	.word	0x9998ebc4
 801f46c:	3fc99999 	.word	0x3fc99999
 801f470:	54442d18 	.word	0x54442d18
 801f474:	bff921fb 	.word	0xbff921fb
 801f478:	440fffff 	.word	0x440fffff
 801f47c:	7ff00000 	.word	0x7ff00000
 801f480:	3fdbffff 	.word	0x3fdbffff
 801f484:	3ff00000 	.word	0x3ff00000
 801f488:	3ff2ffff 	.word	0x3ff2ffff
 801f48c:	40038000 	.word	0x40038000
 801f490:	3ff80000 	.word	0x3ff80000
 801f494:	bff00000 	.word	0xbff00000
 801f498:	08021d10 	.word	0x08021d10
 801f49c:	08021d30 	.word	0x08021d30

0801f4a0 <fabs>:
 801f4a0:	ec51 0b10 	vmov	r0, r1, d0
 801f4a4:	4602      	mov	r2, r0
 801f4a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f4aa:	ec43 2b10 	vmov	d0, r2, r3
 801f4ae:	4770      	bx	lr

0801f4b0 <finite>:
 801f4b0:	b082      	sub	sp, #8
 801f4b2:	ed8d 0b00 	vstr	d0, [sp]
 801f4b6:	9801      	ldr	r0, [sp, #4]
 801f4b8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801f4bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801f4c0:	0fc0      	lsrs	r0, r0, #31
 801f4c2:	b002      	add	sp, #8
 801f4c4:	4770      	bx	lr
	...

0801f4c8 <__ieee754_sqrt>:
 801f4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4cc:	4a68      	ldr	r2, [pc, #416]	@ (801f670 <__ieee754_sqrt+0x1a8>)
 801f4ce:	ec55 4b10 	vmov	r4, r5, d0
 801f4d2:	43aa      	bics	r2, r5
 801f4d4:	462b      	mov	r3, r5
 801f4d6:	4621      	mov	r1, r4
 801f4d8:	d110      	bne.n	801f4fc <__ieee754_sqrt+0x34>
 801f4da:	4622      	mov	r2, r4
 801f4dc:	4620      	mov	r0, r4
 801f4de:	4629      	mov	r1, r5
 801f4e0:	f7e1 f8c2 	bl	8000668 <__aeabi_dmul>
 801f4e4:	4602      	mov	r2, r0
 801f4e6:	460b      	mov	r3, r1
 801f4e8:	4620      	mov	r0, r4
 801f4ea:	4629      	mov	r1, r5
 801f4ec:	f7e0 ff06 	bl	80002fc <__adddf3>
 801f4f0:	4604      	mov	r4, r0
 801f4f2:	460d      	mov	r5, r1
 801f4f4:	ec45 4b10 	vmov	d0, r4, r5
 801f4f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4fc:	2d00      	cmp	r5, #0
 801f4fe:	dc0e      	bgt.n	801f51e <__ieee754_sqrt+0x56>
 801f500:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f504:	4322      	orrs	r2, r4
 801f506:	d0f5      	beq.n	801f4f4 <__ieee754_sqrt+0x2c>
 801f508:	b19d      	cbz	r5, 801f532 <__ieee754_sqrt+0x6a>
 801f50a:	4622      	mov	r2, r4
 801f50c:	4620      	mov	r0, r4
 801f50e:	4629      	mov	r1, r5
 801f510:	f7e0 fef2 	bl	80002f8 <__aeabi_dsub>
 801f514:	4602      	mov	r2, r0
 801f516:	460b      	mov	r3, r1
 801f518:	f7e1 f9d0 	bl	80008bc <__aeabi_ddiv>
 801f51c:	e7e8      	b.n	801f4f0 <__ieee754_sqrt+0x28>
 801f51e:	152a      	asrs	r2, r5, #20
 801f520:	d115      	bne.n	801f54e <__ieee754_sqrt+0x86>
 801f522:	2000      	movs	r0, #0
 801f524:	e009      	b.n	801f53a <__ieee754_sqrt+0x72>
 801f526:	0acb      	lsrs	r3, r1, #11
 801f528:	3a15      	subs	r2, #21
 801f52a:	0549      	lsls	r1, r1, #21
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d0fa      	beq.n	801f526 <__ieee754_sqrt+0x5e>
 801f530:	e7f7      	b.n	801f522 <__ieee754_sqrt+0x5a>
 801f532:	462a      	mov	r2, r5
 801f534:	e7fa      	b.n	801f52c <__ieee754_sqrt+0x64>
 801f536:	005b      	lsls	r3, r3, #1
 801f538:	3001      	adds	r0, #1
 801f53a:	02dc      	lsls	r4, r3, #11
 801f53c:	d5fb      	bpl.n	801f536 <__ieee754_sqrt+0x6e>
 801f53e:	1e44      	subs	r4, r0, #1
 801f540:	1b12      	subs	r2, r2, r4
 801f542:	f1c0 0420 	rsb	r4, r0, #32
 801f546:	fa21 f404 	lsr.w	r4, r1, r4
 801f54a:	4323      	orrs	r3, r4
 801f54c:	4081      	lsls	r1, r0
 801f54e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f552:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f55a:	07d2      	lsls	r2, r2, #31
 801f55c:	bf5c      	itt	pl
 801f55e:	005b      	lslpl	r3, r3, #1
 801f560:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f564:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f568:	bf58      	it	pl
 801f56a:	0049      	lslpl	r1, r1, #1
 801f56c:	2600      	movs	r6, #0
 801f56e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f572:	106d      	asrs	r5, r5, #1
 801f574:	0049      	lsls	r1, r1, #1
 801f576:	2016      	movs	r0, #22
 801f578:	4632      	mov	r2, r6
 801f57a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f57e:	1917      	adds	r7, r2, r4
 801f580:	429f      	cmp	r7, r3
 801f582:	bfde      	ittt	le
 801f584:	193a      	addle	r2, r7, r4
 801f586:	1bdb      	suble	r3, r3, r7
 801f588:	1936      	addle	r6, r6, r4
 801f58a:	0fcf      	lsrs	r7, r1, #31
 801f58c:	3801      	subs	r0, #1
 801f58e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f592:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f596:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f59a:	d1f0      	bne.n	801f57e <__ieee754_sqrt+0xb6>
 801f59c:	4604      	mov	r4, r0
 801f59e:	2720      	movs	r7, #32
 801f5a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f5a4:	429a      	cmp	r2, r3
 801f5a6:	eb00 0e0c 	add.w	lr, r0, ip
 801f5aa:	db02      	blt.n	801f5b2 <__ieee754_sqrt+0xea>
 801f5ac:	d113      	bne.n	801f5d6 <__ieee754_sqrt+0x10e>
 801f5ae:	458e      	cmp	lr, r1
 801f5b0:	d811      	bhi.n	801f5d6 <__ieee754_sqrt+0x10e>
 801f5b2:	f1be 0f00 	cmp.w	lr, #0
 801f5b6:	eb0e 000c 	add.w	r0, lr, ip
 801f5ba:	da42      	bge.n	801f642 <__ieee754_sqrt+0x17a>
 801f5bc:	2800      	cmp	r0, #0
 801f5be:	db40      	blt.n	801f642 <__ieee754_sqrt+0x17a>
 801f5c0:	f102 0801 	add.w	r8, r2, #1
 801f5c4:	1a9b      	subs	r3, r3, r2
 801f5c6:	458e      	cmp	lr, r1
 801f5c8:	bf88      	it	hi
 801f5ca:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801f5ce:	eba1 010e 	sub.w	r1, r1, lr
 801f5d2:	4464      	add	r4, ip
 801f5d4:	4642      	mov	r2, r8
 801f5d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f5da:	3f01      	subs	r7, #1
 801f5dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f5e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f5e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f5e8:	d1dc      	bne.n	801f5a4 <__ieee754_sqrt+0xdc>
 801f5ea:	4319      	orrs	r1, r3
 801f5ec:	d01b      	beq.n	801f626 <__ieee754_sqrt+0x15e>
 801f5ee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f674 <__ieee754_sqrt+0x1ac>
 801f5f2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f678 <__ieee754_sqrt+0x1b0>
 801f5f6:	e9da 0100 	ldrd	r0, r1, [sl]
 801f5fa:	e9db 2300 	ldrd	r2, r3, [fp]
 801f5fe:	f7e0 fe7b 	bl	80002f8 <__aeabi_dsub>
 801f602:	e9da 8900 	ldrd	r8, r9, [sl]
 801f606:	4602      	mov	r2, r0
 801f608:	460b      	mov	r3, r1
 801f60a:	4640      	mov	r0, r8
 801f60c:	4649      	mov	r1, r9
 801f60e:	f7e1 faa7 	bl	8000b60 <__aeabi_dcmple>
 801f612:	b140      	cbz	r0, 801f626 <__ieee754_sqrt+0x15e>
 801f614:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801f618:	e9da 0100 	ldrd	r0, r1, [sl]
 801f61c:	e9db 2300 	ldrd	r2, r3, [fp]
 801f620:	d111      	bne.n	801f646 <__ieee754_sqrt+0x17e>
 801f622:	3601      	adds	r6, #1
 801f624:	463c      	mov	r4, r7
 801f626:	1072      	asrs	r2, r6, #1
 801f628:	0863      	lsrs	r3, r4, #1
 801f62a:	07f1      	lsls	r1, r6, #31
 801f62c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f630:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f634:	bf48      	it	mi
 801f636:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f63a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f63e:	4618      	mov	r0, r3
 801f640:	e756      	b.n	801f4f0 <__ieee754_sqrt+0x28>
 801f642:	4690      	mov	r8, r2
 801f644:	e7be      	b.n	801f5c4 <__ieee754_sqrt+0xfc>
 801f646:	f7e0 fe59 	bl	80002fc <__adddf3>
 801f64a:	e9da 8900 	ldrd	r8, r9, [sl]
 801f64e:	4602      	mov	r2, r0
 801f650:	460b      	mov	r3, r1
 801f652:	4640      	mov	r0, r8
 801f654:	4649      	mov	r1, r9
 801f656:	f7e1 fa79 	bl	8000b4c <__aeabi_dcmplt>
 801f65a:	b120      	cbz	r0, 801f666 <__ieee754_sqrt+0x19e>
 801f65c:	1ca0      	adds	r0, r4, #2
 801f65e:	bf08      	it	eq
 801f660:	3601      	addeq	r6, #1
 801f662:	3402      	adds	r4, #2
 801f664:	e7df      	b.n	801f626 <__ieee754_sqrt+0x15e>
 801f666:	1c63      	adds	r3, r4, #1
 801f668:	f023 0401 	bic.w	r4, r3, #1
 801f66c:	e7db      	b.n	801f626 <__ieee754_sqrt+0x15e>
 801f66e:	bf00      	nop
 801f670:	7ff00000 	.word	0x7ff00000
 801f674:	20001c50 	.word	0x20001c50
 801f678:	20001c48 	.word	0x20001c48
 801f67c:	00000000 	.word	0x00000000

0801f680 <__ieee754_pow>:
 801f680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f684:	b091      	sub	sp, #68	@ 0x44
 801f686:	ed8d 1b00 	vstr	d1, [sp]
 801f68a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801f68e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801f692:	ea5a 0001 	orrs.w	r0, sl, r1
 801f696:	ec57 6b10 	vmov	r6, r7, d0
 801f69a:	d113      	bne.n	801f6c4 <__ieee754_pow+0x44>
 801f69c:	19b3      	adds	r3, r6, r6
 801f69e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801f6a2:	4152      	adcs	r2, r2
 801f6a4:	4298      	cmp	r0, r3
 801f6a6:	4b98      	ldr	r3, [pc, #608]	@ (801f908 <__ieee754_pow+0x288>)
 801f6a8:	4193      	sbcs	r3, r2
 801f6aa:	f080 84ea 	bcs.w	8020082 <__ieee754_pow+0xa02>
 801f6ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6b2:	4630      	mov	r0, r6
 801f6b4:	4639      	mov	r1, r7
 801f6b6:	f7e0 fe21 	bl	80002fc <__adddf3>
 801f6ba:	ec41 0b10 	vmov	d0, r0, r1
 801f6be:	b011      	add	sp, #68	@ 0x44
 801f6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6c4:	4a91      	ldr	r2, [pc, #580]	@ (801f90c <__ieee754_pow+0x28c>)
 801f6c6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801f6ca:	4590      	cmp	r8, r2
 801f6cc:	463d      	mov	r5, r7
 801f6ce:	4633      	mov	r3, r6
 801f6d0:	d806      	bhi.n	801f6e0 <__ieee754_pow+0x60>
 801f6d2:	d101      	bne.n	801f6d8 <__ieee754_pow+0x58>
 801f6d4:	2e00      	cmp	r6, #0
 801f6d6:	d1ea      	bne.n	801f6ae <__ieee754_pow+0x2e>
 801f6d8:	4592      	cmp	sl, r2
 801f6da:	d801      	bhi.n	801f6e0 <__ieee754_pow+0x60>
 801f6dc:	d10e      	bne.n	801f6fc <__ieee754_pow+0x7c>
 801f6de:	b169      	cbz	r1, 801f6fc <__ieee754_pow+0x7c>
 801f6e0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801f6e4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801f6e8:	431d      	orrs	r5, r3
 801f6ea:	d1e0      	bne.n	801f6ae <__ieee754_pow+0x2e>
 801f6ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f6f0:	18db      	adds	r3, r3, r3
 801f6f2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801f6f6:	4152      	adcs	r2, r2
 801f6f8:	429d      	cmp	r5, r3
 801f6fa:	e7d4      	b.n	801f6a6 <__ieee754_pow+0x26>
 801f6fc:	2d00      	cmp	r5, #0
 801f6fe:	46c3      	mov	fp, r8
 801f700:	da3a      	bge.n	801f778 <__ieee754_pow+0xf8>
 801f702:	4a83      	ldr	r2, [pc, #524]	@ (801f910 <__ieee754_pow+0x290>)
 801f704:	4592      	cmp	sl, r2
 801f706:	d84d      	bhi.n	801f7a4 <__ieee754_pow+0x124>
 801f708:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801f70c:	4592      	cmp	sl, r2
 801f70e:	f240 84c7 	bls.w	80200a0 <__ieee754_pow+0xa20>
 801f712:	ea4f 522a 	mov.w	r2, sl, asr #20
 801f716:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801f71a:	2a14      	cmp	r2, #20
 801f71c:	dd0f      	ble.n	801f73e <__ieee754_pow+0xbe>
 801f71e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801f722:	fa21 f402 	lsr.w	r4, r1, r2
 801f726:	fa04 f202 	lsl.w	r2, r4, r2
 801f72a:	428a      	cmp	r2, r1
 801f72c:	f040 84b8 	bne.w	80200a0 <__ieee754_pow+0xa20>
 801f730:	f004 0401 	and.w	r4, r4, #1
 801f734:	f1c4 0402 	rsb	r4, r4, #2
 801f738:	2900      	cmp	r1, #0
 801f73a:	d158      	bne.n	801f7ee <__ieee754_pow+0x16e>
 801f73c:	e00e      	b.n	801f75c <__ieee754_pow+0xdc>
 801f73e:	2900      	cmp	r1, #0
 801f740:	d154      	bne.n	801f7ec <__ieee754_pow+0x16c>
 801f742:	f1c2 0214 	rsb	r2, r2, #20
 801f746:	fa4a f402 	asr.w	r4, sl, r2
 801f74a:	fa04 f202 	lsl.w	r2, r4, r2
 801f74e:	4552      	cmp	r2, sl
 801f750:	f040 84a3 	bne.w	802009a <__ieee754_pow+0xa1a>
 801f754:	f004 0401 	and.w	r4, r4, #1
 801f758:	f1c4 0402 	rsb	r4, r4, #2
 801f75c:	4a6d      	ldr	r2, [pc, #436]	@ (801f914 <__ieee754_pow+0x294>)
 801f75e:	4592      	cmp	sl, r2
 801f760:	d12e      	bne.n	801f7c0 <__ieee754_pow+0x140>
 801f762:	f1b9 0f00 	cmp.w	r9, #0
 801f766:	f280 8494 	bge.w	8020092 <__ieee754_pow+0xa12>
 801f76a:	496a      	ldr	r1, [pc, #424]	@ (801f914 <__ieee754_pow+0x294>)
 801f76c:	4632      	mov	r2, r6
 801f76e:	463b      	mov	r3, r7
 801f770:	2000      	movs	r0, #0
 801f772:	f7e1 f8a3 	bl	80008bc <__aeabi_ddiv>
 801f776:	e7a0      	b.n	801f6ba <__ieee754_pow+0x3a>
 801f778:	2400      	movs	r4, #0
 801f77a:	bbc1      	cbnz	r1, 801f7ee <__ieee754_pow+0x16e>
 801f77c:	4a63      	ldr	r2, [pc, #396]	@ (801f90c <__ieee754_pow+0x28c>)
 801f77e:	4592      	cmp	sl, r2
 801f780:	d1ec      	bne.n	801f75c <__ieee754_pow+0xdc>
 801f782:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801f786:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801f78a:	431a      	orrs	r2, r3
 801f78c:	f000 8479 	beq.w	8020082 <__ieee754_pow+0xa02>
 801f790:	4b61      	ldr	r3, [pc, #388]	@ (801f918 <__ieee754_pow+0x298>)
 801f792:	4598      	cmp	r8, r3
 801f794:	d908      	bls.n	801f7a8 <__ieee754_pow+0x128>
 801f796:	f1b9 0f00 	cmp.w	r9, #0
 801f79a:	f2c0 8476 	blt.w	802008a <__ieee754_pow+0xa0a>
 801f79e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f7a2:	e78a      	b.n	801f6ba <__ieee754_pow+0x3a>
 801f7a4:	2402      	movs	r4, #2
 801f7a6:	e7e8      	b.n	801f77a <__ieee754_pow+0xfa>
 801f7a8:	f1b9 0f00 	cmp.w	r9, #0
 801f7ac:	f04f 0000 	mov.w	r0, #0
 801f7b0:	f04f 0100 	mov.w	r1, #0
 801f7b4:	da81      	bge.n	801f6ba <__ieee754_pow+0x3a>
 801f7b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801f7ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f7be:	e77c      	b.n	801f6ba <__ieee754_pow+0x3a>
 801f7c0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801f7c4:	d106      	bne.n	801f7d4 <__ieee754_pow+0x154>
 801f7c6:	4632      	mov	r2, r6
 801f7c8:	463b      	mov	r3, r7
 801f7ca:	4630      	mov	r0, r6
 801f7cc:	4639      	mov	r1, r7
 801f7ce:	f7e0 ff4b 	bl	8000668 <__aeabi_dmul>
 801f7d2:	e772      	b.n	801f6ba <__ieee754_pow+0x3a>
 801f7d4:	4a51      	ldr	r2, [pc, #324]	@ (801f91c <__ieee754_pow+0x29c>)
 801f7d6:	4591      	cmp	r9, r2
 801f7d8:	d109      	bne.n	801f7ee <__ieee754_pow+0x16e>
 801f7da:	2d00      	cmp	r5, #0
 801f7dc:	db07      	blt.n	801f7ee <__ieee754_pow+0x16e>
 801f7de:	ec47 6b10 	vmov	d0, r6, r7
 801f7e2:	b011      	add	sp, #68	@ 0x44
 801f7e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7e8:	f7ff be6e 	b.w	801f4c8 <__ieee754_sqrt>
 801f7ec:	2400      	movs	r4, #0
 801f7ee:	ec47 6b10 	vmov	d0, r6, r7
 801f7f2:	9302      	str	r3, [sp, #8]
 801f7f4:	f7ff fe54 	bl	801f4a0 <fabs>
 801f7f8:	9b02      	ldr	r3, [sp, #8]
 801f7fa:	ec51 0b10 	vmov	r0, r1, d0
 801f7fe:	bb53      	cbnz	r3, 801f856 <__ieee754_pow+0x1d6>
 801f800:	4b44      	ldr	r3, [pc, #272]	@ (801f914 <__ieee754_pow+0x294>)
 801f802:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801f806:	429a      	cmp	r2, r3
 801f808:	d002      	beq.n	801f810 <__ieee754_pow+0x190>
 801f80a:	f1b8 0f00 	cmp.w	r8, #0
 801f80e:	d122      	bne.n	801f856 <__ieee754_pow+0x1d6>
 801f810:	f1b9 0f00 	cmp.w	r9, #0
 801f814:	da05      	bge.n	801f822 <__ieee754_pow+0x1a2>
 801f816:	4602      	mov	r2, r0
 801f818:	460b      	mov	r3, r1
 801f81a:	2000      	movs	r0, #0
 801f81c:	493d      	ldr	r1, [pc, #244]	@ (801f914 <__ieee754_pow+0x294>)
 801f81e:	f7e1 f84d 	bl	80008bc <__aeabi_ddiv>
 801f822:	2d00      	cmp	r5, #0
 801f824:	f6bf af49 	bge.w	801f6ba <__ieee754_pow+0x3a>
 801f828:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801f82c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801f830:	ea58 0804 	orrs.w	r8, r8, r4
 801f834:	d108      	bne.n	801f848 <__ieee754_pow+0x1c8>
 801f836:	4602      	mov	r2, r0
 801f838:	460b      	mov	r3, r1
 801f83a:	4610      	mov	r0, r2
 801f83c:	4619      	mov	r1, r3
 801f83e:	f7e0 fd5b 	bl	80002f8 <__aeabi_dsub>
 801f842:	4602      	mov	r2, r0
 801f844:	460b      	mov	r3, r1
 801f846:	e794      	b.n	801f772 <__ieee754_pow+0xf2>
 801f848:	2c01      	cmp	r4, #1
 801f84a:	f47f af36 	bne.w	801f6ba <__ieee754_pow+0x3a>
 801f84e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f852:	4619      	mov	r1, r3
 801f854:	e731      	b.n	801f6ba <__ieee754_pow+0x3a>
 801f856:	0feb      	lsrs	r3, r5, #31
 801f858:	3b01      	subs	r3, #1
 801f85a:	ea53 0204 	orrs.w	r2, r3, r4
 801f85e:	d102      	bne.n	801f866 <__ieee754_pow+0x1e6>
 801f860:	4632      	mov	r2, r6
 801f862:	463b      	mov	r3, r7
 801f864:	e7e9      	b.n	801f83a <__ieee754_pow+0x1ba>
 801f866:	3c01      	subs	r4, #1
 801f868:	431c      	orrs	r4, r3
 801f86a:	d016      	beq.n	801f89a <__ieee754_pow+0x21a>
 801f86c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801f8f8 <__ieee754_pow+0x278>
 801f870:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801f874:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f878:	f240 8112 	bls.w	801faa0 <__ieee754_pow+0x420>
 801f87c:	4b28      	ldr	r3, [pc, #160]	@ (801f920 <__ieee754_pow+0x2a0>)
 801f87e:	459a      	cmp	sl, r3
 801f880:	4b25      	ldr	r3, [pc, #148]	@ (801f918 <__ieee754_pow+0x298>)
 801f882:	d916      	bls.n	801f8b2 <__ieee754_pow+0x232>
 801f884:	4598      	cmp	r8, r3
 801f886:	d80b      	bhi.n	801f8a0 <__ieee754_pow+0x220>
 801f888:	f1b9 0f00 	cmp.w	r9, #0
 801f88c:	da0b      	bge.n	801f8a6 <__ieee754_pow+0x226>
 801f88e:	2000      	movs	r0, #0
 801f890:	b011      	add	sp, #68	@ 0x44
 801f892:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f896:	f000 bceb 	b.w	8020270 <__math_oflow>
 801f89a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801f900 <__ieee754_pow+0x280>
 801f89e:	e7e7      	b.n	801f870 <__ieee754_pow+0x1f0>
 801f8a0:	f1b9 0f00 	cmp.w	r9, #0
 801f8a4:	dcf3      	bgt.n	801f88e <__ieee754_pow+0x20e>
 801f8a6:	2000      	movs	r0, #0
 801f8a8:	b011      	add	sp, #68	@ 0x44
 801f8aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8ae:	f000 bcd7 	b.w	8020260 <__math_uflow>
 801f8b2:	4598      	cmp	r8, r3
 801f8b4:	d20c      	bcs.n	801f8d0 <__ieee754_pow+0x250>
 801f8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8ba:	2200      	movs	r2, #0
 801f8bc:	2300      	movs	r3, #0
 801f8be:	f7e1 f945 	bl	8000b4c <__aeabi_dcmplt>
 801f8c2:	3800      	subs	r0, #0
 801f8c4:	bf18      	it	ne
 801f8c6:	2001      	movne	r0, #1
 801f8c8:	f1b9 0f00 	cmp.w	r9, #0
 801f8cc:	daec      	bge.n	801f8a8 <__ieee754_pow+0x228>
 801f8ce:	e7df      	b.n	801f890 <__ieee754_pow+0x210>
 801f8d0:	4b10      	ldr	r3, [pc, #64]	@ (801f914 <__ieee754_pow+0x294>)
 801f8d2:	4598      	cmp	r8, r3
 801f8d4:	f04f 0200 	mov.w	r2, #0
 801f8d8:	d924      	bls.n	801f924 <__ieee754_pow+0x2a4>
 801f8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f8de:	2300      	movs	r3, #0
 801f8e0:	f7e1 f934 	bl	8000b4c <__aeabi_dcmplt>
 801f8e4:	3800      	subs	r0, #0
 801f8e6:	bf18      	it	ne
 801f8e8:	2001      	movne	r0, #1
 801f8ea:	f1b9 0f00 	cmp.w	r9, #0
 801f8ee:	dccf      	bgt.n	801f890 <__ieee754_pow+0x210>
 801f8f0:	e7da      	b.n	801f8a8 <__ieee754_pow+0x228>
 801f8f2:	bf00      	nop
 801f8f4:	f3af 8000 	nop.w
 801f8f8:	00000000 	.word	0x00000000
 801f8fc:	3ff00000 	.word	0x3ff00000
 801f900:	00000000 	.word	0x00000000
 801f904:	bff00000 	.word	0xbff00000
 801f908:	fff00000 	.word	0xfff00000
 801f90c:	7ff00000 	.word	0x7ff00000
 801f910:	433fffff 	.word	0x433fffff
 801f914:	3ff00000 	.word	0x3ff00000
 801f918:	3fefffff 	.word	0x3fefffff
 801f91c:	3fe00000 	.word	0x3fe00000
 801f920:	43f00000 	.word	0x43f00000
 801f924:	4b5a      	ldr	r3, [pc, #360]	@ (801fa90 <__ieee754_pow+0x410>)
 801f926:	f7e0 fce7 	bl	80002f8 <__aeabi_dsub>
 801f92a:	a351      	add	r3, pc, #324	@ (adr r3, 801fa70 <__ieee754_pow+0x3f0>)
 801f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f930:	4604      	mov	r4, r0
 801f932:	460d      	mov	r5, r1
 801f934:	f7e0 fe98 	bl	8000668 <__aeabi_dmul>
 801f938:	a34f      	add	r3, pc, #316	@ (adr r3, 801fa78 <__ieee754_pow+0x3f8>)
 801f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f93e:	4606      	mov	r6, r0
 801f940:	460f      	mov	r7, r1
 801f942:	4620      	mov	r0, r4
 801f944:	4629      	mov	r1, r5
 801f946:	f7e0 fe8f 	bl	8000668 <__aeabi_dmul>
 801f94a:	4b52      	ldr	r3, [pc, #328]	@ (801fa94 <__ieee754_pow+0x414>)
 801f94c:	4682      	mov	sl, r0
 801f94e:	468b      	mov	fp, r1
 801f950:	2200      	movs	r2, #0
 801f952:	4620      	mov	r0, r4
 801f954:	4629      	mov	r1, r5
 801f956:	f7e0 fe87 	bl	8000668 <__aeabi_dmul>
 801f95a:	4602      	mov	r2, r0
 801f95c:	460b      	mov	r3, r1
 801f95e:	a148      	add	r1, pc, #288	@ (adr r1, 801fa80 <__ieee754_pow+0x400>)
 801f960:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f964:	f7e0 fcc8 	bl	80002f8 <__aeabi_dsub>
 801f968:	4622      	mov	r2, r4
 801f96a:	462b      	mov	r3, r5
 801f96c:	f7e0 fe7c 	bl	8000668 <__aeabi_dmul>
 801f970:	4602      	mov	r2, r0
 801f972:	460b      	mov	r3, r1
 801f974:	2000      	movs	r0, #0
 801f976:	4948      	ldr	r1, [pc, #288]	@ (801fa98 <__ieee754_pow+0x418>)
 801f978:	f7e0 fcbe 	bl	80002f8 <__aeabi_dsub>
 801f97c:	4622      	mov	r2, r4
 801f97e:	4680      	mov	r8, r0
 801f980:	4689      	mov	r9, r1
 801f982:	462b      	mov	r3, r5
 801f984:	4620      	mov	r0, r4
 801f986:	4629      	mov	r1, r5
 801f988:	f7e0 fe6e 	bl	8000668 <__aeabi_dmul>
 801f98c:	4602      	mov	r2, r0
 801f98e:	460b      	mov	r3, r1
 801f990:	4640      	mov	r0, r8
 801f992:	4649      	mov	r1, r9
 801f994:	f7e0 fe68 	bl	8000668 <__aeabi_dmul>
 801f998:	a33b      	add	r3, pc, #236	@ (adr r3, 801fa88 <__ieee754_pow+0x408>)
 801f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f99e:	f7e0 fe63 	bl	8000668 <__aeabi_dmul>
 801f9a2:	4602      	mov	r2, r0
 801f9a4:	460b      	mov	r3, r1
 801f9a6:	4650      	mov	r0, sl
 801f9a8:	4659      	mov	r1, fp
 801f9aa:	f7e0 fca5 	bl	80002f8 <__aeabi_dsub>
 801f9ae:	4602      	mov	r2, r0
 801f9b0:	460b      	mov	r3, r1
 801f9b2:	4680      	mov	r8, r0
 801f9b4:	4689      	mov	r9, r1
 801f9b6:	4630      	mov	r0, r6
 801f9b8:	4639      	mov	r1, r7
 801f9ba:	f7e0 fc9f 	bl	80002fc <__adddf3>
 801f9be:	2400      	movs	r4, #0
 801f9c0:	4632      	mov	r2, r6
 801f9c2:	463b      	mov	r3, r7
 801f9c4:	4620      	mov	r0, r4
 801f9c6:	460d      	mov	r5, r1
 801f9c8:	f7e0 fc96 	bl	80002f8 <__aeabi_dsub>
 801f9cc:	4602      	mov	r2, r0
 801f9ce:	460b      	mov	r3, r1
 801f9d0:	4640      	mov	r0, r8
 801f9d2:	4649      	mov	r1, r9
 801f9d4:	f7e0 fc90 	bl	80002f8 <__aeabi_dsub>
 801f9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f9dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	9304      	str	r3, [sp, #16]
 801f9e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f9e8:	4606      	mov	r6, r0
 801f9ea:	460f      	mov	r7, r1
 801f9ec:	4652      	mov	r2, sl
 801f9ee:	465b      	mov	r3, fp
 801f9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f9f4:	f7e0 fc80 	bl	80002f8 <__aeabi_dsub>
 801f9f8:	4622      	mov	r2, r4
 801f9fa:	462b      	mov	r3, r5
 801f9fc:	f7e0 fe34 	bl	8000668 <__aeabi_dmul>
 801fa00:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa04:	4680      	mov	r8, r0
 801fa06:	4689      	mov	r9, r1
 801fa08:	4630      	mov	r0, r6
 801fa0a:	4639      	mov	r1, r7
 801fa0c:	f7e0 fe2c 	bl	8000668 <__aeabi_dmul>
 801fa10:	4602      	mov	r2, r0
 801fa12:	460b      	mov	r3, r1
 801fa14:	4640      	mov	r0, r8
 801fa16:	4649      	mov	r1, r9
 801fa18:	f7e0 fc70 	bl	80002fc <__adddf3>
 801fa1c:	4652      	mov	r2, sl
 801fa1e:	465b      	mov	r3, fp
 801fa20:	4606      	mov	r6, r0
 801fa22:	460f      	mov	r7, r1
 801fa24:	4620      	mov	r0, r4
 801fa26:	4629      	mov	r1, r5
 801fa28:	f7e0 fe1e 	bl	8000668 <__aeabi_dmul>
 801fa2c:	460b      	mov	r3, r1
 801fa2e:	4602      	mov	r2, r0
 801fa30:	4680      	mov	r8, r0
 801fa32:	4689      	mov	r9, r1
 801fa34:	4630      	mov	r0, r6
 801fa36:	4639      	mov	r1, r7
 801fa38:	f7e0 fc60 	bl	80002fc <__adddf3>
 801fa3c:	4b17      	ldr	r3, [pc, #92]	@ (801fa9c <__ieee754_pow+0x41c>)
 801fa3e:	4299      	cmp	r1, r3
 801fa40:	4604      	mov	r4, r0
 801fa42:	460d      	mov	r5, r1
 801fa44:	468a      	mov	sl, r1
 801fa46:	468b      	mov	fp, r1
 801fa48:	f340 82ef 	ble.w	802002a <__ieee754_pow+0x9aa>
 801fa4c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801fa50:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801fa54:	4303      	orrs	r3, r0
 801fa56:	f000 81e8 	beq.w	801fe2a <__ieee754_pow+0x7aa>
 801fa5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fa5e:	2200      	movs	r2, #0
 801fa60:	2300      	movs	r3, #0
 801fa62:	f7e1 f873 	bl	8000b4c <__aeabi_dcmplt>
 801fa66:	3800      	subs	r0, #0
 801fa68:	bf18      	it	ne
 801fa6a:	2001      	movne	r0, #1
 801fa6c:	e710      	b.n	801f890 <__ieee754_pow+0x210>
 801fa6e:	bf00      	nop
 801fa70:	60000000 	.word	0x60000000
 801fa74:	3ff71547 	.word	0x3ff71547
 801fa78:	f85ddf44 	.word	0xf85ddf44
 801fa7c:	3e54ae0b 	.word	0x3e54ae0b
 801fa80:	55555555 	.word	0x55555555
 801fa84:	3fd55555 	.word	0x3fd55555
 801fa88:	652b82fe 	.word	0x652b82fe
 801fa8c:	3ff71547 	.word	0x3ff71547
 801fa90:	3ff00000 	.word	0x3ff00000
 801fa94:	3fd00000 	.word	0x3fd00000
 801fa98:	3fe00000 	.word	0x3fe00000
 801fa9c:	408fffff 	.word	0x408fffff
 801faa0:	4bd5      	ldr	r3, [pc, #852]	@ (801fdf8 <__ieee754_pow+0x778>)
 801faa2:	402b      	ands	r3, r5
 801faa4:	2200      	movs	r2, #0
 801faa6:	b92b      	cbnz	r3, 801fab4 <__ieee754_pow+0x434>
 801faa8:	4bd4      	ldr	r3, [pc, #848]	@ (801fdfc <__ieee754_pow+0x77c>)
 801faaa:	f7e0 fddd 	bl	8000668 <__aeabi_dmul>
 801faae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801fab2:	468b      	mov	fp, r1
 801fab4:	ea4f 532b 	mov.w	r3, fp, asr #20
 801fab8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801fabc:	4413      	add	r3, r2
 801fabe:	930a      	str	r3, [sp, #40]	@ 0x28
 801fac0:	4bcf      	ldr	r3, [pc, #828]	@ (801fe00 <__ieee754_pow+0x780>)
 801fac2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801fac6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801faca:	459b      	cmp	fp, r3
 801facc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801fad0:	dd08      	ble.n	801fae4 <__ieee754_pow+0x464>
 801fad2:	4bcc      	ldr	r3, [pc, #816]	@ (801fe04 <__ieee754_pow+0x784>)
 801fad4:	459b      	cmp	fp, r3
 801fad6:	f340 81a5 	ble.w	801fe24 <__ieee754_pow+0x7a4>
 801fada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fadc:	3301      	adds	r3, #1
 801fade:	930a      	str	r3, [sp, #40]	@ 0x28
 801fae0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801fae4:	f04f 0a00 	mov.w	sl, #0
 801fae8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801faec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801faee:	4bc6      	ldr	r3, [pc, #792]	@ (801fe08 <__ieee754_pow+0x788>)
 801faf0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801faf4:	ed93 7b00 	vldr	d7, [r3]
 801faf8:	4629      	mov	r1, r5
 801fafa:	ec53 2b17 	vmov	r2, r3, d7
 801fafe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fb02:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fb06:	f7e0 fbf7 	bl	80002f8 <__aeabi_dsub>
 801fb0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fb0e:	4606      	mov	r6, r0
 801fb10:	460f      	mov	r7, r1
 801fb12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fb16:	f7e0 fbf1 	bl	80002fc <__adddf3>
 801fb1a:	4602      	mov	r2, r0
 801fb1c:	460b      	mov	r3, r1
 801fb1e:	2000      	movs	r0, #0
 801fb20:	49ba      	ldr	r1, [pc, #744]	@ (801fe0c <__ieee754_pow+0x78c>)
 801fb22:	f7e0 fecb 	bl	80008bc <__aeabi_ddiv>
 801fb26:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801fb2a:	4602      	mov	r2, r0
 801fb2c:	460b      	mov	r3, r1
 801fb2e:	4630      	mov	r0, r6
 801fb30:	4639      	mov	r1, r7
 801fb32:	f7e0 fd99 	bl	8000668 <__aeabi_dmul>
 801fb36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fb3a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801fb3e:	106d      	asrs	r5, r5, #1
 801fb40:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801fb44:	f04f 0b00 	mov.w	fp, #0
 801fb48:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801fb4c:	4661      	mov	r1, ip
 801fb4e:	2200      	movs	r2, #0
 801fb50:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801fb54:	4658      	mov	r0, fp
 801fb56:	46e1      	mov	r9, ip
 801fb58:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801fb5c:	4614      	mov	r4, r2
 801fb5e:	461d      	mov	r5, r3
 801fb60:	f7e0 fd82 	bl	8000668 <__aeabi_dmul>
 801fb64:	4602      	mov	r2, r0
 801fb66:	460b      	mov	r3, r1
 801fb68:	4630      	mov	r0, r6
 801fb6a:	4639      	mov	r1, r7
 801fb6c:	f7e0 fbc4 	bl	80002f8 <__aeabi_dsub>
 801fb70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fb74:	4606      	mov	r6, r0
 801fb76:	460f      	mov	r7, r1
 801fb78:	4620      	mov	r0, r4
 801fb7a:	4629      	mov	r1, r5
 801fb7c:	f7e0 fbbc 	bl	80002f8 <__aeabi_dsub>
 801fb80:	4602      	mov	r2, r0
 801fb82:	460b      	mov	r3, r1
 801fb84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801fb88:	f7e0 fbb6 	bl	80002f8 <__aeabi_dsub>
 801fb8c:	465a      	mov	r2, fp
 801fb8e:	464b      	mov	r3, r9
 801fb90:	f7e0 fd6a 	bl	8000668 <__aeabi_dmul>
 801fb94:	4602      	mov	r2, r0
 801fb96:	460b      	mov	r3, r1
 801fb98:	4630      	mov	r0, r6
 801fb9a:	4639      	mov	r1, r7
 801fb9c:	f7e0 fbac 	bl	80002f8 <__aeabi_dsub>
 801fba0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801fba4:	f7e0 fd60 	bl	8000668 <__aeabi_dmul>
 801fba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fbac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fbb0:	4610      	mov	r0, r2
 801fbb2:	4619      	mov	r1, r3
 801fbb4:	f7e0 fd58 	bl	8000668 <__aeabi_dmul>
 801fbb8:	a37d      	add	r3, pc, #500	@ (adr r3, 801fdb0 <__ieee754_pow+0x730>)
 801fbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbbe:	4604      	mov	r4, r0
 801fbc0:	460d      	mov	r5, r1
 801fbc2:	f7e0 fd51 	bl	8000668 <__aeabi_dmul>
 801fbc6:	a37c      	add	r3, pc, #496	@ (adr r3, 801fdb8 <__ieee754_pow+0x738>)
 801fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbcc:	f7e0 fb96 	bl	80002fc <__adddf3>
 801fbd0:	4622      	mov	r2, r4
 801fbd2:	462b      	mov	r3, r5
 801fbd4:	f7e0 fd48 	bl	8000668 <__aeabi_dmul>
 801fbd8:	a379      	add	r3, pc, #484	@ (adr r3, 801fdc0 <__ieee754_pow+0x740>)
 801fbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbde:	f7e0 fb8d 	bl	80002fc <__adddf3>
 801fbe2:	4622      	mov	r2, r4
 801fbe4:	462b      	mov	r3, r5
 801fbe6:	f7e0 fd3f 	bl	8000668 <__aeabi_dmul>
 801fbea:	a377      	add	r3, pc, #476	@ (adr r3, 801fdc8 <__ieee754_pow+0x748>)
 801fbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbf0:	f7e0 fb84 	bl	80002fc <__adddf3>
 801fbf4:	4622      	mov	r2, r4
 801fbf6:	462b      	mov	r3, r5
 801fbf8:	f7e0 fd36 	bl	8000668 <__aeabi_dmul>
 801fbfc:	a374      	add	r3, pc, #464	@ (adr r3, 801fdd0 <__ieee754_pow+0x750>)
 801fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc02:	f7e0 fb7b 	bl	80002fc <__adddf3>
 801fc06:	4622      	mov	r2, r4
 801fc08:	462b      	mov	r3, r5
 801fc0a:	f7e0 fd2d 	bl	8000668 <__aeabi_dmul>
 801fc0e:	a372      	add	r3, pc, #456	@ (adr r3, 801fdd8 <__ieee754_pow+0x758>)
 801fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc14:	f7e0 fb72 	bl	80002fc <__adddf3>
 801fc18:	4622      	mov	r2, r4
 801fc1a:	4606      	mov	r6, r0
 801fc1c:	460f      	mov	r7, r1
 801fc1e:	462b      	mov	r3, r5
 801fc20:	4620      	mov	r0, r4
 801fc22:	4629      	mov	r1, r5
 801fc24:	f7e0 fd20 	bl	8000668 <__aeabi_dmul>
 801fc28:	4602      	mov	r2, r0
 801fc2a:	460b      	mov	r3, r1
 801fc2c:	4630      	mov	r0, r6
 801fc2e:	4639      	mov	r1, r7
 801fc30:	f7e0 fd1a 	bl	8000668 <__aeabi_dmul>
 801fc34:	465a      	mov	r2, fp
 801fc36:	4604      	mov	r4, r0
 801fc38:	460d      	mov	r5, r1
 801fc3a:	464b      	mov	r3, r9
 801fc3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fc40:	f7e0 fb5c 	bl	80002fc <__adddf3>
 801fc44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fc48:	f7e0 fd0e 	bl	8000668 <__aeabi_dmul>
 801fc4c:	4622      	mov	r2, r4
 801fc4e:	462b      	mov	r3, r5
 801fc50:	f7e0 fb54 	bl	80002fc <__adddf3>
 801fc54:	465a      	mov	r2, fp
 801fc56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fc5a:	464b      	mov	r3, r9
 801fc5c:	4658      	mov	r0, fp
 801fc5e:	4649      	mov	r1, r9
 801fc60:	f7e0 fd02 	bl	8000668 <__aeabi_dmul>
 801fc64:	4b6a      	ldr	r3, [pc, #424]	@ (801fe10 <__ieee754_pow+0x790>)
 801fc66:	2200      	movs	r2, #0
 801fc68:	4606      	mov	r6, r0
 801fc6a:	460f      	mov	r7, r1
 801fc6c:	f7e0 fb46 	bl	80002fc <__adddf3>
 801fc70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fc74:	f7e0 fb42 	bl	80002fc <__adddf3>
 801fc78:	46d8      	mov	r8, fp
 801fc7a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801fc7e:	460d      	mov	r5, r1
 801fc80:	465a      	mov	r2, fp
 801fc82:	460b      	mov	r3, r1
 801fc84:	4640      	mov	r0, r8
 801fc86:	4649      	mov	r1, r9
 801fc88:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801fc8c:	f7e0 fcec 	bl	8000668 <__aeabi_dmul>
 801fc90:	465c      	mov	r4, fp
 801fc92:	4680      	mov	r8, r0
 801fc94:	4689      	mov	r9, r1
 801fc96:	4b5e      	ldr	r3, [pc, #376]	@ (801fe10 <__ieee754_pow+0x790>)
 801fc98:	2200      	movs	r2, #0
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	4629      	mov	r1, r5
 801fc9e:	f7e0 fb2b 	bl	80002f8 <__aeabi_dsub>
 801fca2:	4632      	mov	r2, r6
 801fca4:	463b      	mov	r3, r7
 801fca6:	f7e0 fb27 	bl	80002f8 <__aeabi_dsub>
 801fcaa:	4602      	mov	r2, r0
 801fcac:	460b      	mov	r3, r1
 801fcae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801fcb2:	f7e0 fb21 	bl	80002f8 <__aeabi_dsub>
 801fcb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fcba:	f7e0 fcd5 	bl	8000668 <__aeabi_dmul>
 801fcbe:	4622      	mov	r2, r4
 801fcc0:	4606      	mov	r6, r0
 801fcc2:	460f      	mov	r7, r1
 801fcc4:	462b      	mov	r3, r5
 801fcc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fcca:	f7e0 fccd 	bl	8000668 <__aeabi_dmul>
 801fcce:	4602      	mov	r2, r0
 801fcd0:	460b      	mov	r3, r1
 801fcd2:	4630      	mov	r0, r6
 801fcd4:	4639      	mov	r1, r7
 801fcd6:	f7e0 fb11 	bl	80002fc <__adddf3>
 801fcda:	4606      	mov	r6, r0
 801fcdc:	460f      	mov	r7, r1
 801fcde:	4602      	mov	r2, r0
 801fce0:	460b      	mov	r3, r1
 801fce2:	4640      	mov	r0, r8
 801fce4:	4649      	mov	r1, r9
 801fce6:	f7e0 fb09 	bl	80002fc <__adddf3>
 801fcea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801fcee:	a33c      	add	r3, pc, #240	@ (adr r3, 801fde0 <__ieee754_pow+0x760>)
 801fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcf4:	4658      	mov	r0, fp
 801fcf6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801fcfa:	460d      	mov	r5, r1
 801fcfc:	f7e0 fcb4 	bl	8000668 <__aeabi_dmul>
 801fd00:	465c      	mov	r4, fp
 801fd02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fd06:	4642      	mov	r2, r8
 801fd08:	464b      	mov	r3, r9
 801fd0a:	4620      	mov	r0, r4
 801fd0c:	4629      	mov	r1, r5
 801fd0e:	f7e0 faf3 	bl	80002f8 <__aeabi_dsub>
 801fd12:	4602      	mov	r2, r0
 801fd14:	460b      	mov	r3, r1
 801fd16:	4630      	mov	r0, r6
 801fd18:	4639      	mov	r1, r7
 801fd1a:	f7e0 faed 	bl	80002f8 <__aeabi_dsub>
 801fd1e:	a332      	add	r3, pc, #200	@ (adr r3, 801fde8 <__ieee754_pow+0x768>)
 801fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd24:	f7e0 fca0 	bl	8000668 <__aeabi_dmul>
 801fd28:	a331      	add	r3, pc, #196	@ (adr r3, 801fdf0 <__ieee754_pow+0x770>)
 801fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd2e:	4606      	mov	r6, r0
 801fd30:	460f      	mov	r7, r1
 801fd32:	4620      	mov	r0, r4
 801fd34:	4629      	mov	r1, r5
 801fd36:	f7e0 fc97 	bl	8000668 <__aeabi_dmul>
 801fd3a:	4602      	mov	r2, r0
 801fd3c:	460b      	mov	r3, r1
 801fd3e:	4630      	mov	r0, r6
 801fd40:	4639      	mov	r1, r7
 801fd42:	f7e0 fadb 	bl	80002fc <__adddf3>
 801fd46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fd48:	4b32      	ldr	r3, [pc, #200]	@ (801fe14 <__ieee754_pow+0x794>)
 801fd4a:	4413      	add	r3, r2
 801fd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd50:	f7e0 fad4 	bl	80002fc <__adddf3>
 801fd54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fd58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fd5a:	f7e0 fc1b 	bl	8000594 <__aeabi_i2d>
 801fd5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fd60:	4b2d      	ldr	r3, [pc, #180]	@ (801fe18 <__ieee754_pow+0x798>)
 801fd62:	4413      	add	r3, r2
 801fd64:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fd68:	4606      	mov	r6, r0
 801fd6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fd6e:	460f      	mov	r7, r1
 801fd70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fd74:	f7e0 fac2 	bl	80002fc <__adddf3>
 801fd78:	4642      	mov	r2, r8
 801fd7a:	464b      	mov	r3, r9
 801fd7c:	f7e0 fabe 	bl	80002fc <__adddf3>
 801fd80:	4632      	mov	r2, r6
 801fd82:	463b      	mov	r3, r7
 801fd84:	f7e0 faba 	bl	80002fc <__adddf3>
 801fd88:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801fd8c:	4632      	mov	r2, r6
 801fd8e:	463b      	mov	r3, r7
 801fd90:	4658      	mov	r0, fp
 801fd92:	460d      	mov	r5, r1
 801fd94:	f7e0 fab0 	bl	80002f8 <__aeabi_dsub>
 801fd98:	4642      	mov	r2, r8
 801fd9a:	464b      	mov	r3, r9
 801fd9c:	f7e0 faac 	bl	80002f8 <__aeabi_dsub>
 801fda0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fda4:	f7e0 faa8 	bl	80002f8 <__aeabi_dsub>
 801fda8:	465c      	mov	r4, fp
 801fdaa:	4602      	mov	r2, r0
 801fdac:	e036      	b.n	801fe1c <__ieee754_pow+0x79c>
 801fdae:	bf00      	nop
 801fdb0:	4a454eef 	.word	0x4a454eef
 801fdb4:	3fca7e28 	.word	0x3fca7e28
 801fdb8:	93c9db65 	.word	0x93c9db65
 801fdbc:	3fcd864a 	.word	0x3fcd864a
 801fdc0:	a91d4101 	.word	0xa91d4101
 801fdc4:	3fd17460 	.word	0x3fd17460
 801fdc8:	518f264d 	.word	0x518f264d
 801fdcc:	3fd55555 	.word	0x3fd55555
 801fdd0:	db6fabff 	.word	0xdb6fabff
 801fdd4:	3fdb6db6 	.word	0x3fdb6db6
 801fdd8:	33333303 	.word	0x33333303
 801fddc:	3fe33333 	.word	0x3fe33333
 801fde0:	e0000000 	.word	0xe0000000
 801fde4:	3feec709 	.word	0x3feec709
 801fde8:	dc3a03fd 	.word	0xdc3a03fd
 801fdec:	3feec709 	.word	0x3feec709
 801fdf0:	145b01f5 	.word	0x145b01f5
 801fdf4:	be3e2fe0 	.word	0xbe3e2fe0
 801fdf8:	7ff00000 	.word	0x7ff00000
 801fdfc:	43400000 	.word	0x43400000
 801fe00:	0003988e 	.word	0x0003988e
 801fe04:	000bb679 	.word	0x000bb679
 801fe08:	08021d70 	.word	0x08021d70
 801fe0c:	3ff00000 	.word	0x3ff00000
 801fe10:	40080000 	.word	0x40080000
 801fe14:	08021d50 	.word	0x08021d50
 801fe18:	08021d60 	.word	0x08021d60
 801fe1c:	460b      	mov	r3, r1
 801fe1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fe22:	e5d7      	b.n	801f9d4 <__ieee754_pow+0x354>
 801fe24:	f04f 0a01 	mov.w	sl, #1
 801fe28:	e65e      	b.n	801fae8 <__ieee754_pow+0x468>
 801fe2a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80200fc <__ieee754_pow+0xa7c>)
 801fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe30:	4630      	mov	r0, r6
 801fe32:	4639      	mov	r1, r7
 801fe34:	f7e0 fa62 	bl	80002fc <__adddf3>
 801fe38:	4642      	mov	r2, r8
 801fe3a:	e9cd 0100 	strd	r0, r1, [sp]
 801fe3e:	464b      	mov	r3, r9
 801fe40:	4620      	mov	r0, r4
 801fe42:	4629      	mov	r1, r5
 801fe44:	f7e0 fa58 	bl	80002f8 <__aeabi_dsub>
 801fe48:	4602      	mov	r2, r0
 801fe4a:	460b      	mov	r3, r1
 801fe4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fe50:	f7e0 fe9a 	bl	8000b88 <__aeabi_dcmpgt>
 801fe54:	2800      	cmp	r0, #0
 801fe56:	f47f ae00 	bne.w	801fa5a <__ieee754_pow+0x3da>
 801fe5a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801fe5e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801fe62:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801fe66:	fa43 fa0a 	asr.w	sl, r3, sl
 801fe6a:	44da      	add	sl, fp
 801fe6c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801fe70:	489d      	ldr	r0, [pc, #628]	@ (80200e8 <__ieee754_pow+0xa68>)
 801fe72:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801fe76:	4108      	asrs	r0, r1
 801fe78:	ea00 030a 	and.w	r3, r0, sl
 801fe7c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801fe80:	f1c1 0114 	rsb	r1, r1, #20
 801fe84:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801fe88:	fa4a fa01 	asr.w	sl, sl, r1
 801fe8c:	f1bb 0f00 	cmp.w	fp, #0
 801fe90:	4640      	mov	r0, r8
 801fe92:	4649      	mov	r1, r9
 801fe94:	f04f 0200 	mov.w	r2, #0
 801fe98:	bfb8      	it	lt
 801fe9a:	f1ca 0a00 	rsblt	sl, sl, #0
 801fe9e:	f7e0 fa2b 	bl	80002f8 <__aeabi_dsub>
 801fea2:	4680      	mov	r8, r0
 801fea4:	4689      	mov	r9, r1
 801fea6:	4632      	mov	r2, r6
 801fea8:	463b      	mov	r3, r7
 801feaa:	4640      	mov	r0, r8
 801feac:	4649      	mov	r1, r9
 801feae:	f7e0 fa25 	bl	80002fc <__adddf3>
 801feb2:	2400      	movs	r4, #0
 801feb4:	a37c      	add	r3, pc, #496	@ (adr r3, 80200a8 <__ieee754_pow+0xa28>)
 801feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feba:	4620      	mov	r0, r4
 801febc:	460d      	mov	r5, r1
 801febe:	f7e0 fbd3 	bl	8000668 <__aeabi_dmul>
 801fec2:	4642      	mov	r2, r8
 801fec4:	e9cd 0100 	strd	r0, r1, [sp]
 801fec8:	464b      	mov	r3, r9
 801feca:	4620      	mov	r0, r4
 801fecc:	4629      	mov	r1, r5
 801fece:	f7e0 fa13 	bl	80002f8 <__aeabi_dsub>
 801fed2:	4602      	mov	r2, r0
 801fed4:	460b      	mov	r3, r1
 801fed6:	4630      	mov	r0, r6
 801fed8:	4639      	mov	r1, r7
 801feda:	f7e0 fa0d 	bl	80002f8 <__aeabi_dsub>
 801fede:	a374      	add	r3, pc, #464	@ (adr r3, 80200b0 <__ieee754_pow+0xa30>)
 801fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fee4:	f7e0 fbc0 	bl	8000668 <__aeabi_dmul>
 801fee8:	a373      	add	r3, pc, #460	@ (adr r3, 80200b8 <__ieee754_pow+0xa38>)
 801feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feee:	4680      	mov	r8, r0
 801fef0:	4689      	mov	r9, r1
 801fef2:	4620      	mov	r0, r4
 801fef4:	4629      	mov	r1, r5
 801fef6:	f7e0 fbb7 	bl	8000668 <__aeabi_dmul>
 801fefa:	4602      	mov	r2, r0
 801fefc:	460b      	mov	r3, r1
 801fefe:	4640      	mov	r0, r8
 801ff00:	4649      	mov	r1, r9
 801ff02:	f7e0 f9fb 	bl	80002fc <__adddf3>
 801ff06:	4604      	mov	r4, r0
 801ff08:	460d      	mov	r5, r1
 801ff0a:	4602      	mov	r2, r0
 801ff0c:	460b      	mov	r3, r1
 801ff0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ff12:	f7e0 f9f3 	bl	80002fc <__adddf3>
 801ff16:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ff1a:	4680      	mov	r8, r0
 801ff1c:	4689      	mov	r9, r1
 801ff1e:	f7e0 f9eb 	bl	80002f8 <__aeabi_dsub>
 801ff22:	4602      	mov	r2, r0
 801ff24:	460b      	mov	r3, r1
 801ff26:	4620      	mov	r0, r4
 801ff28:	4629      	mov	r1, r5
 801ff2a:	f7e0 f9e5 	bl	80002f8 <__aeabi_dsub>
 801ff2e:	4642      	mov	r2, r8
 801ff30:	4606      	mov	r6, r0
 801ff32:	460f      	mov	r7, r1
 801ff34:	464b      	mov	r3, r9
 801ff36:	4640      	mov	r0, r8
 801ff38:	4649      	mov	r1, r9
 801ff3a:	f7e0 fb95 	bl	8000668 <__aeabi_dmul>
 801ff3e:	a360      	add	r3, pc, #384	@ (adr r3, 80200c0 <__ieee754_pow+0xa40>)
 801ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff44:	4604      	mov	r4, r0
 801ff46:	460d      	mov	r5, r1
 801ff48:	f7e0 fb8e 	bl	8000668 <__aeabi_dmul>
 801ff4c:	a35e      	add	r3, pc, #376	@ (adr r3, 80200c8 <__ieee754_pow+0xa48>)
 801ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff52:	f7e0 f9d1 	bl	80002f8 <__aeabi_dsub>
 801ff56:	4622      	mov	r2, r4
 801ff58:	462b      	mov	r3, r5
 801ff5a:	f7e0 fb85 	bl	8000668 <__aeabi_dmul>
 801ff5e:	a35c      	add	r3, pc, #368	@ (adr r3, 80200d0 <__ieee754_pow+0xa50>)
 801ff60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff64:	f7e0 f9ca 	bl	80002fc <__adddf3>
 801ff68:	4622      	mov	r2, r4
 801ff6a:	462b      	mov	r3, r5
 801ff6c:	f7e0 fb7c 	bl	8000668 <__aeabi_dmul>
 801ff70:	a359      	add	r3, pc, #356	@ (adr r3, 80200d8 <__ieee754_pow+0xa58>)
 801ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff76:	f7e0 f9bf 	bl	80002f8 <__aeabi_dsub>
 801ff7a:	4622      	mov	r2, r4
 801ff7c:	462b      	mov	r3, r5
 801ff7e:	f7e0 fb73 	bl	8000668 <__aeabi_dmul>
 801ff82:	a357      	add	r3, pc, #348	@ (adr r3, 80200e0 <__ieee754_pow+0xa60>)
 801ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff88:	f7e0 f9b8 	bl	80002fc <__adddf3>
 801ff8c:	4622      	mov	r2, r4
 801ff8e:	462b      	mov	r3, r5
 801ff90:	f7e0 fb6a 	bl	8000668 <__aeabi_dmul>
 801ff94:	4602      	mov	r2, r0
 801ff96:	460b      	mov	r3, r1
 801ff98:	4640      	mov	r0, r8
 801ff9a:	4649      	mov	r1, r9
 801ff9c:	f7e0 f9ac 	bl	80002f8 <__aeabi_dsub>
 801ffa0:	4604      	mov	r4, r0
 801ffa2:	460d      	mov	r5, r1
 801ffa4:	4602      	mov	r2, r0
 801ffa6:	460b      	mov	r3, r1
 801ffa8:	4640      	mov	r0, r8
 801ffaa:	4649      	mov	r1, r9
 801ffac:	f7e0 fb5c 	bl	8000668 <__aeabi_dmul>
 801ffb0:	2200      	movs	r2, #0
 801ffb2:	e9cd 0100 	strd	r0, r1, [sp]
 801ffb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ffba:	4620      	mov	r0, r4
 801ffbc:	4629      	mov	r1, r5
 801ffbe:	f7e0 f99b 	bl	80002f8 <__aeabi_dsub>
 801ffc2:	4602      	mov	r2, r0
 801ffc4:	460b      	mov	r3, r1
 801ffc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ffca:	f7e0 fc77 	bl	80008bc <__aeabi_ddiv>
 801ffce:	4632      	mov	r2, r6
 801ffd0:	4604      	mov	r4, r0
 801ffd2:	460d      	mov	r5, r1
 801ffd4:	463b      	mov	r3, r7
 801ffd6:	4640      	mov	r0, r8
 801ffd8:	4649      	mov	r1, r9
 801ffda:	f7e0 fb45 	bl	8000668 <__aeabi_dmul>
 801ffde:	4632      	mov	r2, r6
 801ffe0:	463b      	mov	r3, r7
 801ffe2:	f7e0 f98b 	bl	80002fc <__adddf3>
 801ffe6:	4602      	mov	r2, r0
 801ffe8:	460b      	mov	r3, r1
 801ffea:	4620      	mov	r0, r4
 801ffec:	4629      	mov	r1, r5
 801ffee:	f7e0 f983 	bl	80002f8 <__aeabi_dsub>
 801fff2:	4642      	mov	r2, r8
 801fff4:	464b      	mov	r3, r9
 801fff6:	f7e0 f97f 	bl	80002f8 <__aeabi_dsub>
 801fffa:	460b      	mov	r3, r1
 801fffc:	4602      	mov	r2, r0
 801fffe:	493b      	ldr	r1, [pc, #236]	@ (80200ec <__ieee754_pow+0xa6c>)
 8020000:	2000      	movs	r0, #0
 8020002:	f7e0 f979 	bl	80002f8 <__aeabi_dsub>
 8020006:	ec41 0b10 	vmov	d0, r0, r1
 802000a:	ee10 3a90 	vmov	r3, s1
 802000e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8020012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020016:	da30      	bge.n	802007a <__ieee754_pow+0x9fa>
 8020018:	4650      	mov	r0, sl
 802001a:	f000 f875 	bl	8020108 <scalbn>
 802001e:	ec51 0b10 	vmov	r0, r1, d0
 8020022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020026:	f7ff bbd2 	b.w	801f7ce <__ieee754_pow+0x14e>
 802002a:	4c31      	ldr	r4, [pc, #196]	@ (80200f0 <__ieee754_pow+0xa70>)
 802002c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8020030:	42a3      	cmp	r3, r4
 8020032:	d91a      	bls.n	802006a <__ieee754_pow+0x9ea>
 8020034:	4b2f      	ldr	r3, [pc, #188]	@ (80200f4 <__ieee754_pow+0xa74>)
 8020036:	440b      	add	r3, r1
 8020038:	4303      	orrs	r3, r0
 802003a:	d009      	beq.n	8020050 <__ieee754_pow+0x9d0>
 802003c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020040:	2200      	movs	r2, #0
 8020042:	2300      	movs	r3, #0
 8020044:	f7e0 fd82 	bl	8000b4c <__aeabi_dcmplt>
 8020048:	3800      	subs	r0, #0
 802004a:	bf18      	it	ne
 802004c:	2001      	movne	r0, #1
 802004e:	e42b      	b.n	801f8a8 <__ieee754_pow+0x228>
 8020050:	4642      	mov	r2, r8
 8020052:	464b      	mov	r3, r9
 8020054:	f7e0 f950 	bl	80002f8 <__aeabi_dsub>
 8020058:	4632      	mov	r2, r6
 802005a:	463b      	mov	r3, r7
 802005c:	f7e0 fd8a 	bl	8000b74 <__aeabi_dcmpge>
 8020060:	2800      	cmp	r0, #0
 8020062:	d1eb      	bne.n	802003c <__ieee754_pow+0x9bc>
 8020064:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8020104 <__ieee754_pow+0xa84>
 8020068:	e6f7      	b.n	801fe5a <__ieee754_pow+0x7da>
 802006a:	469a      	mov	sl, r3
 802006c:	4b22      	ldr	r3, [pc, #136]	@ (80200f8 <__ieee754_pow+0xa78>)
 802006e:	459a      	cmp	sl, r3
 8020070:	f63f aef3 	bhi.w	801fe5a <__ieee754_pow+0x7da>
 8020074:	f8dd a010 	ldr.w	sl, [sp, #16]
 8020078:	e715      	b.n	801fea6 <__ieee754_pow+0x826>
 802007a:	ec51 0b10 	vmov	r0, r1, d0
 802007e:	4619      	mov	r1, r3
 8020080:	e7cf      	b.n	8020022 <__ieee754_pow+0x9a2>
 8020082:	491a      	ldr	r1, [pc, #104]	@ (80200ec <__ieee754_pow+0xa6c>)
 8020084:	2000      	movs	r0, #0
 8020086:	f7ff bb18 	b.w	801f6ba <__ieee754_pow+0x3a>
 802008a:	2000      	movs	r0, #0
 802008c:	2100      	movs	r1, #0
 802008e:	f7ff bb14 	b.w	801f6ba <__ieee754_pow+0x3a>
 8020092:	4630      	mov	r0, r6
 8020094:	4639      	mov	r1, r7
 8020096:	f7ff bb10 	b.w	801f6ba <__ieee754_pow+0x3a>
 802009a:	460c      	mov	r4, r1
 802009c:	f7ff bb5e 	b.w	801f75c <__ieee754_pow+0xdc>
 80200a0:	2400      	movs	r4, #0
 80200a2:	f7ff bb49 	b.w	801f738 <__ieee754_pow+0xb8>
 80200a6:	bf00      	nop
 80200a8:	00000000 	.word	0x00000000
 80200ac:	3fe62e43 	.word	0x3fe62e43
 80200b0:	fefa39ef 	.word	0xfefa39ef
 80200b4:	3fe62e42 	.word	0x3fe62e42
 80200b8:	0ca86c39 	.word	0x0ca86c39
 80200bc:	be205c61 	.word	0xbe205c61
 80200c0:	72bea4d0 	.word	0x72bea4d0
 80200c4:	3e663769 	.word	0x3e663769
 80200c8:	c5d26bf1 	.word	0xc5d26bf1
 80200cc:	3ebbbd41 	.word	0x3ebbbd41
 80200d0:	af25de2c 	.word	0xaf25de2c
 80200d4:	3f11566a 	.word	0x3f11566a
 80200d8:	16bebd93 	.word	0x16bebd93
 80200dc:	3f66c16c 	.word	0x3f66c16c
 80200e0:	5555553e 	.word	0x5555553e
 80200e4:	3fc55555 	.word	0x3fc55555
 80200e8:	fff00000 	.word	0xfff00000
 80200ec:	3ff00000 	.word	0x3ff00000
 80200f0:	4090cbff 	.word	0x4090cbff
 80200f4:	3f6f3400 	.word	0x3f6f3400
 80200f8:	3fe00000 	.word	0x3fe00000
 80200fc:	652b82fe 	.word	0x652b82fe
 8020100:	3c971547 	.word	0x3c971547
 8020104:	4090cc00 	.word	0x4090cc00

08020108 <scalbn>:
 8020108:	b570      	push	{r4, r5, r6, lr}
 802010a:	ec55 4b10 	vmov	r4, r5, d0
 802010e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020112:	4606      	mov	r6, r0
 8020114:	462b      	mov	r3, r5
 8020116:	b991      	cbnz	r1, 802013e <scalbn+0x36>
 8020118:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802011c:	4323      	orrs	r3, r4
 802011e:	d03d      	beq.n	802019c <scalbn+0x94>
 8020120:	4b35      	ldr	r3, [pc, #212]	@ (80201f8 <scalbn+0xf0>)
 8020122:	4620      	mov	r0, r4
 8020124:	4629      	mov	r1, r5
 8020126:	2200      	movs	r2, #0
 8020128:	f7e0 fa9e 	bl	8000668 <__aeabi_dmul>
 802012c:	4b33      	ldr	r3, [pc, #204]	@ (80201fc <scalbn+0xf4>)
 802012e:	429e      	cmp	r6, r3
 8020130:	4604      	mov	r4, r0
 8020132:	460d      	mov	r5, r1
 8020134:	da0f      	bge.n	8020156 <scalbn+0x4e>
 8020136:	a328      	add	r3, pc, #160	@ (adr r3, 80201d8 <scalbn+0xd0>)
 8020138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802013c:	e01e      	b.n	802017c <scalbn+0x74>
 802013e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8020142:	4291      	cmp	r1, r2
 8020144:	d10b      	bne.n	802015e <scalbn+0x56>
 8020146:	4622      	mov	r2, r4
 8020148:	4620      	mov	r0, r4
 802014a:	4629      	mov	r1, r5
 802014c:	f7e0 f8d6 	bl	80002fc <__adddf3>
 8020150:	4604      	mov	r4, r0
 8020152:	460d      	mov	r5, r1
 8020154:	e022      	b.n	802019c <scalbn+0x94>
 8020156:	460b      	mov	r3, r1
 8020158:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802015c:	3936      	subs	r1, #54	@ 0x36
 802015e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8020162:	4296      	cmp	r6, r2
 8020164:	dd0d      	ble.n	8020182 <scalbn+0x7a>
 8020166:	2d00      	cmp	r5, #0
 8020168:	a11d      	add	r1, pc, #116	@ (adr r1, 80201e0 <scalbn+0xd8>)
 802016a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802016e:	da02      	bge.n	8020176 <scalbn+0x6e>
 8020170:	a11d      	add	r1, pc, #116	@ (adr r1, 80201e8 <scalbn+0xe0>)
 8020172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020176:	a31a      	add	r3, pc, #104	@ (adr r3, 80201e0 <scalbn+0xd8>)
 8020178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802017c:	f7e0 fa74 	bl	8000668 <__aeabi_dmul>
 8020180:	e7e6      	b.n	8020150 <scalbn+0x48>
 8020182:	1872      	adds	r2, r6, r1
 8020184:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8020188:	428a      	cmp	r2, r1
 802018a:	dcec      	bgt.n	8020166 <scalbn+0x5e>
 802018c:	2a00      	cmp	r2, #0
 802018e:	dd08      	ble.n	80201a2 <scalbn+0x9a>
 8020190:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8020194:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8020198:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802019c:	ec45 4b10 	vmov	d0, r4, r5
 80201a0:	bd70      	pop	{r4, r5, r6, pc}
 80201a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80201a6:	da08      	bge.n	80201ba <scalbn+0xb2>
 80201a8:	2d00      	cmp	r5, #0
 80201aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80201d8 <scalbn+0xd0>)
 80201ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201b0:	dac1      	bge.n	8020136 <scalbn+0x2e>
 80201b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80201f0 <scalbn+0xe8>)
 80201b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201b8:	e7bd      	b.n	8020136 <scalbn+0x2e>
 80201ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80201be:	3236      	adds	r2, #54	@ 0x36
 80201c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80201c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80201c8:	4620      	mov	r0, r4
 80201ca:	4b0d      	ldr	r3, [pc, #52]	@ (8020200 <scalbn+0xf8>)
 80201cc:	4629      	mov	r1, r5
 80201ce:	2200      	movs	r2, #0
 80201d0:	e7d4      	b.n	802017c <scalbn+0x74>
 80201d2:	bf00      	nop
 80201d4:	f3af 8000 	nop.w
 80201d8:	c2f8f359 	.word	0xc2f8f359
 80201dc:	01a56e1f 	.word	0x01a56e1f
 80201e0:	8800759c 	.word	0x8800759c
 80201e4:	7e37e43c 	.word	0x7e37e43c
 80201e8:	8800759c 	.word	0x8800759c
 80201ec:	fe37e43c 	.word	0xfe37e43c
 80201f0:	c2f8f359 	.word	0xc2f8f359
 80201f4:	81a56e1f 	.word	0x81a56e1f
 80201f8:	43500000 	.word	0x43500000
 80201fc:	ffff3cb0 	.word	0xffff3cb0
 8020200:	3c900000 	.word	0x3c900000

08020204 <with_errno>:
 8020204:	b510      	push	{r4, lr}
 8020206:	ed2d 8b02 	vpush	{d8}
 802020a:	eeb0 8a40 	vmov.f32	s16, s0
 802020e:	eef0 8a60 	vmov.f32	s17, s1
 8020212:	4604      	mov	r4, r0
 8020214:	f7fe f898 	bl	801e348 <__errno>
 8020218:	eeb0 0a48 	vmov.f32	s0, s16
 802021c:	eef0 0a68 	vmov.f32	s1, s17
 8020220:	ecbd 8b02 	vpop	{d8}
 8020224:	6004      	str	r4, [r0, #0]
 8020226:	bd10      	pop	{r4, pc}

08020228 <xflow>:
 8020228:	4603      	mov	r3, r0
 802022a:	b507      	push	{r0, r1, r2, lr}
 802022c:	ec51 0b10 	vmov	r0, r1, d0
 8020230:	b183      	cbz	r3, 8020254 <xflow+0x2c>
 8020232:	4602      	mov	r2, r0
 8020234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020238:	e9cd 2300 	strd	r2, r3, [sp]
 802023c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020240:	f7e0 fa12 	bl	8000668 <__aeabi_dmul>
 8020244:	ec41 0b10 	vmov	d0, r0, r1
 8020248:	2022      	movs	r0, #34	@ 0x22
 802024a:	b003      	add	sp, #12
 802024c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020250:	f7ff bfd8 	b.w	8020204 <with_errno>
 8020254:	4602      	mov	r2, r0
 8020256:	460b      	mov	r3, r1
 8020258:	e7ee      	b.n	8020238 <xflow+0x10>
 802025a:	0000      	movs	r0, r0
 802025c:	0000      	movs	r0, r0
	...

08020260 <__math_uflow>:
 8020260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020268 <__math_uflow+0x8>
 8020264:	f7ff bfe0 	b.w	8020228 <xflow>
 8020268:	00000000 	.word	0x00000000
 802026c:	10000000 	.word	0x10000000

08020270 <__math_oflow>:
 8020270:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020278 <__math_oflow+0x8>
 8020274:	f7ff bfd8 	b.w	8020228 <xflow>
 8020278:	00000000 	.word	0x00000000
 802027c:	70000000 	.word	0x70000000

08020280 <_init>:
 8020280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020282:	bf00      	nop
 8020284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020286:	bc08      	pop	{r3}
 8020288:	469e      	mov	lr, r3
 802028a:	4770      	bx	lr

0802028c <_fini>:
 802028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802028e:	bf00      	nop
 8020290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020292:	bc08      	pop	{r3}
 8020294:	469e      	mov	lr, r3
 8020296:	4770      	bx	lr
